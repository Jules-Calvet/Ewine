
Complete_Ewine_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d720  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0801d860  0801d860  0002d860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e124  0801e124  0002e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e12c  0801e12c  0002e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e130  0801e130  0002e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  20000008  0801e134  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000860c  20000248  0801e374  00030248  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20008854  0801e374  00038854  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066d3e  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007301  00000000  00000000  00096fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033e8  00000000  00000000  0009e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030d0  00000000  00000000  000a16a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fd04  00000000  00000000  000a4770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cd70  00000000  00000000  000d4474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011af85  00000000  00000000  001111e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022c169  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f0a8  00000000  00000000  0022c1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000248 	.word	0x20000248
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d848 	.word	0x0801d848

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000024c 	.word	0x2000024c
 800017c:	0801d848 	.word	0x0801d848

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 8000f00:	f000 f82e 	bl	8000f60 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 8000f04:	f000 f848 	bl	8000f98 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 8000f08:	f000 f862 	bl	8000fd0 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n\n");
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <VL_TOF_Process+0x38>)
 8000f16:	f01a fb95 	bl	801b644 <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 8000f1a:	f000 f875 	bl	8001008 <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n\n");
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <VL_TOF_Process+0x3c>)
 8000f20:	f01a fb90 	bl	801b644 <puts>

  printf("\n ---- start TOF Right ---- \n\n");
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <VL_TOF_Process+0x40>)
 8000f26:	f01a fb8d 	bl	801b644 <puts>
  VL_53L1A2_SimpleRanging_Process_R();
 8000f2a:	f000 f8cb 	bl	80010c4 <VL_53L1A2_SimpleRanging_Process_R>
  printf("\n ---- end TOF Right ---- \n\n");
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <VL_TOF_Process+0x44>)
 8000f30:	f01a fb88 	bl	801b644 <puts>

  printf("\n ---- start TOF Left ---- \n\n");
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <VL_TOF_Process+0x48>)
 8000f36:	f01a fb85 	bl	801b644 <puts>
  VL_53L1A2_SimpleRanging_Process_L();
 8000f3a:	f000 f921 	bl	8001180 <VL_53L1A2_SimpleRanging_Process_L>
  printf("\n ---- end TOF Left ---- \n\n");
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <VL_TOF_Process+0x4c>)
 8000f40:	f01a fb80 	bl	801b644 <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	0801d860 	.word	0x0801d860
 8000f4c:	0801d880 	.word	0x0801d880
 8000f50:	0801d8a0 	.word	0x0801d8a0
 8000f54:	0801d8c0 	.word	0x0801d8c0
 8000f58:	0801d8dc 	.word	0x0801d8dc
 8000f5c:	0801d8fc 	.word	0x0801d8fc

08000f60 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f001 fd25 	bl	80029b4 <VL53L1A2_RANGING_SENSOR_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8000f6e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 8000f7a:	f01a fb63 	bl	801b644 <puts>
    while(1);
 8000f7e:	e7fe      	b.n	8000f7e <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  printf(" ****** Initialization TOF CENTER OK ****** \n");
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 8000f82:	f01a fb5f 	bl	801b644 <puts>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002a0 	.word	0x200002a0
 8000f90:	0801d918 	.word	0x0801d918
 8000f94:	0801d93c 	.word	0x0801d93c

08000f98 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f001 fd09 	bl	80029b4 <VL53L1A2_RANGING_SENSOR_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 8000fa6:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <VL_53L1A2_SimpleRanging_Init_R+0x30>)
 8000fb2:	f01a fb47 	bl	801b644 <puts>
    while(1);
 8000fb6:	e7fe      	b.n	8000fb6 <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }
  printf(" ****** Initialization TOF RIGHT OK ****** \n");
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <VL_53L1A2_SimpleRanging_Init_R+0x34>)
 8000fba:	f01a fb43 	bl	801b644 <puts>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200002a4 	.word	0x200002a4
 8000fc8:	0801d918 	.word	0x0801d918
 8000fcc:	0801d96c 	.word	0x0801d96c

08000fd0 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f001 fced 	bl	80029b4 <VL53L1A2_RANGING_SENSOR_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 8000fde:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <VL_53L1A2_SimpleRanging_Init_L+0x30>)
 8000fea:	f01a fb2b 	bl	801b644 <puts>
    while(1);
 8000fee:	e7fe      	b.n	8000fee <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }
  printf(" ****** Initialization TOF LEFT OK ****** \n");
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <VL_53L1A2_SimpleRanging_Init_L+0x34>)
 8000ff2:	f01a fb27 	bl	801b644 <puts>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002a8 	.word	0x200002a8
 8001000:	0801d918 	.word	0x0801d918
 8001004:	0801d998 	.word	0x0801d998

08001008 <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 800100e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001012:	4619      	mov	r1, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f001 fcf3 	bl	8002a00 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001022:	221e      	movs	r2, #30
 8001024:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8001038:	491e      	ldr	r1, [pc, #120]	; (80010b4 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 800103a:	2001      	movs	r0, #1
 800103c:	f001 fd08 	bl	8002a50 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8001040:	2101      	movs	r1, #1
 8001042:	2001      	movs	r0, #1
 8001044:	f001 fd54 	bl	8002af0 <VL53L1A2_RANGING_SENSOR_Start>
 8001048:	4603      	mov	r3, r0
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800104c:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8001058:	f01a faf4 	bl	801b644 <puts>
    while(1);
 800105c:	e7fe      	b.n	800105c <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800105e:	2301      	movs	r3, #1
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001062:	e01a      	b.n	800109a <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	2001      	movs	r0, #1
 800106a:	f001 fd19 	bl	8002aa0 <VL53L1A2_RANGING_SENSOR_GetDistance>
 800106e:	4603      	mov	r3, r0
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001072:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 800107c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8001080:	f01a fa44 	bl	801b50c <iprintf>
      print_result(&Result_Center);
 8001084:	463b      	mov	r3, r7
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f8d8 	bl	800123c <print_result>
    }

    HAL_Delay(1500);
 800108c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001090:	f015 fa9e 	bl	80165d0 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8001094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001096:	3301      	adds	r3, #1
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800109a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800109c:	2b05      	cmp	r3, #5
 800109e:	dde1      	ble.n	8001064 <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f001 fd4d 	bl	8002b40 <VL53L1A2_RANGING_SENSOR_Stop>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000264 	.word	0x20000264
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	0801d9c4 	.word	0x0801d9c4
 80010c0:	0801d9f0 	.word	0x0801d9f0

080010c4 <VL_53L1A2_SimpleRanging_Process_R>:

static void VL_53L1A2_SimpleRanging_Process_R(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  uint32_t Id_Right;
  RANGING_SENSOR_Result_t Result_Right;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_RIGHT, &Id_Right);
 80010ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ce:	4619      	mov	r1, r3
 80010d0:	2002      	movs	r0, #2
 80010d2:	f001 fc95 	bl	8002a00 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileRight.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  ProfileRight.TimingBudget = TIMING_BUDGET;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010de:	221e      	movs	r2, #30
 80010e0:	605a      	str	r2, [r3, #4]
  ProfileRight.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  ProfileRight.EnableAmbient = 0; // Enable: 1, Disable: 0
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  ProfileRight.EnableSignal = 0; // Enable: 1, Disable: 0
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_RIGHT, &ProfileRight);
 80010f4:	491e      	ldr	r1, [pc, #120]	; (8001170 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80010f6:	2002      	movs	r0, #2
 80010f8:	f001 fcaa 	bl	8002a50 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusRight = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_RIGHT, RS_MODE_BLOCKING_CONTINUOUS);
 80010fc:	2101      	movs	r1, #1
 80010fe:	2002      	movs	r0, #2
 8001100:	f001 fcf6 	bl	8002af0 <VL53L1A2_RANGING_SENSOR_Start>
 8001104:	4603      	mov	r3, r0
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001108:	6013      	str	r3, [r2, #0]

  if (statusRight != BSP_ERROR_NONE)
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <VL_53L1A2_SimpleRanging_Process_R+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Right failed\n");
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <VL_53L1A2_SimpleRanging_Process_R+0xb4>)
 8001114:	f01a fa96 	bl	801b644 <puts>
    while(1);
 8001118:	e7fe      	b.n	8001118 <VL_53L1A2_SimpleRanging_Process_R+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800111a:	2301      	movs	r3, #1
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800111e:	e01a      	b.n	8001156 <VL_53L1A2_SimpleRanging_Process_R+0x92>
    /* repetition mode */
    statusRight = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_RIGHT, &Result_Right);
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	2002      	movs	r0, #2
 8001126:	f001 fcbb 	bl	8002aa0 <VL53L1A2_RANGING_SENSOR_GetDistance>
 800112a:	4603      	mov	r3, r0
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 800112e:	6013      	str	r3, [r2, #0]

    if (statusRight == BSP_ERROR_NONE)
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <VL_53L1A2_SimpleRanging_Process_R+0x84>
    {
      printf("\n RIGHT %d\n",i);
 8001138:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <VL_53L1A2_SimpleRanging_Process_R+0xb8>)
 800113c:	f01a f9e6 	bl	801b50c <iprintf>
      print_result(&Result_Right);
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f87a 	bl	800123c <print_result>
    }

    HAL_Delay(1500);
 8001148:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800114c:	f015 fa40 	bl	80165d0 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8001150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001152:	3301      	adds	r3, #1
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001158:	2b05      	cmp	r3, #5
 800115a:	dde1      	ble.n	8001120 <VL_53L1A2_SimpleRanging_Process_R+0x5c>

  }
  statusRight = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_RIGHT);
 800115c:	2002      	movs	r0, #2
 800115e:	f001 fcef 	bl	8002b40 <VL53L1A2_RANGING_SENSOR_Stop>
 8001162:	4603      	mov	r3, r0
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000278 	.word	0x20000278
 8001174:	200002a4 	.word	0x200002a4
 8001178:	0801da00 	.word	0x0801da00
 800117c:	0801da2c 	.word	0x0801da2c

08001180 <VL_53L1A2_SimpleRanging_Process_L>:
static void VL_53L1A2_SimpleRanging_Process_L(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  uint32_t Id_Left;
  RANGING_SENSOR_Result_t Result_Left;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_LEFT, &Id_Left);
 8001186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800118a:	4619      	mov	r1, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f001 fc37 	bl	8002a00 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileLeft.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
  ProfileLeft.TimingBudget = TIMING_BUDGET;
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800119a:	221e      	movs	r2, #30
 800119c:	605a      	str	r2, [r3, #4]
  ProfileLeft.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  ProfileLeft.EnableAmbient = 0; // Enable: 1, Disable: 0
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  ProfileLeft.EnableSignal = 0; // Enable: 1, Disable: 0
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_LEFT, &ProfileLeft);
 80011b0:	491e      	ldr	r1, [pc, #120]	; (800122c <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f001 fc4c 	bl	8002a50 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusLeft = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_LEFT, RS_MODE_BLOCKING_CONTINUOUS);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 fc98 	bl	8002af0 <VL53L1A2_RANGING_SENSOR_Start>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80011c4:	6013      	str	r3, [r2, #0]

  if (statusLeft != BSP_ERROR_NONE)
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <VL_53L1A2_SimpleRanging_Process_L+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Left failed\n");
 80011ce:	4819      	ldr	r0, [pc, #100]	; (8001234 <VL_53L1A2_SimpleRanging_Process_L+0xb4>)
 80011d0:	f01a fa38 	bl	801b644 <puts>
    while(1);
 80011d4:	e7fe      	b.n	80011d4 <VL_53L1A2_SimpleRanging_Process_L+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 80011d6:	2301      	movs	r3, #1
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011da:	e01a      	b.n	8001212 <VL_53L1A2_SimpleRanging_Process_L+0x92>
    /* repetition mode */
    statusLeft = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_LEFT, &Result_Left);
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	2000      	movs	r0, #0
 80011e2:	f001 fc5d 	bl	8002aa0 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80011ea:	6013      	str	r3, [r2, #0]

    if (statusLeft == BSP_ERROR_NONE)
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <VL_53L1A2_SimpleRanging_Process_L+0x84>
    {
      printf("\n LEFT %d\n",i);
 80011f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80011f6:	4810      	ldr	r0, [pc, #64]	; (8001238 <VL_53L1A2_SimpleRanging_Process_L+0xb8>)
 80011f8:	f01a f988 	bl	801b50c <iprintf>
      print_result(&Result_Left);
 80011fc:	463b      	mov	r3, r7
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f81c 	bl	800123c <print_result>
    }

    HAL_Delay(1500);
 8001204:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001208:	f015 f9e2 	bl	80165d0 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 800120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800120e:	3301      	adds	r3, #1
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001214:	2b05      	cmp	r3, #5
 8001216:	dde1      	ble.n	80011dc <VL_53L1A2_SimpleRanging_Process_L+0x5c>

  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
 8001218:	2000      	movs	r0, #0
 800121a:	f001 fc91 	bl	8002b40 <VL53L1A2_RANGING_SENSOR_Stop>
 800121e:	4603      	mov	r3, r0
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	; 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000028c 	.word	0x2000028c
 8001230:	200002a8 	.word	0x200002a8
 8001234:	0801da38 	.word	0x0801da38
 8001238:	0801da64 	.word	0x0801da64

0800123c <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e03f      	b.n	80012ca <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3304      	adds	r3, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <print_result+0xa4>)
 8001260:	f01a f954 	bl	801b50c <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8001264:	2300      	movs	r3, #0
 8001266:	73bb      	strb	r3, [r7, #14]
 8001268:	e020      	b.n	80012ac <print_result+0x70>
    {
      printf("\n |---> ");
 800126a:	481e      	ldr	r0, [pc, #120]	; (80012e4 <print_result+0xa8>)
 800126c:	f01a f94e 	bl	801b50c <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	7bb8      	ldrb	r0, [r7, #14]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	4403      	add	r3, r0
 800127e:	3304      	adds	r3, #4
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8001286:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	7bb8      	ldrb	r0, [r7, #14]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	4403      	add	r3, r0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 800129c:	461a      	mov	r2, r3
 800129e:	4621      	mov	r1, r4
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <print_result+0xac>)
 80012a2:	f01a f933 	bl	801b50c <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73bb      	strb	r3, [r7, #14]
 80012ac:	7bb9      	ldrb	r1, [r7, #14]
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4403      	add	r3, r0
 80012bc:	3304      	adds	r3, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4299      	cmp	r1, r3
 80012c2:	d3d2      	bcc.n	800126a <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3301      	adds	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0bc      	beq.n	800124a <print_result+0xe>
    }
  }
  printf ("\n");
 80012d0:	200a      	movs	r0, #10
 80012d2:	f01a f933 	bl	801b53c <putchar>
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	0801da70 	.word	0x0801da70
 80012e4:	0801da80 	.word	0x0801da80
 80012e8:	0801da8c 	.word	0x0801da8c

080012ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	2004      	movs	r0, #4
 8001336:	f7ff ffd9 	bl	80012ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff ffd6 	bl	80012ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff ffd3 	bl	80012ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	2008      	movs	r0, #8
 8001348:	f7ff ffd0 	bl	80012ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2123      	movs	r1, #35	; 0x23
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_GPIO_Init+0x84>)
 8001352:	f015 fca7 	bl	8016ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001356:	2310      	movs	r3, #16
 8001358:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <MX_GPIO_Init+0x88>)
 8001368:	f015 fa36 	bl	80167d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800136c:	2323      	movs	r3, #35	; 0x23
 800136e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <MX_GPIO_Init+0x84>)
 8001382:	f015 fa29 	bl	80167d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001386:	2303      	movs	r3, #3
 8001388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001398:	f015 fa1e 	bl	80167d8 <HAL_GPIO_Init>

}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00

080013b0 <LL_AHB2_GRP1_EnableClock>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	43db      	mvns	r3, r3
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	4013      	ands	r3, r2
 800142c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_I2C3_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <MX_I2C3_Init+0x7c>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_I2C3_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_I2C3_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_I2C3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <MX_I2C3_Init+0x74>)
 8001478:	f015 fc2c 	bl	8016cd4 <HAL_I2C_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001482:	f000 fa09 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <MX_I2C3_Init+0x74>)
 800148a:	f016 fbd3 	bl	8017c34 <HAL_I2CEx_ConfigAnalogFilter>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001494:	f000 fa00 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_I2C3_Init+0x74>)
 800149c:	f016 fc15 	bl	8017cca <HAL_I2CEx_ConfigDigitalFilter>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f9f7 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002ac 	.word	0x200002ac
 80014b4:	40005c00 	.word	0x40005c00
 80014b8:	00707cbb 	.word	0x00707cbb

080014bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09c      	sub	sp, #112	; 0x70
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f019 fba3 	bl	801ac28 <memset>
  if(i2cHandle->Instance==I2C3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_I2C_MspInit+0x84>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d125      	bne.n	8001538 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014ec:	2308      	movs	r3, #8
 80014ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014f0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f018 f8c6 	bl	801968c <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001506:	f000 f9c7 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2004      	movs	r0, #4
 800150c:	f7ff ff50 	bl	80013b0 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001510:	2303      	movs	r3, #3
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001514:	2312      	movs	r3, #18
 8001516:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001520:	2304      	movs	r3, #4
 8001522:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <HAL_I2C_MspInit+0x88>)
 800152c:	f015 f954 	bl	80167d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001530:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001534:	f7ff ff55 	bl	80013e2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3770      	adds	r7, #112	; 0x70
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005c00 	.word	0x40005c00
 8001544:	48000800 	.word	0x48000800

08001548 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_I2C_MspDeInit+0x34>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10b      	bne.n	8001572 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800155a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800155e:	f7ff ff59 	bl	8001414 <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001562:	2101      	movs	r1, #1
 8001564:	4806      	ldr	r0, [pc, #24]	; (8001580 <HAL_I2C_MspDeInit+0x38>)
 8001566:	f015 faa7 	bl	8016ab8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800156a:	2102      	movs	r1, #2
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <HAL_I2C_MspDeInit+0x38>)
 800156e:	f015 faa3 	bl	8016ab8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005c00 	.word	0x40005c00
 8001580:	48000800 	.word	0x48000800

08001584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800158c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800159c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80015a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015ac:	e000      	b.n	80015b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80015ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f9      	beq.n	80015ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	f023 0218 	bic.w	r2, r3, #24
 80015e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e009      	b.n	8001624 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60ba      	str	r2, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffb3 	bl	8001584 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf1      	blt.n	8001610 <_write+0x12>
}
return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f014 ff7b 	bl	8016538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f883 	bl	800174c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001646:	f000 f8f7 	bl	8001838 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f7ff fe69 	bl	8001320 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800164e:	f000 fe4d 	bl	80022ec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001652:	f000 ff11 	bl	8002478 <MX_USB_PCD_Init>
  MX_I2C3_Init();
 8001656:	f7ff fef1 	bl	800143c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  //Tof Initialization
  VL_TOF_Init();
 800165a:	f7ff fc4f 	bl	8000efc <VL_TOF_Init>
  //mlx90614 Initialization
  if(mlx90614_init() == true)printf(" ****** Initialization MLX90614 OK ****** \n");
 800165e:	f000 f99f 	bl	80019a0 <mlx90614_init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <main+0x38>
 8001668:	482d      	ldr	r0, [pc, #180]	; (8001720 <main+0xe8>)
 800166a:	f019 ffeb 	bl	801b644 <puts>
 800166e:	e002      	b.n	8001676 <main+0x3e>
  else printf("Initialization Failed ! \n");
 8001670:	482c      	ldr	r0, [pc, #176]	; (8001724 <main+0xec>)
 8001672:	f019 ffe7 	bl	801b644 <puts>
  mlx90614.configReg.DualIRSensor = 0;
 8001676:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <main+0xf0>)
 8001678:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800167c:	f36f 1386 	bfc	r3, #6, #1
 8001680:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  mlx90614.configReg.SelectObjAmb = 1;
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <main+0xf0>)
 8001686:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800168a:	2101      	movs	r1, #1
 800168c:	f361 1305 	bfi	r3, r1, #4, #2
 8001690:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  mlx90614.configReg.FIR = 4;
 8001694:	4a24      	ldr	r2, [pc, #144]	; (8001728 <main+0xf0>)
 8001696:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800169a:	2104      	movs	r1, #4
 800169c:	f361 0302 	bfi	r3, r1, #0, #3
 80016a0:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  float temp = 0.0f;
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  float tobj = 0.0f;
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("\n\n ****** Start TOF Test ****** \n\n");
 80016b0:	481e      	ldr	r0, [pc, #120]	; (800172c <main+0xf4>)
 80016b2:	f019 ffc7 	bl	801b644 <puts>
	  VL_TOF_Process();
 80016b6:	f7ff fc2b 	bl	8000f10 <VL_TOF_Process>
	  printf("\n\n ****** End TOF Test ****** \n\n");
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <main+0xf8>)
 80016bc:	f019 ffc2 	bl	801b644 <puts>

	  printf("\n\n ****** Start MLX90614 Test ****** \n\n");
 80016c0:	481c      	ldr	r0, [pc, #112]	; (8001734 <main+0xfc>)
 80016c2:	f019 ffbf 	bl	801b644 <puts>
	  for(int i = 1 ; i < 10 ; i++ ){
 80016c6:	2301      	movs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e022      	b.n	8001712 <main+0xda>
		  printf("loop %d start\n",i);
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	481a      	ldr	r0, [pc, #104]	; (8001738 <main+0x100>)
 80016d0:	f019 ff1c 	bl	801b50c <iprintf>

		  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fa6c 	bl	8001bb4 <mlx90614_getAmbient>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <main+0xbe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff07 	bl	80004f8 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <main+0x104>)
 80016f0:	f019 ff0c 	bl	801b50c <iprintf>
 80016f4:	e002      	b.n	80016fc <main+0xc4>
		  else printf("Failed to read ambient temperature\n");
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <main+0x108>)
 80016f8:	f019 ffa4 	bl	801b644 <puts>

		  printf("loop %d end\n",i);
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <main+0x10c>)
 8001700:	f019 ff04 	bl	801b50c <iprintf>
		  HAL_Delay(2000);
 8001704:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001708:	f014 ff62 	bl	80165d0 <HAL_Delay>
	  for(int i = 1 ; i < 10 ; i++ ){
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b09      	cmp	r3, #9
 8001716:	ddd9      	ble.n	80016cc <main+0x94>
	  }
	  printf("\n\n ****** End MLX90614 Test ****** \n\n");
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <main+0x110>)
 800171a:	f019 ff93 	bl	801b644 <puts>
	  printf("\n\n ****** Start TOF Test ****** \n\n");
 800171e:	e7c7      	b.n	80016b0 <main+0x78>
 8001720:	0801dab0 	.word	0x0801dab0
 8001724:	0801dadc 	.word	0x0801dadc
 8001728:	20000300 	.word	0x20000300
 800172c:	0801daf8 	.word	0x0801daf8
 8001730:	0801db1c 	.word	0x0801db1c
 8001734:	0801db3c 	.word	0x0801db3c
 8001738:	0801db64 	.word	0x0801db64
 800173c:	0801db74 	.word	0x0801db74
 8001740:	0801db90 	.word	0x0801db90
 8001744:	0801dbb4 	.word	0x0801dbb4
 8001748:	0801dbc4 	.word	0x0801dbc4

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b09a      	sub	sp, #104	; 0x68
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2248      	movs	r2, #72	; 0x48
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f019 fa64 	bl	801ac28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001780:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001796:	f016 fbe7 	bl	8017f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff ff19 	bl	80015d2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <SystemClock_Config+0xe8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <SystemClock_Config+0xe8>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <SystemClock_Config+0xe8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80017bc:	2327      	movs	r3, #39	; 0x27
 80017be:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c6:	2301      	movs	r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d0:	2301      	movs	r3, #1
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017d8:	2300      	movs	r3, #0
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017dc:	2360      	movs	r3, #96	; 0x60
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f016 ff5d 	bl	80186a8 <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017f4:	f000 f850 	bl	8001898 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017f8:	236f      	movs	r3, #111	; 0x6f
 80017fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f017 fab9 	bl	8018d90 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001824:	f000 f838 	bl	8001898 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001828:	f018 f8a6 	bl	8019978 <HAL_RCCEx_EnableMSIPLLMode>
}
 800182c:	bf00      	nop
 800182e:	3768      	adds	r7, #104	; 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	58000400 	.word	0x58000400

08001838 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f019 f9ef 	bl	801ac28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800184a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	4618      	mov	r0, r3
 800185c:	f017 ff16 	bl	801968c <HAL_RCCEx_PeriphCLKConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001866:	f000 f817 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	; 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001886:	f014 fe77 	bl	8016578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40014800 	.word	0x40014800

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	2364      	movs	r3, #100	; 0x64
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2303      	movs	r3, #3
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	21b4      	movs	r1, #180	; 0xb4
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <mlx90614_read16+0x50>)
 80018c8:	f015 fcac 	bl	8017224 <HAL_I2C_Mem_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <mlx90614_read16+0x32>
    return false;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e009      	b.n	80018ea <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80018d6:	7b3b      	ldrb	r3, [r7, #12]
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7b7b      	ldrb	r3, [r7, #13]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	801a      	strh	r2, [r3, #0]
  return true;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002ac 	.word	0x200002ac

080018f8 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <mlx90614_calcTemperature+0x94>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	edc7 7a03 	vstr	s15, [r7, #12]
 800191a:	e02e      	b.n	800197a <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 800191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001990 <mlx90614_calcTemperature+0x98>
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <mlx90614_calcTemperature+0x94>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d01e      	beq.n	800197a <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 800193c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001940:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001994 <mlx90614_calcTemperature+0x9c>
 8001944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <mlx90614_calcTemperature+0x94>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d112      	bne.n	800197a <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8001954:	edd7 7a03 	vldr	s15, [r7, #12]
 8001958:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800195c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001960:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001968:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001998 <mlx90614_calcTemperature+0xa0>
 800196c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001970:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <mlx90614_calcTemperature+0xa4>)
 8001976:	f019 fe65 	bl	801b644 <puts>

			}
		}
	}
	return retTemp;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	ee07 3a90 	vmov	s15, r3
}
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000300 	.word	0x20000300
 8001990:	3ca3d70a 	.word	0x3ca3d70a
 8001994:	43889333 	.word	0x43889333
 8001998:	42000000 	.word	0x42000000
 800199c:	0801dbec 	.word	0x0801dbec

080019a0 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80019a4:	2234      	movs	r2, #52	; 0x34
 80019a6:	2100      	movs	r1, #0
 80019a8:	4821      	ldr	r0, [pc, #132]	; (8001a30 <mlx90614_init+0x90>)
 80019aa:	f019 f93d 	bl	801ac28 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <mlx90614_init+0x90>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80019b4:	2364      	movs	r3, #100	; 0x64
 80019b6:	2201      	movs	r2, #1
 80019b8:	21b4      	movs	r1, #180	; 0xb4
 80019ba:	481e      	ldr	r0, [pc, #120]	; (8001a34 <mlx90614_init+0x94>)
 80019bc:	f015 fd4c 	bl	8017458 <HAL_I2C_IsDeviceReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <mlx90614_init+0x2a>
    return false;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e030      	b.n	8001a2c <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80019ca:	491b      	ldr	r1, [pc, #108]	; (8001a38 <mlx90614_init+0x98>)
 80019cc:	2025      	movs	r0, #37	; 0x25
 80019ce:	f7ff ff69 	bl	80018a4 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 f832 	bl	8001a3c <mlx90614_readID>
 80019d8:	4603      	mov	r3, r0
 80019da:	f083 0301 	eor.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <mlx90614_init+0x48>
    return false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e021      	b.n	8001a2c <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f861 	bl	8001ab0 <mlx90614_getEmissivity>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <mlx90614_init+0x5e>
    return false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e016      	b.n	8001a2c <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f890 	bl	8001b24 <mlx90614_getMax>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <mlx90614_init+0x74>
    return false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e00b      	b.n	8001a2c <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 f8a9 	bl	8001b6c <mlx90614_getMin>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <mlx90614_init+0x8a>
    return false;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <mlx90614_init+0x8c>

  return true;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000300 	.word	0x20000300
 8001a34:	200002ac 	.word	0x200002ac
 8001a38:	20000330 	.word	0x20000330

08001a3c <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e028      	b.n	8001a9c <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	333c      	adds	r3, #60	; 0x3c
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f107 020a 	add.w	r2, r7, #10
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff21 	bl	80018a4 <mlx90614_read16>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <mlx90614_readID+0x36>
			return false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e018      	b.n	8001aa4 <mlx90614_readID+0x68>
		if(id != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a84:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 8001a86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <mlx90614_readID+0x70>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3314      	adds	r3, #20
 8001a92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	ddd3      	ble.n	8001a4a <mlx90614_readID+0xe>
	}
	return true;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000300 	.word	0x20000300

08001ab0 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8001ab8:	4917      	ldr	r1, [pc, #92]	; (8001b18 <mlx90614_getEmissivity+0x68>)
 8001aba:	2024      	movs	r0, #36	; 0x24
 8001abc:	f7ff fef2 	bl	80018a4 <mlx90614_read16>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d022      	beq.n	8001b0c <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <mlx90614_getEmissivity+0x6c>)
 8001ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001b20 <mlx90614_getEmissivity+0x70>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <mlx90614_getEmissivity+0x6c>)
 8001ae0:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <mlx90614_getEmissivity+0x6c>)
 8001aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001afa:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b20 <mlx90614_getEmissivity+0x70>
 8001afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000302 	.word	0x20000302
 8001b1c:	20000300 	.word	0x20000300
 8001b20:	477fff00 	.word	0x477fff00

08001b24 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8001b2c:	490d      	ldr	r1, [pc, #52]	; (8001b64 <mlx90614_getMax+0x40>)
 8001b2e:	2020      	movs	r0, #32
 8001b30:	f7ff feb8 	bl	80018a4 <mlx90614_read16>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00e      	beq.n	8001b58 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <mlx90614_getMax+0x44>)
 8001b42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <mlx90614_getMax+0x36>
	}
	return false;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000030a 	.word	0x2000030a
 8001b68:	20000300 	.word	0x20000300

08001b6c <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8001b74:	490d      	ldr	r1, [pc, #52]	; (8001bac <mlx90614_getMin+0x40>)
 8001b76:	2021      	movs	r0, #33	; 0x21
 8001b78:	f7ff fe94 	bl	80018a4 <mlx90614_read16>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00e      	beq.n	8001ba0 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <mlx90614_getMin+0x44>)
 8001b8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <mlx90614_getMin+0x36>
	}
	return false;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000030c 	.word	0x2000030c
 8001bb0:	20000300 	.word	0x20000300

08001bb4 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 8001bbc:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <mlx90614_getAmbient+0x40>)
 8001bbe:	2006      	movs	r0, #6
 8001bc0:	f7ff fe70 	bl	80018a4 <mlx90614_read16>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00f      	beq.n	8001bea <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <mlx90614_getAmbient+0x44>)
 8001bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe8e 	bl	80018f8 <mlx90614_calcTemperature>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <mlx90614_getAmbient+0x38>
	}
	return false;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000304 	.word	0x20000304
 8001bf8:	20000300 	.word	0x20000300

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	201a      	movs	r0, #26
 8001c52:	f014 fd99 	bl	8016788 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c56:	201a      	movs	r0, #26
 8001c58:	f014 fdb0 	bl	80167bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001c5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c60:	f7ff ffd3 	bl	8001c0a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c64:	f107 0208 	add.w	r2, r7, #8
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f017 fa7a 	bl	8019168 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c74:	f017 fa62 	bl	801913c <HAL_RCC_GetPCLK2Freq>
 8001c78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_InitTick+0x8c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	3b01      	subs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_InitTick+0x90>)
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_InitTick+0x94>)
 8001c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_InitTick+0x90>)
 8001c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c94:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <HAL_InitTick+0x90>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_InitTick+0x90>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_InitTick+0x90>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <HAL_InitTick+0x90>)
 8001caa:	f017 ff7c 	bl	8019ba6 <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_InitTick+0x90>)
 8001cb6:	f017 ffd7 	bl	8019c68 <HAL_TIM_Base_Start_IT>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	20000334 	.word	0x20000334
 8001cd0:	40014800 	.word	0x40014800

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d32:	f017 ffe7 	bl	8019d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000334 	.word	0x20000334

08001d40 <LL_AHB2_GRP1_EnableClock>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_APB1_GRP1_EnableClock>:
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_APB1_GRP1_DisableClock>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dba:	4013      	ands	r3, r2
 8001dbc:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <BSP_I2C1_Init+0x70>)
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <BSP_I2C1_Init+0x74>)
 8001dda:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <BSP_I2C1_Init+0x78>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	4918      	ldr	r1, [pc, #96]	; (8001e44 <BSP_I2C1_Init+0x78>)
 8001de4:	600a      	str	r2, [r1, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d122      	bne.n	8001e30 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <BSP_I2C1_Init+0x70>)
 8001dec:	f015 fc3b 	bl	8017666 <HAL_I2C_GetState>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11c      	bne.n	8001e30 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <BSP_I2C1_Init+0x70>)
 8001df8:	f000 f8ee 	bl	8001fd8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <BSP_I2C1_Init+0x70>)
 8001e04:	f000 f8a4 	bl	8001f50 <MX_I2C1_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001e0e:	f06f 0307 	mvn.w	r3, #7
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	e00c      	b.n	8001e30 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	; (8001e3c <BSP_I2C1_Init+0x70>)
 8001e1a:	f015 ff0b 	bl	8017c34 <HAL_I2CEx_ConfigAnalogFilter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001e24:	f06f 0307 	mvn.w	r3, #7
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	e001      	b.n	8001e30 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000380 	.word	0x20000380
 8001e40:	40005400 	.word	0x40005400
 8001e44:	200003d4 	.word	0x200003d4

08001e48 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <BSP_I2C1_DeInit+0x48>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d014      	beq.n	8001e84 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <BSP_I2C1_DeInit+0x48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <BSP_I2C1_DeInit+0x48>)
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <BSP_I2C1_DeInit+0x48>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <BSP_I2C1_DeInit+0x4c>)
 8001e6e:	f000 f8f7 	bl	8002060 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <BSP_I2C1_DeInit+0x4c>)
 8001e74:	f014 ffbd 	bl	8016df2 <HAL_I2C_DeInit>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001e7e:	f06f 0307 	mvn.w	r3, #7
 8001e82:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200003d4 	.word	0x200003d4
 8001e94:	20000380 	.word	0x20000380

08001e98 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	80fb      	strh	r3, [r7, #6]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	88f9      	ldrh	r1, [r7, #6]
 8001eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <BSP_I2C1_Send+0x50>)
 8001eba:	f014 ffc9 	bl	8016e50 <HAL_I2C_Master_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00c      	beq.n	8001ede <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001ec4:	4808      	ldr	r0, [pc, #32]	; (8001ee8 <BSP_I2C1_Send+0x50>)
 8001ec6:	f015 fbdc 	bl	8017682 <HAL_I2C_GetError>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d003      	beq.n	8001ed8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ed0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e002      	b.n	8001ede <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ed8:	f06f 0303 	mvn.w	r3, #3
 8001edc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000380 	.word	0x20000380

08001eec <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	88f9      	ldrh	r1, [r7, #6]
 8001f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <BSP_I2C1_Recv+0x50>)
 8001f0e:	f015 f893 	bl	8017038 <HAL_I2C_Master_Receive>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00c      	beq.n	8001f32 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <BSP_I2C1_Recv+0x50>)
 8001f1a:	f015 fbb2 	bl	8017682 <HAL_I2C_GetError>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d003      	beq.n	8001f2c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f24:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e002      	b.n	8001f32 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f2c:	f06f 0303 	mvn.w	r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000380 	.word	0x20000380

08001f40 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f44:	f014 fb2c 	bl	80165a0 <HAL_GetTick>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <MX_I2C1_Init+0x80>)
 8001f60:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <MX_I2C1_Init+0x84>)
 8001f66:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f014 fe9e 	bl	8016cd4 <HAL_I2C_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f015 fe45 	bl	8017c34 <HAL_I2CEx_ConfigAnalogFilter>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f015 fe87 	bl	8017cca <HAL_I2CEx_ConfigDigitalFilter>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	00707cbb 	.word	0x00707cbb

08001fd8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b09c      	sub	sp, #112	; 0x70
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2250      	movs	r2, #80	; 0x50
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f018 fe1d 	bl	801ac28 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f017 fb45 	bl	801968c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2002      	movs	r0, #2
 8002004:	f7ff fe9c 	bl	8001d40 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	2312      	movs	r3, #18
 8002010:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800201a:	2304      	movs	r3, #4
 800201c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800201e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002022:	4619      	mov	r1, r3
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <I2C1_MspInit+0x84>)
 8002026:	f014 fbd7 	bl	80167d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800203c:	2304      	movs	r3, #4
 800203e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002040:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <I2C1_MspInit+0x84>)
 8002048:	f014 fbc6 	bl	80167d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002050:	f7ff fe8f 	bl	8001d72 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002054:	bf00      	nop
 8002056:	3770      	adds	r7, #112	; 0x70
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	48000400 	.word	0x48000400

08002060 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002068:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800206c:	f7ff fe9a 	bl	8001da4 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <I2C1_MspDeInit+0x2c>)
 8002076:	f014 fd1f 	bl	8016ab8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800207a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <I2C1_MspDeInit+0x2c>)
 8002080:	f014 fd1a 	bl	8016ab8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	48000400 	.word	0x48000400

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f018 fd85 	bl	801abb8 <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	e7fe      	b.n	80020d2 <_exit+0x12>

080020d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e00a      	b.n	80020fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e6:	f3af 8000 	nop.w
 80020ea:	4601      	mov	r1, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	b2ca      	uxtb	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbf0      	blt.n	80020e6 <_read+0x12>
  }

  return len;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_close>:
  }
  return len;
}

int _close(int file)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002136:	605a      	str	r2, [r3, #4]
  return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_isatty>:

int _isatty(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f018 fd06 	bl	801abb8 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20030000 	.word	0x20030000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	200003d8 	.word	0x200003d8
 80021e0:	20008858 	.word	0x20008858

080021e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <SystemInit+0x98>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <SystemInit+0x98>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002210:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <SystemInit+0x9c>)
 800221e:	4013      	ands	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222e:	f023 0305 	bic.w	r3, r3, #5
 8002232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <SystemInit+0xa0>)
 8002250:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <SystemInit+0xa0>)
 8002258:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00
 8002280:	faf6fefb 	.word	0xfaf6fefb
 8002284:	22041000 	.word	0x22041000

08002288 <LL_AHB2_GRP1_EnableClock>:
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_APB2_GRP1_EnableClock>:
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <MX_USART1_UART_Init+0x94>)
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <MX_USART1_UART_Init+0x98>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <MX_USART1_UART_Init+0x94>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002304:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002314:	220c      	movs	r2, #12
 8002316:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002320:	2200      	movs	r2, #0
 8002322:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002326:	2200      	movs	r2, #0
 8002328:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4812      	ldr	r0, [pc, #72]	; (8002380 <MX_USART1_UART_Init+0x94>)
 8002338:	f017 fece 	bl	801a0d8 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002342:	f7ff faa9 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002346:	2100      	movs	r1, #0
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800234a:	f018 fb2e 	bl	801a9aa <HAL_UARTEx_SetTxFifoThreshold>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002354:	f7ff faa0 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002358:	2100      	movs	r1, #0
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800235c:	f018 fb63 	bl	801aa26 <HAL_UARTEx_SetRxFifoThreshold>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002366:	f7ff fa97 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_USART1_UART_Init+0x94>)
 800236c:	f018 fae4 	bl	801a938 <HAL_UARTEx_DisableFifoMode>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002376:	f7ff fa8f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200003dc 	.word	0x200003dc
 8002384:	40013800 	.word	0x40013800

08002388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b09c      	sub	sp, #112	; 0x70
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2250      	movs	r2, #80	; 0x50
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f018 fc3d 	bl	801ac28 <memset>
  if(uartHandle->Instance==USART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_UART_MspInit+0x84>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d124      	bne.n	8002402 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f017 f961 	bl	801968c <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023d0:	f7ff fa62 	bl	8001898 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023d8:	f7ff ff6f 	bl	80022ba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	2002      	movs	r0, #2
 80023de:	f7ff ff53 	bl	8002288 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f2:	2307      	movs	r3, #7
 80023f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <HAL_UART_MspInit+0x88>)
 80023fe:	f014 f9eb 	bl	80167d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002402:	bf00      	nop
 8002404:	3770      	adds	r7, #112	; 0x70
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40013800 	.word	0x40013800
 8002410:	48000400 	.word	0x48000400

08002414 <LL_AHB2_GRP1_EnableClock>:
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_APB1_GRP1_EnableClock>:
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <MX_USB_PCD_Init+0x4c>)
 8002480:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 8002484:	2208      	movs	r2, #8
 8002486:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 800248a:	2202      	movs	r2, #2
 800248c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 8002490:	2202      	movs	r2, #2
 8002492:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_USB_PCD_Init+0x48>)
 80024ae:	f015 fc58 	bl	8017d62 <HAL_PCD_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80024b8:	f7ff f9ee 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000470 	.word	0x20000470
 80024c4:	40006800 	.word	0x40006800

080024c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09c      	sub	sp, #112	; 0x70
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2250      	movs	r2, #80	; 0x50
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f018 fb9d 	bl	801ac28 <memset>
  if(pcdHandle->Instance==USB)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_PCD_MspInit+0xa8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d136      	bne.n	8002566 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80024fe:	2318      	movs	r3, #24
 8002500:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002506:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800250e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002512:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002518:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800251a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4618      	mov	r0, r3
 8002526:	f017 f8b1 	bl	801968c <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002530:	f7ff f9b2 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	2001      	movs	r0, #1
 8002536:	f7ff ff6d 	bl	8002414 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800253a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800254c:	230a      	movs	r3, #10
 800254e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f014 f93d 	bl	80167d8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800255e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002562:	f7ff ff70 	bl	8002446 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3770      	adds	r7, #112	; 0x70
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40006800 	.word	0x40006800

08002574 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002574:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002576:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002578:	3304      	adds	r3, #4

0800257a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800257e:	d3f9      	bcc.n	8002574 <CopyDataInit>
  bx lr
 8002580:	4770      	bx	lr

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002582:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002584:	3004      	adds	r0, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002586:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>
  bx lr
 800258a:	4770      	bx	lr

0800258c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800258e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002590:	f7ff fe28 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <LoopForever+0x6>)
 8002596:	490c      	ldr	r1, [pc, #48]	; (80025c8 <LoopForever+0xa>)
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <LoopForever+0xe>)
 800259a:	2300      	movs	r3, #0
 800259c:	f7ff ffed 	bl	800257a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <LoopForever+0x12>)
 80025a2:	490c      	ldr	r1, [pc, #48]	; (80025d4 <LoopForever+0x16>)
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <LoopForever+0x1a>)
 80025a6:	2300      	movs	r3, #0
 80025a8:	f7ff ffe7 	bl	800257a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <LoopForever+0x1e>)
 80025ae:	490c      	ldr	r1, [pc, #48]	; (80025e0 <LoopForever+0x22>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	f7ff ffe8 	bl	8002586 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025b6:	f018 fb05 	bl	801abc4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80025ba:	f7ff f83d 	bl	8001638 <main>

080025be <LoopForever>:

LoopForever:
  b LoopForever
 80025be:	e7fe      	b.n	80025be <LoopForever>
  ldr   r0, =_estack
 80025c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000248 	.word	0x20000248
 80025cc:	0801e134 	.word	0x0801e134
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80025d0:	20030000 	.word	0x20030000
 80025d4:	20030000 	.word	0x20030000
 80025d8:	0801e374 	.word	0x0801e374
  INIT_BSS _sbss, _ebss
 80025dc:	20000248 	.word	0x20000248
 80025e0:	20008854 	.word	0x20008854

080025e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC1_IRQHandler>

080025e6 <LL_AHB2_GRP1_EnableClock>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <VL53L1A2_Init+0xe4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	4934      	ldr	r1, [pc, #208]	; (80026fc <VL53L1A2_Init+0xe4>)
 800262a:	600a      	str	r2, [r1, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d154      	bne.n	80026da <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8002630:	f000 f8d4 	bl	80027dc <_I2cFailRecover>
 8002634:	4602      	mov	r2, r0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4313      	orrs	r3, r2
 800263a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800263c:	f7ff fbc6 	bl	8001dcc <BSP_I2C1_Init>
 8002640:	4602      	mov	r2, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d147      	bne.n	80026de <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800264e:	463a      	mov	r2, r7
 8002650:	2302      	movs	r3, #2
 8002652:	2100      	movs	r1, #0
 8002654:	2086      	movs	r0, #134	; 0x86
 8002656:	f000 f953 	bl	8002900 <_ExpanderRd>
 800265a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13f      	bne.n	80026e2 <VL53L1A2_Init+0xca>
 8002662:	783b      	ldrb	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d13c      	bne.n	80026e2 <VL53L1A2_Init+0xca>
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b16      	cmp	r3, #22
 800266c:	d139      	bne.n	80026e2 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800266e:	463a      	mov	r2, r7
 8002670:	2302      	movs	r3, #2
 8002672:	2100      	movs	r1, #0
 8002674:	2084      	movs	r0, #132	; 0x84
 8002676:	f000 f943 	bl	8002900 <_ExpanderRd>
 800267a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d131      	bne.n	80026e6 <VL53L1A2_Init+0xce>
 8002682:	783b      	ldrb	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d12e      	bne.n	80026e6 <VL53L1A2_Init+0xce>
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b16      	cmp	r3, #22
 800268c:	d12b      	bne.n	80026e6 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <VL53L1A2_Init+0xe8>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8002694:	23ff      	movs	r3, #255	; 0xff
 8002696:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8002698:	23ff      	movs	r3, #255	; 0xff
 800269a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800269c:	463a      	mov	r2, r7
 800269e:	2302      	movs	r3, #2
 80026a0:	2114      	movs	r1, #20
 80026a2:	2086      	movs	r0, #134	; 0x86
 80026a4:	f000 f95e 	bl	8002964 <_ExpanderWR>
 80026a8:	6078      	str	r0, [r7, #4]

	  if (status)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11c      	bne.n	80026ea <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80026b0:	23ff      	movs	r3, #255	; 0xff
 80026b2:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80026b4:	23bf      	movs	r3, #191	; 0xbf
 80026b6:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80026b8:	463a      	mov	r2, r7
 80026ba:	2302      	movs	r3, #2
 80026bc:	2114      	movs	r1, #20
 80026be:	2084      	movs	r0, #132	; 0x84
 80026c0:	f000 f950 	bl	8002964 <_ExpanderWR>
 80026c4:	6078      	str	r0, [r7, #4]

	  if (status)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d110      	bne.n	80026ee <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <VL53L1A2_Init+0xe8>)
 80026ce:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80026d2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80026d4:	f000 f8f4 	bl	80028c0 <_ExpandersSetAllIO>
 80026d8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80026da:	bf00      	nop
 80026dc:	e008      	b.n	80026f0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80026de:	bf00      	nop
 80026e0:	e006      	b.n	80026f0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80026e2:	bf00      	nop
 80026e4:	e004      	b.n	80026f0 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80026e6:	bf00      	nop
 80026e8:	e002      	b.n	80026f0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80026ea:	bf00      	nop
 80026ec:	e000      	b.n	80026f0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80026ee:	bf00      	nop
  return status;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000764 	.word	0x20000764
 8002700:	20000768 	.word	0x20000768

08002704 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	460a      	mov	r2, r1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	4613      	mov	r3, r2
 8002712:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d037      	beq.n	800278a <VL53L1A2_ResetId+0x86>
 800271a:	2b02      	cmp	r3, #2
 800271c:	dc4e      	bgt.n	80027bc <VL53L1A2_ResetId+0xb8>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <VL53L1A2_ResetId+0x54>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d14a      	bne.n	80027bc <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002728:	78db      	ldrb	r3, [r3, #3]
 800272a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002732:	70da      	strb	r2, [r3, #3]

      if (state)
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 800273c:	78db      	ldrb	r3, [r3, #3]
 800273e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002746:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8002748:	2301      	movs	r3, #1
 800274a:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <VL53L1A2_ResetId+0xd0>)
 800274c:	2113      	movs	r1, #19
 800274e:	2084      	movs	r0, #132	; 0x84
 8002750:	f000 f908 	bl	8002964 <_ExpanderWR>
 8002754:	60f8      	str	r0, [r7, #12]
      break;
 8002756:	e035      	b.n	80027c4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002764:	705a      	strb	r2, [r3, #1]

      if (state)
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002778:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800277a:	2301      	movs	r3, #1
 800277c:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <VL53L1A2_ResetId+0xd4>)
 800277e:	2113      	movs	r1, #19
 8002780:	2086      	movs	r0, #134	; 0x86
 8002782:	f000 f8ef 	bl	8002964 <_ExpanderWR>
 8002786:	60f8      	str	r0, [r7, #12]
      break;
 8002788:	e01c      	b.n	80027c4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 8002796:	705a      	strb	r2, [r3, #1]

      if (state)
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <VL53L1A2_ResetId+0xcc>)
 80027aa:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80027ac:	2301      	movs	r3, #1
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <VL53L1A2_ResetId+0xd4>)
 80027b0:	2113      	movs	r1, #19
 80027b2:	2086      	movs	r0, #134	; 0x86
 80027b4:	f000 f8d6 	bl	8002964 <_ExpanderWR>
 80027b8:	60f8      	str	r0, [r7, #12]
      break;
 80027ba:	e003      	b.n	80027c4 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	60fb      	str	r3, [r7, #12]
      goto done;
 80027c2:	e000      	b.n	80027c6 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80027c4:	bf00      	nop
  return status;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000768 	.word	0x20000768
 80027d4:	2000076b 	.word	0x2000076b
 80027d8:	20000769 	.word	0x20000769

080027dc <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <_I2cFailRecover+0xdc>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e05e      	b.n	80028b0 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7ff fef7 	bl	80025e6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027fe:	2311      	movs	r3, #17
 8002800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002802:	2301      	movs	r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002806:	463b      	mov	r3, r7
 8002808:	4619      	mov	r1, r3
 800280a:	482c      	ldr	r0, [pc, #176]	; (80028bc <_I2cFailRecover+0xe0>)
 800280c:	f013 ffe4 	bl	80167d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8002810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002814:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002816:	2311      	movs	r3, #17
 8002818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4826      	ldr	r0, [pc, #152]	; (80028bc <_I2cFailRecover+0xe0>)
 8002824:	f013 ffd8 	bl	80167d8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8002828:	2201      	movs	r2, #1
 800282a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800282e:	4823      	ldr	r0, [pc, #140]	; (80028bc <_I2cFailRecover+0xe0>)
 8002830:	f014 fa38 	bl	8016ca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800283a:	4820      	ldr	r0, [pc, #128]	; (80028bc <_I2cFailRecover+0xe0>)
 800283c:	f014 fa32 	bl	8016ca4 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
 8002844:	e014      	b.n	8002870 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284c:	481b      	ldr	r0, [pc, #108]	; (80028bc <_I2cFailRecover+0xe0>)
 800284e:	f014 fa29 	bl	8016ca4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f013 febc 	bl	80165d0 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800285e:	4817      	ldr	r0, [pc, #92]	; (80028bc <_I2cFailRecover+0xe0>)
 8002860:	f014 fa20 	bl	8016ca4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002864:	2001      	movs	r0, #1
 8002866:	f013 feb3 	bl	80165d0 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	3301      	adds	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d9e7      	bls.n	8002846 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8002876:	7dbb      	ldrb	r3, [r7, #22]
 8002878:	3301      	adds	r3, #1
 800287a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800287c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002880:	480e      	ldr	r0, [pc, #56]	; (80028bc <_I2cFailRecover+0xe0>)
 8002882:	f014 f9f7 	bl	8016c74 <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <_I2cFailRecover+0xb6>
 800288c:	7dbb      	ldrb	r3, [r7, #22]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d9d6      	bls.n	8002840 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8002892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002896:	4809      	ldr	r0, [pc, #36]	; (80028bc <_I2cFailRecover+0xe0>)
 8002898:	f014 f9ec 	bl	8016c74 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80028a2:	f06f 0304 	mvn.w	r3, #4
 80028a6:	e003      	b.n	80028b0 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <_I2cFailRecover+0xdc>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000076c 	.word	0x2000076c
 80028bc:	48000400 	.word	0x48000400

080028c0 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80028c6:	2302      	movs	r3, #2
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <_ExpandersSetAllIO+0x38>)
 80028ca:	2112      	movs	r1, #18
 80028cc:	2086      	movs	r0, #134	; 0x86
 80028ce:	f000 f849 	bl	8002964 <_ExpanderWR>
 80028d2:	6078      	str	r0, [r7, #4]

  if (status)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80028da:	2302      	movs	r3, #2
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <_ExpandersSetAllIO+0x3c>)
 80028de:	2112      	movs	r1, #18
 80028e0:	2084      	movs	r0, #132	; 0x84
 80028e2:	f000 f83f 	bl	8002964 <_ExpanderWR>
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	e000      	b.n	80028ec <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80028ea:	bf00      	nop

done_err:
  return status;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000768 	.word	0x20000768
 80028fc:	2000076a 	.word	0x2000076a

08002900 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	b299      	uxth	r1, r3
 8002918:	f107 0213 	add.w	r2, r7, #19
 800291c:	2364      	movs	r3, #100	; 0x64
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	480f      	ldr	r0, [pc, #60]	; (8002960 <_ExpanderRd+0x60>)
 8002924:	f014 fa94 	bl	8016e50 <HAL_I2C_Master_Transmit>
 8002928:	4603      	mov	r3, r0
 800292a:	617b      	str	r3, [r7, #20]

    if (status)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d110      	bne.n	8002954 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b299      	uxth	r1, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b29a      	uxth	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <_ExpanderRd+0x60>)
 800294a:	f014 fb75 	bl	8017038 <HAL_I2C_Master_Receive>
 800294e:	4603      	mov	r3, r0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e000      	b.n	8002956 <_ExpanderRd+0x56>
      break;
 8002954:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8002956:	697b      	ldr	r3, [r7, #20]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000380 	.word	0x20000380

08002964 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	3301      	adds	r3, #1
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f018 f942 	bl	801ac0c <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	b299      	uxth	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	b29b      	uxth	r3, r3
 8002994:	f107 0214 	add.w	r2, r7, #20
 8002998:	2064      	movs	r0, #100	; 0x64
 800299a:	9000      	str	r0, [sp, #0]
 800299c:	4804      	ldr	r0, [pc, #16]	; (80029b0 <_ExpanderWR+0x4c>)
 800299e:	f014 fa57 	bl	8016e50 <HAL_I2C_Master_Transmit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000380 	.word	0x20000380

080029b4 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d903      	bls.n	80029ca <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029c2:	f06f 0301 	mvn.w	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e014      	b.n	80029f4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 80029ca:	f7ff fe25 	bl	8002618 <VL53L1A2_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80029d4:	f06f 0303 	mvn.w	r3, #3
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e00b      	b.n	80029f4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80029dc:	2101      	movs	r1, #1
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8d4 	bl	8002b8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80029e4:	2100      	movs	r1, #0
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8d0 	bl	8002b8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f90d 	bl	8002c0c <VL53L1CB_Probe>
 80029f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029f4:	68fb      	ldr	r3, [r7, #12]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d903      	bls.n	8002a18 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a10:	f06f 0301 	mvn.w	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e012      	b.n	8002a3e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	490b      	ldr	r1, [pc, #44]	; (8002a4c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da03      	bge.n	8002a3a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a32:	f06f 0304 	mvn.w	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e001      	b.n	8002a3e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000077c 	.word	0x2000077c
 8002a4c:	20000770 	.word	0x20000770

08002a50 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d903      	bls.n	8002a68 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a60:	f06f 0301 	mvn.w	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e012      	b.n	8002a8e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	490b      	ldr	r1, [pc, #44]	; (8002a9c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da03      	bge.n	8002a8a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a82:	f06f 0304 	mvn.w	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e001      	b.n	8002a8e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000077c 	.word	0x2000077c
 8002a9c:	20000770 	.word	0x20000770

08002aa0 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d903      	bls.n	8002ab8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ab0:	f06f 0301 	mvn.w	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e012      	b.n	8002ade <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	490b      	ldr	r1, [pc, #44]	; (8002aec <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da03      	bge.n	8002ada <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ad2:	f06f 0304 	mvn.w	r3, #4
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000077c 	.word	0x2000077c
 8002aec:	20000770 	.word	0x20000770

08002af0 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d903      	bls.n	8002b08 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b00:	f06f 0301 	mvn.w	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e012      	b.n	8002b2e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	490b      	ldr	r1, [pc, #44]	; (8002b3c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4798      	blx	r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da03      	bge.n	8002b2a <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b22:	f06f 0304 	mvn.w	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e001      	b.n	8002b2e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000077c 	.word	0x2000077c
 8002b3c:	20000770 	.word	0x20000770

08002b40 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d903      	bls.n	8002b56 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b4e:	f06f 0301 	mvn.w	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e011      	b.n	8002b7a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	490a      	ldr	r1, [pc, #40]	; (8002b88 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da03      	bge.n	8002b76 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b6e:	f06f 0304 	mvn.w	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000077c 	.word	0x2000077c
 8002b88:	20000770 	.word	0x20000770

08002b8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d903      	bls.n	8002ba4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b9c:	f06f 0301 	mvn.w	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e02e      	b.n	8002c02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d112      	bne.n	8002bd0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fda7 	bl	8002704 <VL53L1A2_ResetId>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da03      	bge.n	8002bc4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bbc:	f06f 0303 	mvn.w	r3, #3
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e01e      	b.n	8002c02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f013 fd03 	bl	80165d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e018      	b.n	8002c02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d112      	bne.n	8002bfc <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fd91 	bl	8002704 <VL53L1A2_ResetId>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002be8:	f06f 0303 	mvn.w	r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e008      	b.n	8002c02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f013 fced 	bl	80165d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e002      	b.n	8002c02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002bfc:	f06f 0301 	mvn.w	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8002c14:	2352      	movs	r3, #82	; 0x52
 8002c16:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <VL53L1CB_Probe+0xf0>)
 8002c1a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <VL53L1CB_Probe+0xf4>)
 8002c1e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <VL53L1CB_Probe+0xf8>)
 8002c22:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8002c24:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <VL53L1CB_Probe+0xfc>)
 8002c26:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <VL53L1CB_Probe+0x100>)
 8002c2a:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <VL53L1CB_Probe+0x104>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f013 f824 	bl	8015c8e <VL53L1CB_RegisterBusIO>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c4c:	f06f 0304 	mvn.w	r3, #4
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e04d      	b.n	8002cf0 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <VL53L1CB_Probe+0x104>)
 8002c60:	4413      	add	r3, r2
 8002c62:	f107 0208 	add.w	r2, r7, #8
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f013 f8cc 	bl	8015e06 <VL53L1CB_ReadID>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c74:	f06f 0304 	mvn.w	r3, #4
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	e039      	b.n	8002cf0 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002c86:	f06f 0306 	mvn.w	r3, #6
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	e030      	b.n	8002cf0 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <VL53L1CB_Probe+0x108>)
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <VL53L1CB_Probe+0x10c>)
 8002c92:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <VL53L1CB_Probe+0x104>)
 8002ca0:	441a      	add	r2, r3
 8002ca2:	491e      	ldr	r1, [pc, #120]	; (8002d1c <VL53L1CB_Probe+0x110>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <VL53L1CB_Probe+0x108>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	491a      	ldr	r1, [pc, #104]	; (8002d1c <VL53L1CB_Probe+0x110>)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4798      	blx	r3
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002cc2:	f06f 0304 	mvn.w	r3, #4
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	e012      	b.n	8002cf0 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <VL53L1CB_Probe+0x108>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4912      	ldr	r1, [pc, #72]	; (8002d1c <VL53L1CB_Probe+0x110>)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cd8:	4911      	ldr	r1, [pc, #68]	; (8002d20 <VL53L1CB_Probe+0x114>)
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4798      	blx	r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ce4:	f06f 0304 	mvn.w	r3, #4
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	e001      	b.n	8002cf0 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08001dcd 	.word	0x08001dcd
 8002d00:	08001e49 	.word	0x08001e49
 8002d04:	08001e99 	.word	0x08001e99
 8002d08:	08001eed 	.word	0x08001eed
 8002d0c:	08001f41 	.word	0x08001f41
 8002d10:	20000790 	.word	0x20000790
 8002d14:	2000077c 	.word	0x2000077c
 8002d18:	20000038 	.word	0x20000038
 8002d1c:	20000770 	.word	0x20000770
 8002d20:	20000780 	.word	0x20000780

08002d24 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002d30:	793b      	ldrb	r3, [r7, #4]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d808      	bhi.n	8002d48 <CheckValidRectRoi+0x24>
 8002d36:	797b      	ldrb	r3, [r7, #5]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d805      	bhi.n	8002d48 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002d3c:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d802      	bhi.n	8002d48 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d901      	bls.n	8002d4c <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002d48:	23fc      	movs	r3, #252	; 0xfc
 8002d4a:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8002d4c:	793a      	ldrb	r2, [r7, #4]
 8002d4e:	79bb      	ldrb	r3, [r7, #6]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d803      	bhi.n	8002d5c <CheckValidRectRoi+0x38>
 8002d54:	797a      	ldrb	r2, [r7, #5]
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d201      	bcs.n	8002d60 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002d5c:	23fc      	movs	r3, #252	; 0xfc
 8002d5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3318      	adds	r3, #24
 8002d84:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8002d8c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	2101      	movs	r1, #1
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f012 fd7d 	bl	8015898 <VL53L1_WrByte>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f002 fc56 	bl	8005686 <VL53L1_data_init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3318      	adds	r3, #24
 8002dea:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8002df2:	3308      	adds	r3, #8
 8002df4:	220c      	movs	r2, #12
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f017 ff15 	bl	801ac28 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	73bb      	strb	r3, [r7, #14]
 8002e16:	e012      	b.n	8002e3e <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fc90 	bl	800374e <VL53L1_SetLimitCheckEnable>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	73bb      	strb	r3, [r7, #14]
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d9e9      	bls.n	8002e18 <VL53L1_DataInit+0x5a>
 8002e44:	e000      	b.n	8002e48 <VL53L1_DataInit+0x8a>
		else
			break;
 8002e46:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8002e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8002e50:	2102      	movs	r1, #2
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f005 faef 	bl	8008436 <VL53L1_set_dmax_mode>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002e80:	2320      	movs	r3, #32
 8002e82:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7bba      	ldrb	r2, [r7, #14]
 8002e88:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f947 	bl	8003120 <VL53L1_SetPresetMode>
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8002e96:	2102      	movs	r1, #2
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f98b 	bl	80031b4 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8002eaa:	2100      	movs	r1, #0
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f001 fe69 	bl	8004b84 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8002eca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f011 ffa1 	bl	8014e16 <VL53L1_poll_for_boot_completion>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	603a      	str	r2, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8002ef8:	4a48      	ldr	r2, [pc, #288]	; (800301c <ComputeDevicePresetMode+0x138>)
 8002efa:	f107 0318 	add.w	r3, r7, #24
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	4611      	mov	r1, r2
 8002f02:	8019      	strh	r1, [r3, #0]
 8002f04:	3302      	adds	r3, #2
 8002f06:	0c12      	lsrs	r2, r2, #16
 8002f08:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8002f0a:	4a45      	ldr	r2, [pc, #276]	; (8003020 <ComputeDevicePresetMode+0x13c>)
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4611      	mov	r1, r2
 8002f14:	8019      	strh	r1, [r3, #0]
 8002f16:	3302      	adds	r3, #2
 8002f18:	0c12      	lsrs	r2, r2, #16
 8002f1a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8002f1c:	4a41      	ldr	r2, [pc, #260]	; (8003024 <ComputeDevicePresetMode+0x140>)
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4611      	mov	r1, r2
 8002f26:	8019      	strh	r1, [r3, #0]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	0c12      	lsrs	r2, r2, #16
 8002f2c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8002f2e:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <ComputeDevicePresetMode+0x144>)
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4611      	mov	r1, r2
 8002f38:	8019      	strh	r1, [r3, #0]
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	0c12      	lsrs	r2, r2, #16
 8002f3e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8002f40:	4a3a      	ldr	r2, [pc, #232]	; (800302c <ComputeDevicePresetMode+0x148>)
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	8019      	strh	r1, [r3, #0]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	0c12      	lsrs	r2, r2, #16
 8002f50:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8002f58:	79bb      	ldrb	r3, [r7, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <ComputeDevicePresetMode+0x80>
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <ComputeDevicePresetMode+0x86>
 8002f62:	e005      	b.n	8002f70 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77bb      	strb	r3, [r7, #30]
		break;
 8002f68:	e004      	b.n	8002f74 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	77bb      	strb	r3, [r7, #30]
		break;
 8002f6e:	e001      	b.n	8002f74 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8002f70:	2302      	movs	r3, #2
 8002f72:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d845      	bhi.n	8003008 <ComputeDevicePresetMode+0x124>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <ComputeDevicePresetMode+0xa0>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08003009 	.word	0x08003009
 8002f98:	08003009 	.word	0x08003009
 8002f9c:	08002ff9 	.word	0x08002ff9
 8002fa0:	08002fe9 	.word	0x08002fe9
 8002fa4:	08003001 	.word	0x08003001
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8002fa8:	7fbb      	ldrb	r3, [r7, #30]
 8002faa:	3320      	adds	r3, #32
 8002fac:	443b      	add	r3, r7
 8002fae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]
		break;
 8002fb6:	e029      	b.n	800300c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8002fb8:	7fbb      	ldrb	r3, [r7, #30]
 8002fba:	3320      	adds	r3, #32
 8002fbc:	443b      	add	r3, r7
 8002fbe:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	701a      	strb	r2, [r3, #0]
		break;
 8002fc6:	e021      	b.n	800300c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8002fc8:	7fbb      	ldrb	r3, [r7, #30]
 8002fca:	3320      	adds	r3, #32
 8002fcc:	443b      	add	r3, r7
 8002fce:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
		break;
 8002fd6:	e019      	b.n	800300c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8002fd8:	7fbb      	ldrb	r3, [r7, #30]
 8002fda:	3320      	adds	r3, #32
 8002fdc:	443b      	add	r3, r7
 8002fde:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	701a      	strb	r2, [r3, #0]
		break;
 8002fe6:	e011      	b.n	800300c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8002fe8:	7fbb      	ldrb	r3, [r7, #30]
 8002fea:	3320      	adds	r3, #32
 8002fec:	443b      	add	r3, r7
 8002fee:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	701a      	strb	r2, [r3, #0]
		break;
 8002ff6:	e009      	b.n	800300c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2211      	movs	r2, #17
 8002ffc:	701a      	strb	r2, [r3, #0]
		break;
 8002ffe:	e005      	b.n	800300c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2227      	movs	r2, #39	; 0x27
 8003004:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8003006:	e001      	b.n	800300c <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003008:	23f8      	movs	r3, #248	; 0xf8
 800300a:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 800300c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3724      	adds	r7, #36	; 0x24
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	0801dc38 	.word	0x0801dc38
 8003020:	0801dc3c 	.word	0x0801dc3c
 8003024:	0801dc40 	.word	0x0801dc40
 8003028:	0801dc44 	.word	0x0801dc44
 800302c:	0801dc48 	.word	0x0801dc48

08003030 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af04      	add	r7, sp, #16
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	72fb      	strb	r3, [r7, #11]
 800303e:	4613      	mov	r3, r2
 8003040:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d002      	beq.n	8003064 <SetPresetMode+0x34>
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d103      	bne.n	800306c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003064:	2340      	movs	r3, #64	; 0x40
 8003066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800306a:	e002      	b.n	8003072 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800306c:	2320      	movs	r3, #32
 800306e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003072:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8003076:	7ab9      	ldrb	r1, [r7, #10]
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff32 	bl	8002ee4 <ComputeDevicePresetMode>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800308a:	2b00      	cmp	r3, #0
 800308c:	d112      	bne.n	80030b4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800308e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003092:	f107 001c 	add.w	r0, r7, #28
 8003096:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4603      	mov	r3, r0
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f002 ffaf 	bl	800600c <VL53L1_get_preset_mode_timing_cfg>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80030b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d112      	bne.n	80030e2 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80030bc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80030c0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80030c2:	69fd      	ldr	r5, [r7, #28]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	9102      	str	r1, [sp, #8]
 80030cc:	9201      	str	r2, [sp, #4]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	462b      	mov	r3, r5
 80030d2:	4622      	mov	r2, r4
 80030d4:	4601      	mov	r1, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f003 f8ee 	bl	80062b8 <VL53L1_set_preset_mode>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80030e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030f0:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80030f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003100:	461a      	mov	r2, r3
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8003114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003118:	4618      	mov	r0, r3
 800311a:	3728      	adds	r7, #40	; 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bdb0      	pop	{r4, r5, r7, pc}

08003120 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003130:	2303      	movs	r3, #3
 8003132:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f00c f94a 	bl	800f3ce <VL53L1_low_power_auto_data_init>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	2b09      	cmp	r3, #9
 8003142:	d101      	bne.n	8003148 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003144:	2301      	movs	r3, #1
 8003146:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8003148:	7bba      	ldrb	r2, [r7, #14]
 800314a:	78f9      	ldrb	r1, [r7, #3]
 800314c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff6d 	bl	8003030 <SetPresetMode>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d117      	bne.n	8003192 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d005      	beq.n	8003174 <VL53L1_SetPresetMode+0x54>
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d002      	beq.n	8003174 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d107      	bne.n	8003184 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003174:	f24a 0128 	movw	r1, #41000	; 0xa028
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8a9 	bl	80032d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e006      	b.n	8003192 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003184:	f248 2135 	movw	r1, #33333	; 0x8235
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8a1 	bl	80032d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800319a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa68 	bl	8003674 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0a2      	sub	sp, #136	; 0x88
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031d8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80031dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 80031e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031e4:	2b09      	cmp	r3, #9
 80031e6:	d105      	bne.n	80031f4 <VL53L1_SetDistanceMode+0x40>
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d002      	beq.n	80031f4 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 80031ee:	f06f 0303 	mvn.w	r3, #3
 80031f2:	e069      	b.n	80032c8 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d008      	beq.n	800320c <VL53L1_SetDistanceMode+0x58>
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d005      	beq.n	800320c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d002      	beq.n	800320c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003206:	f06f 0303 	mvn.w	r3, #3
 800320a:	e05d      	b.n	80032c8 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 800320c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f002 fede 	bl	8005fdc <VL53L1_get_zone_config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800322e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003236:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800323a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800323e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f002 fd8a 	bl	8005d5c <VL53L1_get_timeouts_us>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800324e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800325c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fee5 	bl	8003030 <SetPresetMode>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800326c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800327a:	461a      	mov	r2, r3
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003282:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800328a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800328c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800328e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f002 fd2a 	bl	8005cea <VL53L1_set_timeouts_us>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800329c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80032a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80032aa:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f002 fe4c 	bl	8005f56 <VL53L1_set_zone_config>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 80032c4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3788      	adds	r7, #136	; 0x88
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	; 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80032f4:	4b75      	ldr	r3, [pc, #468]	; (80034cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 80032f6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d902      	bls.n	8003306 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003300:	23fc      	movs	r3, #252	; 0xfc
 8003302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003306:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800330e:	f107 031a 	add.w	r3, r7, #26
 8003312:	461a      	mov	r2, r3
 8003314:	2105      	movs	r1, #5
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb9a 	bl	8003a50 <VL53L1_GetSequenceStepEnable>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003322:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800332a:	f107 0319 	add.w	r3, r7, #25
 800332e:	461a      	mov	r2, r3
 8003330:	2106      	movs	r1, #6
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fb8c 	bl	8003a50 <VL53L1_GetSequenceStepEnable>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800333e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	f107 0210 	add.w	r2, r7, #16
 800334e:	f107 010c 	add.w	r1, r7, #12
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f002 fd02 	bl	8005d5c <VL53L1_get_timeouts_us>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800335e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80a0 	bne.w	80034a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800336e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003372:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800337c:	7efb      	ldrb	r3, [r7, #27]
 800337e:	3b01      	subs	r3, #1
 8003380:	2b08      	cmp	r3, #8
 8003382:	d861      	bhi.n	8003448 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	08003431 	.word	0x08003431
 8003390:	08003431 	.word	0x08003431
 8003394:	080033cd 	.word	0x080033cd
 8003398:	080033b1 	.word	0x080033b1
 800339c:	08003449 	.word	0x08003449
 80033a0:	08003449 	.word	0x08003449
 80033a4:	0800343d 	.word	0x0800343d
 80033a8:	080033f3 	.word	0x080033f3
 80033ac:	08003431 	.word	0x08003431
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033b0:	7ebb      	ldrb	r3, [r7, #26]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80033b6:	7e7b      	ldrb	r3, [r7, #25]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d103      	bne.n	80033c4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 80033bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 80033c2:	e044      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 80033c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80033ca:	e040      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033d2:	7ebb      	ldrb	r3, [r7, #26]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d002      	beq.n	80033de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 80033d8:	7e7b      	ldrb	r3, [r7, #25]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d103      	bne.n	80033e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 80033de:	f246 73e8 	movw	r3, #26600	; 0x67e8
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e4:	e002      	b.n	80033ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 80033e6:	f245 4360 	movw	r3, #21600	; 0x5460
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 80033ec:	2302      	movs	r3, #2
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80033f0:	e02d      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80033f8:	23f5      	movs	r3, #245	; 0xf5
 80033fa:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	461a      	mov	r2, r3
 8003402:	f248 0188 	movw	r1, #32904	; 0x8088
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f005 f88c 	bl	8008524 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dd07      	ble.n	8003422 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	22f5      	movs	r2, #245	; 0xf5
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	461a      	mov	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	4413      	add	r3, r2
 8003420:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800342e:	e00e      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8003430:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8003436:	2306      	movs	r3, #6
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800343a:	e008      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003442:	3308      	adds	r3, #8
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003446:	e002      	b.n	800344e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003448:	23f8      	movs	r3, #248	; 0xf8
 800344a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003456:	23fc      	movs	r3, #252	; 0xfc
 8003458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800345c:	e003      	b.n	8003466 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003464:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003466:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11c      	bne.n	80034a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	429a      	cmp	r2, r3
 8003474:	d203      	bcs.n	800347e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003476:	23fc      	movs	r3, #252	; 0xfc
 8003478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800347c:	e00d      	b.n	800349a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f002 fc2b 	bl	8005cea <VL53L1_set_timeouts_us>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800349a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80034a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80034b6:	461a      	mov	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	00086470 	.word	0x00086470
 80034d0:	00989680 	.word	0x00989680

080034d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003502:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800350a:	f107 031b 	add.w	r3, r7, #27
 800350e:	461a      	mov	r2, r3
 8003510:	2105      	movs	r1, #5
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa9c 	bl	8003a50 <VL53L1_GetSequenceStepEnable>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800351e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003526:	f107 031a 	add.w	r3, r7, #26
 800352a:	461a      	mov	r2, r3
 800352c:	2106      	movs	r1, #6
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa8e 	bl	8003a50 <VL53L1_GetSequenceStepEnable>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800353a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	f107 0214 	add.w	r2, r7, #20
 800354a:	f107 010c 	add.w	r1, r7, #12
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f002 fc04 	bl	8005d5c <VL53L1_get_timeouts_us>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800355a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800355e:	2b00      	cmp	r3, #0
 8003560:	d179      	bne.n	8003656 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003568:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003574:	3b01      	subs	r3, #1
 8003576:	2b08      	cmp	r3, #8
 8003578:	d869      	bhi.n	800364e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	0800362d 	.word	0x0800362d
 8003584:	0800362d 	.word	0x0800362d
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035a5 	.word	0x080035a5
 8003590:	0800364f 	.word	0x0800364f
 8003594:	0800364f 	.word	0x0800364f
 8003598:	0800363f 	.word	0x0800363f
 800359c:	080035ef 	.word	0x080035ef
 80035a0:	0800362d 	.word	0x0800362d
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80035a4:	7efb      	ldrb	r3, [r7, #27]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d002      	beq.n	80035b0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 80035aa:	7ebb      	ldrb	r3, [r7, #26]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80035b6:	3308      	adds	r3, #8
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80035ba:	e04d      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80035c4:	e048      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80035c6:	7efb      	ldrb	r3, [r7, #27]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d002      	beq.n	80035d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 80035cc:	7ebb      	ldrb	r3, [r7, #26]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d106      	bne.n	80035e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80035d8:	3334      	adds	r3, #52	; 0x34
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 80035de:	e03b      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80035e6:	3330      	adds	r3, #48	; 0x30
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80035ec:	e034      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80035ee:	23f5      	movs	r3, #245	; 0xf5
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	461a      	mov	r2, r3
 80035f8:	f248 0188 	movw	r1, #32904	; 0x8088
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f004 ff91 	bl	8008524 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dd07      	ble.n	8003618 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	22f5      	movs	r2, #245	; 0xf5
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	4413      	add	r3, r2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800361e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800362a:	e015      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800363c:	e00c      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4413      	add	r3, r2
 8003644:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003648:	3308      	adds	r3, #8
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800364c:	e004      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800364e:	23f8      	movs	r3, #248	; 0xf8
 8003650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003654:	e000      	b.n	8003658 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8003656:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8003658:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003664:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003666:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800366a:	4618      	mov	r0, r3
 800366c:	3730      	adds	r7, #48	; 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f002 facc 	bl	8005c38 <VL53L1_set_inter_measurement_period_ms>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80036a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f002 fae3 	bl	8005c94 <VL53L1_get_inter_measurement_period_ms>
 80036ce:	4603      	mov	r3, r0
 80036d0:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	019b      	lsls	r3, r3, #6
 80036d8:	4907      	ldr	r1, [pc, #28]	; (80036f8 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80036da:	fba1 1303 	umull	r1, r3, r1, r3
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	460b      	mov	r3, r1
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <SetLimitValue+0x1e>
 8003714:	2b01      	cmp	r3, #1
 8003716:	d009      	beq.n	800372c <SetLimitValue+0x30>
 8003718:	e011      	b.n	800373e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0b9b      	lsrs	r3, r3, #14
 800371e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8003720:	8abb      	ldrh	r3, [r7, #20]
 8003722:	4619      	mov	r1, r3
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f003 f988 	bl	8006a3a <VL53L1_set_lite_sigma_threshold>
		break;
 800372a:	e00a      	b.n	8003742 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0a5b      	lsrs	r3, r3, #9
 8003730:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8003732:	8abb      	ldrh	r3, [r7, #20]
 8003734:	4619      	mov	r1, r3
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f003 f9ad 	bl	8006a96 <VL53L1_set_lite_min_count_rate>
		break;
 800373c:	e001      	b.n	8003742 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800373e:	23fc      	movs	r3, #252	; 0xfc
 8003740:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	807b      	strh	r3, [r7, #2]
 800375a:	4613      	mov	r3, r2
 800375c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d902      	bls.n	8003772 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800376c:	23fc      	movs	r3, #252	; 0xfc
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e015      	b.n	800379e <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8003772:	787b      	ldrb	r3, [r7, #1]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	e007      	b.n	800378e <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffb1 	bl	80036fc <SetLimitValue>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80037a6:	787b      	ldrb	r3, [r7, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	4611      	mov	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80037be:	3334      	adds	r3, #52	; 0x34
 80037c0:	460a      	mov	r2, r1
 80037c2:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80037c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	460b      	mov	r3, r1
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d905      	bls.n	80037f4 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80037e8:	23fc      	movs	r3, #252	; 0xfc
 80037ea:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e00a      	b.n	800380a <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80037fe:	3334      	adds	r3, #52	; 0x34
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7dba      	ldrb	r2, [r7, #22]
 8003808:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800380a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800380e:	4618      	mov	r0, r3
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b088      	sub	sp, #32
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	460b      	mov	r3, r1
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003830:	897b      	ldrh	r3, [r7, #10]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <VL53L1_GetLimitCheckValue+0x22>
 8003836:	2b01      	cmp	r3, #1
 8003838:	d00c      	beq.n	8003854 <VL53L1_GetLimitCheckValue+0x3a>
 800383a:	e017      	b.n	800386c <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4619      	mov	r1, r3
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f003 f8e2 	bl	8006a0c <VL53L1_get_lite_sigma_threshold>
 8003848:	4603      	mov	r3, r0
 800384a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800384c:	8abb      	ldrh	r3, [r7, #20]
 800384e:	039b      	lsls	r3, r3, #14
 8003850:	61bb      	str	r3, [r7, #24]
		break;
 8003852:	e00d      	b.n	8003870 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8003854:	f107 0316 	add.w	r3, r7, #22
 8003858:	4619      	mov	r1, r3
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f003 f904 	bl	8006a68 <VL53L1_get_lite_min_count_rate>
 8003860:	4603      	mov	r3, r0
 8003862:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8003864:	8afb      	ldrh	r3, [r7, #22]
 8003866:	025b      	lsls	r3, r3, #9
 8003868:	61bb      	str	r3, [r7, #24]
		break;
 800386a:	e001      	b.n	8003870 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800386c:	23fc      	movs	r3, #252	; 0xfc
 800386e:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d129      	bne.n	80038cc <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d113      	bne.n	80038a6 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003894:	897b      	ldrh	r3, [r7, #10]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800389e:	3334      	adds	r3, #52	; 0x34
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e012      	b.n	80038cc <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80038c6:	3334      	adds	r3, #52	; 0x34
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80038cc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b0a0      	sub	sp, #128	; 0x80
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038f4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80038f8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 80038fc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003900:	2b02      	cmp	r3, #2
 8003902:	d102      	bne.n	800390a <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8003904:	2310      	movs	r3, #16
 8003906:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003912:	429a      	cmp	r2, r3
 8003914:	d303      	bcc.n	800391e <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800391e:	23fc      	movs	r3, #252	; 0xfc
 8003920:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8003924:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003928:	2b00      	cmp	r3, #0
 800392a:	d17e      	bne.n	8003a2a <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 800392c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003930:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 800393c:	2300      	movs	r3, #0
 800393e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8003942:	e06a      	b.n	8003a1a <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8003944:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	f107 0208 	add.w	r2, r7, #8
 8003952:	3301      	adds	r3, #1
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7ff f9e3 	bl	8002d24 <CheckValidRectRoi>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8003964:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003968:	2b00      	cmp	r3, #0
 800396a:	d15d      	bne.n	8003a28 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800396c:	7abb      	ldrb	r3, [r7, #10]
 800396e:	461a      	mov	r2, r3
 8003970:	7a3b      	ldrb	r3, [r7, #8]
 8003972:	4413      	add	r3, r2
 8003974:	3301      	adds	r3, #1
					/ 2;
 8003976:	0fda      	lsrs	r2, r3, #31
 8003978:	4413      	add	r3, r2
 800397a:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800397c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8003980:	7a7b      	ldrb	r3, [r7, #9]
 8003982:	461a      	mov	r2, r3
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	4413      	add	r3, r2
 8003988:	3301      	adds	r3, #1
					/ 2;
 800398a:	0fda      	lsrs	r2, r3, #31
 800398c:	4413      	add	r3, r2
 800398e:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8003990:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8003994:	7aba      	ldrb	r2, [r7, #10]
 8003996:	7a3b      	ldrb	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 800399e:	7a7a      	ldrb	r2, [r7, #9]
 80039a0:	7afb      	ldrb	r3, [r7, #11]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 80039a8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d903      	bls.n	80039b8 <VL53L1_SetROI+0xe0>
 80039b0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d803      	bhi.n	80039c0 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80039b8:	23fc      	movs	r3, #252	; 0xfc
 80039ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80039be:	e034      	b.n	8003a2a <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 80039c0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80039c4:	3306      	adds	r3, #6
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3380      	adds	r3, #128	; 0x80
 80039ca:	443b      	add	r3, r7
 80039cc:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80039d0:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 80039d4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80039d8:	3306      	adds	r3, #6
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	3380      	adds	r3, #128	; 0x80
 80039de:	443b      	add	r3, r7
 80039e0:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 80039e4:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 80039e8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80039ec:	3306      	adds	r3, #6
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3380      	adds	r3, #128	; 0x80
 80039f2:	443b      	add	r3, r7
 80039f4:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80039f8:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 80039fc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003a00:	3306      	adds	r3, #6
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3380      	adds	r3, #128	; 0x80
 8003a06:	443b      	add	r3, r7
 8003a08:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8003a0c:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8003a10:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003a14:	3301      	adds	r3, #1
 8003a16:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d38e      	bcc.n	8003944 <VL53L1_SetROI+0x6c>
 8003a26:	e000      	b.n	8003a2a <VL53L1_SetROI+0x152>
				break;
 8003a28:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8003a2a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f002 fa8c 	bl	8005f56 <VL53L1_set_zone_config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8003a44:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3780      	adds	r7, #128	; 0x80
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4619      	mov	r1, r3
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f002 f9e3 	bl	8005e34 <VL53L1_get_sequence_config_bit>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7edb      	ldrb	r3, [r3, #27]
 8003a96:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d002      	beq.n	8003aa4 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 fc8e 	bl	80053c0 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77bb      	strb	r3, [r7, #30]
 8003aa8:	e01a      	b.n	8003ae0 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003aaa:	7fbb      	ldrb	r3, [r7, #30]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003aba:	7fbb      	ldrb	r3, [r7, #30]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003aca:	7fbb      	ldrb	r3, [r7, #30]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ad4:	3324      	adds	r3, #36	; 0x24
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003ada:	7fbb      	ldrb	r3, [r7, #30]
 8003adc:	3301      	adds	r3, #1
 8003ade:	77bb      	strb	r3, [r7, #30]
 8003ae0:	7fbb      	ldrb	r3, [r7, #30]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d9e1      	bls.n	8003aaa <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b04:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8003b08:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8003b0a:	7dbb      	ldrb	r3, [r7, #22]
 8003b0c:	2b63      	cmp	r3, #99	; 0x63
 8003b0e:	dc12      	bgt.n	8003b36 <VL53L1_StartMeasurement+0xb6>
 8003b10:	2b62      	cmp	r3, #98	; 0x62
 8003b12:	da0d      	bge.n	8003b30 <VL53L1_StartMeasurement+0xb0>
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	dc0e      	bgt.n	8003b36 <VL53L1_StartMeasurement+0xb6>
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	da09      	bge.n	8003b30 <VL53L1_StartMeasurement+0xb0>
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	dc02      	bgt.n	8003b26 <VL53L1_StartMeasurement+0xa6>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da05      	bge.n	8003b30 <VL53L1_StartMeasurement+0xb0>
 8003b24:	e007      	b.n	8003b36 <VL53L1_StartMeasurement+0xb6>
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d105      	bne.n	8003b36 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	77fb      	strb	r3, [r7, #31]
		break;
 8003b2e:	e004      	b.n	8003b3a <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8003b30:	23f2      	movs	r3, #242	; 0xf2
 8003b32:	77fb      	strb	r3, [r7, #31]
		break;
 8003b34:	e001      	b.n	8003b3a <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8003b36:	23fd      	movs	r3, #253	; 0xfd
 8003b38:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8003b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11f      	bne.n	8003b82 <VL53L1_StartMeasurement+0x102>
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d11c      	bne.n	8003b82 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003b48:	f107 0310 	add.w	r3, r7, #16
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fcc0 	bl	80034d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8003b54:	4603      	mov	r3, r0
 8003b56:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <VL53L1_StartMeasurement+0x13c>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fda2 	bl	80036b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8003b70:	4603      	mov	r3, r0
 8003b72:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d901      	bls.n	8003b82 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003b7e:	23fc      	movs	r3, #252	; 0xfc
 8003b80:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8003b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2206      	movs	r2, #6
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f002 ff97 	bl	8006ac4 <VL53L1_init_and_start_range>
 8003b96:	4603      	mov	r3, r0
 8003b98:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8003b9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ba8:	2204      	movs	r2, #4
 8003baa:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8003bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	10624dd3 	.word	0x10624dd3

08003bc0 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f003 fa47 	bl	8007060 <VL53L1_stop_range>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7edb      	ldrb	r3, [r3, #27]
 8003bda:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8003bdc:	7bbb      	ldrb	r3, [r7, #14]
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d002      	beq.n	8003be8 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 fd1a 	bl	800561c <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8003be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8003bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7edb      	ldrb	r3, [r3, #27]
 8003c18:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8003c1a:	7bbb      	ldrb	r3, [r7, #14]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f003 ff4b 	bl	8007aba <VL53L1_clear_interrupt_and_enable_next_range>
 8003c24:	4603      	mov	r3, r0
 8003c26:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f011 f8ac 	bl	8014da2 <VL53L1_is_new_data_ready>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	603a      	str	r2, [r7, #0]
 8003c64:	80fb      	strh	r3, [r7, #6]
 8003c66:	460b      	mov	r3, r1
 8003c68:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8003c6a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003c6e:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8003c70:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003c74:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8003c76:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8003c7a:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8003c7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003c80:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8003c82:	797b      	ldrb	r3, [r7, #5]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d002      	beq.n	8003c8e <GenNewPresetMode+0x34>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d012      	beq.n	8003cb2 <GenNewPresetMode+0x58>
 8003c8c:	e023      	b.n	8003cd6 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8003c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	dd03      	ble.n	8003ca0 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003c9e:	e02c      	b.n	8003cfa <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8003ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ca4:	89bb      	ldrh	r3, [r7, #12]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	dd27      	ble.n	8003cfa <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2202      	movs	r2, #2
 8003cae:	701a      	strb	r2, [r3, #0]
		break;
 8003cb0:	e023      	b.n	8003cfa <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8003cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dd03      	ble.n	8003cc4 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8003cc2:	e01c      	b.n	8003cfe <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8003cc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cc8:	89fb      	ldrh	r3, [r7, #14]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	da17      	bge.n	8003cfe <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
		break;
 8003cd4:	e013      	b.n	8003cfe <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8003cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	da03      	bge.n	8003ce8 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003ce6:	e00c      	b.n	8003d02 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8003ce8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cec:	897b      	ldrh	r3, [r7, #10]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	da07      	bge.n	8003d02 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	701a      	strb	r2, [r3, #0]
		break;
 8003cf8:	e003      	b.n	8003d02 <GenNewPresetMode+0xa8>
		break;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <GenNewPresetMode+0xaa>
		break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <GenNewPresetMode+0xaa>
		break;
 8003d02:	bf00      	nop
	}
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	7ddb      	ldrb	r3, [r3, #23]
 8003d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <CheckAndChangeDistanceMode+0xbc>)
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3318      	adds	r3, #24
 8003d32:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8003d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d38:	2bff      	cmp	r3, #255	; 0xff
 8003d3a:	d042      	beq.n	8003dc2 <CheckAndChangeDistanceMode+0xb2>
 8003d3c:	2bff      	cmp	r3, #255	; 0xff
 8003d3e:	dc07      	bgt.n	8003d50 <CheckAndChangeDistanceMode+0x40>
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	dc02      	bgt.n	8003d4a <CheckAndChangeDistanceMode+0x3a>
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	da3c      	bge.n	8003dc2 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8003d48:	e002      	b.n	8003d50 <CheckAndChangeDistanceMode+0x40>
 8003d4a:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d938      	bls.n	8003dc2 <CheckAndChangeDistanceMode+0xb2>
		break;
 8003d50:	bf00      	nop
	}

	DmaxValid = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003d5e:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	db03      	blt.n	8003d70 <CheckAndChangeDistanceMode+0x60>
 8003d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d7c:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8003d80:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	7dfa      	ldrb	r2, [r7, #23]
 8003d86:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003d88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d96:	7df9      	ldrb	r1, [r7, #23]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff5d 	bl	8003c5a <GenNewPresetMode>
 8003da0:	e010      	b.n	8003dc4 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8003da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8003daa:	7df9      	ldrb	r1, [r7, #23]
 8003dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff51 	bl	8003c5a <GenNewPresetMode>
 8003db8:	e004      	b.n	8003dc4 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e000      	b.n	8003dc4 <CheckAndChangeDistanceMode+0xb4>
		return;
 8003dc2:	bf00      	nop
	}
}
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b08d      	sub	sp, #52	; 0x34
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	603a      	str	r2, [r7, #0]
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8003de0:	2396      	movs	r3, #150	; 0x96
 8003de2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8003de4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003de8:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8003dea:	231e      	movs	r3, #30
 8003dec:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8003dee:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <ComputeRQL+0x104>)
 8003df0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <ComputeRQL+0x108>)
 8003df4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8003df6:	f641 139a 	movw	r3, #6554	; 0x199a
 8003dfa:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <ComputeRQL+0x3a>
		returnvalue = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e08:	e05b      	b.n	8003ec2 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003e10:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8003e18:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003e1a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	da02      	bge.n	8003e28 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8003e22:	79bb      	ldrb	r3, [r7, #6]
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d103      	bne.n	8003e30 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8003e28:	2332      	movs	r3, #50	; 0x32
 8003e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e2e:	e048      	b.n	8003ec2 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003e36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	dd03      	ble.n	8003e46 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8003e3e:	8c3b      	ldrh	r3, [r7, #32]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e44:	e007      	b.n	8003e56 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e60:	461a      	mov	r2, r3
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d804      	bhi.n	8003e96 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e94:	e006      	b.n	8003ea4 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8003e96:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9c:	e002      	b.n	8003ea4 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8003e9e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b32      	cmp	r3, #50	; 0x32
 8003eae:	d905      	bls.n	8003ebc <ComputeRQL+0xec>
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	bf28      	it	cs
 8003eb6:	2364      	movcs	r3, #100	; 0x64
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e000      	b.n	8003ebe <ComputeRQL+0xee>
 8003ebc:	2332      	movs	r3, #50	; 0x32
 8003ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8003ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3734      	adds	r7, #52	; 0x34
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	0075b333 	.word	0x0075b333
 8003ed8:	0030cccd 	.word	0x0030cccd

08003edc <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3b04      	subs	r3, #4
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d83d      	bhi.n	8003f6a <ConvertStatusLite+0x8e>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <ConvertStatusLite+0x18>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f47 	.word	0x08003f47
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f4d 	.word	0x08003f4d
 8003f00:	08003f53 	.word	0x08003f53
 8003f04:	08003f5f 	.word	0x08003f5f
 8003f08:	08003f65 	.word	0x08003f65
 8003f0c:	08003f6b 	.word	0x08003f6b
 8003f10:	08003f6b 	.word	0x08003f6b
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f6b 	.word	0x08003f6b
 8003f1c:	08003f6b 	.word	0x08003f6b
 8003f20:	08003f6b 	.word	0x08003f6b
 8003f24:	08003f6b 	.word	0x08003f6b
 8003f28:	08003f6b 	.word	0x08003f6b
 8003f2c:	08003f35 	.word	0x08003f35
 8003f30:	08003f3b 	.word	0x08003f3b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8003f34:	230a      	movs	r3, #10
 8003f36:	73fb      	strb	r3, [r7, #15]
		break;
 8003f38:	e019      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003f3a:	2306      	movs	r3, #6
 8003f3c:	73fb      	strb	r3, [r7, #15]
		break;
 8003f3e:	e016      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003f40:	2304      	movs	r3, #4
 8003f42:	73fb      	strb	r3, [r7, #15]
		break;
 8003f44:	e013      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8003f46:	2302      	movs	r3, #2
 8003f48:	73fb      	strb	r3, [r7, #15]
		break;
 8003f4a:	e010      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
		break;
 8003f50:	e00d      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003f52:	2307      	movs	r3, #7
 8003f54:	73fb      	strb	r3, [r7, #15]
		break;
 8003f56:	e00a      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8003f58:	2309      	movs	r3, #9
 8003f5a:	73fb      	strb	r3, [r7, #15]
		break;
 8003f5c:	e007      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	73fb      	strb	r3, [r7, #15]
		break;
 8003f62:	e004      	b.n	8003f6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
		break;
 8003f68:	e001      	b.n	8003f6e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003f6a:	23ff      	movs	r3, #255	; 0xff
 8003f6c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	3b05      	subs	r3, #5
 8003f8a:	2b12      	cmp	r3, #18
 8003f8c:	d840      	bhi.n	8004010 <ConvertStatusHisto+0x94>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <ConvertStatusHisto+0x18>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe7 	.word	0x08003fe7
 8003f9c:	08003ff3 	.word	0x08003ff3
 8003fa0:	08004011 	.word	0x08004011
 8003fa4:	0800400b 	.word	0x0800400b
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	08004011 	.word	0x08004011
 8003fb4:	08004011 	.word	0x08004011
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08003fed 	.word	0x08003fed
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08004011 	.word	0x08004011
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	08003ff9 	.word	0x08003ff9
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	73fb      	strb	r3, [r7, #15]
		break;
 8003fe4:	e016      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
		break;
 8003fea:	e013      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003fec:	2306      	movs	r3, #6
 8003fee:	73fb      	strb	r3, [r7, #15]
		break;
 8003ff0:	e010      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	73fb      	strb	r3, [r7, #15]
		break;
 8003ff6:	e00d      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	73fb      	strb	r3, [r7, #15]
		break;
 8003ffc:	e00a      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003ffe:	2307      	movs	r3, #7
 8004000:	73fb      	strb	r3, [r7, #15]
		break;
 8004002:	e007      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8004004:	230b      	movs	r3, #11
 8004006:	73fb      	strb	r3, [r7, #15]
		break;
 8004008:	e004      	b.n	8004014 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
		break;
 800400e:	e001      	b.n	8004014 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004010:	23ff      	movs	r3, #255	; 0xff
 8004012:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop

08004024 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b092      	sub	sp, #72	; 0x48
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	460b      	mov	r3, r1
 8004038:	70bb      	strb	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3318      	adds	r3, #24
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004058:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004064:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff feaf 	bl	8003dd0 <ComputeRQL>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004078:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800407a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800407e:	025b      	lsls	r3, r3, #9
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8004090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004094:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004098:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800409a:	025b      	lsls	r3, r3, #9
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800409e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a2:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80040a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80040aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ac:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80040b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b6:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ba:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80040be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c0:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 80040c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c4:	2200      	movs	r2, #0
 80040c6:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 80040c8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80040cc:	2b11      	cmp	r3, #17
 80040ce:	d009      	beq.n	80040e4 <SetTargetData+0xc0>
 80040d0:	2b11      	cmp	r3, #17
 80040d2:	dc0f      	bgt.n	80040f4 <SetTargetData+0xd0>
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	dc02      	bgt.n	80040de <SetTargetData+0xba>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	dc03      	bgt.n	80040e4 <SetTargetData+0xc0>
 80040dc:	e00a      	b.n	80040f4 <SetTargetData+0xd0>
 80040de:	2b0d      	cmp	r3, #13
 80040e0:	d004      	beq.n	80040ec <SetTargetData+0xc8>
 80040e2:	e007      	b.n	80040f4 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80040e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e6:	2205      	movs	r2, #5
 80040e8:	75da      	strb	r2, [r3, #23]
		break;
 80040ea:	e006      	b.n	80040fa <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80040ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ee:	220d      	movs	r2, #13
 80040f0:	75da      	strb	r2, [r3, #23]
		break;
 80040f2:	e002      	b.n	80040fa <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80040f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f6:	2200      	movs	r2, #0
 80040f8:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	7ddb      	ldrb	r3, [r3, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d117      	bne.n	8004132 <SetTargetData+0x10e>
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d114      	bne.n	8004132 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 800410e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8004114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 800411a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004120:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8004122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004124:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004128:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 800412a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800412c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004130:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8004132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004134:	7ddb      	ldrb	r3, [r3, #23]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d125      	bne.n	8004186 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004140:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414c:	2b02      	cmp	r3, #2
 800414e:	d007      	beq.n	8004160 <SetTargetData+0x13c>
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b01      	cmp	r3, #1
 8004156:	d003      	beq.n	8004160 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8004158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415c:	2b09      	cmp	r3, #9
 800415e:	d109      	bne.n	8004174 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8004160:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff09 	bl	8003f7c <ConvertStatusHisto>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800416e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004170:	75da      	strb	r2, [r3, #23]
 8004172:	e008      	b.n	8004186 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8004174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff feaf 	bl	8003edc <ConvertStatusLite>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8004182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004184:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004194:	461a      	mov	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80041a0:	025b      	lsls	r3, r3, #9
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041aa:	461a      	mov	r2, r3
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	461a      	mov	r2, r3
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fb2d 	bl	800381a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80041c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80041ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 80041d2:	f107 0315 	add.w	r3, r7, #21
 80041d6:	461a      	mov	r2, r3
 80041d8:	2100      	movs	r1, #0
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff faf8 	bl	80037d0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80041e0:	7d7b      	ldrb	r3, [r7, #21]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d105      	bne.n	80041f2 <SetTargetData+0x1ce>
 80041e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <SetTargetData+0x1ce>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <SetTargetData+0x1d0>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041fe:	461a      	mov	r2, r3
 8004200:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004204:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	461a      	mov	r2, r3
 800420e:	2101      	movs	r1, #1
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fb02 	bl	800381a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8004216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8004228:	f107 0315 	add.w	r3, r7, #21
 800422c:	461a      	mov	r2, r3
 800422e:	2101      	movs	r1, #1
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff facd 	bl	80037d0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <SetTargetData+0x224>
 800423c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <SetTargetData+0x224>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <SetTargetData+0x226>
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004254:	461a      	mov	r2, r3
 8004256:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800425a:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004260:	8a9b      	ldrh	r3, [r3, #20]
 8004262:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004266:	7ddb      	ldrb	r3, [r3, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d110      	bne.n	800428e <SetTargetData+0x26a>
 800426c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004270:	2b00      	cmp	r3, #0
 8004272:	da0c      	bge.n	800428e <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004274:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004278:	4ba3      	ldr	r3, [pc, #652]	; (8004508 <SetTargetData+0x4e4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	da03      	bge.n	8004288 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8004280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004282:	220e      	movs	r2, #14
 8004284:	75da      	strb	r2, [r3, #23]
 8004286:	e002      	b.n	800428e <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8004288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428a:	2200      	movs	r2, #0
 800428c:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 800428e:	f107 0308 	add.w	r3, r7, #8
 8004292:	461a      	mov	r2, r3
 8004294:	f248 01be 	movw	r1, #32958	; 0x80be
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f004 f943 	bl	8008524 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 80042a2:	787b      	ldrb	r3, [r7, #1]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80042a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042aa:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 80042b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b2:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d902      	bls.n	80042c0 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 80042ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042bc:	220c      	movs	r2, #12
 80042be:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	461a      	mov	r2, r3
 80042c6:	f248 0191 	movw	r1, #32913	; 0x8091
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f004 f92a 	bl	8008524 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80042d0:	78bb      	ldrb	r3, [r7, #2]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80042de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e0:	8a9b      	ldrh	r3, [r3, #20]
 80042e2:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 80042ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ec:	2200      	movs	r2, #0
 80042ee:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d106      	bne.n	8004304 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80042fc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8250 	beq.w	80047b0 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8004310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004312:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8004314:	2b07      	cmp	r3, #7
 8004316:	d004      	beq.n	8004322 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8004318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431a:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 800431c:	2b04      	cmp	r3, #4
 800431e:	f040 8247 	bne.w	80047b0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8004322:	787b      	ldrb	r3, [r7, #1]
 8004324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004326:	4413      	add	r3, r2
 8004328:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800432c:	3320      	adds	r3, #32
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b07      	cmp	r3, #7
 8004332:	d01c      	beq.n	800436e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8004334:	787b      	ldrb	r3, [r7, #1]
 8004336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004338:	4413      	add	r3, r2
 800433a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800433e:	3320      	adds	r3, #32
 8004340:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8004342:	2b04      	cmp	r3, #4
 8004344:	d013      	beq.n	800436e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8004346:	787b      	ldrb	r3, [r7, #1]
 8004348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434a:	4413      	add	r3, r2
 800434c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004350:	3320      	adds	r3, #32
 8004352:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 822b 	bne.w	80047b0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800435a:	787b      	ldrb	r3, [r7, #1]
 800435c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800435e:	4413      	add	r3, r2
 8004360:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004364:	3324      	adds	r3, #36	; 0x24
 8004366:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 8221 	bne.w	80047b0 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004374:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8004378:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8004380:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8004382:	429a      	cmp	r2, r3
 8004384:	d00c      	beq.n	80043a0 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800438c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8004390:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8004398:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800439a:	429a      	cmp	r2, r3
 800439c:	f040 81dc 	bne.w	8004758 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80043a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80043a6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80043a8:	787b      	ldrb	r3, [r7, #1]
 80043aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80043b0:	330c      	adds	r3, #12
 80043b2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80043b6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b21      	cmp	r3, #33	; 0x21
 80043ca:	d008      	beq.n	80043de <SetTargetData+0x3ba>
 80043cc:	2b21      	cmp	r3, #33	; 0x21
 80043ce:	f300 81bf 	bgt.w	8004750 <SetTargetData+0x72c>
 80043d2:	2b1b      	cmp	r3, #27
 80043d4:	f000 8113 	beq.w	80045fe <SetTargetData+0x5da>
 80043d8:	2b1e      	cmp	r3, #30
 80043da:	d004      	beq.n	80043e6 <SetTargetData+0x3c2>
 80043dc:	e1b8      	b.n	8004750 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80043e4:	e1b9      	b.n	800475a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80043ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dd0f      	ble.n	8004414 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80043fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043fe:	429a      	cmp	r2, r3
 8004400:	da08      	bge.n	8004414 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004402:	7efb      	ldrb	r3, [r7, #27]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800440e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004412:	e0f3      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800441e:	425b      	negs	r3, r3
 8004420:	429a      	cmp	r2, r3
 8004422:	da10      	bge.n	8004446 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800442e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004430:	429a      	cmp	r2, r3
 8004432:	dd08      	ble.n	8004446 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004434:	7efb      	ldrb	r3, [r7, #27]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8004440:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004444:	e0da      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800444c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004450:	429a      	cmp	r2, r3
 8004452:	dd0f      	ble.n	8004474 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800445a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800445e:	429a      	cmp	r2, r3
 8004460:	da08      	bge.n	8004474 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800446e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004472:	e0c3      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8004474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800447e:	425b      	negs	r3, r3
 8004480:	429a      	cmp	r2, r3
 8004482:	da10      	bge.n	80044a6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8004484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 800448e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8004490:	429a      	cmp	r2, r3
 8004492:	dd08      	ble.n	80044a6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8004494:	7efb      	ldrb	r3, [r7, #27]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80044a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044a4:	e0aa      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80044ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	dd0f      	ble.n	80044d4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80044ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044be:	429a      	cmp	r2, r3
 80044c0:	da08      	bge.n	80044d4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80044c2:	7efb      	ldrb	r3, [r7, #27]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80044ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044d2:	e093      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80044d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80044de:	425b      	negs	r3, r3
 80044e0:	429a      	cmp	r2, r3
 80044e2:	da13      	bge.n	800450c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80044e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 80044ee:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dd0b      	ble.n	800450c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80044f4:	7efb      	ldrb	r3, [r7, #27]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8004500:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004504:	e07a      	b.n	80045fc <SetTargetData+0x5d8>
 8004506:	bf00      	nop
 8004508:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004516:	429a      	cmp	r2, r3
 8004518:	dd0f      	ble.n	800453a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004524:	429a      	cmp	r2, r3
 8004526:	da08      	bge.n	800453a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8004528:	7efb      	ldrb	r3, [r7, #27]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8004534:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004538:	e060      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800453a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004544:	425b      	negs	r3, r3
 8004546:	429a      	cmp	r2, r3
 8004548:	da10      	bge.n	800456c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800454a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8004554:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8004556:	429a      	cmp	r2, r3
 8004558:	dd08      	ble.n	800456c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800455a:	7efb      	ldrb	r3, [r7, #27]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8004566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800456a:	e047      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8004572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004576:	429a      	cmp	r2, r3
 8004578:	da0c      	bge.n	8004594 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8004580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004584:	429a      	cmp	r2, r3
 8004586:	dd05      	ble.n	8004594 <SetTargetData+0x570>
					AddOffset =
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800458e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004592:	e033      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800459a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800459e:	429a      	cmp	r2, r3
 80045a0:	dd0f      	ble.n	80045c2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80045a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	da08      	bge.n	80045c2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80045b0:	7efb      	ldrb	r3, [r7, #27]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80045bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045c0:	e01c      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80045c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80045cc:	425b      	negs	r3, r3
 80045ce:	429a      	cmp	r2, r3
 80045d0:	da10      	bge.n	80045f4 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80045d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 80045dc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80045de:	429a      	cmp	r2, r3
 80045e0:	dd08      	ble.n	80045f4 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80045e2:	7efb      	ldrb	r3, [r7, #27]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80045ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045f2:	e003      	b.n	80045fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80045fa:	e0ae      	b.n	800475a <SetTargetData+0x736>
 80045fc:	e0ad      	b.n	800475a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8004604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004608:	429a      	cmp	r2, r3
 800460a:	dd0f      	ble.n	800462c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8004612:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004616:	429a      	cmp	r2, r3
 8004618:	da08      	bge.n	800462c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800461a:	7efb      	ldrb	r3, [r7, #27]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8004626:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800462a:	e090      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800462c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8004636:	425b      	negs	r3, r3
 8004638:	429a      	cmp	r2, r3
 800463a:	da10      	bge.n	800465e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800463c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8004646:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8004648:	429a      	cmp	r2, r3
 800464a:	dd08      	ble.n	800465e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800464c:	7efb      	ldrb	r3, [r7, #27]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8004658:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800465c:	e077      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8004664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004668:	429a      	cmp	r2, r3
 800466a:	dd0f      	ble.n	800468c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8004672:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004676:	429a      	cmp	r2, r3
 8004678:	da08      	bge.n	800468c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800467a:	7efb      	ldrb	r3, [r7, #27]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8004686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800468a:	e060      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800468c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8004696:	425b      	negs	r3, r3
 8004698:	429a      	cmp	r2, r3
 800469a:	da10      	bge.n	80046be <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800469c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 80046a6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80046a8:	429a      	cmp	r2, r3
 80046aa:	dd08      	ble.n	80046be <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80046ac:	7efb      	ldrb	r3, [r7, #27]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80046b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046bc:	e047      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 80046c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	da0c      	bge.n	80046e6 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80046d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	dd05      	ble.n	80046e6 <SetTargetData+0x6c2>
					AddOffset =
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80046e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046e4:	e033      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80046ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	dd0f      	ble.n	8004714 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80046fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046fe:	429a      	cmp	r2, r3
 8004700:	da08      	bge.n	8004714 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004702:	7efb      	ldrb	r3, [r7, #27]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800470e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004712:	e01c      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800471e:	425b      	negs	r3, r3
 8004720:	429a      	cmp	r2, r3
 8004722:	da10      	bge.n	8004746 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 800472e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004730:	429a      	cmp	r2, r3
 8004732:	dd08      	ble.n	8004746 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004734:	7efb      	ldrb	r3, [r7, #27]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8004740:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004744:	e003      	b.n	800474e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800474c:	e005      	b.n	800475a <SetTargetData+0x736>
 800474e:	e004      	b.n	800475a <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8004756:	e000      	b.n	800475a <SetTargetData+0x736>
			}
		}
 8004758:	bf00      	nop

		if (uwr_status) {
 800475a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800475e:	2b00      	cmp	r3, #0
 8004760:	d026      	beq.n	80047b0 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004768:	b29a      	uxth	r2, r3
 800476a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800476e:	4413      	add	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	b21a      	sxth	r2, r3
 8004774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004776:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8004778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800477a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800477e:	b29a      	uxth	r2, r3
 8004780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004784:	4413      	add	r3, r2
 8004786:	b29b      	uxth	r3, r3
 8004788:	b21a      	sxth	r2, r3
 800478a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800478c:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800478e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004794:	b29a      	uxth	r2, r3
 8004796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800479a:	4413      	add	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	b21a      	sxth	r2, r3
 80047a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a2:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 80047a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a6:	2201      	movs	r2, #1
 80047a8:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 80047aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ac:	2200      	movs	r2, #0
 80047ae:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80047b0:	787b      	ldrb	r3, [r7, #1]
 80047b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047b4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80047b8:	330c      	adds	r3, #12
 80047ba:	8b39      	ldrh	r1, [r7, #24]
 80047bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80047c0:	787b      	ldrb	r3, [r7, #1]
 80047c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047c4:	7dd1      	ldrb	r1, [r2, #23]
 80047c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80047ce:	3320      	adds	r3, #32
 80047d0:	460a      	mov	r2, r1
 80047d2:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80047d4:	787b      	ldrb	r3, [r7, #1]
 80047d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d8:	7e11      	ldrb	r1, [r2, #24]
 80047da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047dc:	4413      	add	r3, r2
 80047de:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	460a      	mov	r2, r1
 80047e6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80047e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80047ee:	461a      	mov	r2, r3
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 80047f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3748      	adds	r7, #72	; 0x48
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop

08004804 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b091      	sub	sp, #68	; 0x44
 8004808:	af04      	add	r7, sp, #16
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3318      	adds	r3, #24
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	7c9a      	ldrb	r2, [r3, #18]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	789a      	ldrb	r2, [r3, #2]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800484e:	4293      	cmp	r3, r2
 8004850:	bfa8      	it	ge
 8004852:	4613      	movge	r3, r2
 8004854:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800485a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	78da      	ldrb	r2, [r3, #3]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004872:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	7c9b      	ldrb	r3, [r3, #18]
 8004880:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8004884:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <SetMeasurementData+0x90>

		iteration = 1;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004892:	e003      	b.n	800489c <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8004894:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004898:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 800489c:	2300      	movs	r3, #0
 800489e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048a2:	e048      	b.n	8004936 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80048a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	3308      	adds	r3, #8
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 80048b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048bc:	224c      	movs	r2, #76	; 0x4c
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	3310      	adds	r3, #16
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 80048cc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d114      	bne.n	80048fe <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	7918      	ldrb	r0, [r3, #4]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	7c1b      	ldrb	r3, [r3, #16]
 80048dc:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80048e0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	9202      	str	r2, [sp, #8]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	9201      	str	r2, [sp, #4]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4623      	mov	r3, r4
 80048f0:	4602      	mov	r2, r0
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fb96 	bl	8004024 <SetTargetData>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	7ddb      	ldrb	r3, [r3, #23]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10d      	bne.n	800492c <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004916:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800491a:	429a      	cmp	r2, r3
 800491c:	da06      	bge.n	800492c <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	8a9b      	ldrh	r3, [r3, #20]
 8004922:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8004924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004928:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 800492c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004930:	3301      	adds	r3, #1
 8004932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004936:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800493a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800493e:	429a      	cmp	r2, r3
 8004940:	d3b0      	bcc.n	80048a4 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800494e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004952:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800495a:	e01f      	b.n	800499c <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800495c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8004966:	330c      	adds	r3, #12
 8004968:	2100      	movs	r1, #0
 800496a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800496e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	4413      	add	r3, r2
 8004976:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800497a:	3320      	adds	r3, #32
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8004980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	4413      	add	r3, r2
 8004988:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004996:	3301      	adds	r3, #1
 8004998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800499c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d9db      	bls.n	800495c <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 80049a4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11b      	bne.n	80049e4 <SetMeasurementData+0x1e0>
 80049ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 80049b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	3308      	adds	r3, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 80049c8:	2304      	movs	r3, #4
 80049ca:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 80049cc:	7efb      	ldrb	r3, [r7, #27]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	337e      	adds	r3, #126	; 0x7e
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff f996 	bl	8003d10 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 80049e4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3734      	adds	r7, #52	; 0x34
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd90      	pop	{r4, r7, pc}

080049f0 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3318      	adds	r3, #24
 8004a02:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	21ff      	movs	r1, #255	; 0xff
 8004a12:	6838      	ldr	r0, [r7, #0]
 8004a14:	f016 f908 	bl	801ac28 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f002 fc2e 	bl	800727e <VL53L1_get_device_results>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8004a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d118      	bne.n	8004a60 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b07      	cmp	r3, #7
 8004a34:	d002      	beq.n	8004a3c <VL53L1_GetMultiRangingData+0x4c>
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d004      	beq.n	8004a44 <VL53L1_GetMultiRangingData+0x54>
 8004a3a:	e007      	b.n	8004a4c <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8004a42:	e006      	b.n	8004a52 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2202      	movs	r2, #2
 8004a48:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8004a4a:	e002      	b.n	8004a52 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fed4 	bl	8004804 <SetMeasurementData>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b090      	sub	sp, #64	; 0x40
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8004a7a:	f240 3305 	movw	r3, #773	; 0x305
 8004a7e:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3318      	adds	r3, #24
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	3348      	adds	r3, #72	; 0x48
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8004a8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11c      	bne.n	8004ace <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a9a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8004aa2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8e3 	bl	8004c74 <VL53L1_run_ref_spad_char>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8004ab4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d108      	bne.n	8004ace <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8004abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fe fb2c 	bl	8003120 <VL53L1_SetPresetMode>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8004ace:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ad2:	f113 0f1d 	cmn.w	r3, #29
 8004ad6:	d14e      	bne.n	8004b76 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8004ad8:	f107 0310 	add.w	r3, r7, #16
 8004adc:	2206      	movs	r2, #6
 8004ade:	2128      	movs	r1, #40	; 0x28
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f00e fbf6 	bl	80132d2 <VL53L1_read_nvm_raw_data>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8004aec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8004af4:	f107 020c 	add.w	r2, r7, #12
 8004af8:	2302      	movs	r3, #2
 8004afa:	2114      	movs	r1, #20
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f010 fe5f 	bl	80157c0 <VL53L1_WriteMulti>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8004b08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8004b10:	7b3a      	ldrb	r2, [r7, #12]
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8004b16:	7b7a      	ldrb	r2, [r7, #13]
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8004b1c:	f107 0310 	add.w	r3, r7, #16
 8004b20:	3310      	adds	r3, #16
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8004b24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b30:	210d      	movs	r1, #13
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f010 fe44 	bl	80157c0 <VL53L1_WriteMulti>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8004b3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d117      	bne.n	8004b76 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4c:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	785a      	ldrb	r2, [r3, #1]
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	789a      	ldrb	r2, [r3, #2]
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	78da      	ldrb	r2, [r3, #3]
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	791a      	ldrb	r2, [r3, #4]
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	795a      	ldrb	r2, [r3, #5]
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8004b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3740      	adds	r7, #64	; 0x40
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d84a      	bhi.n	8004c3c <VL53L1_SmudgeCorrectionEnable+0xb8>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <VL53L1_SmudgeCorrectionEnable+0x28>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004c1d 	.word	0x08004c1d
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f004 fbee 	bl	800939e <VL53L1_dynamic_xtalk_correction_disable>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f004 fc17 	bl	80093fa <VL53L1_dynamic_xtalk_correction_apply_disable>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f004 fc40 	bl	8009456 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	733b      	strb	r3, [r7, #12]
		break;
 8004bda:	e032      	b.n	8004c42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f004 fbc7 	bl	8009370 <VL53L1_dynamic_xtalk_correction_enable>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f004 fbf0 	bl	80093cc <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004bec:	4603      	mov	r3, r0
 8004bee:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f004 fc30 	bl	8009456 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	733b      	strb	r3, [r7, #12]
		break;
 8004bfa:	e022      	b.n	8004c42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f004 fbb7 	bl	8009370 <VL53L1_dynamic_xtalk_correction_enable>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f004 fbe0 	bl	80093cc <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f004 fc09 	bl	8009428 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8004c16:	4603      	mov	r3, r0
 8004c18:	733b      	strb	r3, [r7, #12]
		break;
 8004c1a:	e012      	b.n	8004c42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f004 fba7 	bl	8009370 <VL53L1_dynamic_xtalk_correction_enable>
 8004c22:	4603      	mov	r3, r0
 8004c24:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f004 fbe7 	bl	80093fa <VL53L1_dynamic_xtalk_correction_apply_disable>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f004 fc10 	bl	8009456 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004c36:	4603      	mov	r3, r0
 8004c38:	733b      	strb	r3, [r7, #12]
		break;
 8004c3a:	e002      	b.n	8004c42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c3c:	23fc      	movs	r3, #252	; 0xfc
 8004c3e:	73fb      	strb	r3, [r7, #15]
		break;
 8004c40:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8004c56:	7b7b      	ldrb	r3, [r7, #13]
 8004c58:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8004c62:	7b3b      	ldrb	r3, [r7, #12]
 8004c64:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8004c74:	b5b0      	push	{r4, r5, r7, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
 8004c78:	af04      	add	r7, sp, #16
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3318      	adds	r3, #24
 8004c86:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004c8e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f007 fc99 	bl	800c5d0 <VL53L1_enable_powerforce>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8004ca2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d117      	bne.n	8004cda <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	7858      	ldrb	r0, [r3, #1]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685c      	ldr	r4, [r3, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	891d      	ldrh	r5, [r3, #8]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	899b      	ldrh	r3, [r3, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	8952      	ldrh	r2, [r2, #10]
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8004cc4:	9102      	str	r1, [sp, #8]
 8004cc6:	9201      	str	r2, [sp, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	462b      	mov	r3, r5
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4601      	mov	r1, r0
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f009 fbda 	bl	800e48a <VL53L1_set_ref_spad_char_config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8004cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f891 	bl	8004e10 <VL53L1_run_device_test>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8004cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8004cfa:	f107 020c 	add.w	r2, r7, #12
 8004cfe:	2302      	movs	r3, #2
 8004d00:	21d9      	movs	r1, #217	; 0xd9
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f010 fd92 	bl	801582c <VL53L1_ReadMulti>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8004d0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8004d14:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8004d20:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d28:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8004d2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d108      	bne.n	8004d46 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8004d34:	f107 020c 	add.w	r2, r7, #12
 8004d38:	2302      	movs	r3, #2
 8004d3a:	2114      	movs	r1, #20
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f010 fd3f 	bl	80157c0 <VL53L1_WriteMulti>
 8004d42:	4603      	mov	r3, r0
 8004d44:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8004d4e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8004d56:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8004d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8004d66:	f107 020c 	add.w	r2, r7, #12
 8004d6a:	2306      	movs	r3, #6
 8004d6c:	21ac      	movs	r1, #172	; 0xac
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f010 fd5c 	bl	801582c <VL53L1_ReadMulti>
 8004d74:	4603      	mov	r3, r0
 8004d76:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8004d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8004d80:	f107 020c 	add.w	r2, r7, #12
 8004d84:	2306      	movs	r3, #6
 8004d86:	210d      	movs	r1, #13
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f010 fd19 	bl	80157c0 <VL53L1_WriteMulti>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8004d92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d117      	bne.n	8004dca <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8004d9a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8004da2:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8004daa:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8004dba:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8004dc2:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8004dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d114      	bne.n	8004dfc <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d00c      	beq.n	8004df6 <VL53L1_run_ref_spad_char+0x182>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	dc0e      	bgt.n	8004dfe <VL53L1_run_ref_spad_char+0x18a>
 8004de0:	2b0e      	cmp	r3, #14
 8004de2:	d002      	beq.n	8004dea <VL53L1_run_ref_spad_char+0x176>
 8004de4:	2b0f      	cmp	r3, #15
 8004de6:	d003      	beq.n	8004df0 <VL53L1_run_ref_spad_char+0x17c>
 8004de8:	e009      	b.n	8004dfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8004dea:	23e4      	movs	r3, #228	; 0xe4
 8004dec:	77fb      	strb	r3, [r7, #31]
			break;
 8004dee:	e006      	b.n	8004dfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8004df0:	23e3      	movs	r3, #227	; 0xe3
 8004df2:	77fb      	strb	r3, [r7, #31]
			break;
 8004df4:	e003      	b.n	8004dfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8004df6:	23e2      	movs	r3, #226	; 0xe2
 8004df8:	77fb      	strb	r3, [r7, #31]
			break;
 8004dfa:	e000      	b.n	8004dfe <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8004dfc:	bf00      	nop



	*pcal_status = status;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	7ffa      	ldrb	r2, [r7, #31]
 8004e02:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8004e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bdb0      	pop	{r4, r5, r7, pc}

08004e10 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3318      	adds	r3, #24
 8004e24:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8004e32:	f107 030b 	add.w	r3, r7, #11
 8004e36:	461a      	mov	r2, r3
 8004e38:	2130      	movs	r1, #48	; 0x30
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f010 fd88 	bl	8015950 <VL53L1_RdByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8004e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8004e4c:	7afa      	ldrb	r2, [r7, #11]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8004e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f007 fb39 	bl	800c4d8 <VL53L1_start_test>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8004e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f00f ff5c 	bl	8014d30 <VL53L1_wait_for_test_completion>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8004e84:	f107 020c 	add.w	r2, r7, #12
 8004e88:	2302      	movs	r3, #2
 8004e8a:	2189      	movs	r1, #137	; 0x89
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f010 fccd 	bl	801582c <VL53L1_ReadMulti>
 8004e92:	4603      	mov	r3, r0
 8004e94:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8004e9e:	7b3a      	ldrb	r2, [r7, #12]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8004ea6:	7b7a      	ldrb	r2, [r7, #13]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8004ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8004ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f007 fba1 	bl	800c618 <VL53L1_clear_interrupt>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8004eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f007 faf7 	bl	800c4d8 <VL53L1_start_test>
 8004eea:	4603      	mov	r3, r0
 8004eec:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8004eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b21      	cmp	r3, #33	; 0x21
 8004f0e:	d006      	beq.n	8004f1e <select_offset_per_vcsel+0x24>
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	dc2b      	bgt.n	8004f6c <select_offset_per_vcsel+0x72>
 8004f14:	2b1b      	cmp	r3, #27
 8004f16:	d01c      	beq.n	8004f52 <select_offset_per_vcsel+0x58>
 8004f18:	2b1e      	cmp	r3, #30
 8004f1a:	d00d      	beq.n	8004f38 <select_offset_per_vcsel+0x3e>
 8004f1c:	e026      	b.n	8004f6c <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f24:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8004f28:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f30:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8004f34:	817b      	strh	r3, [r7, #10]
		break;
 8004f36:	e02b      	b.n	8004f90 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3e:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8004f42:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4a:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8004f4e:	817b      	strh	r3, [r7, #10]
		break;
 8004f50:	e01e      	b.n	8004f90 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004f5c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f64:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004f68:	817b      	strh	r3, [r7, #10]
		break;
 8004f6a:	e011      	b.n	8004f90 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004f76:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7e:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004f82:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004f84:	23fc      	movs	r3, #252	; 0xfc
 8004f86:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	801a      	strh	r2, [r3, #0]
		break;
 8004f8e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f96:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8004f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004fa0:	7a7b      	ldrb	r3, [r7, #9]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <select_offset_per_vcsel+0xb6>
 8004faa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004fae:	e001      	b.n	8004fb4 <select_offset_per_vcsel+0xba>
 8004fb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	8013      	strh	r3, [r2, #0]

	return status;
 8004fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004fc8:	b490      	push	{r4, r7}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	71fb      	strb	r3, [r7, #7]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ffa:	e021      	b.n	8005040 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8004ffc:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	461a      	mov	r2, r3
 8005008:	0052      	lsls	r2, r2, #1
 800500a:	441a      	add	r2, r3
 800500c:	00d3      	lsls	r3, r2, #3
 800500e:	461a      	mov	r2, r3
 8005010:	460b      	mov	r3, r1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	440b      	add	r3, r1
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4413      	add	r3, r2
 800501a:	4423      	add	r3, r4
 800501c:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005020:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	4413      	add	r3, r2
 8005028:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 800502a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	3206      	adds	r2, #6
 8005030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800503a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503c:	3301      	adds	r3, #1
 800503e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005040:	79bb      	ldrb	r3, [r7, #6]
 8005042:	b29b      	uxth	r3, r3
 8005044:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005046:	429a      	cmp	r2, r3
 8005048:	d3d8      	bcc.n	8004ffc <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d047      	beq.n	80050e0 <vl53l1_diff_histo_stddev+0x118>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d044      	beq.n	80050e0 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	b29b      	uxth	r3, r3
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800505e:	e03a      	b.n	80050d6 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8005060:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	0052      	lsls	r2, r2, #1
 800506e:	441a      	add	r2, r3
 8005070:	00d3      	lsls	r3, r2, #3
 8005072:	461a      	mov	r2, r3
 8005074:	460b      	mov	r3, r1
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	440b      	add	r3, r1
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	4413      	add	r3, r2
 800507e:	4423      	add	r3, r4
 8005080:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005084:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005088:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005090:	fb03 f202 	mul.w	r2, r3, r2
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	fb92 f3f3 	sdiv	r3, r2, r3
 800509a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800509c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3206      	adds	r2, #6
 80050a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050aa:	fb03 f202 	mul.w	r2, r3, r2
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	69b9      	ldr	r1, [r7, #24]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 80050c0:	69b8      	ldr	r0, [r7, #24]
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	441a      	add	r2, r3
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80050d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d2:	3301      	adds	r3, #1
 80050d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3bf      	bcc.n	8005060 <vl53l1_diff_histo_stddev+0x98>
	}
}
 80050e0:	bf00      	nop
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc90      	pop	{r4, r7}
 80050e8:	4770      	bx	lr

080050ea <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 80050ea:	b5b0      	push	{r4, r5, r7, lr}
 80050ec:	b08c      	sub	sp, #48	; 0x30
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3318      	adds	r3, #24
 80050f8:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 800510e:	2300      	movs	r3, #0
 8005110:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800511a:	2318      	movs	r3, #24
 800511c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	461a      	mov	r2, r3
 8005124:	f248 018f 	movw	r1, #32911	; 0x808f
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f003 f9fb 	bl	8008524 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 800512e:	f107 0310 	add.w	r3, r7, #16
 8005132:	461a      	mov	r2, r3
 8005134:	f248 018e 	movw	r1, #32910	; 0x808e
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f003 f9f3 	bl	8008524 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005144:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 811b 	bne.w	8005384 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8005168:	7efb      	ldrb	r3, [r7, #27]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	b2db      	uxtb	r3, r3
 800516e:	7eba      	ldrb	r2, [r7, #26]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005188:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800518c:	3b01      	subs	r3, #1
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e004      	b.n	800519e <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800519e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80051a2:	7efb      	ldrb	r3, [r7, #27]
 80051a4:	69f8      	ldr	r0, [r7, #28]
 80051a6:	461a      	mov	r2, r3
 80051a8:	0052      	lsls	r2, r2, #1
 80051aa:	441a      	add	r2, r3
 80051ac:	0153      	lsls	r3, r2, #5
 80051ae:	461a      	mov	r2, r3
 80051b0:	460b      	mov	r3, r1
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	440b      	add	r3, r1
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	4413      	add	r3, r2
 80051ba:	4403      	add	r3, r0
 80051bc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 80051c0:	3308      	adds	r3, #8
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dd0c      	ble.n	80051e2 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 80051c8:	7e79      	ldrb	r1, [r7, #25]
 80051ca:	7efa      	ldrb	r2, [r7, #27]
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	460b      	mov	r3, r1
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	69f8      	ldr	r0, [r7, #28]
 80051de:	f7ff fef3 	bl	8004fc8 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	db23      	blt.n	8005232 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80051f0:	3318      	adds	r3, #24
 80051f2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f015 fd15 	bl	801ac28 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8005210:	7efb      	ldrb	r3, [r7, #27]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	2206      	movs	r2, #6
 800521e:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005222:	e034      	b.n	800528e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522a:	2207      	movs	r2, #7
 800522c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005230:	e02d      	b.n	800528e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005238:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800523c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005244:	e01e      	b.n	8005284 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8005246:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800524a:	7e39      	ldrb	r1, [r7, #24]
 800524c:	7efb      	ldrb	r3, [r7, #27]
 800524e:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	3006      	adds	r0, #6
 8005256:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800525a:	69f8      	ldr	r0, [r7, #28]
 800525c:	461a      	mov	r2, r3
 800525e:	0052      	lsls	r2, r2, #1
 8005260:	441a      	add	r2, r3
 8005262:	00d3      	lsls	r3, r2, #3
 8005264:	461a      	mov	r2, r3
 8005266:	460b      	mov	r3, r1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	440b      	add	r3, r1
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	442b      	add	r3, r5
 8005272:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005276:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800527a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800527e:	3301      	adds	r3, #1
 8005280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005284:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005288:	7ebb      	ldrb	r3, [r7, #26]
 800528a:	429a      	cmp	r2, r3
 800528c:	d3db      	bcc.n	8005246 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005294:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8005298:	461a      	mov	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	3b01      	subs	r3, #1
 800529e:	429a      	cmp	r2, r3
 80052a0:	d109      	bne.n	80052b6 <vl53l1_histo_merge+0x1cc>
 80052a2:	7efb      	ldrb	r3, [r7, #27]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 80052b4:	e00e      	b.n	80052d4 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 80052b6:	7efb      	ldrb	r3, [r7, #27]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d10b      	bne.n	80052d4 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80052c6:	3301      	adds	r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80052d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d102      	bne.n	80052e2 <vl53l1_histo_merge+0x1f8>
 80052dc:	7efb      	ldrb	r3, [r7, #27]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d069      	beq.n	80053b6 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e8:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d162      	bne.n	80053b6 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052f4:	e008      	b.n	8005308 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 80052f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	3206      	adds	r2, #6
 80052fc:	2100      	movs	r1, #0
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8005302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005304:	3301      	adds	r3, #1
 8005306:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005308:	7ebb      	ldrb	r3, [r7, #26]
 800530a:	b29b      	uxth	r3, r3
 800530c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800530e:	429a      	cmp	r2, r3
 8005310:	d3f1      	bcc.n	80052f6 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8005312:	2300      	movs	r3, #0
 8005314:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005316:	e02f      	b.n	8005378 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800531e:	e023      	b.n	8005368 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8005320:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	3206      	adds	r2, #6
 8005326:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800532a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800532e:	7efb      	ldrb	r3, [r7, #27]
 8005330:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8005332:	69fc      	ldr	r4, [r7, #28]
 8005334:	461a      	mov	r2, r3
 8005336:	0052      	lsls	r2, r2, #1
 8005338:	441a      	add	r2, r3
 800533a:	00d3      	lsls	r3, r2, #3
 800533c:	461a      	mov	r2, r3
 800533e:	460b      	mov	r3, r1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	440b      	add	r3, r1
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4413      	add	r3, r2
 8005348:	442b      	add	r3, r5
 800534a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800534e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8005352:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005354:	18c1      	adds	r1, r0, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3206      	adds	r2, #6
 800535a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800535e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005362:	3301      	adds	r3, #1
 8005364:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005368:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	429a      	cmp	r2, r3
 8005370:	dbd6      	blt.n	8005320 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8005372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005374:	3301      	adds	r3, #1
 8005376:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005378:	7ebb      	ldrb	r3, [r7, #26]
 800537a:	b29b      	uxth	r3, r3
 800537c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800537e:	429a      	cmp	r2, r3
 8005380:	d3ca      	bcc.n	8005318 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8005382:	e018      	b.n	80053b6 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800538e:	3b01      	subs	r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005398:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80053a6:	2bff      	cmp	r3, #255	; 0xff
 80053a8:	d105      	bne.n	80053b6 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 80053b6:	bf00      	nop
 80053b8:	3728      	adds	r7, #40	; 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080053c0 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b0c6      	sub	sp, #280	; 0x118
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053ce:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80053dc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 80053e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053ec:	2200      	movs	r2, #0
 80053ee:	2185      	movs	r1, #133	; 0x85
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	f010 fa51 	bl	8015898 <VL53L1_WrByte>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80053fc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8005404:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005408:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f007 f8df 	bl	800c5d0 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8005412:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8005416:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800541a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800541e:	f248 018c 	movw	r1, #32908	; 0x808c
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	f003 f87e 	bl	8008524 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542c:	2b03      	cmp	r3, #3
 800542e:	d81b      	bhi.n	8005468 <VL53L1_load_patch+0xa8>
 8005430:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <VL53L1_load_patch+0x78>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	08005451 	.word	0x08005451
 8005440:	08005459 	.word	0x08005459
 8005444:	08005461 	.word	0x08005461
	case 0:
		patch_power = 0x00;
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800544e:	e00e      	b.n	800546e <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8005450:	2310      	movs	r3, #16
 8005452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005456:	e00a      	b.n	800546e <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8005458:	2320      	movs	r3, #32
 800545a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800545e:	e006      	b.n	800546e <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005466:	e002      	b.n	800546e <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 800546e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005472:	2b00      	cmp	r3, #0
 8005474:	d134      	bne.n	80054e0 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8005476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800547a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800547e:	2229      	movs	r2, #41	; 0x29
 8005480:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8005482:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005486:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800548a:	22c9      	movs	r2, #201	; 0xc9
 800548c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800548e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005496:	220e      	movs	r2, #14
 8005498:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800549a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800549e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80054a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ae:	2228      	movs	r2, #40	; 0x28
 80054b0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80054b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054c0:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 80054c2:	f107 020c 	add.w	r2, r7, #12
 80054c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054ca:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80054ce:	2306      	movs	r3, #6
 80054d0:	f240 4176 	movw	r1, #1142	; 0x476
 80054d4:	6800      	ldr	r0, [r0, #0]
 80054d6:	f010 f973 	bl	80157c0 <VL53L1_WriteMulti>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80054e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d132      	bne.n	800554e <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 80054e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054f0:	2203      	movs	r2, #3
 80054f2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80054f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054fc:	226d      	movs	r2, #109	; 0x6d
 80054fe:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8005500:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005508:	2203      	movs	r2, #3
 800550a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800550c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005514:	226f      	movs	r2, #111	; 0x6f
 8005516:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8005518:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800551c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005520:	2207      	movs	r2, #7
 8005522:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8005524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800552c:	2229      	movs	r2, #41	; 0x29
 800552e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8005530:	f107 020c 	add.w	r2, r7, #12
 8005534:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005538:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800553c:	2306      	movs	r3, #6
 800553e:	f240 4196 	movw	r1, #1174	; 0x496
 8005542:	6800      	ldr	r0, [r0, #0]
 8005544:	f010 f93c 	bl	80157c0 <VL53L1_WriteMulti>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 800554e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11a      	bne.n	800558c <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8005556:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800555a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8005562:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800556a:	2207      	movs	r2, #7
 800556c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800556e:	f107 020c 	add.w	r2, r7, #12
 8005572:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005576:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800557a:	2302      	movs	r3, #2
 800557c:	f240 4172 	movw	r1, #1138	; 0x472
 8005580:	6800      	ldr	r0, [r0, #0]
 8005582:	f010 f91d 	bl	80157c0 <VL53L1_WriteMulti>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 800558c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11a      	bne.n	80055ca <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8005594:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005598:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80055a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055a8:	2207      	movs	r2, #7
 80055aa:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80055ac:	f107 020c 	add.w	r2, r7, #12
 80055b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055b4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80055b8:	2302      	movs	r3, #2
 80055ba:	f240 4174 	movw	r1, #1140	; 0x474
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	f010 f8fe 	bl	80157c0 <VL53L1_WriteMulti>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 80055ca:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 80055d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80055da:	2201      	movs	r2, #1
 80055dc:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f010 f959 	bl	8015898 <VL53L1_WrByte>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 80055ec:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 80055f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80055fc:	2201      	movs	r2, #1
 80055fe:	2185      	movs	r1, #133	; 0x85
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f010 f949 	bl	8015898 <VL53L1_WrByte>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800560c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8005610:	4618      	mov	r0, r3
 8005612:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8005630:	2200      	movs	r2, #0
 8005632:	2185      	movs	r1, #133	; 0x85
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f010 f92f 	bl	8015898 <VL53L1_WrByte>
 800563a:	4603      	mov	r3, r0
 800563c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f006 ffd4 	bl	800c5f4 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 800564c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f010 f91c 	bl	8015898 <VL53L1_WrByte>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8005664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 800566c:	2201      	movs	r2, #1
 800566e:	2185      	movs	r1, #133	; 0x85
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f010 f911 	bl	8015898 <VL53L1_WrByte>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8005686:	b5b0      	push	{r4, r5, r7, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af04      	add	r7, sp, #16
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3318      	adds	r3, #24
 800569a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80056a2:	3308      	adds	r3, #8
 80056a4:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 80056aa:	2162      	movs	r1, #98	; 0x62
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f006 f810 	bl	800b6d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2204      	movs	r2, #4
 80056b6:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2210      	movs	r2, #16
 80056c2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80056ce:	2300      	movs	r3, #0
 80056d0:	75bb      	strb	r3, [r7, #22]
 80056d2:	e01b      	b.n	800570c <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 80056d4:	7dba      	ldrb	r2, [r7, #22]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	3308      	adds	r3, #8
 80056e8:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005706:	7dbb      	ldrb	r3, [r7, #22]
 8005708:	3301      	adds	r3, #1
 800570a:	75bb      	strb	r3, [r7, #22]
 800570c:	7dbb      	ldrb	r3, [r7, #22]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d9e0      	bls.n	80056d4 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2210      	movs	r2, #16
 8005716:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2210      	movs	r2, #16
 8005726:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005732:	2300      	movs	r3, #0
 8005734:	75bb      	strb	r3, [r7, #22]
 8005736:	e039      	b.n	80057ac <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8005738:	7dba      	ldrb	r2, [r7, #22]
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8005764:	7dba      	ldrb	r2, [r7, #22]
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800577a:	7dba      	ldrb	r2, [r7, #22]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8005790:	7dba      	ldrb	r2, [r7, #22]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80057a6:	7dbb      	ldrb	r3, [r7, #22]
 80057a8:	3301      	adds	r3, #1
 80057aa:	75bb      	strb	r3, [r7, #22]
 80057ac:	7dbb      	ldrb	r3, [r7, #22]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	d9c2      	bls.n	8005738 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2201      	movs	r2, #1
 80057bc:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2200      	movs	r2, #0
 80057c2:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2200      	movs	r2, #0
 80057c8:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2201      	movs	r2, #1
 80057ce:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2201      	movs	r2, #1
 80057d4:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2201      	movs	r2, #1
 80057da:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e2:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80057ea:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80057f2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2264      	movs	r2, #100	; 0x64
 80057f8:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005800:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005810:	2203      	movs	r2, #3
 8005812:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f240 72db 	movw	r2, #2011	; 0x7db
 8005828:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8005832:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f005 ff2e 	bl	800b698 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005842:	3318      	adds	r3, #24
 8005844:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f015 f9ec 	bl	801ac28 <memset>
	pdev->bin_rec_pos = 0;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <VL53L1_data_init+0x1fa>
 800586e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8b8 	bl	80059ec <VL53L1_read_p2p_data>
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8005880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800588e:	4618      	mov	r0, r3
 8005890:	f003 fdf8 	bl	8009484 <VL53L1_init_refspadchar_config_struct>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8005898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80058a6:	4618      	mov	r0, r3
 80058a8:	f003 fe10 	bl	80094cc <VL53L1_init_ssc_config_struct>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 80058b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f003 fe21 	bl	800950e <VL53L1_init_xtalk_config_struct>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 80058d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80058de:	4618      	mov	r0, r3
 80058e0:	f003 fe89 	bl	80095f6 <VL53L1_init_xtalk_extract_config_struct>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 80058e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d107      	bne.n	8005900 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 feac 	bl	8009654 <VL53L1_init_offset_cal_config_struct>
 80058fc:	4603      	mov	r3, r0
 80058fe:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800590e:	4618      	mov	r0, r3
 8005910:	f003 fec7 	bl	80096a2 <VL53L1_init_zone_cal_config_struct>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f003 fedb 	bl	80096ea <VL53L1_init_hist_post_process_config_struct>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 8005938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8005946:	4618      	mov	r0, r3
 8005948:	f004 f8f6 	bl	8009b38 <VL53L1_init_hist_gen3_dmax_config_struct>
 800594c:	4603      	mov	r3, r0
 800594e:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d107      	bne.n	8005968 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800595e:	4618      	mov	r0, r3
 8005960:	f003 ff32 	bl	80097c8 <VL53L1_init_tuning_parm_storage_struct>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8005968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d116      	bne.n	800599e <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	7858      	ldrb	r0, [r3, #1]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	8b1c      	ldrh	r4, [r3, #24]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	689d      	ldr	r5, [r3, #8]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	6912      	ldr	r2, [r2, #16]
 8005984:	6939      	ldr	r1, [r7, #16]
 8005986:	6949      	ldr	r1, [r1, #20]
 8005988:	9102      	str	r1, [sp, #8]
 800598a:	9201      	str	r2, [sp, #4]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	462b      	mov	r3, r5
 8005990:	4622      	mov	r2, r4
 8005992:	4601      	mov	r1, r0
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fc8f 	bl	80062b8 <VL53L1_set_preset_mode>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059a4:	461a      	mov	r2, r3
 80059a6:	2118      	movs	r1, #24
 80059a8:	2000      	movs	r0, #0
 80059aa:	f00a fa90 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80059b4:	461a      	mov	r2, r3
 80059b6:	2118      	movs	r1, #24
 80059b8:	2000      	movs	r0, #0
 80059ba:	f00a fa88 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80059c4:	461a      	mov	r2, r3
 80059c6:	210c      	movs	r1, #12
 80059c8:	2000      	movs	r0, #0
 80059ca:	f006 fc26 	bl	800c21a <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f009 fcd2 	bl	800f378 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f009 fbd1 	bl	800f17c <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f009 fcf7 	bl	800f3ce <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80059e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bdb0      	pop	{r4, r5, r7, pc}

080059ec <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b091      	sub	sp, #68	; 0x44
 80059f0:	af04      	add	r7, sp, #16
 80059f2:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3318      	adds	r3, #24
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	3348      	adds	r3, #72	; 0x48
 8005a0c:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	339c      	adds	r3, #156	; 0x9c
 8005a12:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f00d fdd1 	bl	80135cc <VL53L1_get_static_nvm_managed>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8005a30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d108      	bne.n	8005a4a <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	3348      	adds	r3, #72	; 0x48
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f00d ff02 	bl	8013848 <VL53L1_get_customer_nvm_managed>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8005a4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d117      	bne.n	8005a82 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f00e fdda 	bl	8014614 <VL53L1_get_nvm_copy_data>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8005a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f006 f921 	bl	800bcc4 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8005a82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10e      	bne.n	8005aa8 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8005aa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	33c0      	adds	r3, #192	; 0xc0
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f00d fc3c 	bl	8013334 <VL53L1_read_nvm_optical_centre>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8005ac2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	3360      	adds	r3, #96	; 0x60
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f00d fc52 	bl	801337a <VL53L1_read_nvm_cal_peak_rate_map>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8005adc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d12d      	bne.n	8005b40 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	339c      	adds	r3, #156	; 0x9c
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f00d fc6b 	bl	80133c6 <VL53L1_read_nvm_additional_offset_cal_data>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d120      	bne.n	8005b40 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11c      	bne.n	8005b40 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005b12:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	69f9      	ldr	r1, [r7, #28]
 8005b2a:	3102      	adds	r1, #2
 8005b2c:	9103      	str	r1, [sp, #12]
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	2238      	movs	r2, #56	; 0x38
 8005b32:	9201      	str	r2, [sp, #4]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	23ff      	movs	r3, #255	; 0xff
 8005b38:	22c7      	movs	r2, #199	; 0xc7
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f008 f934 	bl	800dda8 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8005b40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d12f      	bne.n	8005ba8 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8005b48:	f107 030c 	add.w	r3, r7, #12
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f00d fc5a 	bl	801340c <VL53L1_read_nvm_fmt_range_results_data>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8005b5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d120      	bne.n	8005ba8 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8005b66:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8005b6e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8005b76:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005b94:	e003      	b.n	8005b9e <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2214      	movs	r2, #20
 8005b9a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8005ba8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	461a      	mov	r2, r3
 8005bba:	21de      	movs	r1, #222	; 0xde
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f00f fefb 	bl	80159b8 <VL53L1_RdWord>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	d204      	bcs.n	8005bde <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8005bda:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8005bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	33bc      	adds	r3, #188	; 0xbc
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f97d 	bl	8005eec <VL53L1_get_mode_mitigation_roi>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3734      	adds	r7, #52	; 0x34
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd90      	pop	{r4, r7, pc}

08005c38 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3318      	adds	r3, #24
 8005c4a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c52:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005c5a:	23f1      	movs	r3, #241	; 0xf1
 8005c5c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8005c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10e      	bne.n	8005c84 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c72:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005c76:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cae:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005cb6:	23f1      	movs	r3, #241	; 0xf1
 8005cb8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cce:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8005cd2:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8005cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b088      	sub	sp, #32
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3318      	adds	r3, #24
 8005d00:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005d0c:	23f1      	movs	r3, #241	; 0xf1
 8005d0e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8005d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11b      	bne.n	8005d50 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	f006 fe0b 	bl	800c962 <VL53L1_calc_timeout_register_values>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8005d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3318      	adds	r3, #24
 8005d72:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005d86:	23f1      	movs	r3, #241	; 0xf1
 8005d88:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8005d8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d14a      	bne.n	8005e28 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f006 fc56 	bl	800c652 <VL53L1_calc_macro_period_us>
 8005da6:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8005dae:	6979      	ldr	r1, [r7, #20]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f006 fd14 	bl	800c7de <VL53L1_calc_timeout_us>
 8005db6:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8005dc2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005dc4:	8a7b      	ldrh	r3, [r7, #18]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8005dd0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005dd2:	4413      	add	r3, r2
 8005dd4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005dd6:	8a7b      	ldrh	r3, [r7, #18]
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f006 fd66 	bl	800c8ac <VL53L1_calc_decoded_timeout_us>
 8005de0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8005dec:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005dee:	8a7b      	ldrh	r3, [r7, #18]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8005dfa:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005dfc:	4413      	add	r3, r2
 8005dfe:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005e00:	8a7b      	ldrh	r3, [r7, #18]
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f006 fd51 	bl	800c8ac <VL53L1_calc_decoded_timeout_us>
 8005e0a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8005e28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3318      	adds	r3, #24
 8005e4a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	d81c      	bhi.n	8005e90 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8005e6c:	7dbb      	ldrb	r3, [r7, #22]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	fa42 f303 	asr.w	r3, r2, r3
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e001      	b.n	8005e94 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005e90:	23fc      	movs	r3, #252	; 0xfc
 8005e92:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8005e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	7858      	ldrb	r0, [r3, #1]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	7819      	ldrb	r1, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f007 fdeb 	bl	800daa2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	7898      	ldrb	r0, [r3, #2]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	78d9      	ldrb	r1, [r3, #3]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005eda:	461a      	mov	r2, r3
 8005edc:	f007 fe20 	bl	800db20 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8005ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3318      	adds	r3, #24
 8005efe:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8005f12:	f107 020e 	add.w	r2, r7, #14
 8005f16:	f107 010d 	add.w	r1, r7, #13
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f00a f880 	bl	8010020 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005f20:	7bba      	ldrb	r2, [r7, #14]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8005f26:	7b7a      	ldrb	r2, [r7, #13]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8005f32:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3318      	adds	r3, #24
 8005f68:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	331c      	adds	r3, #28
 8005f74:	2240      	movs	r2, #64	; 0x40
 8005f76:	4619      	mov	r1, r3
 8005f78:	f014 fe48 	bl	801ac0c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	785a      	ldrb	r2, [r3, #1]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	33c2      	adds	r3, #194	; 0xc2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f00f fbce 	bl	8015736 <VL53L1_init_zone_config_histogram_bins>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005fae:	e00f      	b.n	8005fd0 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d807      	bhi.n	8005fc8 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005fc6:	e003      	b.n	8005fd0 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2211      	movs	r2, #17
 8005fcc:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8005fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3318      	adds	r3, #24
 8005fee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	33c2      	adds	r3, #194	; 0xc2
 8005ff4:	226c      	movs	r2, #108	; 0x6c
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6838      	ldr	r0, [r7, #0]
 8005ffa:	f014 fe07 	bl	801ac0c <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8005ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	460b      	mov	r3, r1
 800601a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800601c:	2300      	movs	r3, #0
 800601e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3318      	adds	r3, #24
 8006024:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	3b01      	subs	r3, #1
 800602a:	2b26      	cmp	r3, #38	; 0x26
 800602c:	f200 8139 	bhi.w	80062a2 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	080060d5 	.word	0x080060d5
 800603c:	080060d5 	.word	0x080060d5
 8006040:	080060d5 	.word	0x080060d5
 8006044:	080060d5 	.word	0x080060d5
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060ff 	.word	0x080060ff
 8006050:	080060ff 	.word	0x080060ff
 8006054:	080060ff 	.word	0x080060ff
 8006058:	080062a3 	.word	0x080062a3
 800605c:	080062a3 	.word	0x080062a3
 8006060:	08006153 	.word	0x08006153
 8006064:	080061fb 	.word	0x080061fb
 8006068:	08006153 	.word	0x08006153
 800606c:	080062a3 	.word	0x080062a3
 8006070:	080062a3 	.word	0x080062a3
 8006074:	080062a3 	.word	0x080062a3
 8006078:	080060d5 	.word	0x080060d5
 800607c:	080060ff 	.word	0x080060ff
 8006080:	08006153 	.word	0x08006153
 8006084:	08006153 	.word	0x08006153
 8006088:	08006153 	.word	0x08006153
 800608c:	08006153 	.word	0x08006153
 8006090:	08006153 	.word	0x08006153
 8006094:	0800617d 	.word	0x0800617d
 8006098:	080061a7 	.word	0x080061a7
 800609c:	080061d1 	.word	0x080061d1
 80060a0:	08006153 	.word	0x08006153
 80060a4:	08006153 	.word	0x08006153
 80060a8:	08006153 	.word	0x08006153
 80060ac:	08006225 	.word	0x08006225
 80060b0:	08006225 	.word	0x08006225
 80060b4:	08006225 	.word	0x08006225
 80060b8:	0800624f 	.word	0x0800624f
 80060bc:	0800624f 	.word	0x0800624f
 80060c0:	0800624f 	.word	0x0800624f
 80060c4:	08006129 	.word	0x08006129
 80060c8:	08006129 	.word	0x08006129
 80060cc:	08006129 	.word	0x08006129
 80060d0:	08006279 	.word	0x08006279
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	601a      	str	r2, [r3, #0]
	break;
 80060fc:	e0d4      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	601a      	str	r2, [r3, #0]
	break;
 8006126:	e0bf      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	601a      	str	r2, [r3, #0]
	break;
 8006150:	e0aa      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	601a      	str	r2, [r3, #0]

	break;
 800617a:	e095      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	601a      	str	r2, [r3, #0]
	break;
 80061a4:	e080      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	601a      	str	r2, [r3, #0]
	break;
 80061ce:	e06b      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	601a      	str	r2, [r3, #0]
	break;
 80061f8:	e056      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	601a      	str	r2, [r3, #0]
	break;
 8006222:	e041      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	601a      	str	r2, [r3, #0]
	break;
 800624c:	e02c      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	601a      	str	r2, [r3, #0]
	break;
 8006276:	e017      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	601a      	str	r2, [r3, #0]
	break;
 80062a0:	e002      	b.n	80062a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80062a2:	23fc      	movs	r3, #252	; 0xfc
 80062a4:	75fb      	strb	r3, [r7, #23]
		break;
 80062a6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80062a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b098      	sub	sp, #96	; 0x60
 80062bc:	af06      	add	r7, sp, #24
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	72fb      	strb	r3, [r7, #11]
 80062c6:	4613      	mov	r3, r2
 80062c8:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3318      	adds	r3, #24
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80062dc:	3308      	adds	r3, #8
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 80062e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	f203 3342 	addw	r3, r3, #834	; 0x342
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80062f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	f203 3362 	addw	r3, r3, #866	; 0x362
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006316:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8006318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631a:	33c2      	adds	r3, #194	; 0xc2
 800631c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800631e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006320:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006324:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8006326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006328:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800632c:	3318      	adds	r3, #24
 800632e:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8006330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006332:	7afa      	ldrb	r2, [r7, #11]
 8006334:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8006336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800633a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006340:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006346:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8006348:	2103      	movs	r1, #3
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f005 f9c1 	bl	800b6d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3b01      	subs	r3, #1
 8006354:	2b26      	cmp	r3, #38	; 0x26
 8006356:	f200 8321 	bhi.w	800699c <VL53L1_set_preset_mode+0x6e4>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <VL53L1_set_preset_mode+0xa8>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	080063fd 	.word	0x080063fd
 8006364:	08006421 	.word	0x08006421
 8006368:	08006445 	.word	0x08006445
 800636c:	08006469 	.word	0x08006469
 8006370:	0800648d 	.word	0x0800648d
 8006374:	080064b1 	.word	0x080064b1
 8006378:	080064d5 	.word	0x080064d5
 800637c:	080064f9 	.word	0x080064f9
 8006380:	0800699d 	.word	0x0800699d
 8006384:	0800699d 	.word	0x0800699d
 8006388:	0800651d 	.word	0x0800651d
 800638c:	08006685 	.word	0x08006685
 8006390:	08006815 	.word	0x08006815
 8006394:	0800683d 	.word	0x0800683d
 8006398:	08006865 	.word	0x08006865
 800639c:	0800688d 	.word	0x0800688d
 80063a0:	080068b5 	.word	0x080068b5
 80063a4:	080068d9 	.word	0x080068d9
 80063a8:	0800665d 	.word	0x0800665d
 80063ac:	08006545 	.word	0x08006545
 80063b0:	0800656d 	.word	0x0800656d
 80063b4:	08006595 	.word	0x08006595
 80063b8:	080065bd 	.word	0x080065bd
 80063bc:	080065e5 	.word	0x080065e5
 80063c0:	0800660d 	.word	0x0800660d
 80063c4:	08006635 	.word	0x08006635
 80063c8:	080066ad 	.word	0x080066ad
 80063cc:	080066d5 	.word	0x080066d5
 80063d0:	080066fd 	.word	0x080066fd
 80063d4:	08006725 	.word	0x08006725
 80063d8:	0800674d 	.word	0x0800674d
 80063dc:	08006775 	.word	0x08006775
 80063e0:	0800679d 	.word	0x0800679d
 80063e4:	080067c5 	.word	0x080067c5
 80063e8:	080067ed 	.word	0x080067ed
 80063ec:	080068fd 	.word	0x080068fd
 80063f0:	08006925 	.word	0x08006925
 80063f4:	0800694d 	.word	0x0800694d
 80063f8:	08006975 	.word	0x08006975

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	9302      	str	r3, [sp, #8]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006414:	f003 fbc6 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800641e:	e2c1      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	9302      	str	r3, [sp, #8]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006438:	f003 fd2d 	bl	8009e96 <VL53L1_preset_mode_standard_ranging_short_range>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006442:	e2af      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800645a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800645c:	f003 fd60 	bl	8009f20 <VL53L1_preset_mode_standard_ranging_long_range>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006466:	e29d      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006480:	f003 fd93 	bl	8009faa <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800648a:	e28b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064a4:	f003 fdaa 	bl	8009ffc <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064ae:	e279      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	9303      	str	r3, [sp, #12]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064c8:	f003 fdc1 	bl	800a04e <VL53L1_preset_mode_timed_ranging>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064d2:	e267      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064ec:	f003 fded 	bl	800a0ca <VL53L1_preset_mode_timed_ranging_short_range>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064f6:	e255      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006510:	f003 fe19 	bl	800a146 <VL53L1_preset_mode_timed_ranging_long_range>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800651a:	e243      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9304      	str	r3, [sp, #16]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006538:	f003 fefb 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006542:	e22f      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	9302      	str	r3, [sp, #8]
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800655e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006560:	f003 ff7c 	bl	800a45c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800656a:	e21b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006586:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006588:	f003 ffcc 	bl	800a524 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006592:	e207      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	9302      	str	r3, [sp, #8]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065b0:	f003 ffe0 	bl	800a574 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065ba:	e1f3      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065d8:	f004 f830 	bl	800a63c <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065e2:	e1df      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	9303      	str	r3, [sp, #12]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006600:	f004 fe25 	bl	800b24e <VL53L1_preset_mode_histogram_multizone>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800660a:	e1cb      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006628:	f004 fe63 	bl	800b2f2 <VL53L1_preset_mode_histogram_multizone_short_range>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006632:	e1b7      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800664e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006650:	f004 fea1 	bl	800b396 <VL53L1_preset_mode_histogram_multizone_long_range>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800665a:	e1a3      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006678:	f004 ffde 	bl	800b638 <VL53L1_preset_mode_histogram_ranging_ref>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006682:	e18f      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066a0:	f003 fff4 	bl	800a68c <VL53L1_preset_mode_histogram_ranging_short_timing>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066aa:	e17b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066c8:	f004 f86c 	bl	800a7a4 <VL53L1_preset_mode_histogram_long_range>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066d2:	e167      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066f0:	f004 f8f6 	bl	800a8e0 <VL53L1_preset_mode_histogram_long_range_mm1>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066fa:	e153      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	9302      	str	r3, [sp, #8]
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006718:	f004 f943 	bl	800a9a2 <VL53L1_preset_mode_histogram_long_range_mm2>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006722:	e13f      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800673e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006740:	f004 f957 	bl	800a9f2 <VL53L1_preset_mode_histogram_medium_range>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800674a:	e12b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	9303      	str	r3, [sp, #12]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006764:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006768:	f004 f9e1 	bl	800ab2e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006772:	e117      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	9302      	str	r3, [sp, #8]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800678e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006790:	f004 fa2e 	bl	800abf0 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800679a:	e103      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	9303      	str	r3, [sp, #12]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	9302      	str	r3, [sp, #8]
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067b8:	f004 fa42 	bl	800ac40 <VL53L1_preset_mode_histogram_short_range>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80067c2:	e0ef      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067e0:	f004 fb4c 	bl	800ae7c <VL53L1_preset_mode_histogram_short_range_mm1>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80067ea:	e0db      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006808:	f004 fb99 	bl	800af3e <VL53L1_preset_mode_histogram_short_range_mm2>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006812:	e0c7      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	9303      	str	r3, [sp, #12]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800682e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006830:	f004 fbad 	bl	800af8e <VL53L1_preset_mode_histogram_characterisation>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800683a:	e0b3      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	9304      	str	r3, [sp, #16]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	9302      	str	r3, [sp, #8]
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006856:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006858:	f004 fbca 	bl	800aff0 <VL53L1_preset_mode_histogram_xtalk_planar>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006862:	e09f      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800687e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006880:	f004 fc2d 	bl	800b0de <VL53L1_preset_mode_histogram_xtalk_mm1>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800688a:	e08b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	9303      	str	r3, [sp, #12]
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068a8:	f004 fcad 	bl	800b206 <VL53L1_preset_mode_histogram_xtalk_mm2>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068b2:	e077      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	9303      	str	r3, [sp, #12]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068cc:	f004 fdb5 	bl	800b43a <VL53L1_preset_mode_olt>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068d6:	e065      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	9303      	str	r3, [sp, #12]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068f0:	f003 fce5 	bl	800a2be <VL53L1_preset_mode_singleshot_ranging>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068fa:	e053      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	9302      	str	r3, [sp, #8]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006918:	f003 fc7d 	bl	800a216 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006922:	e03f      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006940:	f003 fc3f 	bl	800a1c2 <VL53L1_preset_mode_low_power_auto_ranging>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800694a:	e02b      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	9304      	str	r3, [sp, #16]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	9302      	str	r3, [sp, #8]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006966:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006968:	f003 fc7f 	bl	800a26a <VL53L1_preset_mode_low_power_auto_long_ranging>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006972:	e017      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	9302      	str	r3, [sp, #8]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800698e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006990:	f004 f9f4 	bl	800ad7c <VL53L1_preset_mode_special_histogram_short_range>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800699a:	e003      	b.n	80069a4 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800699c:	23fc      	movs	r3, #252	; 0xfc
 800699e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 80069a2:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 80069a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	893a      	ldrh	r2, [r7, #8]
 80069b0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80069b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b4:	893a      	ldrh	r2, [r7, #8]
 80069b6:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 80069b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 80069c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff f98f 	bl	8005cea <VL53L1_set_timeouts_us>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80069d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80069da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff f92b 	bl	8005c38 <VL53L1_set_inter_measurement_period_ms>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80069e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ea:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80069ee:	3301      	adds	r3, #1
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f005 fa82 	bl	800bf04 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8006a00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3748      	adds	r7, #72	; 0x48
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3318      	adds	r3, #24
 8006a1e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8006a58:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3318      	adds	r3, #24
 8006a7a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	887a      	ldrh	r2, [r7, #2]
 8006ab0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8006ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b0d2      	sub	sp, #328	; 0x148
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ace:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ad2:	6018      	str	r0, [r3, #0]
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006adc:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ae8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006aec:	460a      	mov	r2, r1
 8006aee:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006af6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006afa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3318      	adds	r3, #24
 8006b02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8006b06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006b14:	3308      	adds	r3, #8
 8006b16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8006b1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b1e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006b22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8006b26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b2a:	3348      	adds	r3, #72	; 0x48
 8006b2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b34:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006b3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b40:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006b44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006b48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b4c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006b50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006b54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b58:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006b5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006b60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b64:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006b68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8006b6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b70:	332c      	adds	r3, #44	; 0x2c
 8006b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006b76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b7a:	3348      	adds	r3, #72	; 0x48
 8006b7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8006ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ba4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006ba8:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8006bb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bb4:	791b      	ldrb	r3, [r3, #4]
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8006bbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bc2:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8006bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8006bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bd4:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8006bd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006bda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8006bde:	3336      	adds	r3, #54	; 0x36
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006be6:	4413      	add	r3, r2
 8006be8:	1d9a      	adds	r2, r3, #6
 8006bea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f7ff f955 	bl	8005ea4 <VL53L1_set_user_zone>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8006c00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c04:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d019      	beq.n	8006c40 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8006c0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c14:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006c22:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006c26:	4413      	add	r3, r2
 8006c28:	1c9a      	adds	r2, r3, #2
 8006c2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c32:	4611      	mov	r1, r2
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f001 fbd7 	bl	80083e8 <VL53L1_set_zone_dss_config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8006c40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c44:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10d      	bne.n	8006c6c <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8006c50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c54:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d107      	bne.n	8006c6c <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006c5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c60:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8006c64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c68:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8006c6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006c78:	2bff      	cmp	r3, #255	; 0xff
 8006c7a:	d106      	bne.n	8006c8a <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8006c7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c92:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d139      	bne.n	8006d0e <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006c9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca2:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d131      	bne.n	8006d0e <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8006caa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cae:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8006cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cba:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8006cbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8006cc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ccc:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8006cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8006cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cdc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006ce0:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8006ce2:	b21a      	sxth	r2, r3
 8006ce4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ce8:	825a      	strh	r2, [r3, #18]
 8006cea:	e003      	b.n	8006cf4 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8006cec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8006cf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cf8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d805      	bhi.n	8006d0e <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8006d02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d06:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006d0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d16:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d117      	bne.n	8006d4e <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006d1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10f      	bne.n	8006d4e <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8006d2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d36:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8006d3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d3e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006d42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d46:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d4a:	2206      	movs	r2, #6
 8006d4c:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8006d4e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8006d56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	f007 f98c 	bl	800e07c <VL53L1_save_cfg_data>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8006d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d6e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	d826      	bhi.n	8006dc8 <VL53L1_init_and_start_range+0x304>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <VL53L1_init_and_start_range+0x2bc>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006dc1 	.word	0x08006dc1
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006d99 	.word	0x08006d99
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006d9e:	e017      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8006da0:	230d      	movs	r3, #13
 8006da2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006da6:	e013      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8006da8:	2324      	movs	r3, #36	; 0x24
 8006daa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dae:	e00f      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8006db0:	2344      	movs	r3, #68	; 0x44
 8006db2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006db6:	e00b      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8006db8:	235a      	movs	r3, #90	; 0x5a
 8006dba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dbe:	e007      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8006dc0:	2371      	movs	r3, #113	; 0x71
 8006dc2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dc6:	e003      	b.n	8006dd0 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8006dc8:	2383      	movs	r3, #131	; 0x83
 8006dca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dce:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8006dd0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006dd4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8006dd8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006dea:	e00b      	b.n	8006e04 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8006dec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006dfa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006dfe:	3301      	adds	r3, #1
 8006e00:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006e04:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8006e08:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d3ed      	bcc.n	8006dec <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8006e10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e14:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d917      	bls.n	8006e4e <VL53L1_init_and_start_range+0x38a>
 8006e1e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d113      	bne.n	8006e4e <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006e26:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e2a:	f1c3 0301 	rsb	r3, r3, #1
 8006e2e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006e32:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8006e36:	f107 020c 	add.w	r2, r7, #12
 8006e3a:	4413      	add	r3, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	210b      	movs	r1, #11
 8006e40:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8006e44:	f00c fb0d 	bl	8013462 <VL53L1_i2c_encode_static_nvm_managed>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8006e4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e52:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d917      	bls.n	8006e8c <VL53L1_init_and_start_range+0x3c8>
 8006e5c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d113      	bne.n	8006e8c <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006e64:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e68:	f1c3 030d 	rsb	r3, r3, #13
 8006e6c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006e70:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8006e74:	f107 020c 	add.w	r2, r7, #12
 8006e78:	4413      	add	r3, r2
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2117      	movs	r1, #23
 8006e7e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8006e82:	f00c fbca 	bl	801361a <VL53L1_i2c_encode_customer_nvm_managed>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8006e8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e90:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d917      	bls.n	8006eca <VL53L1_init_and_start_range+0x406>
 8006e9a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006ea2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006ea6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8006eaa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006eae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8006eb2:	f107 020c 	add.w	r2, r7, #12
 8006eb6:	4413      	add	r3, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2120      	movs	r1, #32
 8006ebc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006ec0:	f00c fce9 	bl	8013896 <VL53L1_i2c_encode_static_config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8006eca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ece:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d917      	bls.n	8006f08 <VL53L1_init_and_start_range+0x444>
 8006ed8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006ee0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006ee4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8006ee8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006eec:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8006ef0:	f107 020c 	add.w	r2, r7, #12
 8006ef4:	4413      	add	r3, r2
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	2116      	movs	r1, #22
 8006efa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006efe:	f00c fdad 	bl	8013a5c <VL53L1_i2c_encode_general_config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8006f08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f0c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d917      	bls.n	8006f46 <VL53L1_init_and_start_range+0x482>
 8006f16:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d113      	bne.n	8006f46 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006f1e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f22:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8006f26:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006f2a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8006f2e:	f107 020c 	add.w	r2, r7, #12
 8006f32:	4413      	add	r3, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	2117      	movs	r1, #23
 8006f38:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006f3c:	f00c fe12 	bl	8013b64 <VL53L1_i2c_encode_timing_config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8006f46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f4a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d036      	beq.n	8006fc2 <VL53L1_init_and_start_range+0x4fe>
 8006f54:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d132      	bne.n	8006fc2 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006f5c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f60:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8006f64:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8006f68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d017      	beq.n	8006fa6 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f86:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8006f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f98:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8006fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fa4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006fa6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8006faa:	f107 020c 	add.w	r2, r7, #12
 8006fae:	4413      	add	r3, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2112      	movs	r1, #18
 8006fb4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006fb8:	f00c fe56 	bl	8013c68 <VL53L1_i2c_encode_dynamic_config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8006fc2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d113      	bne.n	8006ff2 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8006fca:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006fce:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8006fd2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006fd6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8006fda:	f107 020c 	add.w	r2, r7, #12
 8006fde:	4413      	add	r3, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2105      	movs	r1, #5
 8006fe4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8006fe8:	f00c fec3 	bl	8013d72 <VL53L1_i2c_encode_system_control>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8006ff2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10f      	bne.n	800701a <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8006ffa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006ffe:	f107 020c 	add.w	r2, r7, #12
 8007002:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8007006:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800700a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 800700e:	6800      	ldr	r0, [r0, #0]
 8007010:	f00e fbd6 	bl	80157c0 <VL53L1_WriteMulti>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 800701a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8007022:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007026:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	f004 fb82 	bl	800b734 <VL53L1_update_ll_driver_rd_state>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8007036:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800703e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007042:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	f004 fd15 	bl	800ba76 <VL53L1_update_ll_driver_cfg_state>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8007052:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8007056:	4618      	mov	r0, r3
 8007058:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007068:	2300      	movs	r3, #0
 800706a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3318      	adds	r3, #24
 8007070:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007078:	3308      	adds	r3, #8
 800707a:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8007082:	b25b      	sxtb	r3, r3
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800708a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800708e:	b25b      	sxtb	r3, r3
 8007090:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f00c fea1 	bl	8013de8 <VL53L1_set_system_control>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 80070bc:	2103      	movs	r1, #3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f004 fb07 	bl	800b6d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80070ca:	3301      	adds	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f004 ff14 	bl	800bf04 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f004 ff46 	bl	800bf6e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e8:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f008 f9b4 	bl	800f45e <VL53L1_low_power_auto_data_stop_range>

	return status;
 80070f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b0c8      	sub	sp, #288	; 0x120
 8007106:	af00      	add	r7, sp, #0
 8007108:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800710c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007110:	6018      	str	r0, [r3, #0]
 8007112:	460a      	mov	r2, r1
 8007114:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007118:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800711c:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007124:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3318      	adds	r3, #24
 8007130:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8007134:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007138:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800713c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8007140:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007144:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8007148:	331c      	adds	r3, #28
 800714a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800714e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007152:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8007156:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800715a:	2388      	movs	r3, #136	; 0x88
 800715c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800716c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007170:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d008      	beq.n	800718c <VL53L1_get_measurement_results+0x8a>
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10d      	bne.n	800719a <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800717e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007182:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8007186:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800718a:	e00a      	b.n	80071a2 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800718c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007190:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8007194:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8007198:	e003      	b.n	80071a2 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800719a:	232c      	movs	r3, #44	; 0x2c
 800719c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80071a0:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 80071a2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 80071aa:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80071ae:	f107 0208 	add.w	r2, r7, #8
 80071b2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80071b6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80071ba:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 80071be:	6800      	ldr	r0, [r0, #0]
 80071c0:	f00e fb34 	bl	801582c <VL53L1_ReadMulti>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80071ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80071ce:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d917      	bls.n	8007208 <VL53L1_get_measurement_results+0x106>
 80071d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d113      	bne.n	8007208 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80071e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80071e4:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80071e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80071ec:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80071f0:	f107 0208 	add.w	r2, r7, #8
 80071f4:	4413      	add	r3, r2
 80071f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80071fa:	4619      	mov	r1, r3
 80071fc:	2038      	movs	r0, #56	; 0x38
 80071fe:	f00c ff71 	bl	80140e4 <VL53L1_i2c_decode_debug_results>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8007208:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800720c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d017      	beq.n	8007246 <VL53L1_get_measurement_results+0x144>
 8007216:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800721a:	2b00      	cmp	r3, #0
 800721c:	d113      	bne.n	8007246 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800721e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007222:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8007226:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800722a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800722e:	f107 0208 	add.w	r2, r7, #8
 8007232:	4413      	add	r3, r2
 8007234:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007238:	4619      	mov	r1, r3
 800723a:	2021      	movs	r0, #33	; 0x21
 800723c:	f00c fef1 	bl	8014022 <VL53L1_i2c_decode_core_results>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8007246:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800724a:	2b00      	cmp	r3, #0
 800724c:	d110      	bne.n	8007270 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007254:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8007258:	f107 0208 	add.w	r2, r7, #8
 800725c:	4413      	add	r3, r2
 800725e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007262:	4619      	mov	r1, r3
 8007264:	202c      	movs	r0, #44	; 0x2c
 8007266:	f00c fde6 	bl	8013e36 <VL53L1_i2c_decode_system_results>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007270:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8007274:	4618      	mov	r0, r3
 8007276:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	b0a0      	sub	sp, #128	; 0x80
 8007284:	af06      	add	r7, sp, #24
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	460b      	mov	r3, r1
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800728e:	2300      	movs	r3, #0
 8007290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3318      	adds	r3, #24
 8007298:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80072a0:	3308      	adds	r3, #8
 80072a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 80072a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 80072a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072aa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80072ae:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 80072b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b2:	332c      	adds	r3, #44	; 0x2c
 80072b4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 80072b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b8:	33c2      	adds	r3, #194	; 0xc2
 80072ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 80072bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072be:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80072c2:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80072ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072cc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80072d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80072da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072dc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80072e0:	3318      	adds	r3, #24
 80072e2:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80072e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80072ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ee:	3348      	adds	r3, #72	; 0x48
 80072f0:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 80072f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f4:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 80072fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fc:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007304:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007308:	2b01      	cmp	r3, #1
 800730a:	d108      	bne.n	800731e <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007312:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <VL53L1_get_device_results+0xa0>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <VL53L1_get_device_results+0xa2>
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8007324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007326:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 82a9 	beq.w	8007886 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8007334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007336:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800733a:	4619      	mov	r1, r3
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fbd7 	bl	8007af0 <VL53L1_get_histogram_bin_data>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8007348:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800734c:	2b00      	cmp	r3, #0
 800734e:	d118      	bne.n	8007382 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8007354:	2b00      	cmp	r3, #0
 8007356:	d114      	bne.n	8007382 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8007358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800735a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800735e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8007362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800736a:	4413      	add	r3, r2
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007370:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f005 fb6c 	bl	800ca54 <VL53L1_hist_copy_and_scale_ambient_info>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8007382:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 8220 	bne.w	80077cc <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800738c:	f107 0313 	add.w	r3, r7, #19
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f008 f91a 	bl	800f5cc <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80073a2:	7cfb      	ldrb	r3, [r7, #19]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 80073aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80073b2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	3202      	adds	r2, #2
 80073ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80073c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c4:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f005 fa41 	bl	800c860 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 80073de:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80073ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ec:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80073f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f6:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80073f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fa:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80073fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073fe:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8007402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007404:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8007406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007408:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8007410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007412:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8007416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007418:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800741c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8007422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007424:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8007428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800742a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800743e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007440:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8007442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007444:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8007446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007448:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800744a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800744e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007450:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8007452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007454:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8007458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f004 fc2f 	bl	800bcc4 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8007466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007468:	795b      	ldrb	r3, [r3, #5]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d048      	beq.n	8007500 <VL53L1_get_device_results+0x282>
 800746e:	2b03      	cmp	r3, #3
 8007470:	dc56      	bgt.n	8007520 <VL53L1_get_device_results+0x2a2>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d002      	beq.n	800747c <VL53L1_get_device_results+0x1fe>
 8007476:	2b02      	cmp	r3, #2
 8007478:	d02e      	beq.n	80074d8 <VL53L1_get_device_results+0x25a>
 800747a:	e051      	b.n	8007520 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800747c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800747e:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8007482:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8007492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007494:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8007498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800749a:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80074a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a6:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80074aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80074ac:	319c      	adds	r1, #156	; 0x9c
 80074ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80074b0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 80074b4:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 80074b8:	b2a4      	uxth	r4, r4
 80074ba:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80074bc:	351c      	adds	r5, #28
 80074be:	9505      	str	r5, [sp, #20]
 80074c0:	9404      	str	r4, [sp, #16]
 80074c2:	9003      	str	r0, [sp, #12]
 80074c4:	9102      	str	r1, [sp, #8]
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	4643      	mov	r3, r8
 80074cc:	4672      	mov	r2, lr
 80074ce:	4661      	mov	r1, ip
 80074d0:	4630      	mov	r0, r6
 80074d2:	f006 fa36 	bl	800d942 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80074d6:	e027      	b.n	8007528 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 80074d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 80074e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80074f6:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 80074f8:	b21a      	sxth	r2, r3
 80074fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fc:	839a      	strh	r2, [r3, #28]
		break;
 80074fe:	e013      	b.n	8007528 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8007500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007502:	331c      	adds	r3, #28
 8007504:	4619      	mov	r1, r3
 8007506:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007508:	f7fd fcf7 	bl	8004efa <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8007512:	b29b      	uxth	r3, r3
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	b29b      	uxth	r3, r3
 8007518:	b21a      	sxth	r2, r3
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	839a      	strh	r2, [r3, #28]
		break;
 800751e:	e003      	b.n	8007528 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	2200      	movs	r2, #0
 8007524:	839a      	strh	r2, [r3, #28]
		break;
 8007526:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8007528:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 814f 	bne.w	80077d0 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800753e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007540:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8007544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007546:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800754a:	b29c      	uxth	r4, r3
 800754c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800754e:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4623      	mov	r3, r4
 8007556:	f006 fb99 	bl	800dc8c <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800755a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800755c:	7999      	ldrb	r1, [r3, #6]
 800755e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007560:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 ff7b 	bl	8008462 <VL53L1_get_dmax_calibration_data>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8007572:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 812c 	bne.w	80077d4 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 800757c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757e:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8007582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007584:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8007588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800758a:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800758e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007590:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8007594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007596:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800759a:	3308      	adds	r3, #8
				pdev->wArea2,
 800759c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800759e:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 80075a2:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 80075a4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80075a6:	9405      	str	r4, [sp, #20]
 80075a8:	f107 0413 	add.w	r4, r7, #19
 80075ac:	9404      	str	r4, [sp, #16]
 80075ae:	9203      	str	r2, [sp, #12]
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	9001      	str	r0, [sp, #4]
 80075b4:	9100      	str	r1, [sp, #0]
 80075b6:	4633      	mov	r3, r6
 80075b8:	462a      	mov	r2, r5
 80075ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f00e fb45 	bl	8015c4c <VL53L1_ipp_hist_process_data>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 80075c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d050      	beq.n	8007672 <VL53L1_get_device_results+0x3f4>
 80075d0:	7cfb      	ldrb	r3, [r7, #19]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d94d      	bls.n	8007672 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80075dc:	e045      	b.n	800766a <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 80075de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80075e2:	224c      	movs	r2, #76	; 0x4c
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	3310      	adds	r3, #16
 80075ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	7cfa      	ldrb	r2, [r7, #19]
 80075f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	7cfa      	ldrb	r2, [r7, #19]
 8007606:	fbb3 f2f2 	udiv	r2, r3, r2
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	7cfa      	ldrb	r2, [r7, #19]
 8007614:	fb93 f2f2 	sdiv	r2, r3, r2
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007620:	461a      	mov	r2, r3
 8007622:	7cfb      	ldrb	r3, [r7, #19]
 8007624:	fb92 f3f3 	sdiv	r3, r2, r3
 8007628:	b29a      	uxth	r2, r3
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007632:	461a      	mov	r2, r3
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	fb92 f3f3 	sdiv	r3, r2, r3
 800763a:	b29a      	uxth	r2, r3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007644:	461a      	mov	r2, r3
 8007646:	7cfb      	ldrb	r3, [r7, #19]
 8007648:	fb92 f3f3 	sdiv	r3, r2, r3
 800764c:	b29a      	uxth	r2, r3
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	7cfa      	ldrb	r2, [r7, #19]
 8007658:	fbb3 f2f2 	udiv	r2, r3, r2
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8007660:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007664:	3301      	adds	r3, #1
 8007666:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800766a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800766e:	2b03      	cmp	r3, #3
 8007670:	d9b5      	bls.n	80075de <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8007672:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 80ae 	bne.w	80077d8 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 800767c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800767e:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8007682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007684:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8007688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768a:	330e      	adds	r3, #14
 800768c:	461a      	mov	r2, r3
 800768e:	f006 f922 	bl	800d8d6 <VL53L1_hist_wrap_dmax>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8007698:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 809d 	bne.w	80077dc <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80076a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80076ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b4:	4413      	add	r3, r2
 80076b6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80076b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80076c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076ca:	4413      	add	r3, r2
 80076cc:	f103 0208 	add.w	r2, r3, #8
 80076d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f005 fc1d 	bl	800cf12 <VL53L1_hist_phase_consistency_check>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 80076de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d17c      	bne.n	80077e0 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80076e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80076f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f8:	4413      	add	r3, r2
 80076fa:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80076fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8007700:	4613      	mov	r3, r2
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800770c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800770e:	4413      	add	r3, r2
 8007710:	f103 0208 	add.w	r2, r3, #8
 8007714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007716:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f006 f883 	bl	800d826 <VL53L1_hist_xmonitor_consistency_check>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8007726:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800772a:	2b00      	cmp	r3, #0
 800772c:	d15a      	bne.n	80077e4 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800772e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	2210      	movs	r2, #16
 800773c:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800773e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007740:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007744:	3301      	adds	r3, #1
 8007746:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007752:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8007754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007756:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800775a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800775e:	429a      	cmp	r2, r3
 8007760:	d222      	bcs.n	80077a8 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8007762:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800776a:	4413      	add	r3, r2
 800776c:	3304      	adds	r3, #4
 800776e:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8007774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007776:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777a:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800777c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777e:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8007790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007792:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800779a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779c:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80077a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a6:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 80077a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11b      	bne.n	80077e8 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 80077b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b2:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80077b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b8:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80077bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077be:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80077c2:	331c      	adds	r3, #28
 80077c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077c6:	f006 fbbe 	bl	800df46 <VL53L1_hist_copy_results_to_sys_and_core>
 80077ca:	e00e      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077cc:	bf00      	nop
 80077ce:	e00c      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077d0:	bf00      	nop
 80077d2:	e00a      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077d4:	bf00      	nop
 80077d6:	e008      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077d8:	bf00      	nop
 80077da:	e006      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077dc:	bf00      	nop
 80077de:	e004      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077e0:	bf00      	nop
 80077e2:	e002      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077e8:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80077ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d036      	beq.n	8007860 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 80077f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f4:	79db      	ldrb	r3, [r3, #7]
 80077f6:	2b06      	cmp	r3, #6
 80077f8:	d00a      	beq.n	8007810 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 80077fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8007802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f006 fc73 	bl	800e0f0 <VL53L1_dynamic_zone_update>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007816:	e015      	b.n	8007844 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8007818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800781e:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <VL53L1_get_device_results+0x5ac>
 8007826:	2103      	movs	r1, #3
 8007828:	e000      	b.n	800782c <VL53L1_get_device_results+0x5ae>
 800782a:	2101      	movs	r1, #1
 800782c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007832:	4413      	add	r3, r2
 8007834:	460a      	mov	r2, r1
 8007836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800783a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800783e:	3301      	adds	r3, #1
 8007840:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007844:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007848:	2b0f      	cmp	r3, #15
 800784a:	d9e5      	bls.n	8007818 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 800784c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f006 fcc6 	bl	800e1e6 <VL53L1_multizone_hist_bins_update>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8007860:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f007 f9d3 	bl	800ec14 <VL53L1_dynamic_xtalk_correction_corrector>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8007874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007878:	2b00      	cmp	r3, #0
 800787a:	d043      	beq.n	8007904 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e03e      	b.n	8007904 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8007886:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800788a:	2b00      	cmp	r3, #0
 800788c:	d107      	bne.n	800789e <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	4619      	mov	r1, r3
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fc35 	bl	8007102 <VL53L1_get_measurement_results>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 800789e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80078a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 80078ac:	4618      	mov	r0, r3
 80078ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b0:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 80078b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b6:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 80078ba:	321c      	adds	r2, #28
 80078bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078be:	f000 fc1f 	bl	8008100 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d11c      	bne.n	8007904 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 80078ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f007 fe24 	bl	800f528 <VL53L1_low_power_auto_setup_manual_calibration>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2201      	movs	r2, #1
 80078ea:	709a      	strb	r2, [r3, #2]
 80078ec:	e00a      	b.n	8007904 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80078ee:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d102      	bne.n	8007904 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2202      	movs	r2, #2
 8007902:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007906:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800790a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800790c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800790e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007910:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8007914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007916:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8007918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800791e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007920:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8007922:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 80b0 	bne.w	8007a8c <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 800792c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800792e:	2210      	movs	r2, #16
 8007930:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8007934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007936:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800793a:	3301      	adds	r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007940:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8007944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007946:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800794a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 800794e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007950:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8007954:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007958:	429a      	cmp	r2, r3
 800795a:	f080 8097 	bcs.w	8007a8c <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 800795e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8007962:	4613      	mov	r3, r2
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800796e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007970:	4413      	add	r3, r2
 8007972:	3308      	adds	r3, #8
 8007974:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8007976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007978:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800797a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797c:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800797e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007980:	785a      	ldrb	r2, [r3, #1]
 8007982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007984:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8007986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007988:	789a      	ldrb	r2, [r3, #2]
 800798a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798c:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 800798e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007990:	78da      	ldrb	r2, [r3, #3]
 8007992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007994:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 8007996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007998:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 800799c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 80079a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 80079a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a8:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 80079b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80079b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b8:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80079bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80079c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c4:	7c5a      	ldrb	r2, [r3, #17]
 80079c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c8:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80079ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079cc:	7c9a      	ldrb	r2, [r3, #18]
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80079d2:	2300      	movs	r3, #0
 80079d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80079d8:	e052      	b.n	8007a80 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80079da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80079de:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80079e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079e4:	204c      	movs	r0, #76	; 0x4c
 80079e6:	fb00 f303 	mul.w	r3, r0, r3
 80079ea:	440b      	add	r3, r1
 80079ec:	3338      	adds	r3, #56	; 0x38
 80079ee:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80079f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80079f2:	4613      	mov	r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4403      	add	r3, r0
 80079fc:	3308      	adds	r3, #8
 80079fe:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007a00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007a04:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007a08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a0a:	204c      	movs	r0, #76	; 0x4c
 8007a0c:	fb00 f303 	mul.w	r3, r0, r3
 8007a10:	440b      	add	r3, r1
 8007a12:	333c      	adds	r3, #60	; 0x3c
 8007a14:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a18:	4613      	mov	r3, r2
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4403      	add	r3, r0
 8007a22:	330c      	adds	r3, #12
 8007a24:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007a26:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8007a2a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007a2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a30:	204c      	movs	r0, #76	; 0x4c
 8007a32:	fb00 f303 	mul.w	r3, r0, r3
 8007a36:	440b      	add	r3, r1
 8007a38:	3354      	adds	r3, #84	; 0x54
 8007a3a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8007a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a3e:	4613      	mov	r3, r2
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	3310      	adds	r3, #16
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8007a4e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8007a52:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8007a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a58:	204c      	movs	r0, #76	; 0x4c
 8007a5a:	fb00 f303 	mul.w	r3, r0, r3
 8007a5e:	440b      	add	r3, r1
 8007a60:	335e      	adds	r3, #94	; 0x5e
 8007a62:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8007a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a66:	4613      	mov	r3, r2
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	3312      	adds	r3, #18
 8007a72:	4602      	mov	r2, r0
 8007a74:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8007a76:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a82:	7c9b      	ldrb	r3, [r3, #18]
 8007a84:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d3a6      	bcc.n	80079da <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8007a8c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8007a90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f013 f8ba 	bl	801ac0c <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8007a98:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f003 ff35 	bl	800b910 <VL53L1_check_ll_driver_rd_state>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007aac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3768      	adds	r7, #104	; 0x68
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007aba <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fe fff3 	bl	8006ac4 <VL53L1_init_and_start_range>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8007ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b0d2      	sub	sp, #328	; 0x148
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007afa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007afe:	6018      	str	r0, [r3, #0]
 8007b00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b08:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8007b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007b20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b24:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007b2e:	3308      	adds	r3, #8
 8007b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8007b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b38:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8007b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8007b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b44:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8007b4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b50:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007b54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8007b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8007b64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8007b6c:	f107 030c 	add.w	r3, r7, #12
 8007b70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8007b74:	2300      	movs	r3, #0
 8007b76:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8007b9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ba2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8007baa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10d      	bne.n	8007bce <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8007bb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bb6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8007bba:	2353      	movs	r3, #83	; 0x53
 8007bbc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007bc0:	2188      	movs	r1, #136	; 0x88
 8007bc2:	6800      	ldr	r0, [r0, #0]
 8007bc4:	f00d fe32 	bl	801582c <VL53L1_ReadMulti>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8007bce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8007be2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007be6:	785a      	ldrb	r2, [r3, #1]
 8007be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8007bf6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007bfa:	789a      	ldrb	r2, [r3, #2]
 8007bfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8007c0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c0e:	78da      	ldrb	r2, [r3, #3]
 8007c10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8007c1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	2002      	movs	r0, #2
 8007c28:	f004 fb75 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8007c30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8007c3e:	234e      	movs	r3, #78	; 0x4e
 8007c40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007c44:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007c48:	f107 020c 	add.w	r2, r7, #12
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8007c52:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c56:	2002      	movs	r0, #2
 8007c58:	f004 fb5d 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8007c60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8007c6e:	2350      	movs	r3, #80	; 0x50
 8007c70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8007c74:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007c78:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007c7c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007c80:	5cd2      	ldrb	r2, [r2, r3]
 8007c82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8007c90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8007c9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8007caa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8007cb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc0:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8007cc4:	2351      	movs	r3, #81	; 0x51
 8007cc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8007cca:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007cce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007cd2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007cd6:	5cd3      	ldrb	r3, [r2, r3]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007cde:	2352      	movs	r3, #82	; 0x52
 8007ce0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8007ce4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007ce8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007cec:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007cf0:	5cd2      	ldrb	r2, [r2, r3]
 8007cf2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007cfc:	234d      	movs	r3, #77	; 0x4d
 8007cfe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8007d02:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007d06:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007d0a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007d0e:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8007d12:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8007d14:	2306      	movs	r3, #6
 8007d16:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007d1a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007d1e:	f107 020c 	add.w	r2, r7, #12
 8007d22:	4413      	add	r3, r2
 8007d24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007d2e:	e01a      	b.n	8007d66 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007d30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007d34:	2003      	movs	r0, #3
 8007d36:	f004 fb8d 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 8007d3a:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8007d3c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007d40:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8007d42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d46:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3206      	adds	r2, #6
 8007d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8007d52:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007d56:	3303      	adds	r3, #3
 8007d58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007d5c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007d66:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007d6a:	2b17      	cmp	r3, #23
 8007d6c:	d9e0      	bls.n	8007d30 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8007d6e:	f107 0208 	add.w	r2, r7, #8
 8007d72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d7a:	f248 018d 	movw	r1, #32909	; 0x808d
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	f000 fbd0 	bl	8008524 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8007d84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d118      	bne.n	8007dc8 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8007d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d9a:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8007d9e:	3318      	adds	r3, #24
 8007da0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f012 ff3e 	bl	801ac28 <memset>
		pdev->bin_rec_pos = 0;
 8007dac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8007dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8007dc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10b      	bne.n	8007dee <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8007dd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dda:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007de2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007de6:	6811      	ldr	r1, [r2, #0]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f7fd f97e 	bl	80050ea <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8007dee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007df2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007df6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8007e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e06:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007e10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2218      	movs	r2, #24
 8007e1c:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007e1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2218      	movs	r2, #24
 8007e2a:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8007e2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e30:	78da      	ldrb	r2, [r3, #3]
 8007e32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8007e40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e44:	799b      	ldrb	r3, [r3, #6]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8007e4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8007e5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e5e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8007e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8007e70:	4413      	add	r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8007e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e86:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8007e88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8007e96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e9a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007e9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ea2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007ea6:	6811      	ldr	r1, [r2, #0]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	f004 fed4 	bl	800cc56 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8007eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d117      	bne.n	8007eea <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8007eba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8007ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eca:	795b      	ldrb	r3, [r3, #5]
 8007ecc:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007ece:	4413      	add	r3, r2
 8007ed0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8007ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ed8:	799a      	ldrb	r2, [r3, #6]
 8007eda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ede:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8007ee8:	e016      	b.n	8007f18 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8007eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eee:	79db      	ldrb	r3, [r3, #7]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8007ef6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007efa:	7a1b      	ldrb	r3, [r3, #8]
 8007efc:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007efe:	4413      	add	r3, r2
 8007f00:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8007f04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f08:	7a5a      	ldrb	r2, [r3, #9]
 8007f0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8007f18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007f2c:	e01f      	b.n	8007f6e <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8007f2e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f32:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007f36:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	7b1b      	ldrb	r3, [r3, #12]
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	2b07      	cmp	r3, #7
 8007f46:	d10d      	bne.n	8007f64 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8007f48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	7adb      	ldrb	r3, [r3, #11]
 8007f54:	3304      	adds	r3, #4
 8007f56:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8007f58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8007f64:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007f6e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d9db      	bls.n	8007f2e <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8007f76:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f004 fcdb 	bl	800c936 <VL53L1_decode_timeout>
 8007f80:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8007f82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8007f90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f007 fb54 	bl	800f64c <VL53L1_calc_pll_period_us>
 8007fa4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8007fa8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8007fbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fd4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8007fd8:	f007 fb4f 	bl	800f67a <VL53L1_duration_maths>
 8007fdc:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8007fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fe2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8007fec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ff0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8007ffc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008000:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f007 fc5e 	bl	800f8c6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800800a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800800e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	f008 f875 	bl	8010102 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8008018:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800801c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008020:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800802c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008030:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8008034:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008038:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8008040:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	789b      	ldrb	r3, [r3, #2]
 800804c:	461a      	mov	r2, r3
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800805a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800805e:	4413      	add	r3, r2
 8008060:	3302      	adds	r3, #2
 8008062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8008066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806a:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800806c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008070:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800807a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800807e:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8008080:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008084:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800808e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008092:	2200      	movs	r2, #0
 8008094:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8008096:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800809a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2b11      	cmp	r3, #17
 80080aa:	bf8c      	ite	hi
 80080ac:	2201      	movhi	r2, #1
 80080ae:	2200      	movls	r2, #0
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	d11b      	bne.n	80080ee <VL53L1_get_histogram_bin_data+0x5fe>
 80080b6:	2201      	movs	r2, #1
 80080b8:	409a      	lsls	r2, r3
 80080ba:	4b10      	ldr	r3, [pc, #64]	; (80080fc <VL53L1_get_histogram_bin_data+0x60c>)
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d010      	beq.n	80080ee <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80080cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080e4:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 80080e6:	23fa      	movs	r3, #250	; 0xfa
 80080e8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80080ec:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80080ee:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	0002200e 	.word	0x0002200e

08008100 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8008100:	b480      	push	{r7}
 8008102:	b08b      	sub	sp, #44	; 0x2c
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78da      	ldrb	r2, [r3, #3]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2204      	movs	r2, #4
 8008134:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	8a1b      	ldrh	r3, [r3, #16]
 8008140:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	8a9b      	ldrh	r3, [r3, #20]
 8008146:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	8a5b      	ldrh	r3, [r3, #18]
 800814c:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 800814e:	2300      	movs	r3, #0
 8008150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008154:	e00b      	b.n	800816e <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8008156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	4413      	add	r3, r2
 8008160:	2200      	movs	r2, #0
 8008162:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8008164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008168:	3301      	adds	r3, #1
 800816a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800816e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008172:	2b04      	cmp	r3, #4
 8008174:	d9ef      	bls.n	8008156 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	3314      	adds	r3, #20
 800817a:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800817c:	2300      	movs	r3, #0
 800817e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008182:	e0fe      	b.n	8008382 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800818a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	2200      	movs	r2, #0
 8008190:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d104      	bne.n	80081b0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	2213      	movs	r2, #19
 80081aa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80081ae:	e007      	b.n	80081c0 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	2200      	movs	r2, #0
 80081c4:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	2200      	movs	r2, #0
 80081ca:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	2200      	movs	r2, #0
 80081d0:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	2200      	movs	r2, #0
 80081d6:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	2200      	movs	r2, #0
 80081dc:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	2200      	movs	r2, #0
 80081e2:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80081e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d05c      	beq.n	80082aa <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 80081f0:	e0a8      	b.n	8008344 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	789b      	ldrb	r3, [r3, #2]
 80081f6:	2b07      	cmp	r3, #7
 80081f8:	d103      	bne.n	8008202 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	8a7a      	ldrh	r2, [r7, #18]
 80081fe:	82da      	strh	r2, [r3, #22]
 8008200:	e00b      	b.n	800821a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	789b      	ldrb	r3, [r3, #2]
 8008206:	2b08      	cmp	r3, #8
 8008208:	d103      	bne.n	8008212 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	8aba      	ldrh	r2, [r7, #20]
 800820e:	82da      	strh	r2, [r3, #22]
 8008210:	e003      	b.n	800821a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	8afa      	ldrh	r2, [r7, #22]
 800821e:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	895b      	ldrh	r3, [r3, #10]
 8008234:	015b      	lsls	r3, r3, #5
 8008236:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823e:	d302      	bcc.n	8008246 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8008240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008244:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	b29a      	uxth	r2, r3
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800825c:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826e:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	da01      	bge.n	800827a <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8008276:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800827a:	12db      	asrs	r3, r3, #11
 800827c:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	b21a      	sxth	r2, r3
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80082a8:	e04c      	b.n	8008344 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082c0:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	8bdb      	ldrh	r3, [r3, #30]
 80082ce:	015b      	lsls	r3, r3, #5
 80082d0:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d8:	d302      	bcc.n	80082e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80082da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082de:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80082f6:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	fb02 f303 	mul.w	r3, r2, r3
 8008300:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008308:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	da01      	bge.n	8008314 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8008310:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008314:	12db      	asrs	r3, r3, #11
 8008316:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	b21a      	sxth	r2, r3
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8008342:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	334c      	adds	r3, #76	; 0x4c
 8008376:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8008378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800837c:	3301      	adds	r3, #1
 800837e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008386:	2b01      	cmp	r3, #1
 8008388:	f67f aefc 	bls.w	8008184 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	2b11      	cmp	r3, #17
 800839c:	bf8c      	ite	hi
 800839e:	2201      	movhi	r2, #1
 80083a0:	2200      	movls	r2, #0
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d116      	bne.n	80083d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 80083a8:	2201      	movs	r2, #1
 80083aa:	409a      	lsls	r2, r3
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bf14      	ite	ne
 80083b4:	2301      	movne	r3, #1
 80083b6:	2300      	moveq	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	785b      	ldrb	r3, [r3, #1]
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 80083d4:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80083d6:	bf00      	nop
 80083d8:	372c      	adds	r7, #44	; 0x2c
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	0002200e 	.word	0x0002200e

080083e8 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3318      	adds	r3, #24
 80083fa:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	332c      	adds	r3, #44	; 0x2c
 8008400:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b05      	cmp	r3, #5
 8008408:	d109      	bne.n	800841e <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800841c:	e003      	b.n	8008426 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8008426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3318      	adds	r3, #24
 800844a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8008452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b088      	sub	sp, #32
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	607b      	str	r3, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	72fb      	strb	r3, [r7, #11]
 8008470:	4613      	mov	r3, r2
 8008472:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008474:	2300      	movs	r3, #0
 8008476:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3318      	adds	r3, #24
 800847c:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008484:	3308      	adds	r3, #8
 8008486:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d006      	beq.n	800849c <VL53L1_get_dmax_calibration_data+0x3a>
 800848e:	2b03      	cmp	r3, #3
 8008490:	dc3e      	bgt.n	8008510 <VL53L1_get_dmax_calibration_data+0xae>
 8008492:	2b01      	cmp	r3, #1
 8008494:	d034      	beq.n	8008500 <VL53L1_get_dmax_calibration_data+0x9e>
 8008496:	2b02      	cmp	r3, #2
 8008498:	d02a      	beq.n	80084f0 <VL53L1_get_dmax_calibration_data+0x8e>
 800849a:	e039      	b.n	8008510 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 800849c:	7aba      	ldrb	r2, [r7, #10]
 800849e:	6979      	ldr	r1, [r7, #20]
 80084a0:	4613      	mov	r3, r2
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80084b6:	7aba      	ldrb	r2, [r7, #10]
 80084b8:	6979      	ldr	r1, [r7, #20]
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 80084d6:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ec:	811a      	strh	r2, [r3, #8]
	break;
 80084ee:	e012      	b.n	8008516 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 80084f4:	220a      	movs	r2, #10
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f012 fb87 	bl	801ac0c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 80084fe:	e00a      	b.n	8008516 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8008504:	220a      	movs	r2, #10
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f012 fb7f 	bl	801ac0c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800850e:	e002      	b.n	8008516 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008510:	23fc      	movs	r3, #252	; 0xfc
 8008512:	77fb      	strb	r3, [r7, #31]
	break;
 8008514:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8008516:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8008524:	b480      	push	{r7}
 8008526:	b089      	sub	sp, #36	; 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	460b      	mov	r3, r1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008532:	2300      	movs	r3, #0
 8008534:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3318      	adds	r3, #24
 800853a:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008542:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800854a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008552:	2bbe      	cmp	r3, #190	; 0xbe
 8008554:	f200 86fc 	bhi.w	8009350 <VL53L1_get_tuning_parm+0xe2c>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <VL53L1_get_tuning_parm+0x3c>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	0800885d 	.word	0x0800885d
 8008564:	0800886d 	.word	0x0800886d
 8008568:	0800887d 	.word	0x0800887d
 800856c:	0800888d 	.word	0x0800888d
 8008570:	0800889b 	.word	0x0800889b
 8008574:	080088a9 	.word	0x080088a9
 8008578:	080088b7 	.word	0x080088b7
 800857c:	080088c5 	.word	0x080088c5
 8008580:	080088d3 	.word	0x080088d3
 8008584:	080088e1 	.word	0x080088e1
 8008588:	080088ef 	.word	0x080088ef
 800858c:	080088fb 	.word	0x080088fb
 8008590:	08008909 	.word	0x08008909
 8008594:	08008917 	.word	0x08008917
 8008598:	08008923 	.word	0x08008923
 800859c:	08008931 	.word	0x08008931
 80085a0:	0800893f 	.word	0x0800893f
 80085a4:	0800894f 	.word	0x0800894f
 80085a8:	0800895f 	.word	0x0800895f
 80085ac:	0800896d 	.word	0x0800896d
 80085b0:	0800897d 	.word	0x0800897d
 80085b4:	0800898b 	.word	0x0800898b
 80085b8:	0800899b 	.word	0x0800899b
 80085bc:	080089ab 	.word	0x080089ab
 80085c0:	080089bb 	.word	0x080089bb
 80085c4:	080089cb 	.word	0x080089cb
 80085c8:	080089db 	.word	0x080089db
 80085cc:	080089eb 	.word	0x080089eb
 80085d0:	080089fb 	.word	0x080089fb
 80085d4:	08008a0b 	.word	0x08008a0b
 80085d8:	08008a1b 	.word	0x08008a1b
 80085dc:	08008a29 	.word	0x08008a29
 80085e0:	08008a39 	.word	0x08008a39
 80085e4:	08008a49 	.word	0x08008a49
 80085e8:	08008a59 	.word	0x08008a59
 80085ec:	08008a69 	.word	0x08008a69
 80085f0:	08008a79 	.word	0x08008a79
 80085f4:	08008a89 	.word	0x08008a89
 80085f8:	08008a99 	.word	0x08008a99
 80085fc:	08008aa9 	.word	0x08008aa9
 8008600:	08008ab9 	.word	0x08008ab9
 8008604:	08008ac9 	.word	0x08008ac9
 8008608:	08008ad9 	.word	0x08008ad9
 800860c:	08008ae9 	.word	0x08008ae9
 8008610:	08008af9 	.word	0x08008af9
 8008614:	08008b09 	.word	0x08008b09
 8008618:	08008b19 	.word	0x08008b19
 800861c:	08008b29 	.word	0x08008b29
 8008620:	08008b39 	.word	0x08008b39
 8008624:	08008b49 	.word	0x08008b49
 8008628:	08008b59 	.word	0x08008b59
 800862c:	08008b67 	.word	0x08008b67
 8008630:	08008b75 	.word	0x08008b75
 8008634:	08008b83 	.word	0x08008b83
 8008638:	08008b91 	.word	0x08008b91
 800863c:	08008b9f 	.word	0x08008b9f
 8008640:	08008bad 	.word	0x08008bad
 8008644:	08008bbb 	.word	0x08008bbb
 8008648:	08008bc9 	.word	0x08008bc9
 800864c:	08008bd7 	.word	0x08008bd7
 8008650:	08008be5 	.word	0x08008be5
 8008654:	08008bf3 	.word	0x08008bf3
 8008658:	08008c01 	.word	0x08008c01
 800865c:	08008c0f 	.word	0x08008c0f
 8008660:	08008c1d 	.word	0x08008c1d
 8008664:	08008c2b 	.word	0x08008c2b
 8008668:	08008c39 	.word	0x08008c39
 800866c:	08008c47 	.word	0x08008c47
 8008670:	08008c55 	.word	0x08008c55
 8008674:	08008c63 	.word	0x08008c63
 8008678:	08008c71 	.word	0x08008c71
 800867c:	08008c7f 	.word	0x08008c7f
 8008680:	08008c8d 	.word	0x08008c8d
 8008684:	08008c9b 	.word	0x08008c9b
 8008688:	08008ca7 	.word	0x08008ca7
 800868c:	08008cb5 	.word	0x08008cb5
 8008690:	08008cc3 	.word	0x08008cc3
 8008694:	08008ccf 	.word	0x08008ccf
 8008698:	08008cdb 	.word	0x08008cdb
 800869c:	08008ce7 	.word	0x08008ce7
 80086a0:	08008cf3 	.word	0x08008cf3
 80086a4:	08008cff 	.word	0x08008cff
 80086a8:	08008d0b 	.word	0x08008d0b
 80086ac:	08008d19 	.word	0x08008d19
 80086b0:	08008d27 	.word	0x08008d27
 80086b4:	08008d35 	.word	0x08008d35
 80086b8:	08008d43 	.word	0x08008d43
 80086bc:	08008d51 	.word	0x08008d51
 80086c0:	08008d5f 	.word	0x08008d5f
 80086c4:	08008d6d 	.word	0x08008d6d
 80086c8:	08008d7b 	.word	0x08008d7b
 80086cc:	08008d89 	.word	0x08008d89
 80086d0:	08008d97 	.word	0x08008d97
 80086d4:	08008da5 	.word	0x08008da5
 80086d8:	08008db3 	.word	0x08008db3
 80086dc:	08008dc1 	.word	0x08008dc1
 80086e0:	08008dcf 	.word	0x08008dcf
 80086e4:	08008ddd 	.word	0x08008ddd
 80086e8:	08008deb 	.word	0x08008deb
 80086ec:	08008df9 	.word	0x08008df9
 80086f0:	08008e07 	.word	0x08008e07
 80086f4:	08008e15 	.word	0x08008e15
 80086f8:	08008e23 	.word	0x08008e23
 80086fc:	08008e31 	.word	0x08008e31
 8008700:	08008e3f 	.word	0x08008e3f
 8008704:	08008e4d 	.word	0x08008e4d
 8008708:	08008e5b 	.word	0x08008e5b
 800870c:	08008e69 	.word	0x08008e69
 8008710:	08008e77 	.word	0x08008e77
 8008714:	08008e85 	.word	0x08008e85
 8008718:	08008e93 	.word	0x08008e93
 800871c:	08008ea1 	.word	0x08008ea1
 8008720:	08008eaf 	.word	0x08008eaf
 8008724:	08008ebd 	.word	0x08008ebd
 8008728:	08008ecb 	.word	0x08008ecb
 800872c:	08008ed9 	.word	0x08008ed9
 8008730:	08008ee7 	.word	0x08008ee7
 8008734:	08008ef5 	.word	0x08008ef5
 8008738:	08008f03 	.word	0x08008f03
 800873c:	08008f15 	.word	0x08008f15
 8008740:	08008f27 	.word	0x08008f27
 8008744:	08008f39 	.word	0x08008f39
 8008748:	08008f4b 	.word	0x08008f4b
 800874c:	08008f5d 	.word	0x08008f5d
 8008750:	08008f6f 	.word	0x08008f6f
 8008754:	08008f81 	.word	0x08008f81
 8008758:	08008f93 	.word	0x08008f93
 800875c:	08008fa5 	.word	0x08008fa5
 8008760:	08008fb7 	.word	0x08008fb7
 8008764:	08008fc9 	.word	0x08008fc9
 8008768:	08008fdb 	.word	0x08008fdb
 800876c:	08008fed 	.word	0x08008fed
 8008770:	08008fff 	.word	0x08008fff
 8008774:	08009011 	.word	0x08009011
 8008778:	08009023 	.word	0x08009023
 800877c:	08009035 	.word	0x08009035
 8008780:	08009047 	.word	0x08009047
 8008784:	08009059 	.word	0x08009059
 8008788:	08009067 	.word	0x08009067
 800878c:	08009075 	.word	0x08009075
 8008790:	08009083 	.word	0x08009083
 8008794:	08009091 	.word	0x08009091
 8008798:	0800909f 	.word	0x0800909f
 800879c:	080090ad 	.word	0x080090ad
 80087a0:	080090bb 	.word	0x080090bb
 80087a4:	080090cd 	.word	0x080090cd
 80087a8:	080090db 	.word	0x080090db
 80087ac:	080090e9 	.word	0x080090e9
 80087b0:	080090f7 	.word	0x080090f7
 80087b4:	08009105 	.word	0x08009105
 80087b8:	08009113 	.word	0x08009113
 80087bc:	08009121 	.word	0x08009121
 80087c0:	0800912f 	.word	0x0800912f
 80087c4:	0800913d 	.word	0x0800913d
 80087c8:	0800914b 	.word	0x0800914b
 80087cc:	08009159 	.word	0x08009159
 80087d0:	08009167 	.word	0x08009167
 80087d4:	08009175 	.word	0x08009175
 80087d8:	08009183 	.word	0x08009183
 80087dc:	08009191 	.word	0x08009191
 80087e0:	0800919f 	.word	0x0800919f
 80087e4:	080091ad 	.word	0x080091ad
 80087e8:	080091bb 	.word	0x080091bb
 80087ec:	080091c9 	.word	0x080091c9
 80087f0:	080091d7 	.word	0x080091d7
 80087f4:	080091e5 	.word	0x080091e5
 80087f8:	080091f3 	.word	0x080091f3
 80087fc:	08009201 	.word	0x08009201
 8008800:	0800920f 	.word	0x0800920f
 8008804:	0800921d 	.word	0x0800921d
 8008808:	0800922b 	.word	0x0800922b
 800880c:	08009239 	.word	0x08009239
 8008810:	08009247 	.word	0x08009247
 8008814:	08009255 	.word	0x08009255
 8008818:	08009263 	.word	0x08009263
 800881c:	08009271 	.word	0x08009271
 8008820:	0800927f 	.word	0x0800927f
 8008824:	0800928d 	.word	0x0800928d
 8008828:	0800929b 	.word	0x0800929b
 800882c:	080092a9 	.word	0x080092a9
 8008830:	080092b7 	.word	0x080092b7
 8008834:	080092c5 	.word	0x080092c5
 8008838:	080092d3 	.word	0x080092d3
 800883c:	080092e1 	.word	0x080092e1
 8008840:	080092ef 	.word	0x080092ef
 8008844:	080092fd 	.word	0x080092fd
 8008848:	0800930b 	.word	0x0800930b
 800884c:	08009319 	.word	0x08009319
 8008850:	08009327 	.word	0x08009327
 8008854:	08009335 	.word	0x08009335
 8008858:	08009343 	.word	0x08009343

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8008862:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]
	break;
 8008868:	f000 bd79 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8008872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]
	break;
 8008878:	f000 bd71 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8008882:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]
	break;
 8008888:	f000 bd69 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	601a      	str	r2, [r3, #0]
	break;
 8008896:	f000 bd62 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
	break;
 80088a4:	f000 bd5b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	601a      	str	r2, [r3, #0]
	break;
 80088b2:	f000 bd54 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	78db      	ldrb	r3, [r3, #3]
 80088ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	601a      	str	r2, [r3, #0]
	break;
 80088c0:	f000 bd4d 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	791b      	ldrb	r3, [r3, #4]
 80088c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
	break;
 80088ce:	f000 bd46 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
	break;
 80088dc:	f000 bd3f 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	799b      	ldrb	r3, [r3, #6]
 80088e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	601a      	str	r2, [r3, #0]
	break;
 80088ea:	f000 bd38 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
	break;
 80088f6:	f000 bd32 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	891b      	ldrh	r3, [r3, #8]
 80088fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
	break;
 8008904:	f000 bd2b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	8a1b      	ldrh	r3, [r3, #16]
 800890c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
	break;
 8008912:	f000 bd24 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]
	break;
 800891e:	f000 bd1e 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	7e1b      	ldrb	r3, [r3, #24]
 8008926:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	601a      	str	r2, [r3, #0]
	break;
 800892c:	f000 bd17 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	8b5b      	ldrh	r3, [r3, #26]
 8008934:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
	break;
 800893a:	f000 bd10 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8008944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	601a      	str	r2, [r3, #0]
	break;
 800894a:	f000 bd08 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	601a      	str	r2, [r3, #0]
	break;
 800895a:	f000 bd00 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	601a      	str	r2, [r3, #0]
	break;
 8008968:	f000 bcf9 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008972:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]
	break;
 8008978:	f000 bcf1 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008980:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
	break;
 8008986:	f000 bcea 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8008990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	601a      	str	r2, [r3, #0]
	break;
 8008996:	f000 bce2 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80089a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	break;
 80089a6:	f000 bcda 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80089b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
	break;
 80089b6:	f000 bcd2 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80089c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	break;
 80089c6:	f000 bcca 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80089d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
	break;
 80089d6:	f000 bcc2 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80089e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
	break;
 80089e6:	f000 bcba 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	break;
 80089f6:	f000 bcb2 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
	break;
 8008a06:	f000 bcaa 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8008a10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
	break;
 8008a16:	f000 bca2 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]
	break;
 8008a24:	f000 bc9b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
	break;
 8008a34:	f000 bc93 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
	break;
 8008a44:	f000 bc8b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8008a4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
	break;
 8008a54:	f000 bc83 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8008a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	601a      	str	r2, [r3, #0]
	break;
 8008a64:	f000 bc7b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8008a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
	break;
 8008a74:	f000 bc73 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8008a7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
	break;
 8008a84:	f000 bc6b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8008a8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
	break;
 8008a94:	f000 bc63 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8008a9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
	break;
 8008aa4:	f000 bc5b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8008aae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
	break;
 8008ab4:	f000 bc53 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8008abe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
	break;
 8008ac4:	f000 bc4b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8008ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	601a      	str	r2, [r3, #0]
	break;
 8008ad4:	f000 bc43 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	601a      	str	r2, [r3, #0]
	break;
 8008ae4:	f000 bc3b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8008aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	601a      	str	r2, [r3, #0]
	break;
 8008af4:	f000 bc33 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	601a      	str	r2, [r3, #0]
	break;
 8008b04:	f000 bc2b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8008b0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	601a      	str	r2, [r3, #0]
	break;
 8008b14:	f000 bc23 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8008b1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	601a      	str	r2, [r3, #0]
	break;
 8008b24:	f000 bc1b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8008b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
	break;
 8008b34:	f000 bc13 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8008b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
	break;
 8008b44:	f000 bc0b 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8008b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
	break;
 8008b54:	f000 bc03 	b.w	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008b5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
	break;
 8008b64:	e3fb      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8008b6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
	break;
 8008b72:	e3f4      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8008b7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	601a      	str	r2, [r3, #0]
	break;
 8008b80:	e3ed      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8008b88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
	break;
 8008b8e:	e3e6      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8008b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
	break;
 8008b9c:	e3df      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8008ba4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
	break;
 8008baa:	e3d8      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8008bb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	601a      	str	r2, [r3, #0]
	break;
 8008bb8:	e3d1      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008bc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
	break;
 8008bc6:	e3ca      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8008bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
	break;
 8008bd4:	e3c3      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8008bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	break;
 8008be2:	e3bc      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8008bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
	break;
 8008bf0:	e3b5      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8008bf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
	break;
 8008bfe:	e3ae      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8008c06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]
	break;
 8008c0c:	e3a7      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8008c14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
	break;
 8008c1a:	e3a0      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8008c22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	601a      	str	r2, [r3, #0]
	break;
 8008c28:	e399      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8008c30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
	break;
 8008c36:	e392      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008c3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
	break;
 8008c44:	e38b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8008c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
	break;
 8008c52:	e384      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8008c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
	break;
 8008c60:	e37d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8008c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
	break;
 8008c6e:	e376      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8008c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
	break;
 8008c7c:	e36f      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8008c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
	break;
 8008c8a:	e368      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8008c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]
	break;
 8008c98:	e361      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	7c1b      	ldrb	r3, [r3, #16]
 8008c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
	break;
 8008ca4:	e35b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
	break;
 8008cb2:	e354      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]
	break;
 8008cc0:	e34d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]
	break;
 8008ccc:	e347      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
	break;
 8008cd8:	e341      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	8adb      	ldrh	r3, [r3, #22]
 8008cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
	break;
 8008ce4:	e33b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	8b1b      	ldrh	r3, [r3, #24]
 8008cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
	break;
 8008cf0:	e335      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
	break;
 8008cfc:	e32f      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	break;
 8008d08:	e329      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8008d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
	break;
 8008d16:	e322      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008d1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	601a      	str	r2, [r3, #0]
	break;
 8008d24:	e31b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
	break;
 8008d32:	e314      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8008d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
	break;
 8008d40:	e30d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8008d48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]
	break;
 8008d4e:	e306      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8008d56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	601a      	str	r2, [r3, #0]
	break;
 8008d5c:	e2ff      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8008d64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
	break;
 8008d6a:	e2f8      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8008d72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]
	break;
 8008d78:	e2f1      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8008d80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]
	break;
 8008d86:	e2ea      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8008d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
	break;
 8008d94:	e2e3      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8008d9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]
	break;
 8008da2:	e2dc      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8008daa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	601a      	str	r2, [r3, #0]
	break;
 8008db0:	e2d5      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8008db8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
	break;
 8008dbe:	e2ce      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8008dc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]
	break;
 8008dcc:	e2c7      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8008dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
	break;
 8008dda:	e2c0      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8008de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
	break;
 8008de8:	e2b9      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8008df0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
	break;
 8008df6:	e2b2      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008dfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
	break;
 8008e04:	e2ab      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8008e0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	break;
 8008e12:	e2a4      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8008e1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	601a      	str	r2, [r3, #0]
	break;
 8008e20:	e29d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8008e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
	break;
 8008e2e:	e296      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8008e36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	601a      	str	r2, [r3, #0]
	break;
 8008e3c:	e28f      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8008e44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	601a      	str	r2, [r3, #0]
	break;
 8008e4a:	e288      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
	break;
 8008e58:	e281      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	601a      	str	r2, [r3, #0]
	break;
 8008e66:	e27a      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008e6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
	break;
 8008e74:	e273      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8008e7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
	break;
 8008e82:	e26c      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8008e8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
	break;
 8008e90:	e265      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8008e98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
	break;
 8008e9e:	e25e      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]
	break;
 8008eac:	e257      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	601a      	str	r2, [r3, #0]
	break;
 8008eba:	e250      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8008ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
	break;
 8008ec8:	e249      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
	break;
 8008ed6:	e242      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	601a      	str	r2, [r3, #0]
	break;
 8008ee4:	e23b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
	break;
 8008ef2:	e234      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
	break;
 8008f00:	e22d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f08:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8008f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	601a      	str	r2, [r3, #0]
	break;
 8008f12:	e224      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
	break;
 8008f24:	e21b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8008f30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
	break;
 8008f36:	e212      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
	break;
 8008f48:	e209      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f50:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
	break;
 8008f5a:	e200      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f62:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8008f66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	601a      	str	r2, [r3, #0]
	break;
 8008f6c:	e1f7      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f74:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8008f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
	break;
 8008f7e:	e1ee      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f86:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
	break;
 8008f90:	e1e5      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f98:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	601a      	str	r2, [r3, #0]
	break;
 8008fa2:	e1dc      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008faa:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8008fae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
	break;
 8008fb4:	e1d3      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbc:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8008fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
	break;
 8008fc6:	e1ca      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fce:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	break;
 8008fd8:	e1c1      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe0:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8008fe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
	break;
 8008fea:	e1b8      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
	break;
 8008ffc:	e1af      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009004:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
	break;
 800900e:	e1a6      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009016:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800901a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
	break;
 8009020:	e19d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800902c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
	break;
 8009032:	e194      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800903e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	601a      	str	r2, [r3, #0]
	break;
 8009044:	e18b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8009050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
	break;
 8009056:	e182      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800905e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
	break;
 8009064:	e17b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800906c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
	break;
 8009072:	e174      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800907a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
	break;
 8009080:	e16d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8009088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
	break;
 800908e:	e166      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8009096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	601a      	str	r2, [r3, #0]
	break;
 800909c:	e15f      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80090a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
	break;
 80090aa:	e158      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 80090b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
	break;
 80090b8:	e151      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80090c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
	break;
 80090ca:	e148      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 80090d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]
	break;
 80090d8:	e141      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 80090e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
	break;
 80090e6:	e13a      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 80090ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	601a      	str	r2, [r3, #0]
	break;
 80090f4:	e133      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80090fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
	break;
 8009102:	e12c      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800910a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
	break;
 8009110:	e125      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8009118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	601a      	str	r2, [r3, #0]
	break;
 800911e:	e11e      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8009126:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	601a      	str	r2, [r3, #0]
	break;
 800912c:	e117      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8009134:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
	break;
 800913a:	e110      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8009142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
	break;
 8009148:	e109      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8009150:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	break;
 8009156:	e102      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800915e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]
	break;
 8009164:	e0fb      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800916c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
	break;
 8009172:	e0f4      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800917a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
	break;
 8009180:	e0ed      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8009188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	601a      	str	r2, [r3, #0]
	break;
 800918e:	e0e6      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8009196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
	break;
 800919c:	e0df      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 80091a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
	break;
 80091aa:	e0d8      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 80091b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
	break;
 80091b8:	e0d1      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 80091c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	break;
 80091c6:	e0ca      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 80091ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
	break;
 80091d4:	e0c3      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 80091dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	601a      	str	r2, [r3, #0]
	break;
 80091e2:	e0bc      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 80091ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
	break;
 80091f0:	e0b5      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 80091f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
	break;
 80091fe:	e0ae      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8009206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
	break;
 800920c:	e0a7      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8009214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
	break;
 800921a:	e0a0      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8009222:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	601a      	str	r2, [r3, #0]
	break;
 8009228:	e099      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8009230:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	601a      	str	r2, [r3, #0]
	break;
 8009236:	e092      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800923e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	601a      	str	r2, [r3, #0]
	break;
 8009244:	e08b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800924c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
	break;
 8009252:	e084      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800925a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	601a      	str	r2, [r3, #0]
	break;
 8009260:	e07d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8009268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	601a      	str	r2, [r3, #0]
	break;
 800926e:	e076      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8009276:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	601a      	str	r2, [r3, #0]
	break;
 800927c:	e06f      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8009284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	601a      	str	r2, [r3, #0]
	break;
 800928a:	e068      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8009292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
	break;
 8009298:	e061      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 80092a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
	break;
 80092a6:	e05a      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 80092ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
	break;
 80092b4:	e053      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 80092bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	601a      	str	r2, [r3, #0]
	break;
 80092c2:	e04c      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 80092ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
	break;
 80092d0:	e045      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 80092d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
	break;
 80092de:	e03e      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 80092e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]
	break;
 80092ec:	e037      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 80092f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
	break;
 80092fa:	e030      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8009302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
	break;
 8009308:	e029      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8009310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	601a      	str	r2, [r3, #0]
	break;
 8009316:	e022      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800931e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	601a      	str	r2, [r3, #0]
	break;
 8009324:	e01b      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800932c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
	break;
 8009332:	e014      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800933a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	601a      	str	r2, [r3, #0]
	break;
 8009340:	e00d      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
	break;
 800934e:	e006      	b.n	800935e <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009356:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009358:	23fc      	movs	r3, #252	; 0xfc
 800935a:	77fb      	strb	r3, [r7, #31]
	break;
 800935c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800935e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3724      	adds	r7, #36	; 0x24
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop

08009370 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3318      	adds	r3, #24
 8009380:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009388:	2201      	movs	r2, #1
 800938a:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800938e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3318      	adds	r3, #24
 80093ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80093bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3318      	adds	r3, #24
 80093dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 80093ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3318      	adds	r3, #24
 800940a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009412:	2200      	movs	r2, #0
 8009414:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8009418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3318      	adds	r3, #24
 8009438:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009440:	2201      	movs	r2, #1
 8009442:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8009446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3318      	adds	r3, #24
 8009466:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946e:	2200      	movs	r2, #0
 8009470:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8009474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2208      	movs	r2, #8
 8009494:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	220b      	movs	r2, #11
 800949a:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094a2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80094aa:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80094b2:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80094ba:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80094bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2212      	movs	r2, #18
 80094e2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	220f      	movs	r2, #15
 80094e8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2202      	movs	r2, #2
 80094ee:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80094f6:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	220c      	movs	r2, #12
 80094fc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80094fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	895b      	ldrh	r3, [r3, #10]
 8009520:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	895b      	ldrh	r3, [r3, #10]
 800953e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800955e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2240      	movs	r2, #64	; 0x40
 800956a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10d      	bne.n	8009590 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d108      	bne.n	8009590 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	741a      	strb	r2, [r3, #16]
 800958e:	e002      	b.n	8009596 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2201      	movs	r2, #1
 8009594:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d114      	bne.n	80095c8 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d110      	bne.n	80095c8 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	7d9b      	ldrb	r3, [r3, #22]
 80095ba:	f003 f879 	bl	800c6b0 <VL53L1_calc_range_ignore_threshold>
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	831a      	strh	r2, [r3, #24]
 80095c6:	e002      	b.n	80095ce <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2200      	movs	r2, #0
 80095cc:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80095d4:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2232      	movs	r2, #50	; 0x32
 80095da:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80095e2:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	228c      	movs	r2, #140	; 0x8c
 80095e8:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80095ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009608:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009610:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2207      	movs	r2, #7
 8009616:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800961e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f242 7210 	movw	r2, #10000	; 0x2710
 8009626:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800962e:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2246      	movs	r2, #70	; 0x46
 8009634:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800963c:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	228c      	movs	r2, #140	; 0x8c
 8009642:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8009644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009666:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800966e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009676:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800967e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2208      	movs	r2, #8
 8009684:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2228      	movs	r2, #40	; 0x28
 800968a:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2209      	movs	r2, #9
 8009690:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8009692:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80096b4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096bc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096c4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80096cc:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2210      	movs	r2, #16
 80096d2:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2208      	movs	r2, #8
 80096d8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80096da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b085      	sub	sp, #20
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	4603      	mov	r3, r0
 80096f2:	6039      	str	r1, [r7, #0]
 80096f4:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2204      	movs	r2, #4
 80096fe:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2201      	movs	r2, #1
 8009704:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2201      	movs	r2, #1
 800970a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2202      	movs	r2, #2
 8009710:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2201      	movs	r2, #1
 8009716:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2250      	movs	r2, #80	; 0x50
 800971c:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2270      	movs	r2, #112	; 0x70
 8009722:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f241 023d 	movw	r2, #4157	; 0x103d
 800972a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2210      	movs	r2, #16
 8009730:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2232      	movs	r2, #50	; 0x32
 8009736:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2264      	movs	r2, #100	; 0x64
 800973c:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2201      	movs	r2, #1
 8009742:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	22a0      	movs	r2, #160	; 0xa0
 8009748:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8009756:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2208      	movs	r2, #8
 800975c:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2288      	movs	r2, #136	; 0x88
 8009764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2208      	movs	r2, #8
 800976c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800977e:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	22fa      	movs	r2, #250	; 0xfa
 8009784:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	79fa      	ldrb	r2, [r7, #7]
 800978a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8009794:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2232      	movs	r2, #50	; 0x32
 800979a:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80097a2:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	228c      	movs	r2, #140	; 0x8c
 80097a8:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2250      	movs	r2, #80	; 0x50
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2232      	movs	r2, #50	; 0x32
 80097b6:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80097b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	220e      	movs	r2, #14
 80097de:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f642 7294 	movw	r2, #12180	; 0x2f94
 80097e6:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	220e      	movs	r2, #14
 80097ec:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	220a      	movs	r2, #10
 80097f2:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2206      	movs	r2, #6
 80097f8:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	220e      	movs	r2, #14
 80097fe:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	220a      	movs	r2, #10
 8009804:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2206      	movs	r2, #6
 800980a:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2209      	movs	r2, #9
 8009810:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2205      	movs	r2, #5
 8009816:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2203      	movs	r2, #3
 800981c:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2206      	movs	r2, #6
 8009822:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2206      	movs	r2, #6
 8009828:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2206      	movs	r2, #6
 800982e:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2221      	movs	r2, #33	; 0x21
 800983a:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	223c      	movs	r2, #60	; 0x3c
 800984c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	223c      	movs	r2, #60	; 0x3c
 8009852:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	223c      	movs	r2, #60	; 0x3c
 8009858:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2280      	movs	r2, #128	; 0x80
 800985e:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2280      	movs	r2, #128	; 0x80
 8009864:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2280      	movs	r2, #128	; 0x80
 800986a:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2208      	movs	r2, #8
 8009870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2210      	movs	r2, #16
 8009878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80098aa:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80098b2:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80098ba:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80098c2:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 80098d2:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80098da:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f241 7270 	movw	r2, #6000	; 0x1770
 80098e2:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80098ea:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f242 3228 	movw	r2, #9000	; 0x2328
 80098f2:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80098fa:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009902:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800990a:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009912:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800991a:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009922:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f24f 6218 	movw	r2, #63000	; 0xf618
 800992a:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009932:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800993a:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009942:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009950:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009958:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f242 7210 	movw	r2, #10000	; 0x2710
 8009970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2206      	movs	r2, #6
 8009978:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800998a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f640 22be 	movw	r2, #2750	; 0xabe
 8009994:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	22fa      	movs	r2, #250	; 0xfa
 800999c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099a6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80099b0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80099ba:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80099c4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80099ce:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f64f 7238 	movw	r2, #65336	; 0xff38
 80099d8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	22c8      	movs	r2, #200	; 0xc8
 80099e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	22fa      	movs	r2, #250	; 0xfa
 80099e8:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80099f2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f640 1206 	movw	r2, #2310	; 0x906
 80099fc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f640 1206 	movw	r2, #2310	; 0x906
 8009a0e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f640 421c 	movw	r2, #3100	; 0xc1c
 8009a18:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009a22:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f640 421c 	movw	r2, #3100	; 0xc1c
 8009a2c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009a36:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f641 022e 	movw	r2, #6190	; 0x182e
 8009a40:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f641 3230 	movw	r2, #6960	; 0x1b30
 8009a5a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f641 022e 	movw	r2, #6190	; 0x182e
 8009a64:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	22fa      	movs	r2, #250	; 0xfa
 8009a6c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009a76:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8009a80:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f241 1294 	movw	r2, #4500	; 0x1194
 8009a8a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f64f 7238 	movw	r2, #65336	; 0xff38
 8009a94:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	22c8      	movs	r2, #200	; 0xc8
 8009a9c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f640 3222 	movw	r2, #2850	; 0xb22
 8009aa6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f640 42e4 	movw	r2, #3300	; 0xce4
 8009ab0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f640 721e 	movw	r2, #3870	; 0xf1e
 8009aca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f241 222a 	movw	r2, #4650	; 0x122a
 8009ad4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f640 720a 	movw	r2, #3850	; 0xf0a
 8009ade:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f641 6214 	movw	r2, #7700	; 0x1e14
 8009b00:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009b0a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f641 1288 	movw	r2, #6536	; 0x1988
 8009b24:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8009b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009b4a:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2238      	movs	r2, #56	; 0x38
 8009b50:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2270      	movs	r2, #112	; 0x70
 8009b5c:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2210      	movs	r2, #16
 8009b62:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2264      	movs	r2, #100	; 0x64
 8009b68:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b70:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	220f      	movs	r2, #15
 8009b76:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2234      	movs	r2, #52	; 0x34
 8009b7c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	22c8      	movs	r2, #200	; 0xc8
 8009b82:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009b8a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b92:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8009b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009bbc:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2211      	movs	r2, #17
 8009bfe:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2202      	movs	r2, #2
 8009c04:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2208      	movs	r2, #8
 8009c16:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	22ff      	movs	r2, #255	; 0xff
 8009c58:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	220b      	movs	r2, #11
 8009c92:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	220d      	movs	r2, #13
 8009ca6:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8009cce:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2238      	movs	r2, #56	; 0x38
 8009cda:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	22ff      	movs	r2, #255	; 0xff
 8009ce0:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	221a      	movs	r2, #26
 8009cf2:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2201      	movs	r2, #1
 8009d04:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	22cc      	movs	r2, #204	; 0xcc
 8009d0a:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	220b      	movs	r2, #11
 8009d10:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2201      	movs	r2, #1
 8009d16:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	22f5      	movs	r2, #245	; 0xf5
 8009d1c:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2209      	movs	r2, #9
 8009d22:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2208      	movs	r2, #8
 8009d38:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2278      	movs	r2, #120	; 0x78
 8009d3e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2207      	movs	r2, #7
 8009d50:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2221      	movs	r2, #33	; 0x21
 8009d56:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2243      	movs	r2, #67	; 0x43
 8009d5c:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2210      	movs	r2, #16
 8009d62:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2232      	movs	r2, #50	; 0x32
 8009d68:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2254      	movs	r2, #84	; 0x54
 8009d6e:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2207      	movs	r2, #7
 8009d74:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2221      	movs	r2, #33	; 0x21
 8009d7a:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2243      	movs	r2, #67	; 0x43
 8009d80:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2210      	movs	r2, #16
 8009d86:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2243      	movs	r2, #67	; 0x43
 8009d92:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2205      	movs	r2, #5
 8009d98:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2207      	movs	r2, #7
 8009da4:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2221      	movs	r2, #33	; 0x21
 8009daa:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2243      	movs	r2, #67	; 0x43
 8009db0:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2210      	movs	r2, #16
 8009db6:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2232      	movs	r2, #50	; 0x32
 8009dbc:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2254      	movs	r2, #84	; 0x54
 8009dc2:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dca:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dd2:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	2210      	movs	r2, #16
 8009dde:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	2200      	movs	r2, #0
 8009de4:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8009de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de8:	220f      	movs	r2, #15
 8009dea:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	220f      	movs	r2, #15
 8009df0:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	2208      	movs	r2, #8
 8009df6:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	2208      	movs	r2, #8
 8009dfc:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	2201      	movs	r2, #1
 8009e02:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	2200      	movs	r2, #0
 8009e08:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	2200      	movs	r2, #0
 8009e14:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	220b      	movs	r2, #11
 8009e24:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	2209      	movs	r2, #9
 8009e2a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	22c7      	movs	r2, #199	; 0xc7
 8009e5a:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	22ff      	movs	r2, #255	; 0xff
 8009e60:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	22db      	movs	r2, #219	; 0xdb
 8009e66:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	2200      	movs	r2, #0
 8009e72:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	2201      	movs	r2, #1
 8009e78:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	2221      	movs	r2, #33	; 0x21
 8009e84:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8009e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b08a      	sub	sp, #40	; 0x28
 8009e9a:	af04      	add	r7, sp, #16
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fe70 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d121      	bne.n	8009f14 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2207      	movs	r2, #7
 8009ed4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2208      	movs	r2, #8
 8009ef0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2238      	movs	r2, #56	; 0x38
 8009ef6:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	2207      	movs	r2, #7
 8009efc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	2205      	movs	r2, #5
 8009f02:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	; 0x28
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fe2b 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d121      	bne.n	8009f9e <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	220f      	movs	r2, #15
 8009f5e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	220d      	movs	r2, #13
 8009f64:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2208      	movs	r2, #8
 8009f7a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	22b8      	movs	r2, #184	; 0xb8
 8009f80:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	220f      	movs	r2, #15
 8009f86:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	220d      	movs	r2, #13
 8009f8c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b08a      	sub	sp, #40	; 0x28
 8009fae:	af04      	add	r7, sp, #16
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	9302      	str	r3, [sp, #8]
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff fde6 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	223b      	movs	r2, #59	; 0x3b
 8009fee:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08a      	sub	sp, #40	; 0x28
 800a000:	af04      	add	r7, sp, #16
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	9302      	str	r3, [sp, #8]
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fdbd 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d105      	bne.n	800a042 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2202      	movs	r2, #2
 800a03a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	225b      	movs	r2, #91	; 0x5b
 800a040:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b08a      	sub	sp, #40	; 0x28
 800a052:	af04      	add	r7, sp, #16
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
 800a05a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fd94 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 800a07c:	4603      	mov	r3, r0
 800a07e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11a      	bne.n	800a0be <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	2200      	movs	r2, #0
 800a08c:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2200      	movs	r2, #0
 800a092:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	22b1      	movs	r2, #177	; 0xb1
 800a098:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2200      	movs	r2, #0
 800a09e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	22d4      	movs	r2, #212	; 0xd4
 800a0a4:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a0ac:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	2240      	movs	r2, #64	; 0x40
 800a0bc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a0be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b08a      	sub	sp, #40	; 0x28
 800a0ce:	af04      	add	r7, sp, #16
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	9302      	str	r3, [sp, #8]
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff fecf 	bl	8009e96 <VL53L1_preset_mode_standard_ranging_short_range>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d11a      	bne.n	800a13a <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	2200      	movs	r2, #0
 800a108:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2201      	movs	r2, #1
 800a10e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2284      	movs	r2, #132	; 0x84
 800a114:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2201      	movs	r2, #1
 800a11a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	22b1      	movs	r2, #177	; 0xb1
 800a120:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a128:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	2240      	movs	r2, #64	; 0x40
 800a138:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b08a      	sub	sp, #40	; 0x28
 800a14a:	af04      	add	r7, sp, #16
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a154:	2300      	movs	r3, #0
 800a156:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff fed6 	bl	8009f20 <VL53L1_preset_mode_standard_ranging_long_range>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d11a      	bne.n	800a1b6 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	2200      	movs	r2, #0
 800a184:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2200      	movs	r2, #0
 800a18a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2297      	movs	r2, #151	; 0x97
 800a190:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2200      	movs	r2, #0
 800a196:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	22b1      	movs	r2, #177	; 0xb1
 800a19c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a1a4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	2240      	movs	r2, #64	; 0x40
 800a1b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b08a      	sub	sp, #40	; 0x28
 800a1c6:	af04      	add	r7, sp, #16
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff ff2f 	bl	800a04e <VL53L1_preset_mode_timed_ranging>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a1f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fe:	6a39      	ldr	r1, [r7, #32]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f005 f978 	bl	800f4f6 <VL53L1_config_low_power_auto_mode>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b08a      	sub	sp, #40	; 0x28
 800a21a:	af04      	add	r7, sp, #16
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
 800a222:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a224:	2300      	movs	r3, #0
 800a226:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff ff43 	bl	800a0ca <VL53L1_preset_mode_timed_ranging_short_range>
 800a244:	4603      	mov	r3, r0
 800a246:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a252:	6a39      	ldr	r1, [r7, #32]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f005 f94e 	bl	800f4f6 <VL53L1_config_low_power_auto_mode>
 800a25a:	4603      	mov	r3, r0
 800a25c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b08a      	sub	sp, #40	; 0x28
 800a26e:	af04      	add	r7, sp, #16
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	607a      	str	r2, [r7, #4]
 800a276:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a278:	2300      	movs	r3, #0
 800a27a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff ff57 	bl	800a146 <VL53L1_preset_mode_timed_ranging_long_range>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a29c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a6:	6a39      	ldr	r1, [r7, #32]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f005 f924 	bl	800f4f6 <VL53L1_config_low_power_auto_mode>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	; 0x28
 800a2c2:	af04      	add	r7, sp, #16
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	9303      	str	r3, [sp, #12]
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	9302      	str	r3, [sp, #8]
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff fc5c 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d116      	bne.n	800a326 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	22b1      	movs	r2, #177	; 0xb1
 800a308:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2200      	movs	r2, #0
 800a30e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	22d4      	movs	r2, #212	; 0xd4
 800a314:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	2210      	movs	r2, #16
 800a324:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b090      	sub	sp, #64	; 0x40
 800a336:	af0a      	add	r7, sp, #40	; 0x28
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	68b8      	ldr	r0, [r7, #8]
 800a35c:	f7ff fc22 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d171      	bne.n	800a450 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a372:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	2305      	movs	r3, #5
 800a37a:	9307      	str	r3, [sp, #28]
 800a37c:	2304      	movs	r3, #4
 800a37e:	9306      	str	r3, [sp, #24]
 800a380:	2303      	movs	r3, #3
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	2302      	movs	r3, #2
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	2301      	movs	r3, #1
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	2300      	movs	r3, #0
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	2304      	movs	r3, #4
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	2303      	movs	r3, #3
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2302      	movs	r3, #2
 800a39a:	2201      	movs	r2, #1
 800a39c:	2100      	movs	r1, #0
 800a39e:	2007      	movs	r0, #7
 800a3a0:	f001 fe1b 	bl	800bfda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	2305      	movs	r3, #5
 800a3ac:	9307      	str	r3, [sp, #28]
 800a3ae:	2304      	movs	r3, #4
 800a3b0:	9306      	str	r3, [sp, #24]
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9302      	str	r3, [sp, #8]
 800a3c2:	2304      	movs	r3, #4
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	2007      	movs	r0, #7
 800a3d2:	f001 fe92 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	2209      	movs	r2, #9
 800a3da:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	220b      	movs	r2, #11
 800a3e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2209      	movs	r2, #9
 800a3e6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	220b      	movs	r2, #11
 800a3ec:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	221a      	movs	r2, #26
 800a404:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	2200      	movs	r2, #0
 800a40a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2228      	movs	r2, #40	; 0x28
 800a410:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	2200      	movs	r2, #0
 800a416:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	2221      	movs	r2, #33	; 0x21
 800a41c:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	22f5      	movs	r2, #245	; 0xf5
 800a422:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2208      	movs	r2, #8
 800a428:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2288      	movs	r2, #136	; 0x88
 800a430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 f821 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	229b      	movs	r2, #155	; 0x9b
 800a448:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	2226      	movs	r2, #38	; 0x26
 800a44e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b090      	sub	sp, #64	; 0x40
 800a460:	af0a      	add	r7, sp, #40	; 0x28
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f7ff ff52 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d13e      	bne.n	800a518 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	9308      	str	r3, [sp, #32]
 800a49e:	2305      	movs	r3, #5
 800a4a0:	9307      	str	r3, [sp, #28]
 800a4a2:	2304      	movs	r3, #4
 800a4a4:	9306      	str	r3, [sp, #24]
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	230a      	movs	r3, #10
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	2309      	movs	r3, #9
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	9302      	str	r3, [sp, #8]
 800a4b6:	2304      	movs	r3, #4
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2302      	movs	r3, #2
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	2007      	movs	r0, #7
 800a4c6:	f001 fd88 	bl	800bfda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	9308      	str	r3, [sp, #32]
 800a4d0:	2305      	movs	r3, #5
 800a4d2:	9307      	str	r3, [sp, #28]
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	9306      	str	r3, [sp, #24]
 800a4d8:	2303      	movs	r3, #3
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	230a      	movs	r3, #10
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	2309      	movs	r3, #9
 800a4e2:	9303      	str	r3, [sp, #12]
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	9302      	str	r3, [sp, #8]
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	2007      	movs	r0, #7
 800a4f8:	f001 fdff 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	68b9      	ldr	r1, [r7, #8]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 ffbd 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	22bb      	movs	r2, #187	; 0xbb
 800a510:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	2226      	movs	r2, #38	; 0x26
 800a516:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08c      	sub	sp, #48	; 0x30
 800a528:	af06      	add	r7, sp, #24
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	9303      	str	r3, [sp, #12]
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff83 	bl	800a45c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	22db      	movs	r2, #219	; 0xdb
 800a566:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b090      	sub	sp, #64	; 0x40
 800a578:	af0a      	add	r7, sp, #40	; 0x28
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fec6 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d13e      	bne.n	800a630 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	230d      	movs	r3, #13
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	9306      	str	r3, [sp, #24]
 800a5be:	230b      	movs	r3, #11
 800a5c0:	9305      	str	r3, [sp, #20]
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	2309      	movs	r3, #9
 800a5c8:	9303      	str	r3, [sp, #12]
 800a5ca:	2308      	movs	r3, #8
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	230b      	movs	r3, #11
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	2209      	movs	r2, #9
 800a5da:	2108      	movs	r1, #8
 800a5dc:	2007      	movs	r0, #7
 800a5de:	f001 fcfc 	bl	800bfda <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	9308      	str	r3, [sp, #32]
 800a5e8:	230d      	movs	r3, #13
 800a5ea:	9307      	str	r3, [sp, #28]
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	9306      	str	r3, [sp, #24]
 800a5f0:	230b      	movs	r3, #11
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	230a      	movs	r3, #10
 800a5f6:	9304      	str	r3, [sp, #16]
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	230c      	movs	r3, #12
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	230b      	movs	r3, #11
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	230a      	movs	r3, #10
 800a60a:	2209      	movs	r2, #9
 800a60c:	2108      	movs	r1, #8
 800a60e:	2007      	movs	r0, #7
 800a610:	f001 fd73 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 ff31 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2202      	movs	r2, #2
 800a628:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	22bb      	movs	r2, #187	; 0xbb
 800a62e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	; 0x30
 800a640:	af06      	add	r7, sp, #24
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	9302      	str	r3, [sp, #8]
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7ff ff83 	bl	800a574 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800a66e:	4603      	mov	r3, r0
 800a670:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800a672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d102      	bne.n	800a680 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	22db      	movs	r2, #219	; 0xdb
 800a67e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a680:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b090      	sub	sp, #64	; 0x40
 800a690:	af0a      	add	r7, sp, #40	; 0x28
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	9302      	str	r3, [sp, #8]
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7ff fe3a 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d166      	bne.n	800a798 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a6d0:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	9308      	str	r3, [sp, #32]
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	9307      	str	r3, [sp, #28]
 800a6da:	2303      	movs	r3, #3
 800a6dc:	9306      	str	r3, [sp, #24]
 800a6de:	2302      	movs	r3, #2
 800a6e0:	9305      	str	r3, [sp, #20]
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	2307      	movs	r3, #7
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	2007      	movs	r0, #7
 800a6fe:	f001 fc6c 	bl	800bfda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	3302      	adds	r3, #2
 800a706:	9308      	str	r3, [sp, #32]
 800a708:	2304      	movs	r3, #4
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	2303      	movs	r3, #3
 800a70e:	9306      	str	r3, [sp, #24]
 800a710:	2302      	movs	r3, #2
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	2301      	movs	r3, #1
 800a716:	9304      	str	r3, [sp, #16]
 800a718:	2300      	movs	r3, #0
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	2307      	movs	r3, #7
 800a71e:	9302      	str	r3, [sp, #8]
 800a720:	2304      	movs	r3, #4
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	2303      	movs	r3, #3
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2302      	movs	r3, #2
 800a72a:	2201      	movs	r2, #1
 800a72c:	2100      	movs	r1, #0
 800a72e:	2007      	movs	r0, #7
 800a730:	f001 fce3 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	68b9      	ldr	r1, [r7, #8]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fea1 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	2204      	movs	r2, #4
 800a748:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	2203      	movs	r2, #3
 800a74e:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	2242      	movs	r2, #66	; 0x42
 800a75a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	2200      	movs	r2, #0
 800a760:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	2242      	movs	r2, #66	; 0x42
 800a766:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2200      	movs	r2, #0
 800a76c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2252      	movs	r2, #82	; 0x52
 800a772:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	2200      	movs	r2, #0
 800a778:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	2266      	movs	r2, #102	; 0x66
 800a77e:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2204      	movs	r2, #4
 800a784:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	22a4      	movs	r2, #164	; 0xa4
 800a78a:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	229b      	movs	r2, #155	; 0x9b
 800a790:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	2226      	movs	r2, #38	; 0x26
 800a796:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b090      	sub	sp, #64	; 0x40
 800a7a8:	af0a      	add	r7, sp, #40	; 0x28
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7bc:	9303      	str	r3, [sp, #12]
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	9302      	str	r3, [sp, #8]
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fdae 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d178      	bne.n	800a8d4 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	2305      	movs	r3, #5
 800a7e8:	9307      	str	r3, [sp, #28]
 800a7ea:	2304      	movs	r3, #4
 800a7ec:	9306      	str	r3, [sp, #24]
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	9305      	str	r3, [sp, #20]
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	9303      	str	r3, [sp, #12]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9302      	str	r3, [sp, #8]
 800a7fe:	2304      	movs	r3, #4
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	2303      	movs	r3, #3
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	2302      	movs	r3, #2
 800a808:	2201      	movs	r2, #1
 800a80a:	2100      	movs	r1, #0
 800a80c:	2007      	movs	r0, #7
 800a80e:	f001 fbe4 	bl	800bfda <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	3302      	adds	r3, #2
 800a816:	9308      	str	r3, [sp, #32]
 800a818:	2305      	movs	r3, #5
 800a81a:	9307      	str	r3, [sp, #28]
 800a81c:	2304      	movs	r3, #4
 800a81e:	9306      	str	r3, [sp, #24]
 800a820:	2303      	movs	r3, #3
 800a822:	9305      	str	r3, [sp, #20]
 800a824:	2302      	movs	r3, #2
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	2301      	movs	r3, #1
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	2300      	movs	r3, #0
 800a82e:	9302      	str	r3, [sp, #8]
 800a830:	2304      	movs	r3, #4
 800a832:	9301      	str	r3, [sp, #4]
 800a834:	2303      	movs	r3, #3
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	2302      	movs	r3, #2
 800a83a:	2201      	movs	r2, #1
 800a83c:	2100      	movs	r1, #0
 800a83e:	2007      	movs	r0, #7
 800a840:	f001 fc5b 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fe19 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	2209      	movs	r2, #9
 800a858:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	220b      	movs	r2, #11
 800a85e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	2221      	movs	r2, #33	; 0x21
 800a86a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	2200      	movs	r2, #0
 800a870:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	221b      	movs	r2, #27
 800a876:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	2200      	movs	r2, #0
 800a87c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	2229      	movs	r2, #41	; 0x29
 800a882:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	2200      	movs	r2, #0
 800a888:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	2222      	movs	r2, #34	; 0x22
 800a88e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2209      	movs	r2, #9
 800a894:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	22f5      	movs	r2, #245	; 0xf5
 800a89a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	2209      	movs	r2, #9
 800a8a0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	220b      	movs	r2, #11
 800a8a6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2288      	movs	r2, #136	; 0x88
 800a8c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	229b      	movs	r2, #155	; 0x9b
 800a8cc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	2226      	movs	r2, #38	; 0x26
 800a8d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b090      	sub	sp, #64	; 0x40
 800a8e4:	af0a      	add	r7, sp, #40	; 0x28
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	9304      	str	r3, [sp, #16]
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	9303      	str	r3, [sp, #12]
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	9302      	str	r3, [sp, #8]
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff ff49 	bl	800a7a4 <VL53L1_preset_mode_histogram_long_range>
 800a912:	4603      	mov	r3, r0
 800a914:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d13b      	bne.n	800a996 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	2305      	movs	r3, #5
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	2304      	movs	r3, #4
 800a928:	9306      	str	r3, [sp, #24]
 800a92a:	2303      	movs	r3, #3
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	230a      	movs	r3, #10
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	2309      	movs	r3, #9
 800a934:	9303      	str	r3, [sp, #12]
 800a936:	2308      	movs	r3, #8
 800a938:	9302      	str	r3, [sp, #8]
 800a93a:	2304      	movs	r3, #4
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	2303      	movs	r3, #3
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	2302      	movs	r3, #2
 800a944:	2201      	movs	r2, #1
 800a946:	2100      	movs	r1, #0
 800a948:	2007      	movs	r0, #7
 800a94a:	f001 fb46 	bl	800bfda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	3302      	adds	r3, #2
 800a952:	9308      	str	r3, [sp, #32]
 800a954:	2305      	movs	r3, #5
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	2304      	movs	r3, #4
 800a95a:	9306      	str	r3, [sp, #24]
 800a95c:	2303      	movs	r3, #3
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	230a      	movs	r3, #10
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	2309      	movs	r3, #9
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	2308      	movs	r3, #8
 800a96a:	9302      	str	r3, [sp, #8]
 800a96c:	2304      	movs	r3, #4
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	2303      	movs	r3, #3
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	2302      	movs	r3, #2
 800a976:	2201      	movs	r2, #1
 800a978:	2100      	movs	r1, #0
 800a97a:	2007      	movs	r0, #7
 800a97c:	f001 fbbd 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fd7b 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	22bb      	movs	r2, #187	; 0xbb
 800a994:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b08c      	sub	sp, #48	; 0x30
 800a9a6:	af06      	add	r7, sp, #24
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	9304      	str	r3, [sp, #16]
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	9302      	str	r3, [sp, #8]
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff ff86 	bl	800a8e0 <VL53L1_preset_mode_histogram_long_range_mm1>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d102      	bne.n	800a9e6 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	22db      	movs	r2, #219	; 0xdb
 800a9e4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b090      	sub	sp, #64	; 0x40
 800a9f6:	af0a      	add	r7, sp, #40	; 0x28
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	9304      	str	r3, [sp, #16]
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	9303      	str	r3, [sp, #12]
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	9302      	str	r3, [sp, #8]
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fc87 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800aa24:	4603      	mov	r3, r0
 800aa26:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aa28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d178      	bne.n	800ab22 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	9308      	str	r3, [sp, #32]
 800aa34:	2303      	movs	r3, #3
 800aa36:	9307      	str	r3, [sp, #28]
 800aa38:	2302      	movs	r3, #2
 800aa3a:	9306      	str	r3, [sp, #24]
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	9305      	str	r3, [sp, #20]
 800aa40:	2302      	movs	r3, #2
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	2301      	movs	r3, #1
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	2302      	movs	r3, #2
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	2301      	movs	r3, #1
 800aa56:	2201      	movs	r2, #1
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2007      	movs	r0, #7
 800aa5c:	f001 fabd 	bl	800bfda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	3302      	adds	r3, #2
 800aa64:	9308      	str	r3, [sp, #32]
 800aa66:	2303      	movs	r3, #3
 800aa68:	9307      	str	r3, [sp, #28]
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	9306      	str	r3, [sp, #24]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	2302      	movs	r3, #2
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	2301      	movs	r3, #1
 800aa78:	9303      	str	r3, [sp, #12]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	2302      	movs	r3, #2
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	2302      	movs	r3, #2
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	2301      	movs	r3, #1
 800aa88:	2201      	movs	r2, #1
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	2007      	movs	r0, #7
 800aa8e:	f001 fb34 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fcf2 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	2207      	movs	r2, #7
 800aaac:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	2236      	movs	r2, #54	; 0x36
 800aab8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	2200      	movs	r2, #0
 800aabe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	2228      	movs	r2, #40	; 0x28
 800aac4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	2200      	movs	r2, #0
 800aaca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	2244      	movs	r2, #68	; 0x44
 800aad0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	2200      	movs	r2, #0
 800aad6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	2233      	movs	r2, #51	; 0x33
 800aadc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2205      	movs	r2, #5
 800aae2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	22f5      	movs	r2, #245	; 0xf5
 800aae8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2205      	movs	r2, #5
 800aaee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	2207      	movs	r2, #7
 800aaf4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2208      	movs	r2, #8
 800ab0a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2248      	movs	r2, #72	; 0x48
 800ab12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	229b      	movs	r2, #155	; 0x9b
 800ab1a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	2226      	movs	r2, #38	; 0x26
 800ab20:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ab22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b090      	sub	sp, #64	; 0x40
 800ab32:	af0a      	add	r7, sp, #40	; 0x28
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	607a      	str	r2, [r7, #4]
 800ab3a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff ff49 	bl	800a9f2 <VL53L1_preset_mode_histogram_medium_range>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ab64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d13b      	bne.n	800abe4 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	9308      	str	r3, [sp, #32]
 800ab70:	2303      	movs	r3, #3
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	2302      	movs	r3, #2
 800ab76:	9306      	str	r3, [sp, #24]
 800ab78:	2301      	movs	r3, #1
 800ab7a:	9305      	str	r3, [sp, #20]
 800ab7c:	230a      	movs	r3, #10
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	2309      	movs	r3, #9
 800ab82:	9303      	str	r3, [sp, #12]
 800ab84:	2308      	movs	r3, #8
 800ab86:	9302      	str	r3, [sp, #8]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	2301      	movs	r3, #1
 800ab92:	2201      	movs	r2, #1
 800ab94:	2100      	movs	r1, #0
 800ab96:	2007      	movs	r0, #7
 800ab98:	f001 fa1f 	bl	800bfda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3302      	adds	r3, #2
 800aba0:	9308      	str	r3, [sp, #32]
 800aba2:	2303      	movs	r3, #3
 800aba4:	9307      	str	r3, [sp, #28]
 800aba6:	2302      	movs	r3, #2
 800aba8:	9306      	str	r3, [sp, #24]
 800abaa:	2301      	movs	r3, #1
 800abac:	9305      	str	r3, [sp, #20]
 800abae:	230a      	movs	r3, #10
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	2309      	movs	r3, #9
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	2308      	movs	r3, #8
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	2302      	movs	r3, #2
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	2302      	movs	r3, #2
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2301      	movs	r3, #1
 800abc4:	2201      	movs	r2, #1
 800abc6:	2100      	movs	r1, #0
 800abc8:	2007      	movs	r0, #7
 800abca:	f001 fa96 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fc54 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	22bb      	movs	r2, #187	; 0xbb
 800abe2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800abe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	; 0x30
 800abf4:	af06      	add	r7, sp, #24
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	9303      	str	r3, [sp, #12]
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff ff86 	bl	800ab2e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ac26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	22db      	movs	r2, #219	; 0xdb
 800ac32:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b090      	sub	sp, #64	; 0x40
 800ac44:	af0a      	add	r7, sp, #40	; 0x28
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	9302      	str	r3, [sp, #8]
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff fb60 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800ac72:	4603      	mov	r3, r0
 800ac74:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ac76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d178      	bne.n	800ad70 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	9308      	str	r3, [sp, #32]
 800ac82:	2302      	movs	r3, #2
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	2302      	movs	r3, #2
 800ac88:	9306      	str	r3, [sp, #24]
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	9305      	str	r3, [sp, #20]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	2301      	movs	r3, #1
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9302      	str	r3, [sp, #8]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	2301      	movs	r3, #1
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	2301      	movs	r3, #1
 800aca4:	2200      	movs	r2, #0
 800aca6:	2107      	movs	r1, #7
 800aca8:	2007      	movs	r0, #7
 800acaa:	f001 f996 	bl	800bfda <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	3302      	adds	r3, #2
 800acb2:	9308      	str	r3, [sp, #32]
 800acb4:	2302      	movs	r3, #2
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	2302      	movs	r3, #2
 800acba:	9306      	str	r3, [sp, #24]
 800acbc:	2301      	movs	r3, #1
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	2301      	movs	r3, #1
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	2301      	movs	r3, #1
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	2300      	movs	r3, #0
 800acca:	9302      	str	r3, [sp, #8]
 800accc:	2301      	movs	r3, #1
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	2301      	movs	r3, #1
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	2301      	movs	r3, #1
 800acd6:	2200      	movs	r2, #0
 800acd8:	2107      	movs	r1, #7
 800acda:	2007      	movs	r0, #7
 800acdc:	f001 fa0d 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fbcb 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	2203      	movs	r2, #3
 800acf4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800acf6:	6a3b      	ldr	r3, [r7, #32]
 800acf8:	2205      	movs	r2, #5
 800acfa:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	2200      	movs	r2, #0
 800ad00:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2252      	movs	r2, #82	; 0x52
 800ad06:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	2237      	movs	r2, #55	; 0x37
 800ad12:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	2200      	movs	r2, #0
 800ad18:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	2266      	movs	r2, #102	; 0x66
 800ad1e:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	2200      	movs	r2, #0
 800ad24:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	2244      	movs	r2, #68	; 0x44
 800ad2a:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2203      	movs	r2, #3
 800ad30:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	22f5      	movs	r2, #245	; 0xf5
 800ad36:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	2205      	movs	r2, #5
 800ad42:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2208      	movs	r2, #8
 800ad58:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2228      	movs	r2, #40	; 0x28
 800ad60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	22bb      	movs	r2, #187	; 0xbb
 800ad68:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	2226      	movs	r2, #38	; 0x26
 800ad6e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ad70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b090      	sub	sp, #64	; 0x40
 800ad80:	af0a      	add	r7, sp, #40	; 0x28
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	9302      	str	r3, [sp, #8]
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	68b9      	ldr	r1, [r7, #8]
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f7ff ff49 	bl	800ac40 <VL53L1_preset_mode_histogram_short_range>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800adb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d15a      	bne.n	800ae70 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	9308      	str	r3, [sp, #32]
 800adbe:	2301      	movs	r3, #1
 800adc0:	9307      	str	r3, [sp, #28]
 800adc2:	2301      	movs	r3, #1
 800adc4:	9306      	str	r3, [sp, #24]
 800adc6:	2301      	movs	r3, #1
 800adc8:	9305      	str	r3, [sp, #20]
 800adca:	2300      	movs	r3, #0
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	2300      	movs	r3, #0
 800add0:	9303      	str	r3, [sp, #12]
 800add2:	2300      	movs	r3, #0
 800add4:	9302      	str	r3, [sp, #8]
 800add6:	2301      	movs	r3, #1
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	2301      	movs	r3, #1
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	2200      	movs	r2, #0
 800ade2:	2107      	movs	r1, #7
 800ade4:	2007      	movs	r0, #7
 800ade6:	f001 f8f8 	bl	800bfda <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	3302      	adds	r3, #2
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	2301      	movs	r3, #1
 800adf2:	9307      	str	r3, [sp, #28]
 800adf4:	2301      	movs	r3, #1
 800adf6:	9306      	str	r3, [sp, #24]
 800adf8:	2301      	movs	r3, #1
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	2300      	movs	r3, #0
 800adfe:	9304      	str	r3, [sp, #16]
 800ae00:	2300      	movs	r3, #0
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	2300      	movs	r3, #0
 800ae06:	9302      	str	r3, [sp, #8]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	2300      	movs	r3, #0
 800ae12:	2200      	movs	r2, #0
 800ae14:	2107      	movs	r1, #7
 800ae16:	2007      	movs	r0, #7
 800ae18:	f001 f96f 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fb2d 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	2203      	movs	r2, #3
 800ae36:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2231      	movs	r2, #49	; 0x31
 800ae42:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2202      	movs	r2, #2
 800ae48:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	2203      	movs	r2, #3
 800ae4e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2210      	movs	r2, #16
 800ae64:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2218      	movs	r2, #24
 800ae6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800ae70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b090      	sub	sp, #64	; 0x40
 800ae80:	af0a      	add	r7, sp, #40	; 0x28
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	9302      	str	r3, [sp, #8]
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7ff fec9 	bl	800ac40 <VL53L1_preset_mode_histogram_short_range>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aeb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d13b      	bne.n	800af32 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	9308      	str	r3, [sp, #32]
 800aebe:	2302      	movs	r3, #2
 800aec0:	9307      	str	r3, [sp, #28]
 800aec2:	2302      	movs	r3, #2
 800aec4:	9306      	str	r3, [sp, #24]
 800aec6:	2301      	movs	r3, #1
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	2301      	movs	r3, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	2309      	movs	r3, #9
 800aed0:	9303      	str	r3, [sp, #12]
 800aed2:	2308      	movs	r3, #8
 800aed4:	9302      	str	r3, [sp, #8]
 800aed6:	2301      	movs	r3, #1
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	2301      	movs	r3, #1
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	2301      	movs	r3, #1
 800aee0:	2200      	movs	r2, #0
 800aee2:	2107      	movs	r1, #7
 800aee4:	2007      	movs	r0, #7
 800aee6:	f001 f878 	bl	800bfda <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	3302      	adds	r3, #2
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	2302      	movs	r3, #2
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	2302      	movs	r3, #2
 800aef6:	9306      	str	r3, [sp, #24]
 800aef8:	2301      	movs	r3, #1
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	2301      	movs	r3, #1
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	2309      	movs	r3, #9
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	2308      	movs	r3, #8
 800af06:	9302      	str	r3, [sp, #8]
 800af08:	2301      	movs	r3, #1
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	2301      	movs	r3, #1
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	2301      	movs	r3, #1
 800af12:	2200      	movs	r2, #0
 800af14:	2107      	movs	r1, #7
 800af16:	2007      	movs	r0, #7
 800af18:	f001 f8ef 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 faad 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	22bb      	movs	r2, #187	; 0xbb
 800af30:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800af32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b08c      	sub	sp, #48	; 0x30
 800af42:	af06      	add	r7, sp, #24
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af4c:	2300      	movs	r3, #0
 800af4e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	9303      	str	r3, [sp, #12]
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	9302      	str	r3, [sp, #8]
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff ff86 	bl	800ae7c <VL53L1_preset_mode_histogram_short_range_mm1>
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800af74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	22db      	movs	r2, #219	; 0xdb
 800af80:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800af82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b08c      	sub	sp, #48	; 0x30
 800af92:	af06      	add	r7, sp, #24
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7ff f9b9 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800afc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10b      	bne.n	800afe4 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2201      	movs	r2, #1
 800afd0:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	2283      	movs	r2, #131	; 0x83
 800afdc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	222e      	movs	r2, #46	; 0x2e
 800afe2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800afe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b090      	sub	sp, #64	; 0x40
 800aff4:	af0a      	add	r7, sp, #40	; 0x28
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
 800affc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f9ba 	bl	800b396 <VL53L1_preset_mode_histogram_multizone_long_range>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d151      	bne.n	800b0d2 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800b02e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b030:	6838      	ldr	r0, [r7, #0]
 800b032:	f00a fb1c 	bl	801566e <VL53L1_zone_preset_xtalk_planar>
 800b036:	4603      	mov	r3, r0
 800b038:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	2209      	movs	r2, #9
 800b03e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	2209      	movs	r2, #9
 800b044:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	2304      	movs	r3, #4
 800b04c:	9307      	str	r3, [sp, #28]
 800b04e:	2303      	movs	r3, #3
 800b050:	9306      	str	r3, [sp, #24]
 800b052:	2302      	movs	r3, #2
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	2301      	movs	r3, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	2300      	movs	r3, #0
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	2307      	movs	r3, #7
 800b060:	9302      	str	r3, [sp, #8]
 800b062:	2304      	movs	r3, #4
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	2303      	movs	r3, #3
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	2302      	movs	r3, #2
 800b06c:	2201      	movs	r2, #1
 800b06e:	2100      	movs	r1, #0
 800b070:	2007      	movs	r0, #7
 800b072:	f000 ffb2 	bl	800bfda <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	3302      	adds	r3, #2
 800b07a:	9308      	str	r3, [sp, #32]
 800b07c:	2304      	movs	r3, #4
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	2303      	movs	r3, #3
 800b082:	9306      	str	r3, [sp, #24]
 800b084:	2302      	movs	r3, #2
 800b086:	9305      	str	r3, [sp, #20]
 800b088:	2301      	movs	r3, #1
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	2300      	movs	r3, #0
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	2307      	movs	r3, #7
 800b092:	9302      	str	r3, [sp, #8]
 800b094:	2304      	movs	r3, #4
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	2303      	movs	r3, #3
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	2302      	movs	r3, #2
 800b09e:	2201      	movs	r2, #1
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2007      	movs	r0, #7
 800b0a4:	f001 f829 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800b0a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d108      	bne.n	800b0c2 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ba:	f003 f97d 	bl	800e3b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f9da 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800b0d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b090      	sub	sp, #64	; 0x40
 800b0e2:	af0a      	add	r7, sp, #40	; 0x28
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	9304      	str	r3, [sp, #16]
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	9302      	str	r3, [sp, #8]
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff f911 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800b114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d16e      	bne.n	800b1fa <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	9308      	str	r3, [sp, #32]
 800b120:	230c      	movs	r3, #12
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	230b      	movs	r3, #11
 800b126:	9306      	str	r3, [sp, #24]
 800b128:	230a      	movs	r3, #10
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	2309      	movs	r3, #9
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	2308      	movs	r3, #8
 800b132:	9303      	str	r3, [sp, #12]
 800b134:	230f      	movs	r3, #15
 800b136:	9302      	str	r3, [sp, #8]
 800b138:	230c      	movs	r3, #12
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	230b      	movs	r3, #11
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	230a      	movs	r3, #10
 800b142:	2209      	movs	r2, #9
 800b144:	2108      	movs	r1, #8
 800b146:	200f      	movs	r0, #15
 800b148:	f000 ff47 	bl	800bfda <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	3302      	adds	r3, #2
 800b150:	9308      	str	r3, [sp, #32]
 800b152:	230c      	movs	r3, #12
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	230b      	movs	r3, #11
 800b158:	9306      	str	r3, [sp, #24]
 800b15a:	230a      	movs	r3, #10
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	2309      	movs	r3, #9
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	2308      	movs	r3, #8
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	230f      	movs	r3, #15
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	230c      	movs	r3, #12
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	230b      	movs	r3, #11
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	230a      	movs	r3, #10
 800b174:	2209      	movs	r2, #9
 800b176:	2108      	movs	r1, #8
 800b178:	200f      	movs	r0, #15
 800b17a:	f000 ffbe 	bl	800c0fa <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f97c 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	2209      	movs	r2, #9
 800b192:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	2209      	movs	r2, #9
 800b198:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	2200      	movs	r2, #0
 800b19e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	2221      	movs	r2, #33	; 0x21
 800b1a4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	2221      	movs	r2, #33	; 0x21
 800b1b0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	2229      	movs	r2, #41	; 0x29
 800b1bc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	2229      	movs	r2, #41	; 0x29
 800b1c8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2209      	movs	r2, #9
 800b1ce:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	22f5      	movs	r2, #245	; 0xf5
 800b1d4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	2209      	movs	r2, #9
 800b1da:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	2209      	movs	r2, #9
 800b1e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	2209      	movs	r2, #9
 800b1e6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	2206      	movs	r2, #6
 800b1ec:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	22bb      	movs	r2, #187	; 0xbb
 800b1f2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	2226      	movs	r2, #38	; 0x26
 800b1f8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b1fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b08c      	sub	sp, #48	; 0x30
 800b20a:	af06      	add	r7, sp, #24
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff ff53 	bl	800b0de <VL53L1_preset_mode_histogram_xtalk_mm1>
 800b238:	4603      	mov	r3, r0
 800b23a:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	22db      	movs	r2, #219	; 0xdb
 800b240:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800b242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b08c      	sub	sp, #48	; 0x30
 800b252:	af06      	add	r7, sp, #24
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	9302      	str	r3, [sp, #8]
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f7ff fbb9 	bl	800a9f2 <VL53L1_preset_mode_histogram_medium_range>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d12c      	bne.n	800b2e6 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	2307      	movs	r3, #7
 800b292:	9303      	str	r3, [sp, #12]
 800b294:	2307      	movs	r3, #7
 800b296:	9302      	str	r3, [sp, #8]
 800b298:	2302      	movs	r3, #2
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	2308      	movs	r3, #8
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	2304      	movs	r3, #4
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	2108      	movs	r1, #8
 800b2a6:	2004      	movs	r0, #4
 800b2a8:	f00a f96c 	bl	8015584 <VL53L1_init_zone_config_structure>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b2bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d108      	bne.n	800b2d6 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	3302      	adds	r3, #2
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ce:	f003 f873 	bl	800e3b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f8d0 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b08c      	sub	sp, #48	; 0x30
 800b2f6:	af06      	add	r7, sp, #24
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	9303      	str	r3, [sp, #12]
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7ff fc8e 	bl	800ac40 <VL53L1_preset_mode_histogram_short_range>
 800b324:	4603      	mov	r3, r0
 800b326:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d12c      	bne.n	800b38a <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	2307      	movs	r3, #7
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	2307      	movs	r3, #7
 800b33a:	9302      	str	r3, [sp, #8]
 800b33c:	2302      	movs	r3, #2
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	2308      	movs	r3, #8
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	2304      	movs	r3, #4
 800b346:	2202      	movs	r2, #2
 800b348:	2108      	movs	r1, #8
 800b34a:	2004      	movs	r0, #4
 800b34c:	f00a f91a 	bl	8015584 <VL53L1_init_zone_config_structure>
 800b350:	4603      	mov	r3, r0
 800b352:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	3301      	adds	r3, #1
 800b35a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d108      	bne.n	800b37a <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	3302      	adds	r3, #2
 800b36c:	461a      	mov	r2, r3
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b372:	f003 f821 	bl	800e3b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b376:	4603      	mov	r3, r0
 800b378:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f87e 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b08c      	sub	sp, #48	; 0x30
 800b39a:	af06      	add	r7, sp, #24
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	9303      	str	r3, [sp, #12]
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff f9ee 	bl	800a7a4 <VL53L1_preset_mode_histogram_long_range>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b3cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d12c      	bne.n	800b42e <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	9304      	str	r3, [sp, #16]
 800b3d8:	2307      	movs	r3, #7
 800b3da:	9303      	str	r3, [sp, #12]
 800b3dc:	2307      	movs	r3, #7
 800b3de:	9302      	str	r3, [sp, #8]
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	2308      	movs	r3, #8
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	2108      	movs	r1, #8
 800b3ee:	2004      	movs	r0, #4
 800b3f0:	f00a f8c8 	bl	8015584 <VL53L1_init_zone_config_structure>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	785b      	ldrb	r3, [r3, #1]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d108      	bne.n	800b41e <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	3302      	adds	r3, #2
 800b410:	461a      	mov	r2, r3
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b416:	f002 ffcf 	bl	800e3b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b41a:	4603      	mov	r3, r0
 800b41c:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f82c 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b42e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b08a      	sub	sp, #40	; 0x28
 800b43e:	af04      	add	r7, sp, #16
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b448:	2300      	movs	r3, #0
 800b44a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7fe fb9e 	bl	8009ba4 <VL53L1_preset_mode_standard_ranging>
 800b468:	4603      	mov	r3, r0
 800b46a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800b46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	2201      	movs	r2, #1
 800b478:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800b47a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800b486:	b480      	push	{r7}
 800b488:	b085      	sub	sp, #20
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
 800b492:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	79db      	ldrb	r3, [r3, #7]
 800b4c8:	b29b      	uxth	r3, r3
				<< 8)
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	7a1b      	ldrb	r3, [r3, #8]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	785b      	ldrb	r3, [r3, #1]
 800b510:	b29b      	uxth	r3, r3
				<< 8)
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	789b      	ldrb	r3, [r3, #2]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	78db      	ldrb	r3, [r3, #3]
 800b528:	b29b      	uxth	r3, r3
				<< 8)
 800b52a:	021b      	lsls	r3, r3, #8
 800b52c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	791b      	ldrb	r3, [r3, #4]
 800b532:	b29b      	uxth	r3, r3
 800b534:	4413      	add	r3, r2
 800b536:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800b564:	bf00      	nop
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	79db      	ldrb	r3, [r3, #7]
 800b5b0:	b29b      	uxth	r3, r3
				<< 8)
 800b5b2:	021b      	lsls	r3, r3, #8
 800b5b4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	7a1b      	ldrb	r3, [r3, #8]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4413      	add	r3, r2
 800b5be:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	785b      	ldrb	r3, [r3, #1]
 800b5f0:	b29b      	uxth	r3, r3
				<< 8)
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	789b      	ldrb	r3, [r3, #2]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	4413      	add	r3, r2
 800b5fe:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	78db      	ldrb	r3, [r3, #3]
 800b608:	b29b      	uxth	r3, r3
				<< 8)
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	791b      	ldrb	r3, [r3, #4]
 800b612:	b29b      	uxth	r3, r3
 800b614:	4413      	add	r3, r2
 800b616:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800b62c:	bf00      	nop
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08c      	sub	sp, #48	; 0x30
 800b63c:	af06      	add	r7, sp, #24
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b646:	2300      	movs	r3, #0
 800b648:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	9302      	str	r3, [sp, #8]
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7fe fe64 	bl	800a332 <VL53L1_preset_mode_histogram_ranging>
 800b66a:	4603      	mov	r3, r0
 800b66c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	6a3b      	ldr	r3, [r7, #32]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fefd 	bl	800b486 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3318      	adds	r3, #24
 800b6a4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2230      	movs	r2, #48	; 0x30
 800b6ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800b6c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b6c6:	bf00      	nop
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b085      	sub	sp, #20
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3318      	adds	r3, #24
 800b6e2:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	332c      	adds	r3, #44	; 0x2c
 800b6e8:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	78fa      	ldrb	r2, [r7, #3]
 800b6ee:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2200      	movs	r2, #0
 800b700:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2200      	movs	r2, #0
 800b706:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	78fa      	ldrb	r2, [r7, #3]
 800b70c:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2200      	movs	r2, #0
 800b712:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2202      	movs	r2, #2
 800b718:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2200      	movs	r2, #0
 800b71e:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	735a      	strb	r2, [r3, #13]

}
 800b726:	bf00      	nop
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
	...

0800b734 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3318      	adds	r3, #24
 800b744:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	332c      	adds	r3, #44	; 0x2c
 800b74a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d115      	bne.n	800b786 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2203      	movs	r2, #3
 800b75e:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2202      	movs	r2, #2
 800b776:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	735a      	strb	r2, [r3, #13]
 800b784:	e0be      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	7a1b      	ldrb	r3, [r3, #8]
 800b78a:	2bff      	cmp	r3, #255	; 0xff
 800b78c:	d103      	bne.n	800b796 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2280      	movs	r2, #128	; 0x80
 800b792:	721a      	strb	r2, [r3, #8]
 800b794:	e005      	b.n	800b7a2 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	7a1b      	ldrb	r3, [r3, #8]
 800b79a:	3301      	adds	r3, #1
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	7a19      	ldrb	r1, [r3, #8]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f103 0209 	add.w	r2, r3, #9
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	330a      	adds	r3, #10
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f002 fdc2 	bl	800e33a <VL53L1_update_internal_stream_counters>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7adb      	ldrb	r3, [r3, #11]
 800b7be:	f083 0302 	eor.w	r3, r3, #2
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	79db      	ldrb	r3, [r3, #7]
 800b7cc:	3b03      	subs	r3, #3
 800b7ce:	2b05      	cmp	r3, #5
 800b7d0:	f200 8082 	bhi.w	800b8d8 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800b7d4:	a201      	add	r2, pc, #4	; (adr r2, 800b7dc <VL53L1_update_ll_driver_rd_state+0xa8>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b7f5 	.word	0x0800b7f5
 800b7e0:	0800b8d9 	.word	0x0800b8d9
 800b7e4:	0800b8d9 	.word	0x0800b8d9
 800b7e8:	0800b847 	.word	0x0800b847
 800b7ec:	0800b87d 	.word	0x0800b87d
 800b7f0:	0800b8a7 	.word	0x0800b8a7

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd03      	ble.n	800b80a <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2206      	movs	r2, #6
 800b806:	71da      	strb	r2, [r3, #7]
 800b808:	e00d      	b.n	800b826 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800b814:	429a      	cmp	r2, r3
 800b816:	d303      	bcc.n	800b820 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2208      	movs	r2, #8
 800b81c:	71da      	strb	r2, [r3, #7]
 800b81e:	e002      	b.n	800b826 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2207      	movs	r2, #7
 800b824:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	735a      	strb	r2, [r3, #13]

			break;
 800b844:	e05e      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b868:	429a      	cmp	r2, r3
 800b86a:	d303      	bcc.n	800b874 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2208      	movs	r2, #8
 800b870:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b872:	e047      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2207      	movs	r2, #7
 800b878:	71da      	strb	r2, [r3, #7]
			break;
 800b87a:	e043      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	7b5b      	ldrb	r3, [r3, #13]
 800b880:	3301      	adds	r3, #1
 800b882:	b2da      	uxtb	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b892:	429a      	cmp	r2, r3
 800b894:	d303      	bcc.n	800b89e <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2208      	movs	r2, #8
 800b89a:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b89c:	e032      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2207      	movs	r2, #7
 800b8a2:	71da      	strb	r2, [r3, #7]
			break;
 800b8a4:	e02e      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7b1b      	ldrb	r3, [r3, #12]
 800b8b0:	f083 0301 	eor.w	r3, r3, #1
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d303      	bcc.n	800b8d0 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800b8ce:	e019      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2207      	movs	r2, #7
 800b8d4:	71da      	strb	r2, [r3, #7]
			break;
 800b8d6:	e015      	b.n	800b904 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2203      	movs	r2, #3
 800b8dc:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	735a      	strb	r2, [r3, #13]
			break;
 800b902:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800b904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b910:	b480      	push	{r7}
 800b912:	b08d      	sub	sp, #52	; 0x34
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3318      	adds	r3, #24
 800b922:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b92a:	3308      	adds	r3, #8
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	332c      	adds	r3, #44	; 0x2c
 800b932:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800b93a:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800b942:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b94a:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800b96a:	f003 031f 	and.w	r3, r3, #31
 800b96e:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	78db      	ldrb	r3, [r3, #3]
 800b974:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b97c:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800b980:	2b00      	cmp	r3, #0
 800b982:	bf14      	ite	ne
 800b984:	2301      	movne	r3, #1
 800b986:	2300      	moveq	r3, #0
 800b988:	b2db      	uxtb	r3, r3
	histogram_mode =
 800b98a:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b990:	111b      	asrs	r3, r3, #4
 800b992:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800b994:	f003 0302 	and.w	r3, r3, #2
 800b998:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800b99c:	7c7b      	ldrb	r3, [r7, #17]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d008      	beq.n	800b9b4 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b9a8:	111b      	asrs	r3, r3, #4
 800b9aa:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d04e      	beq.n	800ba60 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	79db      	ldrb	r3, [r3, #7]
 800b9c6:	2b06      	cmp	r3, #6
 800b9c8:	d109      	bne.n	800b9de <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800b9ca:	7c7b      	ldrb	r3, [r7, #17]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d14a      	bne.n	800ba66 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800b9d0:	7cfb      	ldrb	r3, [r7, #19]
 800b9d2:	2b12      	cmp	r3, #18
 800b9d4:	d047      	beq.n	800ba66 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800b9d6:	23ef      	movs	r3, #239	; 0xef
 800b9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9dc:	e043      	b.n	800ba66 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	7a1b      	ldrb	r3, [r3, #8]
 800b9e2:	7cba      	ldrb	r2, [r7, #18]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d002      	beq.n	800b9ee <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800b9e8:	23ee      	movs	r3, #238	; 0xee
 800b9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	7adb      	ldrb	r3, [r3, #11]
 800b9f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d002      	beq.n	800ba00 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800b9fa:	23ed      	movs	r3, #237	; 0xed
 800b9fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	7b5b      	ldrb	r3, [r3, #13]
 800ba04:	4619      	mov	r1, r3
		expected_stream_count =
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	4413      	add	r3, r2
 800ba12:	3302      	adds	r3, #2
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	7b5b      	ldrb	r3, [r3, #13]
 800ba1c:	4619      	mov	r1, r3
		expected_gph_id =
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	460b      	mov	r3, r1
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4413      	add	r3, r2
 800ba2a:	3303      	adds	r3, #3
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800ba30:	7c3a      	ldrb	r2, [r7, #16]
 800ba32:	7cbb      	ldrb	r3, [r7, #18]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d00a      	beq.n	800ba4e <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d102      	bne.n	800ba48 <VL53L1_check_ll_driver_rd_state+0x138>
 800ba42:	7cbb      	ldrb	r3, [r7, #18]
 800ba44:	2bff      	cmp	r3, #255	; 0xff
 800ba46:	d002      	beq.n	800ba4e <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800ba48:	23ec      	movs	r3, #236	; 0xec
 800ba4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800ba4e:	7bfa      	ldrb	r2, [r7, #15]
 800ba50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d005      	beq.n	800ba64 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800ba58:	23eb      	movs	r3, #235	; 0xeb
 800ba5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ba5e:	e002      	b.n	800ba66 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800ba60:	bf00      	nop
 800ba62:	e000      	b.n	800ba66 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800ba64:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800ba66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3734      	adds	r7, #52	; 0x34
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b088      	sub	sp, #32
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3318      	adds	r3, #24
 800ba86:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ba8e:	3308      	adds	r3, #8
 800ba90:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	332c      	adds	r3, #44	; 0x2c
 800ba96:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ba9e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800baa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d11b      	bne.n	800bae6 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2203      	movs	r2, #3
 800bab2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	2200      	movs	r2, #0
 800bab8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2200      	movs	r2, #0
 800babe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2200      	movs	r2, #0
 800bac4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2202      	movs	r2, #2
 800baca:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	2200      	movs	r2, #0
 800bad0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2200      	movs	r2, #0
 800bad6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	773b      	strb	r3, [r7, #28]
 800bae4:	e0b1      	b.n	800bc4a <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	791b      	ldrb	r3, [r3, #4]
 800baea:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	799b      	ldrb	r3, [r3, #6]
 800baf0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	785b      	ldrb	r3, [r3, #1]
 800bafc:	2bff      	cmp	r3, #255	; 0xff
 800bafe:	d103      	bne.n	800bb08 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2280      	movs	r2, #128	; 0x80
 800bb04:	705a      	strb	r2, [r3, #1]
 800bb06:	e005      	b.n	800bb14 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	7859      	ldrb	r1, [r3, #1]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	1c9a      	adds	r2, r3, #2
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	3303      	adds	r3, #3
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f002 fc0a 	bl	800e33a <VL53L1_update_internal_stream_counters>
 800bb26:	4603      	mov	r3, r0
 800bb28:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	791b      	ldrb	r3, [r3, #4]
 800bb2e:	f083 0302 	eor.w	r3, r3, #2
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b05      	cmp	r3, #5
 800bb3e:	d053      	beq.n	800bbe8 <VL53L1_update_ll_driver_cfg_state+0x172>
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	dc69      	bgt.n	800bc18 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d002      	beq.n	800bb4e <VL53L1_update_ll_driver_cfg_state+0xd8>
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d02d      	beq.n	800bba8 <VL53L1_update_ll_driver_cfg_state+0x132>
 800bb4c:	e064      	b.n	800bc18 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2201      	movs	r2, #1
 800bb52:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d909      	bls.n	800bb76 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2200      	movs	r2, #0
 800bb66:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	795b      	ldrb	r3, [r3, #5]
 800bb6c:	f083 0301 	eor.w	r3, r3, #1
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	70da      	strb	r2, [r3, #3]
 800bb92:	e005      	b.n	800bba0 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	2200      	movs	r2, #0
 800bb98:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2204      	movs	r2, #4
 800bba4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800bba6:	e050      	b.n	800bc4a <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	799b      	ldrb	r3, [r3, #6]
 800bbac:	3301      	adds	r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d940      	bls.n	800bc44 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	795b      	ldrb	r3, [r3, #5]
 800bbcc:	f083 0301 	eor.w	r3, r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d031      	beq.n	800bc44 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800bbe6:	e02d      	b.n	800bc44 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	799b      	ldrb	r3, [r3, #6]
 800bbec:	3301      	adds	r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d922      	bls.n	800bc48 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2200      	movs	r2, #0
 800bc06:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	795b      	ldrb	r3, [r3, #5]
 800bc0c:	f083 0301 	eor.w	r3, r3, #1
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	715a      	strb	r2, [r3, #5]
			}
			break;
 800bc16:	e017      	b.n	800bc48 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2200      	movs	r2, #0
 800bc22:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2200      	movs	r2, #0
 800bc28:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	2202      	movs	r2, #2
 800bc34:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	719a      	strb	r2, [r3, #6]
			break;
 800bc42:	e002      	b.n	800bc4a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800bc44:	bf00      	nop
 800bc46:	e000      	b.n	800bc4a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800bc48:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d11d      	bne.n	800bc90 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800bc54:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800bc56:	7f3b      	ldrb	r3, [r7, #28]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	b2d8      	uxtb	r0, r3
 800bc5c:	68f9      	ldr	r1, [r7, #12]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	440b      	add	r3, r1
 800bc68:	3302      	adds	r3, #2
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	7b5b      	ldrb	r3, [r3, #13]
 800bc72:	4619      	mov	r1, r3
 800bc74:	7f7b      	ldrb	r3, [r7, #29]
 800bc76:	f083 0302 	eor.w	r3, r3, #2
 800bc7a:	b2d8      	uxtb	r0, r3
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	4413      	add	r3, r2
 800bc88:	3303      	adds	r3, #3
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e013      	b.n	800bcb8 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800bc90:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800bc92:	68f9      	ldr	r1, [r7, #12]
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3302      	adds	r3, #2
 800bca0:	7f3a      	ldrb	r2, [r7, #28]
 800bca2:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800bca4:	7fba      	ldrb	r2, [r7, #30]
 800bca6:	68f9      	ldr	r1, [r7, #12]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3303      	adds	r3, #3
 800bcb4:	7f7a      	ldrb	r2, [r7, #29]
 800bcb6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800bcb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3720      	adds	r7, #32
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	7c1a      	ldrb	r2, [r3, #16]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	7c52      	ldrb	r2, [r2, #17]
 800bcde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	3302      	adds	r3, #2
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c92      	ldrb	r2, [r2, #18]
 800bce8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	3303      	adds	r3, #3
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	7cd2      	ldrb	r2, [r2, #19]
 800bcf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	7d12      	ldrb	r2, [r2, #20]
 800bcfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	3305      	adds	r3, #5
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	7d52      	ldrb	r2, [r2, #21]
 800bd06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	3306      	adds	r3, #6
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	7d92      	ldrb	r2, [r2, #22]
 800bd10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	3307      	adds	r3, #7
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	7dd2      	ldrb	r2, [r2, #23]
 800bd1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	7e12      	ldrb	r2, [r2, #24]
 800bd24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	3309      	adds	r3, #9
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	7e52      	ldrb	r2, [r2, #25]
 800bd2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	330a      	adds	r3, #10
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7e92      	ldrb	r2, [r2, #26]
 800bd38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	330b      	adds	r3, #11
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	7ed2      	ldrb	r2, [r2, #27]
 800bd42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	330c      	adds	r3, #12
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	7f12      	ldrb	r2, [r2, #28]
 800bd4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	330d      	adds	r3, #13
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	7f52      	ldrb	r2, [r2, #29]
 800bd56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	330e      	adds	r3, #14
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7f92      	ldrb	r2, [r2, #30]
 800bd60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	330f      	adds	r3, #15
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	7fd2      	ldrb	r2, [r2, #31]
 800bd6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3310      	adds	r3, #16
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bd76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	3311      	adds	r3, #17
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800bd82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	3312      	adds	r3, #18
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800bd8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	3313      	adds	r3, #19
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800bd9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bda6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	3315      	adds	r3, #21
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bdb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	3316      	adds	r3, #22
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800bdbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	3317      	adds	r3, #23
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800bdca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	3318      	adds	r3, #24
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bdd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	3319      	adds	r3, #25
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800bde2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	331a      	adds	r3, #26
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bdee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	331b      	adds	r3, #27
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800bdfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	331c      	adds	r3, #28
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800be06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	331d      	adds	r3, #29
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800be12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	331e      	adds	r3, #30
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800be1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	331f      	adds	r3, #31
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800be2a:	701a      	strb	r2, [r3, #0]
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	22ff      	movs	r2, #255	; 0xff
 800be44:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	22ff      	movs	r2, #255	; 0xff
 800be4a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	22ff      	movs	r2, #255	; 0xff
 800be50:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	22ff      	movs	r2, #255	; 0xff
 800be56:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be5e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be66:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be6e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be76:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be7e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be86:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be8e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be96:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be9e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bea6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beae:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beb6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bebe:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bec6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bece:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bede:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bee6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beee:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	22ff      	movs	r2, #255	; 0xff
 800bef4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6039      	str	r1, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2210      	movs	r2, #16
 800bf18:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	79fa      	ldrb	r2, [r7, #7]
 800bf1e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
 800bf24:	e017      	b.n	800bf56 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800bf26:	7bfa      	ldrb	r2, [r7, #15]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	011b      	lsls	r3, r3, #4
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	4413      	add	r3, r2
 800bf34:	3304      	adds	r3, #4
 800bf36:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2203      	movs	r2, #3
 800bf3c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2203      	movs	r2, #3
 800bf42:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2204      	movs	r2, #4
 800bf48:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	3301      	adds	r3, #1
 800bf54:	73fb      	strb	r3, [r7, #15]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	7bfa      	ldrb	r2, [r7, #15]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d3e2      	bcc.n	800bf26 <V53L1_init_zone_results_structure+0x22>
	}
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b087      	sub	sp, #28
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800bf84:	2310      	movs	r3, #16
 800bf86:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bf8e:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800bf90:	2300      	movs	r3, #0
 800bf92:	75fb      	strb	r3, [r7, #23]
 800bf94:	e016      	b.n	800bfc4 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800bf96:	7dfa      	ldrb	r2, [r7, #23]
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800bfaa:	7dfa      	ldrb	r2, [r7, #23]
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3306      	adds	r3, #6
 800bfba:	2200      	movs	r2, #0
 800bfbc:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]
 800bfc4:	7dfa      	ldrb	r2, [r7, #23]
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3e4      	bcc.n	800bf96 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800bfcc:	bf00      	nop
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800bfda:	b490      	push	{r4, r7}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4623      	mov	r3, r4
 800bfea:	71fb      	strb	r3, [r7, #7]
 800bfec:	4603      	mov	r3, r0
 800bfee:	71bb      	strb	r3, [r7, #6]
 800bff0:	460b      	mov	r3, r1
 800bff2:	717b      	strb	r3, [r7, #5]
 800bff4:	4613      	mov	r3, r2
 800bff6:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800bff8:	79bb      	ldrb	r3, [r7, #6]
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	79fb      	ldrb	r3, [r7, #7]
 800c000:	4413      	add	r3, r2
 800c002:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800c008:	793b      	ldrb	r3, [r7, #4]
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	797b      	ldrb	r3, [r7, #5]
 800c010:	4413      	add	r3, r2
 800c012:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800c018:	7d3b      	ldrb	r3, [r7, #20]
 800c01a:	011b      	lsls	r3, r3, #4
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	7c3b      	ldrb	r3, [r7, #16]
 800c020:	4413      	add	r3, r2
 800c022:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800c028:	7f3b      	ldrb	r3, [r7, #28]
 800c02a:	011b      	lsls	r3, r3, #4
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	7e3b      	ldrb	r3, [r7, #24]
 800c030:	4413      	add	r3, r2
 800c032:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800c038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c03c:	011b      	lsls	r3, r3, #4
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c044:	4413      	add	r3, r2
 800c046:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800c04c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	b2da      	uxtb	r2, r3
 800c054:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c058:	4413      	add	r3, r2
 800c05a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c086:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800c088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c08c:	011b      	lsls	r3, r3, #4
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c094:	4413      	add	r3, r2
 800c096:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c0a2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0e0:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0e8:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	701a      	strb	r2, [r3, #0]

}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc90      	pop	{r4, r7}
 800c0f8:	4770      	bx	lr

0800c0fa <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800c0fa:	b490      	push	{r4, r7}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	4604      	mov	r4, r0
 800c102:	4608      	mov	r0, r1
 800c104:	4611      	mov	r1, r2
 800c106:	461a      	mov	r2, r3
 800c108:	4623      	mov	r3, r4
 800c10a:	71fb      	strb	r3, [r7, #7]
 800c10c:	4603      	mov	r3, r0
 800c10e:	71bb      	strb	r3, [r7, #6]
 800c110:	460b      	mov	r3, r1
 800c112:	717b      	strb	r3, [r7, #5]
 800c114:	4613      	mov	r3, r2
 800c116:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800c118:	79bb      	ldrb	r3, [r7, #6]
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	4413      	add	r3, r2
 800c122:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800c128:	793b      	ldrb	r3, [r7, #4]
 800c12a:	011b      	lsls	r3, r3, #4
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	797b      	ldrb	r3, [r7, #5]
 800c130:	4413      	add	r3, r2
 800c132:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800c138:	7d3b      	ldrb	r3, [r7, #20]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	7c3b      	ldrb	r3, [r7, #16]
 800c140:	4413      	add	r3, r2
 800c142:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	789a      	ldrb	r2, [r3, #2]
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	78da      	ldrb	r2, [r3, #3]
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	789a      	ldrb	r2, [r3, #2]
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	78da      	ldrb	r2, [r3, #3]
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	791a      	ldrb	r2, [r3, #4]
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c186:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800c188:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c18c:	011b      	lsls	r3, r3, #4
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c194:	4413      	add	r3, r2
 800c196:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c1a2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800c1aa:	7f3b      	ldrb	r3, [r7, #28]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	7e3b      	ldrb	r3, [r7, #24]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800c1ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800c1ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1da:	4413      	add	r3, r2
 800c1dc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	7bda      	ldrb	r2, [r3, #15]
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	7c1a      	ldrb	r2, [r3, #16]
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	7c5a      	ldrb	r2, [r3, #17]
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c200:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c208:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bc90      	pop	{r4, r7}
 800c218:	4770      	bx	lr

0800c21a <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b087      	sub	sp, #28
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	460b      	mov	r3, r1
 800c224:	607a      	str	r2, [r7, #4]
 800c226:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	220c      	movs	r2, #12
 800c242:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800c244:	897b      	ldrh	r3, [r7, #10]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c27a:	2300      	movs	r3, #0
 800c27c:	82fb      	strh	r3, [r7, #22]
 800c27e:	e015      	b.n	800c2ac <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800c280:	8afa      	ldrh	r2, [r7, #22]
 800c282:	897b      	ldrh	r3, [r7, #10]
 800c284:	429a      	cmp	r2, r3
 800c286:	d207      	bcs.n	800c298 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800c288:	8afb      	ldrh	r3, [r7, #22]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	3302      	adds	r3, #2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	e006      	b.n	800c2a6 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800c298:	8afb      	ldrh	r3, [r7, #22]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	3302      	adds	r3, #2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c2a6:	8afb      	ldrh	r3, [r7, #22]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	82fb      	strh	r3, [r7, #22]
 800c2ac:	8afb      	ldrh	r3, [r7, #22]
 800c2ae:	2b0b      	cmp	r3, #11
 800c2b0:	d9e6      	bls.n	800c280 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	371c      	adds	r7, #28
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	603a      	str	r2, [r7, #0]
 800c2ca:	80fb      	strh	r3, [r7, #6]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c2dc:	2300      	movs	r3, #0
 800c2de:	81fb      	strh	r3, [r7, #14]
 800c2e0:	e00e      	b.n	800c300 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c2e2:	88ba      	ldrh	r2, [r7, #4]
 800c2e4:	89fb      	ldrh	r3, [r7, #14]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	89ba      	ldrh	r2, [r7, #12]
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c2f4:	89bb      	ldrh	r3, [r7, #12]
 800c2f6:	0a1b      	lsrs	r3, r3, #8
 800c2f8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c2fa:	89fb      	ldrh	r3, [r7, #14]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	81fb      	strh	r3, [r7, #14]
 800c300:	89fa      	ldrh	r2, [r7, #14]
 800c302:	88bb      	ldrh	r3, [r7, #4]
 800c304:	429a      	cmp	r2, r3
 800c306:	d3ec      	bcc.n	800c2e2 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c308:	bf00      	nop
 800c30a:	bf00      	nop
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c316:	b480      	push	{r7}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	4603      	mov	r3, r0
 800c31e:	6039      	str	r1, [r7, #0]
 800c320:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800c322:	2300      	movs	r3, #0
 800c324:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c326:	e00a      	b.n	800c33e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c328:	89fb      	ldrh	r3, [r7, #14]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	b21a      	sxth	r2, r3
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	1c59      	adds	r1, r3, #1
 800c332:	6039      	str	r1, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	b21b      	sxth	r3, r3
 800c338:	4313      	orrs	r3, r2
 800c33a:	b21b      	sxth	r3, r3
 800c33c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	1e5a      	subs	r2, r3, #1
 800c342:	80fa      	strh	r2, [r7, #6]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1ef      	bne.n	800c328 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800c348:	89fb      	ldrh	r3, [r7, #14]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c356:	b480      	push	{r7}
 800c358:	b085      	sub	sp, #20
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	4603      	mov	r3, r0
 800c35e:	603a      	str	r2, [r7, #0]
 800c360:	80fb      	strh	r3, [r7, #6]
 800c362:	460b      	mov	r3, r1
 800c364:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c372:	2300      	movs	r3, #0
 800c374:	81fb      	strh	r3, [r7, #14]
 800c376:	e00f      	b.n	800c398 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c378:	88ba      	ldrh	r2, [r7, #4]
 800c37a:	89fb      	ldrh	r3, [r7, #14]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	3b01      	subs	r3, #1
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	4413      	add	r3, r2
 800c384:	89ba      	ldrh	r2, [r7, #12]
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c38a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c38e:	121b      	asrs	r3, r3, #8
 800c390:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c392:	89fb      	ldrh	r3, [r7, #14]
 800c394:	3301      	adds	r3, #1
 800c396:	81fb      	strh	r3, [r7, #14]
 800c398:	89fa      	ldrh	r2, [r7, #14]
 800c39a:	88bb      	ldrh	r3, [r7, #4]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d3eb      	bcc.n	800c378 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b085      	sub	sp, #20
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	6039      	str	r1, [r7, #0]
 800c3b8:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	b25b      	sxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	da0e      	bge.n	800c3e6 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c3c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3cc:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c3ce:	e00a      	b.n	800c3e6 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c3d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c3d4:	021b      	lsls	r3, r3, #8
 800c3d6:	b21a      	sxth	r2, r3
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	1c59      	adds	r1, r3, #1
 800c3dc:	6039      	str	r1, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b21b      	sxth	r3, r3
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c3e6:	88fb      	ldrh	r3, [r7, #6]
 800c3e8:	1e5a      	subs	r2, r3, #1
 800c3ea:	80fa      	strh	r2, [r7, #6]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1ef      	bne.n	800c3d0 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800c3f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	460b      	mov	r3, r1
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800c41a:	2300      	movs	r3, #0
 800c41c:	82fb      	strh	r3, [r7, #22]
 800c41e:	e00e      	b.n	800c43e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c420:	897a      	ldrh	r2, [r7, #10]
 800c422:	8afb      	ldrh	r3, [r7, #22]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	3b01      	subs	r3, #1
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	4413      	add	r3, r2
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	0a1b      	lsrs	r3, r3, #8
 800c436:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800c438:	8afb      	ldrh	r3, [r7, #22]
 800c43a:	3301      	adds	r3, #1
 800c43c:	82fb      	strh	r3, [r7, #22]
 800c43e:	8afa      	ldrh	r2, [r7, #22]
 800c440:	897b      	ldrh	r3, [r7, #10]
 800c442:	429a      	cmp	r2, r3
 800c444:	d3ec      	bcc.n	800c420 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	371c      	adds	r7, #28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	6039      	str	r1, [r7, #0]
 800c45e:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c464:	e007      	b.n	800c476 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	021a      	lsls	r2, r3, #8
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	1c59      	adds	r1, r3, #1
 800c46e:	6039      	str	r1, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	4313      	orrs	r3, r2
 800c474:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c476:	88fb      	ldrh	r3, [r7, #6]
 800c478:	1e5a      	subs	r2, r3, #1
 800c47a:	80fa      	strh	r2, [r7, #6]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1f2      	bne.n	800c466 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800c480:	68fb      	ldr	r3, [r7, #12]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c48e:	b480      	push	{r7}
 800c490:	b085      	sub	sp, #20
 800c492:	af00      	add	r7, sp, #0
 800c494:	4603      	mov	r3, r0
 800c496:	6039      	str	r1, [r7, #0]
 800c498:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	b25b      	sxtb	r3, r3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	da0b      	bge.n	800c4c0 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ac:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c4ae:	e007      	b.n	800c4c0 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	021a      	lsls	r2, r3, #8
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	1c59      	adds	r1, r3, #1
 800c4b8:	6039      	str	r1, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c4c0:	88fb      	ldrh	r3, [r7, #6]
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	80fa      	strh	r2, [r7, #6]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1f2      	bne.n	800c4b0 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800c4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d107      	bne.n	800c500 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	2127      	movs	r1, #39	; 0x27
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f009 f9ce 	bl	8015898 <VL53L1_WrByte>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	460b      	mov	r3, r1
 800c516:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3318      	adds	r3, #24
 800c520:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	78fa      	ldrb	r2, [r7, #3]
 800c526:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800c530:	461a      	mov	r2, r3
 800c532:	2185      	movs	r1, #133	; 0x85
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f009 f9af 	bl	8015898 <VL53L1_WrByte>
 800c53a:	4603      	mov	r3, r0
 800c53c:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800c53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800c556:	2101      	movs	r1, #1
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff ffd7 	bl	800c50c <VL53L1_set_firmware_enable_register>
 800c55e:	4603      	mov	r3, r0
 800c560:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800c57a:	2100      	movs	r1, #0
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffc5 	bl	800c50c <VL53L1_set_firmware_enable_register>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3318      	adds	r3, #24
 800c5a6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	2183      	movs	r1, #131	; 0x83
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f009 f96c 	bl	8015898 <VL53L1_WrByte>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c5dc:	2101      	movs	r1, #1
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff ffd7 	bl	800c592 <VL53L1_set_powerforce_register>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800c600:	2100      	movs	r1, #0
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffc5 	bl	800c592 <VL53L1_set_powerforce_register>
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c60c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c620:	2300      	movs	r3, #0
 800c622:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3318      	adds	r3, #24
 800c628:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800c638:	461a      	mov	r2, r3
 800c63a:	2186      	movs	r1, #134	; 0x86
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f009 f92b 	bl	8015898 <VL53L1_WrByte>
 800c642:	4603      	mov	r3, r0
 800c644:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800c646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b086      	sub	sp, #24
 800c656:	af00      	add	r7, sp, #0
 800c658:	4603      	mov	r3, r0
 800c65a:	460a      	mov	r2, r1
 800c65c:	80fb      	strh	r3, [r7, #6]
 800c65e:	4613      	mov	r3, r2
 800c660:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	4618      	mov	r0, r3
 800c672:	f002 ffeb 	bl	800f64c <VL53L1_calc_pll_period_us>
 800c676:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800c678:	797b      	ldrb	r3, [r7, #5]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f003 fbd6 	bl	800fe2c <VL53L1_decode_vcsel_period>
 800c680:	4603      	mov	r3, r0
 800c682:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4613      	mov	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	4413      	add	r3, r2
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	099b      	lsrs	r3, r3, #6
 800c694:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800c696:	7cfa      	ldrb	r2, [r7, #19]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	fb02 f303 	mul.w	r3, r2, r3
 800c69e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	099b      	lsrs	r3, r3, #6
 800c6a4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b089      	sub	sp, #36	; 0x24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	4608      	mov	r0, r1
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	461a      	mov	r2, r3
 800c6be:	4603      	mov	r3, r0
 800c6c0:	817b      	strh	r3, [r7, #10]
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	813b      	strh	r3, [r7, #8]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	011b      	lsls	r3, r3, #4
 800c6e2:	4a23      	ldr	r2, [pc, #140]	; (800c770 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c6e4:	fb82 1203 	smull	r1, r2, r2, r3
 800c6e8:	1192      	asrs	r2, r2, #6
 800c6ea:	17db      	asrs	r3, r3, #31
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800c6f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da03      	bge.n	800c700 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c6f8:	897b      	ldrh	r3, [r7, #10]
 800c6fa:	425b      	negs	r3, r3
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800c700:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	da03      	bge.n	800c710 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c708:	893b      	ldrh	r3, [r7, #8]
 800c70a:	425b      	negs	r3, r3
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800c710:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c714:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c718:	4413      	add	r3, r2
 800c71a:	015b      	lsls	r3, r3, #5
 800c71c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	4a13      	ldr	r2, [pc, #76]	; (800c770 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c722:	fb82 1203 	smull	r1, r2, r2, r3
 800c726:	1192      	asrs	r2, r2, #6
 800c728:	17db      	asrs	r3, r3, #31
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	4413      	add	r3, r2
 800c734:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c736:	79fa      	ldrb	r2, [r7, #7]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	fb02 f303 	mul.w	r3, r2, r3
 800c73e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	3310      	adds	r3, #16
 800c744:	2b00      	cmp	r3, #0
 800c746:	da00      	bge.n	800c74a <VL53L1_calc_range_ignore_threshold+0x9a>
 800c748:	331f      	adds	r3, #31
 800c74a:	115b      	asrs	r3, r3, #5
 800c74c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c754:	db03      	blt.n	800c75e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c75a:	83fb      	strh	r3, [r7, #30]
 800c75c:	e001      	b.n	800c762 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c762:	8bfb      	ldrh	r3, [r7, #30]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3724      	adds	r7, #36	; 0x24
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	10624dd3 	.word	0x10624dd3

0800c774 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	e008      	b.n	800c7a0 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	031a      	lsls	r2, r3, #12
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	085b      	lsrs	r3, r3, #1
 800c796:	441a      	add	r2, r3
		timeout_mclks =
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff ffd6 	bl	800c774 <VL53L1_calc_timeout_mclks>
 800c7c8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f000 f887 	bl	800c8de <VL53L1_encode_timeout>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c7d4:	897b      	ldrh	r3, [r7, #10]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c7de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c7ee:	f04f 0000 	mov.w	r0, #0
 800c7f2:	f04f 0100 	mov.w	r1, #0
 800c7f6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	4688      	mov	r8, r1
 800c800:	4681      	mov	r9, r0
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	2000      	movs	r0, #0
 800c806:	460c      	mov	r4, r1
 800c808:	4605      	mov	r5, r0
 800c80a:	fb04 f009 	mul.w	r0, r4, r9
 800c80e:	fb08 f105 	mul.w	r1, r8, r5
 800c812:	4401      	add	r1, r0
 800c814:	fba8 2304 	umull	r2, r3, r8, r4
 800c818:	4419      	add	r1, r3
 800c81a:	460b      	mov	r3, r1
 800c81c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c820:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c828:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c82c:	f143 0b00 	adc.w	fp, r3, #0
 800c830:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c838:	f04f 0200 	mov.w	r2, #0
 800c83c:	f04f 0300 	mov.w	r3, #0
 800c840:	0b02      	lsrs	r2, r0, #12
 800c842:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c846:	0b0b      	lsrs	r3, r1, #12
 800c848:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800c850:	697b      	ldr	r3, [r7, #20]
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c85c:	4770      	bx	lr
	...

0800c860 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800c874:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800c878:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800c87a:	4413      	add	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	da02      	bge.n	800c88a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e005      	b.n	800c896 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c890:	db01      	blt.n	800c896 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800c892:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800c894:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800c89a:	68bb      	ldr	r3, [r7, #8]

}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	0003ffff 	.word	0x0003ffff

0800c8ac <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	6039      	str	r1, [r7, #0]
 800c8b6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c8c0:	88fb      	ldrh	r3, [r7, #6]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f837 	bl	800c936 <VL53L1_decode_timeout>
 800c8c8:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff ff86 	bl	800c7de <VL53L1_calc_timeout_us>
 800c8d2:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b087      	sub	sp, #28
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d017      	beq.n	800c928 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c8fe:	e005      	b.n	800c90c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	085b      	lsrs	r3, r3, #1
 800c904:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c906:	89fb      	ldrh	r3, [r7, #14]
 800c908:	3301      	adds	r3, #1
 800c90a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1f4      	bne.n	800c900 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c916:	89fb      	ldrh	r3, [r7, #14]
 800c918:	021b      	lsls	r3, r3, #8
 800c91a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	b2db      	uxtb	r3, r3
 800c922:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c924:	4413      	add	r3, r2
 800c926:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c928:	8afb      	ldrh	r3, [r7, #22]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c936:	b480      	push	{r7}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	4603      	mov	r3, r0
 800c93e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c948:	88fa      	ldrh	r2, [r7, #6]
 800c94a:	0a12      	lsrs	r2, r2, #8
 800c94c:	b292      	uxth	r2, r2
 800c94e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c954:	68fb      	ldr	r3, [r7, #12]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b088      	sub	sp, #32
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	607a      	str	r2, [r7, #4]
 800c96e:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c970:	2300      	movs	r3, #0
 800c972:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c980:	887b      	ldrh	r3, [r7, #2]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c986:	23f1      	movs	r3, #241	; 0xf1
 800c988:	77fb      	strb	r3, [r7, #31]
 800c98a:	e05d      	b.n	800ca48 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	799a      	ldrb	r2, [r3, #6]
 800c990:	887b      	ldrh	r3, [r7, #2]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff fe5c 	bl	800c652 <VL53L1_calc_macro_period_us>
 800c99a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c99c:	6979      	ldr	r1, [r7, #20]
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fee8 	bl	800c774 <VL53L1_calc_timeout_mclks>
 800c9a4:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	2bff      	cmp	r3, #255	; 0xff
 800c9aa:	d901      	bls.n	800c9b0 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c9ac:	23ff      	movs	r3, #255	; 0xff
 800c9ae:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c9b8:	6979      	ldr	r1, [r7, #20]
 800c9ba:	68b8      	ldr	r0, [r7, #8]
 800c9bc:	f7ff fef7 	bl	800c7ae <VL53L1_calc_encoded_timeout>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c9c4:	8a7b      	ldrh	r3, [r7, #18]
 800c9c6:	0a1b      	lsrs	r3, r3, #8
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c9d0:	8a7b      	ldrh	r3, [r7, #18]
 800c9d2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c9d8:	6979      	ldr	r1, [r7, #20]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7ff fee7 	bl	800c7ae <VL53L1_calc_encoded_timeout>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c9e4:	8a7b      	ldrh	r3, [r7, #18]
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c9f0:	8a7b      	ldrh	r3, [r7, #18]
 800c9f2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f6:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fa:	7a5a      	ldrb	r2, [r3, #9]
 800c9fc:	887b      	ldrh	r3, [r7, #2]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7ff fe26 	bl	800c652 <VL53L1_calc_macro_period_us>
 800ca06:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800ca08:	6979      	ldr	r1, [r7, #20]
 800ca0a:	68b8      	ldr	r0, [r7, #8]
 800ca0c:	f7ff fecf 	bl	800c7ae <VL53L1_calc_encoded_timeout>
 800ca10:	4603      	mov	r3, r0
 800ca12:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ca14:	8a7b      	ldrh	r3, [r7, #18]
 800ca16:	0a1b      	lsrs	r3, r3, #8
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ca20:	8a7b      	ldrh	r3, [r7, #18]
 800ca22:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800ca28:	6979      	ldr	r1, [r7, #20]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff febf 	bl	800c7ae <VL53L1_calc_encoded_timeout>
 800ca30:	4603      	mov	r3, r0
 800ca32:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ca34:	8a7b      	ldrh	r3, [r7, #18]
 800ca36:	0a1b      	lsrs	r3, r3, #8
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ca40:	8a7b      	ldrh	r3, [r7, #18]
 800ca42:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800ca48:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800ca54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca58:	b09e      	sub	sp, #120	; 0x78
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6578      	str	r0, [r7, #84]	; 0x54
 800ca5e:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800ca66:	f04f 0200 	mov.w	r2, #0
 800ca6a:	f04f 0300 	mov.w	r3, #0
 800ca6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800ca72:	f04f 0200 	mov.w	r2, #0
 800ca76:	f04f 0300 	mov.w	r3, #0
 800ca7a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800ca7e:	f04f 0200 	mov.w	r2, #0
 800ca82:	f04f 0300 	mov.w	r3, #0
 800ca86:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800ca8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca8c:	885b      	ldrh	r3, [r3, #2]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d103      	bne.n	800ca9a <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ca92:	23f1      	movs	r3, #241	; 0xf1
 800ca94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ca98:	e0d6      	b.n	800cc48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800ca9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80d2 	beq.w	800cc48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800caa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa6:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f040 80cd 	bne.w	800cc48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800caae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cab4:	2200      	movs	r2, #0
 800cab6:	643b      	str	r3, [r7, #64]	; 0x40
 800cab8:	647a      	str	r2, [r7, #68]	; 0x44
 800caba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cabe:	460b      	mov	r3, r1
 800cac0:	3301      	adds	r3, #1
 800cac2:	623b      	str	r3, [r7, #32]
 800cac4:	4613      	mov	r3, r2
 800cac6:	f143 0300 	adc.w	r3, r3, #0
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
 800cacc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cad0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800cad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800cada:	b29b      	uxth	r3, r3
 800cadc:	2200      	movs	r2, #0
 800cade:	64bb      	str	r3, [r7, #72]	; 0x48
 800cae0:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800cae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cae4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cae8:	4602      	mov	r2, r0
 800caea:	fb02 f203 	mul.w	r2, r2, r3
 800caee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caf0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800caf4:	fb01 f303 	mul.w	r3, r1, r3
 800caf8:	441a      	add	r2, r3
 800cafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cafc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cafe:	fba3 4501 	umull	r4, r5, r3, r1
 800cb02:	1953      	adds	r3, r2, r5
 800cb04:	461d      	mov	r5, r3
 800cb06:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800cb0a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800cb0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	2200      	movs	r2, #0
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cb18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	3301      	adds	r3, #1
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	4613      	mov	r3, r2
 800cb24:	f143 0300 	adc.w	r3, r3, #0
 800cb28:	61fb      	str	r3, [r7, #28]
 800cb2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cb2e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800cb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2200      	movs	r2, #0
 800cb3a:	633b      	str	r3, [r7, #48]	; 0x30
 800cb3c:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800cb3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cb44:	4622      	mov	r2, r4
 800cb46:	fb02 f203 	mul.w	r2, r2, r3
 800cb4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	fb01 f303 	mul.w	r3, r1, r3
 800cb52:	441a      	add	r2, r3
 800cb54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb56:	4621      	mov	r1, r4
 800cb58:	fba3 ab01 	umull	sl, fp, r3, r1
 800cb5c:	eb02 030b 	add.w	r3, r2, fp
 800cb60:	469b      	mov	fp, r3
 800cb62:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800cb66:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800cb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	17da      	asrs	r2, r3, #31
 800cb70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb72:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800cb74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb76:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	fb02 f203 	mul.w	r2, r2, r3
 800cb80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb82:	4629      	mov	r1, r5
 800cb84:	fb01 f303 	mul.w	r3, r1, r3
 800cb88:	4413      	add	r3, r2
 800cb8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	fba2 8901 	umull	r8, r9, r2, r1
 800cb92:	444b      	add	r3, r9
 800cb94:	4699      	mov	r9, r3
 800cb96:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800cb9a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800cb9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cba2:	0fd9      	lsrs	r1, r3, #31
 800cba4:	2000      	movs	r0, #0
 800cba6:	6139      	str	r1, [r7, #16]
 800cba8:	6178      	str	r0, [r7, #20]
 800cbaa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	1889      	adds	r1, r1, r2
 800cbb2:	60b9      	str	r1, [r7, #8]
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	eb43 0101 	adc.w	r1, r3, r1
 800cbba:	60f9      	str	r1, [r7, #12]
 800cbbc:	f04f 0200 	mov.w	r2, #0
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cbc8:	4621      	mov	r1, r4
 800cbca:	084a      	lsrs	r2, r1, #1
 800cbcc:	4629      	mov	r1, r5
 800cbce:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	104b      	asrs	r3, r1, #1
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	4619      	mov	r1, r3
 800cbda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cbde:	1814      	adds	r4, r2, r0
 800cbe0:	603c      	str	r4, [r7, #0]
 800cbe2:	414b      	adcs	r3, r1
 800cbe4:	607b      	str	r3, [r7, #4]
 800cbe6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cbea:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800cbee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	d009      	beq.n	800cc0a <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800cbf6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cbfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cbfe:	f7f3 ffab 	bl	8000b58 <__aeabi_ldivmod>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800cc0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800cc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800cc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800cc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800cc24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc26:	7852      	ldrb	r2, [r2, #1]
 800cc28:	0852      	lsrs	r2, r2, #1
 800cc2a:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800cc2c:	441a      	add	r2, r3
 800cc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800cc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800cc3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc3c:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800cc3e:	fb93 f2f2 	sdiv	r2, r3, r2
 800cc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800cc48:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3778      	adds	r7, #120	; 0x78
 800cc50:	46bd      	mov	sp, r7
 800cc52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc56 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b087      	sub	sp, #28
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3318      	adds	r3, #24
 800cc64:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800cc78:	029b      	lsls	r3, r3, #10
 800cc7a:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800cc82:	029b      	lsls	r3, r3, #10
 800cc84:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f040 8095 	bne.w	800cdc0 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800cc9c:	091b      	lsrs	r3, r3, #4
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ccaa:	f003 030f 	and.w	r3, r3, #15
 800ccae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800ccba:	091b      	lsrs	r3, r3, #4
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ccc8:	f003 030f 	and.w	r3, r3, #15
 800cccc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800ccd8:	091b      	lsrs	r3, r3, #4
 800ccda:	b2da      	uxtb	r2, r3
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800cce6:	f003 030f 	and.w	r3, r3, #15
 800ccea:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	da2c      	bge.n	800cd56 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800cd02:	091b      	lsrs	r3, r3, #4
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800cd10:	f003 030f 	and.w	r3, r3, #15
 800cd14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800cd20:	091b      	lsrs	r3, r3, #4
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800cd2e:	f003 030f 	and.w	r3, r3, #15
 800cd32:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800cd3e:	091b      	lsrs	r3, r3, #4
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800cd4c:	f003 030f 	and.w	r3, r3, #15
 800cd50:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	f340 80c2 	ble.w	800cee8 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800cd6a:	091b      	lsrs	r3, r3, #4
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800cd78:	f003 030f 	and.w	r3, r3, #15
 800cd7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800cd88:	091b      	lsrs	r3, r3, #4
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800cda6:	091b      	lsrs	r3, r3, #4
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800cdb4:	f003 030f 	and.w	r3, r3, #15
 800cdb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	731a      	strb	r2, [r3, #12]
 800cdbe:	e093      	b.n	800cee8 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800cdc6:	f003 030f 	and.w	r3, r3, #15
 800cdca:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800cdd6:	f003 030f 	and.w	r3, r3, #15
 800cdda:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800cde6:	091b      	lsrs	r3, r3, #4
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cdf4:	f003 030f 	and.w	r3, r3, #15
 800cdf8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800ce04:	091b      	lsrs	r3, r3, #4
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800ce12:	f003 030f 	and.w	r3, r3, #15
 800ce16:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	da2c      	bge.n	800ce82 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800ce2e:	091b      	lsrs	r3, r3, #4
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800ce3c:	f003 030f 	and.w	r3, r3, #15
 800ce40:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800ce4c:	091b      	lsrs	r3, r3, #4
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800ce5a:	f003 030f 	and.w	r3, r3, #15
 800ce5e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800ce6a:	091b      	lsrs	r3, r3, #4
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	dd2c      	ble.n	800cee8 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800ce94:	091b      	lsrs	r3, r3, #4
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800cea2:	f003 030f 	and.w	r3, r3, #15
 800cea6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800ceb2:	091b      	lsrs	r3, r3, #4
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800cec0:	f003 030f 	and.w	r3, r3, #15
 800cec4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800ced0:	091b      	lsrs	r3, r3, #4
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cee8:	2300      	movs	r3, #0
 800ceea:	75fb      	strb	r3, [r7, #23]
 800ceec:	e007      	b.n	800cefe <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	4413      	add	r3, r2
 800cef4:	2201      	movs	r2, #1
 800cef6:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	3301      	adds	r3, #1
 800cefc:	75fb      	strb	r3, [r7, #23]
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	2b05      	cmp	r3, #5
 800cf02:	d9f4      	bls.n	800ceee <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	371c      	adds	r7, #28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800cf12:	b590      	push	{r4, r7, lr}
 800cf14:	b093      	sub	sp, #76	; 0x4c
 800cf16:	af04      	add	r7, sp, #16
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
 800cf1e:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3318      	adds	r3, #24
 800cf2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800cf52:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800cf5c:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800cf64:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800cf6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800cf70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf74:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800cf76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	785b      	ldrb	r3, [r3, #1]
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d006      	beq.n	800cf92 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d002      	beq.n	800cf92 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800cf8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cf90:	e0ec      	b.n	800d16c <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800cf92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d102      	bne.n	800cf9e <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800cf98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cf9c:	e0e6      	b.n	800d16c <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800cfa4:	e0d9      	b.n	800d15a <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cfa6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	214c      	movs	r1, #76	; 0x4c
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	335e      	adds	r3, #94	; 0x5e
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d00b      	beq.n	800cfd4 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800cfbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	214c      	movs	r1, #76	; 0x4c
 800cfc4:	fb01 f303 	mul.w	r3, r1, r3
 800cfc8:	4413      	add	r3, r2
 800cfca:	335e      	adds	r3, #94	; 0x5e
 800cfcc:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cfce:	2b13      	cmp	r3, #19
 800cfd0:	f040 80bd 	bne.w	800d14e <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	795b      	ldrb	r3, [r3, #5]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10a      	bne.n	800cff2 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800cfdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	214c      	movs	r1, #76	; 0x4c
 800cfe4:	fb01 f303 	mul.w	r3, r1, r3
 800cfe8:	4413      	add	r3, r2
 800cfea:	335e      	adds	r3, #94	; 0x5e
 800cfec:	2217      	movs	r2, #23
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	e009      	b.n	800d006 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800cff2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	214c      	movs	r1, #76	; 0x4c
 800cffa:	fb01 f303 	mul.w	r3, r1, r3
 800cffe:	4413      	add	r3, r2
 800d000:	335e      	adds	r3, #94	; 0x5e
 800d002:	2207      	movs	r2, #7
 800d004:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800d006:	2300      	movs	r3, #0
 800d008:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d00c:	e097      	b.n	800d13e <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800d00e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	214c      	movs	r1, #76	; 0x4c
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	3354      	adds	r3, #84	; 0x54
 800d01e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800d020:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	4613      	mov	r3, r2
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4403      	add	r3, r0
 800d030:	3310      	adds	r3, #16
 800d032:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800d034:	4299      	cmp	r1, r3
 800d036:	d915      	bls.n	800d064 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800d038:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	214c      	movs	r1, #76	; 0x4c
 800d040:	fb01 f303 	mul.w	r3, r1, r3
 800d044:	4413      	add	r3, r2
 800d046:	3354      	adds	r3, #84	; 0x54
 800d048:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800d04a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	4613      	mov	r3, r2
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4403      	add	r3, r0
 800d05a:	3310      	adds	r3, #16
 800d05c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800d05e:	1acb      	subs	r3, r1, r3
 800d060:	867b      	strh	r3, [r7, #50]	; 0x32
 800d062:	e014      	b.n	800d08e <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800d064:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d068:	6879      	ldr	r1, [r7, #4]
 800d06a:	4613      	mov	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	440b      	add	r3, r1
 800d074:	3310      	adds	r3, #16
 800d076:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800d078:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	204c      	movs	r0, #76	; 0x4c
 800d080:	fb00 f303 	mul.w	r3, r0, r3
 800d084:	440b      	add	r3, r1
 800d086:	3354      	adds	r3, #84	; 0x54
 800d088:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800d08e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d092:	429a      	cmp	r2, r3
 800d094:	d24e      	bcs.n	800d134 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800d096:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d125      	bne.n	800d0ea <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800d09e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800d0b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800d0b4:	224c      	movs	r2, #76	; 0x4c
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	3310      	adds	r3, #16
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	4413      	add	r3, r2
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800d0c4:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800d0c8:	f107 0217 	add.w	r2, r7, #23
 800d0cc:	9203      	str	r2, [sp, #12]
 800d0ce:	f107 021c 	add.w	r2, r7, #28
 800d0d2:	9202      	str	r2, [sp, #8]
 800d0d4:	f107 0218 	add.w	r2, r7, #24
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	4623      	mov	r3, r4
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	f000 f848 	bl	800d174 <VL53L1_hist_events_consistency_check>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800d0ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d115      	bne.n	800d11e <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800d0f4:	2b09      	cmp	r3, #9
 800d0f6:	d112      	bne.n	800d11e <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800d0f8:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800d0fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800d100:	224c      	movs	r2, #76	; 0x4c
 800d102:	fb02 f303 	mul.w	r3, r2, r3
 800d106:	3310      	adds	r3, #16
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	4413      	add	r3, r2
 800d10c:	3304      	adds	r3, #4
 800d10e:	f107 0217 	add.w	r2, r7, #23
 800d112:	4619      	mov	r1, r3
 800d114:	f000 fb44 	bl	800d7a0 <VL53L1_hist_merged_pulse_check>
 800d118:	4603      	mov	r3, r0
 800d11a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800d11e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d122:	7df8      	ldrb	r0, [r7, #23]
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	214c      	movs	r1, #76	; 0x4c
 800d128:	fb01 f303 	mul.w	r3, r1, r3
 800d12c:	4413      	add	r3, r2
 800d12e:	335e      	adds	r3, #94	; 0x5e
 800d130:	4602      	mov	r2, r0
 800d132:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800d134:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d138:	3301      	adds	r3, #1
 800d13a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	795b      	ldrb	r3, [r3, #5]
 800d142:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d146:	429a      	cmp	r2, r3
 800d148:	f4ff af61 	bcc.w	800d00e <VL53L1_hist_phase_consistency_check+0xfc>
 800d14c:	e000      	b.n	800d150 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800d14e:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800d150:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d154:	3301      	adds	r3, #1
 800d156:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	7c9b      	ldrb	r3, [r3, #18]
 800d15e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d162:	429a      	cmp	r2, r3
 800d164:	f4ff af1f 	bcc.w	800cfa6 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800d168:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	373c      	adds	r7, #60	; 0x3c
 800d170:	46bd      	mov	sp, r7
 800d172:	bd90      	pop	{r4, r7, pc}

0800d174 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800d174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d178:	b0d4      	sub	sp, #336	; 0x150
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d180:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d184:	4603      	mov	r3, r0
 800d186:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800d18a:	460b      	mov	r3, r1
 800d18c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d190:	2300      	movs	r3, #0
 800d192:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800d196:	f04f 0200 	mov.w	r2, #0
 800d19a:	f04f 0300 	mov.w	r3, #0
 800d19e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800d1a2:	f04f 0200 	mov.w	r2, #0
 800d1a6:	f04f 0300 	mov.w	r3, #0
 800d1aa:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800d1ae:	f04f 0200 	mov.w	r2, #0
 800d1b2:	f04f 0300 	mov.w	r3, #0
 800d1b6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800d1d2:	f04f 0200 	mov.w	r2, #0
 800d1d6:	f04f 0300 	mov.w	r3, #0
 800d1da:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800d1de:	f04f 0200 	mov.w	r2, #0
 800d1e2:	f04f 0300 	mov.w	r3, #0
 800d1e6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800d1ea:	f04f 0200 	mov.w	r2, #0
 800d1ee:	f04f 0300 	mov.w	r3, #0
 800d1f2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800d202:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800d206:	2b00      	cmp	r3, #0
 800d208:	d106      	bne.n	800d218 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d20a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d20e:	2209      	movs	r2, #9
 800d210:	701a      	strb	r2, [r3, #0]
		return status;
 800d212:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800d216:	e2bd      	b.n	800d794 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800d218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	2200      	movs	r2, #0
 800d220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d224:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d228:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d22c:	460b      	mov	r3, r1
 800d22e:	3301      	adds	r3, #1
 800d230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d234:	4613      	mov	r3, r2
 800d236:	f143 0300 	adc.w	r3, r3, #0
 800d23a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d23e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d242:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800d246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d24a:	885b      	ldrh	r3, [r3, #2]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	2200      	movs	r2, #0
 800d250:	469a      	mov	sl, r3
 800d252:	4693      	mov	fp, r2
 800d254:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800d258:	fb0a f203 	mul.w	r2, sl, r3
 800d25c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d260:	fb0b f303 	mul.w	r3, fp, r3
 800d264:	441a      	add	r2, r3
 800d266:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d26a:	fba3 450a 	umull	r4, r5, r3, sl
 800d26e:	1953      	adds	r3, r2, r5
 800d270:	461d      	mov	r5, r3
 800d272:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800d276:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800d27a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	2200      	movs	r2, #0
 800d282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d286:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d28a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d28e:	460b      	mov	r3, r1
 800d290:	3301      	adds	r3, #1
 800d292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d296:	4613      	mov	r3, r2
 800d298:	f143 0300 	adc.w	r3, r3, #0
 800d29c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2a0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d2a4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800d2a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d2ac:	8adb      	ldrh	r3, [r3, #22]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2b6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d2ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2be:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	fb02 f203 	mul.w	r2, r2, r3
 800d2c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	fb01 f303 	mul.w	r3, r1, r3
 800d2d2:	441a      	add	r2, r3
 800d2d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2d8:	4621      	mov	r1, r4
 800d2da:	fba3 8901 	umull	r8, r9, r3, r1
 800d2de:	eb02 0309 	add.w	r3, r2, r9
 800d2e2:	4699      	mov	r9, r3
 800d2e4:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800d2e8:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800d2ec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2f0:	f04f 0000 	mov.w	r0, #0
 800d2f4:	f04f 0100 	mov.w	r1, #0
 800d2f8:	0319      	lsls	r1, r3, #12
 800d2fa:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800d2fe:	0310      	lsls	r0, r2, #12
 800d300:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800d304:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d308:	0fd9      	lsrs	r1, r3, #31
 800d30a:	2000      	movs	r0, #0
 800d30c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d310:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800d314:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d318:	4621      	mov	r1, r4
 800d31a:	1889      	adds	r1, r1, r2
 800d31c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d320:	4629      	mov	r1, r5
 800d322:	eb43 0101 	adc.w	r1, r3, r1
 800d326:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800d32a:	f04f 0200 	mov.w	r2, #0
 800d32e:	f04f 0300 	mov.w	r3, #0
 800d332:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d336:	4621      	mov	r1, r4
 800d338:	084a      	lsrs	r2, r1, #1
 800d33a:	4629      	mov	r1, r5
 800d33c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800d340:	4629      	mov	r1, r5
 800d342:	104b      	asrs	r3, r1, #1
 800d344:	4610      	mov	r0, r2
 800d346:	4619      	mov	r1, r3
 800d348:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d34c:	1814      	adds	r4, r2, r0
 800d34e:	67bc      	str	r4, [r7, #120]	; 0x78
 800d350:	414b      	adcs	r3, r1
 800d352:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d354:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d358:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800d35c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d360:	4313      	orrs	r3, r2
 800d362:	d009      	beq.n	800d378 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800d364:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d368:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d36c:	f7f3 fbf4 	bl	8000b58 <__aeabi_ldivmod>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800d378:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d37c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d380:	fb03 f102 	mul.w	r1, r3, r2
 800d384:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d388:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d38c:	fb02 f303 	mul.w	r3, r2, r3
 800d390:	18ca      	adds	r2, r1, r3
 800d392:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d396:	fba3 1303 	umull	r1, r3, r3, r3
 800d39a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d39e:	460b      	mov	r3, r1
 800d3a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d3a8:	18d3      	adds	r3, r2, r3
 800d3aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d3ae:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d3b2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800d3b6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800d3ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d3be:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d3c2:	6739      	str	r1, [r7, #112]	; 0x70
 800d3c4:	f143 0300 	adc.w	r3, r3, #0
 800d3c8:	677b      	str	r3, [r7, #116]	; 0x74
 800d3ca:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d3ce:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800d3d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	da08      	bge.n	800d3ec <VL53L1_hist_events_consistency_check+0x278>
 800d3da:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d3de:	1851      	adds	r1, r2, r1
 800d3e0:	66b9      	str	r1, [r7, #104]	; 0x68
 800d3e2:	f143 0300 	adc.w	r3, r3, #0
 800d3e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d3ec:	f04f 0000 	mov.w	r0, #0
 800d3f0:	f04f 0100 	mov.w	r1, #0
 800d3f4:	0b10      	lsrs	r0, r2, #12
 800d3f6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d3fa:	1319      	asrs	r1, r3, #12
 800d3fc:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800d400:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d406:	2200      	movs	r2, #0
 800d408:	663b      	str	r3, [r7, #96]	; 0x60
 800d40a:	667a      	str	r2, [r7, #100]	; 0x64
 800d40c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d410:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800d414:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41a:	2200      	movs	r2, #0
 800d41c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d420:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d424:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d428:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d42c:	4621      	mov	r1, r4
 800d42e:	1a51      	subs	r1, r2, r1
 800d430:	65b9      	str	r1, [r7, #88]	; 0x58
 800d432:	4629      	mov	r1, r5
 800d434:	eb63 0301 	sbc.w	r3, r3, r1
 800d438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d43a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d43e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800d442:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d446:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d44a:	fb03 f102 	mul.w	r1, r3, r2
 800d44e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	4419      	add	r1, r3
 800d45c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d460:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d464:	fba2 2303 	umull	r2, r3, r2, r3
 800d468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d46c:	4613      	mov	r3, r2
 800d46e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d476:	18cb      	adds	r3, r1, r3
 800d478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d47c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d480:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800d484:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800d488:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d48c:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d490:	6539      	str	r1, [r7, #80]	; 0x50
 800d492:	f143 0300 	adc.w	r3, r3, #0
 800d496:	657b      	str	r3, [r7, #84]	; 0x54
 800d498:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d49c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800d4a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	da08      	bge.n	800d4ba <VL53L1_hist_events_consistency_check+0x346>
 800d4a8:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d4ac:	1851      	adds	r1, r2, r1
 800d4ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800d4b0:	f143 0300 	adc.w	r3, r3, #0
 800d4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d4ba:	f04f 0000 	mov.w	r0, #0
 800d4be:	f04f 0100 	mov.w	r1, #0
 800d4c2:	0b10      	lsrs	r0, r2, #12
 800d4c4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d4c8:	1319      	asrs	r1, r3, #12
 800d4ca:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800d4ce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d4d2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800d4d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d4e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d4e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d4ea:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	fb02 f203 	mul.w	r2, r2, r3
 800d4f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	fb01 f303 	mul.w	r3, r1, r3
 800d4fe:	441a      	add	r2, r3
 800d500:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d504:	4621      	mov	r1, r4
 800d506:	fba3 1301 	umull	r1, r3, r3, r1
 800d50a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d50e:	460b      	mov	r3, r1
 800d510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d518:	18d3      	adds	r3, r2, r3
 800d51a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d51e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d522:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d526:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800d52a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d52e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d532:	6439      	str	r1, [r7, #64]	; 0x40
 800d534:	f143 0300 	adc.w	r3, r3, #0
 800d538:	647b      	str	r3, [r7, #68]	; 0x44
 800d53a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d53e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800d542:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d546:	2b00      	cmp	r3, #0
 800d548:	da08      	bge.n	800d55c <VL53L1_hist_events_consistency_check+0x3e8>
 800d54a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d54e:	1851      	adds	r1, r2, r1
 800d550:	63b9      	str	r1, [r7, #56]	; 0x38
 800d552:	f143 0300 	adc.w	r3, r3, #0
 800d556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d55c:	f04f 0000 	mov.w	r0, #0
 800d560:	f04f 0100 	mov.w	r1, #0
 800d564:	0b10      	lsrs	r0, r2, #12
 800d566:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d56a:	1319      	asrs	r1, r3, #12
 800d56c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800d570:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d574:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800d578:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	2200      	movs	r2, #0
 800d580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d584:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d58c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d590:	4622      	mov	r2, r4
 800d592:	fb02 f203 	mul.w	r2, r2, r3
 800d596:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d59a:	4629      	mov	r1, r5
 800d59c:	fb01 f303 	mul.w	r3, r1, r3
 800d5a0:	441a      	add	r2, r3
 800d5a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	fba3 1301 	umull	r1, r3, r3, r1
 800d5ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5ba:	18d3      	adds	r3, r2, r3
 800d5bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5c0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d5c4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800d5c8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800d5cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d5d0:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d5d4:	6339      	str	r1, [r7, #48]	; 0x30
 800d5d6:	f143 0300 	adc.w	r3, r3, #0
 800d5da:	637b      	str	r3, [r7, #52]	; 0x34
 800d5dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d5e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800d5e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	2900      	cmp	r1, #0
 800d5ee:	da08      	bge.n	800d602 <VL53L1_hist_events_consistency_check+0x48e>
 800d5f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 800d5f4:	18c3      	adds	r3, r0, r3
 800d5f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5f8:	f141 0300 	adc.w	r3, r1, #0
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d602:	f04f 0200 	mov.w	r2, #0
 800d606:	f04f 0300 	mov.w	r3, #0
 800d60a:	0b02      	lsrs	r2, r0, #12
 800d60c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d610:	130b      	asrs	r3, r1, #12
 800d612:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800d616:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d61a:	1c91      	adds	r1, r2, #2
 800d61c:	6239      	str	r1, [r7, #32]
 800d61e:	f143 0300 	adc.w	r3, r3, #0
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
 800d624:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d628:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800d62c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d630:	2b00      	cmp	r3, #0
 800d632:	da06      	bge.n	800d642 <VL53L1_hist_events_consistency_check+0x4ce>
 800d634:	1cd1      	adds	r1, r2, #3
 800d636:	61b9      	str	r1, [r7, #24]
 800d638:	f143 0300 	adc.w	r3, r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]
 800d63e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d642:	f04f 0000 	mov.w	r0, #0
 800d646:	f04f 0100 	mov.w	r1, #0
 800d64a:	0890      	lsrs	r0, r2, #2
 800d64c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d650:	1099      	asrs	r1, r3, #2
 800d652:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800d656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d65a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800d65c:	2200      	movs	r2, #0
 800d65e:	613b      	str	r3, [r7, #16]
 800d660:	617a      	str	r2, [r7, #20]
 800d662:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d666:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800d66a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d66e:	1c91      	adds	r1, r2, #2
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	f143 0300 	adc.w	r3, r3, #0
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d67c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800d680:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d684:	2b00      	cmp	r3, #0
 800d686:	da06      	bge.n	800d696 <VL53L1_hist_events_consistency_check+0x522>
 800d688:	1cd1      	adds	r1, r2, #3
 800d68a:	6039      	str	r1, [r7, #0]
 800d68c:	f143 0300 	adc.w	r3, r3, #0
 800d690:	607b      	str	r3, [r7, #4]
 800d692:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d696:	f04f 0000 	mov.w	r0, #0
 800d69a:	f04f 0100 	mov.w	r1, #0
 800d69e:	0890      	lsrs	r0, r2, #2
 800d6a0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d6a4:	1099      	asrs	r1, r3, #2
 800d6a6:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d6aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6ae:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800d6b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d6b4:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800d6b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800d6ba:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800d6bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800d6c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f002 f8c6 	bl	800f85e <VL53L1_isqrt>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	461a      	mov	r2, r3
	*pevents_tolerance =
 800d6d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6da:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800d6dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800d6e6:	fb03 f202 	mul.w	r2, r3, r2
 800d6ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6ee:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800d6f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f103 0220 	add.w	r2, r3, #32
 800d6fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6fe:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800d700:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	da00      	bge.n	800d70c <VL53L1_hist_events_consistency_check+0x598>
 800d70a:	333f      	adds	r3, #63	; 0x3f
 800d70c:	119b      	asrs	r3, r3, #6
 800d70e:	461a      	mov	r2, r3
 800d710:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d714:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800d716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800d720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d72c:	1a9b      	subs	r3, r3, r2
 800d72e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800d732:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d736:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d73a:	429a      	cmp	r2, r3
 800d73c:	da08      	bge.n	800d750 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800d73e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d746:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d748:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e007      	b.n	800d760 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800d750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d754:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d758:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d75a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d75e:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800d760:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	dd0b      	ble.n	800d788 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800d770:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d774:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800d776:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d204      	bcs.n	800d788 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800d77e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d782:	2214      	movs	r2, #20
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	e003      	b.n	800d790 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d788:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d78c:	2209      	movs	r2, #9
 800d78e:	701a      	strb	r2, [r3, #0]





	return status;
 800d790:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800d794:	4618      	mov	r0, r3
 800d796:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800d79a:	46bd      	mov	sp, r7
 800d79c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d7a0 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	dd0b      	ble.n	800d7de <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	b29b      	uxth	r3, r3
		delta_mm =
 800d7da:	82fb      	strh	r3, [r7, #22]
 800d7dc:	e00a      	b.n	800d7f4 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	b29b      	uxth	r3, r3
		delta_mm =
 800d7f2:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800d7f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dd09      	ble.n	800d810 <VL53L1_hist_merged_pulse_check+0x70>
 800d7fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d804:	429a      	cmp	r2, r3
 800d806:	dd03      	ble.n	800d810 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2216      	movs	r2, #22
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	e002      	b.n	800d816 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2209      	movs	r2, #9
 800d814:	701a      	strb	r2, [r3, #0]

	return status;
 800d816:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	371c      	adds	r7, #28
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b08e      	sub	sp, #56	; 0x38
 800d82a:	af04      	add	r7, sp, #16
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d834:	2300      	movs	r3, #0
 800d836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3318      	adds	r3, #24
 800d83e:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800d84e:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800d856:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d85e:	2b09      	cmp	r3, #9
 800d860:	d009      	beq.n	800d876 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d868:	2b13      	cmp	r3, #19
 800d86a:	d004      	beq.n	800d876 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d872:	2b14      	cmp	r3, #20
 800d874:	d129      	bne.n	800d8ca <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d009      	beq.n	800d894 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d886:	2b13      	cmp	r3, #19
 800d888:	d004      	beq.n	800d894 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d890:	2b14      	cmp	r3, #20
 800d892:	d11a      	bne.n	800d8ca <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2209      	movs	r2, #9
 800d898:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800d8a6:	8bb9      	ldrh	r1, [r7, #28]
 800d8a8:	7ff8      	ldrb	r0, [r7, #31]
 800d8aa:	9303      	str	r3, [sp, #12]
 800d8ac:	f107 0318 	add.w	r3, r7, #24
 800d8b0:	9302      	str	r3, [sp, #8]
 800d8b2:	f107 0314 	add.w	r3, r7, #20
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	f7ff fc58 	bl	800d174 <VL53L1_hist_events_consistency_check>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800d8ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3728      	adds	r7, #40	; 0x28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b088      	sub	sp, #32
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d019      	beq.n	800d936 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d908:	4618      	mov	r0, r3
 800d90a:	f002 f90f 	bl	800fb2c <VL53L1_calc_pll_period_mm>
 800d90e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	fb02 f303 	mul.w	r3, r2, r3
 800d922:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d92a:	0bdb      	lsrs	r3, r3, #15
 800d92c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	b21a      	sxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d936:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3720      	adds	r7, #32
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800d942:	b590      	push	{r4, r7, lr}
 800d944:	b08d      	sub	sp, #52	; 0x34
 800d946:	af04      	add	r7, sp, #16
 800d948:	4604      	mov	r4, r0
 800d94a:	4608      	mov	r0, r1
 800d94c:	4611      	mov	r1, r2
 800d94e:	461a      	mov	r2, r3
 800d950:	4623      	mov	r3, r4
 800d952:	80fb      	strh	r3, [r7, #6]
 800d954:	4603      	mov	r3, r0
 800d956:	80bb      	strh	r3, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
 800d95c:	4613      	mov	r3, r2
 800d95e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800d964:	2300      	movs	r3, #0
 800d966:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800d980:	78b9      	ldrb	r1, [r7, #2]
 800d982:	78f8      	ldrb	r0, [r7, #3]
 800d984:	f107 030c 	add.w	r3, r7, #12
 800d988:	9303      	str	r3, [sp, #12]
 800d98a:	f107 030e 	add.w	r3, r7, #14
 800d98e:	9302      	str	r3, [sp, #8]
 800d990:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d994:	9301      	str	r3, [sp, #4]
 800d996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	23ff      	movs	r3, #255	; 0xff
 800d99c:	22c7      	movs	r2, #199	; 0xc7
 800d99e:	f000 fa03 	bl	800dda8 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800d9a2:	89fb      	ldrh	r3, [r7, #14]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d050      	beq.n	800da4a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800d9a8:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d04d      	beq.n	800da4a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800d9ae:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800d9b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d9b6:	78b9      	ldrb	r1, [r7, #2]
 800d9b8:	78f8      	ldrb	r0, [r7, #3]
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	9303      	str	r3, [sp, #12]
 800d9c0:	f107 030a 	add.w	r3, r7, #10
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	f000 f9e9 	bl	800dda8 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800d9da:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800d9dc:	897b      	ldrh	r3, [r7, #10]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	fb02 f303 	mul.w	r3, r2, r3
 800d9e6:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f2:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800d9f8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800d9fa:	893b      	ldrh	r3, [r7, #8]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	fb02 f303 	mul.w	r3, r2, r3
 800da04:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800da06:	89bb      	ldrh	r3, [r7, #12]
 800da08:	461a      	mov	r2, r3
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da10:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800da12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	fb02 f303 	mul.w	r3, r2, r3
 800da1c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800da1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	fb02 f303 	mul.w	r3, r2, r3
 800da28:	69fa      	ldr	r2, [r7, #28]
 800da2a:	4413      	add	r3, r2
 800da2c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800da2e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800da30:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800da32:	4413      	add	r3, r2
 800da34:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d008      	beq.n	800da4e <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	009a      	lsls	r2, r3, #2
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	fb92 f3f3 	sdiv	r3, r2, r3
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	e002      	b.n	800da50 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800da4a:	bf00      	nop
 800da4c:	e000      	b.n	800da50 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800da4e:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	b21a      	sxth	r2, r3
 800da54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da56:	801a      	strh	r2, [r3, #0]

}
 800da58:	bf00      	nop
 800da5a:	3724      	adds	r7, #36	; 0x24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}

0800da60 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	607a      	str	r2, [r7, #4]
 800da6a:	603b      	str	r3, [r7, #0]
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	08db      	lsrs	r3, r3, #3
 800da74:	b2da      	uxtb	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	f003 0307 	and.w	r3, r3, #7
 800da80:	b2da      	uxtb	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	2301      	movs	r3, #1
 800da8e:	4093      	lsls	r3, r2
 800da90:	b2da      	uxtb	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	701a      	strb	r2, [r3, #0]

}
 800da96:	bf00      	nop
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b083      	sub	sp, #12
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	4603      	mov	r3, r0
 800daaa:	603a      	str	r2, [r7, #0]
 800daac:	71fb      	strb	r3, [r7, #7]
 800daae:	460b      	mov	r3, r1
 800dab0:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	2b07      	cmp	r3, #7
 800dab6:	d90a      	bls.n	800dace <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800dab8:	79bb      	ldrb	r3, [r7, #6]
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	3b71      	subs	r3, #113	; 0x71
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800dacc:	e00a      	b.n	800dae4 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800dace:	79bb      	ldrb	r3, [r7, #6]
 800dad0:	f1c3 030f 	rsb	r3, r3, #15
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	4413      	add	r3, r2
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	701a      	strb	r2, [r3, #0]
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
 800db00:	091b      	lsrs	r3, r3, #4
 800db02:	b2da      	uxtb	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800db08:	7bfb      	ldrb	r3, [r7, #15]
 800db0a:	f003 030f 	and.w	r3, r3, #15
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	701a      	strb	r2, [r3, #0]

}
 800db14:	bf00      	nop
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	603a      	str	r2, [r7, #0]
 800db2a:	71fb      	strb	r3, [r7, #7]
 800db2c:	460b      	mov	r3, r1
 800db2e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800db30:	79bb      	ldrb	r3, [r7, #6]
 800db32:	011b      	lsls	r3, r3, #4
 800db34:	b2da      	uxtb	r2, r3
 800db36:	79fb      	ldrb	r3, [r7, #7]
 800db38:	4413      	add	r3, r2
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	701a      	strb	r2, [r3, #0]

}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60ba      	str	r2, [r7, #8]
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
 800db5a:	460b      	mov	r3, r1
 800db5c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800db62:	2300      	movs	r3, #0
 800db64:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800db6e:	f107 0217 	add.w	r2, r7, #23
 800db72:	f107 0116 	add.w	r1, r7, #22
 800db76:	7bfb      	ldrb	r3, [r7, #15]
 800db78:	4618      	mov	r0, r3
 800db7a:	f002 fa51 	bl	8010020 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800db7e:	f107 0214 	add.w	r2, r7, #20
 800db82:	f107 0115 	add.w	r1, r7, #21
 800db86:	7bbb      	ldrb	r3, [r7, #14]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff ffb1 	bl	800daf0 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800db8e:	7dfb      	ldrb	r3, [r7, #23]
 800db90:	b29a      	uxth	r2, r3
 800db92:	7d7b      	ldrb	r3, [r7, #21]
 800db94:	3301      	adds	r3, #1
 800db96:	0fd9      	lsrs	r1, r3, #31
 800db98:	440b      	add	r3, r1
 800db9a:	105b      	asrs	r3, r3, #1
 800db9c:	425b      	negs	r3, r3
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	4413      	add	r3, r2
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	b21a      	sxth	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	da02      	bge.n	800dbba <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	7d7b      	ldrb	r3, [r7, #21]
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	4413      	add	r3, r2
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	b21a      	sxth	r2, r3
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbd6:	2b0f      	cmp	r3, #15
 800dbd8:	dd02      	ble.n	800dbe0 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	220f      	movs	r2, #15
 800dbde:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800dbe0:	7dbb      	ldrb	r3, [r7, #22]
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	7d3b      	ldrb	r3, [r7, #20]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	0fd9      	lsrs	r1, r3, #31
 800dbea:	440b      	add	r3, r1
 800dbec:	105b      	asrs	r3, r3, #1
 800dbee:	425b      	negs	r3, r3
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	4413      	add	r3, r2
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	b21a      	sxth	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	da02      	bge.n	800dc0c <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	7d3b      	ldrb	r3, [r7, #20]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	4413      	add	r3, r2
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	b21a      	sxth	r2, r3
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc28:	2b0f      	cmp	r3, #15
 800dc2a:	dd02      	ble.n	800dc32 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	220f      	movs	r2, #15
 800dc30:	801a      	strh	r2, [r3, #0]
}
 800dc32:	bf00      	nop
 800dc34:	3718      	adds	r7, #24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800dc3a:	b480      	push	{r7}
 800dc3c:	b085      	sub	sp, #20
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	4603      	mov	r3, r0
 800dc42:	460a      	mov	r2, r1
 800dc44:	71fb      	strb	r3, [r7, #7]
 800dc46:	4613      	mov	r3, r2
 800dc48:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	f003 0303 	and.w	r3, r3, #3
 800dc54:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800dc56:	79bb      	ldrb	r3, [r7, #6]
 800dc58:	f003 0303 	and.w	r3, r3, #3
 800dc5c:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <VL53L1_is_aperture_location+0x34>
 800dc64:	7b7b      	ldrb	r3, [r7, #13]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d101      	bne.n	800dc6e <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d104      	bne.n	800dc7e <VL53L1_is_aperture_location+0x44>
 800dc74:	7b7b      	ldrb	r3, [r7, #13]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800dc8c:	b590      	push	{r4, r7, lr}
 800dc8e:	b08b      	sub	sp, #44	; 0x2c
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	603a      	str	r2, [r7, #0]
 800dc94:	461a      	mov	r2, r3
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	71bb      	strb	r3, [r7, #6]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800dcce:	f107 0416 	add.w	r4, r7, #22
 800dcd2:	f107 0218 	add.w	r2, r7, #24
 800dcd6:	79b9      	ldrb	r1, [r7, #6]
 800dcd8:	79f8      	ldrb	r0, [r7, #7]
 800dcda:	f107 0312 	add.w	r3, r7, #18
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	f107 0314 	add.w	r3, r7, #20
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	4623      	mov	r3, r4
 800dce8:	f7ff ff30 	bl	800db4c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	2200      	movs	r2, #0
 800dcf0:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dcf2:	8afb      	ldrh	r3, [r7, #22]
 800dcf4:	83bb      	strh	r3, [r7, #28]
 800dcf6:	e04c      	b.n	800dd92 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dcf8:	8b3b      	ldrh	r3, [r7, #24]
 800dcfa:	83fb      	strh	r3, [r7, #30]
 800dcfc:	e03d      	b.n	800dd7a <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800dcfe:	8bbb      	ldrh	r3, [r7, #28]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	8bfa      	ldrh	r2, [r7, #30]
 800dd04:	b2d1      	uxtb	r1, r2
 800dd06:	f107 0211 	add.w	r2, r7, #17
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7ff fec9 	bl	800daa2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800dd10:	7c78      	ldrb	r0, [r7, #17]
 800dd12:	f107 030e 	add.w	r3, r7, #14
 800dd16:	f107 020f 	add.w	r2, r7, #15
 800dd1a:	f107 0110 	add.w	r1, r7, #16
 800dd1e:	f7ff fe9f 	bl	800da60 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800dd22:	7c3b      	ldrb	r3, [r7, #16]
 800dd24:	461a      	mov	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	4413      	add	r3, r2
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
 800dd2e:	4013      	ands	r3, r2
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d01b      	beq.n	800dd6e <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800dd36:	8bbb      	ldrh	r3, [r7, #28]
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	8bfa      	ldrh	r2, [r7, #30]
 800dd3c:	b2d2      	uxtb	r2, r2
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff ff7a 	bl	800dc3a <VL53L1_is_aperture_location>
 800dd46:	4603      	mov	r3, r0
 800dd48:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800dd4a:	7efb      	ldrb	r3, [r7, #27]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	881a      	ldrh	r2, [r3, #0]
 800dd54:	88bb      	ldrh	r3, [r7, #4]
 800dd56:	4413      	add	r3, r2
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	801a      	strh	r2, [r3, #0]
 800dd5e:	e006      	b.n	800dd6e <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800dd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dd6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	3301      	adds	r3, #1
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	83fb      	strh	r3, [r7, #30]
 800dd7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd7e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	ddbb      	ble.n	800dcfe <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dd86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	83bb      	strh	r3, [r7, #28]
 800dd92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	ddac      	ble.n	800dcf8 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800dd9e:	bf00      	nop
 800dda0:	bf00      	nop
 800dda2:	3724      	adds	r7, #36	; 0x24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}

0800dda8 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b08d      	sub	sp, #52	; 0x34
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4623      	mov	r3, r4
 800ddb8:	71fb      	strb	r3, [r7, #7]
 800ddba:	4603      	mov	r3, r0
 800ddbc:	71bb      	strb	r3, [r7, #6]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	717b      	strb	r3, [r7, #5]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800de08:	f107 041c 	add.w	r4, r7, #28
 800de0c:	f107 021e 	add.w	r2, r7, #30
 800de10:	79b9      	ldrb	r1, [r7, #6]
 800de12:	79f8      	ldrb	r0, [r7, #7]
 800de14:	f107 0318 	add.w	r3, r7, #24
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	f107 031a 	add.w	r3, r7, #26
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	4623      	mov	r3, r4
 800de22:	f7ff fe93 	bl	800db4c <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800de26:	f107 0414 	add.w	r4, r7, #20
 800de2a:	f107 0216 	add.w	r2, r7, #22
 800de2e:	7939      	ldrb	r1, [r7, #4]
 800de30:	7978      	ldrb	r0, [r7, #5]
 800de32:	f107 0310 	add.w	r3, r7, #16
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	f107 0312 	add.w	r3, r7, #18
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	4623      	mov	r3, r4
 800de40:	f7ff fe84 	bl	800db4c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800de44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de46:	2200      	movs	r2, #0
 800de48:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800de4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de4c:	2200      	movs	r2, #0
 800de4e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800de50:	8abb      	ldrh	r3, [r7, #20]
 800de52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de54:	e06c      	b.n	800df30 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800de56:	8afb      	ldrh	r3, [r7, #22]
 800de58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800de5a:	e05d      	b.n	800df18 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800de5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de62:	b2d1      	uxtb	r1, r2
 800de64:	f107 020f 	add.w	r2, r7, #15
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fe1a 	bl	800daa2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800de6e:	7bf8      	ldrb	r0, [r7, #15]
 800de70:	f107 030c 	add.w	r3, r7, #12
 800de74:	f107 020d 	add.w	r2, r7, #13
 800de78:	f107 010e 	add.w	r1, r7, #14
 800de7c:	f7ff fdf0 	bl	800da60 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	461a      	mov	r2, r3
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	4413      	add	r3, r2
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	7b3b      	ldrb	r3, [r7, #12]
 800de8c:	4013      	ands	r3, r2
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b00      	cmp	r3, #0
 800de92:	d03b      	beq.n	800df0c <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800de94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de96:	b2db      	uxtb	r3, r3
 800de98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff fecb 	bl	800dc3a <VL53L1_is_aperture_location>
 800dea4:	4603      	mov	r3, r0
 800dea6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800deaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800deb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800deb4:	847b      	strh	r3, [r7, #34]	; 0x22
 800deb6:	e002      	b.n	800debe <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800deb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800debc:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800debe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dec2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dec6:	429a      	cmp	r2, r3
 800dec8:	db19      	blt.n	800defe <VL53L1_calc_mm_effective_spads+0x156>
 800deca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dece:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ded2:	429a      	cmp	r2, r3
 800ded4:	dc13      	bgt.n	800defe <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ded6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800deda:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800dede:	429a      	cmp	r2, r3
 800dee0:	db0d      	blt.n	800defe <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800dee2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800dee6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800deea:	429a      	cmp	r2, r3
 800deec:	dc07      	bgt.n	800defe <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800deee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def0:	881a      	ldrh	r2, [r3, #0]
 800def2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800def4:	4413      	add	r3, r2
 800def6:	b29a      	uxth	r2, r3
 800def8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800defa:	801a      	strh	r2, [r3, #0]
 800defc:	e006      	b.n	800df0c <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800defe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df00:	881a      	ldrh	r2, [r3, #0]
 800df02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df04:	4413      	add	r3, r2
 800df06:	b29a      	uxth	r2, r3
 800df08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df0a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800df0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df10:	b29b      	uxth	r3, r3
 800df12:	3301      	adds	r3, #1
 800df14:	b29b      	uxth	r3, r3
 800df16:	84fb      	strh	r3, [r7, #38]	; 0x26
 800df18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800df20:	429a      	cmp	r2, r3
 800df22:	dd9b      	ble.n	800de5c <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800df24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3301      	adds	r3, #1
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800df34:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df38:	429a      	cmp	r2, r3
 800df3a:	dd8c      	ble.n	800de56 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	372c      	adds	r7, #44	; 0x2c
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}

0800df46 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b086      	sub	sp, #24
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	60b9      	str	r1, [r7, #8]
 800df50:	607a      	str	r2, [r7, #4]
 800df52:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fd ff6d 	bl	800be38 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	7c9a      	ldrb	r2, [r3, #18]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	3314      	adds	r3, #20
 800df88:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800df8a:	2300      	movs	r3, #0
 800df8c:	75fb      	strb	r3, [r7, #23]
 800df8e:	e06b      	b.n	800e068 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800df90:	7dfb      	ldrb	r3, [r7, #23]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800df96:	2b01      	cmp	r3, #1
 800df98:	d034      	beq.n	800e004 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800df9a:	e05f      	b.n	800e05c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800dfd4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	8a9a      	ldrh	r2, [r3, #20]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	601a      	str	r2, [r3, #0]

			break;
 800e002:	e02b      	b.n	800e05c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e034:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	611a      	str	r2, [r3, #16]
			break;
 800e05a:	bf00      	nop
		}

		pdata++;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	334c      	adds	r3, #76	; 0x4c
 800e060:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800e062:	7dfb      	ldrb	r3, [r7, #23]
 800e064:	3301      	adds	r3, #1
 800e066:	75fb      	strb	r3, [r7, #23]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	7c9b      	ldrb	r3, [r3, #18]
 800e06c:	7dfa      	ldrb	r2, [r7, #23]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d38e      	bcc.n	800df90 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b089      	sub	sp, #36	; 0x24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e084:	2300      	movs	r3, #0
 800e086:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	3318      	adds	r3, #24
 800e08c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e094:	3308      	adds	r3, #8
 800e096:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800e09e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0a6:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	3302      	adds	r3, #2
 800e0ba:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800e0e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3724      	adds	r7, #36	; 0x24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b08b      	sub	sp, #44	; 0x2c
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3318      	adds	r3, #24
 800e102:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e10a:	3308      	adds	r3, #8
 800e10c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800e114:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e11c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800e124:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800e126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e12a:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800e12c:	7bfa      	ldrb	r2, [r7, #15]
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	440b      	add	r3, r1
 800e13a:	3306      	adds	r3, #6
 800e13c:	2200      	movs	r2, #0
 800e13e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e146:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800e148:	2301      	movs	r3, #1
 800e14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e14e:	e01a      	b.n	800e186 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800e150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	214c      	movs	r1, #76	; 0x4c
 800e158:	fb01 f303 	mul.w	r3, r1, r3
 800e15c:	4413      	add	r3, r2
 800e15e:	334a      	adds	r3, #74	; 0x4a
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e164:	429a      	cmp	r2, r3
 800e166:	d209      	bcs.n	800e17c <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	214c      	movs	r1, #76	; 0x4c
 800e170:	fb01 f303 	mul.w	r3, r1, r3
 800e174:	4413      	add	r3, r2
 800e176:	334a      	adds	r3, #74	; 0x4a
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800e17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e180:	3301      	adds	r3, #1
 800e182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	7c9b      	ldrb	r3, [r3, #18]
 800e18a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e18e:	429a      	cmp	r2, r3
 800e190:	d3de      	bcc.n	800e150 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800e192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800e198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e19c:	623b      	str	r3, [r7, #32]
 800e19e:	e00e      	b.n	800e1be <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800e1a0:	89bb      	ldrh	r3, [r7, #12]
 800e1a2:	039b      	lsls	r3, r3, #14
 800e1a4:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800e1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a8:	6a3a      	ldr	r2, [r7, #32]
 800e1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ae:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b6:	d302      	bcc.n	800e1be <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800e1b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1bc:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800e1be:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800e1c4:	6939      	ldr	r1, [r7, #16]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	440b      	add	r3, r1
 800e1d0:	3306      	adds	r3, #6
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800e1d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	372c      	adds	r7, #44	; 0x2c
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b08a      	sub	sp, #40	; 0x28
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3318      	adds	r3, #24
 800e1f8:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	332c      	adds	r3, #44	; 0x2c
 800e1fe:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	33c2      	adds	r3, #194	; 0xc2
 800e204:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800e20c:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	3302      	adds	r3, #2
 800e212:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	785b      	ldrb	r3, [r3, #1]
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e224:	461a      	mov	r2, r3
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	4413      	add	r3, r2
 800e22a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d11e      	bne.n	800e270 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10b      	bne.n	800e250 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d05d      	beq.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	719a      	strb	r2, [r3, #6]
 800e26e:	e050      	b.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e276:	461a      	mov	r2, r3
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	4413      	add	r3, r2
 800e27c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e280:	2b02      	cmp	r3, #2
 800e282:	d11e      	bne.n	800e2c2 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10b      	bne.n	800e2a2 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e2a2:	7bfb      	ldrb	r3, [r7, #15]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d034      	beq.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	719a      	strb	r2, [r3, #6]
 800e2c0:	e027      	b.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d11d      	bne.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10b      	bne.n	800e2f4 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800e312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e316:	2b00      	cmp	r3, #0
 800e318:	d109      	bne.n	800e32e <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	f203 3142 	addw	r1, r3, #834	; 0x342
 800e320:	6a3b      	ldr	r3, [r7, #32]
 800e322:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800e326:	461a      	mov	r2, r3
 800e328:	6978      	ldr	r0, [r7, #20]
 800e32a:	f7fd f921 	bl	800b570 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800e32e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e332:	4618      	mov	r0, r3
 800e334:	3728      	adds	r7, #40	; 0x28
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b089      	sub	sp, #36	; 0x24
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60f8      	str	r0, [r7, #12]
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	603b      	str	r3, [r7, #0]
 800e346:	460b      	mov	r3, r1
 800e348:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e34a:	2300      	movs	r3, #0
 800e34c:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3318      	adds	r3, #24
 800e352:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800e35a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800e35c:	7dfb      	ldrb	r3, [r7, #23]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d103      	bne.n	800e36a <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	7afa      	ldrb	r2, [r7, #11]
 800e366:	701a      	strb	r2, [r3, #0]
 800e368:	e01e      	b.n	800e3a8 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	7dfb      	ldrb	r3, [r7, #23]
 800e372:	3b01      	subs	r3, #1
 800e374:	429a      	cmp	r2, r3
 800e376:	d111      	bne.n	800e39c <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2bff      	cmp	r3, #255	; 0xff
 800e37e:	d103      	bne.n	800e388 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2280      	movs	r2, #128	; 0x80
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	e005      	b.n	800e394 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	3301      	adds	r3, #1
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	e005      	b.n	800e3a8 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800e3a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3724      	adds	r7, #36	; 0x24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d118      	bne.n	800e404 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	719a      	strb	r2, [r3, #6]
 800e402:	e03a      	b.n	800e47a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d118      	bne.n	800e440 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	719a      	strb	r2, [r3, #6]
 800e43e:	e01c      	b.n	800e47a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e446:	2b03      	cmp	r3, #3
 800e448:	d117      	bne.n	800e47a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800e47a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	371c      	adds	r7, #28
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b08a      	sub	sp, #40	; 0x28
 800e48e:	af00      	add	r7, sp, #0
 800e490:	60f8      	str	r0, [r7, #12]
 800e492:	607a      	str	r2, [r7, #4]
 800e494:	461a      	mov	r2, r3
 800e496:	460b      	mov	r3, r1
 800e498:	72fb      	strb	r3, [r7, #11]
 800e49a:	4613      	mov	r3, r2
 800e49c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3318      	adds	r3, #24
 800e4a8:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800e4b2:	7afa      	ldrb	r2, [r7, #11]
 800e4b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe f8ca 	bl	800c652 <VL53L1_calc_macro_period_us>
 800e4be:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	031b      	lsls	r3, r3, #12
 800e4ce:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	085b      	lsrs	r3, r3, #1
 800e4d4:	69ba      	ldr	r2, [r7, #24]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800e4da:	69ba      	ldr	r2, [r7, #24]
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e2:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	2bff      	cmp	r3, #255	; 0xff
 800e4e8:	d904      	bls.n	800e4f4 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	22ff      	movs	r2, #255	; 0xff
 800e4ee:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800e4f2:	e004      	b.n	800e4fe <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	7afa      	ldrb	r2, [r7, #11]
 800e502:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800e506:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10a      	bne.n	800e524 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800e514:	461a      	mov	r2, r3
 800e516:	214b      	movs	r1, #75	; 0x4b
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f007 f9bd 	bl	8015898 <VL53L1_WrByte>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800e524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10a      	bne.n	800e542 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e532:	461a      	mov	r2, r3
 800e534:	2160      	movs	r1, #96	; 0x60
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f007 f9ae 	bl	8015898 <VL53L1_WrByte>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e548:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e550:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800e552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e556:	2b00      	cmp	r3, #0
 800e558:	d109      	bne.n	800e56e <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800e55a:	f107 0214 	add.w	r2, r7, #20
 800e55e:	2302      	movs	r3, #2
 800e560:	2178      	movs	r1, #120	; 0x78
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f007 f92c 	bl	80157c0 <VL53L1_WriteMulti>
 800e568:	4603      	mov	r3, r0
 800e56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	893a      	ldrh	r2, [r7, #8]
 800e572:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800e576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d108      	bne.n	800e590 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800e57e:	893b      	ldrh	r3, [r7, #8]
 800e580:	461a      	mov	r2, r3
 800e582:	211c      	movs	r1, #28
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f007 f9b1 	bl	80158ec <VL53L1_WrWord>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e590:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e594:	2b00      	cmp	r3, #0
 800e596:	d108      	bne.n	800e5aa <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800e598:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e59a:	461a      	mov	r2, r3
 800e59c:	2164      	movs	r1, #100	; 0x64
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f007 f9a4 	bl	80158ec <VL53L1_WrWord>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e5aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d108      	bne.n	800e5c4 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800e5b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	2166      	movs	r1, #102	; 0x66
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f007 f997 	bl	80158ec <VL53L1_WrWord>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800e5c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3728      	adds	r7, #40	; 0x28
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800e5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5d4:	b0a2      	sub	sp, #136	; 0x88
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5e2:	3318      	adds	r3, #24
 800e5e4:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5e8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800e5f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5f2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800e5fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5fc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e600:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800e602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e604:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800e606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e608:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e60c:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800e60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e610:	69db      	ldr	r3, [r3, #28]
 800e612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800e616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d103      	bne.n	800e626 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800e61e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800e626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800e62a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800e62e:	4413      	add	r3, r2
 800e630:	2200      	movs	r2, #0
 800e632:	461c      	mov	r4, r3
 800e634:	4615      	mov	r5, r2
 800e636:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e63a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e63e:	4622      	mov	r2, r4
 800e640:	462b      	mov	r3, r5
 800e642:	f04f 0000 	mov.w	r0, #0
 800e646:	f04f 0100 	mov.w	r1, #0
 800e64a:	0159      	lsls	r1, r3, #5
 800e64c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e650:	0150      	lsls	r0, r2, #5
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	ebb2 0804 	subs.w	r8, r2, r4
 800e65a:	eb63 0905 	sbc.w	r9, r3, r5
 800e65e:	f04f 0200 	mov.w	r2, #0
 800e662:	f04f 0300 	mov.w	r3, #0
 800e666:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e66a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800e66e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800e672:	4690      	mov	r8, r2
 800e674:	4699      	mov	r9, r3
 800e676:	eb18 0304 	adds.w	r3, r8, r4
 800e67a:	633b      	str	r3, [r7, #48]	; 0x30
 800e67c:	eb49 0305 	adc.w	r3, r9, r5
 800e680:	637b      	str	r3, [r7, #52]	; 0x34
 800e682:	f04f 0200 	mov.w	r2, #0
 800e686:	f04f 0300 	mov.w	r3, #0
 800e68a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e68e:	4629      	mov	r1, r5
 800e690:	00cb      	lsls	r3, r1, #3
 800e692:	4621      	mov	r1, r4
 800e694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e698:	4621      	mov	r1, r4
 800e69a:	00ca      	lsls	r2, r1, #3
 800e69c:	4610      	mov	r0, r2
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6a8:	647a      	str	r2, [r7, #68]	; 0x44
 800e6aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e6ae:	f7f2 faa3 	bl	8000bf8 <__aeabi_uldivmod>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e6ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e6be:	4622      	mov	r2, r4
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	f04f 0000 	mov.w	r0, #0
 800e6c6:	f04f 0100 	mov.w	r1, #0
 800e6ca:	0159      	lsls	r1, r3, #5
 800e6cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e6d0:	0150      	lsls	r0, r2, #5
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	ebb2 0a04 	subs.w	sl, r2, r4
 800e6da:	eb63 0b05 	sbc.w	fp, r3, r5
 800e6de:	f04f 0200 	mov.w	r2, #0
 800e6e2:	f04f 0300 	mov.w	r3, #0
 800e6e6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e6ea:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800e6ee:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800e6f2:	4692      	mov	sl, r2
 800e6f4:	469b      	mov	fp, r3
 800e6f6:	eb1a 0304 	adds.w	r3, sl, r4
 800e6fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6fc:	eb4b 0305 	adc.w	r3, fp, r5
 800e700:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e702:	f04f 0200 	mov.w	r2, #0
 800e706:	f04f 0300 	mov.w	r3, #0
 800e70a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e70e:	4629      	mov	r1, r5
 800e710:	00cb      	lsls	r3, r1, #3
 800e712:	4621      	mov	r1, r4
 800e714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e718:	4621      	mov	r1, r4
 800e71a:	00ca      	lsls	r2, r1, #3
 800e71c:	4610      	mov	r0, r2
 800e71e:	4619      	mov	r1, r3
 800e720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e724:	2200      	movs	r2, #0
 800e726:	63bb      	str	r3, [r7, #56]	; 0x38
 800e728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e72a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e72e:	f7f2 fa63 	bl	8000bf8 <__aeabi_uldivmod>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800e73a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e740:	8ad2      	ldrh	r2, [r2, #22]
 800e742:	fb02 f303 	mul.w	r3, r2, r3
 800e746:	2200      	movs	r2, #0
 800e748:	623b      	str	r3, [r7, #32]
 800e74a:	627a      	str	r2, [r7, #36]	; 0x24
 800e74c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e750:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800e754:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e758:	4313      	orrs	r3, r2
 800e75a:	d105      	bne.n	800e768 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800e75c:	f04f 0201 	mov.w	r2, #1
 800e760:	f04f 0300 	mov.w	r3, #0
 800e764:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800e768:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	f04f 0400 	mov.w	r4, #0
 800e774:	f04f 0500 	mov.w	r5, #0
 800e778:	015d      	lsls	r5, r3, #5
 800e77a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e77e:	0154      	lsls	r4, r2, #5
 800e780:	4622      	mov	r2, r4
 800e782:	462b      	mov	r3, r5
 800e784:	1a14      	subs	r4, r2, r0
 800e786:	61bc      	str	r4, [r7, #24]
 800e788:	eb63 0301 	sbc.w	r3, r3, r1
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	f04f 0200 	mov.w	r2, #0
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800e79a:	464c      	mov	r4, r9
 800e79c:	00a3      	lsls	r3, r4, #2
 800e79e:	4644      	mov	r4, r8
 800e7a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e7a4:	4644      	mov	r4, r8
 800e7a6:	00a2      	lsls	r2, r4, #2
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	461d      	mov	r5, r3
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	181b      	adds	r3, r3, r0
 800e7b0:	613b      	str	r3, [r7, #16]
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	eb41 0303 	adc.w	r3, r1, r3
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	f04f 0200 	mov.w	r2, #0
 800e7be:	f04f 0300 	mov.w	r3, #0
 800e7c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	02cb      	lsls	r3, r1, #11
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	02ca      	lsls	r2, r1, #11
 800e7d4:	461c      	mov	r4, r3
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e7dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e7e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e7e4:	f7f2 fa08 	bl	8000bf8 <__aeabi_uldivmod>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800e7f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	f04f 0400 	mov.w	r4, #0
 800e7fc:	f04f 0500 	mov.w	r5, #0
 800e800:	015d      	lsls	r5, r3, #5
 800e802:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e806:	0154      	lsls	r4, r2, #5
 800e808:	4622      	mov	r2, r4
 800e80a:	462b      	mov	r3, r5
 800e80c:	1a14      	subs	r4, r2, r0
 800e80e:	60bc      	str	r4, [r7, #8]
 800e810:	eb63 0301 	sbc.w	r3, r3, r1
 800e814:	60fb      	str	r3, [r7, #12]
 800e816:	f04f 0200 	mov.w	r2, #0
 800e81a:	f04f 0300 	mov.w	r3, #0
 800e81e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800e822:	464c      	mov	r4, r9
 800e824:	00a3      	lsls	r3, r4, #2
 800e826:	4644      	mov	r4, r8
 800e828:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e82c:	4644      	mov	r4, r8
 800e82e:	00a2      	lsls	r2, r4, #2
 800e830:	4614      	mov	r4, r2
 800e832:	461d      	mov	r5, r3
 800e834:	4623      	mov	r3, r4
 800e836:	181b      	adds	r3, r3, r0
 800e838:	603b      	str	r3, [r7, #0]
 800e83a:	462b      	mov	r3, r5
 800e83c:	eb41 0303 	adc.w	r3, r1, r3
 800e840:	607b      	str	r3, [r7, #4]
 800e842:	f04f 0200 	mov.w	r2, #0
 800e846:	f04f 0300 	mov.w	r3, #0
 800e84a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e84e:	4629      	mov	r1, r5
 800e850:	02cb      	lsls	r3, r1, #11
 800e852:	4621      	mov	r1, r4
 800e854:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e858:	4621      	mov	r1, r4
 800e85a:	02ca      	lsls	r2, r1, #11
 800e85c:	461c      	mov	r4, r3
 800e85e:	4613      	mov	r3, r2
 800e860:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e864:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e868:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e86c:	f7f2 f9c4 	bl	8000bf8 <__aeabi_uldivmod>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800e878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e87a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e87c:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800e87e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d802      	bhi.n	800e88c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800e886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e888:	2202      	movs	r2, #2
 800e88a:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800e88c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e890:	4618      	mov	r0, r3
 800e892:	3788      	adds	r7, #136	; 0x88
 800e894:	46bd      	mov	sp, r7
 800e896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800e89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b096      	sub	sp, #88	; 0x58
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
 800e8a8:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	3318      	adds	r3, #24
 800e8b4:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800e8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e8bc:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800e8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c0:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d108      	bne.n	800e8e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e8d6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d101      	bne.n	800e8e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800e8e8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d107      	bne.n	800e900 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	889b      	ldrh	r3, [r3, #4]
 800e8f4:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	609a      	str	r2, [r3, #8]
 800e8fe:	e002      	b.n	800e906 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	899b      	ldrh	r3, [r3, #12]
 800e910:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	89db      	ldrh	r3, [r3, #14]
 800e918:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d125      	bne.n	800e97c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800e934:	2b00      	cmp	r3, #0
 800e936:	d021      	beq.n	800e97c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800e938:	f107 0313 	add.w	r3, r7, #19
 800e93c:	4619      	mov	r1, r3
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 fe44 	bl	800f5cc <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800e944:	7cfb      	ldrb	r3, [r7, #19]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800e94a:	2301      	movs	r3, #1
 800e94c:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800e94e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e952:	2b00      	cmp	r3, #0
 800e954:	d103      	bne.n	800e95e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800e956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	653b      	str	r3, [r7, #80]	; 0x50
 800e95c:	e006      	b.n	800e96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800e95e:	7cfb      	ldrb	r3, [r7, #19]
 800e960:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	3202      	adds	r2, #2
 800e966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e96a:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	889b      	ldrh	r3, [r3, #4]
 800e970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	88db      	ldrh	r3, [r3, #6]
 800e978:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10a      	bne.n	800e99c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800e986:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	795b      	ldrb	r3, [r3, #5]
 800e992:	f043 0301 	orr.w	r3, r3, #1
 800e996:	b2da      	uxtb	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10a      	bne.n	800e9bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800e9a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d106      	bne.n	800e9bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	795b      	ldrb	r3, [r3, #5]
 800e9b2:	f043 0302 	orr.w	r3, r3, #2
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800e9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d108      	bne.n	800e9e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e9dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800e9e0:	e019      	b.n	800ea16 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800e9e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e9e6:	019b      	lsls	r3, r3, #6
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800e9fa:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800e9fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ea00:	019b      	lsls	r3, r3, #6
 800ea02:	461a      	mov	r2, r3
 800ea04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ea14:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d12a      	bne.n	800ea76 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800ea28:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ea2c:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ea2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea30:	119b      	asrs	r3, r3, #6
 800ea32:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ea34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea3a:	db02      	blt.n	800ea42 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800ea3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea40:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ea42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea44:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800ea52:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ea56:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ea58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea5a:	119b      	asrs	r3, r3, #6
 800ea5c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ea5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea64:	db02      	blt.n	800ea6c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800ea66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea6a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ea6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea6e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	81da      	strh	r2, [r3, #14]
 800ea74:	e042      	b.n	800eafc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d13d      	bne.n	800eafc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ea84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800ea8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	da00      	bge.n	800ea92 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800ea90:	330f      	adds	r3, #15
 800ea92:	111b      	asrs	r3, r3, #4
 800ea94:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800ea96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800ea9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800eaa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaa2:	4413      	add	r3, r2
 800eaa4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800eaa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaac:	db02      	blt.n	800eab4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800eaae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eab2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800eab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800eac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800eac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eac8:	4a51      	ldr	r2, [pc, #324]	; (800ec10 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800eaca:	fb82 1203 	smull	r1, r2, r2, r3
 800eace:	1152      	asrs	r2, r2, #5
 800ead0:	17db      	asrs	r3, r3, #31
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800ead6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800eadc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800eae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eae2:	4413      	add	r3, r2
 800eae4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800eae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaec:	db02      	blt.n	800eaf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800eaee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaf2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800eaf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaf6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d177      	bne.n	800ebf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800eb04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d073      	beq.n	800ebf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800eb18:	f107 0313 	add.w	r3, r7, #19
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f000 fd54 	bl	800f5cc <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800eb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb26:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800eb2a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	3308      	adds	r3, #8
 800eb30:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800eb32:	7cfb      	ldrb	r3, [r7, #19]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d041      	beq.n	800ebbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800eb38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d03d      	beq.n	800ebbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d03a      	beq.n	800ebbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800eb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb52:	fb03 f202 	mul.w	r2, r3, r2
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb5c:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d004      	beq.n	800eb6e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800eb68:	69ba      	ldr	r2, [r7, #24]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d303      	bcc.n	800eb76 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2200      	movs	r2, #0
 800eb72:	719a      	strb	r2, [r3, #6]
 800eb74:	e022      	b.n	800ebbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800eb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb7e:	617b      	str	r3, [r7, #20]
				cval = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800eb8a:	e00e      	b.n	800ebaa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800eb8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	4413      	add	r3, r2
 800eb92:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800eb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb98:	601a      	str	r2, [r3, #0]
					pcpo++;
 800eb9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800eba0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800eba4:	3301      	adds	r3, #1
 800eba6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ebaa:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d3ea      	bcc.n	800eb8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800ebb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebba:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	799b      	ldrb	r3, [r3, #6]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d017      	beq.n	800ebf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	789b      	ldrb	r3, [r3, #2]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d105      	bne.n	800ebf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800ebf4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d002      	beq.n	800ec02 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ec02:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3758      	adds	r7, #88	; 0x58
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	66666667 	.word	0x66666667

0800ec14 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800ec14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec18:	b0a2      	sub	sp, #136	; 0x88
 800ec1a:	af02      	add	r7, sp, #8
 800ec1c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ec24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec26:	3318      	adds	r3, #24
 800ec28:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ec30:	3308      	adds	r3, #8
 800ec32:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800ec34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec36:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ec3a:	3318      	adds	r3, #24
 800ec3c:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800ec3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec40:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800ec44:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800ec46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec48:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec4c:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800ec4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec50:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ec52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec54:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800ec58:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800ec76:	f04f 0200 	mov.w	r2, #0
 800ec7a:	f04f 0300 	mov.w	r3, #0
 800ec7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800eca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eca6:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d108      	bne.n	800ecc0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ecb4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d101      	bne.n	800ecc0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e000      	b.n	800ecc2 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ecc6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ecca:	4619      	mov	r1, r3
 800eccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecce:	f000 fc7d 	bl	800f5cc <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800ecd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d003      	beq.n	800ece2 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800ecda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800ece2:	2301      	movs	r3, #1
 800ece4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800ece8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ecea:	f000 fb15 	bl	800f318 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ecee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00a      	beq.n	800ed0c <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800ecf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecfe:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ed02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed04:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d901      	bls.n	800ed10 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e000      	b.n	800ed12 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800ed16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d006      	beq.n	800ed2c <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800ed1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed20:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800ed24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d101      	bne.n	800ed30 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e000      	b.n	800ed32 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800ed30:	2300      	movs	r3, #0
 800ed32:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ed36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed38:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d10e      	bne.n	800ed5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800ed3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00a      	beq.n	800ed5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800ed46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed48:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ed4c:	2b09      	cmp	r3, #9
 800ed4e:	d105      	bne.n	800ed5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed50:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e000      	b.n	800ed5e <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800ed5c:	2300      	movs	r3, #0
	run_smudge_detection =
 800ed5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ed62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed64:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ed68:	2b09      	cmp	r3, #9
 800ed6a:	f000 80a6 	beq.w	800eeba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ed6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed70:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	f040 80a1 	bne.w	800eeba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800ed78:	2302      	movs	r3, #2
 800ed7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ed84:	e02d      	b.n	800ede2 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800ed86:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ed8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed8c:	234c      	movs	r3, #76	; 0x4c
 800ed8e:	fb01 f303 	mul.w	r3, r1, r3
 800ed92:	4413      	add	r3, r2
 800ed94:	335e      	adds	r3, #94	; 0x5e
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b09      	cmp	r3, #9
 800ed9a:	d11d      	bne.n	800edd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800ed9c:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800eda0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eda2:	234c      	movs	r3, #76	; 0x4c
 800eda4:	fb01 f303 	mul.w	r3, r1, r3
 800eda8:	4413      	add	r3, r2
 800edaa:	335a      	adds	r3, #90	; 0x5a
 800edac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edb0:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800edb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800edb6:	429a      	cmp	r2, r3
 800edb8:	dc03      	bgt.n	800edc2 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800edc0:	e00a      	b.n	800edd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800edc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d106      	bne.n	800edd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800edca:	2301      	movs	r3, #1
 800edcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800edd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edd4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800edd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eddc:	3301      	adds	r3, #1
 800edde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ede2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede4:	7c9a      	ldrb	r2, [r3, #18]
 800ede6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edea:	4293      	cmp	r3, r2
 800edec:	d3cb      	bcc.n	800ed86 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800edee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d102      	bne.n	800edfc <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800edfc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800ee00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee02:	234c      	movs	r3, #76	; 0x4c
 800ee04:	fb01 f303 	mul.w	r3, r1, r3
 800ee08:	4413      	add	r3, r2
 800ee0a:	3348      	adds	r3, #72	; 0x48
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800ee10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d150      	bne.n	800eeba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800ee18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	469a      	mov	sl, r3
 800ee1e:	4693      	mov	fp, r2
 800ee20:	4652      	mov	r2, sl
 800ee22:	465b      	mov	r3, fp
 800ee24:	f04f 0000 	mov.w	r0, #0
 800ee28:	f04f 0100 	mov.w	r1, #0
 800ee2c:	0159      	lsls	r1, r3, #5
 800ee2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee32:	0150      	lsls	r0, r2, #5
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	ebb2 040a 	subs.w	r4, r2, sl
 800ee3c:	eb63 050b 	sbc.w	r5, r3, fp
 800ee40:	f04f 0200 	mov.w	r2, #0
 800ee44:	f04f 0300 	mov.w	r3, #0
 800ee48:	00ab      	lsls	r3, r5, #2
 800ee4a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ee4e:	00a2      	lsls	r2, r4, #2
 800ee50:	4614      	mov	r4, r2
 800ee52:	461d      	mov	r5, r3
 800ee54:	eb14 080a 	adds.w	r8, r4, sl
 800ee58:	eb45 090b 	adc.w	r9, r5, fp
 800ee5c:	f04f 0200 	mov.w	r2, #0
 800ee60:	f04f 0300 	mov.w	r3, #0
 800ee64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ee68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ee6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ee70:	4690      	mov	r8, r2
 800ee72:	4699      	mov	r9, r3
 800ee74:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800ee78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ee7c:	f04f 0200 	mov.w	r2, #0
 800ee80:	f04f 0300 	mov.w	r3, #0
 800ee84:	024b      	lsls	r3, r1, #9
 800ee86:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ee8a:	0242      	lsls	r2, r0, #9
 800ee8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ee90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee94:	2200      	movs	r2, #0
 800ee96:	61bb      	str	r3, [r7, #24]
 800ee98:	61fa      	str	r2, [r7, #28]
 800ee9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee9e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800eea2:	4621      	mov	r1, r4
 800eea4:	428a      	cmp	r2, r1
 800eea6:	4629      	mov	r1, r5
 800eea8:	418b      	sbcs	r3, r1
 800eeaa:	d203      	bcs.n	800eeb4 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800eeac:	2301      	movs	r3, #1
 800eeae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800eeb2:	e002      	b.n	800eeba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800eeba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f000 810b 	beq.w	800f0da <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800eec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eec6:	2200      	movs	r2, #0
 800eec8:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800eeca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eecc:	f7ff fb80 	bl	800e5d0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800eed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eed2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800eed6:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800eed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800eee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eee6:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800eeec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	1ad2      	subs	r2, r2, r3
 800eef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef4:	4413      	add	r3, r2
 800eef6:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800eef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	da02      	bge.n	800ef04 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800eefe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef00:	425b      	negs	r3, r3
 800ef02:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ef04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef06:	699b      	ldr	r3, [r3, #24]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	dd0c      	ble.n	800ef2a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ef10:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ef12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800ef14:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ef16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	da03      	bge.n	800ef24 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800ef1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef1e:	2201      	movs	r2, #1
 800ef20:	709a      	strb	r2, [r3, #2]
 800ef22:	e002      	b.n	800ef2a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ef24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef26:	2202      	movs	r2, #2
 800ef28:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ef2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef32:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ef34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef3a:	695b      	ldr	r3, [r3, #20]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d906      	bls.n	800ef4e <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800ef40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef42:	2201      	movs	r2, #1
 800ef44:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ef46:	2302      	movs	r3, #2
 800ef48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ef4c:	e014      	b.n	800ef78 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800ef4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ef54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef56:	2000      	movs	r0, #0
 800ef58:	6139      	str	r1, [r7, #16]
 800ef5a:	6178      	str	r0, [r7, #20]
 800ef5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ef60:	4621      	mov	r1, r4
 800ef62:	1851      	adds	r1, r2, r1
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	4629      	mov	r1, r5
 800ef68:	eb43 0101 	adc.w	r1, r3, r1
 800ef6c:	60f9      	str	r1, [r7, #12]
 800ef6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ef74:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ef78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d202      	bcs.n	800ef8a <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800ef84:	2301      	movs	r3, #1
 800ef86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ef8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ef90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2200      	movs	r2, #0
 800ef96:	603b      	str	r3, [r7, #0]
 800ef98:	607a      	str	r2, [r7, #4]
 800ef9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef9e:	f7f1 fe2b 	bl	8000bf8 <__aeabi_uldivmod>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
		xtalk_offset_out =
 800efa6:	4613      	mov	r3, r2
 800efa8:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800efaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	1ad2      	subs	r2, r2, r3
 800efb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb2:	4413      	add	r3, r2
 800efb4:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800efb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efb8:	2b00      	cmp	r3, #0
 800efba:	da02      	bge.n	800efc2 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800efbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efbe:	425b      	negs	r3, r3
 800efc0:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800efc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d112      	bne.n	800eff0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800efca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800efd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efd2:	4293      	cmp	r3, r2
 800efd4:	db0c      	blt.n	800eff0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800efd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800efd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800efda:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800efdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efde:	429a      	cmp	r2, r3
 800efe0:	da03      	bge.n	800efea <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800efe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efe4:	2201      	movs	r2, #1
 800efe6:	70da      	strb	r2, [r3, #3]
 800efe8:	e002      	b.n	800eff0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800efea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efec:	2202      	movs	r2, #2
 800efee:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800eff0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d108      	bne.n	800f00a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800eff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800effa:	69db      	ldr	r3, [r3, #28]
 800effc:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800effe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f000:	4293      	cmp	r3, r2
 800f002:	da02      	bge.n	800f00a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800f004:	2302      	movs	r3, #2
 800f006:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800f00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f00c:	2200      	movs	r2, #0
 800f00e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800f010:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f014:	2b00      	cmp	r3, #0
 800f016:	d112      	bne.n	800f03e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800f018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f01a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00e      	beq.n	800f03e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800f020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f022:	6a1b      	ldr	r3, [r3, #32]
 800f024:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f028:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800f02c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f02e:	429a      	cmp	r2, r3
 800f030:	d905      	bls.n	800f03e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800f032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f034:	2201      	movs	r2, #1
 800f036:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800f038:	2302      	movs	r3, #2
 800f03a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800f03e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f040:	7c1b      	ldrb	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d007      	beq.n	800f056 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800f046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f048:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800f04a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d902      	bls.n	800f056 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800f050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800f056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f058:	7c1b      	ldrb	r3, [r3, #16]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d107      	bne.n	800f06e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800f05e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f060:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800f062:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f064:	429a      	cmp	r2, r3
 800f066:	d202      	bcs.n	800f06e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800f068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800f06e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f070:	089b      	lsrs	r3, r3, #2
 800f072:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800f074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f07a:	d301      	bcc.n	800f080 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800f07c:	4b3e      	ldr	r3, [pc, #248]	; (800f178 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800f07e:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800f080:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10d      	bne.n	800f0a4 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f088:	2300      	movs	r3, #0
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	2301      	movs	r3, #1
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f092:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f094:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f098:	f7ff fc00 	bl	800e89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800f09c:	2302      	movs	r3, #2
 800f09e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800f0a2:	e009      	b.n	800f0b8 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b4:	f7ff fbf2 	bl	800e89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800f0b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d10c      	bne.n	800f0da <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800f0c0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0c2:	f04f 0200 	mov.w	r2, #0
 800f0c6:	f04f 0300 	mov.w	r3, #0
 800f0ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800f0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800f0d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800f0e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d140      	bne.n	800f16a <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800f0e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f0:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800f0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f4:	691a      	ldr	r2, [r3, #16]
 800f0f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d202      	bcs.n	800f104 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800f0fe:	2301      	movs	r3, #1
 800f100:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800f104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f108:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800f10a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d110      	bne.n	800f134 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f112:	2300      	movs	r3, #0
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	2300      	movs	r3, #0
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f11c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f11e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f122:	f7ff fbbb 	bl	800e89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800f126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f128:	2202      	movs	r2, #2
 800f12a:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800f12c:	2302      	movs	r3, #2
 800f12e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800f132:	e009      	b.n	800f148 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f134:	2301      	movs	r3, #1
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	2300      	movs	r3, #0
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f13e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f140:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f144:	f7ff fbaa 	bl	800e89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800f148:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	d10c      	bne.n	800f16a <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800f150:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f152:	f04f 0200 	mov.w	r2, #0
 800f156:	f04f 0300 	mov.w	r3, #0
 800f15a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800f15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f160:	2200      	movs	r2, #0
 800f162:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800f164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f166:	2200      	movs	r2, #0
 800f168:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f16a:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3780      	adds	r7, #128	; 0x80
 800f172:	46bd      	mov	sp, r7
 800f174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f178:	0003ffff 	.word	0x0003ffff

0800f17c <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f184:	2300      	movs	r3, #0
 800f186:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	3318      	adds	r3, #24
 800f18c:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f194:	3308      	adds	r3, #8
 800f196:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1c6:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f1d6:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	23c8      	movs	r3, #200	; 0xc8
 800f1fe:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f208:	461a      	mov	r2, r3
 800f20a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f20e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f218:	461a      	mov	r2, r3
 800f21a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f21e:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f228:	461a      	mov	r2, r3
 800f22a:	4b3a      	ldr	r3, [pc, #232]	; (800f314 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800f22c:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f236:	461a      	mov	r2, r3
 800f238:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800f23c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f246:	2200      	movs	r2, #0
 800f248:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f252:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f256:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f260:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f264:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f27a:	461a      	mov	r2, r3
 800f27c:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800f280:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f28a:	461a      	mov	r2, r3
 800f28c:	230a      	movs	r3, #10
 800f28e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f298:	461a      	mov	r2, r3
 800f29a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f29e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2a8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f2ac:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f2bc:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800f2e2:	3310      	adds	r3, #16
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f04f 0200 	mov.w	r2, #0
 800f2ea:	f04f 0300 	mov.w	r3, #0
 800f2ee:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f000 f809 	bl	800f318 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800f306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3718      	adds	r7, #24
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	000ff800 	.word	0x000ff800

0800f318 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f320:	2300      	movs	r3, #0
 800f322:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f32a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	2200      	movs	r2, #0
 800f336:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	2200      	movs	r2, #0
 800f33c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2200      	movs	r2, #0
 800f342:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	2200      	movs	r2, #0
 800f348:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2200      	movs	r2, #0
 800f34e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2200      	movs	r2, #0
 800f354:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2200      	movs	r2, #0
 800f35a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2200      	movs	r2, #0
 800f360:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2200      	movs	r2, #0
 800f366:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800f368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f380:	2300      	movs	r3, #0
 800f382:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3318      	adds	r3, #24
 800f388:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f390:	461a      	mov	r2, r3
 800f392:	2300      	movs	r3, #0
 800f394:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	2218      	movs	r2, #24
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f00b fc33 	bl	801ac28 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800f3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b085      	sub	sp, #20
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3318      	adds	r3, #24
 800f3de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3e6:	2203      	movs	r2, #3
 800f3e8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f416:	2200      	movs	r2, #0
 800f418:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f422:	2200      	movs	r2, #0
 800f424:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f43a:	461a      	mov	r2, r3
 800f43c:	2300      	movs	r3, #0
 800f43e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f448:	2200      	movs	r2, #0
 800f44a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800f44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800f45e:	b480      	push	{r7}
 800f460:	b085      	sub	sp, #20
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f466:	2300      	movs	r3, #0
 800f468:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	3318      	adds	r3, #24
 800f46e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f476:	22ff      	movs	r2, #255	; 0xff
 800f478:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f482:	2200      	movs	r2, #0
 800f484:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f48e:	461a      	mov	r2, r3
 800f490:	2300      	movs	r3, #0
 800f492:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f49c:	2200      	movs	r2, #0
 800f49e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d007      	beq.n	800f4c0 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b6:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c6:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d007      	beq.n	800f4de <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4d4:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800f4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800f4f6:	b480      	push	{r7}
 800f4f8:	b087      	sub	sp, #28
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	229b      	movs	r2, #155	; 0x9b
 800f516:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800f518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	371c      	adds	r7, #28
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3318      	adds	r3, #24
 800f534:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f536:	2300      	movs	r3, #0
 800f538:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f546:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f556:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800f560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f564:	b2da      	uxtb	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800f572:	f003 0303 	and.w	r3, r3, #3
 800f576:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f57e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f586:	4413      	add	r3, r2
 800f588:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f59e:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b2:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800f5bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b087      	sub	sp, #28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	3318      	adds	r3, #24
 800f5da:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f5ea:	2b07      	cmp	r3, #7
 800f5ec:	bf0c      	ite	eq
 800f5ee:	2301      	moveq	r3, #1
 800f5f0:	2300      	movne	r3, #0
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	75fb      	strb	r3, [r7, #23]
 800f5fa:	e019      	b.n	800f630 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800f5fc:	7df9      	ldrb	r1, [r7, #23]
 800f5fe:	7bbb      	ldrb	r3, [r7, #14]
 800f600:	6938      	ldr	r0, [r7, #16]
 800f602:	461a      	mov	r2, r3
 800f604:	0052      	lsls	r2, r2, #1
 800f606:	441a      	add	r2, r3
 800f608:	0153      	lsls	r3, r2, #5
 800f60a:	461a      	mov	r2, r3
 800f60c:	460b      	mov	r3, r1
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	440b      	add	r3, r1
 800f612:	019b      	lsls	r3, r3, #6
 800f614:	4413      	add	r3, r2
 800f616:	4403      	add	r3, r0
 800f618:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800f61c:	3314      	adds	r3, #20
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	dd02      	ble.n	800f62a <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800f624:	7dbb      	ldrb	r3, [r7, #22]
 800f626:	3301      	adds	r3, #1
 800f628:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	3301      	adds	r3, #1
 800f62e:	75fb      	strb	r3, [r7, #23]
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	2b05      	cmp	r3, #5
 800f634:	d9e2      	bls.n	800f5fc <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	7dba      	ldrb	r2, [r7, #22]
 800f63a:	701a      	strb	r2, [r3, #0]

	return status;
 800f63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f640:	4618      	mov	r0, r3
 800f642:	371c      	adds	r7, #28
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800f65a:	88fb      	ldrh	r3, [r7, #6]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d005      	beq.n	800f66c <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800f660:	88fb      	ldrh	r3, [r7, #6]
 800f662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f666:	fb92 f3f3 	sdiv	r3, r2, r3
 800f66a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800f66c:	68fb      	ldr	r3, [r7, #12]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3714      	adds	r7, #20
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800f67a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f67e:	b089      	sub	sp, #36	; 0x24
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800f68a:	f04f 0200 	mov.w	r2, #0
 800f68e:	f04f 0300 	mov.w	r3, #0
 800f692:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	fb02 f303 	mul.w	r3, r2, r3
 800f6a2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	0b1b      	lsrs	r3, r3, #12
 800f6a8:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	4693      	mov	fp, r2
 800f6b2:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	fb02 f303 	mul.w	r3, r2, r3
 800f6be:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	091b      	lsrs	r3, r3, #4
 800f6c4:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	4698      	mov	r8, r3
 800f6cc:	4691      	mov	r9, r2
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	fb08 f203 	mul.w	r2, r8, r3
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	fb09 f303 	mul.w	r3, r9, r3
 800f6da:	4413      	add	r3, r2
 800f6dc:	69ba      	ldr	r2, [r7, #24]
 800f6de:	fba2 4508 	umull	r4, r5, r2, r8
 800f6e2:	442b      	add	r3, r5
 800f6e4:	461d      	mov	r5, r3
 800f6e6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800f6ea:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800f6ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f6f2:	f04f 0200 	mov.w	r2, #0
 800f6f6:	f04f 0300 	mov.w	r3, #0
 800f6fa:	0b02      	lsrs	r2, r0, #12
 800f6fc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800f700:	0b0b      	lsrs	r3, r1, #12
 800f702:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800f706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d305      	bcc.n	800f71a <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800f70e:	f04f 32ff 	mov.w	r2, #4294967295
 800f712:	f04f 0300 	mov.w	r3, #0
 800f716:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800f71e:	697b      	ldr	r3, [r7, #20]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3724      	adds	r7, #36	; 0x24
 800f724:	46bd      	mov	sp, r7
 800f726:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f72a:	4770      	bx	lr

0800f72c <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800f72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f730:	b096      	sub	sp, #88	; 0x58
 800f732:	af00      	add	r7, sp, #0
 800f734:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f736:	460b      	mov	r3, r1
 800f738:	627a      	str	r2, [r7, #36]	; 0x24
 800f73a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800f73c:	f04f 0200 	mov.w	r2, #0
 800f740:	f04f 0300 	mov.w	r3, #0
 800f744:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800f748:	f04f 0200 	mov.w	r2, #0
 800f74c:	f04f 0300 	mov.w	r3, #0
 800f750:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800f754:	2300      	movs	r3, #0
 800f756:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	17da      	asrs	r2, r3, #31
 800f75c:	469a      	mov	sl, r3
 800f75e:	4693      	mov	fp, r2
 800f760:	4652      	mov	r2, sl
 800f762:	465b      	mov	r3, fp
 800f764:	f04f 0000 	mov.w	r0, #0
 800f768:	f04f 0100 	mov.w	r1, #0
 800f76c:	0159      	lsls	r1, r3, #5
 800f76e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f772:	0150      	lsls	r0, r2, #5
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	ebb2 040a 	subs.w	r4, r2, sl
 800f77c:	eb63 050b 	sbc.w	r5, r3, fp
 800f780:	f04f 0200 	mov.w	r2, #0
 800f784:	f04f 0300 	mov.w	r3, #0
 800f788:	00ab      	lsls	r3, r5, #2
 800f78a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f78e:	00a2      	lsls	r2, r4, #2
 800f790:	4614      	mov	r4, r2
 800f792:	461d      	mov	r5, r3
 800f794:	eb14 080a 	adds.w	r8, r4, sl
 800f798:	eb45 090b 	adc.w	r9, r5, fp
 800f79c:	f04f 0200 	mov.w	r2, #0
 800f7a0:	f04f 0300 	mov.w	r3, #0
 800f7a4:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800f7a8:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800f7ac:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800f7b0:	4690      	mov	r8, r2
 800f7b2:	4699      	mov	r9, r3
 800f7b4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800f7b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00d      	beq.n	800f7da <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800f7be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	61bb      	str	r3, [r7, #24]
 800f7c4:	61fa      	str	r2, [r7, #28]
 800f7c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f7ce:	f7f1 fa13 	bl	8000bf8 <__aeabi_uldivmod>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d02a      	beq.n	800f836 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f7e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f7e4:	f04f 0200 	mov.w	r2, #0
 800f7e8:	f04f 0300 	mov.w	r3, #0
 800f7ec:	02cb      	lsls	r3, r1, #11
 800f7ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f7f2:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800f7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7f6:	0849      	lsrs	r1, r1, #1
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	6139      	str	r1, [r7, #16]
 800f7fc:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f7fe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f802:	4621      	mov	r1, r4
 800f804:	1851      	adds	r1, r2, r1
 800f806:	6039      	str	r1, [r7, #0]
 800f808:	4629      	mov	r1, r5
 800f80a:	eb43 0101 	adc.w	r1, r3, r1
 800f80e:	6079      	str	r1, [r7, #4]
 800f810:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f814:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800f818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81a:	2200      	movs	r2, #0
 800f81c:	60bb      	str	r3, [r7, #8]
 800f81e:	60fa      	str	r2, [r7, #12]
 800f820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f824:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f828:	f7f1 f9e6 	bl	8000bf8 <__aeabi_uldivmod>
 800f82c:	4602      	mov	r2, r0
 800f82e:	460b      	mov	r3, r1
 800f830:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800f834:	e00b      	b.n	800f84e <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800f836:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f83a:	f04f 0200 	mov.w	r2, #0
 800f83e:	f04f 0300 	mov.w	r3, #0
 800f842:	02cb      	lsls	r3, r1, #11
 800f844:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f848:	02c2      	lsls	r2, r0, #11
 800f84a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800f84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f850:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800f852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f854:	4618      	mov	r0, r3
 800f856:	3758      	adds	r7, #88	; 0x58
 800f858:	46bd      	mov	sp, r7
 800f85a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f85e <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800f85e:	b480      	push	{r7}
 800f860:	b085      	sub	sp, #20
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800f86a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f86e:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800f870:	e002      	b.n	800f878 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	089b      	lsrs	r3, r3, #2
 800f876:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800f878:	68ba      	ldr	r2, [r7, #8]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d8f8      	bhi.n	800f872 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800f880:	e017      	b.n	800f8b2 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	4413      	add	r3, r2
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d30b      	bcc.n	800f8a6 <VL53L1_isqrt+0x48>
			num -= res + bit;
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	4413      	add	r3, r2
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	60fb      	str	r3, [r7, #12]
 800f8a4:	e002      	b.n	800f8ac <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	085b      	lsrs	r3, r3, #1
 800f8aa:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	089b      	lsrs	r3, r3, #2
 800f8b0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e4      	bne.n	800f882 <VL53L1_isqrt+0x24>
	}

	return res;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr

0800f8c6 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b084      	sub	sp, #16
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f000 faa5 	bl	800fe2c <VL53L1_decode_vcsel_period>
 800f8e2:	4603      	mov	r3, r0
	period = 2048 *
 800f8e4:	02db      	lsls	r3, r3, #11
 800f8e6:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f900:	02db      	lsls	r3, r3, #11
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	4413      	add	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f90e:	02db      	lsls	r3, r3, #11
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d009      	beq.n	800f930 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	fbb3 f2f2 	udiv	r2, r3, r2
 800f924:	68b9      	ldr	r1, [r7, #8]
 800f926:	fb01 f202 	mul.w	r2, r1, r2
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	e001      	b.n	800f934 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800f93e:	bf00      	nop
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800f958:	6838      	ldr	r0, [r7, #0]
 800f95a:	f000 fb90 	bl	801007e <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff ff7a 	bl	800f85e <VL53L1_isqrt>
 800f96a:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800f96c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	fb02 f303 	mul.w	r3, r2, r3
 800f976:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	3307      	adds	r3, #7
 800f97c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	111b      	asrs	r3, r3, #4
 800f982:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	4413      	add	r3, r2
 800f98e:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2200      	movs	r2, #0
 800f99c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]
 800f9a4:	e01e      	b.n	800f9e4 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800f9a6:	7bfa      	ldrb	r2, [r7, #15]
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	3206      	adds	r2, #6
 800f9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	dd13      	ble.n	800f9de <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f9bc:	7bf9      	ldrb	r1, [r7, #15]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	3106      	adds	r1, #6
 800f9c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9c6:	441a      	add	r2, r3
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	73fb      	strb	r3, [r7, #15]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	7a9b      	ldrb	r3, [r3, #10]
 800f9e8:	7bfa      	ldrb	r2, [r7, #15]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d3db      	bcc.n	800f9a6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d01c      	beq.n	800fa32 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800fa10:	0852      	lsrs	r2, r2, #1
 800fa12:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800fa14:	441a      	add	r2, r3
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800fa28:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	7b1b      	ldrb	r3, [r3, #12]
 800fa52:	f003 0307 	and.w	r3, r3, #7
 800fa56:	2b07      	cmp	r3, #7
 800fa58:	d13a      	bne.n	800fad0 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73bb      	strb	r3, [r7, #14]
 800fa62:	e01f      	b.n	800faa4 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	4413      	add	r3, r2
 800fa6a:	7b1b      	ldrb	r3, [r3, #12]
 800fa6c:	f003 0307 	and.w	r3, r3, #7
 800fa70:	2b07      	cmp	r3, #7
 800fa72:	d014      	beq.n	800fa9e <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800fa74:	7bba      	ldrb	r2, [r7, #14]
 800fa76:	7b7b      	ldrb	r3, [r7, #13]
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	440a      	add	r2, r1
 800fa7c:	7b11      	ldrb	r1, [r2, #12]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	4413      	add	r3, r2
 800fa82:	460a      	mov	r2, r1
 800fa84:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800fa86:	7bba      	ldrb	r2, [r7, #14]
 800fa88:	7b7b      	ldrb	r3, [r7, #13]
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	440a      	add	r2, r1
 800fa8e:	7c91      	ldrb	r1, [r2, #18]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	4413      	add	r3, r2
 800fa94:	460a      	mov	r2, r1
 800fa96:	749a      	strb	r2, [r3, #18]
				i++;
 800fa98:	7b7b      	ldrb	r3, [r7, #13]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
 800faa0:	3301      	adds	r3, #1
 800faa2:	73bb      	strb	r3, [r7, #14]
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
 800faa6:	2b05      	cmp	r3, #5
 800faa8:	d9dc      	bls.n	800fa64 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800faaa:	7b7b      	ldrb	r3, [r7, #13]
 800faac:	73bb      	strb	r3, [r7, #14]
 800faae:	e00c      	b.n	800faca <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800fab0:	7bbb      	ldrb	r3, [r7, #14]
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	4413      	add	r3, r2
 800fab6:	2210      	movs	r2, #16
 800fab8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800faba:	7bbb      	ldrb	r3, [r7, #14]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	4413      	add	r3, r2
 800fac0:	2200      	movs	r2, #0
 800fac2:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fac4:	7bbb      	ldrb	r3, [r7, #14]
 800fac6:	3301      	adds	r3, #1
 800fac8:	73bb      	strb	r3, [r7, #14]
 800faca:	7bbb      	ldrb	r3, [r7, #14]
 800facc:	2b05      	cmp	r3, #5
 800face:	d9ef      	bls.n	800fab0 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	7adb      	ldrb	r3, [r3, #11]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d023      	beq.n	800fb20 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	7adb      	ldrb	r3, [r3, #11]
 800fadc:	73fb      	strb	r3, [r7, #15]
 800fade:	e00f      	b.n	800fb00 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800fae0:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	7ad2      	ldrb	r2, [r2, #11]
 800fae8:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	3106      	adds	r1, #6
 800faee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3206      	adds	r2, #6
 800faf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800fafa:	7bfb      	ldrb	r3, [r7, #15]
 800fafc:	3301      	adds	r3, #1
 800fafe:	73fb      	strb	r3, [r7, #15]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800fb04:	7bfa      	ldrb	r2, [r7, #15]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d3ea      	bcc.n	800fae0 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	72da      	strb	r2, [r3, #11]
	}
}
 800fb20:	bf00      	nop
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	4603      	mov	r3, r0
 800fb34:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800fb3e:	88fb      	ldrh	r3, [r7, #6]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff fd83 	bl	800f64c <VL53L1_calc_pll_period_us>
 800fb46:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800fb4c:	f249 2257 	movw	r2, #37463	; 0x9257
 800fb50:	fb02 f303 	mul.w	r3, r2, r3
 800fb54:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fb5c:	0c1b      	lsrs	r3, r3, #16
 800fb5e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800fb60:	68bb      	ldr	r3, [r7, #8]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b087      	sub	sp, #28
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800fb78:	2307      	movs	r3, #7
 800fb7a:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb86:	db03      	blt.n	800fb90 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800fb88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fb8c:	617b      	str	r3, [r7, #20]
 800fb8e:	e004      	b.n	800fb9a <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	dd01      	ble.n	800fb9a <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fba0:	dd02      	ble.n	800fba8 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800fba2:	2303      	movs	r3, #3
 800fba4:	613b      	str	r3, [r7, #16]
 800fba6:	e001      	b.n	800fbac <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800fba8:	2307      	movs	r3, #7
 800fbaa:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	409a      	lsls	r2, r3
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	085b      	lsrs	r3, r3, #1
 800fbbc:	441a      	add	r2, r3
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbc4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbcc:	dd02      	ble.n	800fbd4 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbda:	d302      	bcc.n	800fbe2 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800fbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbe0:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800fbe6:	89fb      	ldrh	r3, [r7, #14]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	371c      	adds	r7, #28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b087      	sub	sp, #28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	603b      	str	r3, [r7, #0]
 800fc00:	4613      	mov	r3, r2
 800fc02:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800fc0c:	88fb      	ldrh	r3, [r7, #6]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d010      	beq.n	800fc34 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	021a      	lsls	r2, r3, #8
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	fa02 f303 	lsl.w	r3, r2, r3
 800fc1c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800fc1e:	88fb      	ldrh	r3, [r7, #6]
 800fc20:	085b      	lsrs	r3, r3, #1
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800fc2a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800fc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc30:	617b      	str	r3, [r7, #20]
 800fc32:	e004      	b.n	800fc3e <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800fc34:	68ba      	ldr	r2, [r7, #8]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	fa02 f303 	lsl.w	r3, r2, r3
 800fc3c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800fc3e:	697a      	ldr	r2, [r7, #20]
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d901      	bls.n	800fc4a <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800fc4e:	8a7b      	ldrh	r3, [r7, #18]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	371c      	adds	r7, #28
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc60:	b093      	sub	sp, #76	; 0x4c
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	461e      	mov	r6, r3
 800fc66:	4603      	mov	r3, r0
 800fc68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fc6e:	4613      	mov	r3, r2
 800fc70:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fc72:	4633      	mov	r3, r6
 800fc74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800fc7c:	f04f 0200 	mov.w	r2, #0
 800fc80:	f04f 0300 	mov.w	r3, #0
 800fc84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800fc90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff fcda 	bl	800f64c <VL53L1_calc_pll_period_us>
 800fc98:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800fc9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	623b      	str	r3, [r7, #32]
 800fca0:	627a      	str	r2, [r7, #36]	; 0x24
 800fca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fca4:	2200      	movs	r2, #0
 800fca6:	61bb      	str	r3, [r7, #24]
 800fca8:	61fa      	str	r2, [r7, #28]
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	613b      	str	r3, [r7, #16]
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	460a      	mov	r2, r1
 800fcba:	eb63 0302 	sbc.w	r3, r3, r2
 800fcbe:	617b      	str	r3, [r7, #20]
 800fcc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fcc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800fcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcca:	2200      	movs	r2, #0
 800fccc:	469a      	mov	sl, r3
 800fcce:	4693      	mov	fp, r2
 800fcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd2:	fb0a f203 	mul.w	r2, sl, r3
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	fb0b f303 	mul.w	r3, fp, r3
 800fcdc:	4413      	add	r3, r2
 800fcde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fce0:	fba2 890a 	umull	r8, r9, r2, sl
 800fce4:	444b      	add	r3, r9
 800fce6:	4699      	mov	r9, r3
 800fce8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800fcec:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800fcf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	da08      	bge.n	800fd0a <VL53L1_range_maths+0xae>
 800fcf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fcfc:	1851      	adds	r1, r2, r1
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	f143 0300 	adc.w	r3, r3, #0
 800fd04:	60fb      	str	r3, [r7, #12]
 800fd06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd0a:	f04f 0000 	mov.w	r0, #0
 800fd0e:	f04f 0100 	mov.w	r1, #0
 800fd12:	0a50      	lsrs	r0, r2, #9
 800fd14:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800fd18:	1259      	asrs	r1, r3, #9
 800fd1a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800fd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd20:	f249 2257 	movw	r2, #37463	; 0x9257
 800fd24:	fb03 f202 	mul.w	r2, r3, r2
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	fb01 f303 	mul.w	r3, r1, r3
 800fd30:	4413      	add	r3, r2
 800fd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd34:	f249 2157 	movw	r1, #37463	; 0x9257
 800fd38:	fba2 4501 	umull	r4, r5, r2, r1
 800fd3c:	442b      	add	r3, r5
 800fd3e:	461d      	mov	r5, r3
 800fd40:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800fd44:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800fd48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	da07      	bge.n	800fd60 <VL53L1_range_maths+0x104>
 800fd50:	4934      	ldr	r1, [pc, #208]	; (800fe24 <VL53L1_range_maths+0x1c8>)
 800fd52:	1851      	adds	r1, r2, r1
 800fd54:	6039      	str	r1, [r7, #0]
 800fd56:	f143 0300 	adc.w	r3, r3, #0
 800fd5a:	607b      	str	r3, [r7, #4]
 800fd5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd60:	f04f 0000 	mov.w	r0, #0
 800fd64:	f04f 0100 	mov.w	r1, #0
 800fd68:	0d90      	lsrs	r0, r2, #22
 800fd6a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800fd6e:	1599      	asrs	r1, r3, #22
 800fd70:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fd78:	4413      	add	r3, r2
 800fd7a:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800fd7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd80:	fb02 f303 	mul.w	r3, r2, r3
 800fd84:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800fd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd8c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800fd8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	da01      	bge.n	800fd98 <VL53L1_range_maths+0x13c>
 800fd94:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800fd98:	12db      	asrs	r3, r3, #11
 800fd9a:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800fd9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d130      	bne.n	800fe06 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800fda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800fdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	da00      	bge.n	800fdb8 <VL53L1_range_maths+0x15c>
 800fdb6:	3303      	adds	r3, #3
 800fdb8:	109b      	asrs	r3, r3, #2
 800fdba:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800fdbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdbe:	4b1a      	ldr	r3, [pc, #104]	; (800fe28 <VL53L1_range_maths+0x1cc>)
 800fdc0:	fb83 2301 	smull	r2, r3, r3, r1
 800fdc4:	109a      	asrs	r2, r3, #2
 800fdc6:	17cb      	asrs	r3, r1, #31
 800fdc8:	1ad2      	subs	r2, r2, r3
 800fdca:	4613      	mov	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4413      	add	r3, r2
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	1aca      	subs	r2, r1, r3
 800fdd4:	2a04      	cmp	r2, #4
 800fdd6:	dc09      	bgt.n	800fdec <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800fdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdda:	4a13      	ldr	r2, [pc, #76]	; (800fe28 <VL53L1_range_maths+0x1cc>)
 800fddc:	fb82 1203 	smull	r1, r2, r2, r3
 800fde0:	1092      	asrs	r2, r2, #2
 800fde2:	17db      	asrs	r3, r3, #31
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	b21b      	sxth	r3, r3
 800fde8:	647b      	str	r3, [r7, #68]	; 0x44
 800fdea:	e015      	b.n	800fe18 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800fdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdee:	4a0e      	ldr	r2, [pc, #56]	; (800fe28 <VL53L1_range_maths+0x1cc>)
 800fdf0:	fb82 1203 	smull	r1, r2, r2, r3
 800fdf4:	1092      	asrs	r2, r2, #2
 800fdf6:	17db      	asrs	r3, r3, #31
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	b21b      	sxth	r3, r3
 800fe02:	647b      	str	r3, [r7, #68]	; 0x44
 800fe04:	e008      	b.n	800fe18 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800fe06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d104      	bne.n	800fe18 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800fe0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe10:	0fda      	lsrs	r2, r3, #31
 800fe12:	4413      	add	r3, r2
 800fe14:	105b      	asrs	r3, r3, #1
 800fe16:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800fe18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	374c      	adds	r7, #76	; 0x4c
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe24:	003fffff 	.word	0x003fffff
 800fe28:	66666667 	.word	0x66666667

0800fe2c <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b085      	sub	sp, #20
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	005b      	lsls	r3, r3, #1
 800fe42:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3714      	adds	r7, #20
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b083      	sub	sp, #12
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
 800fe5a:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	781a      	ldrb	r2, [r3, #0]
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	7a5a      	ldrb	r2, [r3, #9]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	605a      	str	r2, [r3, #4]
}
 800fec2:	bf00      	nop
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800fece:	b480      	push	{r7}
 800fed0:	b087      	sub	sp, #28
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	60f8      	str	r0, [r7, #12]
 800fed6:	460b      	mov	r3, r1
 800fed8:	607a      	str	r2, [r7, #4]
 800feda:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2203      	movs	r2, #3
 800fee4:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2203      	movs	r2, #3
 800feea:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2218      	movs	r2, #24
 800ff02:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ff04:	897b      	ldrh	r3, [r7, #10]
 800ff06:	b2da      	uxtb	r2, r3
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	82fb      	strh	r3, [r7, #22]
 800ffa6:	e009      	b.n	800ffbc <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ffa8:	8afb      	ldrh	r3, [r7, #22]
 800ffaa:	8afa      	ldrh	r2, [r7, #22]
 800ffac:	b2d1      	uxtb	r1, r2
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	460a      	mov	r2, r1
 800ffb4:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffb6:	8afb      	ldrh	r3, [r7, #22]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	82fb      	strh	r3, [r7, #22]
 800ffbc:	8afb      	ldrh	r3, [r7, #22]
 800ffbe:	2b05      	cmp	r3, #5
 800ffc0:	d9f2      	bls.n	800ffa8 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	82fb      	strh	r3, [r7, #22]
 800ffc6:	e007      	b.n	800ffd8 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ffc8:	8afb      	ldrh	r3, [r7, #22]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	4413      	add	r3, r2
 800ffce:	2201      	movs	r2, #1
 800ffd0:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffd2:	8afb      	ldrh	r3, [r7, #22]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	82fb      	strh	r3, [r7, #22]
 800ffd8:	8afb      	ldrh	r3, [r7, #22]
 800ffda:	2b05      	cmp	r3, #5
 800ffdc:	d9f4      	bls.n	800ffc8 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ffde:	2300      	movs	r3, #0
 800ffe0:	82fb      	strh	r3, [r7, #22]
 800ffe2:	e013      	b.n	801000c <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800ffe4:	8afa      	ldrh	r2, [r7, #22]
 800ffe6:	897b      	ldrh	r3, [r7, #10]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d206      	bcs.n	800fffa <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800ffec:	8afa      	ldrh	r2, [r7, #22]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	3206      	adds	r2, #6
 800fff2:	68f9      	ldr	r1, [r7, #12]
 800fff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fff8:	e005      	b.n	8010006 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800fffa:	8afa      	ldrh	r2, [r7, #22]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3206      	adds	r2, #6
 8010000:	2100      	movs	r1, #0
 8010002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8010006:	8afb      	ldrh	r3, [r7, #22]
 8010008:	3301      	adds	r3, #1
 801000a:	82fb      	strh	r3, [r7, #22]
 801000c:	8afb      	ldrh	r3, [r7, #22]
 801000e:	2b17      	cmp	r3, #23
 8010010:	d9e8      	bls.n	800ffe4 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 8010012:	bf00      	nop
 8010014:	bf00      	nop
 8010016:	371c      	adds	r7, #28
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	4603      	mov	r3, r0
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 801002e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010032:	2b00      	cmp	r3, #0
 8010034:	da10      	bge.n	8010058 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	43db      	mvns	r3, r3
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 0307 	and.w	r3, r3, #7
 8010040:	b2db      	uxtb	r3, r3
 8010042:	3308      	adds	r3, #8
 8010044:	b2da      	uxtb	r2, r3
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	3b80      	subs	r3, #128	; 0x80
 801004e:	10db      	asrs	r3, r3, #3
 8010050:	b2da      	uxtb	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8010056:	e00c      	b.n	8010072 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8010058:	7bfb      	ldrb	r3, [r7, #15]
 801005a:	f003 0307 	and.w	r3, r3, #7
 801005e:	b2da      	uxtb	r2, r3
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801006a:	10db      	asrs	r3, r3, #3
 801006c:	b2da      	uxtb	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	701a      	strb	r2, [r3, #0]
}
 8010072:	bf00      	nop
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr

0801007e <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801007e:	b480      	push	{r7}
 8010080:	b085      	sub	sp, #20
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 801008a:	2300      	movs	r3, #0
 801008c:	73fb      	strb	r3, [r7, #15]
 801008e:	e02c      	b.n	80100ea <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d009      	beq.n	80100aa <VL53L1_hist_find_min_max_bin_values+0x2c>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801009c:	7bf9      	ldrb	r1, [r7, #15]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3106      	adds	r1, #6
 80100a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	db07      	blt.n	80100ba <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 80100aa:	7bfa      	ldrb	r2, [r7, #15]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3206      	adds	r2, #6
 80100b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d009      	beq.n	80100d4 <VL53L1_hist_find_min_max_bin_values+0x56>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80100c6:	7bf9      	ldrb	r1, [r7, #15]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	3106      	adds	r1, #6
 80100cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	dc07      	bgt.n	80100e4 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 80100d4:	7bfa      	ldrb	r2, [r7, #15]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	3206      	adds	r2, #6
 80100da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	3301      	adds	r3, #1
 80100e8:	73fb      	strb	r3, [r7, #15]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7a9b      	ldrb	r3, [r3, #10]
 80100ee:	7bfa      	ldrb	r2, [r7, #15]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d3cd      	bcc.n	8010090 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 80100f4:	bf00      	nop
 80100f6:	bf00      	nop
 80100f8:	3714      	adds	r7, #20
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8010102:	b480      	push	{r7}
 8010104:	b085      	sub	sp, #20
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7adb      	ldrb	r3, [r3, #11]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d03a      	beq.n	801018c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8010128:	2300      	movs	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
 801012c:	e00e      	b.n	801014c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8010134:	7bf9      	ldrb	r1, [r7, #15]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	3106      	adds	r1, #6
 801013a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801013e:	441a      	add	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	3301      	adds	r3, #1
 801014a:	73fb      	strb	r3, [r7, #15]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	7adb      	ldrb	r3, [r3, #11]
 8010150:	7bfa      	ldrb	r2, [r7, #15]
 8010152:	429a      	cmp	r2, r3
 8010154:	d3eb      	bcc.n	801012e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	7ad2      	ldrb	r2, [r2, #11]
 801016c:	0852      	lsrs	r2, r2, #1
 801016e:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8010170:	441a      	add	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 8010182:	fb93 f2f2 	sdiv	r2, r3, r2
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 801018c:	bf00      	nop
 801018e:	3714      	adds	r7, #20
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 8010198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801019c:	b0ca      	sub	sp, #296	; 0x128
 801019e:	af00      	add	r7, sp, #0
 80101a0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80101a4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80101a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80101ac:	4603      	mov	r3, r0
 80101ae:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80101b2:	2300      	movs	r3, #0
 80101b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 80101ca:	f04f 0200 	mov.w	r2, #0
 80101ce:	f04f 0300 	mov.w	r3, #0
 80101d2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 80101d6:	2300      	movs	r3, #0
 80101d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 80101dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80101e0:	2300      	movs	r3, #0
 80101e2:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 80101e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80101e8:	2300      	movs	r3, #0
 80101ea:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 80101ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80101f0:	2300      	movs	r3, #0
 80101f2:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 80101f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80101f8:	2300      	movs	r3, #0
 80101fa:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 80101fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010200:	2300      	movs	r3, #0
 8010202:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 8010204:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010208:	2300      	movs	r3, #0
 801020a:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 801020c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010210:	2300      	movs	r3, #0
 8010212:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 8010214:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010218:	2300      	movs	r3, #0
 801021a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 801021c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010220:	2300      	movs	r3, #0
 8010222:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 8010224:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010228:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 80e1 	beq.w	80103f4 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 8010232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 80da 	beq.w	80103f4 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8010240:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010244:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010248:	4618      	mov	r0, r3
 801024a:	f7ff f9ff 	bl	800f64c <VL53L1_calc_pll_period_us>
 801024e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 8010252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801025a:	3301      	adds	r3, #1
 801025c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 8010260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010268:	2110      	movs	r1, #16
 801026a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801026e:	f7ff fa04 	bl	800f67a <VL53L1_duration_maths>
 8010272:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 8010274:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010278:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 801027a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801027e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010282:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4619      	mov	r1, r3
 801028a:	4610      	mov	r0, r2
 801028c:	f7ff fc6d 	bl	800fb6a <VL53L1_rate_maths>
 8010290:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 8010292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010296:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 8010298:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801029c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80102a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102a4:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 80102a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	461a      	mov	r2, r3
 80102b0:	f7ff fa3c 	bl	800f72c <VL53L1_events_per_spad_maths>
 80102b4:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 80102b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102ba:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 80102bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102c0:	8adb      	ldrh	r3, [r3, #22]
 80102c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80102c6:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 80102c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102cc:	8adb      	ldrh	r3, [r3, #22]
 80102ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80102d2:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 80102d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 808a 	beq.w	80103f4 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 80102e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102e4:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	2200      	movs	r2, #0
 80102ea:	461c      	mov	r4, r3
 80102ec:	4615      	mov	r5, r2
 80102ee:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 80102f2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80102f6:	4622      	mov	r2, r4
 80102f8:	462b      	mov	r3, r5
 80102fa:	f04f 0000 	mov.w	r0, #0
 80102fe:	f04f 0100 	mov.w	r1, #0
 8010302:	0159      	lsls	r1, r3, #5
 8010304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010308:	0150      	lsls	r0, r2, #5
 801030a:	4602      	mov	r2, r0
 801030c:	460b      	mov	r3, r1
 801030e:	ebb2 0804 	subs.w	r8, r2, r4
 8010312:	eb63 0905 	sbc.w	r9, r3, r5
 8010316:	f04f 0200 	mov.w	r2, #0
 801031a:	f04f 0300 	mov.w	r3, #0
 801031e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010322:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010326:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801032a:	4690      	mov	r8, r2
 801032c:	4699      	mov	r9, r3
 801032e:	eb18 0a04 	adds.w	sl, r8, r4
 8010332:	eb49 0b05 	adc.w	fp, r9, r5
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	f04f 0300 	mov.w	r3, #0
 801033e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010342:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801034a:	4692      	mov	sl, r2
 801034c:	469b      	mov	fp, r3
 801034e:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8010352:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010356:	f04f 0000 	mov.w	r0, #0
 801035a:	f04f 0100 	mov.w	r1, #0
 801035e:	0319      	lsls	r1, r3, #12
 8010360:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010364:	0310      	lsls	r0, r2, #12
 8010366:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 801036a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801036e:	695b      	ldr	r3, [r3, #20]
 8010370:	085b      	lsrs	r3, r3, #1
 8010372:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 8010376:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801037a:	2200      	movs	r2, #0
 801037c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010384:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010388:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 801038c:	4621      	mov	r1, r4
 801038e:	1851      	adds	r1, r2, r1
 8010390:	65b9      	str	r1, [r7, #88]	; 0x58
 8010392:	4629      	mov	r1, r5
 8010394:	eb43 0101 	adc.w	r1, r3, r1
 8010398:	65f9      	str	r1, [r7, #92]	; 0x5c
 801039a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801039e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 80103a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80103b2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80103b6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80103ba:	f7f0 fc1d 	bl	8000bf8 <__aeabi_uldivmod>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 80103c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80103ca:	8adb      	ldrh	r3, [r3, #22]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80103d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80103d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80103dc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80103e0:	4621      	mov	r1, r4
 80103e2:	428a      	cmp	r2, r1
 80103e4:	4629      	mov	r1, r5
 80103e6:	418b      	sbcs	r3, r1
 80103e8:	d204      	bcs.n	80103f4 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 80103ea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80103ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80103f2:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 80103f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80103f8:	881b      	ldrh	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 82e9 	beq.w	80109d2 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8010400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010404:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 8010408:	2b00      	cmp	r3, #0
 801040a:	f000 82e2 	beq.w	80109d2 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 801040e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010412:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 82dc 	beq.w	80109d2 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 801041a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 82d5 	beq.w	80109d2 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8010428:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801042c:	885b      	ldrh	r3, [r3, #2]
 801042e:	b29b      	uxth	r3, r3
 8010430:	2200      	movs	r2, #0
 8010432:	653b      	str	r3, [r7, #80]	; 0x50
 8010434:	657a      	str	r2, [r7, #84]	; 0x54
 8010436:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801043a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 801043e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8010442:	4622      	mov	r2, r4
 8010444:	462b      	mov	r3, r5
 8010446:	f04f 0000 	mov.w	r0, #0
 801044a:	f04f 0100 	mov.w	r1, #0
 801044e:	0159      	lsls	r1, r3, #5
 8010450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010454:	0150      	lsls	r0, r2, #5
 8010456:	4602      	mov	r2, r0
 8010458:	460b      	mov	r3, r1
 801045a:	1b11      	subs	r1, r2, r4
 801045c:	64b9      	str	r1, [r7, #72]	; 0x48
 801045e:	eb63 0305 	sbc.w	r3, r3, r5
 8010462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010464:	f04f 0200 	mov.w	r2, #0
 8010468:	f04f 0300 	mov.w	r3, #0
 801046c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8010470:	4649      	mov	r1, r9
 8010472:	008b      	lsls	r3, r1, #2
 8010474:	4641      	mov	r1, r8
 8010476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801047a:	4641      	mov	r1, r8
 801047c:	008a      	lsls	r2, r1, #2
 801047e:	4611      	mov	r1, r2
 8010480:	461a      	mov	r2, r3
 8010482:	460b      	mov	r3, r1
 8010484:	191b      	adds	r3, r3, r4
 8010486:	643b      	str	r3, [r7, #64]	; 0x40
 8010488:	4613      	mov	r3, r2
 801048a:	eb45 0303 	adc.w	r3, r5, r3
 801048e:	647b      	str	r3, [r7, #68]	; 0x44
 8010490:	f04f 0200 	mov.w	r2, #0
 8010494:	f04f 0300 	mov.w	r3, #0
 8010498:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801049c:	4629      	mov	r1, r5
 801049e:	02cb      	lsls	r3, r1, #11
 80104a0:	4621      	mov	r1, r4
 80104a2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80104a6:	4621      	mov	r1, r4
 80104a8:	02ca      	lsls	r2, r1, #11
 80104aa:	461c      	mov	r4, r3
 80104ac:	4613      	mov	r3, r2
 80104ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 80104b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	085b      	lsrs	r3, r3, #1
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 80104c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80104c4:	2200      	movs	r2, #0
 80104c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80104ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80104ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80104d2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80104d6:	4621      	mov	r1, r4
 80104d8:	1851      	adds	r1, r2, r1
 80104da:	63b9      	str	r1, [r7, #56]	; 0x38
 80104dc:	4629      	mov	r1, r5
 80104de:	eb43 0101 	adc.w	r1, r3, r1
 80104e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80104e4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80104e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 80104ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80104f0:	881b      	ldrh	r3, [r3, #0]
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	2200      	movs	r2, #0
 80104f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80104fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80104fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8010502:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010506:	f7f0 fb77 	bl	8000bf8 <__aeabi_uldivmod>
 801050a:	4602      	mov	r2, r0
 801050c:	460b      	mov	r3, r1
 801050e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8010512:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010516:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801051a:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 801051c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010520:	691b      	ldr	r3, [r3, #16]
 8010522:	011a      	lsls	r2, r3, #4
 8010524:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010528:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801052a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2200      	movs	r2, #0
 8010532:	633b      	str	r3, [r7, #48]	; 0x30
 8010534:	637a      	str	r2, [r7, #52]	; 0x34
 8010536:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801053a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 801053e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010542:	695b      	ldr	r3, [r3, #20]
 8010544:	2200      	movs	r2, #0
 8010546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801054a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801054e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010552:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8010556:	4622      	mov	r2, r4
 8010558:	fb02 f203 	mul.w	r2, r2, r3
 801055c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010560:	4629      	mov	r1, r5
 8010562:	fb01 f303 	mul.w	r3, r1, r3
 8010566:	441a      	add	r2, r3
 8010568:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801056c:	4621      	mov	r1, r4
 801056e:	fba3 1301 	umull	r1, r3, r3, r1
 8010572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010576:	460b      	mov	r3, r1
 8010578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801057c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010580:	18d3      	adds	r3, r2, r3
 8010582:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010586:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801058a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 801058e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8010592:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010596:	8b5b      	ldrh	r3, [r3, #26]
 8010598:	b29b      	uxth	r3, r3
 801059a:	2200      	movs	r2, #0
 801059c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80105a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80105a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80105a8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80105ac:	4622      	mov	r2, r4
 80105ae:	fb02 f203 	mul.w	r2, r2, r3
 80105b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105b6:	4629      	mov	r1, r5
 80105b8:	fb01 f303 	mul.w	r3, r1, r3
 80105bc:	441a      	add	r2, r3
 80105be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105c2:	4621      	mov	r1, r4
 80105c4:	fba3 1301 	umull	r1, r3, r3, r1
 80105c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80105cc:	460b      	mov	r3, r1
 80105ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80105d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105d6:	18d3      	adds	r3, r2, r3
 80105d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80105dc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80105e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80105e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 80105e8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80105ec:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 80105f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80105f2:	f143 0300 	adc.w	r3, r3, #0
 80105f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80105fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010600:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010604:	f04f 0000 	mov.w	r0, #0
 8010608:	f04f 0100 	mov.w	r1, #0
 801060c:	0cd0      	lsrs	r0, r2, #19
 801060e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010612:	0cd9      	lsrs	r1, r3, #19
 8010614:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8010618:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801061c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8010620:	6239      	str	r1, [r7, #32]
 8010622:	f143 0300 	adc.w	r3, r3, #0
 8010626:	627b      	str	r3, [r7, #36]	; 0x24
 8010628:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801062c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8010630:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010638:	f04f 0300 	mov.w	r3, #0
 801063c:	f7f0 fadc 	bl	8000bf8 <__aeabi_uldivmod>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8010648:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801064c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010650:	f173 0300 	sbcs.w	r3, r3, #0
 8010654:	d305      	bcc.n	8010662 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8010656:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801065a:	f04f 0300 	mov.w	r3, #0
 801065e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8010662:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010666:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801066a:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801066c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2200      	movs	r2, #0
 8010674:	61bb      	str	r3, [r7, #24]
 8010676:	61fa      	str	r2, [r7, #28]
 8010678:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801067c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 8010680:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	2200      	movs	r2, #0
 8010688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801068c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010694:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8010698:	4622      	mov	r2, r4
 801069a:	fb02 f203 	mul.w	r2, r2, r3
 801069e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80106a2:	4629      	mov	r1, r5
 80106a4:	fb01 f303 	mul.w	r3, r1, r3
 80106a8:	441a      	add	r2, r3
 80106aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80106ae:	4621      	mov	r1, r4
 80106b0:	fba3 1301 	umull	r1, r3, r3, r1
 80106b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80106b8:	460b      	mov	r3, r1
 80106ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80106be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106c2:	18d3      	adds	r3, r2, r3
 80106c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80106c8:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80106cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80106d0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80106d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106d8:	8b5b      	ldrh	r3, [r3, #26]
 80106da:	b29b      	uxth	r3, r3
 80106dc:	2200      	movs	r2, #0
 80106de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106e2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80106e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80106ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80106ee:	4622      	mov	r2, r4
 80106f0:	fb02 f203 	mul.w	r2, r2, r3
 80106f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80106f8:	4629      	mov	r1, r5
 80106fa:	fb01 f303 	mul.w	r3, r1, r3
 80106fe:	441a      	add	r2, r3
 8010700:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010704:	4621      	mov	r1, r4
 8010706:	fba3 1301 	umull	r1, r3, r3, r1
 801070a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801070e:	460b      	mov	r3, r1
 8010710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010718:	18d3      	adds	r3, r2, r3
 801071a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801071e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8010722:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8010726:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 801072a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801072e:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8010732:	6139      	str	r1, [r7, #16]
 8010734:	f143 0300 	adc.w	r3, r3, #0
 8010738:	617b      	str	r3, [r7, #20]
 801073a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801073e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010742:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010746:	f04f 0000 	mov.w	r0, #0
 801074a:	f04f 0100 	mov.w	r1, #0
 801074e:	0cd0      	lsrs	r0, r2, #19
 8010750:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010754:	0cd9      	lsrs	r1, r3, #19
 8010756:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 801075a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801075e:	2200      	movs	r2, #0
 8010760:	67bb      	str	r3, [r7, #120]	; 0x78
 8010762:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 8010764:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010768:	891b      	ldrh	r3, [r3, #8]
 801076a:	b29b      	uxth	r3, r3
 801076c:	2200      	movs	r2, #0
 801076e:	673b      	str	r3, [r7, #112]	; 0x70
 8010770:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 8010772:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8010776:	462b      	mov	r3, r5
 8010778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801077c:	4642      	mov	r2, r8
 801077e:	fb02 f203 	mul.w	r2, r2, r3
 8010782:	464b      	mov	r3, r9
 8010784:	4621      	mov	r1, r4
 8010786:	fb01 f303 	mul.w	r3, r1, r3
 801078a:	4413      	add	r3, r2
 801078c:	4622      	mov	r2, r4
 801078e:	4641      	mov	r1, r8
 8010790:	fba2 1201 	umull	r1, r2, r2, r1
 8010794:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010798:	460a      	mov	r2, r1
 801079a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801079e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80107a2:	4413      	add	r3, r2
 80107a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80107a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80107ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80107b0:	4622      	mov	r2, r4
 80107b2:	fb02 f203 	mul.w	r2, r2, r3
 80107b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80107ba:	4629      	mov	r1, r5
 80107bc:	fb01 f303 	mul.w	r3, r1, r3
 80107c0:	4413      	add	r3, r2
 80107c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80107c6:	4621      	mov	r1, r4
 80107c8:	fba2 1201 	umull	r1, r2, r2, r1
 80107cc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80107d0:	460a      	mov	r2, r1
 80107d2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80107d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80107da:	4413      	add	r3, r2
 80107dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80107e0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80107e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80107e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 80107ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80107f0:	88db      	ldrh	r3, [r3, #6]
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	2200      	movs	r2, #0
 80107f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80107f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80107fa:	f04f 0200 	mov.w	r2, #0
 80107fe:	f04f 0300 	mov.w	r3, #0
 8010802:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010806:	4629      	mov	r1, r5
 8010808:	01cb      	lsls	r3, r1, #7
 801080a:	4621      	mov	r1, r4
 801080c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010810:	4621      	mov	r1, r4
 8010812:	01ca      	lsls	r2, r1, #7
 8010814:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010818:	1884      	adds	r4, r0, r2
 801081a:	60bc      	str	r4, [r7, #8]
 801081c:	eb41 0303 	adc.w	r3, r1, r3
 8010820:	60fb      	str	r3, [r7, #12]
 8010822:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010826:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 801082a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801082e:	88db      	ldrh	r3, [r3, #6]
 8010830:	b29b      	uxth	r3, r3
 8010832:	2200      	movs	r2, #0
 8010834:	663b      	str	r3, [r7, #96]	; 0x60
 8010836:	667a      	str	r2, [r7, #100]	; 0x64
 8010838:	f04f 0200 	mov.w	r2, #0
 801083c:	f04f 0300 	mov.w	r3, #0
 8010840:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010844:	4629      	mov	r1, r5
 8010846:	020b      	lsls	r3, r1, #8
 8010848:	4621      	mov	r1, r4
 801084a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 801084e:	4621      	mov	r1, r4
 8010850:	020a      	lsls	r2, r1, #8
 8010852:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010856:	f7f0 f9cf 	bl	8000bf8 <__aeabi_uldivmod>
 801085a:	4602      	mov	r2, r0
 801085c:	460b      	mov	r3, r1
 801085e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8010862:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010866:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 801086a:	6039      	str	r1, [r7, #0]
 801086c:	f143 0300 	adc.w	r3, r3, #0
 8010870:	607b      	str	r3, [r7, #4]
 8010872:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010876:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 801087a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801087e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010882:	f04f 0300 	mov.w	r3, #0
 8010886:	f7f0 f9b7 	bl	8000bf8 <__aeabi_uldivmod>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8010892:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010896:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801089a:	f173 0300 	sbcs.w	r3, r3, #0
 801089e:	d305      	bcc.n	80108ac <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 80108a0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80108a4:	f04f 0300 	mov.w	r3, #0
 80108a8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 80108ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80108b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108b4:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 80108b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108ba:	69db      	ldr	r3, [r3, #28]
 80108bc:	021b      	lsls	r3, r3, #8
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe ffcd 	bl	800f85e <VL53L1_isqrt>
 80108c4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80108c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108cc:	785b      	ldrb	r3, [r3, #1]
 80108ce:	461a      	mov	r2, r3
 80108d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80108d4:	fb02 f303 	mul.w	r3, r2, r3
 80108d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 80108dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108e0:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 80108e2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80108e6:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d218      	bcs.n	801091e <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 80108ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 80108f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108f8:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8010900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010904:	021b      	lsls	r3, r3, #8
 8010906:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 801090a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801090e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010912:	429a      	cmp	r2, r3
 8010914:	d203      	bcs.n	801091e <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 8010916:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801091a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 801091e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010922:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 8010924:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010928:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 801092a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 801092c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010930:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8010932:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010936:	f000 f854 	bl	80109e2 <VL53L1_f_002>
 801093a:	4603      	mov	r3, r0
 801093c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 801093e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010942:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 8010944:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010948:	6a1b      	ldr	r3, [r3, #32]
 801094a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 801094e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010952:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8010956:	461a      	mov	r2, r3
 8010958:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801095c:	fb02 f303 	mul.w	r3, r2, r3
 8010960:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 8010964:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010968:	3308      	adds	r3, #8
 801096a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 801096e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010972:	091b      	lsrs	r3, r3, #4
 8010974:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8010978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801097c:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 801097e:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 8010980:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010984:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 8010986:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8010988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801098c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 801098e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010992:	f000 f826 	bl	80109e2 <VL53L1_f_002>
 8010996:	4603      	mov	r3, r0
 8010998:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 801099a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801099e:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 80109a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109a4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80109a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109ac:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80109b0:	429a      	cmp	r2, r3
 80109b2:	da07      	bge.n	80109c4 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 80109b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80109bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80109c0:	801a      	strh	r2, [r3, #0]
 80109c2:	e006      	b.n	80109d2 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 80109c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109c8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80109cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80109d0:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 80109d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 80109d6:	4618      	mov	r0, r3
 80109d8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80109dc:	46bd      	mov	sp, r7
 80109de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080109e2 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b086      	sub	sp, #24
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	60f8      	str	r0, [r7, #12]
 80109ea:	60b9      	str	r1, [r7, #8]
 80109ec:	607a      	str	r2, [r7, #4]
 80109ee:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 80109f0:	2300      	movs	r3, #0
 80109f2:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	fb03 f303 	mul.w	r3, r3, r3
 8010a04:	693a      	ldr	r2, [r7, #16]
 8010a06:	4413      	add	r3, r2
 8010a08:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8010a0a:	6938      	ldr	r0, [r7, #16]
 8010a0c:	f7fe ff27 	bl	800f85e <VL53L1_isqrt>
 8010a10:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8010a12:	693a      	ldr	r2, [r7, #16]
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	4413      	add	r3, r2
 8010a18:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	011b      	lsls	r3, r3, #4
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fe ff1d 	bl	800f85e <VL53L1_isqrt>
 8010a24:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	fb02 f303 	mul.w	r3, r2, r3
 8010a2e:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d009      	beq.n	8010a4a <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a48:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8010a4a:	697b      	ldr	r3, [r7, #20]

}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3718      	adds	r7, #24
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2218      	movs	r2, #24
 8010a64:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2200      	movs	r2, #0
 8010a76:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	73fb      	strb	r3, [r7, #15]
 8010a8a:	e01f      	b.n	8010acc <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	4413      	add	r3, r2
 8010a92:	2200      	movs	r2, #0
 8010a94:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8010aae:	7bfa      	ldrb	r2, [r7, #15]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	322e      	adds	r2, #46	; 0x2e
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8010aba:	7bfa      	ldrb	r2, [r7, #15]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3246      	adds	r2, #70	; 0x46
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	73fb      	strb	r3, [r7, #15]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	785b      	ldrb	r3, [r3, #1]
 8010ad0:	7bfa      	ldrb	r2, [r7, #15]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d3da      	bcc.n	8010a8c <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2208      	movs	r2, #8
 8010ae2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010af4:	461a      	mov	r2, r3
 8010af6:	2118      	movs	r1, #24
 8010af8:	2000      	movs	r0, #0
 8010afa:	f7ff f9e8 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010b04:	461a      	mov	r2, r3
 8010b06:	2118      	movs	r1, #24
 8010b08:	2000      	movs	r0, #0
 8010b0a:	f7ff f9e0 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010b14:	461a      	mov	r2, r3
 8010b16:	2118      	movs	r1, #24
 8010b18:	2000      	movs	r0, #0
 8010b1a:	f7ff f9d8 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010b24:	461a      	mov	r2, r3
 8010b26:	2118      	movs	r1, #24
 8010b28:	2000      	movs	r0, #0
 8010b2a:	f7ff f9d0 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010b34:	461a      	mov	r2, r3
 8010b36:	2118      	movs	r1, #24
 8010b38:	2000      	movs	r0, #0
 8010b3a:	f7ff f9c8 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 8010b3e:	bf00      	nop
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010b46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b4a:	b090      	sub	sp, #64	; 0x40
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	61b9      	str	r1, [r7, #24]
 8010b50:	617a      	str	r2, [r7, #20]
 8010b52:	461a      	mov	r2, r3
 8010b54:	4603      	mov	r3, r0
 8010b56:	83fb      	strh	r3, [r7, #30]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 8010b62:	2300      	movs	r3, #0
 8010b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 8010b6e:	f04f 0200 	mov.w	r2, #0
 8010b72:	f04f 0300 	mov.w	r3, #0
 8010b76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 8010b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b88:	7a5a      	ldrb	r2, [r3, #9]
 8010b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b8c:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8010b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b90:	7a1a      	ldrb	r2, [r3, #8]
 8010b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b94:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 8010b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b98:	7a9a      	ldrb	r2, [r3, #10]
 8010b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b9c:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8010b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ba0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ba6:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8010ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010baa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff f93c 	bl	800fe2c <VL53L1_decode_vcsel_period>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8010bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bba:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8010bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010bc2:	17da      	asrs	r2, r3, #31
 8010bc4:	60bb      	str	r3, [r7, #8]
 8010bc6:	60fa      	str	r2, [r7, #12]
 8010bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010bcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8010bd0:	8bfb      	ldrh	r3, [r7, #30]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4698      	mov	r8, r3
 8010bd6:	4691      	mov	r9, r2
 8010bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bda:	fb08 f203 	mul.w	r2, r8, r3
 8010bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be0:	fb09 f303 	mul.w	r3, r9, r3
 8010be4:	4413      	add	r3, r2
 8010be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010be8:	fba2 4508 	umull	r4, r5, r2, r8
 8010bec:	442b      	add	r3, r5
 8010bee:	461d      	mov	r5, r3
 8010bf0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8010bf4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8010bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010bfc:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8010c00:	f143 0b00 	adc.w	fp, r3, #0
 8010c04:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8010c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	da08      	bge.n	8010c22 <VL53L1_f_018+0xdc>
 8010c10:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010c14:	1851      	adds	r1, r2, r1
 8010c16:	6039      	str	r1, [r7, #0]
 8010c18:	f143 0300 	adc.w	r3, r3, #0
 8010c1c:	607b      	str	r3, [r7, #4]
 8010c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c22:	f04f 0000 	mov.w	r0, #0
 8010c26:	f04f 0100 	mov.w	r1, #0
 8010c2a:	0b10      	lsrs	r0, r2, #12
 8010c2c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010c30:	1319      	asrs	r1, r3, #12
 8010c32:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8010c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c38:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010c40:	e062      	b.n	8010d08 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 8010c42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c46:	089b      	lsrs	r3, r3, #2
 8010c48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8010c4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c52:	4413      	add	r3, r2
 8010c54:	7c9b      	ldrb	r3, [r3, #18]
 8010c56:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	dd4f      	ble.n	8010cfe <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8010c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c60:	7a9b      	ldrb	r3, [r3, #10]
 8010c62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d20f      	bcs.n	8010c8a <VL53L1_f_018+0x144>
 8010c6a:	7f7b      	ldrb	r3, [r7, #29]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00c      	beq.n	8010c8a <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8010c70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c76:	3206      	adds	r2, #6
 8010c78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	441a      	add	r2, r3
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	fb02 f303 	mul.w	r3, r2, r3
 8010c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c88:	e004      	b.n	8010c94 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8010c8a:	6a3b      	ldr	r3, [r7, #32]
 8010c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c8e:	fb02 f303 	mul.w	r3, r2, r3
 8010c92:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe fde1 	bl	800f85e <VL53L1_isqrt>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	0fda      	lsrs	r2, r3, #31
 8010ca4:	4413      	add	r3, r2
 8010ca6:	105b      	asrs	r3, r3, #1
 8010ca8:	461a      	mov	r2, r3
 8010caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cac:	4413      	add	r3, r2
 8010cae:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8010cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8010cb8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	69ba      	ldr	r2, [r7, #24]
 8010cbe:	fb02 f303 	mul.w	r3, r2, r3
 8010cc2:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	3308      	adds	r3, #8
 8010cc8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8010cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	da00      	bge.n	8010cd2 <VL53L1_f_018+0x18c>
 8010cd0:	330f      	adds	r3, #15
 8010cd2:	111b      	asrs	r3, r3, #4
 8010cd4:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 8010cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cda:	4413      	add	r3, r2
 8010cdc:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8010cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	da01      	bge.n	8010cea <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8010cea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cf0:	3216      	adds	r2, #22
 8010cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8010cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cfc:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010cfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d02:	3301      	adds	r3, #1
 8010d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d0a:	7a9b      	ldrb	r3, [r3, #10]
 8010d0c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d396      	bcc.n	8010c42 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 8010d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d16:	2200      	movs	r2, #0
 8010d18:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d1c:	7a1b      	ldrb	r3, [r3, #8]
 8010d1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d22:	e033      	b.n	8010d8c <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8010d24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d2a:	3206      	adds	r2, #6
 8010d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010d30:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8010d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d36:	3116      	adds	r1, #22
 8010d38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	dd13      	ble.n	8010d68 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 8010d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d46:	4413      	add	r3, r2
 8010d48:	2201      	movs	r2, #1
 8010d4a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8010d4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d52:	4413      	add	r3, r2
 8010d54:	2201      	movs	r2, #1
 8010d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8010d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d5c:	791b      	ldrb	r3, [r3, #4]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d64:	711a      	strb	r2, [r3, #4]
 8010d66:	e00c      	b.n	8010d82 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8010d68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d6e:	4413      	add	r3, r2
 8010d70:	2200      	movs	r2, #0
 8010d72:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 8010d74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d7a:	4413      	add	r3, r2
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010d82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d86:	3301      	adds	r3, #1
 8010d88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d8e:	7a9b      	ldrb	r3, [r3, #10]
 8010d90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d3c5      	bcc.n	8010d24 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010d98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3740      	adds	r7, #64	; 0x40
 8010da0:	46bd      	mov	sp, r7
 8010da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010da6 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b085      	sub	sp, #20
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010dae:	2300      	movs	r3, #0
 8010db0:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	73fb      	strb	r3, [r7, #15]
 8010dca:	e02d      	b.n	8010e28 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	78d2      	ldrb	r2, [r2, #3]
 8010dd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010dd8:	fb01 f202 	mul.w	r2, r1, r2
 8010ddc:	1a9b      	subs	r3, r3, r2
 8010dde:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	789b      	ldrb	r3, [r3, #2]
 8010de4:	7bfa      	ldrb	r2, [r7, #15]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d21b      	bcs.n	8010e22 <VL53L1_f_019+0x7c>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	789b      	ldrb	r3, [r3, #2]
 8010dee:	7b3a      	ldrb	r2, [r7, #12]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d216      	bcs.n	8010e22 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010df4:	7bfb      	ldrb	r3, [r7, #15]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	4413      	add	r3, r2
 8010dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10f      	bne.n	8010e22 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010e02:	7b3b      	ldrb	r3, [r7, #12]
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	4413      	add	r3, r2
 8010e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d108      	bne.n	8010e22 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010e10:	7bbb      	ldrb	r3, [r7, #14]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d105      	bne.n	8010e22 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7bfa      	ldrb	r2, [r7, #15]
 8010e1a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	3301      	adds	r3, #1
 8010e26:	73fb      	strb	r3, [r7, #15]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	78db      	ldrb	r3, [r3, #3]
 8010e2c:	7bfa      	ldrb	r2, [r7, #15]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d3cc      	bcc.n	8010dcc <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010e32:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr

08010e42 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010e42:	b480      	push	{r7}
 8010e44:	b085      	sub	sp, #20
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010e60:	73fb      	strb	r3, [r7, #15]
 8010e62:	e05a      	b.n	8010f1a <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	78da      	ldrb	r2, [r3, #3]
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e6e:	fb01 f202 	mul.w	r2, r1, r2
 8010e72:	1a9b      	subs	r3, r3, r2
 8010e74:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
 8010e78:	3301      	adds	r3, #1
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	78d2      	ldrb	r2, [r2, #3]
 8010e7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010e82:	fb01 f202 	mul.w	r2, r1, r2
 8010e86:	1a9b      	subs	r3, r3, r2
 8010e88:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	789b      	ldrb	r3, [r3, #2]
 8010e8e:	7b7a      	ldrb	r2, [r7, #13]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d23f      	bcs.n	8010f14 <VL53L1_f_020+0xd2>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	789b      	ldrb	r3, [r3, #2]
 8010e98:	7b3a      	ldrb	r2, [r7, #12]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d23a      	bcs.n	8010f14 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8010e9e:	7b7b      	ldrb	r3, [r7, #13]
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d10e      	bne.n	8010eca <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8010eac:	7b3b      	ldrb	r3, [r7, #12]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d107      	bne.n	8010eca <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d905      	bls.n	8010ee6 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 8010ee6:	7b7b      	ldrb	r3, [r7, #13]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	4413      	add	r3, r2
 8010eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d009      	beq.n	8010f08 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8010ef4:	7b7b      	ldrb	r3, [r7, #13]
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	4413      	add	r3, r2
 8010f00:	460a      	mov	r2, r1
 8010f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f06:	e005      	b.n	8010f14 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8010f08:	7b7b      	ldrb	r3, [r7, #13]
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
 8010f16:	3301      	adds	r3, #1
 8010f18:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 8010f1a:	7bfa      	ldrb	r2, [r7, #15]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010f22:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010f28:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	db9a      	blt.n	8010e64 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 8010f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3714      	adds	r7, #20
 8010f36:	46bd      	mov	sp, r7
 8010f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3c:	4770      	bx	lr

08010f3e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010f3e:	b480      	push	{r7}
 8010f40:	b087      	sub	sp, #28
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010f46:	2300      	movs	r3, #0
 8010f48:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	78db      	ldrb	r3, [r3, #3]
 8010f62:	3b01      	subs	r3, #1
 8010f64:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 8010f66:	7cbb      	ldrb	r3, [r7, #18]
 8010f68:	085b      	lsrs	r3, r3, #1
 8010f6a:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010f72:	75fb      	strb	r3, [r7, #23]
 8010f74:	e0a2      	b.n	80110bc <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	78da      	ldrb	r2, [r3, #3]
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f80:	fb01 f202 	mul.w	r2, r1, r2
 8010f84:	1a9b      	subs	r3, r3, r2
 8010f86:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	78d2      	ldrb	r2, [r2, #3]
 8010f90:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f94:	fb01 f202 	mul.w	r2, r1, r2
 8010f98:	1a9b      	subs	r3, r3, r2
 8010f9a:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	789b      	ldrb	r3, [r3, #2]
 8010fa0:	7d7a      	ldrb	r2, [r7, #21]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	f080 8087 	bcs.w	80110b6 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8010fac:	7d3a      	ldrb	r2, [r7, #20]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	f080 8081 	bcs.w	80110b6 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 8010fb4:	7d7b      	ldrb	r3, [r7, #21]
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	4413      	add	r3, r2
 8010fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d12f      	bne.n	8011022 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 8010fc2:	7d3b      	ldrb	r3, [r7, #20]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d028      	beq.n	8011022 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8010fd0:	7d3b      	ldrb	r3, [r7, #20]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	4413      	add	r3, r2
 8010fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010fe4:	7cfa      	ldrb	r2, [r7, #19]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d21b      	bcs.n	8011022 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010fea:	7cfa      	ldrb	r2, [r7, #19]
 8010fec:	4613      	mov	r3, r2
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	4413      	add	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	7dfa      	ldrb	r2, [r7, #23]
 8011004:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 8011006:	7dfb      	ldrb	r3, [r7, #23]
 8011008:	3301      	adds	r3, #1
 801100a:	b2da      	uxtb	r2, r3
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	22ff      	movs	r2, #255	; 0xff
 8011014:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2200      	movs	r2, #0
 801101a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 8011022:	7d7b      	ldrb	r3, [r7, #21]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	4413      	add	r3, r2
 8011028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801102c:	2b00      	cmp	r3, #0
 801102e:	d042      	beq.n	80110b6 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 8011030:	7d3b      	ldrb	r3, [r7, #20]
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	4413      	add	r3, r2
 8011036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801103a:	2b00      	cmp	r3, #0
 801103c:	d13b      	bne.n	80110b6 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 801103e:	7d7b      	ldrb	r3, [r7, #21]
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	4413      	add	r3, r2
 8011044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011048:	3b01      	subs	r3, #1
 801104a:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8011052:	7cfa      	ldrb	r2, [r7, #19]
 8011054:	429a      	cmp	r2, r3
 8011056:	d22e      	bcs.n	80110b6 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011058:	7cfa      	ldrb	r2, [r7, #19]
 801105a:	4613      	mov	r3, r2
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	4413      	add	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	4413      	add	r3, r2
 801106a:	3304      	adds	r3, #4
 801106c:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	7dfa      	ldrb	r2, [r7, #23]
 8011072:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 8011074:	7dfb      	ldrb	r3, [r7, #23]
 8011076:	3301      	adds	r3, #1
 8011078:	b2da      	uxtb	r2, r3
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	b2db      	uxtb	r3, r3
 801108a:	3301      	adds	r3, #1
 801108c:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	b2db      	uxtb	r3, r3
 801109e:	3301      	adds	r3, #1
 80110a0:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	799b      	ldrb	r3, [r3, #6]
 80110aa:	7cba      	ldrb	r2, [r7, #18]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d202      	bcs.n	80110b6 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	7cba      	ldrb	r2, [r7, #18]
 80110b4:	719a      	strb	r2, [r3, #6]
		blb++) {
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	3301      	adds	r3, #1
 80110ba:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 80110bc:	7dfa      	ldrb	r2, [r7, #23]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80110c4:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 80110ca:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 80110cc:	429a      	cmp	r2, r3
 80110ce:	f6ff af52 	blt.w	8010f76 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80110d2:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 80110d6:	4618      	mov	r0, r3
 80110d8:	371c      	adds	r7, #28
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr

080110e2 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b090      	sub	sp, #64	; 0x40
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	4603      	mov	r3, r0
 80110ea:	6039      	str	r1, [r7, #0]
 80110ec:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 80110f4:	f107 030c 	add.w	r3, r7, #12
 80110f8:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8011100:	2301      	movs	r3, #1
 8011102:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801110c:	2b01      	cmp	r3, #1
 801110e:	d965      	bls.n	80111dc <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8011110:	e05f      	b.n	80111d2 <VL53L1_f_028+0xf0>

		swapped = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8011118:	2301      	movs	r3, #1
 801111a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801111e:	e051      	b.n	80111c4 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8011120:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011124:	1e5a      	subs	r2, r3, #1
 8011126:	4613      	mov	r3, r2
 8011128:	00db      	lsls	r3, r3, #3
 801112a:	4413      	add	r3, r2
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	4413      	add	r3, r2
 8011136:	3304      	adds	r3, #4
 8011138:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 801113a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801113e:	4613      	mov	r3, r2
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	4413      	add	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	4413      	add	r3, r2
 801114e:	3304      	adds	r3, #4
 8011150:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	2b02      	cmp	r3, #2
 8011156:	d118      	bne.n	801118a <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 8011158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115a:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8011160:	429a      	cmp	r2, r3
 8011162:	da2a      	bge.n	80111ba <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8011164:	2224      	movs	r2, #36	; 0x24
 8011166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801116a:	f009 fd4f 	bl	801ac0c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 801116e:	2224      	movs	r2, #36	; 0x24
 8011170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011174:	f009 fd4a 	bl	801ac0c <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8011178:	2224      	movs	r2, #36	; 0x24
 801117a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801117c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801117e:	f009 fd45 	bl	801ac0c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8011182:	2301      	movs	r3, #1
 8011184:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8011188:	e017      	b.n	80111ba <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 801118a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118c:	699a      	ldr	r2, [r3, #24]
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	429a      	cmp	r2, r3
 8011194:	d911      	bls.n	80111ba <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8011196:	2224      	movs	r2, #36	; 0x24
 8011198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801119a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801119c:	f009 fd36 	bl	801ac0c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80111a0:	2224      	movs	r2, #36	; 0x24
 80111a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80111a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111a6:	f009 fd31 	bl	801ac0c <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80111aa:	2224      	movs	r2, #36	; 0x24
 80111ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80111b0:	f009 fd2c 	bl	801ac0c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80111b4:	2301      	movs	r3, #1
 80111b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80111ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111be:	3301      	adds	r3, #1
 80111c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80111ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d3a6      	bcc.n	8011120 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 80111d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d19b      	bne.n	8011112 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 80111da:	e000      	b.n	80111de <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 80111dc:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 80111de:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3740      	adds	r7, #64	; 0x40
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80111ea:	b480      	push	{r7}
 80111ec:	b087      	sub	sp, #28
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	4603      	mov	r3, r0
 80111f2:	60b9      	str	r1, [r7, #8]
 80111f4:	607a      	str	r2, [r7, #4]
 80111f6:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80111f8:	2300      	movs	r3, #0
 80111fa:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80111fc:	2300      	movs	r3, #0
 80111fe:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011200:	2300      	movs	r3, #0
 8011202:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011204:	7bfa      	ldrb	r2, [r7, #15]
 8011206:	4613      	mov	r3, r2
 8011208:	00db      	lsls	r3, r3, #3
 801120a:	4413      	add	r3, r2
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	4413      	add	r3, r2
 8011216:	3304      	adds	r3, #4
 8011218:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	2200      	movs	r2, #0
 801121e:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2200      	movs	r2, #0
 8011224:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	75fb      	strb	r3, [r7, #23]
 801122c:	e01c      	b.n	8011268 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	78da      	ldrb	r2, [r3, #3]
 8011232:	7dfb      	ldrb	r3, [r7, #23]
 8011234:	fbb3 f1f2 	udiv	r1, r3, r2
 8011238:	fb01 f202 	mul.w	r2, r1, r2
 801123c:	1a9b      	subs	r3, r3, r2
 801123e:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	68da      	ldr	r2, [r3, #12]
 8011244:	7d79      	ldrb	r1, [r7, #21]
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	3106      	adds	r1, #6
 801124a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801124e:	441a      	add	r2, r3
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	441a      	add	r2, r3
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011262:	7dfb      	ldrb	r3, [r7, #23]
 8011264:	3301      	adds	r3, #1
 8011266:	75fb      	strb	r3, [r7, #23]
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	791b      	ldrb	r3, [r3, #4]
 801126c:	7dfa      	ldrb	r2, [r7, #23]
 801126e:	429a      	cmp	r2, r3
 8011270:	d9dd      	bls.n	801122e <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	68da      	ldr	r2, [r3, #12]
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8011280:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8011284:	4618      	mov	r0, r3
 8011286:	371c      	adds	r7, #28
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8011290:	b590      	push	{r4, r7, lr}
 8011292:	b08d      	sub	sp, #52	; 0x34
 8011294:	af02      	add	r7, sp, #8
 8011296:	60ba      	str	r2, [r7, #8]
 8011298:	607b      	str	r3, [r7, #4]
 801129a:	4603      	mov	r3, r0
 801129c:	73fb      	strb	r3, [r7, #15]
 801129e:	460b      	mov	r3, r1
 80112a0:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80112a2:	2300      	movs	r3, #0
 80112a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 80112b6:	2300      	movs	r3, #0
 80112b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80112be:	7bfa      	ldrb	r2, [r7, #15]
 80112c0:	4613      	mov	r3, r2
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	4413      	add	r3, r2
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	4413      	add	r3, r2
 80112d0:	3304      	adds	r3, #4
 80112d2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	789b      	ldrb	r3, [r3, #2]
 80112d8:	2bff      	cmp	r3, #255	; 0xff
 80112da:	d102      	bne.n	80112e2 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	2201      	movs	r2, #1
 80112e0:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	789b      	ldrb	r3, [r3, #2]
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	78d2      	ldrb	r2, [r2, #3]
 80112ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80112ee:	fb01 f202 	mul.w	r2, r1, r2
 80112f2:	1a9b      	subs	r3, r3, r2
 80112f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 80112f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80112fc:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	b29a      	uxth	r2, r3
 8011304:	8c3b      	ldrh	r3, [r7, #32]
 8011306:	4413      	add	r3, r2
 8011308:	b29b      	uxth	r3, r3
 801130a:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 801130c:	8c3a      	ldrh	r2, [r7, #32]
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	789b      	ldrb	r3, [r3, #2]
 8011312:	b29b      	uxth	r3, r3
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	b29b      	uxth	r3, r3
 8011318:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801131a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801131e:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	791b      	ldrb	r3, [r3, #4]
 8011324:	b29a      	uxth	r2, r3
 8011326:	8bfb      	ldrh	r3, [r7, #30]
 8011328:	4413      	add	r3, r2
 801132a:	b29b      	uxth	r3, r3
 801132c:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 801132e:	8bfa      	ldrh	r2, [r7, #30]
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	789b      	ldrb	r3, [r3, #2]
 8011334:	b29b      	uxth	r3, r3
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	b29b      	uxth	r3, r3
 801133a:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 801133c:	8bfa      	ldrh	r2, [r7, #30]
 801133e:	8c3b      	ldrh	r3, [r7, #32]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	b29b      	uxth	r3, r3
 8011344:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8011346:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801134a:	2b03      	cmp	r3, #3
 801134c:	dd01      	ble.n	8011352 <VL53L1_f_027+0xc2>
		window_width = 3;
 801134e:	2303      	movs	r3, #3
 8011350:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8011352:	8c3a      	ldrh	r2, [r7, #32]
 8011354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011356:	4413      	add	r3, r2
 8011358:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801135a:	b219      	sxth	r1, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	78da      	ldrb	r2, [r3, #3]
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	3314      	adds	r3, #20
 8011364:	7bbc      	ldrb	r4, [r7, #14]
 8011366:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801136a:	9301      	str	r3, [sp, #4]
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	4623      	mov	r3, r4
 8011372:	f000 f846 	bl	8011402 <VL53L1_f_030>
 8011376:	4603      	mov	r3, r0
 8011378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 801137c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011380:	2b00      	cmp	r3, #0
 8011382:	d114      	bne.n	80113ae <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8011384:	8bfa      	ldrh	r2, [r7, #30]
 8011386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 801138c:	b218      	sxth	r0, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	78da      	ldrb	r2, [r3, #3]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	331c      	adds	r3, #28
 8011396:	7bbc      	ldrb	r4, [r7, #14]
 8011398:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 801139c:	9301      	str	r3, [sp, #4]
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	4623      	mov	r3, r4
 80113a4:	f000 f82d 	bl	8011402 <VL53L1_f_030>
 80113a8:	4603      	mov	r3, r0
 80113aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	695a      	ldr	r2, [r3, #20]
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	69db      	ldr	r3, [r3, #28]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d909      	bls.n	80113ce <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	69da      	ldr	r2, [r3, #28]
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	69ba      	ldr	r2, [r7, #24]
 80113cc:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	699a      	ldr	r2, [r3, #24]
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d203      	bcs.n	80113e2 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	699a      	ldr	r2, [r3, #24]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	699a      	ldr	r2, [r3, #24]
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	69db      	ldr	r3, [r3, #28]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d903      	bls.n	80113f6 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	699a      	ldr	r2, [r3, #24]
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 80113f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	372c      	adds	r7, #44	; 0x2c
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd90      	pop	{r4, r7, pc}

08011402 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8011402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011406:	b09d      	sub	sp, #116	; 0x74
 8011408:	af00      	add	r7, sp, #0
 801140a:	461c      	mov	r4, r3
 801140c:	4603      	mov	r3, r0
 801140e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011412:	460b      	mov	r3, r1
 8011414:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011418:	4613      	mov	r3, r2
 801141a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141e:	4623      	mov	r3, r4
 8011420:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011424:	2300      	movs	r3, #0
 8011426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 801142a:	2300      	movs	r3, #0
 801142c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8011430:	2300      	movs	r3, #0
 8011432:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8011436:	f04f 0200 	mov.w	r2, #0
 801143a:	f04f 0300 	mov.w	r3, #0
 801143e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8011442:	f04f 0200 	mov.w	r2, #0
 8011446:	f04f 0300 	mov.w	r3, #0
 801144a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 801144e:	f04f 0200 	mov.w	r2, #0
 8011452:	f04f 0300 	mov.w	r3, #0
 8011456:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801145a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011462:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8011464:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 809c 	beq.w	80115a6 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801146e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011472:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8011476:	e08f      	b.n	8011598 <VL53L1_f_030+0x196>

		if (lb < 0)
 8011478:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801147c:	2b00      	cmp	r3, #0
 801147e:	da09      	bge.n	8011494 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8011480:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011484:	b29a      	uxth	r2, r3
 8011486:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801148a:	4413      	add	r3, r2
 801148c:	b29b      	uxth	r3, r3
 801148e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8011492:	e00a      	b.n	80114aa <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8011494:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8011498:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801149c:	fb91 f3f2 	sdiv	r3, r1, r2
 80114a0:	fb02 f303 	mul.w	r3, r2, r3
 80114a4:	1acb      	subs	r3, r1, r3
 80114a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80114aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	db6b      	blt.n	801158a <VL53L1_f_030+0x188>
 80114b2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114b6:	2b17      	cmp	r3, #23
 80114b8:	dc67      	bgt.n	801158a <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 80114ba:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80114c2:	3306      	adds	r3, #6
 80114c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114c8:	17da      	asrs	r2, r3, #31
 80114ca:	633b      	str	r3, [r7, #48]	; 0x30
 80114cc:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 80114ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80114d6:	17da      	asrs	r2, r3, #31
 80114d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80114da:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 80114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80114e2:	4602      	mov	r2, r0
 80114e4:	1a9b      	subs	r3, r3, r2
 80114e6:	623b      	str	r3, [r7, #32]
 80114e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ea:	460a      	mov	r2, r1
 80114ec:	eb63 0302 	sbc.w	r3, r3, r2
 80114f0:	627b      	str	r3, [r7, #36]	; 0x24
 80114f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80114f6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 80114fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d009      	beq.n	8011516 <VL53L1_f_030+0x114>
 8011502:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011506:	2b00      	cmp	r3, #0
 8011508:	da05      	bge.n	8011516 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801150a:	f04f 0200 	mov.w	r2, #0
 801150e:	f04f 0300 	mov.w	r3, #0
 8011512:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8011516:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801151a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801151e:	1884      	adds	r4, r0, r2
 8011520:	61bc      	str	r4, [r7, #24]
 8011522:	eb41 0303 	adc.w	r3, r1, r3
 8011526:	61fb      	str	r3, [r7, #28]
 8011528:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801152c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8011530:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8011534:	17da      	asrs	r2, r3, #31
 8011536:	63bb      	str	r3, [r7, #56]	; 0x38
 8011538:	63fa      	str	r2, [r7, #60]	; 0x3c
 801153a:	f04f 0200 	mov.w	r2, #0
 801153e:	f04f 0300 	mov.w	r3, #0
 8011542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011544:	02cb      	lsls	r3, r1, #11
 8011546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011548:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 801154c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801154e:	02ca      	lsls	r2, r1, #11
 8011550:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8011554:	f143 0600 	adc.w	r6, r3, #0
 8011558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801155a:	fb06 f203 	mul.w	r2, r6, r3
 801155e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011560:	fb05 f303 	mul.w	r3, r5, r3
 8011564:	441a      	add	r2, r3
 8011566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011568:	fba3 ab05 	umull	sl, fp, r3, r5
 801156c:	eb02 030b 	add.w	r3, r2, fp
 8011570:	469b      	mov	fp, r3
			weighted_sum +=
 8011572:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011576:	eb12 010a 	adds.w	r1, r2, sl
 801157a:	6139      	str	r1, [r7, #16]
 801157c:	eb43 030b 	adc.w	r3, r3, fp
 8011580:	617b      	str	r3, [r7, #20]
 8011582:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011586:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801158a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801158e:	b29b      	uxth	r3, r3
 8011590:	3301      	adds	r3, #1
 8011592:	b29b      	uxth	r3, r3
 8011594:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8011598:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 801159c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80115a0:	429a      	cmp	r2, r3
 80115a2:	f77f af69 	ble.w	8011478 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80115a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115aa:	2a01      	cmp	r2, #1
 80115ac:	f173 0300 	sbcs.w	r3, r3, #0
 80115b0:	db3b      	blt.n	801162a <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 80115b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115b6:	0fd9      	lsrs	r1, r3, #31
 80115b8:	2000      	movs	r0, #0
 80115ba:	60b9      	str	r1, [r7, #8]
 80115bc:	60f8      	str	r0, [r7, #12]
 80115be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80115c2:	4621      	mov	r1, r4
 80115c4:	eb11 0802 	adds.w	r8, r1, r2
 80115c8:	4629      	mov	r1, r5
 80115ca:	eb41 0903 	adc.w	r9, r1, r3
 80115ce:	f04f 0200 	mov.w	r2, #0
 80115d2:	f04f 0300 	mov.w	r3, #0
 80115d6:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80115da:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 80115de:	ea4f 0369 	mov.w	r3, r9, asr #1
 80115e2:	4610      	mov	r0, r2
 80115e4:	4619      	mov	r1, r3
 80115e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80115ea:	1814      	adds	r4, r2, r0
 80115ec:	603c      	str	r4, [r7, #0]
 80115ee:	414b      	adcs	r3, r1
 80115f0:	607b      	str	r3, [r7, #4]
 80115f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80115f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 80115fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011602:	f7ef faa9 	bl	8000b58 <__aeabi_ldivmod>
 8011606:	4602      	mov	r2, r0
 8011608:	460b      	mov	r3, r1
 801160a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 801160e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011612:	2b00      	cmp	r3, #0
 8011614:	da05      	bge.n	8011622 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8011616:	f04f 0200 	mov.w	r2, #0
 801161a:	f04f 0300 	mov.w	r3, #0
 801161e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8011622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011628:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801162a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 801162e:	4618      	mov	r0, r3
 8011630:	3774      	adds	r7, #116	; 0x74
 8011632:	46bd      	mov	sp, r7
 8011634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011638 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	60b9      	str	r1, [r7, #8]
 8011640:	607a      	str	r2, [r7, #4]
 8011642:	603b      	str	r3, [r7, #0]
 8011644:	4603      	mov	r3, r0
 8011646:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011648:	2300      	movs	r3, #0
 801164a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011654:	7bfa      	ldrb	r2, [r7, #15]
 8011656:	4613      	mov	r3, r2
 8011658:	00db      	lsls	r3, r3, #3
 801165a:	4413      	add	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	4413      	add	r3, r2
 8011666:	3304      	adds	r3, #4
 8011668:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801166a:	22ac      	movs	r2, #172	; 0xac
 801166c:	68b9      	ldr	r1, [r7, #8]
 801166e:	6a38      	ldr	r0, [r7, #32]
 8011670:	f009 facc 	bl	801ac0c <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801167a:	75fb      	strb	r3, [r7, #23]
 801167c:	e020      	b.n	80116c0 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	7dfa      	ldrb	r2, [r7, #23]
 8011684:	429a      	cmp	r2, r3
 8011686:	d304      	bcc.n	8011692 <VL53L1_f_023+0x5a>
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	791b      	ldrb	r3, [r3, #4]
 801168c:	7dfa      	ldrb	r2, [r7, #23]
 801168e:	429a      	cmp	r2, r3
 8011690:	d913      	bls.n	80116ba <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	78da      	ldrb	r2, [r3, #3]
 8011696:	7dfb      	ldrb	r3, [r7, #23]
 8011698:	fbb3 f1f2 	udiv	r1, r3, r2
 801169c:	fb01 f202 	mul.w	r2, r1, r2
 80116a0:	1a9b      	subs	r3, r3, r2
 80116a2:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	7a9b      	ldrb	r3, [r3, #10]
 80116a8:	7d7a      	ldrb	r2, [r7, #21]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d205      	bcs.n	80116ba <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 80116ae:	7d7a      	ldrb	r2, [r7, #21]
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	3206      	adds	r2, #6
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	3301      	adds	r3, #1
 80116be:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 80116c0:	7dfa      	ldrb	r2, [r7, #23]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80116c8:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80116ce:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80116d0:	429a      	cmp	r2, r3
 80116d2:	dbd4      	blt.n	801167e <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80116d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3718      	adds	r7, #24
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	b096      	sub	sp, #88	; 0x58
 80116e6:	af08      	add	r7, sp, #32
 80116e8:	4604      	mov	r4, r0
 80116ea:	4608      	mov	r0, r1
 80116ec:	4611      	mov	r1, r2
 80116ee:	461a      	mov	r2, r3
 80116f0:	4623      	mov	r3, r4
 80116f2:	73fb      	strb	r3, [r7, #15]
 80116f4:	4603      	mov	r3, r0
 80116f6:	73bb      	strb	r3, [r7, #14]
 80116f8:	460b      	mov	r3, r1
 80116fa:	737b      	strb	r3, [r7, #13]
 80116fc:	4613      	mov	r3, r2
 80116fe:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8011700:	2300      	movs	r3, #0
 8011702:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8011706:	2300      	movs	r3, #0
 8011708:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 801170c:	2300      	movs	r3, #0
 801170e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8011712:	2300      	movs	r3, #0
 8011714:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801171a:	2300      	movs	r3, #0
 801171c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 801171e:	2300      	movs	r3, #0
 8011720:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8011722:	2300      	movs	r3, #0
 8011724:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8011726:	2300      	movs	r3, #0
 8011728:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801172a:	2300      	movs	r3, #0
 801172c:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 801172e:	2300      	movs	r3, #0
 8011730:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8011732:	7b7b      	ldrb	r3, [r7, #13]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d106      	bne.n	8011746 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8011738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801173e:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8011740:	f06f 030e 	mvn.w	r3, #14
 8011744:	e06f      	b.n	8011826 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	7b7a      	ldrb	r2, [r7, #13]
 801174a:	fbb3 f1f2 	udiv	r1, r3, r2
 801174e:	fb01 f202 	mul.w	r2, r1, r2
 8011752:	1a9b      	subs	r3, r3, r2
 8011754:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8011758:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801175c:	7b39      	ldrb	r1, [r7, #12]
 801175e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8011762:	f107 0320 	add.w	r3, r7, #32
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	4613      	mov	r3, r2
 8011770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011772:	f000 fddb 	bl	801232c <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 8011776:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801177a:	7b39      	ldrb	r1, [r7, #12]
 801177c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8011780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011784:	9301      	str	r3, [sp, #4]
 8011786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	4613      	mov	r3, r2
 801178e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011790:	f000 fdcc 	bl	801232c <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8011794:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00e      	beq.n	80117ba <VL53L1_f_026+0xda>
		VL53L1_f_013(
 801179c:	f107 021c 	add.w	r2, r7, #28
 80117a0:	7b39      	ldrb	r1, [r7, #12]
 80117a2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80117a6:	f107 0314 	add.w	r3, r7, #20
 80117aa:	9301      	str	r3, [sp, #4]
 80117ac:	f107 0318 	add.w	r3, r7, #24
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	4613      	mov	r3, r2
 80117b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117b6:	f000 fdb9 	bl	801232c <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80117ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117bc:	469c      	mov	ip, r3
 80117be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c0:	469e      	mov	lr, r3
 80117c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c4:	4698      	mov	r8, r3
 80117c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c8:	4619      	mov	r1, r3
 80117ca:	6a3b      	ldr	r3, [r7, #32]
 80117cc:	461c      	mov	r4, r3
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	461d      	mov	r5, r3
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	461e      	mov	r6, r3
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 80117da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 80117e0:	607b      	str	r3, [r7, #4]
 80117e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80117e8:	7bb8      	ldrb	r0, [r7, #14]
 80117ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117ec:	9207      	str	r2, [sp, #28]
 80117ee:	9306      	str	r3, [sp, #24]
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	9205      	str	r2, [sp, #20]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	9304      	str	r3, [sp, #16]
 80117f8:	9603      	str	r6, [sp, #12]
 80117fa:	9502      	str	r5, [sp, #8]
 80117fc:	9401      	str	r4, [sp, #4]
 80117fe:	9100      	str	r1, [sp, #0]
 8011800:	4643      	mov	r3, r8
 8011802:	4672      	mov	r2, lr
 8011804:	4661      	mov	r1, ip
 8011806:	f002 ff30 	bl	801466a <VL53L1_f_014>
 801180a:	4603      	mov	r3, r0
 801180c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8011810:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8011814:	f113 0f0f 	cmn.w	r3, #15
 8011818:	d103      	bne.n	8011822 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801181a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801181c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011820:	801a      	strh	r2, [r3, #0]


	return status;
 8011822:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011826:	4618      	mov	r0, r3
 8011828:	3738      	adds	r7, #56	; 0x38
 801182a:	46bd      	mov	sp, r7
 801182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011830 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8011830:	b490      	push	{r4, r7}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	4604      	mov	r4, r0
 8011838:	4608      	mov	r0, r1
 801183a:	4611      	mov	r1, r2
 801183c:	461a      	mov	r2, r3
 801183e:	4623      	mov	r3, r4
 8011840:	71fb      	strb	r3, [r7, #7]
 8011842:	4603      	mov	r3, r0
 8011844:	71bb      	strb	r3, [r7, #6]
 8011846:	460b      	mov	r3, r1
 8011848:	717b      	strb	r3, [r7, #5]
 801184a:	4613      	mov	r3, r2
 801184c:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	79fa      	ldrb	r2, [r7, #7]
 801185a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	2200      	movs	r2, #0
 8011860:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	781a      	ldrb	r2, [r3, #0]
 8011866:	6a3b      	ldr	r3, [r7, #32]
 8011868:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	785a      	ldrb	r2, [r3, #1]
 801186e:	6a3b      	ldr	r3, [r7, #32]
 8011870:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	789a      	ldrb	r2, [r3, #2]
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	78da      	ldrb	r2, [r3, #3]
 801187e:	6a3b      	ldr	r3, [r7, #32]
 8011880:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	791a      	ldrb	r2, [r3, #4]
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	795a      	ldrb	r2, [r3, #5]
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	791a      	ldrb	r2, [r3, #4]
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	b2db      	uxtb	r3, r3
 801189e:	3301      	adds	r3, #1
 80118a0:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 80118a2:	6a3b      	ldr	r3, [r7, #32]
 80118a4:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	8c1a      	ldrh	r2, [r3, #32]
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	695b      	ldr	r3, [r3, #20]
 80118bc:	b29a      	uxth	r2, r3
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	699b      	ldr	r3, [r3, #24]
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	6a3b      	ldr	r3, [r7, #32]
 80118ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	69db      	ldr	r3, [r3, #28]
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	461a      	mov	r2, r3
 80118e0:	6a3b      	ldr	r3, [r7, #32]
 80118e2:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	691a      	ldr	r2, [r3, #16]
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	461a      	mov	r2, r3
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80118fc:	6a3b      	ldr	r3, [r7, #32]
 80118fe:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8011900:	6a3b      	ldr	r3, [r7, #32]
 8011902:	2213      	movs	r2, #19
 8011904:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8011908:	887b      	ldrh	r3, [r7, #2]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d00a      	beq.n	8011924 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	8c1b      	ldrh	r3, [r3, #32]
 8011912:	461a      	mov	r2, r3
 8011914:	887b      	ldrh	r3, [r7, #2]
 8011916:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8011918:	429a      	cmp	r2, r3
 801191a:	d903      	bls.n	8011924 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 801191c:	6a3b      	ldr	r3, [r7, #32]
 801191e:	2206      	movs	r2, #6
 8011920:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8011924:	79bb      	ldrb	r3, [r7, #6]
 8011926:	b29b      	uxth	r3, r3
 8011928:	021b      	lsls	r3, r3, #8
 801192a:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 801192c:	6a3b      	ldr	r3, [r7, #32]
 801192e:	8a9b      	ldrh	r3, [r3, #20]
 8011930:	89fa      	ldrh	r2, [r7, #14]
 8011932:	429a      	cmp	r2, r3
 8011934:	d205      	bcs.n	8011942 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 8011936:	6a3b      	ldr	r3, [r7, #32]
 8011938:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 801193a:	89fb      	ldrh	r3, [r7, #14]
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	81fb      	strh	r3, [r7, #14]
 8011940:	e001      	b.n	8011946 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 8011946:	797b      	ldrb	r3, [r7, #5]
 8011948:	b29b      	uxth	r3, r3
 801194a:	021b      	lsls	r3, r3, #8
 801194c:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8011954:	89bb      	ldrh	r3, [r7, #12]
 8011956:	4413      	add	r3, r2
 8011958:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011960:	89fa      	ldrh	r2, [r7, #14]
 8011962:	429a      	cmp	r2, r3
 8011964:	d805      	bhi.n	8011972 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 8011966:	6a3b      	ldr	r3, [r7, #32]
 8011968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801196c:	89ba      	ldrh	r2, [r7, #12]
 801196e:	429a      	cmp	r2, r3
 8011970:	d203      	bcs.n	801197a <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8011972:	6a3b      	ldr	r3, [r7, #32]
 8011974:	2205      	movs	r2, #5
 8011976:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801197a:	bf00      	nop
 801197c:	3710      	adds	r7, #16
 801197e:	46bd      	mov	sp, r7
 8011980:	bc90      	pop	{r4, r7}
 8011982:	4770      	bx	lr

08011984 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8011984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011986:	b08f      	sub	sp, #60	; 0x3c
 8011988:	af06      	add	r7, sp, #24
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
 8011990:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011992:	2300      	movs	r3, #0
 8011994:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8011996:	2300      	movs	r3, #0
 8011998:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801199a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801199c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80119a0:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 80119a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80119a4:	f7ff f856 	bl	8010a54 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 80119a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119aa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 80119ae:	22ac      	movs	r2, #172	; 0xac
 80119b0:	6839      	ldr	r1, [r7, #0]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f009 f92a 	bl	801ac0c <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	781a      	ldrb	r2, [r3, #0]
 80119bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119be:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	785a      	ldrb	r2, [r3, #1]
 80119c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119c6:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	789a      	ldrb	r2, [r3, #2]
 80119cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ce:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80119d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119d8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 80119da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119dc:	2200      	movs	r2, #0
 80119de:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 80119e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e2:	2204      	movs	r2, #4
 80119e4:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 80119e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e8:	2200      	movs	r2, #0
 80119ea:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80119ec:	2300      	movs	r3, #0
 80119ee:	77bb      	strb	r3, [r7, #30]
 80119f0:	e008      	b.n	8011a04 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 80119f2:	7fbb      	ldrb	r3, [r7, #30]
 80119f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	2200      	movs	r2, #0
 80119fc:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80119fe:	7fbb      	ldrb	r3, [r7, #30]
 8011a00:	3301      	adds	r3, #1
 8011a02:	77bb      	strb	r3, [r7, #30]
 8011a04:	7fbb      	ldrb	r3, [r7, #30]
 8011a06:	2b04      	cmp	r3, #4
 8011a08:	d9f3      	bls.n	80119f2 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8011a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fd ff58 	bl	800f8c6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a22:	4619      	mov	r1, r3
 8011a24:	4610      	mov	r0, r2
 8011a26:	f7fd ff8e 	bl	800f946 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8011a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a2c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fb66 	bl	8010102 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8011a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a38:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fd fffc 	bl	800fa3a <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d009      	beq.n	8011a60 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8011a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a4e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a54:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8011a58:	461a      	mov	r2, r3
 8011a5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a5c:	f000 fdae 	bl	80125bc <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8011a68:	2300      	movs	r3, #0
 8011a6a:	77bb      	strb	r3, [r7, #30]
 8011a6c:	e01e      	b.n	8011aac <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8011a6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d117      	bne.n	8011aa6 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8011a76:	7fbb      	ldrb	r3, [r7, #30]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	4413      	add	r3, r2
 8011a80:	8898      	ldrh	r0, [r3, #4]
 8011a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a84:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8011a88:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a8e:	4413      	add	r3, r2
 8011a90:	3304      	adds	r3, #4
 8011a92:	9301      	str	r3, [sp, #4]
 8011a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	68f9      	ldr	r1, [r7, #12]
 8011a9e:	f7fe fb7b 	bl	8010198 <VL53L1_f_001>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8011aa6:	7fbb      	ldrb	r3, [r7, #30]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	77bb      	strb	r3, [r7, #30]
 8011aac:	7fbb      	ldrb	r3, [r7, #30]
 8011aae:	2b04      	cmp	r3, #4
 8011ab0:	d9dd      	bls.n	8011a6e <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8011ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d11a      	bne.n	8011af0 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8011ac2:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8011ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ad6:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8011ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011adc:	9102      	str	r1, [sp, #8]
 8011ade:	9201      	str	r2, [sp, #4]
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	462b      	mov	r3, r5
 8011ae4:	4622      	mov	r2, r4
 8011ae6:	4631      	mov	r1, r6
 8011ae8:	f7ff f82d 	bl	8010b46 <VL53L1_f_018>
 8011aec:	4603      	mov	r3, r0
 8011aee:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8011af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d104      	bne.n	8011b02 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8011af8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011afa:	f7ff f954 	bl	8010da6 <VL53L1_f_019>
 8011afe:	4603      	mov	r3, r0
 8011b00:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d104      	bne.n	8011b14 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8011b0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b0c:	f7ff f999 	bl	8010e42 <VL53L1_f_020>
 8011b10:	4603      	mov	r3, r0
 8011b12:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d104      	bne.n	8011b26 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8011b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b1e:	f7ff fa0e 	bl	8010f3e <VL53L1_f_021>
 8011b22:	4603      	mov	r3, r0
 8011b24:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011b26:	2300      	movs	r3, #0
 8011b28:	77bb      	strb	r3, [r7, #30]
 8011b2a:	e0a6      	b.n	8011c7a <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8011b2c:	7fba      	ldrb	r2, [r7, #30]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	4413      	add	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b3c:	4413      	add	r3, r2
 8011b3e:	3304      	adds	r3, #4
 8011b40:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8011b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d109      	bne.n	8011b5e <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8011b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b4c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011b50:	7fbb      	ldrb	r3, [r7, #30]
 8011b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7ff fb48 	bl	80111ea <VL53L1_f_022>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8011b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d110      	bne.n	8011b88 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8011b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b68:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b74:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011b78:	7fb8      	ldrb	r0, [r7, #30]
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b80:	f7ff fd5a 	bl	8011638 <VL53L1_f_023>
 8011b84:	4603      	mov	r3, r0
 8011b86:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8011b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10d      	bne.n	8011bac <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8011b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b92:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b98:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8011b9c:	7fb8      	ldrb	r0, [r7, #30]
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ba4:	f7ff fd48 	bl	8011638 <VL53L1_f_023>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8011bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10d      	bne.n	8011bd0 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8011bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb6:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8011bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbc:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8011bc0:	7fb8      	ldrb	r0, [r7, #30]
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bc8:	f7ff fd36 	bl	8011638 <VL53L1_f_023>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8011bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d109      	bne.n	8011bec <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8011bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bda:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8011bde:	7fb8      	ldrb	r0, [r7, #30]
 8011be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011be4:	f000 f8dd 	bl	8011da2 <VL53L1_f_034>
 8011be8:	4603      	mov	r3, r0
 8011bea:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8011bec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d108      	bne.n	8011c06 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	8a19      	ldrh	r1, [r3, #16]
 8011bf8:	7fb8      	ldrb	r0, [r7, #30]
 8011bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bfe:	f000 f95c 	bl	8011eba <VL53L1_f_035>
 8011c02:	4603      	mov	r3, r0
 8011c04:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8011c06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d124      	bne.n	8011c58 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	789d      	ldrb	r5, [r3, #2]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	7e1e      	ldrb	r6, [r3, #24]
 8011c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c18:	f893 c003 	ldrb.w	ip, [r3, #3]
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	f893 e006 	ldrb.w	lr, [r3, #6]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c2a:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8011c2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c30:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8011c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c36:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8011c3a:	697c      	ldr	r4, [r7, #20]
 8011c3c:	3420      	adds	r4, #32
 8011c3e:	9404      	str	r4, [sp, #16]
 8011c40:	9003      	str	r0, [sp, #12]
 8011c42:	9102      	str	r1, [sp, #8]
 8011c44:	9201      	str	r2, [sp, #4]
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	4673      	mov	r3, lr
 8011c4a:	4662      	mov	r2, ip
 8011c4c:	4631      	mov	r1, r6
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f7ff fd46 	bl	80116e0 <VL53L1_f_026>
 8011c54:	4603      	mov	r3, r0
 8011c56:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8011c58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d109      	bne.n	8011c74 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8011c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c62:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8011c66:	7fb8      	ldrb	r0, [r7, #30]
 8011c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	f7ff fb10 	bl	8011290 <VL53L1_f_027>
 8011c70:	4603      	mov	r3, r0
 8011c72:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011c74:	7fbb      	ldrb	r3, [r7, #30]
 8011c76:	3301      	adds	r3, #1
 8011c78:	77bb      	strb	r3, [r7, #30]
 8011c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011c80:	7fba      	ldrb	r2, [r7, #30]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	f4ff af52 	bcc.w	8011b2c <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8011c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d107      	bne.n	8011ca0 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	785b      	ldrb	r3, [r3, #1]
 8011c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fa23 	bl	80110e2 <VL53L1_f_028>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	77bb      	strb	r3, [r7, #30]
 8011ca4:	e071      	b.n	8011d8a <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8011ca6:	7fba      	ldrb	r2, [r7, #30]
 8011ca8:	4613      	mov	r3, r2
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	4413      	add	r3, r2
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cb6:	4413      	add	r3, r2
 8011cb8:	3304      	adds	r3, #4
 8011cba:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8011cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cbe:	7c9a      	ldrb	r2, [r3, #18]
 8011cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cc2:	7c5b      	ldrb	r3, [r3, #17]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d25c      	bcs.n	8011d82 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	dd57      	ble.n	8011d84 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8011cd8:	2bff      	cmp	r3, #255	; 0xff
 8011cda:	d053      	beq.n	8011d84 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8011cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cde:	7c9b      	ldrb	r3, [r3, #18]
 8011ce0:	461a      	mov	r2, r3
			prange_data =
 8011ce2:	234c      	movs	r3, #76	; 0x4c
 8011ce4:	fb02 f303 	mul.w	r3, r2, r3
 8011ce8:	3310      	adds	r3, #16
 8011cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cec:	4413      	add	r3, r2
 8011cee:	3304      	adds	r3, #4
 8011cf0:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8011cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d115      	bne.n	8011d26 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8011cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cfc:	7c98      	ldrb	r0, [r3, #18]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 1020 	ldrb.w	r1, [r3, #32]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8b5d      	ldrh	r5, [r3, #26]
 8011d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011d14:	693a      	ldr	r2, [r7, #16]
 8011d16:	9202      	str	r2, [sp, #8]
 8011d18:	697a      	ldr	r2, [r7, #20]
 8011d1a:	9201      	str	r2, [sp, #4]
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	462b      	mov	r3, r5
 8011d20:	4622      	mov	r2, r4
 8011d22:	f7ff fd85 	bl	8011830 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8011d26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d115      	bne.n	8011d5a <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8011d46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011d4a:	9301      	str	r3, [sp, #4]
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	4623      	mov	r3, r4
 8011d52:	f000 fb44 	bl	80123de <VL53L1_f_011>
 8011d56:	4603      	mov	r3, r0
 8011d58:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8011d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d108      	bne.n	8011d74 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	8bd8      	ldrh	r0, [r3, #30]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011d6c:	693a      	ldr	r2, [r7, #16]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	f000 fbda 	bl	8012528 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8011d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d76:	7c9b      	ldrb	r3, [r3, #18]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d7e:	749a      	strb	r2, [r3, #18]
 8011d80:	e000      	b.n	8011d84 <VL53L1_f_033+0x400>
			continue;
 8011d82:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011d84:	7fbb      	ldrb	r3, [r7, #30]
 8011d86:	3301      	adds	r3, #1
 8011d88:	77bb      	strb	r3, [r7, #30]
 8011d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011d90:	7fba      	ldrb	r2, [r7, #30]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d387      	bcc.n	8011ca6 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8011d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3724      	adds	r7, #36	; 0x24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011da2 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b08c      	sub	sp, #48	; 0x30
 8011da6:	af02      	add	r7, sp, #8
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	603b      	str	r3, [r7, #0]
 8011dae:	4603      	mov	r3, r0
 8011db0:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011db2:	2300      	movs	r3, #0
 8011db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011db8:	7bfa      	ldrb	r2, [r7, #15]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	00db      	lsls	r3, r3, #3
 8011dbe:	4413      	add	r3, r2
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	4413      	add	r3, r2
 8011dca:	3304      	adds	r3, #4
 8011dcc:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8011de0:	2300      	movs	r3, #0
 8011de2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	785a      	ldrb	r2, [r3, #1]
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	781a      	ldrb	r2, [r3, #0]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	789a      	ldrb	r2, [r3, #2]
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011dfc:	6a3b      	ldr	r3, [r7, #32]
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e04:	e04d      	b.n	8011ea2 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	78da      	ldrb	r2, [r3, #3]
 8011e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e12:	fb01 f202 	mul.w	r2, r1, r2
 8011e16:	1a9b      	subs	r3, r3, r2
 8011e18:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	7999      	ldrb	r1, [r3, #6]
 8011e1e:	f107 0218 	add.w	r2, r7, #24
 8011e22:	7ff8      	ldrb	r0, [r7, #31]
 8011e24:	f107 0310 	add.w	r3, r7, #16
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	f107 0314 	add.w	r3, r7, #20
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4613      	mov	r3, r2
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	f000 fa7a 	bl	801232c <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8011e38:	7ffb      	ldrb	r3, [r7, #31]
 8011e3a:	69ba      	ldr	r2, [r7, #24]
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	440b      	add	r3, r1
 8011e42:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8011e44:	7ffb      	ldrb	r3, [r7, #31]
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	3318      	adds	r3, #24
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	440b      	add	r3, r1
 8011e50:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8011e52:	7ffb      	ldrb	r3, [r7, #31]
 8011e54:	693a      	ldr	r2, [r7, #16]
 8011e56:	6839      	ldr	r1, [r7, #0]
 8011e58:	3330      	adds	r3, #48	; 0x30
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	440b      	add	r3, r1
 8011e5e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8011e60:	69ba      	ldr	r2, [r7, #24]
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	689a      	ldr	r2, [r3, #8]
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8011e6e:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8011e70:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8011e72:	6839      	ldr	r1, [r7, #0]
 8011e74:	3348      	adds	r3, #72	; 0x48
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	440b      	add	r3, r1
 8011e7a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8011e7c:	697a      	ldr	r2, [r7, #20]
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	689a      	ldr	r2, [r3, #8]
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8011e8a:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8011e8c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8011e8e:	6839      	ldr	r1, [r7, #0]
 8011e90:	3360      	adds	r3, #96	; 0x60
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	440b      	add	r3, r1
 8011e96:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ea2:	6a3b      	ldr	r3, [r7, #32]
 8011ea4:	791b      	ldrb	r3, [r3, #4]
 8011ea6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d9ab      	bls.n	8011e06 <VL53L1_f_034+0x64>
	}

	return status;
 8011eae:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3728      	adds	r7, #40	; 0x28
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8011eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ebc:	b08f      	sub	sp, #60	; 0x3c
 8011ebe:	af06      	add	r7, sp, #24
 8011ec0:	60ba      	str	r2, [r7, #8]
 8011ec2:	607b      	str	r3, [r7, #4]
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	73fb      	strb	r3, [r7, #15]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011ed4:	7bfa      	ldrb	r2, [r7, #15]
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	00db      	lsls	r3, r3, #3
 8011eda:	4413      	add	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	77fb      	strb	r3, [r7, #31]
 8011efc:	e0b9      	b.n	8012072 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	78da      	ldrb	r2, [r3, #3]
 8011f02:	7ffb      	ldrb	r3, [r7, #31]
 8011f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f08:	fb01 f202 	mul.w	r2, r1, r2
 8011f0c:	1a9b      	subs	r3, r3, r2
 8011f0e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8011f10:	7ffb      	ldrb	r3, [r7, #31]
 8011f12:	3301      	adds	r3, #1
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	78d2      	ldrb	r2, [r2, #3]
 8011f18:	fb93 f1f2 	sdiv	r1, r3, r2
 8011f1c:	fb01 f202 	mul.w	r2, r1, r2
 8011f20:	1a9b      	subs	r3, r3, r2
 8011f22:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	789b      	ldrb	r3, [r3, #2]
 8011f28:	7dfa      	ldrb	r2, [r7, #23]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	f080 809e 	bcs.w	801206c <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8011f34:	7dba      	ldrb	r2, [r7, #22]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	f080 8098 	bcs.w	801206c <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011f3c:	7dfb      	ldrb	r3, [r7, #23]
 8011f3e:	68ba      	ldr	r2, [r7, #8]
 8011f40:	3348      	adds	r3, #72	; 0x48
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	4413      	add	r3, r2
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10e      	bne.n	8011f6a <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8011f4c:	7dfb      	ldrb	r3, [r7, #23]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	3360      	adds	r3, #96	; 0x60
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	4413      	add	r3, r2
 8011f56:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d106      	bne.n	8011f6a <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8011f5c:	7dfb      	ldrb	r3, [r7, #23]
 8011f5e:	68ba      	ldr	r2, [r7, #8]
 8011f60:	4413      	add	r3, r2
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011f68:	e043      	b.n	8011ff2 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	3348      	adds	r3, #72	; 0x48
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	db0e      	blt.n	8011f98 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	3360      	adds	r3, #96	; 0x60
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	4413      	add	r3, r2
 8011f84:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	db06      	blt.n	8011f98 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8011f8a:	7dfb      	ldrb	r3, [r7, #23]
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	4413      	add	r3, r2
 8011f90:	2201      	movs	r2, #1
 8011f92:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011f96:	e02c      	b.n	8011ff2 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	68ba      	ldr	r2, [r7, #8]
 8011f9c:	3348      	adds	r3, #72	; 0x48
 8011f9e:	009b      	lsls	r3, r3, #2
 8011fa0:	4413      	add	r3, r2
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	da1e      	bge.n	8011fe6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	3360      	adds	r3, #96	; 0x60
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	4413      	add	r3, r2
 8011fb2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	db16      	blt.n	8011fe6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011fb8:	7dbb      	ldrb	r3, [r7, #22]
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	3348      	adds	r3, #72	; 0x48
 8011fbe:	009b      	lsls	r3, r3, #2
 8011fc0:	4413      	add	r3, r2
 8011fc2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	db0e      	blt.n	8011fe6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8011fc8:	7dbb      	ldrb	r3, [r7, #22]
 8011fca:	68ba      	ldr	r2, [r7, #8]
 8011fcc:	3360      	adds	r3, #96	; 0x60
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	da06      	bge.n	8011fe6 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	68ba      	ldr	r2, [r7, #8]
 8011fdc:	4413      	add	r3, r2
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011fe4:	e005      	b.n	8011ff2 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	4413      	add	r3, r2
 8011fec:	2200      	movs	r2, #0
 8011fee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8011ff2:	7dfb      	ldrb	r3, [r7, #23]
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d035      	beq.n	801206c <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	7ffa      	ldrb	r2, [r7, #31]
 8012004:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8012006:	7dfb      	ldrb	r3, [r7, #23]
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	009b      	lsls	r3, r3, #2
 801200c:	4413      	add	r3, r2
 801200e:	685c      	ldr	r4, [r3, #4]
 8012010:	7dfb      	ldrb	r3, [r7, #23]
 8012012:	68ba      	ldr	r2, [r7, #8]
 8012014:	3318      	adds	r3, #24
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	4413      	add	r3, r2
 801201a:	685d      	ldr	r5, [r3, #4]
 801201c:	7dfb      	ldrb	r3, [r7, #23]
 801201e:	68ba      	ldr	r2, [r7, #8]
 8012020:	3330      	adds	r3, #48	; 0x30
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	4413      	add	r3, r2
 8012026:	685e      	ldr	r6, [r3, #4]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	78d2      	ldrb	r2, [r2, #3]
 8012030:	69b9      	ldr	r1, [r7, #24]
 8012032:	3118      	adds	r1, #24
 8012034:	7ff8      	ldrb	r0, [r7, #31]
 8012036:	9105      	str	r1, [sp, #20]
 8012038:	9204      	str	r2, [sp, #16]
 801203a:	9303      	str	r3, [sp, #12]
 801203c:	2300      	movs	r3, #0
 801203e:	9302      	str	r3, [sp, #8]
 8012040:	2300      	movs	r3, #0
 8012042:	9301      	str	r3, [sp, #4]
 8012044:	2300      	movs	r3, #0
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	4633      	mov	r3, r6
 801204a:	462a      	mov	r2, r5
 801204c:	4621      	mov	r1, r4
 801204e:	f000 f81c 	bl	801208a <VL53L1_f_036>
 8012052:	4603      	mov	r3, r0
 8012054:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8012056:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801205a:	f113 0f0f 	cmn.w	r3, #15
 801205e:	d105      	bne.n	801206c <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	68ba      	ldr	r2, [r7, #8]
 8012064:	4413      	add	r3, r2
 8012066:	2200      	movs	r2, #0
 8012068:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 801206c:	7ffb      	ldrb	r3, [r7, #31]
 801206e:	3301      	adds	r3, #1
 8012070:	77fb      	strb	r3, [r7, #31]
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	791b      	ldrb	r3, [r3, #4]
 8012076:	7ffa      	ldrb	r2, [r7, #31]
 8012078:	429a      	cmp	r2, r3
 801207a:	f4ff af40 	bcc.w	8011efe <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 801207e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3724      	adds	r7, #36	; 0x24
 8012086:	46bd      	mov	sp, r7
 8012088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801208a <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 801208a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801208e:	b0b2      	sub	sp, #200	; 0xc8
 8012090:	af00      	add	r7, sp, #0
 8012092:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8012096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801209a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801209e:	4603      	mov	r3, r0
 80120a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80120a4:	23f1      	movs	r3, #241	; 0xf1
 80120a6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 80120aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120ae:	f04f 0300 	mov.w	r3, #0
 80120b2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 80120b6:	f04f 0200 	mov.w	r2, #0
 80120ba:	f04f 0300 	mov.w	r3, #0
 80120be:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 80120c2:	f04f 0200 	mov.w	r2, #0
 80120c6:	f04f 0300 	mov.w	r3, #0
 80120ca:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80120ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80120d2:	17da      	asrs	r2, r3, #31
 80120d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80120d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 80120dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80120e0:	17da      	asrs	r2, r3, #31
 80120e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80120e6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80120ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80120ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80120f2:	4602      	mov	r2, r0
 80120f4:	ebb3 0802 	subs.w	r8, r3, r2
 80120f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120fc:	460a      	mov	r2, r1
 80120fe:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8012102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012106:	17da      	asrs	r2, r3, #31
 8012108:	67bb      	str	r3, [r7, #120]	; 0x78
 801210a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801210c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8012110:	460b      	mov	r3, r1
 8012112:	ebb8 0a03 	subs.w	sl, r8, r3
 8012116:	4613      	mov	r3, r2
 8012118:	eb69 0b03 	sbc.w	fp, r9, r3
 801211c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012120:	17da      	asrs	r2, r3, #31
 8012122:	673b      	str	r3, [r7, #112]	; 0x70
 8012124:	677a      	str	r2, [r7, #116]	; 0x74
 8012126:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801212a:	460b      	mov	r3, r1
 801212c:	ebba 0403 	subs.w	r4, sl, r3
 8012130:	4613      	mov	r3, r2
 8012132:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8012136:	f04f 0200 	mov.w	r2, #0
 801213a:	f04f 0300 	mov.w	r3, #0
 801213e:	032b      	lsls	r3, r5, #12
 8012140:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8012144:	0322      	lsls	r2, r4, #12
 8012146:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801214a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801214e:	17da      	asrs	r2, r3, #31
 8012150:	66bb      	str	r3, [r7, #104]	; 0x68
 8012152:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8012154:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012158:	17da      	asrs	r2, r3, #31
 801215a:	663b      	str	r3, [r7, #96]	; 0x60
 801215c:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801215e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8012162:	4623      	mov	r3, r4
 8012164:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8012168:	4602      	mov	r2, r0
 801216a:	1a9b      	subs	r3, r3, r2
 801216c:	65bb      	str	r3, [r7, #88]	; 0x58
 801216e:	462b      	mov	r3, r5
 8012170:	460a      	mov	r2, r1
 8012172:	eb63 0302 	sbc.w	r3, r3, r2
 8012176:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8012178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801217c:	17da      	asrs	r2, r3, #31
 801217e:	653b      	str	r3, [r7, #80]	; 0x50
 8012180:	657a      	str	r2, [r7, #84]	; 0x54
 8012182:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8012186:	4623      	mov	r3, r4
 8012188:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801218c:	4602      	mov	r2, r0
 801218e:	1a9b      	subs	r3, r3, r2
 8012190:	64bb      	str	r3, [r7, #72]	; 0x48
 8012192:	462b      	mov	r3, r5
 8012194:	460a      	mov	r2, r1
 8012196:	eb63 0302 	sbc.w	r3, r3, r2
 801219a:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801219c:	f04f 0200 	mov.w	r2, #0
 80121a0:	f04f 0300 	mov.w	r3, #0
 80121a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80121a8:	4629      	mov	r1, r5
 80121aa:	030b      	lsls	r3, r1, #12
 80121ac:	4621      	mov	r1, r4
 80121ae:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80121b2:	4621      	mov	r1, r4
 80121b4:	030a      	lsls	r2, r1, #12
 80121b6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 80121ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80121be:	4313      	orrs	r3, r2
 80121c0:	f000 80a8 	beq.w	8012314 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 80121c4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80121c8:	f04f 0000 	mov.w	r0, #0
 80121cc:	f04f 0100 	mov.w	r1, #0
 80121d0:	0319      	lsls	r1, r3, #12
 80121d2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80121d6:	0310      	lsls	r0, r2, #12
 80121d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80121dc:	1814      	adds	r4, r2, r0
 80121de:	633c      	str	r4, [r7, #48]	; 0x30
 80121e0:	414b      	adcs	r3, r1
 80121e2:	637b      	str	r3, [r7, #52]	; 0x34
 80121e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80121e8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 80121ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80121f0:	1891      	adds	r1, r2, r2
 80121f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80121f4:	415b      	adcs	r3, r3
 80121f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8012200:	f7ee fcaa 	bl	8000b58 <__aeabi_ldivmod>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 801220c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012210:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8012214:	6239      	str	r1, [r7, #32]
 8012216:	f143 0300 	adc.w	r3, r3, #0
 801221a:	627b      	str	r3, [r7, #36]	; 0x24
 801221c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012220:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8012224:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8012228:	2200      	movs	r2, #0
 801222a:	643b      	str	r3, [r7, #64]	; 0x40
 801222c:	647a      	str	r2, [r7, #68]	; 0x44
 801222e:	f04f 0200 	mov.w	r2, #0
 8012232:	f04f 0300 	mov.w	r3, #0
 8012236:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801223a:	4629      	mov	r1, r5
 801223c:	030b      	lsls	r3, r1, #12
 801223e:	4621      	mov	r1, r4
 8012240:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8012244:	4621      	mov	r1, r4
 8012246:	030a      	lsls	r2, r1, #12
 8012248:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801224c:	1884      	adds	r4, r0, r2
 801224e:	61bc      	str	r4, [r7, #24]
 8012250:	eb41 0303 	adc.w	r3, r1, r3
 8012254:	61fb      	str	r3, [r7, #28]
 8012256:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801225a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 801225e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012262:	1c51      	adds	r1, r2, #1
 8012264:	63b9      	str	r1, [r7, #56]	; 0x38
 8012266:	f143 0300 	adc.w	r3, r3, #0
 801226a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801226c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012270:	460b      	mov	r3, r1
 8012272:	0fdb      	lsrs	r3, r3, #31
 8012274:	2200      	movs	r2, #0
 8012276:	613b      	str	r3, [r7, #16]
 8012278:	617a      	str	r2, [r7, #20]
 801227a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801227e:	4623      	mov	r3, r4
 8012280:	4602      	mov	r2, r0
 8012282:	189b      	adds	r3, r3, r2
 8012284:	60bb      	str	r3, [r7, #8]
 8012286:	460b      	mov	r3, r1
 8012288:	462a      	mov	r2, r5
 801228a:	eb42 0303 	adc.w	r3, r2, r3
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	f04f 0200 	mov.w	r2, #0
 8012294:	f04f 0300 	mov.w	r3, #0
 8012298:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801229c:	4621      	mov	r1, r4
 801229e:	084a      	lsrs	r2, r1, #1
 80122a0:	4629      	mov	r1, r5
 80122a2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80122a6:	4629      	mov	r1, r5
 80122a8:	104b      	asrs	r3, r1, #1
 80122aa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 80122ae:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	da05      	bge.n	80122c2 <VL53L1_f_036+0x238>
			mean_phase = 0;
 80122b6:	f04f 0200 	mov.w	r2, #0
 80122ba:	f04f 0300 	mov.w	r3, #0
 80122be:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 80122c2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80122c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80122ca:	f173 0300 	sbcs.w	r3, r3, #0
 80122ce:	db05      	blt.n	80122dc <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 80122d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122d4:	f04f 0300 	mov.w	r3, #0
 80122d8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 80122dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 80122e4:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 80122e8:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 80122ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80122ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80122f2:	fb01 f202 	mul.w	r2, r1, r2
 80122f6:	1a9b      	subs	r3, r3, r2
 80122f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 80122fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012300:	17da      	asrs	r2, r3, #31
 8012302:	603b      	str	r3, [r7, #0]
 8012304:	607a      	str	r2, [r7, #4]
 8012306:	e9d7 3400 	ldrd	r3, r4, [r7]
 801230a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 801230e:	2300      	movs	r3, #0
 8012310:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8012314:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801231c:	601a      	str	r2, [r3, #0]

	return status;
 801231e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8012322:	4618      	mov	r0, r3
 8012324:	37c8      	adds	r7, #200	; 0xc8
 8012326:	46bd      	mov	sp, r7
 8012328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801232c <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 801232c:	b480      	push	{r7}
 801232e:	b087      	sub	sp, #28
 8012330:	af00      	add	r7, sp, #0
 8012332:	60ba      	str	r2, [r7, #8]
 8012334:	607b      	str	r3, [r7, #4]
 8012336:	4603      	mov	r3, r0
 8012338:	73fb      	strb	r3, [r7, #15]
 801233a:	460b      	mov	r3, r1
 801233c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8012342:	2300      	movs	r3, #0
 8012344:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2200      	movs	r2, #0
 801234a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 801234c:	7bfa      	ldrb	r2, [r7, #15]
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	3206      	adds	r2, #6
 8012352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012356:	6a3b      	ldr	r3, [r7, #32]
 8012358:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	2200      	movs	r2, #0
 801235e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8012360:	2300      	movs	r3, #0
 8012362:	75fb      	strb	r3, [r7, #23]
 8012364:	e02f      	b.n	80123c6 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8012366:	7bfa      	ldrb	r2, [r7, #15]
 8012368:	7dfb      	ldrb	r3, [r7, #23]
 801236a:	4413      	add	r3, r2
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	7a92      	ldrb	r2, [r2, #10]
 8012370:	441a      	add	r2, r3
 8012372:	7bbb      	ldrb	r3, [r7, #14]
 8012374:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8012376:	68ba      	ldr	r2, [r7, #8]
 8012378:	7a92      	ldrb	r2, [r2, #10]
 801237a:	fb93 f1f2 	sdiv	r1, r3, r2
 801237e:	fb01 f202 	mul.w	r2, r1, r2
 8012382:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8012384:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8012386:	7dfa      	ldrb	r2, [r7, #23]
 8012388:	7bbb      	ldrb	r3, [r7, #14]
 801238a:	429a      	cmp	r2, r3
 801238c:	d20a      	bcs.n	80123a4 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	7db9      	ldrb	r1, [r7, #22]
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	3106      	adds	r1, #6
 8012398:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801239c:	441a      	add	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	601a      	str	r2, [r3, #0]
 80123a2:	e00d      	b.n	80123c0 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 80123a4:	7dfa      	ldrb	r2, [r7, #23]
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d909      	bls.n	80123c0 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	7db9      	ldrb	r1, [r7, #22]
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	3106      	adds	r1, #6
 80123b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123ba:	441a      	add	r2, r3
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
 80123c2:	3301      	adds	r3, #1
 80123c4:	75fb      	strb	r3, [r7, #23]
 80123c6:	7bbb      	ldrb	r3, [r7, #14]
 80123c8:	005a      	lsls	r2, r3, #1
 80123ca:	7dfb      	ldrb	r3, [r7, #23]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	daca      	bge.n	8012366 <VL53L1_f_013+0x3a>
	}
}
 80123d0:	bf00      	nop
 80123d2:	bf00      	nop
 80123d4:	371c      	adds	r7, #28
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b088      	sub	sp, #32
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	60ba      	str	r2, [r7, #8]
 80123e6:	461a      	mov	r2, r3
 80123e8:	4603      	mov	r3, r0
 80123ea:	81fb      	strh	r3, [r7, #14]
 80123ec:	460b      	mov	r3, r1
 80123ee:	81bb      	strh	r3, [r7, #12]
 80123f0:	4613      	mov	r3, r2
 80123f2:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 80123f4:	2300      	movs	r3, #0
 80123f6:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 80123fc:	2300      	movs	r3, #0
 80123fe:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8012404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012406:	89fa      	ldrh	r2, [r7, #14]
 8012408:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	89ba      	ldrh	r2, [r7, #12]
 801240e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	88fa      	ldrh	r2, [r7, #6]
 801241a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	8a5b      	ldrh	r3, [r3, #18]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012424:	23f1      	movs	r3, #241	; 0xf1
 8012426:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d101      	bne.n	8012434 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012430:	23f1      	movs	r3, #241	; 0xf1
 8012432:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8012434:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d16f      	bne.n	801251c <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	8a5b      	ldrh	r3, [r3, #18]
 8012440:	4618      	mov	r0, r3
 8012442:	f7fd f903 	bl	800f64c <VL53L1_calc_pll_period_us>
 8012446:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8012448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	3301      	adds	r3, #1
 801244e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8012450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012452:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8012454:	4619      	mov	r1, r3
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801245c:	6978      	ldr	r0, [r7, #20]
 801245e:	f7fd f90c 	bl	800f67a <VL53L1_duration_maths>
 8012462:	4602      	mov	r2, r0
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8012468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 801246c:	0119      	lsls	r1, r3, #4
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012474:	6978      	ldr	r0, [r7, #20]
 8012476:	f7fd f900 	bl	800f67a <VL53L1_duration_maths>
 801247a:	4602      	mov	r2, r0
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8012480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8012484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012486:	69db      	ldr	r3, [r3, #28]
 8012488:	4619      	mov	r1, r3
 801248a:	4610      	mov	r0, r2
 801248c:	f7fd fb6d 	bl	800fb6a <VL53L1_rate_maths>
 8012490:	4603      	mov	r3, r0
 8012492:	461a      	mov	r2, r3
 8012494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012496:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 801249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	4619      	mov	r1, r3
 80124a2:	4610      	mov	r0, r2
 80124a4:	f7fd fb61 	bl	800fb6a <VL53L1_rate_maths>
 80124a8:	4603      	mov	r3, r0
 80124aa:	461a      	mov	r2, r3
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 80124b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 80124b4:	461a      	mov	r2, r3
 80124b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b8:	6a1b      	ldr	r3, [r3, #32]
 80124ba:	4619      	mov	r1, r3
 80124bc:	4610      	mov	r0, r2
 80124be:	f7fd fb54 	bl	800fb6a <VL53L1_rate_maths>
 80124c2:	4603      	mov	r3, r0
 80124c4:	461a      	mov	r2, r3
 80124c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80124ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80124ce:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 80124d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 80124d4:	4413      	add	r3, r2
 80124d6:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 80124d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d905      	bls.n	80124ec <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 80124e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80124e4:	69ba      	ldr	r2, [r7, #24]
 80124e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ea:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 80124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ee:	8ada      	ldrh	r2, [r3, #22]
 80124f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124f4:	69b9      	ldr	r1, [r7, #24]
 80124f6:	2006      	movs	r0, #6
 80124f8:	f7fd fb7c 	bl	800fbf4 <VL53L1_rate_per_spad_maths>
 80124fc:	4603      	mov	r3, r0
 80124fe:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8012500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012502:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8012504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012506:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	8ad9      	ldrh	r1, [r3, #22]
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	69db      	ldr	r3, [r3, #28]
 8012510:	461a      	mov	r2, r3
 8012512:	f7fd f90b 	bl	800f72c <VL53L1_events_per_spad_maths>
 8012516:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8012518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 801251c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3720      	adds	r7, #32
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8012528:	b590      	push	{r4, r7, lr}
 801252a:	b085      	sub	sp, #20
 801252c:	af02      	add	r7, sp, #8
 801252e:	4603      	mov	r3, r0
 8012530:	603a      	str	r2, [r7, #0]
 8012532:	80fb      	strh	r3, [r7, #6]
 8012534:	460b      	mov	r3, r1
 8012536:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	8a58      	ldrh	r0, [r3, #18]
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	8a9c      	ldrh	r4, [r3, #20]
 8012544:	88fb      	ldrh	r3, [r7, #6]
 8012546:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801254a:	9201      	str	r2, [sp, #4]
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	2300      	movs	r3, #0
 8012550:	4622      	mov	r2, r4
 8012552:	f7fd fb83 	bl	800fc5c <VL53L1_range_maths>
 8012556:	4603      	mov	r3, r0
 8012558:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	8a58      	ldrh	r0, [r3, #18]
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	8a9c      	ldrh	r4, [r3, #20]
 801256e:	88fb      	ldrh	r3, [r7, #6]
 8012570:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012574:	9201      	str	r2, [sp, #4]
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	2300      	movs	r3, #0
 801257a:	4622      	mov	r2, r4
 801257c:	f7fd fb6e 	bl	800fc5c <VL53L1_range_maths>
 8012580:	4603      	mov	r3, r0
 8012582:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	8a58      	ldrh	r0, [r3, #18]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	8a9c      	ldrh	r4, [r3, #20]
 8012598:	88fb      	ldrh	r3, [r7, #6]
 801259a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801259e:	9201      	str	r2, [sp, #4]
 80125a0:	9300      	str	r3, [sp, #0]
 80125a2:	2300      	movs	r3, #0
 80125a4:	4622      	mov	r2, r4
 80125a6:	f7fd fb59 	bl	800fc5c <VL53L1_range_maths>
 80125aa:	4603      	mov	r3, r0
 80125ac:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd90      	pop	{r4, r7, pc}

080125bc <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 80125c8:	2300      	movs	r3, #0
 80125ca:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 80125d0:	2300      	movs	r3, #0
 80125d2:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	757b      	strb	r3, [r7, #21]





	memcpy(
 80125d8:	22ac      	movs	r2, #172	; 0xac
 80125da:	68b9      	ldr	r1, [r7, #8]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f008 fb15 	bl	801ac0c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80125e2:	2300      	movs	r3, #0
 80125e4:	75fb      	strb	r3, [r7, #23]
 80125e6:	e008      	b.n	80125fa <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 80125e8:	7dfa      	ldrb	r2, [r7, #23]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	3206      	adds	r2, #6
 80125ee:	2100      	movs	r1, #0
 80125f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80125f4:	7dfb      	ldrb	r3, [r7, #23]
 80125f6:	3301      	adds	r3, #1
 80125f8:	75fb      	strb	r3, [r7, #23]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	7a5b      	ldrb	r3, [r3, #9]
 80125fe:	7dfa      	ldrb	r2, [r7, #23]
 8012600:	429a      	cmp	r2, r3
 8012602:	d3f1      	bcc.n	80125e8 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8012604:	68f9      	ldr	r1, [r7, #12]
 8012606:	68b8      	ldr	r0, [r7, #8]
 8012608:	f000 f878 	bl	80126fc <VL53L1_f_038>
 801260c:	4603      	mov	r3, r0
 801260e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	7a9a      	ldrb	r2, [r3, #10]
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	7a9b      	ldrb	r3, [r3, #10]
 8012618:	429a      	cmp	r2, r3
 801261a:	d203      	bcs.n	8012624 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	7a9b      	ldrb	r3, [r3, #10]
 8012620:	75bb      	strb	r3, [r7, #22]
 8012622:	e002      	b.n	801262a <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	7a9b      	ldrb	r3, [r3, #10]
 8012628:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801262a:	2300      	movs	r3, #0
 801262c:	75fb      	strb	r3, [r7, #23]
 801262e:	e05c      	b.n	80126ea <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8012630:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012634:	2b00      	cmp	r3, #0
 8012636:	db0f      	blt.n	8012658 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8012638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801263c:	461a      	mov	r2, r3
 801263e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012642:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	7a92      	ldrb	r2, [r2, #10]
 8012648:	b252      	sxtb	r2, r2
 801264a:	fb93 f1f2 	sdiv	r1, r3, r2
 801264e:	fb01 f202 	mul.w	r2, r1, r2
 8012652:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8012654:	757b      	strb	r3, [r7, #21]
 8012656:	e013      	b.n	8012680 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	7a9b      	ldrb	r3, [r3, #10]
 801265c:	b25b      	sxtb	r3, r3
 801265e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8012660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012664:	4619      	mov	r1, r3
 8012666:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801266a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801266c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	7a92      	ldrb	r2, [r2, #10]
 8012672:	b252      	sxtb	r2, r2
 8012674:	fb93 f1f2 	sdiv	r1, r3, r2
 8012678:	fb01 f202 	mul.w	r2, r1, r2
 801267c:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801267e:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8012680:	7d7b      	ldrb	r3, [r7, #21]
 8012682:	461a      	mov	r2, r3
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	3206      	adds	r2, #6
 8012688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 801268c:	7df9      	ldrb	r1, [r7, #23]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3106      	adds	r1, #6
 8012692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8012696:	429a      	cmp	r2, r3
 8012698:	dd12      	ble.n	80126c0 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801269a:	7d7b      	ldrb	r3, [r7, #21]
 801269c:	461a      	mov	r2, r3
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	3206      	adds	r2, #6
 80126a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 80126a6:	7df9      	ldrb	r1, [r7, #23]
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3106      	adds	r1, #6
 80126ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 80126b0:	7d79      	ldrb	r1, [r7, #21]
 80126b2:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 80126b4:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	1d82      	adds	r2, r0, #6
 80126ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80126be:	e006      	b.n	80126ce <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80126c0:	7d7b      	ldrb	r3, [r7, #21]
 80126c2:	461a      	mov	r2, r3
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	3206      	adds	r2, #6
 80126c8:	2100      	movs	r1, #0
 80126ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 80126ce:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80126d0:	7d7b      	ldrb	r3, [r7, #21]
 80126d2:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	3206      	adds	r2, #6
 80126d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	1d82      	adds	r2, r0, #6
 80126e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
 80126e6:	3301      	adds	r3, #1
 80126e8:	75fb      	strb	r3, [r7, #23]
 80126ea:	7dfa      	ldrb	r2, [r7, #23]
 80126ec:	7dbb      	ldrb	r3, [r7, #22]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d39e      	bcc.n	8012630 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 80126f2:	bf00      	nop
 80126f4:	bf00      	nop
 80126f6:	3718      	adds	r7, #24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b086      	sub	sp, #24
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801270a:	2300      	movs	r3, #0
 801270c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801271c:	4618      	mov	r0, r3
 801271e:	f7fd fb85 	bl	800fe2c <VL53L1_decode_vcsel_period>
 8012722:	4603      	mov	r3, r0
	period = 2048 *
 8012724:	02db      	lsls	r3, r3, #11
 8012726:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00a      	beq.n	8012744 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8012734:	68ba      	ldr	r2, [r7, #8]
 8012736:	fbb3 f2f2 	udiv	r2, r3, r2
 801273a:	68b9      	ldr	r1, [r7, #8]
 801273c:	fb01 f202 	mul.w	r2, r1, r2
 8012740:	1a9b      	subs	r3, r3, r2
 8012742:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801274a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 801274c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	dd09      	ble.n	801276c <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801275e:	2b00      	cmp	r3, #0
 8012760:	da01      	bge.n	8012766 <VL53L1_f_038+0x6a>
 8012762:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8012766:	12db      	asrs	r3, r3, #11
 8012768:	75fb      	strb	r3, [r7, #23]
 801276a:	e008      	b.n	801277e <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012772:	2b00      	cmp	r3, #0
 8012774:	da01      	bge.n	801277a <VL53L1_f_038+0x7e>
 8012776:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801277a:	12db      	asrs	r3, r3, #11
 801277c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 801277e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3718      	adds	r7, #24
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b08e      	sub	sp, #56	; 0x38
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012794:	2300      	movs	r3, #0
 8012796:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 80127a0:	2300      	movs	r3, #0
 80127a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 80127a6:	2300      	movs	r3, #0
 80127a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 80127b0:	2300      	movs	r3, #0
 80127b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80127bc:	22ac      	movs	r2, #172	; 0xac
 80127be:	6879      	ldr	r1, [r7, #4]
 80127c0:	6838      	ldr	r0, [r7, #0]
 80127c2:	f008 fa23 	bl	801ac0c <memcpy>


	podata->VL53L1_p_024 = 0;
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2200      	movs	r2, #0
 80127ca:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80127cc:	2300      	movs	r3, #0
 80127ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127d2:	e00a      	b.n	80127ea <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 80127d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127d8:	683a      	ldr	r2, [r7, #0]
 80127da:	4413      	add	r3, r2
 80127dc:	2210      	movs	r2, #16
 80127de:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80127e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127e4:	3301      	adds	r3, #1
 80127e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127ee:	2b05      	cmp	r3, #5
 80127f0:	d9f0      	bls.n	80127d4 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80127f2:	2300      	movs	r3, #0
 80127f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127f8:	e00b      	b.n	8012812 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 80127fa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	3206      	adds	r2, #6
 8012802:	2100      	movs	r1, #0
 8012804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8012808:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801280c:	3301      	adds	r3, #1
 801280e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	7a5b      	ldrb	r3, [r3, #9]
 8012816:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801281a:	429a      	cmp	r2, r3
 801281c:	d3ed      	bcc.n	80127fa <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801281e:	2300      	movs	r3, #0
 8012820:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012824:	e012      	b.n	801284c <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 8012826:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801282a:	3338      	adds	r3, #56	; 0x38
 801282c:	443b      	add	r3, r7
 801282e:	2200      	movs	r2, #0
 8012830:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8012834:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012838:	3338      	adds	r3, #56	; 0x38
 801283a:	443b      	add	r3, r7
 801283c:	2200      	movs	r2, #0
 801283e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012842:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012846:	3301      	adds	r3, #1
 8012848:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801284c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012850:	2b0f      	cmp	r3, #15
 8012852:	d9e8      	bls.n	8012826 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8012854:	2300      	movs	r3, #0
 8012856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801285a:	2300      	movs	r3, #0
 801285c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012860:	e068      	b.n	8012934 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8012862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	4413      	add	r3, r2
 801286a:	7b1b      	ldrb	r3, [r3, #12]
 801286c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8012870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012874:	3338      	adds	r3, #56	; 0x38
 8012876:	443b      	add	r3, r7
 8012878:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d115      	bne.n	80128ac <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8012880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012884:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012888:	0092      	lsls	r2, r2, #2
 801288a:	b2d2      	uxtb	r2, r2
 801288c:	3338      	adds	r3, #56	; 0x38
 801288e:	443b      	add	r3, r7
 8012890:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8012894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	4413      	add	r3, r2
 801289c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80128a0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 80128a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128a6:	3301      	adds	r3, #1
 80128a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 80128ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80128b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80128b4:	443a      	add	r2, r7
 80128b6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 80128ba:	3201      	adds	r2, #1
 80128bc:	b2d2      	uxtb	r2, r2
 80128be:	3338      	adds	r3, #56	; 0x38
 80128c0:	443b      	add	r3, r7
 80128c2:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 80128c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80128ca:	3338      	adds	r3, #56	; 0x38
 80128cc:	443b      	add	r3, r7
 80128ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80128d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 80128d6:	2300      	movs	r3, #0
 80128d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80128dc:	e021      	b.n	8012922 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 80128de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80128e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80128e6:	441a      	add	r2, r3
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	3206      	adds	r2, #6
 80128ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 80128f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80128f4:	009a      	lsls	r2, r3, #2
 80128f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80128fa:	441a      	add	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	3206      	adds	r2, #6
 8012900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8012904:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8012908:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801290c:	4402      	add	r2, r0
 801290e:	4419      	add	r1, r3
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	3206      	adds	r2, #6
 8012914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8012918:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801291c:	3301      	adds	r3, #1
 801291e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012922:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012926:	2b03      	cmp	r3, #3
 8012928:	d9d9      	bls.n	80128de <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801292a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801292e:	3301      	adds	r3, #1
 8012930:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012934:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012938:	2b05      	cmp	r3, #5
 801293a:	d992      	bls.n	8012862 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801293c:	2300      	movs	r3, #0
 801293e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012942:	e022      	b.n	801298a <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8012944:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012948:	683a      	ldr	r2, [r7, #0]
 801294a:	4413      	add	r3, r2
 801294c:	7b1b      	ldrb	r3, [r3, #12]
 801294e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8012952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012956:	2b0f      	cmp	r3, #15
 8012958:	d80c      	bhi.n	8012974 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801295a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 801295e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8012962:	3238      	adds	r2, #56	; 0x38
 8012964:	443a      	add	r2, r7
 8012966:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	4413      	add	r3, r2
 801296e:	460a      	mov	r2, r1
 8012970:	749a      	strb	r2, [r3, #18]
 8012972:	e005      	b.n	8012980 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8012974:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012978:	683a      	ldr	r2, [r7, #0]
 801297a:	4413      	add	r3, r2
 801297c:	2200      	movs	r2, #0
 801297e:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8012980:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012984:	3301      	adds	r3, #1
 8012986:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801298a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801298e:	2b05      	cmp	r3, #5
 8012990:	d9d8      	bls.n	8012944 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8012992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	b2da      	uxtb	r2, r3
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801299e:	2300      	movs	r3, #0
 80129a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80129a4:	e050      	b.n	8012a48 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 80129a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129aa:	3338      	adds	r3, #56	; 0x38
 80129ac:	443b      	add	r3, r7
 80129ae:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80129b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	dd41      	ble.n	8012a3e <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 80129ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129be:	3338      	adds	r3, #56	; 0x38
 80129c0:	443b      	add	r3, r7
 80129c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80129c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 80129ca:	2300      	movs	r3, #0
 80129cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80129d0:	e031      	b.n	8012a36 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 80129d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80129d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80129da:	441a      	add	r2, r3
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	3206      	adds	r2, #6
 80129e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 80129e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e6:	0fda      	lsrs	r2, r3, #31
 80129e8:	4413      	add	r3, r2
 80129ea:	105b      	asrs	r3, r3, #1
 80129ec:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 80129ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80129f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80129f6:	441a      	add	r2, r3
 80129f8:	4401      	add	r1, r0
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	3206      	adds	r2, #6
 80129fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8012a02:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012a06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a0a:	441a      	add	r2, r3
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	3206      	adds	r2, #6
 8012a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a14:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012a18:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a1c:	441a      	add	r2, r3
 8012a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a20:	fb91 f1f3 	sdiv	r1, r1, r3
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	3206      	adds	r2, #6
 8012a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8012a2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a30:	3301      	adds	r3, #1
 8012a32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012a36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	d9c9      	bls.n	80129d2 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a42:	3301      	adds	r3, #1
 8012a44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012a48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a4c:	2b0f      	cmp	r3, #15
 8012a4e:	d9aa      	bls.n	80129a6 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	2200      	movs	r2, #0
 8012a54:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8012a56:	7bfb      	ldrb	r3, [r7, #15]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8012a5c:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d002      	beq.n	8012a68 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	2204      	movs	r2, #4
 8012a66:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8012a68:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3738      	adds	r7, #56	; 0x38
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8012a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a76:	b0cb      	sub	sp, #300	; 0x12c
 8012a78:	af06      	add	r7, sp, #24
 8012a7a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8012a7e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8012a82:	6020      	str	r0, [r4, #0]
 8012a84:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012a88:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8012a8c:	6001      	str	r1, [r0, #0]
 8012a8e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012a92:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a96:	600a      	str	r2, [r1, #0]
 8012a98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012a9c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8012aa0:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8012aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8012ab0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012ab4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8012ab8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012abc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8012ac0:	f107 0318 	add.w	r3, r7, #24
 8012ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8012acc:	2300      	movs	r3, #0
 8012ace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8012af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012af4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012af8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	f7ff fe44 	bl	801278a <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8012b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b06:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8012b08:	b299      	uxth	r1, r3
 8012b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b0e:	3348      	adds	r3, #72	; 0x48
 8012b10:	461a      	mov	r2, r3
 8012b12:	2000      	movs	r0, #0
 8012b14:	f7fd f9db 	bl	800fece <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8012b18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b20:	3348      	adds	r3, #72	; 0x48
 8012b22:	4619      	mov	r1, r3
 8012b24:	4610      	mov	r0, r2
 8012b26:	f7fd f994 	bl	800fe52 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8012b2a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d142      	bne.n	8012bb8 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8012b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d039      	beq.n	8012bb8 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8012b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012b50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8012b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8012b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8012b7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012b7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8012b82:	6812      	ldr	r2, [r2, #0]
 8012b84:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8012b88:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012b8c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8012b90:	6809      	ldr	r1, [r1, #0]
 8012b92:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8012b96:	f107 0014 	add.w	r0, r7, #20
 8012b9a:	9004      	str	r0, [sp, #16]
 8012b9c:	9103      	str	r1, [sp, #12]
 8012b9e:	9202      	str	r2, [sp, #8]
 8012ba0:	9301      	str	r3, [sp, #4]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	4632      	mov	r2, r6
 8012baa:	4629      	mov	r1, r5
 8012bac:	4620      	mov	r0, r4
 8012bae:	f002 f98c 	bl	8014eca <VL53L1_f_040>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8012bb8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d115      	bne.n	8012bec <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8012bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00c      	beq.n	8012bec <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8012bd2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bdc:	3348      	adds	r3, #72	; 0x48
 8012bde:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8012be2:	f002 fbe4 	bl	80153ae <VL53L1_f_041>
 8012be6:	4603      	mov	r3, r0
 8012be8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8012bec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8012bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012bf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8012bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012c00:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8012c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c08:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8012c0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c10:	2200      	movs	r2, #0
 8012c12:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8012c16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8012c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8012c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c2e:	2200      	movs	r2, #0
 8012c30:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8012c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012c52:	2300      	movs	r3, #0
 8012c54:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012c58:	e108      	b.n	8012e6c <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8012c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8012c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c70:	3348      	adds	r3, #72	; 0x48
 8012c72:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8012c76:	7814      	ldrb	r4, [r2, #0]
 8012c78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012c7c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012c80:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012c84:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8012c88:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012c8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012c90:	9405      	str	r4, [sp, #20]
 8012c92:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8012c96:	9404      	str	r4, [sp, #16]
 8012c98:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8012c9c:	9403      	str	r4, [sp, #12]
 8012c9e:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8012ca2:	9402      	str	r4, [sp, #8]
 8012ca4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8012ca8:	9401      	str	r4, [sp, #4]
 8012caa:	9300      	str	r3, [sp, #0]
 8012cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012cb0:	6812      	ldr	r2, [r2, #0]
 8012cb2:	6809      	ldr	r1, [r1, #0]
 8012cb4:	6800      	ldr	r0, [r0, #0]
 8012cb6:	f7fe fe65 	bl	8011984 <VL53L1_f_033>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8012cc0:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	f040 80cb 	bne.w	8012e60 <VL53L1_hist_process_data+0x3ec>
 8012cca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f040 80c6 	bne.w	8012e60 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8012cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012cd8:	7c9b      	ldrb	r3, [r3, #18]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d110      	bne.n	8012d00 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8012cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012ce2:	3314      	adds	r3, #20
 8012ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8012ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012cec:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8012cee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012cf2:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8012cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012cf8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8012cfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012cfe:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8012d00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8012d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8012d10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	461a      	mov	r2, r3
 8012d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d1c:	fb02 f303 	mul.w	r3, r2, r3
 8012d20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8012d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012d34:	e08b      	b.n	8012e4e <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8012d36:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012d3a:	224c      	movs	r2, #76	; 0x4c
 8012d3c:	fb02 f303 	mul.w	r3, r2, r3
 8012d40:	3310      	adds	r3, #16
 8012d42:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8012d46:	4413      	add	r3, r2
 8012d48:	3304      	adds	r3, #4
 8012d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8012d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d52:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8012d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d5a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	dd0e      	ble.n	8012d80 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8012d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d66:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012d6a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8012d6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d70:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012d74:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8012d76:	1ad3      	subs	r3, r2, r3
 8012d78:	b29b      	uxth	r3, r3
				delta_mm =
 8012d7a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8012d7e:	e00d      	b.n	8012d9c <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8012d80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d84:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012d88:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8012d8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d8e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012d92:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	b29b      	uxth	r3, r3
				delta_mm =
 8012d98:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8012d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012da0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8012da8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8012dac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	461a      	mov	r2, r3
 8012db4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012db8:	fb02 f303 	mul.w	r3, r2, r3
 8012dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8012dc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012dc4:	015b      	lsls	r3, r3, #5
 8012dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8012dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012dce:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012dd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8012de0:	429a      	cmp	r2, r3
 8012de2:	dd2f      	ble.n	8012e44 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8012de4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012de8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012df0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	da22      	bge.n	8012e44 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8012dfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012e04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d91b      	bls.n	8012e44 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012e0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e12:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8012e14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d913      	bls.n	8012e44 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8012e1c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8012e20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012e24:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012e28:	6812      	ldr	r2, [r2, #0]
 8012e2a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	da09      	bge.n	8012e44 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8012e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8012e38:	224c      	movs	r2, #76	; 0x4c
 8012e3a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f007 fee4 	bl	801ac0c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8012e44:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012e48:	3301      	adds	r3, #1
 8012e4a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e52:	7c9b      	ldrb	r3, [r3, #18]
 8012e54:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	f4ff af6c 	bcc.w	8012d36 <VL53L1_hist_process_data+0x2c2>
 8012e5e:	e000      	b.n	8012e62 <VL53L1_hist_process_data+0x3ee>
			continue;
 8012e60:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012e62:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012e66:	3301      	adds	r3, #1
 8012e68:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012e6c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012e70:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012e74:	429a      	cmp	r2, r3
 8012e76:	f67f aef0 	bls.w	8012c5a <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8012e7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8012e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8012e8c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e9a <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b086      	sub	sp, #24
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	60f8      	str	r0, [r7, #12]
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	607a      	str	r2, [r7, #4]
 8012ea6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8012eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d104      	bne.n	8012ebe <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f7f9 fb5a 	bl	800c56e <VL53L1_disable_firmware>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8012ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d104      	bne.n	8012ed0 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f7f9 fb82 	bl	800c5d0 <VL53L1_enable_powerforce>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8012ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d105      	bne.n	8012ee4 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8012ed8:	21fa      	movs	r1, #250	; 0xfa
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f002 fdd0 	bl	8015a80 <VL53L1_WaitUs>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8012ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d107      	bne.n	8012efc <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8012eec:	2201      	movs	r2, #1
 8012eee:	f240 7181 	movw	r1, #1921	; 0x781
 8012ef2:	68f8      	ldr	r0, [r7, #12]
 8012ef4:	f002 fcd0 	bl	8015898 <VL53L1_WrByte>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8012efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d107      	bne.n	8012f14 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8012f04:	2205      	movs	r2, #5
 8012f06:	f240 6183 	movw	r1, #1667	; 0x683
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f002 fcc4 	bl	8015898 <VL53L1_WrByte>
 8012f10:	4603      	mov	r3, r0
 8012f12:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8012f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d105      	bne.n	8012f28 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8012f1c:	6879      	ldr	r1, [r7, #4]
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f002 fdae 	bl	8015a80 <VL53L1_WaitUs>
 8012f24:	4603      	mov	r3, r0
 8012f26:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8012f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d107      	bne.n	8012f40 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8012f30:	2201      	movs	r2, #1
 8012f32:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8012f36:	68f8      	ldr	r0, [r7, #12]
 8012f38:	f002 fcae 	bl	8015898 <VL53L1_WrByte>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8012f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d108      	bne.n	8012f5a <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8012f48:	897b      	ldrh	r3, [r7, #10]
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	f240 7184 	movw	r1, #1924	; 0x784
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f002 fccb 	bl	80158ec <VL53L1_WrWord>
 8012f56:	4603      	mov	r3, r0
 8012f58:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8012f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b086      	sub	sp, #24
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	60f8      	str	r0, [r7, #12]
 8012f6e:	607b      	str	r3, [r7, #4]
 8012f70:	460b      	mov	r3, r1
 8012f72:	72fb      	strb	r3, [r7, #11]
 8012f74:	4613      	mov	r3, r2
 8012f76:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8012f80:	7afb      	ldrb	r3, [r7, #11]
 8012f82:	75bb      	strb	r3, [r7, #22]
 8012f84:	e041      	b.n	801300a <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8012f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d108      	bne.n	8012fa0 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8012f8e:	7dbb      	ldrb	r3, [r7, #22]
 8012f90:	461a      	mov	r2, r3
 8012f92:	f240 7194 	movw	r1, #1940	; 0x794
 8012f96:	68f8      	ldr	r0, [r7, #12]
 8012f98:	f002 fc7e 	bl	8015898 <VL53L1_WrByte>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8012fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d107      	bne.n	8012fb8 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f240 7183 	movw	r1, #1923	; 0x783
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f002 fc72 	bl	8015898 <VL53L1_WrByte>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8012fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d105      	bne.n	8012fcc <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8012fc0:	2105      	movs	r1, #5
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f002 fd5c 	bl	8015a80 <VL53L1_WaitUs>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8012fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d107      	bne.n	8012fe4 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	f240 7183 	movw	r1, #1923	; 0x783
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f002 fc5c 	bl	8015898 <VL53L1_WrByte>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8012fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d108      	bne.n	8012ffe <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8012fec:	2304      	movs	r3, #4
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f002 fc19 	bl	801582c <VL53L1_ReadMulti>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	3304      	adds	r3, #4
 8013002:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8013004:	7dbb      	ldrb	r3, [r7, #22]
 8013006:	3301      	adds	r3, #1
 8013008:	75bb      	strb	r3, [r7, #22]
 801300a:	7dba      	ldrb	r2, [r7, #22]
 801300c:	7af9      	ldrb	r1, [r7, #11]
 801300e:	7abb      	ldrb	r3, [r7, #10]
 8013010:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8013012:	429a      	cmp	r2, r3
 8013014:	dbb7      	blt.n	8012f86 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8013016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3718      	adds	r7, #24
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8013022:	b580      	push	{r7, lr}
 8013024:	b084      	sub	sp, #16
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801302a:	2300      	movs	r3, #0
 801302c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d107      	bne.n	8013046 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8013036:	2201      	movs	r2, #1
 8013038:	f240 7183 	movw	r1, #1923	; 0x783
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f002 fc2b 	bl	8015898 <VL53L1_WrByte>
 8013042:	4603      	mov	r3, r0
 8013044:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8013046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d107      	bne.n	801305e <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 801304e:	2200      	movs	r2, #0
 8013050:	f240 7181 	movw	r1, #1921	; 0x781
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f002 fc1f 	bl	8015898 <VL53L1_WrByte>
 801305a:	4603      	mov	r3, r0
 801305c:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 801305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d104      	bne.n	8013070 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7f9 fac4 	bl	800c5f4 <VL53L1_disable_powerforce>
 801306c:	4603      	mov	r3, r0
 801306e:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8013070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d104      	bne.n	8013082 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f7f9 fa66 	bl	800c54a <VL53L1_enable_firmware>
 801307e:	4603      	mov	r3, r0
 8013080:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8013082:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013086:	4618      	mov	r0, r3
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 801308e:	b480      	push	{r7}
 8013090:	b087      	sub	sp, #28
 8013092:	af00      	add	r7, sp, #0
 8013094:	4603      	mov	r3, r0
 8013096:	60b9      	str	r1, [r7, #8]
 8013098:	607a      	str	r2, [r7, #4]
 801309a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801309c:	2300      	movs	r3, #0
 801309e:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 80130a0:	2300      	movs	r3, #0
 80130a2:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 80130a4:	89fb      	ldrh	r3, [r7, #14]
 80130a6:	2b03      	cmp	r3, #3
 80130a8:	d802      	bhi.n	80130b0 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80130aa:	f06f 0308 	mvn.w	r3, #8
 80130ae:	e018      	b.n	80130e2 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 80130b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130b4:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	3302      	adds	r3, #2
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	b29b      	uxth	r3, r3
 80130be:	8afa      	ldrh	r2, [r7, #22]
 80130c0:	1ad3      	subs	r3, r2, r3
 80130c2:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 80130c4:	8afb      	ldrh	r3, [r7, #22]
 80130c6:	2bff      	cmp	r3, #255	; 0xff
 80130c8:	d901      	bls.n	80130ce <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 80130ce:	8afb      	ldrh	r3, [r7, #22]
 80130d0:	b2da      	uxtb	r2, r3
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	78da      	ldrb	r2, [r3, #3]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	705a      	strb	r2, [r3, #1]

	return status;
 80130de:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	371c      	adds	r7, #28
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 80130ee:	b590      	push	{r4, r7, lr}
 80130f0:	b087      	sub	sp, #28
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	4603      	mov	r3, r0
 80130f6:	60b9      	str	r1, [r7, #8]
 80130f8:	607a      	str	r2, [r7, #4]
 80130fa:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80130fc:	2300      	movs	r3, #0
 80130fe:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8013100:	2300      	movs	r3, #0
 8013102:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8013104:	2300      	movs	r3, #0
 8013106:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8013108:	89fb      	ldrh	r3, [r7, #14]
 801310a:	2b37      	cmp	r3, #55	; 0x37
 801310c:	d802      	bhi.n	8013114 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801310e:	f06f 0308 	mvn.w	r3, #8
 8013112:	e03e      	b.n	8013192 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	2002      	movs	r0, #2
 8013118:	f7f9 f8fd 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801311c:	4603      	mov	r3, r0
 801311e:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	3302      	adds	r3, #2
 8013128:	4619      	mov	r1, r3
 801312a:	2002      	movs	r0, #2
 801312c:	f7f9 f8f3 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013130:	4603      	mov	r3, r0
 8013132:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 801313c:	099b      	lsrs	r3, r3, #6
 801313e:	b29a      	uxth	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2219      	movs	r2, #25
 8013148:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2205      	movs	r2, #5
 801314e:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2205      	movs	r2, #5
 8013154:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	3304      	adds	r3, #4
 801315a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 801315c:	2300      	movs	r3, #0
 801315e:	74fb      	strb	r3, [r7, #19]
 8013160:	e012      	b.n	8013188 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8013162:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8013164:	6979      	ldr	r1, [r7, #20]
 8013166:	2002      	movs	r0, #2
 8013168:	f7f9 f8d5 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801316c:	4603      	mov	r3, r0
 801316e:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	1d23      	adds	r3, r4, #4
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	460a      	mov	r2, r1
 801317a:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	3302      	adds	r3, #2
 8013180:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8013182:	7cfb      	ldrb	r3, [r7, #19]
 8013184:	3301      	adds	r3, #1
 8013186:	74fb      	strb	r3, [r7, #19]
 8013188:	7cfb      	ldrb	r3, [r7, #19]
 801318a:	2b18      	cmp	r3, #24
 801318c:	d9e9      	bls.n	8013162 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 801318e:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8013192:	4618      	mov	r0, r3
 8013194:	371c      	adds	r7, #28
 8013196:	46bd      	mov	sp, r7
 8013198:	bd90      	pop	{r4, r7, pc}

0801319a <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 801319a:	b580      	push	{r7, lr}
 801319c:	b086      	sub	sp, #24
 801319e:	af00      	add	r7, sp, #0
 80131a0:	4603      	mov	r3, r0
 80131a2:	60b9      	str	r1, [r7, #8]
 80131a4:	607a      	str	r2, [r7, #4]
 80131a6:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80131a8:	2300      	movs	r3, #0
 80131aa:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80131ac:	89fb      	ldrh	r3, [r7, #14]
 80131ae:	2b07      	cmp	r3, #7
 80131b0:	d802      	bhi.n	80131b8 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80131b2:	f06f 0308 	mvn.w	r3, #8
 80131b6:	e027      	b.n	8013208 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80131b8:	68b9      	ldr	r1, [r7, #8]
 80131ba:	2002      	movs	r0, #2
 80131bc:	f7f9 f8ab 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80131c0:	4603      	mov	r3, r0
 80131c2:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	3302      	adds	r3, #2
 80131cc:	4619      	mov	r1, r3
 80131ce:	2002      	movs	r0, #2
 80131d0:	f7f9 f8a1 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80131d4:	4603      	mov	r3, r0
 80131d6:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	3304      	adds	r3, #4
 80131e0:	4619      	mov	r1, r3
 80131e2:	2002      	movs	r0, #2
 80131e4:	f7f9 f897 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80131e8:	4603      	mov	r3, r0
 80131ea:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	3306      	adds	r3, #6
 80131f4:	4619      	mov	r1, r3
 80131f6:	2002      	movs	r0, #2
 80131f8:	f7f9 f88d 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80131fc:	4603      	mov	r3, r0
 80131fe:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	80da      	strh	r2, [r3, #6]

	return status;
 8013204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3718      	adds	r7, #24
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b086      	sub	sp, #24
 8013214:	af00      	add	r7, sp, #0
 8013216:	4603      	mov	r3, r0
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	607a      	str	r2, [r7, #4]
 801321c:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801321e:	2300      	movs	r3, #0
 8013220:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8013222:	89fb      	ldrh	r3, [r7, #14]
 8013224:	2b0f      	cmp	r3, #15
 8013226:	d802      	bhi.n	801322e <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8013228:	f06f 0308 	mvn.w	r3, #8
 801322c:	e04d      	b.n	80132ca <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	2002      	movs	r0, #2
 8013232:	f7f9 f870 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013236:	4603      	mov	r3, r0
 8013238:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	789a      	ldrb	r2, [r3, #2]
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	78da      	ldrb	r2, [r3, #3]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	3304      	adds	r3, #4
 8013252:	4619      	mov	r1, r3
 8013254:	2002      	movs	r0, #2
 8013256:	f7f9 f85e 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801325a:	4603      	mov	r3, r0
 801325c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	3306      	adds	r3, #6
 8013266:	4619      	mov	r1, r3
 8013268:	2002      	movs	r0, #2
 801326a:	f7f9 f854 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801326e:	4603      	mov	r3, r0
 8013270:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	3308      	adds	r3, #8
 801327a:	4619      	mov	r1, r3
 801327c:	2002      	movs	r0, #2
 801327e:	f7f9 f84a 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013282:	4603      	mov	r3, r0
 8013284:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	330a      	adds	r3, #10
 801328e:	4619      	mov	r1, r3
 8013290:	2002      	movs	r0, #2
 8013292:	f7f9 f840 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013296:	4603      	mov	r3, r0
 8013298:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	330c      	adds	r3, #12
 80132a2:	4619      	mov	r1, r3
 80132a4:	2002      	movs	r0, #2
 80132a6:	f7f9 f836 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80132aa:	4603      	mov	r3, r0
 80132ac:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	330e      	adds	r3, #14
 80132b6:	4619      	mov	r1, r3
 80132b8:	2002      	movs	r0, #2
 80132ba:	f7f9 f82c 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80132be:	4603      	mov	r3, r0
 80132c0:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	81da      	strh	r2, [r3, #14]

	return status;
 80132c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3718      	adds	r7, #24
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b086      	sub	sp, #24
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	60f8      	str	r0, [r7, #12]
 80132da:	607b      	str	r3, [r7, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	72fb      	strb	r3, [r7, #11]
 80132e0:	4613      	mov	r3, r2
 80132e2:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80132e4:	2300      	movs	r3, #0
 80132e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80132e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d106      	bne.n	80132fe <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 80132f0:	2232      	movs	r2, #50	; 0x32
 80132f2:	2104      	movs	r1, #4
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	f7ff fdd0 	bl	8012e9a <VL53L1_nvm_enable>
 80132fa:	4603      	mov	r3, r0
 80132fc:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 80132fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d107      	bne.n	8013316 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8013306:	7aba      	ldrb	r2, [r7, #10]
 8013308:	7af9      	ldrb	r1, [r7, #11]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f7ff fe2a 	bl	8012f66 <VL53L1_nvm_read>
 8013312:	4603      	mov	r3, r0
 8013314:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8013316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d104      	bne.n	8013328 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f7ff fe7f 	bl	8013022 <VL53L1_nvm_disable>
 8013324:	4603      	mov	r3, r0
 8013326:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8013328:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801332c:	4618      	mov	r0, r3
 801332e:	3718      	adds	r7, #24
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b084      	sub	sp, #16
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801333e:	2300      	movs	r3, #0
 8013340:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8013342:	f107 0308 	add.w	r3, r7, #8
 8013346:	2201      	movs	r2, #1
 8013348:	212e      	movs	r1, #46	; 0x2e
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7ff ffc1 	bl	80132d2 <VL53L1_read_nvm_raw_data>
 8013350:	4603      	mov	r3, r0
 8013352:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8013354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d108      	bne.n	801336e <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 801335c:	f107 0308 	add.w	r3, r7, #8
 8013360:	683a      	ldr	r2, [r7, #0]
 8013362:	4619      	mov	r1, r3
 8013364:	2004      	movs	r0, #4
 8013366:	f7ff fe92 	bl	801308e <VL53L1_nvm_decode_optical_centre>
 801336a:	4603      	mov	r3, r0
 801336c:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 801336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b092      	sub	sp, #72	; 0x48
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
 8013382:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013384:	2300      	movs	r3, #0
 8013386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801338a:	f107 030c 	add.w	r3, r7, #12
 801338e:	220e      	movs	r2, #14
 8013390:	2157      	movs	r1, #87	; 0x57
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff ff9d 	bl	80132d2 <VL53L1_read_nvm_raw_data>
 8013398:	4603      	mov	r3, r0
 801339a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801339e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d109      	bne.n	80133ba <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80133a6:	f107 030c 	add.w	r3, r7, #12
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	4619      	mov	r1, r3
 80133ae:	2038      	movs	r0, #56	; 0x38
 80133b0:	f7ff fe9d 	bl	80130ee <VL53L1_nvm_decode_cal_peak_rate_map>
 80133b4:	4603      	mov	r3, r0
 80133b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80133ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3748      	adds	r7, #72	; 0x48
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}

080133c6 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 80133c6:	b580      	push	{r7, lr}
 80133c8:	b086      	sub	sp, #24
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80133d0:	2300      	movs	r3, #0
 80133d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80133d4:	f107 030c 	add.w	r3, r7, #12
 80133d8:	2202      	movs	r2, #2
 80133da:	2165      	movs	r1, #101	; 0x65
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff ff78 	bl	80132d2 <VL53L1_read_nvm_raw_data>
 80133e2:	4603      	mov	r3, r0
 80133e4:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80133e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d108      	bne.n	8013400 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 80133ee:	f107 030c 	add.w	r3, r7, #12
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	4619      	mov	r1, r3
 80133f6:	2008      	movs	r0, #8
 80133f8:	f7ff fecf 	bl	801319a <VL53L1_nvm_decode_additional_offset_cal_data>
 80133fc:	4603      	mov	r3, r0
 80133fe:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8013400:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8013404:	4618      	mov	r0, r3
 8013406:	3718      	adds	r7, #24
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08a      	sub	sp, #40	; 0x28
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	460b      	mov	r3, r1
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801341a:	2300      	movs	r3, #0
 801341c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8013420:	897b      	ldrh	r3, [r7, #10]
 8013422:	089b      	lsrs	r3, r3, #2
 8013424:	b29b      	uxth	r3, r3
 8013426:	b2d9      	uxtb	r1, r3
 8013428:	f107 0314 	add.w	r3, r7, #20
 801342c:	2204      	movs	r2, #4
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f7ff ff4f 	bl	80132d2 <VL53L1_read_nvm_raw_data>
 8013434:	4603      	mov	r3, r0
 8013436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801343a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8013442:	f107 0314 	add.w	r3, r7, #20
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	4619      	mov	r1, r3
 801344a:	2010      	movs	r0, #16
 801344c:	f7ff fee0 	bl	8013210 <VL53L1_nvm_decode_fmt_range_results_data>
 8013450:	4603      	mov	r3, r0
 8013452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8013456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801345a:	4618      	mov	r0, r3
 801345c:	3728      	adds	r7, #40	; 0x28
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b086      	sub	sp, #24
 8013466:	af00      	add	r7, sp, #0
 8013468:	60f8      	str	r0, [r7, #12]
 801346a:	460b      	mov	r3, r1
 801346c:	607a      	str	r2, [r7, #4]
 801346e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013470:	2300      	movs	r3, #0
 8013472:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8013474:	897b      	ldrh	r3, [r7, #10]
 8013476:	2b0a      	cmp	r3, #10
 8013478:	d802      	bhi.n	8013480 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801347a:	f06f 0309 	mvn.w	r3, #9
 801347e:	e047      	b.n	8013510 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013488:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8013496:	f002 020f 	and.w	r2, r2, #15
 801349a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801349c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80134a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80134aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80134ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80134b6:	f002 0203 	and.w	r2, r2, #3
 80134ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80134bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80134c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80134ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80134cc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	88d8      	ldrh	r0, [r3, #6]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	3305      	adds	r3, #5
 80134d6:	461a      	mov	r2, r3
 80134d8:	2102      	movs	r1, #2
 80134da:	f7f8 fef1 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80134e2:	68fa      	ldr	r2, [r7, #12]
 80134e4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80134e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80134f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80134fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80134fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013500:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8013506:	68fa      	ldr	r2, [r7, #12]
 8013508:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801350a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801350c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3718      	adds	r7, #24
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b086      	sub	sp, #24
 801351c:	af00      	add	r7, sp, #0
 801351e:	4603      	mov	r3, r0
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	607a      	str	r2, [r7, #4]
 8013524:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013526:	2300      	movs	r3, #0
 8013528:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801352a:	89fb      	ldrh	r3, [r7, #14]
 801352c:	2b0a      	cmp	r3, #10
 801352e:	d802      	bhi.n	8013536 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013530:	f06f 0309 	mvn.w	r3, #9
 8013534:	e046      	b.n	80135c4 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801353e:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	3301      	adds	r3, #1
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	f003 030f 	and.w	r3, r3, #15
 801354e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	3302      	adds	r3, #2
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801355e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	3303      	adds	r3, #3
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	f003 0303 	and.w	r3, r3, #3
 801356e:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	3304      	adds	r3, #4
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801357e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	3305      	adds	r3, #5
 8013588:	4619      	mov	r1, r3
 801358a:	2002      	movs	r0, #2
 801358c:	f7f8 fec3 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013590:	4603      	mov	r3, r0
 8013592:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	79da      	ldrb	r2, [r3, #7]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	7a1a      	ldrb	r2, [r3, #8]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	3309      	adds	r3, #9
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135b2:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	7a9a      	ldrb	r2, [r3, #10]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80135c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3718      	adds	r7, #24
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80135d6:	2300      	movs	r3, #0
 80135d8:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80135da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d108      	bne.n	80135f4 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80135e2:	f107 020c 	add.w	r2, r7, #12
 80135e6:	230b      	movs	r3, #11
 80135e8:	2101      	movs	r1, #1
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f002 f91e 	bl	801582c <VL53L1_ReadMulti>
 80135f0:	4603      	mov	r3, r0
 80135f2:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80135f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d108      	bne.n	801360e <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80135fc:	f107 030c 	add.w	r3, r7, #12
 8013600:	683a      	ldr	r2, [r7, #0]
 8013602:	4619      	mov	r1, r3
 8013604:	200b      	movs	r0, #11
 8013606:	f7ff ff87 	bl	8013518 <VL53L1_i2c_decode_static_nvm_managed>
 801360a:	4603      	mov	r3, r0
 801360c:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801360e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013612:	4618      	mov	r0, r3
 8013614:	3718      	adds	r7, #24
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}

0801361a <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801361a:	b580      	push	{r7, lr}
 801361c:	b086      	sub	sp, #24
 801361e:	af00      	add	r7, sp, #0
 8013620:	60f8      	str	r0, [r7, #12]
 8013622:	460b      	mov	r3, r1
 8013624:	607a      	str	r2, [r7, #4]
 8013626:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013628:	2300      	movs	r3, #0
 801362a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 801362c:	897b      	ldrh	r3, [r7, #10]
 801362e:	2b16      	cmp	r3, #22
 8013630:	d802      	bhi.n	8013638 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013632:	f06f 0309 	mvn.w	r3, #9
 8013636:	e076      	b.n	8013726 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013648:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8013652:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801365c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8013666:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8013670:	f002 020f 	and.w	r2, r2, #15
 8013674:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013676:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8013680:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801368a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801368e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013690:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801369a:	f002 0203 	and.w	r2, r2, #3
 801369e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80136a0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	8958      	ldrh	r0, [r3, #10]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	3309      	adds	r3, #9
 80136aa:	461a      	mov	r2, r3
 80136ac:	2102      	movs	r1, #2
 80136ae:	f7f8 fe07 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	330b      	adds	r3, #11
 80136bc:	461a      	mov	r2, r3
 80136be:	2102      	movs	r1, #2
 80136c0:	f7f8 fe49 	bl	800c356 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	330d      	adds	r3, #13
 80136ce:	461a      	mov	r2, r3
 80136d0:	2102      	movs	r1, #2
 80136d2:	f7f8 fe40 	bl	800c356 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	8a18      	ldrh	r0, [r3, #16]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	330f      	adds	r3, #15
 80136de:	461a      	mov	r2, r3
 80136e0:	2102      	movs	r1, #2
 80136e2:	f7f8 fded 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80136ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136f0:	b218      	sxth	r0, r3
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3311      	adds	r3, #17
 80136f6:	461a      	mov	r2, r3
 80136f8:	2102      	movs	r1, #2
 80136fa:	f7f8 fe2c 	bl	800c356 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3313      	adds	r3, #19
 8013708:	461a      	mov	r2, r3
 801370a:	2102      	movs	r1, #2
 801370c:	f7f8 fe23 	bl	800c356 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3315      	adds	r3, #21
 801371a:	461a      	mov	r2, r3
 801371c:	2102      	movs	r1, #2
 801371e:	f7f8 fe1a 	bl	800c356 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8013722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b086      	sub	sp, #24
 8013732:	af00      	add	r7, sp, #0
 8013734:	4603      	mov	r3, r0
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
 801373a:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801373c:	2300      	movs	r3, #0
 801373e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8013740:	89fb      	ldrh	r3, [r7, #14]
 8013742:	2b16      	cmp	r3, #22
 8013744:	d802      	bhi.n	801374c <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013746:	f06f 0309 	mvn.w	r3, #9
 801374a:	e079      	b.n	8013840 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	785a      	ldrb	r2, [r3, #1]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	789a      	ldrb	r2, [r3, #2]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	78da      	ldrb	r2, [r3, #3]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	791a      	ldrb	r2, [r3, #4]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	3305      	adds	r3, #5
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	f003 030f 	and.w	r3, r3, #15
 801377e:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	799a      	ldrb	r2, [r3, #6]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	3307      	adds	r3, #7
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013796:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	3308      	adds	r3, #8
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	f003 0303 	and.w	r3, r3, #3
 80137a6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	3309      	adds	r3, #9
 80137b0:	4619      	mov	r1, r3
 80137b2:	2002      	movs	r0, #2
 80137b4:	f7f8 fdaf 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80137b8:	4603      	mov	r3, r0
 80137ba:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	330b      	adds	r3, #11
 80137c4:	4619      	mov	r1, r3
 80137c6:	2002      	movs	r0, #2
 80137c8:	f7f8 fdf1 	bl	800c3ae <VL53L1_i2c_decode_int16_t>
 80137cc:	4603      	mov	r3, r0
 80137ce:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	330d      	adds	r3, #13
 80137d8:	4619      	mov	r1, r3
 80137da:	2002      	movs	r0, #2
 80137dc:	f7f8 fde7 	bl	800c3ae <VL53L1_i2c_decode_int16_t>
 80137e0:	4603      	mov	r3, r0
 80137e2:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	330f      	adds	r3, #15
 80137ec:	4619      	mov	r1, r3
 80137ee:	2002      	movs	r0, #2
 80137f0:	f7f8 fd91 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 80137f4:	4603      	mov	r3, r0
 80137f6:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	3311      	adds	r3, #17
 8013800:	4619      	mov	r1, r3
 8013802:	2002      	movs	r0, #2
 8013804:	f7f8 fdd3 	bl	800c3ae <VL53L1_i2c_decode_int16_t>
 8013808:	4603      	mov	r3, r0
 801380a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801380e:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	3313      	adds	r3, #19
 8013818:	4619      	mov	r1, r3
 801381a:	2002      	movs	r0, #2
 801381c:	f7f8 fdc7 	bl	800c3ae <VL53L1_i2c_decode_int16_t>
 8013820:	4603      	mov	r3, r0
 8013822:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	3315      	adds	r3, #21
 801382c:	4619      	mov	r1, r3
 801382e:	2002      	movs	r0, #2
 8013830:	f7f8 fdbd 	bl	800c3ae <VL53L1_i2c_decode_int16_t>
 8013834:	4603      	mov	r3, r0
 8013836:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 801383c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013852:	2300      	movs	r3, #0
 8013854:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d108      	bne.n	8013870 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801385e:	f107 0208 	add.w	r2, r7, #8
 8013862:	2317      	movs	r3, #23
 8013864:	210d      	movs	r1, #13
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f001 ffe0 	bl	801582c <VL53L1_ReadMulti>
 801386c:	4603      	mov	r3, r0
 801386e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d108      	bne.n	801388a <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8013878:	f107 0308 	add.w	r3, r7, #8
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	4619      	mov	r1, r3
 8013880:	2017      	movs	r0, #23
 8013882:	f7ff ff54 	bl	801372e <VL53L1_i2c_decode_customer_nvm_managed>
 8013886:	4603      	mov	r3, r0
 8013888:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801388a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3720      	adds	r7, #32
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013896:	b580      	push	{r7, lr}
 8013898:	b086      	sub	sp, #24
 801389a:	af00      	add	r7, sp, #0
 801389c:	60f8      	str	r0, [r7, #12]
 801389e:	460b      	mov	r3, r1
 80138a0:	607a      	str	r2, [r7, #4]
 80138a2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80138a4:	2300      	movs	r3, #0
 80138a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 80138a8:	897b      	ldrh	r3, [r7, #10]
 80138aa:	2b1f      	cmp	r3, #31
 80138ac:	d802      	bhi.n	80138b4 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80138ae:	f06f 0309 	mvn.w	r3, #9
 80138b2:	e0cf      	b.n	8013a54 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	2102      	movs	r1, #2
 80138bc:	4618      	mov	r0, r3
 80138be:	f7f8 fcff 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80138ca:	f002 0201 	and.w	r2, r2, #1
 80138ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80138d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80138da:	f002 020f 	and.w	r2, r2, #15
 80138de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80138e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80138ea:	f002 020f 	and.w	r2, r2, #15
 80138ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80138f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80138fa:	f002 021f 	and.w	r2, r2, #31
 80138fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013900:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801390a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801390e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013910:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801391a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801391e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013920:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801392a:	f002 0201 	and.w	r2, r2, #1
 801392e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8013930:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801393a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8013944:	f002 0201 	and.w	r2, r2, #1
 8013948:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801394a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8013954:	f002 0203 	and.w	r2, r2, #3
 8013958:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801395a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8013964:	f002 021f 	and.w	r2, r2, #31
 8013968:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801396a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8013974:	f002 0203 	and.w	r2, r2, #3
 8013978:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801397a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8013984:	f002 0203 	and.w	r2, r2, #3
 8013988:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801398a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8013994:	f002 0207 	and.w	r2, r2, #7
 8013998:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801399a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80139a4:	f002 021f 	and.w	r2, r2, #31
 80139a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80139aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80139b4:	f002 0201 	and.w	r2, r2, #1
 80139b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80139ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80139c0:	68fa      	ldr	r2, [r7, #12]
 80139c2:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80139c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80139ca:	68fa      	ldr	r2, [r7, #12]
 80139cc:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80139ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80139d4:	68fa      	ldr	r2, [r7, #12]
 80139d6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80139d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80139e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80139ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80139f6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	8b18      	ldrh	r0, [r3, #24]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3318      	adds	r3, #24
 8013a00:	461a      	mov	r2, r3
 8013a02:	2102      	movs	r1, #2
 8013a04:	f7f8 fc5c 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8013a10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8013a1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8013a24:	f002 020f 	and.w	r2, r2, #15
 8013a28:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8013a2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8013a34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8013a3e:	f002 020f 	and.w	r2, r2, #15
 8013a42:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8013a44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8013a4e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3718      	adds	r7, #24
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b086      	sub	sp, #24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	460b      	mov	r3, r1
 8013a66:	607a      	str	r2, [r7, #4]
 8013a68:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8013a6e:	897b      	ldrh	r3, [r7, #10]
 8013a70:	2b15      	cmp	r3, #21
 8013a72:	d802      	bhi.n	8013a7a <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013a74:	f06f 0309 	mvn.w	r3, #9
 8013a78:	e070      	b.n	8013b5c <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013a8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8013a90:	68fa      	ldr	r2, [r7, #12]
 8013a92:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8013a94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8013a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013aa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013aa4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8013aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013aae:	b298      	uxth	r0, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	2102      	movs	r1, #2
 8013ab8:	f7f8 fc02 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8013ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013ac8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013aca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8013ad4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8013ade:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8013ae8:	f002 0201 	and.w	r2, r2, #1
 8013aec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013aee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8013af8:	f002 0207 	and.w	r2, r2, #7
 8013afc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8013afe:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	8998      	ldrh	r0, [r3, #12]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	330c      	adds	r3, #12
 8013b08:	461a      	mov	r2, r3
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	f7f8 fbd8 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	89d8      	ldrh	r0, [r3, #14]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	330e      	adds	r3, #14
 8013b18:	461a      	mov	r2, r3
 8013b1a:	2102      	movs	r1, #2
 8013b1c:	f7f8 fbd0 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	8a18      	ldrh	r0, [r3, #16]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	3310      	adds	r3, #16
 8013b28:	461a      	mov	r2, r3
 8013b2a:	2102      	movs	r1, #2
 8013b2c:	f7f8 fbc8 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8013b38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8013b3e:	68fa      	ldr	r2, [r7, #12]
 8013b40:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8013b42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8013b48:	68fa      	ldr	r2, [r7, #12]
 8013b4a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8013b4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8013b56:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3718      	adds	r7, #24
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	607a      	str	r2, [r7, #4]
 8013b70:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013b72:	2300      	movs	r3, #0
 8013b74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8013b76:	897b      	ldrh	r3, [r7, #10]
 8013b78:	2b16      	cmp	r3, #22
 8013b7a:	d802      	bhi.n	8013b82 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013b7c:	f06f 0309 	mvn.w	r3, #9
 8013b80:	e06e      	b.n	8013c60 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	f003 030f 	and.w	r3, r3, #15
 8013b8a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013b98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8013ba2:	f002 020f 	and.w	r2, r2, #15
 8013ba6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8013ba8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8013bb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8013bbc:	f002 020f 	and.w	r2, r2, #15
 8013bc0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8013bc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8013bc8:	68fa      	ldr	r2, [r7, #12]
 8013bca:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8013bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8013bd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013bda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013bdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8013be6:	f002 020f 	and.w	r2, r2, #15
 8013bea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013bec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8013bf2:	68fa      	ldr	r2, [r7, #12]
 8013bf4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8013bf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8013c00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013c04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013c06:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	8958      	ldrh	r0, [r3, #10]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	330a      	adds	r3, #10
 8013c10:	461a      	mov	r2, r3
 8013c12:	2102      	movs	r1, #2
 8013c14:	f7f8 fb54 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	8998      	ldrh	r0, [r3, #12]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	330c      	adds	r3, #12
 8013c20:	461a      	mov	r2, r3
 8013c22:	2102      	movs	r1, #2
 8013c24:	f7f8 fb4c 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8013c2c:	68fa      	ldr	r2, [r7, #12]
 8013c2e:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8013c30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8013c3a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	6918      	ldr	r0, [r3, #16]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3312      	adds	r3, #18
 8013c44:	461a      	mov	r2, r3
 8013c46:	2104      	movs	r1, #4
 8013c48:	f7f8 fbda 	bl	800c400 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8013c54:	f002 0201 	and.w	r2, r2, #1
 8013c58:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8013c5a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b086      	sub	sp, #24
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	460b      	mov	r3, r1
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c76:	2300      	movs	r3, #0
 8013c78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8013c7a:	897b      	ldrh	r3, [r7, #10]
 8013c7c:	2b11      	cmp	r3, #17
 8013c7e:	d802      	bhi.n	8013c86 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013c80:	f06f 0309 	mvn.w	r3, #9
 8013c84:	e071      	b.n	8013d6a <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	f003 0303 	and.w	r3, r3, #3
 8013c8e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	8858      	ldrh	r0, [r3, #2]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	2102      	movs	r1, #2
 8013ca0:	f7f8 fb0e 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	8898      	ldrh	r0, [r3, #4]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	3303      	adds	r3, #3
 8013cac:	461a      	mov	r2, r3
 8013cae:	2102      	movs	r1, #2
 8013cb0:	f7f8 fb06 	bl	800c2c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013cbc:	f002 0201 	and.w	r2, r2, #1
 8013cc0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013cc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8013ccc:	f002 0207 	and.w	r2, r2, #7
 8013cd0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013cd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8013cd8:	68fa      	ldr	r2, [r7, #12]
 8013cda:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8013cdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8013ce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013cf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013cf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013cf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013d00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013d04:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8013d06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013d10:	f002 0203 	and.w	r2, r2, #3
 8013d14:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8013d16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8013d20:	f002 0203 	and.w	r2, r2, #3
 8013d24:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8013d26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8013d30:	f002 020f 	and.w	r2, r2, #15
 8013d34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8013d36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8013d40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8013d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8013d54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8013d5e:	f002 0203 	and.w	r2, r2, #3
 8013d62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8013d64:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3718      	adds	r7, #24
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013d72:	b480      	push	{r7}
 8013d74:	b087      	sub	sp, #28
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	60f8      	str	r0, [r7, #12]
 8013d7a:	460b      	mov	r3, r1
 8013d7c:	607a      	str	r2, [r7, #4]
 8013d7e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013d80:	2300      	movs	r3, #0
 8013d82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8013d84:	897b      	ldrh	r3, [r7, #10]
 8013d86:	2b04      	cmp	r3, #4
 8013d88:	d802      	bhi.n	8013d90 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013d8a:	f06f 0309 	mvn.w	r3, #9
 8013d8e:	e025      	b.n	8013ddc <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	f003 0301 	and.w	r3, r3, #1
 8013d98:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8013da6:	f002 0201 	and.w	r2, r2, #1
 8013daa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8013dac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8013db6:	f002 0201 	and.w	r2, r2, #1
 8013dba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8013dbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8013dc6:	f002 0203 	and.w	r2, r2, #3
 8013dca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013dcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8013dd6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	371c      	adds	r7, #28
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013df2:	2300      	movs	r3, #0
 8013df4:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d108      	bne.n	8013e10 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8013dfe:	f107 0308 	add.w	r3, r7, #8
 8013e02:	461a      	mov	r2, r3
 8013e04:	2105      	movs	r1, #5
 8013e06:	6838      	ldr	r0, [r7, #0]
 8013e08:	f7ff ffb3 	bl	8013d72 <VL53L1_i2c_encode_system_control>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8013e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d108      	bne.n	8013e2a <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8013e18:	f107 0208 	add.w	r2, r7, #8
 8013e1c:	2305      	movs	r3, #5
 8013e1e:	2183      	movs	r1, #131	; 0x83
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f001 fccd 	bl	80157c0 <VL53L1_WriteMulti>
 8013e26:	4603      	mov	r3, r0
 8013e28:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8013e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b086      	sub	sp, #24
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	60b9      	str	r1, [r7, #8]
 8013e40:	607a      	str	r2, [r7, #4]
 8013e42:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e44:	2300      	movs	r3, #0
 8013e46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8013e48:	89fb      	ldrh	r3, [r7, #14]
 8013e4a:	2b2b      	cmp	r3, #43	; 0x2b
 8013e4c:	d802      	bhi.n	8013e54 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013e4e:	f06f 0309 	mvn.w	r3, #9
 8013e52:	e0e2      	b.n	801401a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e5c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	785a      	ldrb	r2, [r3, #1]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	3302      	adds	r3, #2
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f003 030f 	and.w	r3, r3, #15
 8013e74:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	78da      	ldrb	r2, [r3, #3]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	3304      	adds	r3, #4
 8013e86:	4619      	mov	r1, r3
 8013e88:	2002      	movs	r0, #2
 8013e8a:	f7f8 fa44 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	3306      	adds	r3, #6
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	2002      	movs	r0, #2
 8013e9e:	f7f8 fa3a 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	3308      	adds	r3, #8
 8013eae:	4619      	mov	r1, r3
 8013eb0:	2002      	movs	r0, #2
 8013eb2:	f7f8 fa30 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	330a      	adds	r3, #10
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	2002      	movs	r0, #2
 8013ec6:	f7f8 fa26 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	330c      	adds	r3, #12
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	2002      	movs	r0, #2
 8013eda:	f7f8 fa1c 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	330e      	adds	r3, #14
 8013eea:	4619      	mov	r1, r3
 8013eec:	2002      	movs	r0, #2
 8013eee:	f7f8 fa12 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	3310      	adds	r3, #16
 8013efe:	4619      	mov	r1, r3
 8013f00:	2002      	movs	r0, #2
 8013f02:	f7f8 fa08 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f06:	4603      	mov	r3, r0
 8013f08:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	3312      	adds	r3, #18
 8013f12:	4619      	mov	r1, r3
 8013f14:	2002      	movs	r0, #2
 8013f16:	f7f8 f9fe 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	3314      	adds	r3, #20
 8013f26:	4619      	mov	r1, r3
 8013f28:	2002      	movs	r0, #2
 8013f2a:	f7f8 f9f4 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	3316      	adds	r3, #22
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	2002      	movs	r0, #2
 8013f3e:	f7f8 f9ea 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f42:	4603      	mov	r3, r0
 8013f44:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	3318      	adds	r3, #24
 8013f4e:	4619      	mov	r1, r3
 8013f50:	2002      	movs	r0, #2
 8013f52:	f7f8 f9e0 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f56:	4603      	mov	r3, r0
 8013f58:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	331a      	adds	r3, #26
 8013f62:	4619      	mov	r1, r3
 8013f64:	2002      	movs	r0, #2
 8013f66:	f7f8 f9d6 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	331c      	adds	r3, #28
 8013f76:	4619      	mov	r1, r3
 8013f78:	2002      	movs	r0, #2
 8013f7a:	f7f8 f9cc 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	331e      	adds	r3, #30
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	2002      	movs	r0, #2
 8013f8e:	f7f8 f9c2 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013f92:	4603      	mov	r3, r0
 8013f94:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	3320      	adds	r3, #32
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	2002      	movs	r0, #2
 8013fa2:	f7f8 f9b8 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	3322      	adds	r3, #34	; 0x22
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	2002      	movs	r0, #2
 8013fb6:	f7f8 f9ae 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	3324      	adds	r3, #36	; 0x24
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	2002      	movs	r0, #2
 8013fca:	f7f8 f9a4 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	3326      	adds	r3, #38	; 0x26
 8013fda:	4619      	mov	r1, r3
 8013fdc:	2002      	movs	r0, #2
 8013fde:	f7f8 f99a 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	3328      	adds	r3, #40	; 0x28
 8013fee:	4619      	mov	r1, r3
 8013ff0:	2002      	movs	r0, #2
 8013ff2:	f7f8 f990 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8014016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801401a:	4618      	mov	r0, r3
 801401c:	3718      	adds	r7, #24
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b086      	sub	sp, #24
 8014026:	af00      	add	r7, sp, #0
 8014028:	4603      	mov	r3, r0
 801402a:	60b9      	str	r1, [r7, #8]
 801402c:	607a      	str	r2, [r7, #4]
 801402e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014030:	2300      	movs	r3, #0
 8014032:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8014034:	89fb      	ldrh	r3, [r7, #14]
 8014036:	2b20      	cmp	r3, #32
 8014038:	d802      	bhi.n	8014040 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801403a:	f06f 0309 	mvn.w	r3, #9
 801403e:	e04d      	b.n	80140dc <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8014040:	68b9      	ldr	r1, [r7, #8]
 8014042:	2004      	movs	r0, #4
 8014044:	f7f8 fa06 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 8014048:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	3304      	adds	r3, #4
 8014052:	4619      	mov	r1, r3
 8014054:	2004      	movs	r0, #4
 8014056:	f7f8 f9fd 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 801405a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	3308      	adds	r3, #8
 8014064:	4619      	mov	r1, r3
 8014066:	2004      	movs	r0, #4
 8014068:	f7f8 fa11 	bl	800c48e <VL53L1_i2c_decode_int32_t>
 801406c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	330c      	adds	r3, #12
 8014076:	4619      	mov	r1, r3
 8014078:	2004      	movs	r0, #4
 801407a:	f7f8 f9eb 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 801407e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	3310      	adds	r3, #16
 8014088:	4619      	mov	r1, r3
 801408a:	2004      	movs	r0, #4
 801408c:	f7f8 f9e2 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 8014090:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	3314      	adds	r3, #20
 801409a:	4619      	mov	r1, r3
 801409c:	2004      	movs	r0, #4
 801409e:	f7f8 f9d9 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 80140a2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	3318      	adds	r3, #24
 80140ac:	4619      	mov	r1, r3
 80140ae:	2004      	movs	r0, #4
 80140b0:	f7f8 f9ed 	bl	800c48e <VL53L1_i2c_decode_int32_t>
 80140b4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	331c      	adds	r3, #28
 80140be:	4619      	mov	r1, r3
 80140c0:	2004      	movs	r0, #4
 80140c2:	f7f8 f9c7 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 80140c6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80140d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3718      	adds	r7, #24
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b086      	sub	sp, #24
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	4603      	mov	r3, r0
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80140f2:	2300      	movs	r3, #0
 80140f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 80140f6:	89fb      	ldrh	r3, [r7, #14]
 80140f8:	2b37      	cmp	r3, #55	; 0x37
 80140fa:	d802      	bhi.n	8014102 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80140fc:	f06f 0309 	mvn.w	r3, #9
 8014100:	e15e      	b.n	80143c0 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8014102:	68b9      	ldr	r1, [r7, #8]
 8014104:	2002      	movs	r0, #2
 8014106:	f7f8 f906 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801410a:	4603      	mov	r3, r0
 801410c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	3302      	adds	r3, #2
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801411c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	3303      	adds	r3, #3
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801412c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	3304      	adds	r3, #4
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	f003 0303 	and.w	r3, r3, #3
 801413c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	3305      	adds	r3, #5
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	3306      	adds	r3, #6
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801415c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	3307      	adds	r3, #7
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801416c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	3308      	adds	r3, #8
 8014176:	4619      	mov	r1, r3
 8014178:	2002      	movs	r0, #2
 801417a:	f7f8 f8cc 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801417e:	4603      	mov	r3, r0
 8014180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014184:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	330a      	adds	r3, #10
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 0303 	and.w	r3, r3, #3
 8014194:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	330b      	adds	r3, #11
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	f003 0303 	and.w	r3, r3, #3
 80141a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	330c      	adds	r3, #12
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	f003 030f 	and.w	r3, r3, #15
 80141b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	330d      	adds	r3, #13
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	f003 0307 	and.w	r3, r3, #7
 80141c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	330e      	adds	r3, #14
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	f003 0301 	and.w	r3, r3, #1
 80141d4:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	330f      	adds	r3, #15
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	f003 0303 	and.w	r3, r3, #3
 80141e4:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	7c1a      	ldrb	r2, [r3, #16]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	7c5a      	ldrb	r2, [r3, #17]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	3312      	adds	r3, #18
 80141fe:	4619      	mov	r1, r3
 8014200:	2002      	movs	r0, #2
 8014202:	f7f8 f888 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8014206:	4603      	mov	r3, r0
 8014208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801420c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	3316      	adds	r3, #22
 8014216:	4619      	mov	r1, r3
 8014218:	2002      	movs	r0, #2
 801421a:	f7f8 f87c 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801421e:	4603      	mov	r3, r0
 8014220:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	3318      	adds	r3, #24
 801422a:	4619      	mov	r1, r3
 801422c:	2002      	movs	r0, #2
 801422e:	f7f8 f872 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 8014232:	4603      	mov	r3, r0
 8014234:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	331a      	adds	r3, #26
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	f003 0301 	and.w	r3, r3, #1
 8014244:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	331b      	adds	r3, #27
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	f003 0307 	and.w	r3, r3, #7
 8014254:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	7f1a      	ldrb	r2, [r3, #28]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	7f5a      	ldrb	r2, [r3, #29]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	331e      	adds	r3, #30
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014274:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	331f      	adds	r3, #31
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014284:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	3320      	adds	r3, #32
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	f003 0303 	and.w	r3, r3, #3
 8014294:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	3321      	adds	r3, #33	; 0x21
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	f003 030f 	and.w	r3, r3, #15
 80142a4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	3325      	adds	r3, #37	; 0x25
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	f003 0301 	and.w	r3, r3, #1
 80142d8:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	3326      	adds	r3, #38	; 0x26
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	f003 0303 	and.w	r3, r3, #3
 80142ea:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	3327      	adds	r3, #39	; 0x27
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 031f 	and.w	r3, r3, #31
 80142fc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	3328      	adds	r3, #40	; 0x28
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	f003 031f 	and.w	r3, r3, #31
 801430e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	3329      	adds	r3, #41	; 0x29
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f003 031f 	and.w	r3, r3, #31
 8014320:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	332a      	adds	r3, #42	; 0x2a
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	f003 0301 	and.w	r3, r3, #1
 8014332:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	332b      	adds	r3, #43	; 0x2b
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f003 0301 	and.w	r3, r3, #1
 8014344:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	332c      	adds	r3, #44	; 0x2c
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	332d      	adds	r3, #45	; 0x2d
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014368:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	332e      	adds	r3, #46	; 0x2e
 8014374:	4619      	mov	r1, r3
 8014376:	2004      	movs	r0, #4
 8014378:	f7f8 f86c 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 801437c:	4603      	mov	r3, r0
 801437e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	3332      	adds	r3, #50	; 0x32
 801438a:	4619      	mov	r1, r3
 801438c:	2004      	movs	r0, #4
 801438e:	f7f8 f861 	bl	800c454 <VL53L1_i2c_decode_uint32_t>
 8014392:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	3336      	adds	r3, #54	; 0x36
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	f003 0301 	and.w	r3, r3, #1
 80143a2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	3337      	adds	r3, #55	; 0x37
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	f003 0301 	and.w	r3, r3, #1
 80143b4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80143bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3718      	adds	r7, #24
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b086      	sub	sp, #24
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	4603      	mov	r3, r0
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
 80143d4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80143d6:	2300      	movs	r3, #0
 80143d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80143da:	89fb      	ldrh	r3, [r7, #14]
 80143dc:	2b30      	cmp	r3, #48	; 0x30
 80143de:	d802      	bhi.n	80143e6 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80143e0:	f06f 0309 	mvn.w	r3, #9
 80143e4:	e112      	b.n	801460c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	785a      	ldrb	r2, [r3, #1]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	789a      	ldrb	r2, [r3, #2]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80143fe:	68bb      	ldr	r3, [r7, #8]
 8014400:	3303      	adds	r3, #3
 8014402:	4619      	mov	r1, r3
 8014404:	2002      	movs	r0, #2
 8014406:	f7f7 ff86 	bl	800c316 <VL53L1_i2c_decode_uint16_t>
 801440a:	4603      	mov	r3, r0
 801440c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	3305      	adds	r3, #5
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801441c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	3306      	adds	r3, #6
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	f003 0307 	and.w	r3, r3, #7
 801442c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	3307      	adds	r3, #7
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	f003 0307 	and.w	r3, r3, #7
 801443c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	3308      	adds	r3, #8
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801444c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	3309      	adds	r3, #9
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801445c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	330a      	adds	r3, #10
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	f003 0301 	and.w	r3, r3, #1
 801446c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	330b      	adds	r3, #11
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801447c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	330c      	adds	r3, #12
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	330d      	adds	r3, #13
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801449c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	330e      	adds	r3, #14
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144ac:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	7bda      	ldrb	r2, [r3, #15]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	7c1a      	ldrb	r2, [r3, #16]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	7c5a      	ldrb	r2, [r3, #17]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	7c9a      	ldrb	r2, [r3, #18]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	7cda      	ldrb	r2, [r3, #19]
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	7d1a      	ldrb	r2, [r3, #20]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	7d5a      	ldrb	r2, [r3, #21]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	7d9a      	ldrb	r2, [r3, #22]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	7dda      	ldrb	r2, [r3, #23]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	7e1a      	ldrb	r2, [r3, #24]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	7e5a      	ldrb	r2, [r3, #25]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	7e9a      	ldrb	r2, [r3, #26]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	7eda      	ldrb	r2, [r3, #27]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	7f1a      	ldrb	r2, [r3, #28]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	7f5a      	ldrb	r2, [r3, #29]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	7f9a      	ldrb	r2, [r3, #30]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	7fda      	ldrb	r2, [r3, #31]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8014608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3718      	adds	r7, #24
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b090      	sub	sp, #64	; 0x40
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801461e:	2300      	movs	r3, #0
 8014620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014624:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014628:	2b00      	cmp	r3, #0
 801462a:	d10a      	bne.n	8014642 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 801462c:	f107 020c 	add.w	r2, r7, #12
 8014630:	2331      	movs	r3, #49	; 0x31
 8014632:	f240 110f 	movw	r1, #271	; 0x10f
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f001 f8f8 	bl	801582c <VL53L1_ReadMulti>
 801463c:	4603      	mov	r3, r0
 801463e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014642:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014646:	2b00      	cmp	r3, #0
 8014648:	d109      	bne.n	801465e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801464a:	f107 030c 	add.w	r3, r7, #12
 801464e:	683a      	ldr	r2, [r7, #0]
 8014650:	4619      	mov	r1, r3
 8014652:	2031      	movs	r0, #49	; 0x31
 8014654:	f7ff feb8 	bl	80143c8 <VL53L1_i2c_decode_nvm_copy_data>
 8014658:	4603      	mov	r3, r0
 801465a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801465e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014662:	4618      	mov	r0, r3
 8014664:	3740      	adds	r7, #64	; 0x40
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}

0801466a <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801466a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801466e:	b0d6      	sub	sp, #344	; 0x158
 8014670:	af00      	add	r7, sp, #0
 8014672:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8014676:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801467a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801467e:	4603      	mov	r3, r0
 8014680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8014684:	23f1      	movs	r3, #241	; 0xf1
 8014686:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801468a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801468e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8014692:	2300      	movs	r3, #0
 8014694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8014698:	f04f 0200 	mov.w	r2, #0
 801469c:	f04f 0300 	mov.w	r3, #0
 80146a0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 80146a4:	f04f 0200 	mov.w	r2, #0
 80146a8:	f04f 0300 	mov.w	r3, #0
 80146ac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 80146b0:	f04f 0200 	mov.w	r2, #0
 80146b4:	f04f 0300 	mov.w	r3, #0
 80146b8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80146bc:	f04f 0200 	mov.w	r2, #0
 80146c0:	f04f 0300 	mov.w	r3, #0
 80146c4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 80146c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80146cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146d0:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80146d2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8322 	beq.w	8014d20 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 80146dc:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fb fa23 	bl	800fb2c <VL53L1_calc_pll_period_mm>
 80146e6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 80146ea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80146ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d91a      	bls.n	801472c <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80146f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80146fa:	2200      	movs	r2, #0
 80146fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014700:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8014704:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014708:	2200      	movs	r2, #0
 801470a:	4698      	mov	r8, r3
 801470c:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801470e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014712:	460b      	mov	r3, r1
 8014714:	ebb3 0308 	subs.w	r3, r3, r8
 8014718:	63bb      	str	r3, [r7, #56]	; 0x38
 801471a:	4613      	mov	r3, r2
 801471c:	eb63 0309 	sbc.w	r3, r3, r9
 8014720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014722:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8014726:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801472a:	e013      	b.n	8014754 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 801472c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014730:	2200      	movs	r2, #0
 8014732:	469a      	mov	sl, r3
 8014734:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8014736:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801473a:	2200      	movs	r2, #0
 801473c:	461c      	mov	r4, r3
 801473e:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8014740:	ebba 0304 	subs.w	r3, sl, r4
 8014744:	633b      	str	r3, [r7, #48]	; 0x30
 8014746:	eb6b 0305 	sbc.w	r3, fp, r5
 801474a:	637b      	str	r3, [r7, #52]	; 0x34
 801474c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014750:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8014754:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8014758:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801475c:	429a      	cmp	r2, r3
 801475e:	d91f      	bls.n	80147a0 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8014760:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014764:	2200      	movs	r2, #0
 8014766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801476a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 801476e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014772:	2200      	movs	r2, #0
 8014774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014778:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 801477c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8014780:	4623      	mov	r3, r4
 8014782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8014786:	4602      	mov	r2, r0
 8014788:	1a9b      	subs	r3, r3, r2
 801478a:	62bb      	str	r3, [r7, #40]	; 0x28
 801478c:	462b      	mov	r3, r5
 801478e:	460a      	mov	r2, r1
 8014790:	eb63 0302 	sbc.w	r3, r3, r2
 8014794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014796:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801479a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 801479e:	e01e      	b.n	80147de <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80147a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80147a4:	2200      	movs	r2, #0
 80147a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80147aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 80147ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80147b2:	2200      	movs	r2, #0
 80147b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80147b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80147bc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80147c0:	4623      	mov	r3, r4
 80147c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80147c6:	4602      	mov	r2, r0
 80147c8:	1a9b      	subs	r3, r3, r2
 80147ca:	623b      	str	r3, [r7, #32]
 80147cc:	462b      	mov	r3, r5
 80147ce:	460a      	mov	r2, r1
 80147d0:	eb63 0302 	sbc.w	r3, r3, r2
 80147d4:	627b      	str	r3, [r7, #36]	; 0x24
 80147d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80147da:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 80147de:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80147e2:	4313      	orrs	r3, r2
 80147e4:	f000 829c 	beq.w	8014d20 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80147e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80147ec:	2200      	movs	r2, #0
 80147ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80147f2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80147f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80147fa:	2200      	movs	r2, #0
 80147fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014804:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8014808:	4623      	mov	r3, r4
 801480a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801480e:	4602      	mov	r2, r0
 8014810:	189b      	adds	r3, r3, r2
 8014812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014816:	460b      	mov	r3, r1
 8014818:	462a      	mov	r2, r5
 801481a:	eb42 0303 	adc.w	r3, r2, r3
 801481e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8014822:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8014826:	2200      	movs	r2, #0
 8014828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801482c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8014830:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8014834:	4623      	mov	r3, r4
 8014836:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801483a:	4602      	mov	r2, r0
 801483c:	189b      	adds	r3, r3, r2
 801483e:	61bb      	str	r3, [r7, #24]
 8014840:	460b      	mov	r3, r1
 8014842:	462a      	mov	r2, r5
 8014844:	eb42 0303 	adc.w	r3, r2, r3
 8014848:	61fb      	str	r3, [r7, #28]
 801484a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801484e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8014852:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014856:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801485a:	f173 0300 	sbcs.w	r3, r3, #0
 801485e:	d305      	bcc.n	801486c <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8014860:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014864:	f04f 0300 	mov.w	r3, #0
 8014868:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 801486c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8014870:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014874:	fb03 f102 	mul.w	r1, r3, r2
 8014878:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801487c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014880:	fb02 f303 	mul.w	r3, r2, r3
 8014884:	18ca      	adds	r2, r1, r3
 8014886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801488a:	fba3 1303 	umull	r1, r3, r3, r3
 801488e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014892:	460b      	mov	r3, r1
 8014894:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801489c:	18d3      	adds	r3, r2, r3
 801489e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80148a2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80148a6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80148aa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 80148ae:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80148b2:	f04f 0000 	mov.w	r0, #0
 80148b6:	f04f 0100 	mov.w	r1, #0
 80148ba:	0219      	lsls	r1, r3, #8
 80148bc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80148c0:	0210      	lsls	r0, r2, #8
 80148c2:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 80148c6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80148ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80148ce:	d305      	bcc.n	80148dc <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 80148d0:	f04f 32ff 	mov.w	r2, #4294967295
 80148d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80148d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80148dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80148e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80148e4:	f7ec f988 	bl	8000bf8 <__aeabi_uldivmod>
 80148e8:	4602      	mov	r2, r0
 80148ea:	460b      	mov	r3, r1
 80148ec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80148f0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80148f4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80148f8:	f7ec f97e 	bl	8000bf8 <__aeabi_uldivmod>
 80148fc:	4602      	mov	r2, r0
 80148fe:	460b      	mov	r3, r1
 8014900:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8014904:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014908:	2b80      	cmp	r3, #128	; 0x80
 801490a:	d305      	bcc.n	8014918 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 801490c:	f04f 32ff 	mov.w	r2, #4294967295
 8014910:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8014914:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8014918:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801491c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014920:	fb03 f102 	mul.w	r1, r3, r2
 8014924:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8014928:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801492c:	fb02 f303 	mul.w	r3, r2, r3
 8014930:	4419      	add	r1, r3
 8014932:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014936:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801493a:	fba2 2303 	umull	r2, r3, r2, r3
 801493e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014942:	4613      	mov	r3, r2
 8014944:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801494c:	18cb      	adds	r3, r1, r3
 801494e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014952:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8014956:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801495a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801495e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014962:	2200      	movs	r2, #0
 8014964:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014968:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801496c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8014970:	2200      	movs	r2, #0
 8014972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014976:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801497a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801497e:	4623      	mov	r3, r4
 8014980:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8014984:	4602      	mov	r2, r0
 8014986:	189b      	adds	r3, r3, r2
 8014988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801498c:	460b      	mov	r3, r1
 801498e:	462a      	mov	r2, r5
 8014990:	eb42 0303 	adc.w	r3, r2, r3
 8014994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8014998:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801499c:	2200      	movs	r2, #0
 801499e:	67bb      	str	r3, [r7, #120]	; 0x78
 80149a0:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80149a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80149a6:	4623      	mov	r3, r4
 80149a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80149ac:	4602      	mov	r2, r0
 80149ae:	189b      	adds	r3, r3, r2
 80149b0:	673b      	str	r3, [r7, #112]	; 0x70
 80149b2:	460b      	mov	r3, r1
 80149b4:	462a      	mov	r2, r5
 80149b6:	eb42 0303 	adc.w	r3, r2, r3
 80149ba:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80149bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80149c0:	2200      	movs	r2, #0
 80149c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80149c4:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80149c6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80149ca:	4623      	mov	r3, r4
 80149cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80149d0:	4602      	mov	r2, r0
 80149d2:	189b      	adds	r3, r3, r2
 80149d4:	613b      	str	r3, [r7, #16]
 80149d6:	460b      	mov	r3, r1
 80149d8:	462a      	mov	r2, r5
 80149da:	eb42 0303 	adc.w	r3, r2, r3
 80149de:	617b      	str	r3, [r7, #20]
 80149e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80149e4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 80149e8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80149ec:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80149f0:	f173 0300 	sbcs.w	r3, r3, #0
 80149f4:	d305      	bcc.n	8014a02 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 80149f6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80149fa:	f04f 0300 	mov.w	r3, #0
 80149fe:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8014a02:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014a06:	f04f 0000 	mov.w	r0, #0
 8014a0a:	f04f 0100 	mov.w	r1, #0
 8014a0e:	0219      	lsls	r1, r3, #8
 8014a10:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8014a14:	0210      	lsls	r0, r2, #8
 8014a16:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8014a1a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a1e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014a22:	1884      	adds	r4, r0, r2
 8014a24:	60bc      	str	r4, [r7, #8]
 8014a26:	eb41 0303 	adc.w	r3, r1, r3
 8014a2a:	60fb      	str	r3, [r7, #12]
 8014a2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014a30:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014a34:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	da05      	bge.n	8014a48 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014a44:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8014a48:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d331      	bcc.n	8014ab4 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014a50:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014a54:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a58:	f7ec f8ce 	bl	8000bf8 <__aeabi_uldivmod>
 8014a5c:	4602      	mov	r2, r0
 8014a5e:	460b      	mov	r3, r1
 8014a60:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8014a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014a68:	2200      	movs	r2, #0
 8014a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8014a6c:	667a      	str	r2, [r7, #100]	; 0x64
 8014a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014a72:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8014a76:	4622      	mov	r2, r4
 8014a78:	fb02 f203 	mul.w	r2, r2, r3
 8014a7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014a80:	4629      	mov	r1, r5
 8014a82:	fb01 f303 	mul.w	r3, r1, r3
 8014a86:	441a      	add	r2, r3
 8014a88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	fba3 1301 	umull	r1, r3, r3, r1
 8014a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014a96:	460b      	mov	r3, r1
 8014a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aa0:	18d3      	adds	r3, r2, r3
 8014aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014aa6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8014aaa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014aae:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014ab2:	e030      	b.n	8014b16 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8014ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ab8:	2200      	movs	r2, #0
 8014aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8014abc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014ac2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	fb02 f203 	mul.w	r2, r2, r3
 8014acc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	fb01 f303 	mul.w	r3, r1, r3
 8014ad6:	441a      	add	r2, r3
 8014ad8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014adc:	4621      	mov	r1, r4
 8014ade:	fba3 1301 	umull	r1, r3, r3, r1
 8014ae2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014af0:	18d3      	adds	r3, r2, r3
 8014af2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014af6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8014afa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014afe:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014b02:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014b06:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b0a:	f7ec f875 	bl	8000bf8 <__aeabi_uldivmod>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	460b      	mov	r3, r1
 8014b12:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014b16:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	da05      	bge.n	8014b2a <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b26:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8014b2a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d33d      	bcc.n	8014bae <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014b32:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014b36:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b3a:	f7ec f85d 	bl	8000bf8 <__aeabi_uldivmod>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	460b      	mov	r3, r1
 8014b42:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014b46:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b4a:	f04f 0200 	mov.w	r2, #0
 8014b4e:	f04f 0300 	mov.w	r3, #0
 8014b52:	0882      	lsrs	r2, r0, #2
 8014b54:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014b58:	088b      	lsrs	r3, r1, #2
 8014b5a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8014b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b62:	2200      	movs	r2, #0
 8014b64:	653b      	str	r3, [r7, #80]	; 0x50
 8014b66:	657a      	str	r2, [r7, #84]	; 0x54
 8014b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014b6c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8014b70:	4622      	mov	r2, r4
 8014b72:	fb02 f203 	mul.w	r2, r2, r3
 8014b76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b7a:	4629      	mov	r1, r5
 8014b7c:	fb01 f303 	mul.w	r3, r1, r3
 8014b80:	4413      	add	r3, r2
 8014b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014b86:	4621      	mov	r1, r4
 8014b88:	fba2 1201 	umull	r1, r2, r2, r1
 8014b8c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8014b90:	460a      	mov	r2, r1
 8014b92:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8014b96:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014b9a:	4413      	add	r3, r2
 8014b9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014ba0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8014ba4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014ba8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014bac:	e03c      	b.n	8014c28 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8014bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8014bb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014bbc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8014bc0:	4622      	mov	r2, r4
 8014bc2:	fb02 f203 	mul.w	r2, r2, r3
 8014bc6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014bca:	4629      	mov	r1, r5
 8014bcc:	fb01 f303 	mul.w	r3, r1, r3
 8014bd0:	4413      	add	r3, r2
 8014bd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	fba2 1201 	umull	r1, r2, r2, r1
 8014bdc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014be0:	460a      	mov	r2, r1
 8014be2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8014be6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014bea:	4413      	add	r3, r2
 8014bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014bf0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8014bf4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014bf8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014bfc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014c00:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c04:	f7eb fff8 	bl	8000bf8 <__aeabi_uldivmod>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014c10:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c14:	f04f 0200 	mov.w	r2, #0
 8014c18:	f04f 0300 	mov.w	r3, #0
 8014c1c:	0882      	lsrs	r2, r0, #2
 8014c1e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014c22:	088b      	lsrs	r3, r1, #2
 8014c24:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014c28:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	da05      	bge.n	8014c3c <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014c30:	f04f 32ff 	mov.w	r2, #4294967295
 8014c34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014c38:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8014c3c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c40:	f04f 0200 	mov.w	r2, #0
 8014c44:	f04f 0300 	mov.w	r3, #0
 8014c48:	0882      	lsrs	r2, r0, #2
 8014c4a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014c4e:	088b      	lsrs	r3, r1, #2
 8014c50:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014c54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d305      	bcc.n	8014c68 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014c60:	f04f 0300 	mov.w	r3, #0
 8014c64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8014c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8014c70:	647a      	str	r2, [r7, #68]	; 0x44
 8014c72:	f04f 0200 	mov.w	r2, #0
 8014c76:	f04f 0300 	mov.w	r3, #0
 8014c7a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8014c7e:	4629      	mov	r1, r5
 8014c80:	01cb      	lsls	r3, r1, #7
 8014c82:	4621      	mov	r1, r4
 8014c84:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8014c88:	4621      	mov	r1, r4
 8014c8a:	01ca      	lsls	r2, r1, #7
 8014c8c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8014c90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014c94:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8014c98:	fb03 f202 	mul.w	r2, r3, r2
 8014c9c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014ca0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8014ca4:	fb01 f303 	mul.w	r3, r1, r3
 8014ca8:	441a      	add	r2, r3
 8014caa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014cae:	fba3 1303 	umull	r1, r3, r3, r3
 8014cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cc0:	18d3      	adds	r3, r2, r3
 8014cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014cc6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8014cca:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8014cce:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8014cd2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014cd6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014cda:	1884      	adds	r4, r0, r2
 8014cdc:	603c      	str	r4, [r7, #0]
 8014cde:	eb41 0303 	adc.w	r3, r1, r3
 8014ce2:	607b      	str	r3, [r7, #4]
 8014ce4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014ce8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014cec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d305      	bcc.n	8014d00 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8014cf8:	f04f 0300 	mov.w	r3, #0
 8014cfc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8014d00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fa fdaa 	bl	800f85e <VL53L1_isqrt>
 8014d0a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8014d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8014d18:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8014d20:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014d30 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b086      	sub	sp, #24
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	3318      	adds	r3, #24
 8014d40:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8014d42:	2300      	movs	r3, #0
 8014d44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d107      	bne.n	8014d5e <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8014d4e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 f88b 	bl	8014e6e <VL53L1_poll_for_range_completion>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	75fb      	strb	r3, [r7, #23]
 8014d5c:	e01b      	b.n	8014d96 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014d62:	e011      	b.n	8014d88 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8014d64:	f107 030f 	add.w	r3, r7, #15
 8014d68:	4619      	mov	r1, r3
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 f819 	bl	8014da2 <VL53L1_is_new_data_ready>
 8014d70:	4603      	mov	r3, r0
 8014d72:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8014d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d105      	bne.n	8014d88 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 fe6e 	bl	8015a60 <VL53L1_WaitMs>
 8014d84:	4603      	mov	r3, r0
 8014d86:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014d88:	7bfb      	ldrb	r3, [r7, #15]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d103      	bne.n	8014d96 <VL53L1_wait_for_test_completion+0x66>
 8014d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0e6      	beq.n	8014d64 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8014d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3718      	adds	r7, #24
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}

08014da2 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8014da2:	b580      	push	{r7, lr}
 8014da4:	b086      	sub	sp, #24
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	6078      	str	r0, [r7, #4]
 8014daa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014dac:	2300      	movs	r3, #0
 8014dae:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	3318      	adds	r3, #24
 8014db4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014dc8:	f003 0310 	and.w	r3, r3, #16
 8014dcc:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014dce:	7bfb      	ldrb	r3, [r7, #15]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d102      	bne.n	8014dda <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	75fb      	strb	r3, [r7, #23]
 8014dd8:	e001      	b.n	8014dde <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8014dde:	f107 030e 	add.w	r3, r7, #14
 8014de2:	461a      	mov	r2, r3
 8014de4:	2131      	movs	r1, #49	; 0x31
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 fdb2 	bl	8015950 <VL53L1_RdByte>
 8014dec:	4603      	mov	r3, r0
 8014dee:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8014df0:	7bbb      	ldrb	r3, [r7, #14]
 8014df2:	f003 0201 	and.w	r2, r3, #1
 8014df6:	7dfb      	ldrb	r3, [r7, #23]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d103      	bne.n	8014e04 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	2201      	movs	r2, #1
 8014e00:	701a      	strb	r2, [r3, #0]
 8014e02:	e002      	b.n	8014e0a <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	2200      	movs	r2, #0
 8014e08:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8014e0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3718      	adds	r7, #24
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}

08014e16 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8014e16:	b580      	push	{r7, lr}
 8014e18:	b086      	sub	sp, #24
 8014e1a:	af02      	add	r7, sp, #8
 8014e1c:	6078      	str	r0, [r7, #4]
 8014e1e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014e20:	2300      	movs	r3, #0
 8014e22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8014e24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 fe29 	bl	8015a80 <VL53L1_WaitUs>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8014e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d10b      	bne.n	8014e52 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	2301      	movs	r3, #1
 8014e40:	9300      	str	r3, [sp, #0]
 8014e42:	2301      	movs	r3, #1
 8014e44:	22e5      	movs	r2, #229	; 0xe5
 8014e46:	6839      	ldr	r1, [r7, #0]
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f000 fe31 	bl	8015ab0 <VL53L1_WaitValueMaskEx>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8014e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d103      	bne.n	8014e62 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8014e5a:	2103      	movs	r1, #3
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7f6 fc38 	bl	800b6d2 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8014e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3710      	adds	r7, #16
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b088      	sub	sp, #32
 8014e72:	af02      	add	r7, sp, #8
 8014e74:	6078      	str	r0, [r7, #4]
 8014e76:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3318      	adds	r3, #24
 8014e80:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014e82:	2300      	movs	r3, #0
 8014e84:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8014e86:	2300      	movs	r3, #0
 8014e88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014e90:	f003 0310 	and.w	r3, r3, #16
 8014e94:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014e96:	7bfb      	ldrb	r3, [r7, #15]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d102      	bne.n	8014ea2 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	75fb      	strb	r3, [r7, #23]
 8014ea0:	e001      	b.n	8014ea6 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8014ea6:	7dfb      	ldrb	r3, [r7, #23]
 8014ea8:	2201      	movs	r2, #1
 8014eaa:	9201      	str	r2, [sp, #4]
 8014eac:	2201      	movs	r2, #1
 8014eae:	9200      	str	r2, [sp, #0]
 8014eb0:	2231      	movs	r2, #49	; 0x31
 8014eb2:	6839      	ldr	r1, [r7, #0]
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 fdfb 	bl	8015ab0 <VL53L1_WaitValueMaskEx>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8014ebe:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3718      	adds	r7, #24
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}

08014eca <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8014eca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ece:	b0c0      	sub	sp, #256	; 0x100
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	460b      	mov	r3, r1
 8014eda:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8014ede:	4613      	mov	r3, r2
 8014ee0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014eea:	2300      	movs	r3, #0
 8014eec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8014f14:	f04f 0200 	mov.w	r2, #0
 8014f18:	f04f 0300 	mov.w	r3, #0
 8014f1c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8014f20:	f04f 0200 	mov.w	r2, #0
 8014f24:	f04f 0300 	mov.w	r3, #0
 8014f28:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8014f2c:	f04f 0200 	mov.w	r2, #0
 8014f30:	f04f 0300 	mov.w	r3, #0
 8014f34:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8014f38:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d108      	bne.n	8014f52 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8014f40:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8014f44:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8014f48:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fb f867 	bl	8010020 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8014f52:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d165      	bne.n	8015026 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8014f5a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014f5e:	091b      	lsrs	r3, r3, #4
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	f003 0301 	and.w	r3, r3, #1
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d00e      	beq.n	8014f88 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8014f6a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014f74:	095b      	lsrs	r3, r3, #5
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	1ad3      	subs	r3, r2, r3
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8014f86:	e00b      	b.n	8014fa0 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8014f88:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014f8c:	b29a      	uxth	r2, r3
 8014f8e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014f92:	095b      	lsrs	r3, r3, #5
 8014f94:	b2db      	uxtb	r3, r3
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8014fa0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014faa:	095b      	lsrs	r3, r3, #5
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	4413      	add	r3, r2
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8014fb8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014fbc:	f003 0301 	and.w	r3, r3, #1
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d011      	beq.n	8014fe8 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8014fc4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014fc8:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8014fca:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014fce:	f003 020f 	and.w	r2, r3, #15
 8014fd2:	0fd3      	lsrs	r3, r2, #31
 8014fd4:	4413      	add	r3, r2
 8014fd6:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	1acb      	subs	r3, r1, r3
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	3b01      	subs	r3, #1
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8014fe6:	e00f      	b.n	8015008 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8014fe8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014fec:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8014fee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014ff2:	f003 020f 	and.w	r2, r3, #15
 8014ff6:	0fd3      	lsrs	r3, r2, #31
 8014ff8:	4413      	add	r3, r2
 8014ffa:	105b      	asrs	r3, r3, #1
 8014ffc:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	440b      	add	r3, r1
 8015002:	b29b      	uxth	r3, r3
 8015004:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8015008:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801500c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 801500e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8015012:	f003 020f 	and.w	r2, r3, #15
 8015016:	0fd3      	lsrs	r3, r2, #31
 8015018:	4413      	add	r3, r2
 801501a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 801501c:	b29b      	uxth	r3, r3
 801501e:	440b      	add	r3, r1
 8015020:	b29b      	uxth	r3, r3
 8015022:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8015026:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801502a:	2b00      	cmp	r3, #0
 801502c:	d133      	bne.n	8015096 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 801502e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8015032:	b29a      	uxth	r2, r3
 8015034:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8015038:	4413      	add	r3, r2
 801503a:	b29b      	uxth	r3, r3
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	b29b      	uxth	r3, r3
 8015040:	3b0f      	subs	r3, #15
 8015042:	b29b      	uxth	r3, r3
 8015044:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8015048:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 801504c:	b29a      	uxth	r2, r3
 801504e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8015052:	4413      	add	r3, r2
 8015054:	b29b      	uxth	r3, r3
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	b29b      	uxth	r3, r3
 801505a:	3b0f      	subs	r3, #15
 801505c:	b29b      	uxth	r3, r3
 801505e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8015062:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8015066:	b29a      	uxth	r2, r3
 8015068:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 801506c:	4413      	add	r3, r2
 801506e:	b29b      	uxth	r3, r3
 8015070:	005b      	lsls	r3, r3, #1
 8015072:	b29b      	uxth	r3, r3
 8015074:	3b0f      	subs	r3, #15
 8015076:	b29b      	uxth	r3, r3
 8015078:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 801507c:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8015080:	b29a      	uxth	r2, r3
 8015082:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8015086:	4413      	add	r3, r2
 8015088:	b29b      	uxth	r3, r3
 801508a:	005b      	lsls	r3, r3, #1
 801508c:	b29b      	uxth	r3, r3
 801508e:	3b0f      	subs	r3, #15
 8015090:	b29b      	uxth	r3, r3
 8015092:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8015096:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801509a:	2b00      	cmp	r3, #0
 801509c:	f040 8135 	bne.w	801530a <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80150a0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 80150a4:	17da      	asrs	r2, r3, #31
 80150a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80150aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80150ae:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80150b2:	17da      	asrs	r2, r3, #31
 80150b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80150b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80150bc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80150c0:	460b      	mov	r3, r1
 80150c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80150c6:	fb02 f203 	mul.w	r2, r2, r3
 80150ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80150ce:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80150d2:	4601      	mov	r1, r0
 80150d4:	fb01 f303 	mul.w	r3, r1, r3
 80150d8:	4413      	add	r3, r2
 80150da:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80150de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80150e2:	fba2 4501 	umull	r4, r5, r2, r1
 80150e6:	442b      	add	r3, r5
 80150e8:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80150ea:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 80150ee:	17da      	asrs	r2, r3, #31
 80150f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80150f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 80150f8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80150fc:	17da      	asrs	r2, r3, #31
 80150fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015102:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8015106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801510a:	460b      	mov	r3, r1
 801510c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015110:	fb02 f203 	mul.w	r2, r2, r3
 8015114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015118:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 801511c:	4601      	mov	r1, r0
 801511e:	fb01 f303 	mul.w	r3, r1, r3
 8015122:	4413      	add	r3, r2
 8015124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015128:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801512c:	fba2 8901 	umull	r8, r9, r2, r1
 8015130:	444b      	add	r3, r9
 8015132:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8015134:	eb14 0308 	adds.w	r3, r4, r8
 8015138:	64bb      	str	r3, [r7, #72]	; 0x48
 801513a:	eb45 0309 	adc.w	r3, r5, r9
 801513e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015140:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8015144:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8015148:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801514c:	1c51      	adds	r1, r2, #1
 801514e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8015152:	f143 0300 	adc.w	r3, r3, #0
 8015156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801515a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801515e:	460b      	mov	r3, r1
 8015160:	0fdb      	lsrs	r3, r3, #31
 8015162:	2200      	movs	r2, #0
 8015164:	643b      	str	r3, [r7, #64]	; 0x40
 8015166:	647a      	str	r2, [r7, #68]	; 0x44
 8015168:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801516c:	4623      	mov	r3, r4
 801516e:	4602      	mov	r2, r0
 8015170:	189b      	adds	r3, r3, r2
 8015172:	63bb      	str	r3, [r7, #56]	; 0x38
 8015174:	460b      	mov	r3, r1
 8015176:	462a      	mov	r2, r5
 8015178:	eb42 0303 	adc.w	r3, r2, r3
 801517c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801517e:	f04f 0200 	mov.w	r2, #0
 8015182:	f04f 0300 	mov.w	r3, #0
 8015186:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801518a:	4621      	mov	r1, r4
 801518c:	084a      	lsrs	r2, r1, #1
 801518e:	4629      	mov	r1, r5
 8015190:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015194:	4629      	mov	r1, r5
 8015196:	104b      	asrs	r3, r1, #1
 8015198:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801519c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80151a0:	2200      	movs	r2, #0
 80151a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80151a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80151aa:	f04f 0000 	mov.w	r0, #0
 80151ae:	f04f 0100 	mov.w	r1, #0
 80151b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80151b6:	462b      	mov	r3, r5
 80151b8:	0099      	lsls	r1, r3, #2
 80151ba:	4623      	mov	r3, r4
 80151bc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80151c0:	4623      	mov	r3, r4
 80151c2:	0098      	lsls	r0, r3, #2
 80151c4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80151c8:	1814      	adds	r4, r2, r0
 80151ca:	633c      	str	r4, [r7, #48]	; 0x30
 80151cc:	414b      	adcs	r3, r1
 80151ce:	637b      	str	r3, [r7, #52]	; 0x34
 80151d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80151d4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80151d8:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80151dc:	17da      	asrs	r2, r3, #31
 80151de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80151e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80151e6:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80151ea:	17da      	asrs	r2, r3, #31
 80151ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80151f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80151f4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80151f8:	462b      	mov	r3, r5
 80151fa:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80151fe:	4642      	mov	r2, r8
 8015200:	fb02 f203 	mul.w	r2, r2, r3
 8015204:	464b      	mov	r3, r9
 8015206:	4621      	mov	r1, r4
 8015208:	fb01 f303 	mul.w	r3, r1, r3
 801520c:	4413      	add	r3, r2
 801520e:	4622      	mov	r2, r4
 8015210:	4641      	mov	r1, r8
 8015212:	fba2 ab01 	umull	sl, fp, r2, r1
 8015216:	445b      	add	r3, fp
 8015218:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801521a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 801521e:	17da      	asrs	r2, r3, #31
 8015220:	67bb      	str	r3, [r7, #120]	; 0x78
 8015222:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8015224:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8015228:	17da      	asrs	r2, r3, #31
 801522a:	673b      	str	r3, [r7, #112]	; 0x70
 801522c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801522e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8015232:	462b      	mov	r3, r5
 8015234:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015238:	4642      	mov	r2, r8
 801523a:	fb02 f203 	mul.w	r2, r2, r3
 801523e:	464b      	mov	r3, r9
 8015240:	4621      	mov	r1, r4
 8015242:	fb01 f303 	mul.w	r3, r1, r3
 8015246:	4413      	add	r3, r2
 8015248:	4622      	mov	r2, r4
 801524a:	4641      	mov	r1, r8
 801524c:	fba2 1201 	umull	r1, r2, r2, r1
 8015250:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015254:	460a      	mov	r2, r1
 8015256:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801525a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801525e:	4413      	add	r3, r2
 8015260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8015264:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8015268:	460b      	mov	r3, r1
 801526a:	eb1a 0303 	adds.w	r3, sl, r3
 801526e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015270:	4613      	mov	r3, r2
 8015272:	eb4b 0303 	adc.w	r3, fp, r3
 8015276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015278:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801527c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8015280:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8015284:	1c51      	adds	r1, r2, #1
 8015286:	66b9      	str	r1, [r7, #104]	; 0x68
 8015288:	f143 0300 	adc.w	r3, r3, #0
 801528c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801528e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015292:	460b      	mov	r3, r1
 8015294:	0fdb      	lsrs	r3, r3, #31
 8015296:	2200      	movs	r2, #0
 8015298:	623b      	str	r3, [r7, #32]
 801529a:	627a      	str	r2, [r7, #36]	; 0x24
 801529c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80152a0:	4623      	mov	r3, r4
 80152a2:	4602      	mov	r2, r0
 80152a4:	189b      	adds	r3, r3, r2
 80152a6:	61bb      	str	r3, [r7, #24]
 80152a8:	460b      	mov	r3, r1
 80152aa:	462a      	mov	r2, r5
 80152ac:	eb42 0303 	adc.w	r3, r2, r3
 80152b0:	61fb      	str	r3, [r7, #28]
 80152b2:	f04f 0200 	mov.w	r2, #0
 80152b6:	f04f 0300 	mov.w	r3, #0
 80152ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80152be:	4621      	mov	r1, r4
 80152c0:	084a      	lsrs	r2, r1, #1
 80152c2:	4629      	mov	r1, r5
 80152c4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80152c8:	4629      	mov	r1, r5
 80152ca:	104b      	asrs	r3, r1, #1
 80152cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80152d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80152d4:	2200      	movs	r2, #0
 80152d6:	663b      	str	r3, [r7, #96]	; 0x60
 80152d8:	667a      	str	r2, [r7, #100]	; 0x64
 80152da:	f04f 0200 	mov.w	r2, #0
 80152de:	f04f 0300 	mov.w	r3, #0
 80152e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80152e6:	4629      	mov	r1, r5
 80152e8:	008b      	lsls	r3, r1, #2
 80152ea:	4621      	mov	r1, r4
 80152ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80152f0:	4621      	mov	r1, r4
 80152f2:	008a      	lsls	r2, r1, #2
 80152f4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80152f8:	1884      	adds	r4, r0, r2
 80152fa:	613c      	str	r4, [r7, #16]
 80152fc:	eb41 0303 	adc.w	r3, r1, r3
 8015300:	617b      	str	r3, [r7, #20]
 8015302:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015306:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801530a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801530e:	2b00      	cmp	r3, #0
 8015310:	d132      	bne.n	8015378 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8015312:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8015316:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801531a:	1884      	adds	r4, r0, r2
 801531c:	65bc      	str	r4, [r7, #88]	; 0x58
 801531e:	eb41 0303 	adc.w	r3, r1, r3
 8015322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015324:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8015328:	460b      	mov	r3, r1
 801532a:	3301      	adds	r3, #1
 801532c:	653b      	str	r3, [r7, #80]	; 0x50
 801532e:	4613      	mov	r3, r2
 8015330:	f143 0300 	adc.w	r3, r3, #0
 8015334:	657b      	str	r3, [r7, #84]	; 0x54
 8015336:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801533a:	460b      	mov	r3, r1
 801533c:	0fdb      	lsrs	r3, r3, #31
 801533e:	2200      	movs	r2, #0
 8015340:	60bb      	str	r3, [r7, #8]
 8015342:	60fa      	str	r2, [r7, #12]
 8015344:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015348:	4623      	mov	r3, r4
 801534a:	4602      	mov	r2, r0
 801534c:	189b      	adds	r3, r3, r2
 801534e:	603b      	str	r3, [r7, #0]
 8015350:	460b      	mov	r3, r1
 8015352:	462a      	mov	r2, r5
 8015354:	eb42 0303 	adc.w	r3, r2, r3
 8015358:	607b      	str	r3, [r7, #4]
 801535a:	f04f 0200 	mov.w	r2, #0
 801535e:	f04f 0300 	mov.w	r3, #0
 8015362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8015366:	4621      	mov	r1, r4
 8015368:	084a      	lsrs	r2, r1, #1
 801536a:	4629      	mov	r1, r5
 801536c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015370:	4629      	mov	r1, r5
 8015372:	104b      	asrs	r3, r1, #1
 8015374:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8015378:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801537c:	2b00      	cmp	r3, #0
 801537e:	d109      	bne.n	8015394 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8015380:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8015384:	2b00      	cmp	r3, #0
 8015386:	da05      	bge.n	8015394 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8015388:	f04f 0200 	mov.w	r2, #0
 801538c:	f04f 0300 	mov.w	r3, #0
 8015390:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8015394:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015398:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801539c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801539e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80153a8:	46bd      	mov	sp, r7
 80153aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080153ae <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80153ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80153b2:	b09a      	sub	sp, #104	; 0x68
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6478      	str	r0, [r7, #68]	; 0x44
 80153b8:	6439      	str	r1, [r7, #64]	; 0x40
 80153ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 80153bc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 80153be:	2300      	movs	r3, #0
 80153c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 80153c4:	f04f 0200 	mov.w	r2, #0
 80153c8:	f04f 0300 	mov.w	r3, #0
 80153cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 80153d0:	f04f 0200 	mov.w	r2, #0
 80153d4:	f04f 0300 	mov.w	r3, #0
 80153d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 80153dc:	f04f 0200 	mov.w	r2, #0
 80153e0:	f04f 0300 	mov.w	r3, #0
 80153e4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 80153e8:	2300      	movs	r3, #0
 80153ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80153ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153f0:	2200      	movs	r2, #0
 80153f2:	633b      	str	r3, [r7, #48]	; 0x30
 80153f4:	637a      	str	r2, [r7, #52]	; 0x34
 80153f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153fc:	2200      	movs	r2, #0
 80153fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8015400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8015406:	460b      	mov	r3, r1
 8015408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801540a:	fb02 f203 	mul.w	r2, r2, r3
 801540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015410:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8015414:	4601      	mov	r1, r0
 8015416:	fb01 f303 	mul.w	r3, r1, r3
 801541a:	4413      	add	r3, r2
 801541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801541e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015420:	fba2 4501 	umull	r4, r5, r2, r1
 8015424:	442b      	add	r3, r5
 8015426:	461d      	mov	r5, r3
 8015428:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 801542c:	623b      	str	r3, [r7, #32]
 801542e:	f145 0300 	adc.w	r3, r5, #0
 8015432:	627b      	str	r3, [r7, #36]	; 0x24
 8015434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015438:	f04f 0300 	mov.w	r3, #0
 801543c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015440:	f7eb fbda 	bl	8000bf8 <__aeabi_uldivmod>
 8015444:	4602      	mov	r2, r0
 8015446:	460b      	mov	r3, r1
 8015448:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801544e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015452:	b29b      	uxth	r3, r3
 8015454:	2200      	movs	r2, #0
 8015456:	61bb      	str	r3, [r7, #24]
 8015458:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801545c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8015460:	4622      	mov	r2, r4
 8015462:	fb02 f203 	mul.w	r2, r2, r3
 8015466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015468:	4629      	mov	r1, r5
 801546a:	fb01 f303 	mul.w	r3, r1, r3
 801546e:	4413      	add	r3, r2
 8015470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015472:	4621      	mov	r1, r4
 8015474:	fba2 ab01 	umull	sl, fp, r2, r1
 8015478:	445b      	add	r3, fp
 801547a:	469b      	mov	fp, r3
 801547c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8015480:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8015484:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8015488:	f04f 0200 	mov.w	r2, #0
 801548c:	f04f 0300 	mov.w	r3, #0
 8015490:	0a02      	lsrs	r2, r0, #8
 8015492:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015496:	0a0b      	lsrs	r3, r1, #8
 8015498:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801549c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80154a0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80154a4:	6139      	str	r1, [r7, #16]
 80154a6:	f143 0300 	adc.w	r3, r3, #0
 80154aa:	617b      	str	r3, [r7, #20]
 80154ac:	f04f 0200 	mov.w	r2, #0
 80154b0:	f04f 0300 	mov.w	r3, #0
 80154b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80154b8:	4621      	mov	r1, r4
 80154ba:	0aca      	lsrs	r2, r1, #11
 80154bc:	4629      	mov	r1, r5
 80154be:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80154c2:	4629      	mov	r1, r5
 80154c4:	0acb      	lsrs	r3, r1, #11
 80154c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 80154ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d305      	bcc.n	80154de <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80154d2:	f04f 32ff 	mov.w	r2, #4294967295
 80154d6:	f04f 0300 	mov.w	r3, #0
 80154da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80154de:	2300      	movs	r3, #0
 80154e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80154e4:	e041      	b.n	801556a <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80154e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80154ec:	3302      	adds	r3, #2
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4413      	add	r3, r2
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	2200      	movs	r2, #0
 80154f6:	60bb      	str	r3, [r7, #8]
 80154f8:	60fa      	str	r2, [r7, #12]
 80154fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80154fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015500:	4622      	mov	r2, r4
 8015502:	fb02 f203 	mul.w	r2, r2, r3
 8015506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015508:	4629      	mov	r1, r5
 801550a:	fb01 f303 	mul.w	r3, r1, r3
 801550e:	4413      	add	r3, r2
 8015510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015512:	4621      	mov	r1, r4
 8015514:	fba2 8901 	umull	r8, r9, r2, r1
 8015518:	444b      	add	r3, r9
 801551a:	4699      	mov	r9, r3
 801551c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8015520:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8015524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015528:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801552c:	6039      	str	r1, [r7, #0]
 801552e:	f143 0300 	adc.w	r3, r3, #0
 8015532:	607b      	str	r3, [r7, #4]
 8015534:	f04f 0200 	mov.w	r2, #0
 8015538:	f04f 0300 	mov.w	r3, #0
 801553c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8015540:	4621      	mov	r1, r4
 8015542:	0a8a      	lsrs	r2, r1, #10
 8015544:	4629      	mov	r1, r5
 8015546:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801554a:	4629      	mov	r1, r5
 801554c:	0a8b      	lsrs	r3, r1, #10
 801554e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8015552:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015556:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801555a:	3206      	adds	r2, #6
 801555c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8015560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015564:	3301      	adds	r3, #1
 8015566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801556c:	7a9b      	ldrb	r3, [r3, #10]
 801556e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015572:	429a      	cmp	r2, r3
 8015574:	d3b7      	bcc.n	80154e6 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8015576:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801557a:	4618      	mov	r0, r3
 801557c:	3768      	adds	r7, #104	; 0x68
 801557e:	46bd      	mov	sp, r7
 8015580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015584 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8015584:	b590      	push	{r4, r7, lr}
 8015586:	b085      	sub	sp, #20
 8015588:	af00      	add	r7, sp, #0
 801558a:	4604      	mov	r4, r0
 801558c:	4608      	mov	r0, r1
 801558e:	4611      	mov	r1, r2
 8015590:	461a      	mov	r2, r3
 8015592:	4623      	mov	r3, r4
 8015594:	71fb      	strb	r3, [r7, #7]
 8015596:	4603      	mov	r3, r0
 8015598:	71bb      	strb	r3, [r7, #6]
 801559a:	460b      	mov	r3, r1
 801559c:	717b      	strb	r3, [r7, #5]
 801559e:	4613      	mov	r3, r2
 80155a0:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80155a2:	2300      	movs	r3, #0
 80155a4:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 80155aa:	2300      	movs	r3, #0
 80155ac:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 80155ae:	2300      	movs	r3, #0
 80155b0:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 80155b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b4:	2210      	movs	r2, #16
 80155b6:	701a      	strb	r2, [r3, #0]

	i = 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 80155bc:	2300      	movs	r3, #0
 80155be:	73fb      	strb	r3, [r7, #15]
 80155c0:	e046      	b.n	8015650 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 80155c2:	2300      	movs	r3, #0
 80155c4:	73bb      	strb	r3, [r7, #14]
 80155c6:	e03b      	b.n	8015640 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 80155c8:	89bb      	ldrh	r3, [r7, #12]
 80155ca:	2b0f      	cmp	r3, #15
 80155cc:	d832      	bhi.n	8015634 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 80155ce:	89bb      	ldrh	r3, [r7, #12]
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d4:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 80155d6:	89bb      	ldrh	r3, [r7, #12]
 80155d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155da:	3306      	adds	r3, #6
 80155dc:	009b      	lsls	r3, r3, #2
 80155de:	4413      	add	r3, r2
 80155e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80155e4:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 80155e6:	89bb      	ldrh	r3, [r7, #12]
 80155e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ea:	3306      	adds	r3, #6
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	4413      	add	r3, r2
 80155f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155f4:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 80155f6:	7bfa      	ldrb	r2, [r7, #15]
 80155f8:	79bb      	ldrb	r3, [r7, #6]
 80155fa:	fb12 f303 	smulbb	r3, r2, r3
 80155fe:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8015600:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8015602:	79fa      	ldrb	r2, [r7, #7]
 8015604:	440a      	add	r2, r1
 8015606:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8015608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801560a:	3306      	adds	r3, #6
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	4413      	add	r3, r2
 8015610:	460a      	mov	r2, r1
 8015612:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8015614:	7bba      	ldrb	r2, [r7, #14]
 8015616:	f897 3020 	ldrb.w	r3, [r7, #32]
 801561a:	fb12 f303 	smulbb	r3, r2, r3
 801561e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8015620:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8015622:	793a      	ldrb	r2, [r7, #4]
 8015624:	440a      	add	r2, r1
 8015626:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8015628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801562a:	3306      	adds	r3, #6
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	460a      	mov	r2, r1
 8015632:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8015634:	89bb      	ldrh	r3, [r7, #12]
 8015636:	3301      	adds	r3, #1
 8015638:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801563a:	7bbb      	ldrb	r3, [r7, #14]
 801563c:	3301      	adds	r3, #1
 801563e:	73bb      	strb	r3, [r7, #14]
 8015640:	7bba      	ldrb	r2, [r7, #14]
 8015642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015646:	429a      	cmp	r2, r3
 8015648:	d3be      	bcc.n	80155c8 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801564a:	7bfb      	ldrb	r3, [r7, #15]
 801564c:	3301      	adds	r3, #1
 801564e:	73fb      	strb	r3, [r7, #15]
 8015650:	7bfa      	ldrb	r2, [r7, #15]
 8015652:	797b      	ldrb	r3, [r7, #5]
 8015654:	429a      	cmp	r2, r3
 8015656:	d3b4      	bcc.n	80155c2 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8015658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801565a:	f000 f86c 	bl	8015736 <VL53L1_init_zone_config_histogram_bins>
 801565e:	4603      	mov	r3, r0
 8015660:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8015662:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015666:	4618      	mov	r0, r3
 8015668:	3714      	adds	r7, #20
 801566a:	46bd      	mov	sp, r7
 801566c:	bd90      	pop	{r4, r7, pc}

0801566e <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b084      	sub	sp, #16
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
 8015676:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015678:	2300      	movs	r3, #0
 801567a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2205      	movs	r2, #5
 8015680:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	2204      	movs	r2, #4
 8015686:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	220f      	movs	r2, #15
 801568c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	2207      	movs	r2, #7
 8015692:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	2204      	movs	r2, #4
 8015698:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	2208      	movs	r2, #8
 801569e:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	220f      	movs	r2, #15
 80156a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	2207      	movs	r2, #7
 80156ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	220c      	movs	r2, #12
 80156b4:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2208      	movs	r2, #8
 80156bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	2207      	movs	r2, #7
 80156c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	220f      	movs	r2, #15
 80156cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	2208      	movs	r2, #8
 80156d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	2204      	movs	r2, #4
 80156dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	2207      	movs	r2, #7
 80156e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	220f      	movs	r2, #15
 80156ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2208      	movs	r2, #8
 80156f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	220c      	movs	r2, #12
 80156fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	220f      	movs	r2, #15
 8015704:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	220f      	movs	r2, #15
 801570c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	2208      	movs	r2, #8
 8015714:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	2208      	movs	r2, #8
 801571c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8015720:	6838      	ldr	r0, [r7, #0]
 8015722:	f000 f808 	bl	8015736 <VL53L1_init_zone_config_histogram_bins>
 8015726:	4603      	mov	r3, r0
 8015728:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801572a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801572e:	4618      	mov	r0, r3
 8015730:	3710      	adds	r7, #16
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}

08015736 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8015736:	b480      	push	{r7}
 8015738:	b085      	sub	sp, #20
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801573e:	2300      	movs	r3, #0
 8015740:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8015742:	2300      	movs	r3, #0
 8015744:	73fb      	strb	r3, [r7, #15]
 8015746:	e008      	b.n	801575a <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8015748:	7bfb      	ldrb	r3, [r7, #15]
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	4413      	add	r3, r2
 801574e:	2201      	movs	r2, #1
 8015750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8015754:	7bfb      	ldrb	r3, [r7, #15]
 8015756:	3301      	adds	r3, #1
 8015758:	73fb      	strb	r3, [r7, #15]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	7bfa      	ldrb	r2, [r7, #15]
 8015760:	429a      	cmp	r2, r3
 8015762:	d3f1      	bcc.n	8015748 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8015764:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8015768:	4618      	mov	r0, r3
 801576a:	3714      	adds	r7, #20
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	68fa      	ldr	r2, [r7, #12]
 8015786:	8910      	ldrh	r0, [r2, #8]
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	b292      	uxth	r2, r2
 801578c:	68b9      	ldr	r1, [r7, #8]
 801578e:	4798      	blx	r3
 8015790:	4603      	mov	r3, r0
}
 8015792:	4618      	mov	r0, r3
 8015794:	3710      	adds	r7, #16
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}

0801579a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801579a:	b580      	push	{r7, lr}
 801579c:	b084      	sub	sp, #16
 801579e:	af00      	add	r7, sp, #0
 80157a0:	60f8      	str	r0, [r7, #12]
 80157a2:	60b9      	str	r1, [r7, #8]
 80157a4:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	691b      	ldr	r3, [r3, #16]
 80157aa:	68fa      	ldr	r2, [r7, #12]
 80157ac:	8910      	ldrh	r0, [r2, #8]
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	b292      	uxth	r2, r2
 80157b2:	68b9      	ldr	r1, [r7, #8]
 80157b4:	4798      	blx	r3
 80157b6:	4603      	mov	r3, r0
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3710      	adds	r7, #16
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b086      	sub	sp, #24
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	607a      	str	r2, [r7, #4]
 80157ca:	603b      	str	r3, [r7, #0]
 80157cc:	460b      	mov	r3, r1
 80157ce:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80157d0:	2300      	movs	r3, #0
 80157d2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	2bff      	cmp	r3, #255	; 0xff
 80157d8:	d902      	bls.n	80157e0 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80157da:	f06f 0303 	mvn.w	r3, #3
 80157de:	e01d      	b.n	801581c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80157e0:	897b      	ldrh	r3, [r7, #10]
 80157e2:	0a1b      	lsrs	r3, r3, #8
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	b2da      	uxtb	r2, r3
 80157e8:	4b0e      	ldr	r3, [pc, #56]	; (8015824 <VL53L1_WriteMulti+0x64>)
 80157ea:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80157ec:	897b      	ldrh	r3, [r7, #10]
 80157ee:	b2da      	uxtb	r2, r3
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <VL53L1_WriteMulti+0x64>)
 80157f2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80157f4:	683a      	ldr	r2, [r7, #0]
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	480b      	ldr	r0, [pc, #44]	; (8015828 <VL53L1_WriteMulti+0x68>)
 80157fa:	f005 fa07 	bl	801ac0c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	3302      	adds	r3, #2
 8015802:	461a      	mov	r2, r3
 8015804:	4907      	ldr	r1, [pc, #28]	; (8015824 <VL53L1_WriteMulti+0x64>)
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7ff ffb4 	bl	8015774 <_I2CWrite>
 801580c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d001      	beq.n	8015818 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015814:	23f3      	movs	r3, #243	; 0xf3
 8015816:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8015818:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801581c:	4618      	mov	r0, r3
 801581e:	3718      	adds	r7, #24
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	20008740 	.word	0x20008740
 8015828:	20008742 	.word	0x20008742

0801582c <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801582c:	b580      	push	{r7, lr}
 801582e:	b086      	sub	sp, #24
 8015830:	af00      	add	r7, sp, #0
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	607a      	str	r2, [r7, #4]
 8015836:	603b      	str	r3, [r7, #0]
 8015838:	460b      	mov	r3, r1
 801583a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801583c:	2300      	movs	r3, #0
 801583e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015840:	897b      	ldrh	r3, [r7, #10]
 8015842:	0a1b      	lsrs	r3, r3, #8
 8015844:	b29b      	uxth	r3, r3
 8015846:	b2da      	uxtb	r2, r3
 8015848:	4b12      	ldr	r3, [pc, #72]	; (8015894 <VL53L1_ReadMulti+0x68>)
 801584a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801584c:	897b      	ldrh	r3, [r7, #10]
 801584e:	b2da      	uxtb	r2, r3
 8015850:	4b10      	ldr	r3, [pc, #64]	; (8015894 <VL53L1_ReadMulti+0x68>)
 8015852:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015854:	2202      	movs	r2, #2
 8015856:	490f      	ldr	r1, [pc, #60]	; (8015894 <VL53L1_ReadMulti+0x68>)
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	f7ff ff8b 	bl	8015774 <_I2CWrite>
 801585e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d002      	beq.n	801586c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015866:	23f3      	movs	r3, #243	; 0xf3
 8015868:	75fb      	strb	r3, [r7, #23]
        goto done;
 801586a:	e00c      	b.n	8015886 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801586c:	683a      	ldr	r2, [r7, #0]
 801586e:	6879      	ldr	r1, [r7, #4]
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f7ff ff92 	bl	801579a <_I2CRead>
 8015876:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d002      	beq.n	8015884 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801587e:	23f3      	movs	r3, #243	; 0xf3
 8015880:	75fb      	strb	r3, [r7, #23]
 8015882:	e000      	b.n	8015886 <VL53L1_ReadMulti+0x5a>
    }
done:
 8015884:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8015886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
 8015892:	bf00      	nop
 8015894:	20008740 	.word	0x20008740

08015898 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	460b      	mov	r3, r1
 80158a2:	807b      	strh	r3, [r7, #2]
 80158a4:	4613      	mov	r3, r2
 80158a6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80158a8:	2300      	movs	r3, #0
 80158aa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80158ac:	887b      	ldrh	r3, [r7, #2]
 80158ae:	0a1b      	lsrs	r3, r3, #8
 80158b0:	b29b      	uxth	r3, r3
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	4b0c      	ldr	r3, [pc, #48]	; (80158e8 <VL53L1_WrByte+0x50>)
 80158b6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80158b8:	887b      	ldrh	r3, [r7, #2]
 80158ba:	b2da      	uxtb	r2, r3
 80158bc:	4b0a      	ldr	r3, [pc, #40]	; (80158e8 <VL53L1_WrByte+0x50>)
 80158be:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80158c0:	4a09      	ldr	r2, [pc, #36]	; (80158e8 <VL53L1_WrByte+0x50>)
 80158c2:	787b      	ldrb	r3, [r7, #1]
 80158c4:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80158c6:	2203      	movs	r2, #3
 80158c8:	4907      	ldr	r1, [pc, #28]	; (80158e8 <VL53L1_WrByte+0x50>)
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f7ff ff52 	bl	8015774 <_I2CWrite>
 80158d0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d001      	beq.n	80158dc <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80158d8:	23f3      	movs	r3, #243	; 0xf3
 80158da:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80158dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	20008740 	.word	0x20008740

080158ec <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	460b      	mov	r3, r1
 80158f6:	807b      	strh	r3, [r7, #2]
 80158f8:	4613      	mov	r3, r2
 80158fa:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80158fc:	2300      	movs	r3, #0
 80158fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015900:	887b      	ldrh	r3, [r7, #2]
 8015902:	0a1b      	lsrs	r3, r3, #8
 8015904:	b29b      	uxth	r3, r3
 8015906:	b2da      	uxtb	r2, r3
 8015908:	4b10      	ldr	r3, [pc, #64]	; (801594c <VL53L1_WrWord+0x60>)
 801590a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801590c:	887b      	ldrh	r3, [r7, #2]
 801590e:	b2da      	uxtb	r2, r3
 8015910:	4b0e      	ldr	r3, [pc, #56]	; (801594c <VL53L1_WrWord+0x60>)
 8015912:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8015914:	883b      	ldrh	r3, [r7, #0]
 8015916:	0a1b      	lsrs	r3, r3, #8
 8015918:	b29b      	uxth	r3, r3
 801591a:	b2da      	uxtb	r2, r3
 801591c:	4b0b      	ldr	r3, [pc, #44]	; (801594c <VL53L1_WrWord+0x60>)
 801591e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8015920:	883b      	ldrh	r3, [r7, #0]
 8015922:	b2da      	uxtb	r2, r3
 8015924:	4b09      	ldr	r3, [pc, #36]	; (801594c <VL53L1_WrWord+0x60>)
 8015926:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8015928:	2204      	movs	r2, #4
 801592a:	4908      	ldr	r1, [pc, #32]	; (801594c <VL53L1_WrWord+0x60>)
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7ff ff21 	bl	8015774 <_I2CWrite>
 8015932:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d001      	beq.n	801593e <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801593a:	23f3      	movs	r3, #243	; 0xf3
 801593c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 801593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015942:	4618      	mov	r0, r3
 8015944:	3710      	adds	r7, #16
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	20008740 	.word	0x20008740

08015950 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8015950:	b580      	push	{r7, lr}
 8015952:	b086      	sub	sp, #24
 8015954:	af00      	add	r7, sp, #0
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	460b      	mov	r3, r1
 801595a:	607a      	str	r2, [r7, #4]
 801595c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801595e:	2300      	movs	r3, #0
 8015960:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8015962:	897b      	ldrh	r3, [r7, #10]
 8015964:	0a1b      	lsrs	r3, r3, #8
 8015966:	b29b      	uxth	r3, r3
 8015968:	b2da      	uxtb	r2, r3
 801596a:	4b12      	ldr	r3, [pc, #72]	; (80159b4 <VL53L1_RdByte+0x64>)
 801596c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801596e:	897b      	ldrh	r3, [r7, #10]
 8015970:	b2da      	uxtb	r2, r3
 8015972:	4b10      	ldr	r3, [pc, #64]	; (80159b4 <VL53L1_RdByte+0x64>)
 8015974:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015976:	2202      	movs	r2, #2
 8015978:	490e      	ldr	r1, [pc, #56]	; (80159b4 <VL53L1_RdByte+0x64>)
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	f7ff fefa 	bl	8015774 <_I2CWrite>
 8015980:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d002      	beq.n	801598e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015988:	23f3      	movs	r3, #243	; 0xf3
 801598a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801598c:	e00c      	b.n	80159a8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801598e:	2201      	movs	r2, #1
 8015990:	6879      	ldr	r1, [r7, #4]
 8015992:	68f8      	ldr	r0, [r7, #12]
 8015994:	f7ff ff01 	bl	801579a <_I2CRead>
 8015998:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80159a0:	23f3      	movs	r3, #243	; 0xf3
 80159a2:	75fb      	strb	r3, [r7, #23]
 80159a4:	e000      	b.n	80159a8 <VL53L1_RdByte+0x58>
    }
done:
 80159a6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80159a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3718      	adds	r7, #24
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	20008740 	.word	0x20008740

080159b8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b086      	sub	sp, #24
 80159bc:	af00      	add	r7, sp, #0
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	460b      	mov	r3, r1
 80159c2:	607a      	str	r2, [r7, #4]
 80159c4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80159c6:	2300      	movs	r3, #0
 80159c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80159ca:	897b      	ldrh	r3, [r7, #10]
 80159cc:	0a1b      	lsrs	r3, r3, #8
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	b2da      	uxtb	r2, r3
 80159d2:	4b18      	ldr	r3, [pc, #96]	; (8015a34 <VL53L1_RdWord+0x7c>)
 80159d4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80159d6:	897b      	ldrh	r3, [r7, #10]
 80159d8:	b2da      	uxtb	r2, r3
 80159da:	4b16      	ldr	r3, [pc, #88]	; (8015a34 <VL53L1_RdWord+0x7c>)
 80159dc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80159de:	2202      	movs	r2, #2
 80159e0:	4914      	ldr	r1, [pc, #80]	; (8015a34 <VL53L1_RdWord+0x7c>)
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f7ff fec6 	bl	8015774 <_I2CWrite>
 80159e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d002      	beq.n	80159f6 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80159f0:	23f3      	movs	r3, #243	; 0xf3
 80159f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80159f4:	e017      	b.n	8015a26 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80159f6:	2202      	movs	r2, #2
 80159f8:	490e      	ldr	r1, [pc, #56]	; (8015a34 <VL53L1_RdWord+0x7c>)
 80159fa:	68f8      	ldr	r0, [r7, #12]
 80159fc:	f7ff fecd 	bl	801579a <_I2CRead>
 8015a00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d002      	beq.n	8015a0e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015a08:	23f3      	movs	r3, #243	; 0xf3
 8015a0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8015a0c:	e00b      	b.n	8015a26 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8015a0e:	4b09      	ldr	r3, [pc, #36]	; (8015a34 <VL53L1_RdWord+0x7c>)
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	021b      	lsls	r3, r3, #8
 8015a16:	b29a      	uxth	r2, r3
 8015a18:	4b06      	ldr	r3, [pc, #24]	; (8015a34 <VL53L1_RdWord+0x7c>)
 8015a1a:	785b      	ldrb	r3, [r3, #1]
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	4413      	add	r3, r2
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8015a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3718      	adds	r7, #24
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	20008740 	.word	0x20008740

08015a38 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8015a42:	2300      	movs	r3, #0
 8015a44:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	695b      	ldr	r3, [r3, #20]
 8015a4a:	4798      	blx	r3
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	461a      	mov	r2, r3
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8015a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f000 f8d2 	bl	8015c18 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
	...

08015a80 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	4a07      	ldr	r2, [pc, #28]	; (8015aac <VL53L1_WaitUs+0x2c>)
 8015a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8015a92:	1192      	asrs	r2, r2, #6
 8015a94:	17db      	asrs	r3, r3, #31
 8015a96:	1ad3      	subs	r3, r2, r3
 8015a98:	4619      	mov	r1, r3
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f000 f8bc 	bl	8015c18 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8015aa0:	2300      	movs	r3, #0
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	10624dd3 	.word	0x10624dd3

08015ab0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8015ab0:	b590      	push	{r4, r7, lr}
 8015ab2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8015abc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8015ac0:	6020      	str	r0, [r4, #0]
 8015ac2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8015ac6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8015aca:	6001      	str	r1, [r0, #0]
 8015acc:	4619      	mov	r1, r3
 8015ace:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015ad2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8015ad6:	801a      	strh	r2, [r3, #0]
 8015ad8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015adc:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8015ae0:	460a      	mov	r2, r1
 8015ae2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8015af6:	2300      	movs	r3, #0
 8015af8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8015afc:	2300      	movs	r3, #0
 8015afe:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8015b02:	2300      	movs	r3, #0
 8015b04:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8015b08:	f107 0310 	add.w	r3, r7, #16
 8015b0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015b10:	4940      	ldr	r1, [pc, #256]	; (8015c14 <VL53L1_WaitValueMaskEx+0x164>)
 8015b12:	4618      	mov	r0, r3
 8015b14:	f005 fd9e 	bl	801b654 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8015b18:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8015b1c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b20:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015b24:	4611      	mov	r1, r2
 8015b26:	6818      	ldr	r0, [r3, #0]
 8015b28:	f7ff ff86 	bl	8015a38 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8015b2c:	e04e      	b.n	8015bcc <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8015b2e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d110      	bne.n	8015b58 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8015b36:	f207 2213 	addw	r2, r7, #531	; 0x213
 8015b3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b3e:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8015b42:	8819      	ldrh	r1, [r3, #0]
 8015b44:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b48:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015b4c:	6818      	ldr	r0, [r3, #0]
 8015b4e:	f7ff feff 	bl	8015950 <VL53L1_RdByte>
 8015b52:	4603      	mov	r3, r0
 8015b54:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8015b58:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8015b5c:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8015b60:	4013      	ands	r3, r2
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8015b68:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8015b6c:	7812      	ldrb	r2, [r2, #0]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d102      	bne.n	8015b78 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8015b72:	2301      	movs	r3, #1
 8015b74:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8015b78:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d114      	bne.n	8015baa <VL53L1_WaitValueMaskEx+0xfa>
 8015b80:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d110      	bne.n	8015baa <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8015b88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d00c      	beq.n	8015baa <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8015b90:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015b94:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b98:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	6818      	ldr	r0, [r3, #0]
 8015ba0:	f7ff ff5e 	bl	8015a60 <VL53L1_WaitMs>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8015baa:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8015bae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015bb2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015bb6:	4611      	mov	r1, r2
 8015bb8:	6818      	ldr	r0, [r3, #0]
 8015bba:	f7ff ff3d 	bl	8015a38 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8015bbe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8015bc2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8015bcc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10c      	bne.n	8015bee <VL53L1_WaitValueMaskEx+0x13e>
 8015bd4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015bd8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015bdc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d203      	bcs.n	8015bee <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8015be6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d09f      	beq.n	8015b2e <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8015bee:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d106      	bne.n	8015c04 <VL53L1_WaitValueMaskEx+0x154>
 8015bf6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d102      	bne.n	8015c04 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8015bfe:	23f9      	movs	r3, #249	; 0xf9
 8015c00:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8015c04:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd90      	pop	{r4, r7, pc}
 8015c12:	bf00      	nop
 8015c14:	0801dc50 	.word	0x0801dc50

08015c18 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	695b      	ldr	r3, [r3, #20]
 8015c26:	4798      	blx	r3
 8015c28:	4603      	mov	r3, r0
 8015c2a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8015c2c:	bf00      	nop
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	695b      	ldr	r3, [r3, #20]
 8015c32:	4798      	blx	r3
 8015c34:	4603      	mov	r3, r0
 8015c36:	461a      	mov	r2, r3
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	1ad3      	subs	r3, r2, r3
 8015c3c:	683a      	ldr	r2, [r7, #0]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d8f5      	bhi.n	8015c2e <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8015c42:	2300      	movs	r3, #0
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3710      	adds	r7, #16
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b08c      	sub	sp, #48	; 0x30
 8015c50:	af06      	add	r7, sp, #24
 8015c52:	60f8      	str	r0, [r7, #12]
 8015c54:	60b9      	str	r1, [r7, #8]
 8015c56:	607a      	str	r2, [r7, #4]
 8015c58:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8015c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c60:	9304      	str	r3, [sp, #16]
 8015c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c64:	9303      	str	r3, [sp, #12]
 8015c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c68:	9302      	str	r3, [sp, #8]
 8015c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	6a3b      	ldr	r3, [r7, #32]
 8015c74:	683a      	ldr	r2, [r7, #0]
 8015c76:	6879      	ldr	r1, [r7, #4]
 8015c78:	68b8      	ldr	r0, [r7, #8]
 8015c7a:	f7fc fefb 	bl	8012a74 <VL53L1_hist_process_data>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8015c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3718      	adds	r7, #24
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b084      	sub	sp, #16
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
 8015c96:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d103      	bne.n	8015ca6 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015c9e:	f06f 0301 	mvn.w	r3, #1
 8015ca2:	60fb      	str	r3, [r7, #12]
 8015ca4:	e023      	b.n	8015cee <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	685a      	ldr	r2, [r3, #4]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	891a      	ldrh	r2, [r3, #8]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	68da      	ldr	r2, [r3, #12]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	691a      	ldr	r2, [r3, #16]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	695a      	ldr	r2, [r3, #20]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d004      	beq.n	8015ce8 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	4798      	blx	r3
 8015ce4:	60f8      	str	r0, [r7, #12]
 8015ce6:	e002      	b.n	8015cee <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8015ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8015cee:	68fb      	ldr	r3, [r7, #12]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d06:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d003      	beq.n	8015d16 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8015d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d12:	60fb      	str	r3, [r7, #12]
 8015d14:	e04d      	b.n	8015db2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7ed f8d1 	bl	8002ebe <VL53L1_WaitDeviceBooted>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8015d22:	f04f 33ff 	mov.w	r3, #4294967295
 8015d26:	60fb      	str	r3, [r7, #12]
 8015d28:	e043      	b.n	8015db2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f7ed f847 	bl	8002dbe <VL53L1_DataInit>
 8015d30:	4603      	mov	r3, r0
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d003      	beq.n	8015d3e <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8015d36:	f04f 33ff 	mov.w	r3, #4294967295
 8015d3a:	60fb      	str	r3, [r7, #12]
 8015d3c:	e039      	b.n	8015db2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f7ed f892 	bl	8002e68 <VL53L1_StaticInit>
 8015d44:	4603      	mov	r3, r0
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d003      	beq.n	8015d52 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8015d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4e:	60fb      	str	r3, [r7, #12]
 8015d50:	e02f      	b.n	8015db2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f7ee fe8a 	bl	8004a6c <VL53L1_PerformRefSpadManagement>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d003      	beq.n	8015d66 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8015d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d62:	60fb      	str	r3, [r7, #12]
 8015d64:	e025      	b.n	8015db2 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d78:	2200      	movs	r2, #0
 8015d7a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d84:	2200      	movs	r2, #0
 8015d86:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d90:	2200      	movs	r2, #0
 8015d92:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015da8:	2201      	movs	r2, #1
 8015daa:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8015dae:	2300      	movs	r3, #0
 8015db0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015db2:	68fb      	ldr	r3, [r7, #12]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8015dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc8:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015dd0:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d111      	bne.n	8015dfc <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	4798      	blx	r3
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d003      	beq.n	8015dec <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8015de4:	f04f 33ff 	mov.w	r3, #4294967295
 8015de8:	60fb      	str	r3, [r7, #12]
 8015dea:	e007      	b.n	8015dfc <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015dec:	2300      	movs	r3, #0
 8015dee:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015df6:	2200      	movs	r2, #0
 8015df8:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b084      	sub	sp, #16
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
 8015e0e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d002      	beq.n	8015e1c <VL53L1CB_ReadID+0x16>
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d103      	bne.n	8015e24 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015e1c:	f06f 0301 	mvn.w	r3, #1
 8015e20:	60fb      	str	r3, [r7, #12]
 8015e22:	e00a      	b.n	8015e3a <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	2200      	movs	r2, #0
 8015e28:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8015e2a:	683a      	ldr	r2, [r7, #0]
 8015e2c:	f240 110f 	movw	r1, #271	; 0x10f
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f7ff fdc1 	bl	80159b8 <VL53L1_RdWord>
 8015e36:	4603      	mov	r3, r0
 8015e38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3710      	adds	r7, #16
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8015e44:	b480      	push	{r7}
 8015e46:	b085      	sub	sp, #20
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d002      	beq.n	8015e5a <VL53L1CB_GetCapabilities+0x16>
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d103      	bne.n	8015e62 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015e5a:	f06f 0301 	mvn.w	r3, #1
 8015e5e:	60fb      	str	r3, [r7, #12]
 8015e60:	e00d      	b.n	8015e7e <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	2201      	movs	r2, #1
 8015e66:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	2204      	movs	r2, #4
 8015e6c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	2201      	movs	r2, #1
 8015e72:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	2200      	movs	r2, #0
 8015e78:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015e7e:	68fb      	ldr	r3, [r7, #12]
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr

08015e8c <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d009      	beq.n	8015eb0 <VL53L1CB_ConfigProfile+0x24>
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d006      	beq.n	8015eb0 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015ea8:	7afb      	ldrb	r3, [r7, #11]
 8015eaa:	2b01      	cmp	r3, #1
 8015eac:	d103      	bne.n	8015eb6 <VL53L1CB_ConfigProfile+0x2a>
 8015eae:	e00c      	b.n	8015eca <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8015eb0:	f06f 0301 	mvn.w	r3, #1
 8015eb4:	e043      	b.n	8015f3e <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015eb6:	7afb      	ldrb	r3, [r7, #11]
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d006      	beq.n	8015eca <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8015ebc:	7afb      	ldrb	r3, [r7, #11]
 8015ebe:	2b03      	cmp	r3, #3
 8015ec0:	d003      	beq.n	8015eca <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015ec2:	f06f 0301 	mvn.w	r3, #1
 8015ec6:	60fb      	str	r3, [r7, #12]
 8015ec8:	e038      	b.n	8015f3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8015eca:	7afb      	ldrb	r3, [r7, #11]
 8015ecc:	4619      	mov	r1, r3
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7ed f970 	bl	80031b4 <VL53L1_SetDistanceMode>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d003      	beq.n	8015ee2 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8015eda:	f04f 33ff 	mov.w	r3, #4294967295
 8015ede:	60fb      	str	r3, [r7, #12]
 8015ee0:	e02c      	b.n	8015f3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8015ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015eea:	fb02 f303 	mul.w	r3, r2, r3
 8015eee:	4619      	mov	r1, r3
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f7ed f9ed 	bl	80032d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d003      	beq.n	8015f04 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8015efc:	f04f 33ff 	mov.w	r3, #4294967295
 8015f00:	60fb      	str	r3, [r7, #12]
 8015f02:	e01b      	b.n	8015f3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	68db      	ldr	r3, [r3, #12]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	bf14      	ite	ne
 8015f0c:	2301      	movne	r3, #1
 8015f0e:	2300      	moveq	r3, #0
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	461a      	mov	r2, r3
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f1a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	691b      	ldr	r3, [r3, #16]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	bf14      	ite	ne
 8015f26:	2301      	movne	r3, #1
 8015f28:	2300      	moveq	r3, #0
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f34:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3710      	adds	r7, #16
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b094      	sub	sp, #80	; 0x50
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
 8015f4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d002      	beq.n	8015f5c <VL53L1CB_ConfigROI+0x16>
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d103      	bne.n	8015f64 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015f5c:	f06f 0301 	mvn.w	r3, #1
 8015f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f62:	e01c      	b.n	8015f9e <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8015f64:	2301      	movs	r3, #1
 8015f66:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	789b      	ldrb	r3, [r3, #2]
 8015f6c:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	78db      	ldrb	r3, [r3, #3]
 8015f72:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	785b      	ldrb	r3, [r3, #1]
 8015f7e:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8015f80:	f107 0308 	add.w	r3, r7, #8
 8015f84:	4619      	mov	r1, r3
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ed fca6 	bl	80038d8 <VL53L1_SetROI>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d003      	beq.n	8015f9a <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8015f92:	f04f 33ff 	mov.w	r3, #4294967295
 8015f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f98:	e001      	b.n	8015f9e <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8015f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3750      	adds	r7, #80	; 0x50
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015fb2:	f06f 0303 	mvn.w	r3, #3
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	370c      	adds	r7, #12
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr

08015fc2 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015fc2:	b580      	push	{r7, lr}
 8015fc4:	b084      	sub	sp, #16
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	6078      	str	r0, [r7, #4]
 8015fca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d002      	beq.n	8015fd8 <VL53L1CB_GetDistance+0x16>
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d103      	bne.n	8015fe0 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015fd8:	f06f 0301 	mvn.w	r3, #1
 8015fdc:	60fb      	str	r3, [r7, #12]
 8015fde:	e03a      	b.n	8016056 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015fe6:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d103      	bne.n	8015ff6 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8015fee:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff2:	60fb      	str	r3, [r7, #12]
 8015ff4:	e02f      	b.n	8016056 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015ffc:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8016000:	2b01      	cmp	r3, #1
 8016002:	d106      	bne.n	8016012 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8016004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 f92b 	bl	8016264 <vl53l1cb_poll_for_measurement>
 801600e:	60f8      	str	r0, [r7, #12]
 8016010:	e004      	b.n	801601c <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8016012:	2100      	movs	r1, #0
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f000 f925 	bl	8016264 <vl53l1cb_poll_for_measurement>
 801601a:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d119      	bne.n	8016056 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8016022:	6839      	ldr	r1, [r7, #0]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 f94b 	bl	80162c0 <vl53l1cb_get_result>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d003      	beq.n	8016038 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8016030:	f04f 33ff 	mov.w	r3, #4294967295
 8016034:	60fb      	str	r3, [r7, #12]
 8016036:	e00e      	b.n	8016056 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801603e:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8016042:	2b01      	cmp	r3, #1
 8016044:	d105      	bne.n	8016052 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f7ed fdde 	bl	8003c08 <VL53L1_ClearInterruptAndStartMeasurement>
 801604c:	4603      	mov	r3, r0
 801604e:	60fb      	str	r3, [r7, #12]
 8016050:	e001      	b.n	8016056 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8016052:	2300      	movs	r3, #0
 8016054:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8016056:	68fb      	ldr	r3, [r7, #12]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3710      	adds	r7, #16
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d103      	bne.n	8016078 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016070:	f06f 0301 	mvn.w	r3, #1
 8016074:	60fb      	str	r3, [r7, #12]
 8016076:	e068      	b.n	801614a <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801607e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8016082:	2b01      	cmp	r3, #1
 8016084:	d103      	bne.n	801608e <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8016086:	f04f 33ff 	mov.w	r3, #4294967295
 801608a:	60fb      	str	r3, [r7, #12]
 801608c:	e05d      	b.n	801614a <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ed fcf6 	bl	8003a80 <VL53L1_StartMeasurement>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d154      	bne.n	8016144 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160a0:	2201      	movs	r2, #1
 80160a2:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 80160a6:	2300      	movs	r3, #0
 80160a8:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	3b01      	subs	r3, #1
 80160ae:	2b03      	cmp	r3, #3
 80160b0:	d83e      	bhi.n	8016130 <VL53L1CB_Start+0xd0>
 80160b2:	a201      	add	r2, pc, #4	; (adr r2, 80160b8 <VL53L1CB_Start+0x58>)
 80160b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160b8:	080160c9 	.word	0x080160c9
 80160bc:	080160e3 	.word	0x080160e3
 80160c0:	080160fd 	.word	0x080160fd
 80160c4:	08016117 	.word	0x08016117
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160ce:	2201      	movs	r2, #1
 80160d0:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160da:	2201      	movs	r2, #1
 80160dc:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80160e0:	e033      	b.n	801614a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160e8:	2200      	movs	r2, #0
 80160ea:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160f4:	2201      	movs	r2, #1
 80160f6:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80160fa:	e026      	b.n	801614a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016102:	2201      	movs	r2, #1
 8016104:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801610e:	2200      	movs	r2, #0
 8016110:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8016114:	e019      	b.n	801614a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801611c:	2200      	movs	r2, #0
 801611e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016128:	2200      	movs	r2, #0
 801612a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801612e:	e00c      	b.n	801614a <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016136:	2200      	movs	r2, #0
 8016138:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 801613c:	f06f 0301 	mvn.w	r3, #1
 8016140:	60fb      	str	r3, [r7, #12]
      break;
 8016142:	e002      	b.n	801614a <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8016144:	f04f 33ff 	mov.w	r3, #4294967295
 8016148:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801614a:	68fb      	ldr	r3, [r7, #12]
}
 801614c:	4618      	mov	r0, r3
 801614e:	3710      	adds	r7, #16
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b084      	sub	sp, #16
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d103      	bne.n	801616a <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016162:	f06f 0301 	mvn.w	r3, #1
 8016166:	60fb      	str	r3, [r7, #12]
 8016168:	e01c      	b.n	80161a4 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016170:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8016174:	2b00      	cmp	r3, #0
 8016176:	d103      	bne.n	8016180 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8016178:	f04f 33ff 	mov.w	r3, #4294967295
 801617c:	60fb      	str	r3, [r7, #12]
 801617e:	e011      	b.n	80161a4 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7ed fd1d 	bl	8003bc0 <VL53L1_StopMeasurement>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d108      	bne.n	801619e <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016192:	2200      	movs	r2, #0
 8016194:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8016198:	2300      	movs	r3, #0
 801619a:	60fb      	str	r3, [r7, #12]
 801619c:	e002      	b.n	80161a4 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 801619e:	f04f 33ff 	mov.w	r3, #4294967295
 80161a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80161a4:	68fb      	ldr	r3, [r7, #12]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b084      	sub	sp, #16
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
 80161b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80161be:	f06f 0301 	mvn.w	r3, #1
 80161c2:	60fb      	str	r3, [r7, #12]
 80161c4:	e012      	b.n	80161ec <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 80161c6:	683b      	ldr	r3, [r7, #0]
 80161c8:	b2db      	uxtb	r3, r3
 80161ca:	4619      	mov	r1, r3
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7ec fdcf 	bl	8002d70 <VL53L1_SetDeviceAddress>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d003      	beq.n	80161e0 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 80161d8:	f04f 33ff 	mov.w	r3, #4294967295
 80161dc:	60fb      	str	r3, [r7, #12]
 80161de:	e005      	b.n	80161ec <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 80161e8:	2300      	movs	r3, #0
 80161ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80161ec:	68fb      	ldr	r3, [r7, #12]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 80161f6:	b480      	push	{r7}
 80161f8:	b085      	sub	sp, #20
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d002      	beq.n	801620c <VL53L1CB_GetAddress+0x16>
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d103      	bne.n	8016214 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801620c:	f06f 0301 	mvn.w	r3, #1
 8016210:	60fb      	str	r3, [r7, #12]
 8016212:	e006      	b.n	8016222 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	891b      	ldrh	r3, [r3, #8]
 8016218:	461a      	mov	r2, r3
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 801621e:	2300      	movs	r3, #0
 8016220:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016222:	68fb      	ldr	r3, [r7, #12]
}
 8016224:	4618      	mov	r0, r3
 8016226:	3714      	adds	r7, #20
 8016228:	46bd      	mov	sp, r7
 801622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622e:	4770      	bx	lr

08016230 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8016230:	b480      	push	{r7}
 8016232:	b083      	sub	sp, #12
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 801623a:	f06f 0303 	mvn.w	r3, #3
}
 801623e:	4618      	mov	r0, r3
 8016240:	370c      	adds	r7, #12
 8016242:	46bd      	mov	sp, r7
 8016244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016248:	4770      	bx	lr

0801624a <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801624a:	b480      	push	{r7}
 801624c:	b083      	sub	sp, #12
 801624e:	af00      	add	r7, sp, #0
 8016250:	6078      	str	r0, [r7, #4]
 8016252:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8016254:	f06f 0303 	mvn.w	r3, #3
}
 8016258:	4618      	mov	r0, r3
 801625a:	370c      	adds	r7, #12
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr

08016264 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d102      	bne.n	801627e <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8016278:	f06f 0301 	mvn.w	r3, #1
 801627c:	e01b      	b.n	80162b6 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	695b      	ldr	r3, [r3, #20]
 8016282:	4798      	blx	r3
 8016284:	4603      	mov	r3, r0
 8016286:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8016288:	f107 030b 	add.w	r3, r7, #11
 801628c:	4619      	mov	r1, r3
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f7ed fcd0 	bl	8003c34 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8016294:	7afb      	ldrb	r3, [r7, #11]
 8016296:	2b01      	cmp	r3, #1
 8016298:	d101      	bne.n	801629e <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801629a:	2300      	movs	r3, #0
 801629c:	e00b      	b.n	80162b6 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	695b      	ldr	r3, [r3, #20]
 80162a2:	4798      	blx	r3
 80162a4:	4603      	mov	r3, r0
 80162a6:	461a      	mov	r2, r3
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	683a      	ldr	r2, [r7, #0]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d8ea      	bhi.n	8016288 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 80162b2:	f06f 0302 	mvn.w	r3, #2
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
	...

080162c0 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 80162c0:	b590      	push	{r4, r7, lr}
 80162c2:	b0a9      	sub	sp, #164	; 0xa4
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d002      	beq.n	80162d6 <vl53l1cb_get_result+0x16>
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d104      	bne.n	80162e0 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80162d6:	f06f 0301 	mvn.w	r3, #1
 80162da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80162de:	e120      	b.n	8016522 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 80162e0:	f107 030c 	add.w	r3, r7, #12
 80162e4:	4619      	mov	r1, r3
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7ee fb82 	bl	80049f0 <VL53L1_GetMultiRangingData>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d004      	beq.n	80162fc <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 80162f2:	f04f 33ff 	mov.w	r3, #4294967295
 80162f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80162fa:	e112      	b.n	8016522 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 80162fc:	2300      	movs	r3, #0
 80162fe:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016302:	e106      	b.n	8016512 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8016304:	7cbb      	ldrb	r3, [r7, #18]
 8016306:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801630a:	4618      	mov	r0, r3
 801630c:	6839      	ldr	r1, [r7, #0]
 801630e:	4613      	mov	r3, r2
 8016310:	011b      	lsls	r3, r3, #4
 8016312:	4413      	add	r3, r2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	440b      	add	r3, r1
 8016318:	3304      	adds	r3, #4
 801631a:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801631c:	2300      	movs	r3, #0
 801631e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8016322:	e0eb      	b.n	80164fc <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8016324:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016328:	4613      	mov	r3, r2
 801632a:	00db      	lsls	r3, r3, #3
 801632c:	1a9b      	subs	r3, r3, r2
 801632e:	009b      	lsls	r3, r3, #2
 8016330:	33a0      	adds	r3, #160	; 0xa0
 8016332:	443b      	add	r3, r7
 8016334:	3b78      	subs	r3, #120	; 0x78
 8016336:	f9b3 3000 	ldrsh.w	r3, [r3]
 801633a:	2b00      	cmp	r3, #0
 801633c:	da0d      	bge.n	801635a <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801633e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016342:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016346:	6839      	ldr	r1, [r7, #0]
 8016348:	4613      	mov	r3, r2
 801634a:	011b      	lsls	r3, r3, #4
 801634c:	4413      	add	r3, r2
 801634e:	4403      	add	r3, r0
 8016350:	009b      	lsls	r3, r3, #2
 8016352:	440b      	add	r3, r1
 8016354:	2200      	movs	r2, #0
 8016356:	609a      	str	r2, [r3, #8]
 8016358:	e017      	b.n	801638a <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801635a:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801635e:	4613      	mov	r3, r2
 8016360:	00db      	lsls	r3, r3, #3
 8016362:	1a9b      	subs	r3, r3, r2
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	33a0      	adds	r3, #160	; 0xa0
 8016368:	443b      	add	r3, r7
 801636a:	3b78      	subs	r3, #120	; 0x78
 801636c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016370:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016374:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016378:	461c      	mov	r4, r3
 801637a:	6839      	ldr	r1, [r7, #0]
 801637c:	4613      	mov	r3, r2
 801637e:	011b      	lsls	r3, r3, #4
 8016380:	4413      	add	r3, r2
 8016382:	4403      	add	r3, r0
 8016384:	009b      	lsls	r3, r3, #2
 8016386:	440b      	add	r3, r1
 8016388:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016390:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8016394:	2b01      	cmp	r3, #1
 8016396:	d136      	bne.n	8016406 <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8016398:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801639c:	4613      	mov	r3, r2
 801639e:	00db      	lsls	r3, r3, #3
 80163a0:	1a9b      	subs	r3, r3, r2
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	33a0      	adds	r3, #160	; 0xa0
 80163a6:	443b      	add	r3, r7
 80163a8:	3b80      	subs	r3, #128	; 0x80
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	ee07 3a90 	vmov	s15, r3
 80163b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80163b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016530 <vl53l1cb_get_result+0x270>
 80163b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80163bc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016534 <vl53l1cb_get_result+0x274>
 80163c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80163c4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80163c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80163cc:	0a1b      	lsrs	r3, r3, #8
 80163ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80163d2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80163d6:	ee07 3a90 	vmov	s15, r3
 80163da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80163de:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80163e2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80163e6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80163ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80163ee:	6839      	ldr	r1, [r7, #0]
 80163f0:	4613      	mov	r3, r2
 80163f2:	011b      	lsls	r3, r3, #4
 80163f4:	4413      	add	r3, r2
 80163f6:	4403      	add	r3, r0
 80163f8:	3308      	adds	r3, #8
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	440b      	add	r3, r1
 80163fe:	3308      	adds	r3, #8
 8016400:	edc3 7a00 	vstr	s15, [r3]
 8016404:	e00f      	b.n	8016426 <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8016406:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801640a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801640e:	6839      	ldr	r1, [r7, #0]
 8016410:	4613      	mov	r3, r2
 8016412:	011b      	lsls	r3, r3, #4
 8016414:	4413      	add	r3, r2
 8016416:	4403      	add	r3, r0
 8016418:	3308      	adds	r3, #8
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	440b      	add	r3, r1
 801641e:	3308      	adds	r3, #8
 8016420:	f04f 0200 	mov.w	r2, #0
 8016424:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801642c:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8016430:	2b01      	cmp	r3, #1
 8016432:	d136      	bne.n	80164a2 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8016434:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016438:	4613      	mov	r3, r2
 801643a:	00db      	lsls	r3, r3, #3
 801643c:	1a9b      	subs	r3, r3, r2
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	33a0      	adds	r3, #160	; 0xa0
 8016442:	443b      	add	r3, r7
 8016444:	3b84      	subs	r3, #132	; 0x84
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	ee07 3a90 	vmov	s15, r3
 801644c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016450:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016530 <vl53l1cb_get_result+0x270>
 8016454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016458:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016534 <vl53l1cb_get_result+0x274>
 801645c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016460:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8016464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8016468:	0a1b      	lsrs	r3, r3, #8
 801646a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801646e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8016472:	ee07 3a90 	vmov	s15, r3
 8016476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801647a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801647e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016482:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8016486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801648a:	6839      	ldr	r1, [r7, #0]
 801648c:	4613      	mov	r3, r2
 801648e:	011b      	lsls	r3, r3, #4
 8016490:	4413      	add	r3, r2
 8016492:	4403      	add	r3, r0
 8016494:	330c      	adds	r3, #12
 8016496:	009b      	lsls	r3, r3, #2
 8016498:	440b      	add	r3, r1
 801649a:	3308      	adds	r3, #8
 801649c:	edc3 7a00 	vstr	s15, [r3]
 80164a0:	e00f      	b.n	80164c2 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80164a2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80164a6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80164aa:	6839      	ldr	r1, [r7, #0]
 80164ac:	4613      	mov	r3, r2
 80164ae:	011b      	lsls	r3, r3, #4
 80164b0:	4413      	add	r3, r2
 80164b2:	4403      	add	r3, r0
 80164b4:	330c      	adds	r3, #12
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	440b      	add	r3, r1
 80164ba:	3308      	adds	r3, #8
 80164bc:	f04f 0200 	mov.w	r2, #0
 80164c0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80164c2:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80164c6:	4613      	mov	r3, r2
 80164c8:	00db      	lsls	r3, r3, #3
 80164ca:	1a9b      	subs	r3, r3, r2
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	33a0      	adds	r3, #160	; 0xa0
 80164d0:	443b      	add	r3, r7
 80164d2:	3b75      	subs	r3, #117	; 0x75
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80164da:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80164de:	461c      	mov	r4, r3
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	4613      	mov	r3, r2
 80164e4:	011b      	lsls	r3, r3, #4
 80164e6:	4413      	add	r3, r2
 80164e8:	4403      	add	r3, r0
 80164ea:	3304      	adds	r3, #4
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	440b      	add	r3, r1
 80164f0:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80164f2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80164f6:	3301      	adds	r3, #1
 80164f8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80164fc:	7cbb      	ldrb	r3, [r7, #18]
 80164fe:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016502:	429a      	cmp	r2, r3
 8016504:	f4ff af0e 	bcc.w	8016324 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8016508:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801650c:	3301      	adds	r3, #1
 801650e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016512:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8016516:	2b00      	cmp	r3, #0
 8016518:	f43f aef4 	beq.w	8016304 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 8016522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8016526:	4618      	mov	r0, r3
 8016528:	37a4      	adds	r7, #164	; 0xa4
 801652a:	46bd      	mov	sp, r7
 801652c:	bd90      	pop	{r4, r7, pc}
 801652e:	bf00      	nop
 8016530:	47800000 	.word	0x47800000
 8016534:	447a0000 	.word	0x447a0000

08016538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801653e:	2300      	movs	r3, #0
 8016540:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016542:	4b0c      	ldr	r3, [pc, #48]	; (8016574 <HAL_Init+0x3c>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4a0b      	ldr	r2, [pc, #44]	; (8016574 <HAL_Init+0x3c>)
 8016548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801654c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801654e:	2003      	movs	r0, #3
 8016550:	f000 f90f 	bl	8016772 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016554:	200f      	movs	r0, #15
 8016556:	f7eb fb71 	bl	8001c3c <HAL_InitTick>
 801655a:	4603      	mov	r3, r0
 801655c:	2b00      	cmp	r3, #0
 801655e:	d002      	beq.n	8016566 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8016560:	2301      	movs	r3, #1
 8016562:	71fb      	strb	r3, [r7, #7]
 8016564:	e001      	b.n	801656a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8016566:	f7eb fb49 	bl	8001bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801656a:	79fb      	ldrb	r3, [r7, #7]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3708      	adds	r7, #8
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	58004000 	.word	0x58004000

08016578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016578:	b480      	push	{r7}
 801657a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801657c:	4b06      	ldr	r3, [pc, #24]	; (8016598 <HAL_IncTick+0x20>)
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	461a      	mov	r2, r3
 8016582:	4b06      	ldr	r3, [pc, #24]	; (801659c <HAL_IncTick+0x24>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	4413      	add	r3, r2
 8016588:	4a04      	ldr	r2, [pc, #16]	; (801659c <HAL_IncTick+0x24>)
 801658a:	6013      	str	r3, [r2, #0]
}
 801658c:	bf00      	nop
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr
 8016596:	bf00      	nop
 8016598:	20000074 	.word	0x20000074
 801659c:	20008840 	.word	0x20008840

080165a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80165a0:	b480      	push	{r7}
 80165a2:	af00      	add	r7, sp, #0
  return uwTick;
 80165a4:	4b03      	ldr	r3, [pc, #12]	; (80165b4 <HAL_GetTick+0x14>)
 80165a6:	681b      	ldr	r3, [r3, #0]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	20008840 	.word	0x20008840

080165b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80165b8:	b480      	push	{r7}
 80165ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80165bc:	4b03      	ldr	r3, [pc, #12]	; (80165cc <HAL_GetTickPrio+0x14>)
 80165be:	681b      	ldr	r3, [r3, #0]
}
 80165c0:	4618      	mov	r0, r3
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	20000070 	.word	0x20000070

080165d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b084      	sub	sp, #16
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80165d8:	f7ff ffe2 	bl	80165a0 <HAL_GetTick>
 80165dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165e8:	d005      	beq.n	80165f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80165ea:	4b0a      	ldr	r3, [pc, #40]	; (8016614 <HAL_Delay+0x44>)
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	4413      	add	r3, r2
 80165f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80165f6:	bf00      	nop
 80165f8:	f7ff ffd2 	bl	80165a0 <HAL_GetTick>
 80165fc:	4602      	mov	r2, r0
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	1ad3      	subs	r3, r2, r3
 8016602:	68fa      	ldr	r2, [r7, #12]
 8016604:	429a      	cmp	r2, r3
 8016606:	d8f7      	bhi.n	80165f8 <HAL_Delay+0x28>
  {
  }
}
 8016608:	bf00      	nop
 801660a:	bf00      	nop
 801660c:	3710      	adds	r7, #16
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	20000074 	.word	0x20000074

08016618 <__NVIC_SetPriorityGrouping>:
{
 8016618:	b480      	push	{r7}
 801661a:	b085      	sub	sp, #20
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f003 0307 	and.w	r3, r3, #7
 8016626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016628:	4b0c      	ldr	r3, [pc, #48]	; (801665c <__NVIC_SetPriorityGrouping+0x44>)
 801662a:	68db      	ldr	r3, [r3, #12]
 801662c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801662e:	68ba      	ldr	r2, [r7, #8]
 8016630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016634:	4013      	ands	r3, r2
 8016636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801664a:	4a04      	ldr	r2, [pc, #16]	; (801665c <__NVIC_SetPriorityGrouping+0x44>)
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	60d3      	str	r3, [r2, #12]
}
 8016650:	bf00      	nop
 8016652:	3714      	adds	r7, #20
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr
 801665c:	e000ed00 	.word	0xe000ed00

08016660 <__NVIC_GetPriorityGrouping>:
{
 8016660:	b480      	push	{r7}
 8016662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016664:	4b04      	ldr	r3, [pc, #16]	; (8016678 <__NVIC_GetPriorityGrouping+0x18>)
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	0a1b      	lsrs	r3, r3, #8
 801666a:	f003 0307 	and.w	r3, r3, #7
}
 801666e:	4618      	mov	r0, r3
 8016670:	46bd      	mov	sp, r7
 8016672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016676:	4770      	bx	lr
 8016678:	e000ed00 	.word	0xe000ed00

0801667c <__NVIC_EnableIRQ>:
{
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
 8016682:	4603      	mov	r3, r0
 8016684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801668a:	2b00      	cmp	r3, #0
 801668c:	db0b      	blt.n	80166a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801668e:	79fb      	ldrb	r3, [r7, #7]
 8016690:	f003 021f 	and.w	r2, r3, #31
 8016694:	4907      	ldr	r1, [pc, #28]	; (80166b4 <__NVIC_EnableIRQ+0x38>)
 8016696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801669a:	095b      	lsrs	r3, r3, #5
 801669c:	2001      	movs	r0, #1
 801669e:	fa00 f202 	lsl.w	r2, r0, r2
 80166a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80166a6:	bf00      	nop
 80166a8:	370c      	adds	r7, #12
 80166aa:	46bd      	mov	sp, r7
 80166ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b0:	4770      	bx	lr
 80166b2:	bf00      	nop
 80166b4:	e000e100 	.word	0xe000e100

080166b8 <__NVIC_SetPriority>:
{
 80166b8:	b480      	push	{r7}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4603      	mov	r3, r0
 80166c0:	6039      	str	r1, [r7, #0]
 80166c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	db0a      	blt.n	80166e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	b2da      	uxtb	r2, r3
 80166d0:	490c      	ldr	r1, [pc, #48]	; (8016704 <__NVIC_SetPriority+0x4c>)
 80166d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166d6:	0112      	lsls	r2, r2, #4
 80166d8:	b2d2      	uxtb	r2, r2
 80166da:	440b      	add	r3, r1
 80166dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80166e0:	e00a      	b.n	80166f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	b2da      	uxtb	r2, r3
 80166e6:	4908      	ldr	r1, [pc, #32]	; (8016708 <__NVIC_SetPriority+0x50>)
 80166e8:	79fb      	ldrb	r3, [r7, #7]
 80166ea:	f003 030f 	and.w	r3, r3, #15
 80166ee:	3b04      	subs	r3, #4
 80166f0:	0112      	lsls	r2, r2, #4
 80166f2:	b2d2      	uxtb	r2, r2
 80166f4:	440b      	add	r3, r1
 80166f6:	761a      	strb	r2, [r3, #24]
}
 80166f8:	bf00      	nop
 80166fa:	370c      	adds	r7, #12
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	e000e100 	.word	0xe000e100
 8016708:	e000ed00 	.word	0xe000ed00

0801670c <NVIC_EncodePriority>:
{
 801670c:	b480      	push	{r7}
 801670e:	b089      	sub	sp, #36	; 0x24
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	60b9      	str	r1, [r7, #8]
 8016716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f003 0307 	and.w	r3, r3, #7
 801671e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	f1c3 0307 	rsb	r3, r3, #7
 8016726:	2b04      	cmp	r3, #4
 8016728:	bf28      	it	cs
 801672a:	2304      	movcs	r3, #4
 801672c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	3304      	adds	r3, #4
 8016732:	2b06      	cmp	r3, #6
 8016734:	d902      	bls.n	801673c <NVIC_EncodePriority+0x30>
 8016736:	69fb      	ldr	r3, [r7, #28]
 8016738:	3b03      	subs	r3, #3
 801673a:	e000      	b.n	801673e <NVIC_EncodePriority+0x32>
 801673c:	2300      	movs	r3, #0
 801673e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016740:	f04f 32ff 	mov.w	r2, #4294967295
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	fa02 f303 	lsl.w	r3, r2, r3
 801674a:	43da      	mvns	r2, r3
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	401a      	ands	r2, r3
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016754:	f04f 31ff 	mov.w	r1, #4294967295
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	fa01 f303 	lsl.w	r3, r1, r3
 801675e:	43d9      	mvns	r1, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016764:	4313      	orrs	r3, r2
}
 8016766:	4618      	mov	r0, r3
 8016768:	3724      	adds	r7, #36	; 0x24
 801676a:	46bd      	mov	sp, r7
 801676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016770:	4770      	bx	lr

08016772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b082      	sub	sp, #8
 8016776:	af00      	add	r7, sp, #0
 8016778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801677a:	6878      	ldr	r0, [r7, #4]
 801677c:	f7ff ff4c 	bl	8016618 <__NVIC_SetPriorityGrouping>
}
 8016780:	bf00      	nop
 8016782:	3708      	adds	r7, #8
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}

08016788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b086      	sub	sp, #24
 801678c:	af00      	add	r7, sp, #0
 801678e:	4603      	mov	r3, r0
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8016796:	f7ff ff63 	bl	8016660 <__NVIC_GetPriorityGrouping>
 801679a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	68b9      	ldr	r1, [r7, #8]
 80167a0:	6978      	ldr	r0, [r7, #20]
 80167a2:	f7ff ffb3 	bl	801670c <NVIC_EncodePriority>
 80167a6:	4602      	mov	r2, r0
 80167a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ac:	4611      	mov	r1, r2
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7ff ff82 	bl	80166b8 <__NVIC_SetPriority>
}
 80167b4:	bf00      	nop
 80167b6:	3718      	adds	r7, #24
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}

080167bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	4603      	mov	r3, r0
 80167c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80167c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7ff ff56 	bl	801667c <__NVIC_EnableIRQ>
}
 80167d0:	bf00      	nop
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80167d8:	b480      	push	{r7}
 80167da:	b087      	sub	sp, #28
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80167e2:	2300      	movs	r3, #0
 80167e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80167e6:	e14c      	b.n	8016a82 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	2101      	movs	r1, #1
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	fa01 f303 	lsl.w	r3, r1, r3
 80167f4:	4013      	ands	r3, r2
 80167f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f000 813e 	beq.w	8016a7c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	685b      	ldr	r3, [r3, #4]
 8016804:	f003 0303 	and.w	r3, r3, #3
 8016808:	2b01      	cmp	r3, #1
 801680a:	d005      	beq.n	8016818 <HAL_GPIO_Init+0x40>
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	f003 0303 	and.w	r3, r3, #3
 8016814:	2b02      	cmp	r3, #2
 8016816:	d130      	bne.n	801687a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	005b      	lsls	r3, r3, #1
 8016822:	2203      	movs	r2, #3
 8016824:	fa02 f303 	lsl.w	r3, r2, r3
 8016828:	43db      	mvns	r3, r3
 801682a:	693a      	ldr	r2, [r7, #16]
 801682c:	4013      	ands	r3, r2
 801682e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	68da      	ldr	r2, [r3, #12]
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	005b      	lsls	r3, r3, #1
 8016838:	fa02 f303 	lsl.w	r3, r2, r3
 801683c:	693a      	ldr	r2, [r7, #16]
 801683e:	4313      	orrs	r3, r2
 8016840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	693a      	ldr	r2, [r7, #16]
 8016846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801684e:	2201      	movs	r2, #1
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	fa02 f303 	lsl.w	r3, r2, r3
 8016856:	43db      	mvns	r3, r3
 8016858:	693a      	ldr	r2, [r7, #16]
 801685a:	4013      	ands	r3, r2
 801685c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	091b      	lsrs	r3, r3, #4
 8016864:	f003 0201 	and.w	r2, r3, #1
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	fa02 f303 	lsl.w	r3, r2, r3
 801686e:	693a      	ldr	r2, [r7, #16]
 8016870:	4313      	orrs	r3, r2
 8016872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	693a      	ldr	r2, [r7, #16]
 8016878:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	f003 0303 	and.w	r3, r3, #3
 8016882:	2b03      	cmp	r3, #3
 8016884:	d017      	beq.n	80168b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	68db      	ldr	r3, [r3, #12]
 801688a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	2203      	movs	r2, #3
 8016892:	fa02 f303 	lsl.w	r3, r2, r3
 8016896:	43db      	mvns	r3, r3
 8016898:	693a      	ldr	r2, [r7, #16]
 801689a:	4013      	ands	r3, r2
 801689c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	689a      	ldr	r2, [r3, #8]
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	005b      	lsls	r3, r3, #1
 80168a6:	fa02 f303 	lsl.w	r3, r2, r3
 80168aa:	693a      	ldr	r2, [r7, #16]
 80168ac:	4313      	orrs	r3, r2
 80168ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	693a      	ldr	r2, [r7, #16]
 80168b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	f003 0303 	and.w	r3, r3, #3
 80168be:	2b02      	cmp	r3, #2
 80168c0:	d123      	bne.n	801690a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	08da      	lsrs	r2, r3, #3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	3208      	adds	r2, #8
 80168ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	f003 0307 	and.w	r3, r3, #7
 80168d6:	009b      	lsls	r3, r3, #2
 80168d8:	220f      	movs	r2, #15
 80168da:	fa02 f303 	lsl.w	r3, r2, r3
 80168de:	43db      	mvns	r3, r3
 80168e0:	693a      	ldr	r2, [r7, #16]
 80168e2:	4013      	ands	r3, r2
 80168e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	691a      	ldr	r2, [r3, #16]
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	f003 0307 	and.w	r3, r3, #7
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	fa02 f303 	lsl.w	r3, r2, r3
 80168f6:	693a      	ldr	r2, [r7, #16]
 80168f8:	4313      	orrs	r3, r2
 80168fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	08da      	lsrs	r2, r3, #3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	3208      	adds	r2, #8
 8016904:	6939      	ldr	r1, [r7, #16]
 8016906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	2203      	movs	r2, #3
 8016916:	fa02 f303 	lsl.w	r3, r2, r3
 801691a:	43db      	mvns	r3, r3
 801691c:	693a      	ldr	r2, [r7, #16]
 801691e:	4013      	ands	r3, r2
 8016920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	f003 0203 	and.w	r2, r3, #3
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	005b      	lsls	r3, r3, #1
 801692e:	fa02 f303 	lsl.w	r3, r2, r3
 8016932:	693a      	ldr	r2, [r7, #16]
 8016934:	4313      	orrs	r3, r2
 8016936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	693a      	ldr	r2, [r7, #16]
 801693c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	685b      	ldr	r3, [r3, #4]
 8016942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016946:	2b00      	cmp	r3, #0
 8016948:	f000 8098 	beq.w	8016a7c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801694c:	4a54      	ldr	r2, [pc, #336]	; (8016aa0 <HAL_GPIO_Init+0x2c8>)
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	089b      	lsrs	r3, r3, #2
 8016952:	3302      	adds	r3, #2
 8016954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	f003 0303 	and.w	r3, r3, #3
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	220f      	movs	r2, #15
 8016964:	fa02 f303 	lsl.w	r3, r2, r3
 8016968:	43db      	mvns	r3, r3
 801696a:	693a      	ldr	r2, [r7, #16]
 801696c:	4013      	ands	r3, r2
 801696e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8016976:	d019      	beq.n	80169ac <HAL_GPIO_Init+0x1d4>
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	4a4a      	ldr	r2, [pc, #296]	; (8016aa4 <HAL_GPIO_Init+0x2cc>)
 801697c:	4293      	cmp	r3, r2
 801697e:	d013      	beq.n	80169a8 <HAL_GPIO_Init+0x1d0>
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	4a49      	ldr	r2, [pc, #292]	; (8016aa8 <HAL_GPIO_Init+0x2d0>)
 8016984:	4293      	cmp	r3, r2
 8016986:	d00d      	beq.n	80169a4 <HAL_GPIO_Init+0x1cc>
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	4a48      	ldr	r2, [pc, #288]	; (8016aac <HAL_GPIO_Init+0x2d4>)
 801698c:	4293      	cmp	r3, r2
 801698e:	d007      	beq.n	80169a0 <HAL_GPIO_Init+0x1c8>
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	4a47      	ldr	r2, [pc, #284]	; (8016ab0 <HAL_GPIO_Init+0x2d8>)
 8016994:	4293      	cmp	r3, r2
 8016996:	d101      	bne.n	801699c <HAL_GPIO_Init+0x1c4>
 8016998:	2304      	movs	r3, #4
 801699a:	e008      	b.n	80169ae <HAL_GPIO_Init+0x1d6>
 801699c:	2307      	movs	r3, #7
 801699e:	e006      	b.n	80169ae <HAL_GPIO_Init+0x1d6>
 80169a0:	2303      	movs	r3, #3
 80169a2:	e004      	b.n	80169ae <HAL_GPIO_Init+0x1d6>
 80169a4:	2302      	movs	r3, #2
 80169a6:	e002      	b.n	80169ae <HAL_GPIO_Init+0x1d6>
 80169a8:	2301      	movs	r3, #1
 80169aa:	e000      	b.n	80169ae <HAL_GPIO_Init+0x1d6>
 80169ac:	2300      	movs	r3, #0
 80169ae:	697a      	ldr	r2, [r7, #20]
 80169b0:	f002 0203 	and.w	r2, r2, #3
 80169b4:	0092      	lsls	r2, r2, #2
 80169b6:	4093      	lsls	r3, r2
 80169b8:	693a      	ldr	r2, [r7, #16]
 80169ba:	4313      	orrs	r3, r2
 80169bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80169be:	4938      	ldr	r1, [pc, #224]	; (8016aa0 <HAL_GPIO_Init+0x2c8>)
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	089b      	lsrs	r3, r3, #2
 80169c4:	3302      	adds	r3, #2
 80169c6:	693a      	ldr	r2, [r7, #16]
 80169c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80169cc:	4b39      	ldr	r3, [pc, #228]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	43db      	mvns	r3, r3
 80169d6:	693a      	ldr	r2, [r7, #16]
 80169d8:	4013      	ands	r3, r2
 80169da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d003      	beq.n	80169f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80169e8:	693a      	ldr	r2, [r7, #16]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	4313      	orrs	r3, r2
 80169ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80169f0:	4a30      	ldr	r2, [pc, #192]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80169f6:	4b2f      	ldr	r3, [pc, #188]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	43db      	mvns	r3, r3
 8016a00:	693a      	ldr	r2, [r7, #16]
 8016a02:	4013      	ands	r3, r2
 8016a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d003      	beq.n	8016a1a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8016a12:	693a      	ldr	r2, [r7, #16]
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	4313      	orrs	r3, r2
 8016a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8016a1a:	4a26      	ldr	r2, [pc, #152]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8016a20:	4b24      	ldr	r3, [pc, #144]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 8016a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	43db      	mvns	r3, r3
 8016a2c:	693a      	ldr	r2, [r7, #16]
 8016a2e:	4013      	ands	r3, r2
 8016a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d003      	beq.n	8016a46 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8016a3e:	693a      	ldr	r2, [r7, #16]
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	4313      	orrs	r3, r2
 8016a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8016a46:	4a1b      	ldr	r2, [pc, #108]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8016a4e:	4b19      	ldr	r3, [pc, #100]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 8016a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	43db      	mvns	r3, r3
 8016a5a:	693a      	ldr	r2, [r7, #16]
 8016a5c:	4013      	ands	r3, r2
 8016a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d003      	beq.n	8016a74 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8016a6c:	693a      	ldr	r2, [r7, #16]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	4313      	orrs	r3, r2
 8016a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8016a74:	4a0f      	ldr	r2, [pc, #60]	; (8016ab4 <HAL_GPIO_Init+0x2dc>)
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	fa22 f303 	lsr.w	r3, r2, r3
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f47f aeab 	bne.w	80167e8 <HAL_GPIO_Init+0x10>
  }
}
 8016a92:	bf00      	nop
 8016a94:	bf00      	nop
 8016a96:	371c      	adds	r7, #28
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr
 8016aa0:	40010000 	.word	0x40010000
 8016aa4:	48000400 	.word	0x48000400
 8016aa8:	48000800 	.word	0x48000800
 8016aac:	48000c00 	.word	0x48000c00
 8016ab0:	48001000 	.word	0x48001000
 8016ab4:	58000800 	.word	0x58000800

08016ab8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b087      	sub	sp, #28
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8016ac6:	e0bb      	b.n	8016c40 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8016ac8:	2201      	movs	r2, #1
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad0:	683a      	ldr	r2, [r7, #0]
 8016ad2:	4013      	ands	r3, r2
 8016ad4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f000 80ae 	beq.w	8016c3a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8016ade:	4a5f      	ldr	r2, [pc, #380]	; (8016c5c <HAL_GPIO_DeInit+0x1a4>)
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	089b      	lsrs	r3, r3, #2
 8016ae4:	3302      	adds	r3, #2
 8016ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016aea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	f003 0303 	and.w	r3, r3, #3
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	220f      	movs	r2, #15
 8016af6:	fa02 f303 	lsl.w	r3, r2, r3
 8016afa:	68fa      	ldr	r2, [r7, #12]
 8016afc:	4013      	ands	r3, r2
 8016afe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8016b06:	d019      	beq.n	8016b3c <HAL_GPIO_DeInit+0x84>
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	4a55      	ldr	r2, [pc, #340]	; (8016c60 <HAL_GPIO_DeInit+0x1a8>)
 8016b0c:	4293      	cmp	r3, r2
 8016b0e:	d013      	beq.n	8016b38 <HAL_GPIO_DeInit+0x80>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	4a54      	ldr	r2, [pc, #336]	; (8016c64 <HAL_GPIO_DeInit+0x1ac>)
 8016b14:	4293      	cmp	r3, r2
 8016b16:	d00d      	beq.n	8016b34 <HAL_GPIO_DeInit+0x7c>
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	4a53      	ldr	r2, [pc, #332]	; (8016c68 <HAL_GPIO_DeInit+0x1b0>)
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d007      	beq.n	8016b30 <HAL_GPIO_DeInit+0x78>
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	4a52      	ldr	r2, [pc, #328]	; (8016c6c <HAL_GPIO_DeInit+0x1b4>)
 8016b24:	4293      	cmp	r3, r2
 8016b26:	d101      	bne.n	8016b2c <HAL_GPIO_DeInit+0x74>
 8016b28:	2304      	movs	r3, #4
 8016b2a:	e008      	b.n	8016b3e <HAL_GPIO_DeInit+0x86>
 8016b2c:	2307      	movs	r3, #7
 8016b2e:	e006      	b.n	8016b3e <HAL_GPIO_DeInit+0x86>
 8016b30:	2303      	movs	r3, #3
 8016b32:	e004      	b.n	8016b3e <HAL_GPIO_DeInit+0x86>
 8016b34:	2302      	movs	r3, #2
 8016b36:	e002      	b.n	8016b3e <HAL_GPIO_DeInit+0x86>
 8016b38:	2301      	movs	r3, #1
 8016b3a:	e000      	b.n	8016b3e <HAL_GPIO_DeInit+0x86>
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	697a      	ldr	r2, [r7, #20]
 8016b40:	f002 0203 	and.w	r2, r2, #3
 8016b44:	0092      	lsls	r2, r2, #2
 8016b46:	4093      	lsls	r3, r2
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d136      	bne.n	8016bbc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8016b4e:	4b48      	ldr	r3, [pc, #288]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b50:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	43db      	mvns	r3, r3
 8016b58:	4945      	ldr	r1, [pc, #276]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b5a:	4013      	ands	r3, r2
 8016b5c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8016b60:	4b43      	ldr	r3, [pc, #268]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	43db      	mvns	r3, r3
 8016b6a:	4941      	ldr	r1, [pc, #260]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b6c:	4013      	ands	r3, r2
 8016b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8016b72:	4b3f      	ldr	r3, [pc, #252]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	43db      	mvns	r3, r3
 8016b7a:	493d      	ldr	r1, [pc, #244]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b7c:	4013      	ands	r3, r2
 8016b7e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8016b80:	4b3b      	ldr	r3, [pc, #236]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b82:	685a      	ldr	r2, [r3, #4]
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	43db      	mvns	r3, r3
 8016b88:	4939      	ldr	r1, [pc, #228]	; (8016c70 <HAL_GPIO_DeInit+0x1b8>)
 8016b8a:	4013      	ands	r3, r2
 8016b8c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	f003 0303 	and.w	r3, r3, #3
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	220f      	movs	r2, #15
 8016b98:	fa02 f303 	lsl.w	r3, r2, r3
 8016b9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8016b9e:	4a2f      	ldr	r2, [pc, #188]	; (8016c5c <HAL_GPIO_DeInit+0x1a4>)
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	089b      	lsrs	r3, r3, #2
 8016ba4:	3302      	adds	r3, #2
 8016ba6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	43da      	mvns	r2, r3
 8016bae:	482b      	ldr	r0, [pc, #172]	; (8016c5c <HAL_GPIO_DeInit+0x1a4>)
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	089b      	lsrs	r3, r3, #2
 8016bb4:	400a      	ands	r2, r1
 8016bb6:	3302      	adds	r3, #2
 8016bb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681a      	ldr	r2, [r3, #0]
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	005b      	lsls	r3, r3, #1
 8016bc4:	2103      	movs	r1, #3
 8016bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8016bca:	431a      	orrs	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	08da      	lsrs	r2, r3, #3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	3208      	adds	r2, #8
 8016bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	f003 0307 	and.w	r3, r3, #7
 8016be2:	009b      	lsls	r3, r3, #2
 8016be4:	220f      	movs	r2, #15
 8016be6:	fa02 f303 	lsl.w	r3, r2, r3
 8016bea:	43db      	mvns	r3, r3
 8016bec:	697a      	ldr	r2, [r7, #20]
 8016bee:	08d2      	lsrs	r2, r2, #3
 8016bf0:	4019      	ands	r1, r3
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	3208      	adds	r2, #8
 8016bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	68da      	ldr	r2, [r3, #12]
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	005b      	lsls	r3, r3, #1
 8016c02:	2103      	movs	r1, #3
 8016c04:	fa01 f303 	lsl.w	r3, r1, r3
 8016c08:	43db      	mvns	r3, r3
 8016c0a:	401a      	ands	r2, r3
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	685a      	ldr	r2, [r3, #4]
 8016c14:	2101      	movs	r1, #1
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	fa01 f303 	lsl.w	r3, r1, r3
 8016c1c:	43db      	mvns	r3, r3
 8016c1e:	401a      	ands	r2, r3
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	689a      	ldr	r2, [r3, #8]
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	005b      	lsls	r3, r3, #1
 8016c2c:	2103      	movs	r1, #3
 8016c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8016c32:	43db      	mvns	r3, r3
 8016c34:	401a      	ands	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	609a      	str	r2, [r3, #8]
    }

    position++;
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	3301      	adds	r3, #1
 8016c3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8016c40:	683a      	ldr	r2, [r7, #0]
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	fa22 f303 	lsr.w	r3, r2, r3
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f47f af3d 	bne.w	8016ac8 <HAL_GPIO_DeInit+0x10>
  }
}
 8016c4e:	bf00      	nop
 8016c50:	bf00      	nop
 8016c52:	371c      	adds	r7, #28
 8016c54:	46bd      	mov	sp, r7
 8016c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5a:	4770      	bx	lr
 8016c5c:	40010000 	.word	0x40010000
 8016c60:	48000400 	.word	0x48000400
 8016c64:	48000800 	.word	0x48000800
 8016c68:	48000c00 	.word	0x48000c00
 8016c6c:	48001000 	.word	0x48001000
 8016c70:	58000800 	.word	0x58000800

08016c74 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b085      	sub	sp, #20
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	691a      	ldr	r2, [r3, #16]
 8016c84:	887b      	ldrh	r3, [r7, #2]
 8016c86:	4013      	ands	r3, r2
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d002      	beq.n	8016c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	73fb      	strb	r3, [r7, #15]
 8016c90:	e001      	b.n	8016c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016c92:	2300      	movs	r3, #0
 8016c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3714      	adds	r7, #20
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	460b      	mov	r3, r1
 8016cae:	807b      	strh	r3, [r7, #2]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016cb4:	787b      	ldrb	r3, [r7, #1]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d003      	beq.n	8016cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8016cba:	887a      	ldrh	r2, [r7, #2]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016cc0:	e002      	b.n	8016cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016cc2:	887a      	ldrh	r2, [r7, #2]
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016cc8:	bf00      	nop
 8016cca:	370c      	adds	r7, #12
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr

08016cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d101      	bne.n	8016ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	e081      	b.n	8016dea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d106      	bne.n	8016d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f7ea fbde 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2224      	movs	r2, #36	; 0x24
 8016d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	f022 0201 	bic.w	r2, r2, #1
 8016d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	685a      	ldr	r2, [r3, #4]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016d24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	689a      	ldr	r2, [r3, #8]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016d34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	68db      	ldr	r3, [r3, #12]
 8016d3a:	2b01      	cmp	r3, #1
 8016d3c:	d107      	bne.n	8016d4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	689a      	ldr	r2, [r3, #8]
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016d4a:	609a      	str	r2, [r3, #8]
 8016d4c:	e006      	b.n	8016d5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	689a      	ldr	r2, [r3, #8]
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016d5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	68db      	ldr	r3, [r3, #12]
 8016d60:	2b02      	cmp	r3, #2
 8016d62:	d104      	bne.n	8016d6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	6812      	ldr	r2, [r2, #0]
 8016d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	68da      	ldr	r2, [r3, #12]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	691a      	ldr	r2, [r3, #16]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	695b      	ldr	r3, [r3, #20]
 8016d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	699b      	ldr	r3, [r3, #24]
 8016da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	430a      	orrs	r2, r1
 8016daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	69d9      	ldr	r1, [r3, #28]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6a1a      	ldr	r2, [r3, #32]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	430a      	orrs	r2, r1
 8016dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	f042 0201 	orr.w	r2, r2, #1
 8016dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2220      	movs	r2, #32
 8016dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2200      	movs	r2, #0
 8016de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8016de8:	2300      	movs	r3, #0
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3708      	adds	r7, #8
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8016df2:	b580      	push	{r7, lr}
 8016df4:	b082      	sub	sp, #8
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d101      	bne.n	8016e04 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8016e00:	2301      	movs	r3, #1
 8016e02:	e021      	b.n	8016e48 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2224      	movs	r2, #36	; 0x24
 8016e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f022 0201 	bic.w	r2, r2, #1
 8016e1a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f7ea fb93 	bl	8001548 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2200      	movs	r2, #0
 8016e26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2200      	movs	r2, #0
 8016e34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2200      	movs	r2, #0
 8016e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2200      	movs	r2, #0
 8016e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8016e46:	2300      	movs	r3, #0
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b088      	sub	sp, #32
 8016e54:	af02      	add	r7, sp, #8
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	607a      	str	r2, [r7, #4]
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	460b      	mov	r3, r1
 8016e5e:	817b      	strh	r3, [r7, #10]
 8016e60:	4613      	mov	r3, r2
 8016e62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	2b20      	cmp	r3, #32
 8016e6e:	f040 80da 	bne.w	8017026 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d101      	bne.n	8016e80 <HAL_I2C_Master_Transmit+0x30>
 8016e7c:	2302      	movs	r3, #2
 8016e7e:	e0d3      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2201      	movs	r2, #1
 8016e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016e88:	f7ff fb8a 	bl	80165a0 <HAL_GetTick>
 8016e8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	9300      	str	r3, [sp, #0]
 8016e92:	2319      	movs	r3, #25
 8016e94:	2201      	movs	r2, #1
 8016e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016e9a:	68f8      	ldr	r0, [r7, #12]
 8016e9c:	f000 fc76 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d001      	beq.n	8016eaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016ea6:	2301      	movs	r3, #1
 8016ea8:	e0be      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	2221      	movs	r2, #33	; 0x21
 8016eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2210      	movs	r2, #16
 8016eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	687a      	ldr	r2, [r7, #4]
 8016ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	893a      	ldrh	r2, [r7, #8]
 8016eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	2bff      	cmp	r3, #255	; 0xff
 8016eda:	d90e      	bls.n	8016efa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	22ff      	movs	r2, #255	; 0xff
 8016ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ee6:	b2da      	uxtb	r2, r3
 8016ee8:	8979      	ldrh	r1, [r7, #10]
 8016eea:	4b51      	ldr	r3, [pc, #324]	; (8017030 <HAL_I2C_Master_Transmit+0x1e0>)
 8016eec:	9300      	str	r3, [sp, #0]
 8016eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f000 fe6c 	bl	8017bd0 <I2C_TransferConfig>
 8016ef8:	e06c      	b.n	8016fd4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016efe:	b29a      	uxth	r2, r3
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f08:	b2da      	uxtb	r2, r3
 8016f0a:	8979      	ldrh	r1, [r7, #10]
 8016f0c:	4b48      	ldr	r3, [pc, #288]	; (8017030 <HAL_I2C_Master_Transmit+0x1e0>)
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016f14:	68f8      	ldr	r0, [r7, #12]
 8016f16:	f000 fe5b 	bl	8017bd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016f1a:	e05b      	b.n	8016fd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016f1c:	697a      	ldr	r2, [r7, #20]
 8016f1e:	6a39      	ldr	r1, [r7, #32]
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f000 fc73 	bl	801780c <I2C_WaitOnTXISFlagUntilTimeout>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d001      	beq.n	8016f30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e07b      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f34:	781a      	ldrb	r2, [r3, #0]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f40:	1c5a      	adds	r2, r3, #1
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	b29a      	uxth	r2, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f58:	3b01      	subs	r3, #1
 8016f5a:	b29a      	uxth	r2, r3
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f64:	b29b      	uxth	r3, r3
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d034      	beq.n	8016fd4 <HAL_I2C_Master_Transmit+0x184>
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d130      	bne.n	8016fd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	2180      	movs	r1, #128	; 0x80
 8016f7c:	68f8      	ldr	r0, [r7, #12]
 8016f7e:	f000 fc05 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8016f82:	4603      	mov	r3, r0
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d001      	beq.n	8016f8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016f88:	2301      	movs	r3, #1
 8016f8a:	e04d      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	2bff      	cmp	r3, #255	; 0xff
 8016f94:	d90e      	bls.n	8016fb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	22ff      	movs	r2, #255	; 0xff
 8016f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fa0:	b2da      	uxtb	r2, r3
 8016fa2:	8979      	ldrh	r1, [r7, #10]
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f000 fe0f 	bl	8017bd0 <I2C_TransferConfig>
 8016fb2:	e00f      	b.n	8016fd4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fc2:	b2da      	uxtb	r2, r3
 8016fc4:	8979      	ldrh	r1, [r7, #10]
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016fce:	68f8      	ldr	r0, [r7, #12]
 8016fd0:	f000 fdfe 	bl	8017bd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fd8:	b29b      	uxth	r3, r3
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d19e      	bne.n	8016f1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016fde:	697a      	ldr	r2, [r7, #20]
 8016fe0:	6a39      	ldr	r1, [r7, #32]
 8016fe2:	68f8      	ldr	r0, [r7, #12]
 8016fe4:	f000 fc52 	bl	801788c <I2C_WaitOnSTOPFlagUntilTimeout>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d001      	beq.n	8016ff2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8016fee:	2301      	movs	r3, #1
 8016ff0:	e01a      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	2220      	movs	r2, #32
 8016ff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	6859      	ldr	r1, [r3, #4]
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	4b0b      	ldr	r3, [pc, #44]	; (8017034 <HAL_I2C_Master_Transmit+0x1e4>)
 8017006:	400b      	ands	r3, r1
 8017008:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2220      	movs	r2, #32
 801700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017022:	2300      	movs	r3, #0
 8017024:	e000      	b.n	8017028 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8017026:	2302      	movs	r3, #2
  }
}
 8017028:	4618      	mov	r0, r3
 801702a:	3718      	adds	r7, #24
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}
 8017030:	80002000 	.word	0x80002000
 8017034:	fe00e800 	.word	0xfe00e800

08017038 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b088      	sub	sp, #32
 801703c:	af02      	add	r7, sp, #8
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	607a      	str	r2, [r7, #4]
 8017042:	461a      	mov	r2, r3
 8017044:	460b      	mov	r3, r1
 8017046:	817b      	strh	r3, [r7, #10]
 8017048:	4613      	mov	r3, r2
 801704a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017052:	b2db      	uxtb	r3, r3
 8017054:	2b20      	cmp	r3, #32
 8017056:	f040 80db 	bne.w	8017210 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017060:	2b01      	cmp	r3, #1
 8017062:	d101      	bne.n	8017068 <HAL_I2C_Master_Receive+0x30>
 8017064:	2302      	movs	r3, #2
 8017066:	e0d4      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2201      	movs	r2, #1
 801706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8017070:	f7ff fa96 	bl	80165a0 <HAL_GetTick>
 8017074:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	9300      	str	r3, [sp, #0]
 801707a:	2319      	movs	r3, #25
 801707c:	2201      	movs	r2, #1
 801707e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017082:	68f8      	ldr	r0, [r7, #12]
 8017084:	f000 fb82 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d001      	beq.n	8017092 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801708e:	2301      	movs	r3, #1
 8017090:	e0bf      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2222      	movs	r2, #34	; 0x22
 8017096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	2210      	movs	r2, #16
 801709e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	2200      	movs	r2, #0
 80170a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	893a      	ldrh	r2, [r7, #8]
 80170b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	2200      	movs	r2, #0
 80170b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170be:	b29b      	uxth	r3, r3
 80170c0:	2bff      	cmp	r3, #255	; 0xff
 80170c2:	d90e      	bls.n	80170e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	22ff      	movs	r2, #255	; 0xff
 80170c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170ce:	b2da      	uxtb	r2, r3
 80170d0:	8979      	ldrh	r1, [r7, #10]
 80170d2:	4b52      	ldr	r3, [pc, #328]	; (801721c <HAL_I2C_Master_Receive+0x1e4>)
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80170da:	68f8      	ldr	r0, [r7, #12]
 80170dc:	f000 fd78 	bl	8017bd0 <I2C_TransferConfig>
 80170e0:	e06d      	b.n	80171be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170e6:	b29a      	uxth	r2, r3
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	8979      	ldrh	r1, [r7, #10]
 80170f4:	4b49      	ldr	r3, [pc, #292]	; (801721c <HAL_I2C_Master_Receive+0x1e4>)
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f000 fd67 	bl	8017bd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8017102:	e05c      	b.n	80171be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017104:	697a      	ldr	r2, [r7, #20]
 8017106:	6a39      	ldr	r1, [r7, #32]
 8017108:	68f8      	ldr	r0, [r7, #12]
 801710a:	f000 fbfb 	bl	8017904 <I2C_WaitOnRXNEFlagUntilTimeout>
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d001      	beq.n	8017118 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8017114:	2301      	movs	r3, #1
 8017116:	e07c      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017122:	b2d2      	uxtb	r2, r2
 8017124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017134:	3b01      	subs	r3, #1
 8017136:	b29a      	uxth	r2, r3
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017140:	b29b      	uxth	r3, r3
 8017142:	3b01      	subs	r3, #1
 8017144:	b29a      	uxth	r2, r3
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801714e:	b29b      	uxth	r3, r3
 8017150:	2b00      	cmp	r3, #0
 8017152:	d034      	beq.n	80171be <HAL_I2C_Master_Receive+0x186>
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017158:	2b00      	cmp	r3, #0
 801715a:	d130      	bne.n	80171be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	2200      	movs	r2, #0
 8017164:	2180      	movs	r1, #128	; 0x80
 8017166:	68f8      	ldr	r0, [r7, #12]
 8017168:	f000 fb10 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 801716c:	4603      	mov	r3, r0
 801716e:	2b00      	cmp	r3, #0
 8017170:	d001      	beq.n	8017176 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8017172:	2301      	movs	r3, #1
 8017174:	e04d      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801717a:	b29b      	uxth	r3, r3
 801717c:	2bff      	cmp	r3, #255	; 0xff
 801717e:	d90e      	bls.n	801719e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	22ff      	movs	r2, #255	; 0xff
 8017184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801718a:	b2da      	uxtb	r2, r3
 801718c:	8979      	ldrh	r1, [r7, #10]
 801718e:	2300      	movs	r3, #0
 8017190:	9300      	str	r3, [sp, #0]
 8017192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f000 fd1a 	bl	8017bd0 <I2C_TransferConfig>
 801719c:	e00f      	b.n	80171be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171ac:	b2da      	uxtb	r2, r3
 80171ae:	8979      	ldrh	r1, [r7, #10]
 80171b0:	2300      	movs	r3, #0
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f000 fd09 	bl	8017bd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d19d      	bne.n	8017104 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80171c8:	697a      	ldr	r2, [r7, #20]
 80171ca:	6a39      	ldr	r1, [r7, #32]
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f000 fb5d 	bl	801788c <I2C_WaitOnSTOPFlagUntilTimeout>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80171d8:	2301      	movs	r3, #1
 80171da:	e01a      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	2220      	movs	r2, #32
 80171e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	6859      	ldr	r1, [r3, #4]
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	681a      	ldr	r2, [r3, #0]
 80171ee:	4b0c      	ldr	r3, [pc, #48]	; (8017220 <HAL_I2C_Master_Receive+0x1e8>)
 80171f0:	400b      	ands	r3, r1
 80171f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2220      	movs	r2, #32
 80171f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	2200      	movs	r2, #0
 8017200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	2200      	movs	r2, #0
 8017208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801720c:	2300      	movs	r3, #0
 801720e:	e000      	b.n	8017212 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8017210:	2302      	movs	r3, #2
  }
}
 8017212:	4618      	mov	r0, r3
 8017214:	3718      	adds	r7, #24
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop
 801721c:	80002400 	.word	0x80002400
 8017220:	fe00e800 	.word	0xfe00e800

08017224 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b088      	sub	sp, #32
 8017228:	af02      	add	r7, sp, #8
 801722a:	60f8      	str	r0, [r7, #12]
 801722c:	4608      	mov	r0, r1
 801722e:	4611      	mov	r1, r2
 8017230:	461a      	mov	r2, r3
 8017232:	4603      	mov	r3, r0
 8017234:	817b      	strh	r3, [r7, #10]
 8017236:	460b      	mov	r3, r1
 8017238:	813b      	strh	r3, [r7, #8]
 801723a:	4613      	mov	r3, r2
 801723c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b20      	cmp	r3, #32
 8017248:	f040 80fd 	bne.w	8017446 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801724c:	6a3b      	ldr	r3, [r7, #32]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d002      	beq.n	8017258 <HAL_I2C_Mem_Read+0x34>
 8017252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017254:	2b00      	cmp	r3, #0
 8017256:	d105      	bne.n	8017264 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801725e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8017260:	2301      	movs	r3, #1
 8017262:	e0f1      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801726a:	2b01      	cmp	r3, #1
 801726c:	d101      	bne.n	8017272 <HAL_I2C_Mem_Read+0x4e>
 801726e:	2302      	movs	r3, #2
 8017270:	e0ea      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	2201      	movs	r2, #1
 8017276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801727a:	f7ff f991 	bl	80165a0 <HAL_GetTick>
 801727e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	9300      	str	r3, [sp, #0]
 8017284:	2319      	movs	r3, #25
 8017286:	2201      	movs	r2, #1
 8017288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f000 fa7d 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	d001      	beq.n	801729c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8017298:	2301      	movs	r3, #1
 801729a:	e0d5      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2222      	movs	r2, #34	; 0x22
 80172a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	2240      	movs	r2, #64	; 0x40
 80172a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	2200      	movs	r2, #0
 80172b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	6a3a      	ldr	r2, [r7, #32]
 80172b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80172bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	2200      	movs	r2, #0
 80172c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80172c4:	88f8      	ldrh	r0, [r7, #6]
 80172c6:	893a      	ldrh	r2, [r7, #8]
 80172c8:	8979      	ldrh	r1, [r7, #10]
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	9301      	str	r3, [sp, #4]
 80172ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d0:	9300      	str	r3, [sp, #0]
 80172d2:	4603      	mov	r3, r0
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f000 f9e1 	bl	801769c <I2C_RequestMemoryRead>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d005      	beq.n	80172ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2200      	movs	r2, #0
 80172e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80172e8:	2301      	movs	r3, #1
 80172ea:	e0ad      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	2bff      	cmp	r3, #255	; 0xff
 80172f4:	d90e      	bls.n	8017314 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	22ff      	movs	r2, #255	; 0xff
 80172fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017300:	b2da      	uxtb	r2, r3
 8017302:	8979      	ldrh	r1, [r7, #10]
 8017304:	4b52      	ldr	r3, [pc, #328]	; (8017450 <HAL_I2C_Mem_Read+0x22c>)
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801730c:	68f8      	ldr	r0, [r7, #12]
 801730e:	f000 fc5f 	bl	8017bd0 <I2C_TransferConfig>
 8017312:	e00f      	b.n	8017334 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017318:	b29a      	uxth	r2, r3
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017322:	b2da      	uxtb	r2, r3
 8017324:	8979      	ldrh	r1, [r7, #10]
 8017326:	4b4a      	ldr	r3, [pc, #296]	; (8017450 <HAL_I2C_Mem_Read+0x22c>)
 8017328:	9300      	str	r3, [sp, #0]
 801732a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f000 fc4e 	bl	8017bd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	2200      	movs	r2, #0
 801733c:	2104      	movs	r1, #4
 801733e:	68f8      	ldr	r0, [r7, #12]
 8017340:	f000 fa24 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d001      	beq.n	801734e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801734a:	2301      	movs	r3, #1
 801734c:	e07c      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017358:	b2d2      	uxtb	r2, r2
 801735a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017360:	1c5a      	adds	r2, r3, #1
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801736a:	3b01      	subs	r3, #1
 801736c:	b29a      	uxth	r2, r3
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017376:	b29b      	uxth	r3, r3
 8017378:	3b01      	subs	r3, #1
 801737a:	b29a      	uxth	r2, r3
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017384:	b29b      	uxth	r3, r3
 8017386:	2b00      	cmp	r3, #0
 8017388:	d034      	beq.n	80173f4 <HAL_I2C_Mem_Read+0x1d0>
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801738e:	2b00      	cmp	r3, #0
 8017390:	d130      	bne.n	80173f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017398:	2200      	movs	r2, #0
 801739a:	2180      	movs	r1, #128	; 0x80
 801739c:	68f8      	ldr	r0, [r7, #12]
 801739e:	f000 f9f5 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 80173a2:	4603      	mov	r3, r0
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d001      	beq.n	80173ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80173a8:	2301      	movs	r3, #1
 80173aa:	e04d      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	2bff      	cmp	r3, #255	; 0xff
 80173b4:	d90e      	bls.n	80173d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	22ff      	movs	r2, #255	; 0xff
 80173ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	8979      	ldrh	r1, [r7, #10]
 80173c4:	2300      	movs	r3, #0
 80173c6:	9300      	str	r3, [sp, #0]
 80173c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80173cc:	68f8      	ldr	r0, [r7, #12]
 80173ce:	f000 fbff 	bl	8017bd0 <I2C_TransferConfig>
 80173d2:	e00f      	b.n	80173f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173d8:	b29a      	uxth	r2, r3
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173e2:	b2da      	uxtb	r2, r3
 80173e4:	8979      	ldrh	r1, [r7, #10]
 80173e6:	2300      	movs	r3, #0
 80173e8:	9300      	str	r3, [sp, #0]
 80173ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80173ee:	68f8      	ldr	r0, [r7, #12]
 80173f0:	f000 fbee 	bl	8017bd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d19a      	bne.n	8017334 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017402:	68f8      	ldr	r0, [r7, #12]
 8017404:	f000 fa42 	bl	801788c <I2C_WaitOnSTOPFlagUntilTimeout>
 8017408:	4603      	mov	r3, r0
 801740a:	2b00      	cmp	r3, #0
 801740c:	d001      	beq.n	8017412 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801740e:	2301      	movs	r3, #1
 8017410:	e01a      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2220      	movs	r2, #32
 8017418:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	6859      	ldr	r1, [r3, #4]
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681a      	ldr	r2, [r3, #0]
 8017424:	4b0b      	ldr	r3, [pc, #44]	; (8017454 <HAL_I2C_Mem_Read+0x230>)
 8017426:	400b      	ands	r3, r1
 8017428:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2220      	movs	r2, #32
 801742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2200      	movs	r2, #0
 8017436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2200      	movs	r2, #0
 801743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017442:	2300      	movs	r3, #0
 8017444:	e000      	b.n	8017448 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8017446:	2302      	movs	r3, #2
  }
}
 8017448:	4618      	mov	r0, r3
 801744a:	3718      	adds	r7, #24
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	80002400 	.word	0x80002400
 8017454:	fe00e800 	.word	0xfe00e800

08017458 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08a      	sub	sp, #40	; 0x28
 801745c:	af02      	add	r7, sp, #8
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	607a      	str	r2, [r7, #4]
 8017462:	603b      	str	r3, [r7, #0]
 8017464:	460b      	mov	r3, r1
 8017466:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8017468:	2300      	movs	r3, #0
 801746a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017472:	b2db      	uxtb	r3, r3
 8017474:	2b20      	cmp	r3, #32
 8017476:	f040 80f1 	bne.w	801765c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	699b      	ldr	r3, [r3, #24]
 8017480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017488:	d101      	bne.n	801748e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801748a:	2302      	movs	r3, #2
 801748c:	e0e7      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017494:	2b01      	cmp	r3, #1
 8017496:	d101      	bne.n	801749c <HAL_I2C_IsDeviceReady+0x44>
 8017498:	2302      	movs	r3, #2
 801749a:	e0e0      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2201      	movs	r2, #1
 80174a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	2224      	movs	r2, #36	; 0x24
 80174a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2200      	movs	r2, #0
 80174b0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	68db      	ldr	r3, [r3, #12]
 80174b6:	2b01      	cmp	r3, #1
 80174b8:	d107      	bne.n	80174ca <HAL_I2C_IsDeviceReady+0x72>
 80174ba:	897b      	ldrh	r3, [r7, #10]
 80174bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80174c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80174c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80174c8:	e004      	b.n	80174d4 <HAL_I2C_IsDeviceReady+0x7c>
 80174ca:	897b      	ldrh	r3, [r7, #10]
 80174cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80174d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	6812      	ldr	r2, [r2, #0]
 80174d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80174da:	f7ff f861 	bl	80165a0 <HAL_GetTick>
 80174de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	699b      	ldr	r3, [r3, #24]
 80174e6:	f003 0320 	and.w	r3, r3, #32
 80174ea:	2b20      	cmp	r3, #32
 80174ec:	bf0c      	ite	eq
 80174ee:	2301      	moveq	r3, #1
 80174f0:	2300      	movne	r3, #0
 80174f2:	b2db      	uxtb	r3, r3
 80174f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	699b      	ldr	r3, [r3, #24]
 80174fc:	f003 0310 	and.w	r3, r3, #16
 8017500:	2b10      	cmp	r3, #16
 8017502:	bf0c      	ite	eq
 8017504:	2301      	moveq	r3, #1
 8017506:	2300      	movne	r3, #0
 8017508:	b2db      	uxtb	r3, r3
 801750a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801750c:	e034      	b.n	8017578 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017514:	d01a      	beq.n	801754c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017516:	f7ff f843 	bl	80165a0 <HAL_GetTick>
 801751a:	4602      	mov	r2, r0
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	1ad3      	subs	r3, r2, r3
 8017520:	683a      	ldr	r2, [r7, #0]
 8017522:	429a      	cmp	r2, r3
 8017524:	d302      	bcc.n	801752c <HAL_I2C_IsDeviceReady+0xd4>
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d10f      	bne.n	801754c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	2220      	movs	r2, #32
 8017530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017538:	f043 0220 	orr.w	r2, r3, #32
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2200      	movs	r2, #0
 8017544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8017548:	2301      	movs	r3, #1
 801754a:	e088      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	699b      	ldr	r3, [r3, #24]
 8017552:	f003 0320 	and.w	r3, r3, #32
 8017556:	2b20      	cmp	r3, #32
 8017558:	bf0c      	ite	eq
 801755a:	2301      	moveq	r3, #1
 801755c:	2300      	movne	r3, #0
 801755e:	b2db      	uxtb	r3, r3
 8017560:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	699b      	ldr	r3, [r3, #24]
 8017568:	f003 0310 	and.w	r3, r3, #16
 801756c:	2b10      	cmp	r3, #16
 801756e:	bf0c      	ite	eq
 8017570:	2301      	moveq	r3, #1
 8017572:	2300      	movne	r3, #0
 8017574:	b2db      	uxtb	r3, r3
 8017576:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8017578:	7ffb      	ldrb	r3, [r7, #31]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d102      	bne.n	8017584 <HAL_I2C_IsDeviceReady+0x12c>
 801757e:	7fbb      	ldrb	r3, [r7, #30]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d0c4      	beq.n	801750e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	699b      	ldr	r3, [r3, #24]
 801758a:	f003 0310 	and.w	r3, r3, #16
 801758e:	2b10      	cmp	r3, #16
 8017590:	d01a      	beq.n	80175c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8017592:	69bb      	ldr	r3, [r7, #24]
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	2200      	movs	r2, #0
 801759a:	2120      	movs	r1, #32
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f000 f8f5 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d001      	beq.n	80175ac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80175a8:	2301      	movs	r3, #1
 80175aa:	e058      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	2220      	movs	r2, #32
 80175b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2220      	movs	r2, #32
 80175b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2200      	movs	r2, #0
 80175c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80175c4:	2300      	movs	r3, #0
 80175c6:	e04a      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80175c8:	69bb      	ldr	r3, [r7, #24]
 80175ca:	9300      	str	r3, [sp, #0]
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	2200      	movs	r2, #0
 80175d0:	2120      	movs	r1, #32
 80175d2:	68f8      	ldr	r0, [r7, #12]
 80175d4:	f000 f8da 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d001      	beq.n	80175e2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80175de:	2301      	movs	r3, #1
 80175e0:	e03d      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2210      	movs	r2, #16
 80175e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	2220      	movs	r2, #32
 80175f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d118      	bne.n	801762c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	685a      	ldr	r2, [r3, #4]
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017608:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	2200      	movs	r2, #0
 8017612:	2120      	movs	r1, #32
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f000 f8b9 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d001      	beq.n	8017624 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8017620:	2301      	movs	r3, #1
 8017622:	e01c      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	2220      	movs	r2, #32
 801762a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	3301      	adds	r3, #1
 8017630:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	429a      	cmp	r2, r3
 8017638:	f63f af3b 	bhi.w	80174b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	2220      	movs	r2, #32
 8017640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017648:	f043 0220 	orr.w	r2, r3, #32
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2200      	movs	r2, #0
 8017654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8017658:	2301      	movs	r3, #1
 801765a:	e000      	b.n	801765e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 801765c:	2302      	movs	r3, #2
  }
}
 801765e:	4618      	mov	r0, r3
 8017660:	3720      	adds	r7, #32
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017674:	b2db      	uxtb	r3, r3
}
 8017676:	4618      	mov	r0, r3
 8017678:	370c      	adds	r7, #12
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr

08017682 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8017682:	b480      	push	{r7}
 8017684:	b083      	sub	sp, #12
 8017686:	af00      	add	r7, sp, #0
 8017688:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 801768e:	4618      	mov	r0, r3
 8017690:	370c      	adds	r7, #12
 8017692:	46bd      	mov	sp, r7
 8017694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017698:	4770      	bx	lr
	...

0801769c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af02      	add	r7, sp, #8
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	4608      	mov	r0, r1
 80176a6:	4611      	mov	r1, r2
 80176a8:	461a      	mov	r2, r3
 80176aa:	4603      	mov	r3, r0
 80176ac:	817b      	strh	r3, [r7, #10]
 80176ae:	460b      	mov	r3, r1
 80176b0:	813b      	strh	r3, [r7, #8]
 80176b2:	4613      	mov	r3, r2
 80176b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80176b6:	88fb      	ldrh	r3, [r7, #6]
 80176b8:	b2da      	uxtb	r2, r3
 80176ba:	8979      	ldrh	r1, [r7, #10]
 80176bc:	4b20      	ldr	r3, [pc, #128]	; (8017740 <I2C_RequestMemoryRead+0xa4>)
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	2300      	movs	r3, #0
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f000 fa84 	bl	8017bd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80176c8:	69fa      	ldr	r2, [r7, #28]
 80176ca:	69b9      	ldr	r1, [r7, #24]
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f000 f89d 	bl	801780c <I2C_WaitOnTXISFlagUntilTimeout>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d001      	beq.n	80176dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80176d8:	2301      	movs	r3, #1
 80176da:	e02c      	b.n	8017736 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80176dc:	88fb      	ldrh	r3, [r7, #6]
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d105      	bne.n	80176ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80176e2:	893b      	ldrh	r3, [r7, #8]
 80176e4:	b2da      	uxtb	r2, r3
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	629a      	str	r2, [r3, #40]	; 0x28
 80176ec:	e015      	b.n	801771a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80176ee:	893b      	ldrh	r3, [r7, #8]
 80176f0:	0a1b      	lsrs	r3, r3, #8
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	b2da      	uxtb	r2, r3
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80176fc:	69fa      	ldr	r2, [r7, #28]
 80176fe:	69b9      	ldr	r1, [r7, #24]
 8017700:	68f8      	ldr	r0, [r7, #12]
 8017702:	f000 f883 	bl	801780c <I2C_WaitOnTXISFlagUntilTimeout>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d001      	beq.n	8017710 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801770c:	2301      	movs	r3, #1
 801770e:	e012      	b.n	8017736 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017710:	893b      	ldrh	r3, [r7, #8]
 8017712:	b2da      	uxtb	r2, r3
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801771a:	69fb      	ldr	r3, [r7, #28]
 801771c:	9300      	str	r3, [sp, #0]
 801771e:	69bb      	ldr	r3, [r7, #24]
 8017720:	2200      	movs	r2, #0
 8017722:	2140      	movs	r1, #64	; 0x40
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f000 f831 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 801772a:	4603      	mov	r3, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	d001      	beq.n	8017734 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8017730:	2301      	movs	r3, #1
 8017732:	e000      	b.n	8017736 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8017734:	2300      	movs	r3, #0
}
 8017736:	4618      	mov	r0, r3
 8017738:	3710      	adds	r7, #16
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}
 801773e:	bf00      	nop
 8017740:	80002000 	.word	0x80002000

08017744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017744:	b480      	push	{r7}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	699b      	ldr	r3, [r3, #24]
 8017752:	f003 0302 	and.w	r3, r3, #2
 8017756:	2b02      	cmp	r3, #2
 8017758:	d103      	bne.n	8017762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	2200      	movs	r2, #0
 8017760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	699b      	ldr	r3, [r3, #24]
 8017768:	f003 0301 	and.w	r3, r3, #1
 801776c:	2b01      	cmp	r3, #1
 801776e:	d007      	beq.n	8017780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	699a      	ldr	r2, [r3, #24]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	f042 0201 	orr.w	r2, r2, #1
 801777e:	619a      	str	r2, [r3, #24]
  }
}
 8017780:	bf00      	nop
 8017782:	370c      	adds	r7, #12
 8017784:	46bd      	mov	sp, r7
 8017786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778a:	4770      	bx	lr

0801778c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	60f8      	str	r0, [r7, #12]
 8017794:	60b9      	str	r1, [r7, #8]
 8017796:	603b      	str	r3, [r7, #0]
 8017798:	4613      	mov	r3, r2
 801779a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801779c:	e022      	b.n	80177e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177a4:	d01e      	beq.n	80177e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177a6:	f7fe fefb 	bl	80165a0 <HAL_GetTick>
 80177aa:	4602      	mov	r2, r0
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	683a      	ldr	r2, [r7, #0]
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d302      	bcc.n	80177bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d113      	bne.n	80177e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177c0:	f043 0220 	orr.w	r2, r3, #32
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	2220      	movs	r2, #32
 80177cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2200      	movs	r2, #0
 80177d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2200      	movs	r2, #0
 80177dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80177e0:	2301      	movs	r3, #1
 80177e2:	e00f      	b.n	8017804 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	699a      	ldr	r2, [r3, #24]
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	4013      	ands	r3, r2
 80177ee:	68ba      	ldr	r2, [r7, #8]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	bf0c      	ite	eq
 80177f4:	2301      	moveq	r3, #1
 80177f6:	2300      	movne	r3, #0
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	461a      	mov	r2, r3
 80177fc:	79fb      	ldrb	r3, [r7, #7]
 80177fe:	429a      	cmp	r2, r3
 8017800:	d0cd      	beq.n	801779e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017802:	2300      	movs	r3, #0
}
 8017804:	4618      	mov	r0, r3
 8017806:	3710      	adds	r7, #16
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b084      	sub	sp, #16
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017818:	e02c      	b.n	8017874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801781a:	687a      	ldr	r2, [r7, #4]
 801781c:	68b9      	ldr	r1, [r7, #8]
 801781e:	68f8      	ldr	r0, [r7, #12]
 8017820:	f000 f8ea 	bl	80179f8 <I2C_IsErrorOccurred>
 8017824:	4603      	mov	r3, r0
 8017826:	2b00      	cmp	r3, #0
 8017828:	d001      	beq.n	801782e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801782a:	2301      	movs	r3, #1
 801782c:	e02a      	b.n	8017884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017834:	d01e      	beq.n	8017874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017836:	f7fe feb3 	bl	80165a0 <HAL_GetTick>
 801783a:	4602      	mov	r2, r0
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	1ad3      	subs	r3, r2, r3
 8017840:	68ba      	ldr	r2, [r7, #8]
 8017842:	429a      	cmp	r2, r3
 8017844:	d302      	bcc.n	801784c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d113      	bne.n	8017874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017850:	f043 0220 	orr.w	r2, r3, #32
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2220      	movs	r2, #32
 801785c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	2200      	movs	r2, #0
 8017864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2200      	movs	r2, #0
 801786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8017870:	2301      	movs	r3, #1
 8017872:	e007      	b.n	8017884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	699b      	ldr	r3, [r3, #24]
 801787a:	f003 0302 	and.w	r3, r3, #2
 801787e:	2b02      	cmp	r3, #2
 8017880:	d1cb      	bne.n	801781a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017882:	2300      	movs	r3, #0
}
 8017884:	4618      	mov	r0, r3
 8017886:	3710      	adds	r7, #16
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017898:	e028      	b.n	80178ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801789a:	687a      	ldr	r2, [r7, #4]
 801789c:	68b9      	ldr	r1, [r7, #8]
 801789e:	68f8      	ldr	r0, [r7, #12]
 80178a0:	f000 f8aa 	bl	80179f8 <I2C_IsErrorOccurred>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d001      	beq.n	80178ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80178aa:	2301      	movs	r3, #1
 80178ac:	e026      	b.n	80178fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178ae:	f7fe fe77 	bl	80165a0 <HAL_GetTick>
 80178b2:	4602      	mov	r2, r0
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	1ad3      	subs	r3, r2, r3
 80178b8:	68ba      	ldr	r2, [r7, #8]
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d302      	bcc.n	80178c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d113      	bne.n	80178ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178c8:	f043 0220 	orr.w	r2, r3, #32
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	2220      	movs	r2, #32
 80178d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2200      	movs	r2, #0
 80178dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2200      	movs	r2, #0
 80178e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e007      	b.n	80178fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	f003 0320 	and.w	r3, r3, #32
 80178f6:	2b20      	cmp	r3, #32
 80178f8:	d1cf      	bne.n	801789a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80178fa:	2300      	movs	r3, #0
}
 80178fc:	4618      	mov	r0, r3
 80178fe:	3710      	adds	r7, #16
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b084      	sub	sp, #16
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017910:	e064      	b.n	80179dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	68b9      	ldr	r1, [r7, #8]
 8017916:	68f8      	ldr	r0, [r7, #12]
 8017918:	f000 f86e 	bl	80179f8 <I2C_IsErrorOccurred>
 801791c:	4603      	mov	r3, r0
 801791e:	2b00      	cmp	r3, #0
 8017920:	d001      	beq.n	8017926 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017922:	2301      	movs	r3, #1
 8017924:	e062      	b.n	80179ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	699b      	ldr	r3, [r3, #24]
 801792c:	f003 0320 	and.w	r3, r3, #32
 8017930:	2b20      	cmp	r3, #32
 8017932:	d138      	bne.n	80179a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	699b      	ldr	r3, [r3, #24]
 801793a:	f003 0304 	and.w	r3, r3, #4
 801793e:	2b04      	cmp	r3, #4
 8017940:	d105      	bne.n	801794e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017946:	2b00      	cmp	r3, #0
 8017948:	d001      	beq.n	801794e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801794a:	2300      	movs	r3, #0
 801794c:	e04e      	b.n	80179ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	699b      	ldr	r3, [r3, #24]
 8017954:	f003 0310 	and.w	r3, r3, #16
 8017958:	2b10      	cmp	r3, #16
 801795a:	d107      	bne.n	801796c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2210      	movs	r2, #16
 8017962:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	2204      	movs	r2, #4
 8017968:	645a      	str	r2, [r3, #68]	; 0x44
 801796a:	e002      	b.n	8017972 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	2200      	movs	r2, #0
 8017970:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2220      	movs	r2, #32
 8017978:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	6859      	ldr	r1, [r3, #4]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	4b1b      	ldr	r3, [pc, #108]	; (80179f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8017986:	400b      	ands	r3, r1
 8017988:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	2220      	movs	r2, #32
 801798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	2200      	movs	r2, #0
 8017996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	2200      	movs	r2, #0
 801799e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80179a2:	2301      	movs	r3, #1
 80179a4:	e022      	b.n	80179ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179a6:	f7fe fdfb 	bl	80165a0 <HAL_GetTick>
 80179aa:	4602      	mov	r2, r0
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	1ad3      	subs	r3, r2, r3
 80179b0:	68ba      	ldr	r2, [r7, #8]
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d302      	bcc.n	80179bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d10f      	bne.n	80179dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c0:	f043 0220 	orr.w	r2, r3, #32
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2220      	movs	r2, #32
 80179cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	2200      	movs	r2, #0
 80179d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80179d8:	2301      	movs	r3, #1
 80179da:	e007      	b.n	80179ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	699b      	ldr	r3, [r3, #24]
 80179e2:	f003 0304 	and.w	r3, r3, #4
 80179e6:	2b04      	cmp	r3, #4
 80179e8:	d193      	bne.n	8017912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80179ea:	2300      	movs	r3, #0
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	fe00e800 	.word	0xfe00e800

080179f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b08a      	sub	sp, #40	; 0x28
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017a04:	2300      	movs	r3, #0
 8017a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	699b      	ldr	r3, [r3, #24]
 8017a10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017a12:	2300      	movs	r3, #0
 8017a14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017a1a:	69bb      	ldr	r3, [r7, #24]
 8017a1c:	f003 0310 	and.w	r3, r3, #16
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d075      	beq.n	8017b10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2210      	movs	r2, #16
 8017a2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017a2c:	e056      	b.n	8017adc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a34:	d052      	beq.n	8017adc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017a36:	f7fe fdb3 	bl	80165a0 <HAL_GetTick>
 8017a3a:	4602      	mov	r2, r0
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	1ad3      	subs	r3, r2, r3
 8017a40:	68ba      	ldr	r2, [r7, #8]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d302      	bcc.n	8017a4c <I2C_IsErrorOccurred+0x54>
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d147      	bne.n	8017adc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017a56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	699b      	ldr	r3, [r3, #24]
 8017a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017a6e:	d12e      	bne.n	8017ace <I2C_IsErrorOccurred+0xd6>
 8017a70:	697b      	ldr	r3, [r7, #20]
 8017a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017a76:	d02a      	beq.n	8017ace <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8017a78:	7cfb      	ldrb	r3, [r7, #19]
 8017a7a:	2b20      	cmp	r3, #32
 8017a7c:	d027      	beq.n	8017ace <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	685a      	ldr	r2, [r3, #4]
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017a8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017a8e:	f7fe fd87 	bl	80165a0 <HAL_GetTick>
 8017a92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017a94:	e01b      	b.n	8017ace <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017a96:	f7fe fd83 	bl	80165a0 <HAL_GetTick>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	1ad3      	subs	r3, r2, r3
 8017aa0:	2b19      	cmp	r3, #25
 8017aa2:	d914      	bls.n	8017ace <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aa8:	f043 0220 	orr.w	r2, r3, #32
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2220      	movs	r2, #32
 8017ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2200      	movs	r2, #0
 8017abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	699b      	ldr	r3, [r3, #24]
 8017ad4:	f003 0320 	and.w	r3, r3, #32
 8017ad8:	2b20      	cmp	r3, #32
 8017ada:	d1dc      	bne.n	8017a96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	699b      	ldr	r3, [r3, #24]
 8017ae2:	f003 0320 	and.w	r3, r3, #32
 8017ae6:	2b20      	cmp	r3, #32
 8017ae8:	d003      	beq.n	8017af2 <I2C_IsErrorOccurred+0xfa>
 8017aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d09d      	beq.n	8017a2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d103      	bne.n	8017b02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	2220      	movs	r2, #32
 8017b00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017b02:	6a3b      	ldr	r3, [r7, #32]
 8017b04:	f043 0304 	orr.w	r3, r3, #4
 8017b08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	699b      	ldr	r3, [r3, #24]
 8017b16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d00b      	beq.n	8017b3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017b22:	6a3b      	ldr	r3, [r7, #32]
 8017b24:	f043 0301 	orr.w	r3, r3, #1
 8017b28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b34:	2301      	movs	r3, #1
 8017b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017b3a:	69bb      	ldr	r3, [r7, #24]
 8017b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d00b      	beq.n	8017b5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017b44:	6a3b      	ldr	r3, [r7, #32]
 8017b46:	f043 0308 	orr.w	r3, r3, #8
 8017b4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b56:	2301      	movs	r3, #1
 8017b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017b5c:	69bb      	ldr	r3, [r7, #24]
 8017b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d00b      	beq.n	8017b7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017b66:	6a3b      	ldr	r3, [r7, #32]
 8017b68:	f043 0302 	orr.w	r3, r3, #2
 8017b6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b78:	2301      	movs	r3, #1
 8017b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8017b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d01c      	beq.n	8017bc0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017b86:	68f8      	ldr	r0, [r7, #12]
 8017b88:	f7ff fddc 	bl	8017744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	6859      	ldr	r1, [r3, #4]
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	4b0d      	ldr	r3, [pc, #52]	; (8017bcc <I2C_IsErrorOccurred+0x1d4>)
 8017b98:	400b      	ands	r3, r1
 8017b9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ba0:	6a3b      	ldr	r3, [r7, #32]
 8017ba2:	431a      	orrs	r2, r3
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2220      	movs	r2, #32
 8017bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8017bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3728      	adds	r7, #40	; 0x28
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	fe00e800 	.word	0xfe00e800

08017bd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b087      	sub	sp, #28
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	607b      	str	r3, [r7, #4]
 8017bda:	460b      	mov	r3, r1
 8017bdc:	817b      	strh	r3, [r7, #10]
 8017bde:	4613      	mov	r3, r2
 8017be0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017be2:	897b      	ldrh	r3, [r7, #10]
 8017be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017be8:	7a7b      	ldrb	r3, [r7, #9]
 8017bea:	041b      	lsls	r3, r3, #16
 8017bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017bf0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017bf6:	6a3b      	ldr	r3, [r7, #32]
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017bfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	685a      	ldr	r2, [r3, #4]
 8017c06:	6a3b      	ldr	r3, [r7, #32]
 8017c08:	0d5b      	lsrs	r3, r3, #21
 8017c0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8017c0e:	4b08      	ldr	r3, [pc, #32]	; (8017c30 <I2C_TransferConfig+0x60>)
 8017c10:	430b      	orrs	r3, r1
 8017c12:	43db      	mvns	r3, r3
 8017c14:	ea02 0103 	and.w	r1, r2, r3
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	697a      	ldr	r2, [r7, #20]
 8017c1e:	430a      	orrs	r2, r1
 8017c20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017c22:	bf00      	nop
 8017c24:	371c      	adds	r7, #28
 8017c26:	46bd      	mov	sp, r7
 8017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop
 8017c30:	03ff63ff 	.word	0x03ff63ff

08017c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	2b20      	cmp	r3, #32
 8017c48:	d138      	bne.n	8017cbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d101      	bne.n	8017c58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017c54:	2302      	movs	r3, #2
 8017c56:	e032      	b.n	8017cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2201      	movs	r2, #1
 8017c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2224      	movs	r2, #36	; 0x24
 8017c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	681a      	ldr	r2, [r3, #0]
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	f022 0201 	bic.w	r2, r2, #1
 8017c76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8017c86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	6819      	ldr	r1, [r3, #0]
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	683a      	ldr	r2, [r7, #0]
 8017c94:	430a      	orrs	r2, r1
 8017c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f042 0201 	orr.w	r2, r2, #1
 8017ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	2220      	movs	r2, #32
 8017cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017cb8:	2300      	movs	r3, #0
 8017cba:	e000      	b.n	8017cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017cbc:	2302      	movs	r3, #2
  }
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017cca:	b480      	push	{r7}
 8017ccc:	b085      	sub	sp, #20
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
 8017cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017cda:	b2db      	uxtb	r3, r3
 8017cdc:	2b20      	cmp	r3, #32
 8017cde:	d139      	bne.n	8017d54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d101      	bne.n	8017cee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017cea:	2302      	movs	r3, #2
 8017cec:	e033      	b.n	8017d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2201      	movs	r2, #1
 8017cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2224      	movs	r2, #36	; 0x24
 8017cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	681a      	ldr	r2, [r3, #0]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	f022 0201 	bic.w	r2, r2, #1
 8017d0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8017d1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	021b      	lsls	r3, r3, #8
 8017d22:	68fa      	ldr	r2, [r7, #12]
 8017d24:	4313      	orrs	r3, r2
 8017d26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	68fa      	ldr	r2, [r7, #12]
 8017d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	f042 0201 	orr.w	r2, r2, #1
 8017d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2220      	movs	r2, #32
 8017d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017d50:	2300      	movs	r3, #0
 8017d52:	e000      	b.n	8017d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017d54:	2302      	movs	r3, #2
  }
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	3714      	adds	r7, #20
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d60:	4770      	bx	lr

08017d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d64:	b08b      	sub	sp, #44	; 0x2c
 8017d66:	af06      	add	r7, sp, #24
 8017d68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d101      	bne.n	8017d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017d70:	2301      	movs	r3, #1
 8017d72:	e0cb      	b.n	8017f0c <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d106      	bne.n	8017d8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2200      	movs	r2, #0
 8017d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f7ea fb9d 	bl	80024c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2203      	movs	r2, #3
 8017d92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f002 fed0 	bl	801ab40 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017da0:	2300      	movs	r3, #0
 8017da2:	73fb      	strb	r3, [r7, #15]
 8017da4:	e040      	b.n	8017e28 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017da6:	7bfb      	ldrb	r3, [r7, #15]
 8017da8:	6879      	ldr	r1, [r7, #4]
 8017daa:	1c5a      	adds	r2, r3, #1
 8017dac:	4613      	mov	r3, r2
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	4413      	add	r3, r2
 8017db2:	00db      	lsls	r3, r3, #3
 8017db4:	440b      	add	r3, r1
 8017db6:	3301      	adds	r3, #1
 8017db8:	2201      	movs	r2, #1
 8017dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017dbc:	7bfb      	ldrb	r3, [r7, #15]
 8017dbe:	6879      	ldr	r1, [r7, #4]
 8017dc0:	1c5a      	adds	r2, r3, #1
 8017dc2:	4613      	mov	r3, r2
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	4413      	add	r3, r2
 8017dc8:	00db      	lsls	r3, r3, #3
 8017dca:	440b      	add	r3, r1
 8017dcc:	7bfa      	ldrb	r2, [r7, #15]
 8017dce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017dd0:	7bfb      	ldrb	r3, [r7, #15]
 8017dd2:	6879      	ldr	r1, [r7, #4]
 8017dd4:	1c5a      	adds	r2, r3, #1
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	009b      	lsls	r3, r3, #2
 8017dda:	4413      	add	r3, r2
 8017ddc:	00db      	lsls	r3, r3, #3
 8017dde:	440b      	add	r3, r1
 8017de0:	3303      	adds	r3, #3
 8017de2:	2200      	movs	r2, #0
 8017de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017de6:	7bfa      	ldrb	r2, [r7, #15]
 8017de8:	6879      	ldr	r1, [r7, #4]
 8017dea:	4613      	mov	r3, r2
 8017dec:	009b      	lsls	r3, r3, #2
 8017dee:	4413      	add	r3, r2
 8017df0:	00db      	lsls	r3, r3, #3
 8017df2:	440b      	add	r3, r1
 8017df4:	3338      	adds	r3, #56	; 0x38
 8017df6:	2200      	movs	r2, #0
 8017df8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017dfa:	7bfa      	ldrb	r2, [r7, #15]
 8017dfc:	6879      	ldr	r1, [r7, #4]
 8017dfe:	4613      	mov	r3, r2
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	4413      	add	r3, r2
 8017e04:	00db      	lsls	r3, r3, #3
 8017e06:	440b      	add	r3, r1
 8017e08:	333c      	adds	r3, #60	; 0x3c
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017e0e:	7bfa      	ldrb	r2, [r7, #15]
 8017e10:	6879      	ldr	r1, [r7, #4]
 8017e12:	4613      	mov	r3, r2
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	4413      	add	r3, r2
 8017e18:	00db      	lsls	r3, r3, #3
 8017e1a:	440b      	add	r3, r1
 8017e1c:	3340      	adds	r3, #64	; 0x40
 8017e1e:	2200      	movs	r2, #0
 8017e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017e22:	7bfb      	ldrb	r3, [r7, #15]
 8017e24:	3301      	adds	r3, #1
 8017e26:	73fb      	strb	r3, [r7, #15]
 8017e28:	7bfa      	ldrb	r2, [r7, #15]
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d3b9      	bcc.n	8017da6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017e32:	2300      	movs	r3, #0
 8017e34:	73fb      	strb	r3, [r7, #15]
 8017e36:	e044      	b.n	8017ec2 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017e38:	7bfa      	ldrb	r2, [r7, #15]
 8017e3a:	6879      	ldr	r1, [r7, #4]
 8017e3c:	4613      	mov	r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	4413      	add	r3, r2
 8017e42:	00db      	lsls	r3, r3, #3
 8017e44:	440b      	add	r3, r1
 8017e46:	f203 1369 	addw	r3, r3, #361	; 0x169
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017e4e:	7bfa      	ldrb	r2, [r7, #15]
 8017e50:	6879      	ldr	r1, [r7, #4]
 8017e52:	4613      	mov	r3, r2
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	4413      	add	r3, r2
 8017e58:	00db      	lsls	r3, r3, #3
 8017e5a:	440b      	add	r3, r1
 8017e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017e60:	7bfa      	ldrb	r2, [r7, #15]
 8017e62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017e64:	7bfa      	ldrb	r2, [r7, #15]
 8017e66:	6879      	ldr	r1, [r7, #4]
 8017e68:	4613      	mov	r3, r2
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	4413      	add	r3, r2
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	440b      	add	r3, r1
 8017e72:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8017e76:	2200      	movs	r2, #0
 8017e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017e7a:	7bfa      	ldrb	r2, [r7, #15]
 8017e7c:	6879      	ldr	r1, [r7, #4]
 8017e7e:	4613      	mov	r3, r2
 8017e80:	009b      	lsls	r3, r3, #2
 8017e82:	4413      	add	r3, r2
 8017e84:	00db      	lsls	r3, r3, #3
 8017e86:	440b      	add	r3, r1
 8017e88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017e90:	7bfa      	ldrb	r2, [r7, #15]
 8017e92:	6879      	ldr	r1, [r7, #4]
 8017e94:	4613      	mov	r3, r2
 8017e96:	009b      	lsls	r3, r3, #2
 8017e98:	4413      	add	r3, r2
 8017e9a:	00db      	lsls	r3, r3, #3
 8017e9c:	440b      	add	r3, r1
 8017e9e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017ea6:	7bfa      	ldrb	r2, [r7, #15]
 8017ea8:	6879      	ldr	r1, [r7, #4]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	4413      	add	r3, r2
 8017eb0:	00db      	lsls	r3, r3, #3
 8017eb2:	440b      	add	r3, r1
 8017eb4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8017eb8:	2200      	movs	r2, #0
 8017eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017ebc:	7bfb      	ldrb	r3, [r7, #15]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	73fb      	strb	r3, [r7, #15]
 8017ec2:	7bfa      	ldrb	r2, [r7, #15]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d3b5      	bcc.n	8017e38 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	603b      	str	r3, [r7, #0]
 8017ed2:	687e      	ldr	r6, [r7, #4]
 8017ed4:	466d      	mov	r5, sp
 8017ed6:	f106 0410 	add.w	r4, r6, #16
 8017eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	602b      	str	r3, [r5, #0]
 8017ee2:	1d33      	adds	r3, r6, #4
 8017ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017ee6:	6838      	ldr	r0, [r7, #0]
 8017ee8:	f002 fe45 	bl	801ab76 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2200      	movs	r2, #0
 8017ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2201      	movs	r2, #1
 8017ef8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	69db      	ldr	r3, [r3, #28]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d102      	bne.n	8017f0a <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f000 f805 	bl	8017f14 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8017f0a:	2300      	movs	r3, #0
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3714      	adds	r7, #20
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8017f14:	b480      	push	{r7}
 8017f16:	b085      	sub	sp, #20
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2201      	movs	r2, #1
 8017f26:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	f043 0301 	orr.w	r3, r3, #1
 8017f3e:	b29a      	uxth	r2, r3
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	f043 0302 	orr.w	r3, r3, #2
 8017f52:	b29a      	uxth	r2, r3
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8017f5a:	2300      	movs	r3, #0
}
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	3714      	adds	r7, #20
 8017f60:	46bd      	mov	sp, r7
 8017f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f66:	4770      	bx	lr

08017f68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017f68:	b480      	push	{r7}
 8017f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017f6c:	4b05      	ldr	r3, [pc, #20]	; (8017f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	4a04      	ldr	r2, [pc, #16]	; (8017f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017f76:	6013      	str	r3, [r2, #0]
}
 8017f78:	bf00      	nop
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr
 8017f82:	bf00      	nop
 8017f84:	58000400 	.word	0x58000400

08017f88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017f88:	b480      	push	{r7}
 8017f8a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017f8c:	4b04      	ldr	r3, [pc, #16]	; (8017fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	58000400 	.word	0x58000400

08017fa4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8017fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017fb6:	d101      	bne.n	8017fbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	e000      	b.n	8017fbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8017fbc:	2300      	movs	r3, #0
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc6:	4770      	bx	lr

08017fc8 <LL_RCC_HSE_Enable>:
{
 8017fc8:	b480      	push	{r7}
 8017fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8017fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017fda:	6013      	str	r3, [r2, #0]
}
 8017fdc:	bf00      	nop
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr

08017fe6 <LL_RCC_HSE_Disable>:
{
 8017fe6:	b480      	push	{r7}
 8017fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8017fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ff8:	6013      	str	r3, [r2, #0]
}
 8017ffa:	bf00      	nop
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018002:	4770      	bx	lr

08018004 <LL_RCC_HSE_IsReady>:
{
 8018004:	b480      	push	{r7}
 8018006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8018008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018016:	d101      	bne.n	801801c <LL_RCC_HSE_IsReady+0x18>
 8018018:	2301      	movs	r3, #1
 801801a:	e000      	b.n	801801e <LL_RCC_HSE_IsReady+0x1a>
 801801c:	2300      	movs	r3, #0
}
 801801e:	4618      	mov	r0, r3
 8018020:	46bd      	mov	sp, r7
 8018022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018026:	4770      	bx	lr

08018028 <LL_RCC_HSI_Enable>:
{
 8018028:	b480      	push	{r7}
 801802a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801802c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801803a:	6013      	str	r3, [r2, #0]
}
 801803c:	bf00      	nop
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr

08018046 <LL_RCC_HSI_Disable>:
{
 8018046:	b480      	push	{r7}
 8018048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018058:	6013      	str	r3, [r2, #0]
}
 801805a:	bf00      	nop
 801805c:	46bd      	mov	sp, r7
 801805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018062:	4770      	bx	lr

08018064 <LL_RCC_HSI_IsReady>:
{
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8018068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018076:	d101      	bne.n	801807c <LL_RCC_HSI_IsReady+0x18>
 8018078:	2301      	movs	r3, #1
 801807a:	e000      	b.n	801807e <LL_RCC_HSI_IsReady+0x1a>
 801807c:	2300      	movs	r3, #0
}
 801807e:	4618      	mov	r0, r3
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr

08018088 <LL_RCC_HSI_SetCalibTrimming>:
{
 8018088:	b480      	push	{r7}
 801808a:	b083      	sub	sp, #12
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8018090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	061b      	lsls	r3, r3, #24
 801809e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180a2:	4313      	orrs	r3, r2
 80180a4:	604b      	str	r3, [r1, #4]
}
 80180a6:	bf00      	nop
 80180a8:	370c      	adds	r7, #12
 80180aa:	46bd      	mov	sp, r7
 80180ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b0:	4770      	bx	lr

080180b2 <LL_RCC_HSI48_Enable>:
{
 80180b2:	b480      	push	{r7}
 80180b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80180b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80180c2:	f043 0301 	orr.w	r3, r3, #1
 80180c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80180ca:	bf00      	nop
 80180cc:	46bd      	mov	sp, r7
 80180ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d2:	4770      	bx	lr

080180d4 <LL_RCC_HSI48_Disable>:
{
 80180d4:	b480      	push	{r7}
 80180d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80180d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80180e4:	f023 0301 	bic.w	r3, r3, #1
 80180e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80180ec:	bf00      	nop
 80180ee:	46bd      	mov	sp, r7
 80180f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f4:	4770      	bx	lr

080180f6 <LL_RCC_HSI48_IsReady>:
{
 80180f6:	b480      	push	{r7}
 80180f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80180fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018102:	f003 0302 	and.w	r3, r3, #2
 8018106:	2b02      	cmp	r3, #2
 8018108:	d101      	bne.n	801810e <LL_RCC_HSI48_IsReady+0x18>
 801810a:	2301      	movs	r3, #1
 801810c:	e000      	b.n	8018110 <LL_RCC_HSI48_IsReady+0x1a>
 801810e:	2300      	movs	r3, #0
}
 8018110:	4618      	mov	r0, r3
 8018112:	46bd      	mov	sp, r7
 8018114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018118:	4770      	bx	lr

0801811a <LL_RCC_LSE_Enable>:
{
 801811a:	b480      	push	{r7}
 801811c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801811e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801812a:	f043 0301 	orr.w	r3, r3, #1
 801812e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018132:	bf00      	nop
 8018134:	46bd      	mov	sp, r7
 8018136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813a:	4770      	bx	lr

0801813c <LL_RCC_LSE_Disable>:
{
 801813c:	b480      	push	{r7}
 801813e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8018140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801814c:	f023 0301 	bic.w	r3, r3, #1
 8018150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018154:	bf00      	nop
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr

0801815e <LL_RCC_LSE_EnableBypass>:
{
 801815e:	b480      	push	{r7}
 8018160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8018162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801816a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801816e:	f043 0304 	orr.w	r3, r3, #4
 8018172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018176:	bf00      	nop
 8018178:	46bd      	mov	sp, r7
 801817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817e:	4770      	bx	lr

08018180 <LL_RCC_LSE_DisableBypass>:
{
 8018180:	b480      	push	{r7}
 8018182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8018184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801818c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018190:	f023 0304 	bic.w	r3, r3, #4
 8018194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018198:	bf00      	nop
 801819a:	46bd      	mov	sp, r7
 801819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a0:	4770      	bx	lr

080181a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80181a2:	b480      	push	{r7}
 80181a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80181a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181ae:	f003 0302 	and.w	r3, r3, #2
 80181b2:	2b02      	cmp	r3, #2
 80181b4:	d101      	bne.n	80181ba <LL_RCC_LSE_IsReady+0x18>
 80181b6:	2301      	movs	r3, #1
 80181b8:	e000      	b.n	80181bc <LL_RCC_LSE_IsReady+0x1a>
 80181ba:	2300      	movs	r3, #0
}
 80181bc:	4618      	mov	r0, r3
 80181be:	46bd      	mov	sp, r7
 80181c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c4:	4770      	bx	lr

080181c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80181c6:	b480      	push	{r7}
 80181c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80181ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80181d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181d6:	f043 0301 	orr.w	r3, r3, #1
 80181da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80181de:	bf00      	nop
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80181e8:	b480      	push	{r7}
 80181ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80181ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80181f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181f8:	f023 0301 	bic.w	r3, r3, #1
 80181fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018200:	bf00      	nop
 8018202:	46bd      	mov	sp, r7
 8018204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018208:	4770      	bx	lr

0801820a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801820a:	b480      	push	{r7}
 801820c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801820e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018216:	f003 0302 	and.w	r3, r3, #2
 801821a:	2b02      	cmp	r3, #2
 801821c:	d101      	bne.n	8018222 <LL_RCC_LSI1_IsReady+0x18>
 801821e:	2301      	movs	r3, #1
 8018220:	e000      	b.n	8018224 <LL_RCC_LSI1_IsReady+0x1a>
 8018222:	2300      	movs	r3, #0
}
 8018224:	4618      	mov	r0, r3
 8018226:	46bd      	mov	sp, r7
 8018228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822c:	4770      	bx	lr

0801822e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801822e:	b480      	push	{r7}
 8018230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801823a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801823e:	f043 0304 	orr.w	r3, r3, #4
 8018242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018246:	bf00      	nop
 8018248:	46bd      	mov	sp, r7
 801824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824e:	4770      	bx	lr

08018250 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8018250:	b480      	push	{r7}
 8018252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801825c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018260:	f023 0304 	bic.w	r3, r3, #4
 8018264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018268:	bf00      	nop
 801826a:	46bd      	mov	sp, r7
 801826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018270:	4770      	bx	lr

08018272 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8018272:	b480      	push	{r7}
 8018274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8018276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801827a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801827e:	f003 0308 	and.w	r3, r3, #8
 8018282:	2b08      	cmp	r3, #8
 8018284:	d101      	bne.n	801828a <LL_RCC_LSI2_IsReady+0x18>
 8018286:	2301      	movs	r3, #1
 8018288:	e000      	b.n	801828c <LL_RCC_LSI2_IsReady+0x1a>
 801828a:	2300      	movs	r3, #0
}
 801828c:	4618      	mov	r0, r3
 801828e:	46bd      	mov	sp, r7
 8018290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018294:	4770      	bx	lr

08018296 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8018296:	b480      	push	{r7}
 8018298:	b083      	sub	sp, #12
 801829a:	af00      	add	r7, sp, #0
 801829c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801829e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80182a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	021b      	lsls	r3, r3, #8
 80182ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182b2:	4313      	orrs	r3, r2
 80182b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80182b8:	bf00      	nop
 80182ba:	370c      	adds	r7, #12
 80182bc:	46bd      	mov	sp, r7
 80182be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c2:	4770      	bx	lr

080182c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80182c4:	b480      	push	{r7}
 80182c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80182c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80182d2:	f043 0301 	orr.w	r3, r3, #1
 80182d6:	6013      	str	r3, [r2, #0]
}
 80182d8:	bf00      	nop
 80182da:	46bd      	mov	sp, r7
 80182dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e0:	4770      	bx	lr

080182e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80182e2:	b480      	push	{r7}
 80182e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80182e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80182f0:	f023 0301 	bic.w	r3, r3, #1
 80182f4:	6013      	str	r3, [r2, #0]
}
 80182f6:	bf00      	nop
 80182f8:	46bd      	mov	sp, r7
 80182fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fe:	4770      	bx	lr

08018300 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8018300:	b480      	push	{r7}
 8018302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8018304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	f003 0302 	and.w	r3, r3, #2
 801830e:	2b02      	cmp	r3, #2
 8018310:	d101      	bne.n	8018316 <LL_RCC_MSI_IsReady+0x16>
 8018312:	2301      	movs	r3, #1
 8018314:	e000      	b.n	8018318 <LL_RCC_MSI_IsReady+0x18>
 8018316:	2300      	movs	r3, #0
}
 8018318:	4618      	mov	r0, r3
 801831a:	46bd      	mov	sp, r7
 801831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018320:	4770      	bx	lr

08018322 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8018322:	b480      	push	{r7}
 8018324:	b083      	sub	sp, #12
 8018326:	af00      	add	r7, sp, #0
 8018328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801832a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	4313      	orrs	r3, r2
 801833c:	600b      	str	r3, [r1, #0]
}
 801833e:	bf00      	nop
 8018340:	370c      	adds	r7, #12
 8018342:	46bd      	mov	sp, r7
 8018344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018348:	4770      	bx	lr

0801834a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801834a:	b480      	push	{r7}
 801834c:	b083      	sub	sp, #12
 801834e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8018350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801835a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2bb0      	cmp	r3, #176	; 0xb0
 8018360:	d901      	bls.n	8018366 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8018362:	23b0      	movs	r3, #176	; 0xb0
 8018364:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8018366:	687b      	ldr	r3, [r7, #4]
}
 8018368:	4618      	mov	r0, r3
 801836a:	370c      	adds	r7, #12
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr

08018374 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8018374:	b480      	push	{r7}
 8018376:	b083      	sub	sp, #12
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801837c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	021b      	lsls	r3, r3, #8
 801838a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801838e:	4313      	orrs	r3, r2
 8018390:	604b      	str	r3, [r1, #4]
}
 8018392:	bf00      	nop
 8018394:	370c      	adds	r7, #12
 8018396:	46bd      	mov	sp, r7
 8018398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839c:	4770      	bx	lr

0801839e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 801839e:	b480      	push	{r7}
 80183a0:	b083      	sub	sp, #12
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80183a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183aa:	689b      	ldr	r3, [r3, #8]
 80183ac:	f023 0203 	bic.w	r2, r3, #3
 80183b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	4313      	orrs	r3, r2
 80183b8:	608b      	str	r3, [r1, #8]
}
 80183ba:	bf00      	nop
 80183bc:	370c      	adds	r7, #12
 80183be:	46bd      	mov	sp, r7
 80183c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c4:	4770      	bx	lr

080183c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80183c6:	b480      	push	{r7}
 80183c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80183ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183ce:	689b      	ldr	r3, [r3, #8]
 80183d0:	f003 030c 	and.w	r3, r3, #12
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr

080183de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80183de:	b480      	push	{r7}
 80183e0:	b083      	sub	sp, #12
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80183e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183ea:	689b      	ldr	r3, [r3, #8]
 80183ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80183f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	4313      	orrs	r3, r2
 80183f8:	608b      	str	r3, [r1, #8]
}
 80183fa:	bf00      	nop
 80183fc:	370c      	adds	r7, #12
 80183fe:	46bd      	mov	sp, r7
 8018400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018404:	4770      	bx	lr

08018406 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8018406:	b480      	push	{r7}
 8018408:	b083      	sub	sp, #12
 801840a:	af00      	add	r7, sp, #0
 801840c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801840e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801841a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	4313      	orrs	r3, r2
 8018422:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8018426:	bf00      	nop
 8018428:	370c      	adds	r7, #12
 801842a:	46bd      	mov	sp, r7
 801842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018430:	4770      	bx	lr

08018432 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8018432:	b480      	push	{r7}
 8018434:	b083      	sub	sp, #12
 8018436:	af00      	add	r7, sp, #0
 8018438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801843a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801843e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018442:	f023 020f 	bic.w	r2, r3, #15
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	091b      	lsrs	r3, r3, #4
 801844a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801844e:	4313      	orrs	r3, r2
 8018450:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8018454:	bf00      	nop
 8018456:	370c      	adds	r7, #12
 8018458:	46bd      	mov	sp, r7
 801845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845e:	4770      	bx	lr

08018460 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8018460:	b480      	push	{r7}
 8018462:	b083      	sub	sp, #12
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8018468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801846c:	689b      	ldr	r3, [r3, #8]
 801846e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	4313      	orrs	r3, r2
 801847a:	608b      	str	r3, [r1, #8]
}
 801847c:	bf00      	nop
 801847e:	370c      	adds	r7, #12
 8018480:	46bd      	mov	sp, r7
 8018482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018486:	4770      	bx	lr

08018488 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8018488:	b480      	push	{r7}
 801848a:	b083      	sub	sp, #12
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8018490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018494:	689b      	ldr	r3, [r3, #8]
 8018496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801849a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	4313      	orrs	r3, r2
 80184a2:	608b      	str	r3, [r1, #8]
}
 80184a4:	bf00      	nop
 80184a6:	370c      	adds	r7, #12
 80184a8:	46bd      	mov	sp, r7
 80184aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ae:	4770      	bx	lr

080184b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80184b0:	b480      	push	{r7}
 80184b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80184b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184b8:	689b      	ldr	r3, [r3, #8]
 80184ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80184be:	4618      	mov	r0, r3
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80184c8:	b480      	push	{r7}
 80184ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80184cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80184d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80184d8:	4618      	mov	r0, r3
 80184da:	46bd      	mov	sp, r7
 80184dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e0:	4770      	bx	lr

080184e2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80184e2:	b480      	push	{r7}
 80184e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80184e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80184ee:	011b      	lsls	r3, r3, #4
 80184f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	46bd      	mov	sp, r7
 80184f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fc:	4770      	bx	lr

080184fe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80184fe:	b480      	push	{r7}
 8018500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8018502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018506:	689b      	ldr	r3, [r3, #8]
 8018508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801850c:	4618      	mov	r0, r3
 801850e:	46bd      	mov	sp, r7
 8018510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018514:	4770      	bx	lr

08018516 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8018516:	b480      	push	{r7}
 8018518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801851a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801851e:	689b      	ldr	r3, [r3, #8]
 8018520:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8018524:	4618      	mov	r0, r3
 8018526:	46bd      	mov	sp, r7
 8018528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852c:	4770      	bx	lr

0801852e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801852e:	b480      	push	{r7}
 8018530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8018532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801853c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018540:	6013      	str	r3, [r2, #0]
}
 8018542:	bf00      	nop
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr

0801854c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801854c:	b480      	push	{r7}
 801854e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8018550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801855a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801855e:	6013      	str	r3, [r2, #0]
}
 8018560:	bf00      	nop
 8018562:	46bd      	mov	sp, r7
 8018564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018568:	4770      	bx	lr

0801856a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801856a:	b480      	push	{r7}
 801856c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801856e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801857c:	d101      	bne.n	8018582 <LL_RCC_PLL_IsReady+0x18>
 801857e:	2301      	movs	r3, #1
 8018580:	e000      	b.n	8018584 <LL_RCC_PLL_IsReady+0x1a>
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr

0801858e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801858e:	b480      	push	{r7}
 8018590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8018592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	0a1b      	lsrs	r3, r3, #8
 801859a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801859e:	4618      	mov	r0, r3
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80185a8:	b480      	push	{r7}
 80185aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80185ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80185c0:	b480      	push	{r7}
 80185c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80185c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185c8:	68db      	ldr	r3, [r3, #12]
 80185ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr

080185d8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80185d8:	b480      	push	{r7}
 80185da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80185dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185e0:	68db      	ldr	r3, [r3, #12]
 80185e2:	f003 0303 	and.w	r3, r3, #3
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	46bd      	mov	sp, r7
 80185ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ee:	4770      	bx	lr

080185f0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80185f0:	b480      	push	{r7}
 80185f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80185f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80185fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018602:	d101      	bne.n	8018608 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8018604:	2301      	movs	r3, #1
 8018606:	e000      	b.n	801860a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8018608:	2300      	movs	r3, #0
}
 801860a:	4618      	mov	r0, r3
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr

08018614 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8018614:	b480      	push	{r7}
 8018616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8018618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801861c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018628:	d101      	bne.n	801862e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801862a:	2301      	movs	r3, #1
 801862c:	e000      	b.n	8018630 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801862e:	2300      	movs	r3, #0
}
 8018630:	4618      	mov	r0, r3
 8018632:	46bd      	mov	sp, r7
 8018634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018638:	4770      	bx	lr

0801863a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801863a:	b480      	push	{r7}
 801863c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801863e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018642:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801864a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801864e:	d101      	bne.n	8018654 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8018650:	2301      	movs	r3, #1
 8018652:	e000      	b.n	8018656 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8018654:	2300      	movs	r3, #0
}
 8018656:	4618      	mov	r0, r3
 8018658:	46bd      	mov	sp, r7
 801865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865e:	4770      	bx	lr

08018660 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8018660:	b480      	push	{r7}
 8018662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8018664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018668:	689b      	ldr	r3, [r3, #8]
 801866a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801866e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018672:	d101      	bne.n	8018678 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8018674:	2301      	movs	r3, #1
 8018676:	e000      	b.n	801867a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8018678:	2300      	movs	r3, #0
}
 801867a:	4618      	mov	r0, r3
 801867c:	46bd      	mov	sp, r7
 801867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018682:	4770      	bx	lr

08018684 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8018684:	b480      	push	{r7}
 8018686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8018688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801868c:	689b      	ldr	r3, [r3, #8]
 801868e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8018696:	d101      	bne.n	801869c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8018698:	2301      	movs	r3, #1
 801869a:	e000      	b.n	801869e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801869c:	2300      	movs	r3, #0
}
 801869e:	4618      	mov	r0, r3
 80186a0:	46bd      	mov	sp, r7
 80186a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a6:	4770      	bx	lr

080186a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80186a8:	b590      	push	{r4, r7, lr}
 80186aa:	b08d      	sub	sp, #52	; 0x34
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d101      	bne.n	80186ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80186b6:	2301      	movs	r3, #1
 80186b8:	e363      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	f003 0320 	and.w	r3, r3, #32
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	f000 808d 	beq.w	80187e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80186c8:	f7ff fe7d 	bl	80183c6 <LL_RCC_GetSysClkSource>
 80186cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80186ce:	f7ff ff83 	bl	80185d8 <LL_RCC_PLL_GetMainSource>
 80186d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80186d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d005      	beq.n	80186e6 <HAL_RCC_OscConfig+0x3e>
 80186da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186dc:	2b0c      	cmp	r3, #12
 80186de:	d147      	bne.n	8018770 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80186e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e2:	2b01      	cmp	r3, #1
 80186e4:	d144      	bne.n	8018770 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	69db      	ldr	r3, [r3, #28]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d101      	bne.n	80186f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80186ee:	2301      	movs	r3, #1
 80186f0:	e347      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80186f6:	f7ff fe28 	bl	801834a <LL_RCC_MSI_GetRange>
 80186fa:	4603      	mov	r3, r0
 80186fc:	429c      	cmp	r4, r3
 80186fe:	d914      	bls.n	801872a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018704:	4618      	mov	r0, r3
 8018706:	f000 fd61 	bl	80191cc <RCC_SetFlashLatencyFromMSIRange>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d001      	beq.n	8018714 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8018710:	2301      	movs	r3, #1
 8018712:	e336      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018718:	4618      	mov	r0, r3
 801871a:	f7ff fe02 	bl	8018322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6a1b      	ldr	r3, [r3, #32]
 8018722:	4618      	mov	r0, r3
 8018724:	f7ff fe26 	bl	8018374 <LL_RCC_MSI_SetCalibTrimming>
 8018728:	e013      	b.n	8018752 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872e:	4618      	mov	r0, r3
 8018730:	f7ff fdf7 	bl	8018322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6a1b      	ldr	r3, [r3, #32]
 8018738:	4618      	mov	r0, r3
 801873a:	f7ff fe1b 	bl	8018374 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018742:	4618      	mov	r0, r3
 8018744:	f000 fd42 	bl	80191cc <RCC_SetFlashLatencyFromMSIRange>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	d001      	beq.n	8018752 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801874e:	2301      	movs	r3, #1
 8018750:	e317      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018752:	f000 fcc9 	bl	80190e8 <HAL_RCC_GetHCLKFreq>
 8018756:	4603      	mov	r3, r0
 8018758:	4aa4      	ldr	r2, [pc, #656]	; (80189ec <HAL_RCC_OscConfig+0x344>)
 801875a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801875c:	4ba4      	ldr	r3, [pc, #656]	; (80189f0 <HAL_RCC_OscConfig+0x348>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	4618      	mov	r0, r3
 8018762:	f7e9 fa6b 	bl	8001c3c <HAL_InitTick>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	d039      	beq.n	80187e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801876c:	2301      	movs	r3, #1
 801876e:	e308      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	69db      	ldr	r3, [r3, #28]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d01e      	beq.n	80187b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8018778:	f7ff fda4 	bl	80182c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801877c:	f7fd ff10 	bl	80165a0 <HAL_GetTick>
 8018780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8018782:	e008      	b.n	8018796 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018784:	f7fd ff0c 	bl	80165a0 <HAL_GetTick>
 8018788:	4602      	mov	r2, r0
 801878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878c:	1ad3      	subs	r3, r2, r3
 801878e:	2b02      	cmp	r3, #2
 8018790:	d901      	bls.n	8018796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8018792:	2303      	movs	r3, #3
 8018794:	e2f5      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8018796:	f7ff fdb3 	bl	8018300 <LL_RCC_MSI_IsReady>
 801879a:	4603      	mov	r3, r0
 801879c:	2b00      	cmp	r3, #0
 801879e:	d0f1      	beq.n	8018784 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ff fdbc 	bl	8018322 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6a1b      	ldr	r3, [r3, #32]
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7ff fde0 	bl	8018374 <LL_RCC_MSI_SetCalibTrimming>
 80187b4:	e015      	b.n	80187e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80187b6:	f7ff fd94 	bl	80182e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80187ba:	f7fd fef1 	bl	80165a0 <HAL_GetTick>
 80187be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80187c0:	e008      	b.n	80187d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80187c2:	f7fd feed 	bl	80165a0 <HAL_GetTick>
 80187c6:	4602      	mov	r2, r0
 80187c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ca:	1ad3      	subs	r3, r2, r3
 80187cc:	2b02      	cmp	r3, #2
 80187ce:	d901      	bls.n	80187d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80187d0:	2303      	movs	r3, #3
 80187d2:	e2d6      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80187d4:	f7ff fd94 	bl	8018300 <LL_RCC_MSI_IsReady>
 80187d8:	4603      	mov	r3, r0
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d1f1      	bne.n	80187c2 <HAL_RCC_OscConfig+0x11a>
 80187de:	e000      	b.n	80187e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80187e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f003 0301 	and.w	r3, r3, #1
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d047      	beq.n	801887e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80187ee:	f7ff fdea 	bl	80183c6 <LL_RCC_GetSysClkSource>
 80187f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80187f4:	f7ff fef0 	bl	80185d8 <LL_RCC_PLL_GetMainSource>
 80187f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80187fa:	6a3b      	ldr	r3, [r7, #32]
 80187fc:	2b08      	cmp	r3, #8
 80187fe:	d005      	beq.n	801880c <HAL_RCC_OscConfig+0x164>
 8018800:	6a3b      	ldr	r3, [r7, #32]
 8018802:	2b0c      	cmp	r3, #12
 8018804:	d108      	bne.n	8018818 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8018806:	69fb      	ldr	r3, [r7, #28]
 8018808:	2b03      	cmp	r3, #3
 801880a:	d105      	bne.n	8018818 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d134      	bne.n	801887e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8018814:	2301      	movs	r3, #1
 8018816:	e2b4      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	685b      	ldr	r3, [r3, #4]
 801881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018820:	d102      	bne.n	8018828 <HAL_RCC_OscConfig+0x180>
 8018822:	f7ff fbd1 	bl	8017fc8 <LL_RCC_HSE_Enable>
 8018826:	e001      	b.n	801882c <HAL_RCC_OscConfig+0x184>
 8018828:	f7ff fbdd 	bl	8017fe6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	685b      	ldr	r3, [r3, #4]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d012      	beq.n	801885a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018834:	f7fd feb4 	bl	80165a0 <HAL_GetTick>
 8018838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801883a:	e008      	b.n	801884e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801883c:	f7fd feb0 	bl	80165a0 <HAL_GetTick>
 8018840:	4602      	mov	r2, r0
 8018842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	2b64      	cmp	r3, #100	; 0x64
 8018848:	d901      	bls.n	801884e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801884a:	2303      	movs	r3, #3
 801884c:	e299      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801884e:	f7ff fbd9 	bl	8018004 <LL_RCC_HSE_IsReady>
 8018852:	4603      	mov	r3, r0
 8018854:	2b00      	cmp	r3, #0
 8018856:	d0f1      	beq.n	801883c <HAL_RCC_OscConfig+0x194>
 8018858:	e011      	b.n	801887e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801885a:	f7fd fea1 	bl	80165a0 <HAL_GetTick>
 801885e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8018860:	e008      	b.n	8018874 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018862:	f7fd fe9d 	bl	80165a0 <HAL_GetTick>
 8018866:	4602      	mov	r2, r0
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	1ad3      	subs	r3, r2, r3
 801886c:	2b64      	cmp	r3, #100	; 0x64
 801886e:	d901      	bls.n	8018874 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8018870:	2303      	movs	r3, #3
 8018872:	e286      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8018874:	f7ff fbc6 	bl	8018004 <LL_RCC_HSE_IsReady>
 8018878:	4603      	mov	r3, r0
 801887a:	2b00      	cmp	r3, #0
 801887c:	d1f1      	bne.n	8018862 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	f003 0302 	and.w	r3, r3, #2
 8018886:	2b00      	cmp	r3, #0
 8018888:	d04c      	beq.n	8018924 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801888a:	f7ff fd9c 	bl	80183c6 <LL_RCC_GetSysClkSource>
 801888e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8018890:	f7ff fea2 	bl	80185d8 <LL_RCC_PLL_GetMainSource>
 8018894:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8018896:	69bb      	ldr	r3, [r7, #24]
 8018898:	2b04      	cmp	r3, #4
 801889a:	d005      	beq.n	80188a8 <HAL_RCC_OscConfig+0x200>
 801889c:	69bb      	ldr	r3, [r7, #24]
 801889e:	2b0c      	cmp	r3, #12
 80188a0:	d10e      	bne.n	80188c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	2b02      	cmp	r3, #2
 80188a6:	d10b      	bne.n	80188c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	68db      	ldr	r3, [r3, #12]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d101      	bne.n	80188b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80188b0:	2301      	movs	r3, #1
 80188b2:	e266      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	691b      	ldr	r3, [r3, #16]
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7ff fbe5 	bl	8018088 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80188be:	e031      	b.n	8018924 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d019      	beq.n	80188fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80188c8:	f7ff fbae 	bl	8018028 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80188cc:	f7fd fe68 	bl	80165a0 <HAL_GetTick>
 80188d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80188d2:	e008      	b.n	80188e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80188d4:	f7fd fe64 	bl	80165a0 <HAL_GetTick>
 80188d8:	4602      	mov	r2, r0
 80188da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188dc:	1ad3      	subs	r3, r2, r3
 80188de:	2b02      	cmp	r3, #2
 80188e0:	d901      	bls.n	80188e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80188e2:	2303      	movs	r3, #3
 80188e4:	e24d      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80188e6:	f7ff fbbd 	bl	8018064 <LL_RCC_HSI_IsReady>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d0f1      	beq.n	80188d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	691b      	ldr	r3, [r3, #16]
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7ff fbc7 	bl	8018088 <LL_RCC_HSI_SetCalibTrimming>
 80188fa:	e013      	b.n	8018924 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80188fc:	f7ff fba3 	bl	8018046 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018900:	f7fd fe4e 	bl	80165a0 <HAL_GetTick>
 8018904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8018906:	e008      	b.n	801891a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018908:	f7fd fe4a 	bl	80165a0 <HAL_GetTick>
 801890c:	4602      	mov	r2, r0
 801890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018910:	1ad3      	subs	r3, r2, r3
 8018912:	2b02      	cmp	r3, #2
 8018914:	d901      	bls.n	801891a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8018916:	2303      	movs	r3, #3
 8018918:	e233      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801891a:	f7ff fba3 	bl	8018064 <LL_RCC_HSI_IsReady>
 801891e:	4603      	mov	r3, r0
 8018920:	2b00      	cmp	r3, #0
 8018922:	d1f1      	bne.n	8018908 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f003 0308 	and.w	r3, r3, #8
 801892c:	2b00      	cmp	r3, #0
 801892e:	d106      	bne.n	801893e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8018938:	2b00      	cmp	r3, #0
 801893a:	f000 80a3 	beq.w	8018a84 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	695b      	ldr	r3, [r3, #20]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d076      	beq.n	8018a34 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f003 0310 	and.w	r3, r3, #16
 801894e:	2b00      	cmp	r3, #0
 8018950:	d046      	beq.n	80189e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8018952:	f7ff fc5a 	bl	801820a <LL_RCC_LSI1_IsReady>
 8018956:	4603      	mov	r3, r0
 8018958:	2b00      	cmp	r3, #0
 801895a:	d113      	bne.n	8018984 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801895c:	f7ff fc33 	bl	80181c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018960:	f7fd fe1e 	bl	80165a0 <HAL_GetTick>
 8018964:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8018966:	e008      	b.n	801897a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018968:	f7fd fe1a 	bl	80165a0 <HAL_GetTick>
 801896c:	4602      	mov	r2, r0
 801896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018970:	1ad3      	subs	r3, r2, r3
 8018972:	2b02      	cmp	r3, #2
 8018974:	d901      	bls.n	801897a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8018976:	2303      	movs	r3, #3
 8018978:	e203      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801897a:	f7ff fc46 	bl	801820a <LL_RCC_LSI1_IsReady>
 801897e:	4603      	mov	r3, r0
 8018980:	2b00      	cmp	r3, #0
 8018982:	d0f1      	beq.n	8018968 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8018984:	f7ff fc53 	bl	801822e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018988:	f7fd fe0a 	bl	80165a0 <HAL_GetTick>
 801898c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801898e:	e008      	b.n	80189a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018990:	f7fd fe06 	bl	80165a0 <HAL_GetTick>
 8018994:	4602      	mov	r2, r0
 8018996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	2b03      	cmp	r3, #3
 801899c:	d901      	bls.n	80189a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801899e:	2303      	movs	r3, #3
 80189a0:	e1ef      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80189a2:	f7ff fc66 	bl	8018272 <LL_RCC_LSI2_IsReady>
 80189a6:	4603      	mov	r3, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d0f1      	beq.n	8018990 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	699b      	ldr	r3, [r3, #24]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7ff fc70 	bl	8018296 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80189b6:	f7ff fc17 	bl	80181e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189ba:	f7fd fdf1 	bl	80165a0 <HAL_GetTick>
 80189be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80189c0:	e008      	b.n	80189d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80189c2:	f7fd fded 	bl	80165a0 <HAL_GetTick>
 80189c6:	4602      	mov	r2, r0
 80189c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ca:	1ad3      	subs	r3, r2, r3
 80189cc:	2b02      	cmp	r3, #2
 80189ce:	d901      	bls.n	80189d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80189d0:	2303      	movs	r3, #3
 80189d2:	e1d6      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80189d4:	f7ff fc19 	bl	801820a <LL_RCC_LSI1_IsReady>
 80189d8:	4603      	mov	r3, r0
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d1f1      	bne.n	80189c2 <HAL_RCC_OscConfig+0x31a>
 80189de:	e051      	b.n	8018a84 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80189e0:	f7ff fbf1 	bl	80181c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189e4:	f7fd fddc 	bl	80165a0 <HAL_GetTick>
 80189e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80189ea:	e00c      	b.n	8018a06 <HAL_RCC_OscConfig+0x35e>
 80189ec:	20000008 	.word	0x20000008
 80189f0:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80189f4:	f7fd fdd4 	bl	80165a0 <HAL_GetTick>
 80189f8:	4602      	mov	r2, r0
 80189fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fc:	1ad3      	subs	r3, r2, r3
 80189fe:	2b02      	cmp	r3, #2
 8018a00:	d901      	bls.n	8018a06 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8018a02:	2303      	movs	r3, #3
 8018a04:	e1bd      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8018a06:	f7ff fc00 	bl	801820a <LL_RCC_LSI1_IsReady>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d0f1      	beq.n	80189f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8018a10:	f7ff fc1e 	bl	8018250 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018a14:	e008      	b.n	8018a28 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018a16:	f7fd fdc3 	bl	80165a0 <HAL_GetTick>
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a1e:	1ad3      	subs	r3, r2, r3
 8018a20:	2b03      	cmp	r3, #3
 8018a22:	d901      	bls.n	8018a28 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8018a24:	2303      	movs	r3, #3
 8018a26:	e1ac      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018a28:	f7ff fc23 	bl	8018272 <LL_RCC_LSI2_IsReady>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d1f1      	bne.n	8018a16 <HAL_RCC_OscConfig+0x36e>
 8018a32:	e027      	b.n	8018a84 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8018a34:	f7ff fc0c 	bl	8018250 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a38:	f7fd fdb2 	bl	80165a0 <HAL_GetTick>
 8018a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8018a3e:	e008      	b.n	8018a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018a40:	f7fd fdae 	bl	80165a0 <HAL_GetTick>
 8018a44:	4602      	mov	r2, r0
 8018a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a48:	1ad3      	subs	r3, r2, r3
 8018a4a:	2b03      	cmp	r3, #3
 8018a4c:	d901      	bls.n	8018a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8018a4e:	2303      	movs	r3, #3
 8018a50:	e197      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8018a52:	f7ff fc0e 	bl	8018272 <LL_RCC_LSI2_IsReady>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d1f1      	bne.n	8018a40 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8018a5c:	f7ff fbc4 	bl	80181e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a60:	f7fd fd9e 	bl	80165a0 <HAL_GetTick>
 8018a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8018a66:	e008      	b.n	8018a7a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018a68:	f7fd fd9a 	bl	80165a0 <HAL_GetTick>
 8018a6c:	4602      	mov	r2, r0
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a70:	1ad3      	subs	r3, r2, r3
 8018a72:	2b02      	cmp	r3, #2
 8018a74:	d901      	bls.n	8018a7a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8018a76:	2303      	movs	r3, #3
 8018a78:	e183      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8018a7a:	f7ff fbc6 	bl	801820a <LL_RCC_LSI1_IsReady>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d1f1      	bne.n	8018a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	f003 0304 	and.w	r3, r3, #4
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d05b      	beq.n	8018b48 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018a90:	4ba7      	ldr	r3, [pc, #668]	; (8018d30 <HAL_RCC_OscConfig+0x688>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d114      	bne.n	8018ac6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8018a9c:	f7ff fa64 	bl	8017f68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018aa0:	f7fd fd7e 	bl	80165a0 <HAL_GetTick>
 8018aa4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018aa6:	e008      	b.n	8018aba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018aa8:	f7fd fd7a 	bl	80165a0 <HAL_GetTick>
 8018aac:	4602      	mov	r2, r0
 8018aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab0:	1ad3      	subs	r3, r2, r3
 8018ab2:	2b02      	cmp	r3, #2
 8018ab4:	d901      	bls.n	8018aba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8018ab6:	2303      	movs	r3, #3
 8018ab8:	e163      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018aba:	4b9d      	ldr	r3, [pc, #628]	; (8018d30 <HAL_RCC_OscConfig+0x688>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d0f0      	beq.n	8018aa8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	689b      	ldr	r3, [r3, #8]
 8018aca:	2b01      	cmp	r3, #1
 8018acc:	d102      	bne.n	8018ad4 <HAL_RCC_OscConfig+0x42c>
 8018ace:	f7ff fb24 	bl	801811a <LL_RCC_LSE_Enable>
 8018ad2:	e00c      	b.n	8018aee <HAL_RCC_OscConfig+0x446>
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	689b      	ldr	r3, [r3, #8]
 8018ad8:	2b05      	cmp	r3, #5
 8018ada:	d104      	bne.n	8018ae6 <HAL_RCC_OscConfig+0x43e>
 8018adc:	f7ff fb3f 	bl	801815e <LL_RCC_LSE_EnableBypass>
 8018ae0:	f7ff fb1b 	bl	801811a <LL_RCC_LSE_Enable>
 8018ae4:	e003      	b.n	8018aee <HAL_RCC_OscConfig+0x446>
 8018ae6:	f7ff fb29 	bl	801813c <LL_RCC_LSE_Disable>
 8018aea:	f7ff fb49 	bl	8018180 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d014      	beq.n	8018b20 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018af6:	f7fd fd53 	bl	80165a0 <HAL_GetTick>
 8018afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8018afc:	e00a      	b.n	8018b14 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018afe:	f7fd fd4f 	bl	80165a0 <HAL_GetTick>
 8018b02:	4602      	mov	r2, r0
 8018b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b06:	1ad3      	subs	r3, r2, r3
 8018b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b0c:	4293      	cmp	r3, r2
 8018b0e:	d901      	bls.n	8018b14 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8018b10:	2303      	movs	r3, #3
 8018b12:	e136      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8018b14:	f7ff fb45 	bl	80181a2 <LL_RCC_LSE_IsReady>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d0ef      	beq.n	8018afe <HAL_RCC_OscConfig+0x456>
 8018b1e:	e013      	b.n	8018b48 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b20:	f7fd fd3e 	bl	80165a0 <HAL_GetTick>
 8018b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8018b26:	e00a      	b.n	8018b3e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018b28:	f7fd fd3a 	bl	80165a0 <HAL_GetTick>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b30:	1ad3      	subs	r3, r2, r3
 8018b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b36:	4293      	cmp	r3, r2
 8018b38:	d901      	bls.n	8018b3e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8018b3a:	2303      	movs	r3, #3
 8018b3c:	e121      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8018b3e:	f7ff fb30 	bl	80181a2 <LL_RCC_LSE_IsReady>
 8018b42:	4603      	mov	r3, r0
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d1ef      	bne.n	8018b28 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d02c      	beq.n	8018bae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d014      	beq.n	8018b86 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8018b5c:	f7ff faa9 	bl	80180b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b60:	f7fd fd1e 	bl	80165a0 <HAL_GetTick>
 8018b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8018b66:	e008      	b.n	8018b7a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018b68:	f7fd fd1a 	bl	80165a0 <HAL_GetTick>
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	1ad3      	subs	r3, r2, r3
 8018b72:	2b02      	cmp	r3, #2
 8018b74:	d901      	bls.n	8018b7a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8018b76:	2303      	movs	r3, #3
 8018b78:	e103      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8018b7a:	f7ff fabc 	bl	80180f6 <LL_RCC_HSI48_IsReady>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d0f1      	beq.n	8018b68 <HAL_RCC_OscConfig+0x4c0>
 8018b84:	e013      	b.n	8018bae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018b86:	f7ff faa5 	bl	80180d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b8a:	f7fd fd09 	bl	80165a0 <HAL_GetTick>
 8018b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8018b90:	e008      	b.n	8018ba4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018b92:	f7fd fd05 	bl	80165a0 <HAL_GetTick>
 8018b96:	4602      	mov	r2, r0
 8018b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9a:	1ad3      	subs	r3, r2, r3
 8018b9c:	2b02      	cmp	r3, #2
 8018b9e:	d901      	bls.n	8018ba4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8018ba0:	2303      	movs	r3, #3
 8018ba2:	e0ee      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8018ba4:	f7ff faa7 	bl	80180f6 <LL_RCC_HSI48_IsReady>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d1f1      	bne.n	8018b92 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	f000 80e4 	beq.w	8018d80 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018bb8:	f7ff fc05 	bl	80183c6 <LL_RCC_GetSysClkSource>
 8018bbc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8018bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018bc2:	68db      	ldr	r3, [r3, #12]
 8018bc4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bca:	2b02      	cmp	r3, #2
 8018bcc:	f040 80b4 	bne.w	8018d38 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	f003 0203 	and.w	r2, r3, #3
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d123      	bne.n	8018c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d11c      	bne.n	8018c26 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	0a1b      	lsrs	r3, r3, #8
 8018bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d114      	bne.n	8018c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d10d      	bne.n	8018c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d106      	bne.n	8018c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018c22:	429a      	cmp	r2, r3
 8018c24:	d05d      	beq.n	8018ce2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	2b0c      	cmp	r3, #12
 8018c2a:	d058      	beq.n	8018cde <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8018c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d001      	beq.n	8018c3e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8018c3a:	2301      	movs	r3, #1
 8018c3c:	e0a1      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8018c3e:	f7ff fc85 	bl	801854c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018c42:	f7fd fcad 	bl	80165a0 <HAL_GetTick>
 8018c46:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018c48:	e008      	b.n	8018c5c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018c4a:	f7fd fca9 	bl	80165a0 <HAL_GetTick>
 8018c4e:	4602      	mov	r2, r0
 8018c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c52:	1ad3      	subs	r3, r2, r3
 8018c54:	2b02      	cmp	r3, #2
 8018c56:	d901      	bls.n	8018c5c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8018c58:	2303      	movs	r3, #3
 8018c5a:	e092      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d1ef      	bne.n	8018c4a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c6e:	68da      	ldr	r2, [r3, #12]
 8018c70:	4b30      	ldr	r3, [pc, #192]	; (8018d34 <HAL_RCC_OscConfig+0x68c>)
 8018c72:	4013      	ands	r3, r2
 8018c74:	687a      	ldr	r2, [r7, #4]
 8018c76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018c78:	687a      	ldr	r2, [r7, #4]
 8018c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018c7c:	4311      	orrs	r1, r2
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018c82:	0212      	lsls	r2, r2, #8
 8018c84:	4311      	orrs	r1, r2
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8018c8a:	4311      	orrs	r1, r2
 8018c8c:	687a      	ldr	r2, [r7, #4]
 8018c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018c90:	4311      	orrs	r1, r2
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8018c96:	430a      	orrs	r2, r1
 8018c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018c9c:	4313      	orrs	r3, r2
 8018c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8018ca0:	f7ff fc45 	bl	801852e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ca8:	68db      	ldr	r3, [r3, #12]
 8018caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018cb4:	f7fd fc74 	bl	80165a0 <HAL_GetTick>
 8018cb8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018cba:	e008      	b.n	8018cce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018cbc:	f7fd fc70 	bl	80165a0 <HAL_GetTick>
 8018cc0:	4602      	mov	r2, r0
 8018cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cc4:	1ad3      	subs	r3, r2, r3
 8018cc6:	2b02      	cmp	r3, #2
 8018cc8:	d901      	bls.n	8018cce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8018cca:	2303      	movs	r3, #3
 8018ccc:	e059      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d0ef      	beq.n	8018cbc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018cdc:	e050      	b.n	8018d80 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8018cde:	2301      	movs	r3, #1
 8018ce0:	e04f      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d147      	bne.n	8018d80 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8018cf0:	f7ff fc1d 	bl	801852e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018d04:	f7fd fc4c 	bl	80165a0 <HAL_GetTick>
 8018d08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018d0a:	e008      	b.n	8018d1e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d0c:	f7fd fc48 	bl	80165a0 <HAL_GetTick>
 8018d10:	4602      	mov	r2, r0
 8018d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d14:	1ad3      	subs	r3, r2, r3
 8018d16:	2b02      	cmp	r3, #2
 8018d18:	d901      	bls.n	8018d1e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8018d1a:	2303      	movs	r3, #3
 8018d1c:	e031      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d0ef      	beq.n	8018d0c <HAL_RCC_OscConfig+0x664>
 8018d2c:	e028      	b.n	8018d80 <HAL_RCC_OscConfig+0x6d8>
 8018d2e:	bf00      	nop
 8018d30:	58000400 	.word	0x58000400
 8018d34:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018d38:	693b      	ldr	r3, [r7, #16]
 8018d3a:	2b0c      	cmp	r3, #12
 8018d3c:	d01e      	beq.n	8018d7c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018d3e:	f7ff fc05 	bl	801854c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d42:	f7fd fc2d 	bl	80165a0 <HAL_GetTick>
 8018d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018d48:	e008      	b.n	8018d5c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d4a:	f7fd fc29 	bl	80165a0 <HAL_GetTick>
 8018d4e:	4602      	mov	r2, r0
 8018d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d52:	1ad3      	subs	r3, r2, r3
 8018d54:	2b02      	cmp	r3, #2
 8018d56:	d901      	bls.n	8018d5c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8018d58:	2303      	movs	r3, #3
 8018d5a:	e012      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d1ef      	bne.n	8018d4a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8018d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d6e:	68da      	ldr	r2, [r3, #12]
 8018d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018d74:	4b05      	ldr	r3, [pc, #20]	; (8018d8c <HAL_RCC_OscConfig+0x6e4>)
 8018d76:	4013      	ands	r3, r2
 8018d78:	60cb      	str	r3, [r1, #12]
 8018d7a:	e001      	b.n	8018d80 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	e000      	b.n	8018d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8018d80:	2300      	movs	r3, #0
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	3734      	adds	r7, #52	; 0x34
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd90      	pop	{r4, r7, pc}
 8018d8a:	bf00      	nop
 8018d8c:	eefefffc 	.word	0xeefefffc

08018d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b084      	sub	sp, #16
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
 8018d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d101      	bne.n	8018da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018da0:	2301      	movs	r3, #1
 8018da2:	e12d      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018da4:	4b98      	ldr	r3, [pc, #608]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	f003 0307 	and.w	r3, r3, #7
 8018dac:	683a      	ldr	r2, [r7, #0]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d91b      	bls.n	8018dea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018db2:	4b95      	ldr	r3, [pc, #596]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f023 0207 	bic.w	r2, r3, #7
 8018dba:	4993      	ldr	r1, [pc, #588]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018dbc:	683b      	ldr	r3, [r7, #0]
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018dc2:	f7fd fbed 	bl	80165a0 <HAL_GetTick>
 8018dc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018dc8:	e008      	b.n	8018ddc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018dca:	f7fd fbe9 	bl	80165a0 <HAL_GetTick>
 8018dce:	4602      	mov	r2, r0
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	1ad3      	subs	r3, r2, r3
 8018dd4:	2b02      	cmp	r3, #2
 8018dd6:	d901      	bls.n	8018ddc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8018dd8:	2303      	movs	r3, #3
 8018dda:	e111      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018ddc:	4b8a      	ldr	r3, [pc, #552]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f003 0307 	and.w	r3, r3, #7
 8018de4:	683a      	ldr	r2, [r7, #0]
 8018de6:	429a      	cmp	r2, r3
 8018de8:	d1ef      	bne.n	8018dca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	f003 0302 	and.w	r3, r3, #2
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d016      	beq.n	8018e24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	689b      	ldr	r3, [r3, #8]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7ff faef 	bl	80183de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e00:	f7fd fbce 	bl	80165a0 <HAL_GetTick>
 8018e04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018e06:	e008      	b.n	8018e1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018e08:	f7fd fbca 	bl	80165a0 <HAL_GetTick>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	1ad3      	subs	r3, r2, r3
 8018e12:	2b02      	cmp	r3, #2
 8018e14:	d901      	bls.n	8018e1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8018e16:	2303      	movs	r3, #3
 8018e18:	e0f2      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018e1a:	f7ff fbe9 	bl	80185f0 <LL_RCC_IsActiveFlag_HPRE>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d0f1      	beq.n	8018e08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	f003 0320 	and.w	r3, r3, #32
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d016      	beq.n	8018e5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	695b      	ldr	r3, [r3, #20]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7ff fae6 	bl	8018406 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e3a:	f7fd fbb1 	bl	80165a0 <HAL_GetTick>
 8018e3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018e40:	e008      	b.n	8018e54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018e42:	f7fd fbad 	bl	80165a0 <HAL_GetTick>
 8018e46:	4602      	mov	r2, r0
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	1ad3      	subs	r3, r2, r3
 8018e4c:	2b02      	cmp	r3, #2
 8018e4e:	d901      	bls.n	8018e54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e0d5      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018e54:	f7ff fbde 	bl	8018614 <LL_RCC_IsActiveFlag_C2HPRE>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d0f1      	beq.n	8018e42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d016      	beq.n	8018e98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	699b      	ldr	r3, [r3, #24]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7ff fadf 	bl	8018432 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e74:	f7fd fb94 	bl	80165a0 <HAL_GetTick>
 8018e78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018e7a:	e008      	b.n	8018e8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018e7c:	f7fd fb90 	bl	80165a0 <HAL_GetTick>
 8018e80:	4602      	mov	r2, r0
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	1ad3      	subs	r3, r2, r3
 8018e86:	2b02      	cmp	r3, #2
 8018e88:	d901      	bls.n	8018e8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8018e8a:	2303      	movs	r3, #3
 8018e8c:	e0b8      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018e8e:	f7ff fbd4 	bl	801863a <LL_RCC_IsActiveFlag_SHDHPRE>
 8018e92:	4603      	mov	r3, r0
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d0f1      	beq.n	8018e7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f003 0304 	and.w	r3, r3, #4
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d016      	beq.n	8018ed2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	68db      	ldr	r3, [r3, #12]
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7ff fad9 	bl	8018460 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018eae:	f7fd fb77 	bl	80165a0 <HAL_GetTick>
 8018eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018eb4:	e008      	b.n	8018ec8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018eb6:	f7fd fb73 	bl	80165a0 <HAL_GetTick>
 8018eba:	4602      	mov	r2, r0
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	1ad3      	subs	r3, r2, r3
 8018ec0:	2b02      	cmp	r3, #2
 8018ec2:	d901      	bls.n	8018ec8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8018ec4:	2303      	movs	r3, #3
 8018ec6:	e09b      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018ec8:	f7ff fbca 	bl	8018660 <LL_RCC_IsActiveFlag_PPRE1>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d0f1      	beq.n	8018eb6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	f003 0308 	and.w	r3, r3, #8
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d017      	beq.n	8018f0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	691b      	ldr	r3, [r3, #16]
 8018ee2:	00db      	lsls	r3, r3, #3
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7ff facf 	bl	8018488 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018eea:	f7fd fb59 	bl	80165a0 <HAL_GetTick>
 8018eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018ef0:	e008      	b.n	8018f04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018ef2:	f7fd fb55 	bl	80165a0 <HAL_GetTick>
 8018ef6:	4602      	mov	r2, r0
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	1ad3      	subs	r3, r2, r3
 8018efc:	2b02      	cmp	r3, #2
 8018efe:	d901      	bls.n	8018f04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8018f00:	2303      	movs	r3, #3
 8018f02:	e07d      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018f04:	f7ff fbbe 	bl	8018684 <LL_RCC_IsActiveFlag_PPRE2>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d0f1      	beq.n	8018ef2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	f003 0301 	and.w	r3, r3, #1
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d043      	beq.n	8018fa2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	2b02      	cmp	r3, #2
 8018f20:	d106      	bne.n	8018f30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8018f22:	f7ff f86f 	bl	8018004 <LL_RCC_HSE_IsReady>
 8018f26:	4603      	mov	r3, r0
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d11e      	bne.n	8018f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	e067      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	685b      	ldr	r3, [r3, #4]
 8018f34:	2b03      	cmp	r3, #3
 8018f36:	d106      	bne.n	8018f46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8018f38:	f7ff fb17 	bl	801856a <LL_RCC_PLL_IsReady>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d113      	bne.n	8018f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f42:	2301      	movs	r3, #1
 8018f44:	e05c      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	685b      	ldr	r3, [r3, #4]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d106      	bne.n	8018f5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8018f4e:	f7ff f9d7 	bl	8018300 <LL_RCC_MSI_IsReady>
 8018f52:	4603      	mov	r3, r0
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d108      	bne.n	8018f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f58:	2301      	movs	r3, #1
 8018f5a:	e051      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8018f5c:	f7ff f882 	bl	8018064 <LL_RCC_HSI_IsReady>
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d101      	bne.n	8018f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f66:	2301      	movs	r3, #1
 8018f68:	e04a      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f7ff fa15 	bl	801839e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018f74:	f7fd fb14 	bl	80165a0 <HAL_GetTick>
 8018f78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018f7a:	e00a      	b.n	8018f92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018f7c:	f7fd fb10 	bl	80165a0 <HAL_GetTick>
 8018f80:	4602      	mov	r2, r0
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	1ad3      	subs	r3, r2, r3
 8018f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	d901      	bls.n	8018f92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8018f8e:	2303      	movs	r3, #3
 8018f90:	e036      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018f92:	f7ff fa18 	bl	80183c6 <LL_RCC_GetSysClkSource>
 8018f96:	4602      	mov	r2, r0
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	685b      	ldr	r3, [r3, #4]
 8018f9c:	009b      	lsls	r3, r3, #2
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d1ec      	bne.n	8018f7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018fa2:	4b19      	ldr	r3, [pc, #100]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	f003 0307 	and.w	r3, r3, #7
 8018faa:	683a      	ldr	r2, [r7, #0]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d21b      	bcs.n	8018fe8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018fb0:	4b15      	ldr	r3, [pc, #84]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	f023 0207 	bic.w	r2, r3, #7
 8018fb8:	4913      	ldr	r1, [pc, #76]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	4313      	orrs	r3, r2
 8018fbe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018fc0:	f7fd faee 	bl	80165a0 <HAL_GetTick>
 8018fc4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018fc6:	e008      	b.n	8018fda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018fc8:	f7fd faea 	bl	80165a0 <HAL_GetTick>
 8018fcc:	4602      	mov	r2, r0
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	1ad3      	subs	r3, r2, r3
 8018fd2:	2b02      	cmp	r3, #2
 8018fd4:	d901      	bls.n	8018fda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8018fd6:	2303      	movs	r3, #3
 8018fd8:	e012      	b.n	8019000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018fda:	4b0b      	ldr	r3, [pc, #44]	; (8019008 <HAL_RCC_ClockConfig+0x278>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	f003 0307 	and.w	r3, r3, #7
 8018fe2:	683a      	ldr	r2, [r7, #0]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d1ef      	bne.n	8018fc8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018fe8:	f000 f87e 	bl	80190e8 <HAL_RCC_GetHCLKFreq>
 8018fec:	4603      	mov	r3, r0
 8018fee:	4a07      	ldr	r2, [pc, #28]	; (801900c <HAL_RCC_ClockConfig+0x27c>)
 8018ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8018ff2:	f7fd fae1 	bl	80165b8 <HAL_GetTickPrio>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7e8 fe1f 	bl	8001c3c <HAL_InitTick>
 8018ffe:	4603      	mov	r3, r0
}
 8019000:	4618      	mov	r0, r3
 8019002:	3710      	adds	r7, #16
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}
 8019008:	58004000 	.word	0x58004000
 801900c:	20000008 	.word	0x20000008

08019010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019010:	b590      	push	{r4, r7, lr}
 8019012:	b085      	sub	sp, #20
 8019014:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019016:	f7ff f9d6 	bl	80183c6 <LL_RCC_GetSysClkSource>
 801901a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d10a      	bne.n	8019038 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8019022:	f7ff f992 	bl	801834a <LL_RCC_MSI_GetRange>
 8019026:	4603      	mov	r3, r0
 8019028:	091b      	lsrs	r3, r3, #4
 801902a:	f003 030f 	and.w	r3, r3, #15
 801902e:	4a2b      	ldr	r2, [pc, #172]	; (80190dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8019030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019034:	60fb      	str	r3, [r7, #12]
 8019036:	e04b      	b.n	80190d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2b04      	cmp	r3, #4
 801903c:	d102      	bne.n	8019044 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801903e:	4b28      	ldr	r3, [pc, #160]	; (80190e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8019040:	60fb      	str	r3, [r7, #12]
 8019042:	e045      	b.n	80190d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2b08      	cmp	r3, #8
 8019048:	d10a      	bne.n	8019060 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801904a:	f7fe ffab 	bl	8017fa4 <LL_RCC_HSE_IsEnabledDiv2>
 801904e:	4603      	mov	r3, r0
 8019050:	2b01      	cmp	r3, #1
 8019052:	d102      	bne.n	801905a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8019054:	4b22      	ldr	r3, [pc, #136]	; (80190e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8019056:	60fb      	str	r3, [r7, #12]
 8019058:	e03a      	b.n	80190d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801905a:	4b22      	ldr	r3, [pc, #136]	; (80190e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801905c:	60fb      	str	r3, [r7, #12]
 801905e:	e037      	b.n	80190d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8019060:	f7ff faba 	bl	80185d8 <LL_RCC_PLL_GetMainSource>
 8019064:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	2b02      	cmp	r3, #2
 801906a:	d003      	beq.n	8019074 <HAL_RCC_GetSysClockFreq+0x64>
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	2b03      	cmp	r3, #3
 8019070:	d003      	beq.n	801907a <HAL_RCC_GetSysClockFreq+0x6a>
 8019072:	e00d      	b.n	8019090 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8019074:	4b1a      	ldr	r3, [pc, #104]	; (80190e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8019076:	60bb      	str	r3, [r7, #8]
        break;
 8019078:	e015      	b.n	80190a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801907a:	f7fe ff93 	bl	8017fa4 <LL_RCC_HSE_IsEnabledDiv2>
 801907e:	4603      	mov	r3, r0
 8019080:	2b01      	cmp	r3, #1
 8019082:	d102      	bne.n	801908a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8019084:	4b16      	ldr	r3, [pc, #88]	; (80190e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8019086:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8019088:	e00d      	b.n	80190a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801908a:	4b16      	ldr	r3, [pc, #88]	; (80190e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801908c:	60bb      	str	r3, [r7, #8]
        break;
 801908e:	e00a      	b.n	80190a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8019090:	f7ff f95b 	bl	801834a <LL_RCC_MSI_GetRange>
 8019094:	4603      	mov	r3, r0
 8019096:	091b      	lsrs	r3, r3, #4
 8019098:	f003 030f 	and.w	r3, r3, #15
 801909c:	4a0f      	ldr	r2, [pc, #60]	; (80190dc <HAL_RCC_GetSysClockFreq+0xcc>)
 801909e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190a2:	60bb      	str	r3, [r7, #8]
        break;
 80190a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80190a6:	f7ff fa72 	bl	801858e <LL_RCC_PLL_GetN>
 80190aa:	4602      	mov	r2, r0
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	fb03 f402 	mul.w	r4, r3, r2
 80190b2:	f7ff fa85 	bl	80185c0 <LL_RCC_PLL_GetDivider>
 80190b6:	4603      	mov	r3, r0
 80190b8:	091b      	lsrs	r3, r3, #4
 80190ba:	3301      	adds	r3, #1
 80190bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80190c0:	f7ff fa72 	bl	80185a8 <LL_RCC_PLL_GetR>
 80190c4:	4603      	mov	r3, r0
 80190c6:	0f5b      	lsrs	r3, r3, #29
 80190c8:	3301      	adds	r3, #1
 80190ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80190ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80190d0:	68fb      	ldr	r3, [r7, #12]
}
 80190d2:	4618      	mov	r0, r3
 80190d4:	3714      	adds	r7, #20
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd90      	pop	{r4, r7, pc}
 80190da:	bf00      	nop
 80190dc:	0801dce0 	.word	0x0801dce0
 80190e0:	00f42400 	.word	0x00f42400
 80190e4:	01e84800 	.word	0x01e84800

080190e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80190e8:	b598      	push	{r3, r4, r7, lr}
 80190ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80190ec:	f7ff ff90 	bl	8019010 <HAL_RCC_GetSysClockFreq>
 80190f0:	4604      	mov	r4, r0
 80190f2:	f7ff f9dd 	bl	80184b0 <LL_RCC_GetAHBPrescaler>
 80190f6:	4603      	mov	r3, r0
 80190f8:	091b      	lsrs	r3, r3, #4
 80190fa:	f003 030f 	and.w	r3, r3, #15
 80190fe:	4a03      	ldr	r2, [pc, #12]	; (801910c <HAL_RCC_GetHCLKFreq+0x24>)
 8019100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019104:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8019108:	4618      	mov	r0, r3
 801910a:	bd98      	pop	{r3, r4, r7, pc}
 801910c:	0801dc80 	.word	0x0801dc80

08019110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019110:	b598      	push	{r3, r4, r7, lr}
 8019112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8019114:	f7ff ffe8 	bl	80190e8 <HAL_RCC_GetHCLKFreq>
 8019118:	4604      	mov	r4, r0
 801911a:	f7ff f9f0 	bl	80184fe <LL_RCC_GetAPB1Prescaler>
 801911e:	4603      	mov	r3, r0
 8019120:	0a1b      	lsrs	r3, r3, #8
 8019122:	f003 0307 	and.w	r3, r3, #7
 8019126:	4a04      	ldr	r2, [pc, #16]	; (8019138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8019128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801912c:	f003 031f 	and.w	r3, r3, #31
 8019130:	fa24 f303 	lsr.w	r3, r4, r3
}
 8019134:	4618      	mov	r0, r3
 8019136:	bd98      	pop	{r3, r4, r7, pc}
 8019138:	0801dcc0 	.word	0x0801dcc0

0801913c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801913c:	b598      	push	{r3, r4, r7, lr}
 801913e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8019140:	f7ff ffd2 	bl	80190e8 <HAL_RCC_GetHCLKFreq>
 8019144:	4604      	mov	r4, r0
 8019146:	f7ff f9e6 	bl	8018516 <LL_RCC_GetAPB2Prescaler>
 801914a:	4603      	mov	r3, r0
 801914c:	0adb      	lsrs	r3, r3, #11
 801914e:	f003 0307 	and.w	r3, r3, #7
 8019152:	4a04      	ldr	r2, [pc, #16]	; (8019164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8019154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019158:	f003 031f 	and.w	r3, r3, #31
 801915c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8019160:	4618      	mov	r0, r3
 8019162:	bd98      	pop	{r3, r4, r7, pc}
 8019164:	0801dcc0 	.word	0x0801dcc0

08019168 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b082      	sub	sp, #8
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	226f      	movs	r2, #111	; 0x6f
 8019176:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8019178:	f7ff f925 	bl	80183c6 <LL_RCC_GetSysClkSource>
 801917c:	4602      	mov	r2, r0
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8019182:	f7ff f995 	bl	80184b0 <LL_RCC_GetAHBPrescaler>
 8019186:	4602      	mov	r2, r0
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 801918c:	f7ff f9b7 	bl	80184fe <LL_RCC_GetAPB1Prescaler>
 8019190:	4602      	mov	r2, r0
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8019196:	f7ff f9be 	bl	8018516 <LL_RCC_GetAPB2Prescaler>
 801919a:	4602      	mov	r2, r0
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80191a0:	f7ff f992 	bl	80184c8 <LL_C2_RCC_GetAHBPrescaler>
 80191a4:	4602      	mov	r2, r0
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80191aa:	f7ff f99a 	bl	80184e2 <LL_RCC_GetAHB4Prescaler>
 80191ae:	4602      	mov	r2, r0
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80191b4:	4b04      	ldr	r3, [pc, #16]	; (80191c8 <HAL_RCC_GetClockConfig+0x60>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	f003 0207 	and.w	r2, r3, #7
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	601a      	str	r2, [r3, #0]
}
 80191c0:	bf00      	nop
 80191c2:	3708      	adds	r7, #8
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	58004000 	.word	0x58004000

080191cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80191cc:	b590      	push	{r4, r7, lr}
 80191ce:	b085      	sub	sp, #20
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2bb0      	cmp	r3, #176	; 0xb0
 80191d8:	d903      	bls.n	80191e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80191da:	4b15      	ldr	r3, [pc, #84]	; (8019230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80191dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191de:	60fb      	str	r3, [r7, #12]
 80191e0:	e007      	b.n	80191f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	091b      	lsrs	r3, r3, #4
 80191e6:	f003 030f 	and.w	r3, r3, #15
 80191ea:	4a11      	ldr	r2, [pc, #68]	; (8019230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80191ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80191f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80191f2:	f7ff f976 	bl	80184e2 <LL_RCC_GetAHB4Prescaler>
 80191f6:	4603      	mov	r3, r0
 80191f8:	091b      	lsrs	r3, r3, #4
 80191fa:	f003 030f 	and.w	r3, r3, #15
 80191fe:	4a0d      	ldr	r2, [pc, #52]	; (8019234 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8019200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019204:	68fa      	ldr	r2, [r7, #12]
 8019206:	fbb2 f3f3 	udiv	r3, r2, r3
 801920a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	4a0a      	ldr	r2, [pc, #40]	; (8019238 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8019210:	fba2 2303 	umull	r2, r3, r2, r3
 8019214:	0c9c      	lsrs	r4, r3, #18
 8019216:	f7fe feb7 	bl	8017f88 <HAL_PWREx_GetVoltageRange>
 801921a:	4603      	mov	r3, r0
 801921c:	4619      	mov	r1, r3
 801921e:	4620      	mov	r0, r4
 8019220:	f000 f80c 	bl	801923c <RCC_SetFlashLatency>
 8019224:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8019226:	4618      	mov	r0, r3
 8019228:	3714      	adds	r7, #20
 801922a:	46bd      	mov	sp, r7
 801922c:	bd90      	pop	{r4, r7, pc}
 801922e:	bf00      	nop
 8019230:	0801dce0 	.word	0x0801dce0
 8019234:	0801dc80 	.word	0x0801dc80
 8019238:	431bde83 	.word	0x431bde83

0801923c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801923c:	b590      	push	{r4, r7, lr}
 801923e:	b093      	sub	sp, #76	; 0x4c
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8019246:	4b37      	ldr	r3, [pc, #220]	; (8019324 <RCC_SetFlashLatency+0xe8>)
 8019248:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801924c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801924e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8019252:	4a35      	ldr	r2, [pc, #212]	; (8019328 <RCC_SetFlashLatency+0xec>)
 8019254:	f107 031c 	add.w	r3, r7, #28
 8019258:	ca07      	ldmia	r2, {r0, r1, r2}
 801925a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801925e:	4b33      	ldr	r3, [pc, #204]	; (801932c <RCC_SetFlashLatency+0xf0>)
 8019260:	f107 040c 	add.w	r4, r7, #12
 8019264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801926a:	2300      	movs	r3, #0
 801926c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019274:	d11a      	bne.n	80192ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8019276:	2300      	movs	r3, #0
 8019278:	643b      	str	r3, [r7, #64]	; 0x40
 801927a:	e013      	b.n	80192a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801927c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801927e:	009b      	lsls	r3, r3, #2
 8019280:	3348      	adds	r3, #72	; 0x48
 8019282:	443b      	add	r3, r7
 8019284:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	429a      	cmp	r2, r3
 801928c:	d807      	bhi.n	801929e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801928e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019290:	009b      	lsls	r3, r3, #2
 8019292:	3348      	adds	r3, #72	; 0x48
 8019294:	443b      	add	r3, r7
 8019296:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801929a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801929c:	e020      	b.n	80192e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192a0:	3301      	adds	r3, #1
 80192a2:	643b      	str	r3, [r7, #64]	; 0x40
 80192a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192a6:	2b03      	cmp	r3, #3
 80192a8:	d9e8      	bls.n	801927c <RCC_SetFlashLatency+0x40>
 80192aa:	e019      	b.n	80192e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80192ac:	2300      	movs	r3, #0
 80192ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80192b0:	e013      	b.n	80192da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80192b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192b4:	009b      	lsls	r3, r3, #2
 80192b6:	3348      	adds	r3, #72	; 0x48
 80192b8:	443b      	add	r3, r7
 80192ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d807      	bhi.n	80192d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80192c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	3348      	adds	r3, #72	; 0x48
 80192ca:	443b      	add	r3, r7
 80192cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80192d0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80192d2:	e005      	b.n	80192e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80192d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192d6:	3301      	adds	r3, #1
 80192d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80192da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192dc:	2b02      	cmp	r3, #2
 80192de:	d9e8      	bls.n	80192b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80192e0:	4b13      	ldr	r3, [pc, #76]	; (8019330 <RCC_SetFlashLatency+0xf4>)
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	f023 0207 	bic.w	r2, r3, #7
 80192e8:	4911      	ldr	r1, [pc, #68]	; (8019330 <RCC_SetFlashLatency+0xf4>)
 80192ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192ec:	4313      	orrs	r3, r2
 80192ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80192f0:	f7fd f956 	bl	80165a0 <HAL_GetTick>
 80192f4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80192f6:	e008      	b.n	801930a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80192f8:	f7fd f952 	bl	80165a0 <HAL_GetTick>
 80192fc:	4602      	mov	r2, r0
 80192fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019300:	1ad3      	subs	r3, r2, r3
 8019302:	2b02      	cmp	r3, #2
 8019304:	d901      	bls.n	801930a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8019306:	2303      	movs	r3, #3
 8019308:	e007      	b.n	801931a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801930a:	4b09      	ldr	r3, [pc, #36]	; (8019330 <RCC_SetFlashLatency+0xf4>)
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	f003 0307 	and.w	r3, r3, #7
 8019312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019314:	429a      	cmp	r2, r3
 8019316:	d1ef      	bne.n	80192f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8019318:	2300      	movs	r3, #0
}
 801931a:	4618      	mov	r0, r3
 801931c:	374c      	adds	r7, #76	; 0x4c
 801931e:	46bd      	mov	sp, r7
 8019320:	bd90      	pop	{r4, r7, pc}
 8019322:	bf00      	nop
 8019324:	0801dc54 	.word	0x0801dc54
 8019328:	0801dc64 	.word	0x0801dc64
 801932c:	0801dc70 	.word	0x0801dc70
 8019330:	58004000 	.word	0x58004000

08019334 <LL_RCC_LSE_IsEnabled>:
{
 8019334:	b480      	push	{r7}
 8019336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8019338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801933c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019340:	f003 0301 	and.w	r3, r3, #1
 8019344:	2b01      	cmp	r3, #1
 8019346:	d101      	bne.n	801934c <LL_RCC_LSE_IsEnabled+0x18>
 8019348:	2301      	movs	r3, #1
 801934a:	e000      	b.n	801934e <LL_RCC_LSE_IsEnabled+0x1a>
 801934c:	2300      	movs	r3, #0
}
 801934e:	4618      	mov	r0, r3
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <LL_RCC_LSE_IsReady>:
{
 8019358:	b480      	push	{r7}
 801935a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801935c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019364:	f003 0302 	and.w	r3, r3, #2
 8019368:	2b02      	cmp	r3, #2
 801936a:	d101      	bne.n	8019370 <LL_RCC_LSE_IsReady+0x18>
 801936c:	2301      	movs	r3, #1
 801936e:	e000      	b.n	8019372 <LL_RCC_LSE_IsReady+0x1a>
 8019370:	2300      	movs	r3, #0
}
 8019372:	4618      	mov	r0, r3
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr

0801937c <LL_RCC_MSI_EnablePLLMode>:
{
 801937c:	b480      	push	{r7}
 801937e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8019380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801938a:	f043 0304 	orr.w	r3, r3, #4
 801938e:	6013      	str	r3, [r2, #0]
}
 8019390:	bf00      	nop
 8019392:	46bd      	mov	sp, r7
 8019394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019398:	4770      	bx	lr

0801939a <LL_RCC_SetRFWKPClockSource>:
{
 801939a:	b480      	push	{r7}
 801939c:	b083      	sub	sp, #12
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80193a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80193aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80193ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	4313      	orrs	r3, r2
 80193b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80193ba:	bf00      	nop
 80193bc:	370c      	adds	r7, #12
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <LL_RCC_SetSMPSClockSource>:
{
 80193c6:	b480      	push	{r7}
 80193c8:	b083      	sub	sp, #12
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80193ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d4:	f023 0203 	bic.w	r2, r3, #3
 80193d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	4313      	orrs	r3, r2
 80193e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80193e2:	bf00      	nop
 80193e4:	370c      	adds	r7, #12
 80193e6:	46bd      	mov	sp, r7
 80193e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ec:	4770      	bx	lr

080193ee <LL_RCC_SetSMPSPrescaler>:
{
 80193ee:	b480      	push	{r7}
 80193f0:	b083      	sub	sp, #12
 80193f2:	af00      	add	r7, sp, #0
 80193f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80193f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	4313      	orrs	r3, r2
 8019408:	624b      	str	r3, [r1, #36]	; 0x24
}
 801940a:	bf00      	nop
 801940c:	370c      	adds	r7, #12
 801940e:	46bd      	mov	sp, r7
 8019410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019414:	4770      	bx	lr

08019416 <LL_RCC_SetUSARTClockSource>:
{
 8019416:	b480      	push	{r7}
 8019418:	b083      	sub	sp, #12
 801941a:	af00      	add	r7, sp, #0
 801941c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801941e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019426:	f023 0203 	bic.w	r2, r3, #3
 801942a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	4313      	orrs	r3, r2
 8019432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019436:	bf00      	nop
 8019438:	370c      	adds	r7, #12
 801943a:	46bd      	mov	sp, r7
 801943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019440:	4770      	bx	lr

08019442 <LL_RCC_SetLPUARTClockSource>:
{
 8019442:	b480      	push	{r7}
 8019444:	b083      	sub	sp, #12
 8019446:	af00      	add	r7, sp, #0
 8019448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801944a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801944e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	4313      	orrs	r3, r2
 801945e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019462:	bf00      	nop
 8019464:	370c      	adds	r7, #12
 8019466:	46bd      	mov	sp, r7
 8019468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946c:	4770      	bx	lr

0801946e <LL_RCC_SetI2CClockSource>:
{
 801946e:	b480      	push	{r7}
 8019470:	b083      	sub	sp, #12
 8019472:	af00      	add	r7, sp, #0
 8019474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8019476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801947a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	091b      	lsrs	r3, r3, #4
 8019482:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8019486:	43db      	mvns	r3, r3
 8019488:	401a      	ands	r2, r3
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	011b      	lsls	r3, r3, #4
 801948e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8019492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019496:	4313      	orrs	r3, r2
 8019498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801949c:	bf00      	nop
 801949e:	370c      	adds	r7, #12
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr

080194a8 <LL_RCC_SetLPTIMClockSource>:
{
 80194a8:	b480      	push	{r7}
 80194aa:	b083      	sub	sp, #12
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80194b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80194b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	0c1b      	lsrs	r3, r3, #16
 80194bc:	041b      	lsls	r3, r3, #16
 80194be:	43db      	mvns	r3, r3
 80194c0:	401a      	ands	r2, r3
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	041b      	lsls	r3, r3, #16
 80194c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80194ca:	4313      	orrs	r3, r2
 80194cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80194d0:	bf00      	nop
 80194d2:	370c      	adds	r7, #12
 80194d4:	46bd      	mov	sp, r7
 80194d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194da:	4770      	bx	lr

080194dc <LL_RCC_SetSAIClockSource>:
{
 80194dc:	b480      	push	{r7}
 80194de:	b083      	sub	sp, #12
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80194e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80194e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80194ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80194f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	4313      	orrs	r3, r2
 80194f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80194fc:	bf00      	nop
 80194fe:	370c      	adds	r7, #12
 8019500:	46bd      	mov	sp, r7
 8019502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019506:	4770      	bx	lr

08019508 <LL_RCC_SetRNGClockSource>:
{
 8019508:	b480      	push	{r7}
 801950a:	b083      	sub	sp, #12
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8019510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019518:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801951c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	4313      	orrs	r3, r2
 8019524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019528:	bf00      	nop
 801952a:	370c      	adds	r7, #12
 801952c:	46bd      	mov	sp, r7
 801952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019532:	4770      	bx	lr

08019534 <LL_RCC_SetCLK48ClockSource>:
{
 8019534:	b480      	push	{r7}
 8019536:	b083      	sub	sp, #12
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801953c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8019548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	4313      	orrs	r3, r2
 8019550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019554:	bf00      	nop
 8019556:	370c      	adds	r7, #12
 8019558:	46bd      	mov	sp, r7
 801955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955e:	4770      	bx	lr

08019560 <LL_RCC_SetUSBClockSource>:
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7ff ffe3 	bl	8019534 <LL_RCC_SetCLK48ClockSource>
}
 801956e:	bf00      	nop
 8019570:	3708      	adds	r7, #8
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <LL_RCC_SetADCClockSource>:
{
 8019576:	b480      	push	{r7}
 8019578:	b083      	sub	sp, #12
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801957e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801958a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	4313      	orrs	r3, r2
 8019592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019596:	bf00      	nop
 8019598:	370c      	adds	r7, #12
 801959a:	46bd      	mov	sp, r7
 801959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a0:	4770      	bx	lr

080195a2 <LL_RCC_SetRTCClockSource>:
{
 80195a2:	b480      	push	{r7}
 80195a4:	b083      	sub	sp, #12
 80195a6:	af00      	add	r7, sp, #0
 80195a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80195aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80195b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	4313      	orrs	r3, r2
 80195be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80195c2:	bf00      	nop
 80195c4:	370c      	adds	r7, #12
 80195c6:	46bd      	mov	sp, r7
 80195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195cc:	4770      	bx	lr

080195ce <LL_RCC_GetRTCClockSource>:
{
 80195ce:	b480      	push	{r7}
 80195d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80195d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195da:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80195de:	4618      	mov	r0, r3
 80195e0:	46bd      	mov	sp, r7
 80195e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e6:	4770      	bx	lr

080195e8 <LL_RCC_ForceBackupDomainReset>:
{
 80195e8:	b480      	push	{r7}
 80195ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80195ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80195f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80195fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019600:	bf00      	nop
 8019602:	46bd      	mov	sp, r7
 8019604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019608:	4770      	bx	lr

0801960a <LL_RCC_ReleaseBackupDomainReset>:
{
 801960a:	b480      	push	{r7}
 801960c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801960e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801961a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801961e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019622:	bf00      	nop
 8019624:	46bd      	mov	sp, r7
 8019626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962a:	4770      	bx	lr

0801962c <LL_RCC_PLLSAI1_Enable>:
{
 801962c:	b480      	push	{r7}
 801962e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8019630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801963a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801963e:	6013      	str	r3, [r2, #0]
}
 8019640:	bf00      	nop
 8019642:	46bd      	mov	sp, r7
 8019644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019648:	4770      	bx	lr

0801964a <LL_RCC_PLLSAI1_Disable>:
{
 801964a:	b480      	push	{r7}
 801964c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801964e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801965c:	6013      	str	r3, [r2, #0]
}
 801965e:	bf00      	nop
 8019660:	46bd      	mov	sp, r7
 8019662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019666:	4770      	bx	lr

08019668 <LL_RCC_PLLSAI1_IsReady>:
{
 8019668:	b480      	push	{r7}
 801966a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801966c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801967a:	d101      	bne.n	8019680 <LL_RCC_PLLSAI1_IsReady+0x18>
 801967c:	2301      	movs	r3, #1
 801967e:	e000      	b.n	8019682 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8019680:	2300      	movs	r3, #0
}
 8019682:	4618      	mov	r0, r3
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b088      	sub	sp, #32
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8019694:	2300      	movs	r3, #0
 8019696:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8019698:	2300      	movs	r3, #0
 801969a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d034      	beq.n	8019712 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80196b0:	d021      	beq.n	80196f6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80196b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80196b6:	d81b      	bhi.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80196b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80196bc:	d01d      	beq.n	80196fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80196be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80196c2:	d815      	bhi.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d00b      	beq.n	80196e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80196c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80196cc:	d110      	bne.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80196ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196d2:	68db      	ldr	r3, [r3, #12]
 80196d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80196d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196dc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80196de:	e00d      	b.n	80196fc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	3304      	adds	r3, #4
 80196e4:	4618      	mov	r0, r3
 80196e6:	f000 f94d 	bl	8019984 <RCCEx_PLLSAI1_ConfigNP>
 80196ea:	4603      	mov	r3, r0
 80196ec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80196ee:	e005      	b.n	80196fc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80196f0:	2301      	movs	r3, #1
 80196f2:	77fb      	strb	r3, [r7, #31]
        break;
 80196f4:	e002      	b.n	80196fc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80196f6:	bf00      	nop
 80196f8:	e000      	b.n	80196fc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80196fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80196fc:	7ffb      	ldrb	r3, [r7, #31]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d105      	bne.n	801970e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019706:	4618      	mov	r0, r3
 8019708:	f7ff fee8 	bl	80194dc <LL_RCC_SetSAIClockSource>
 801970c:	e001      	b.n	8019712 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801970e:	7ffb      	ldrb	r3, [r7, #31]
 8019710:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801971a:	2b00      	cmp	r3, #0
 801971c:	d046      	beq.n	80197ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801971e:	f7ff ff56 	bl	80195ce <LL_RCC_GetRTCClockSource>
 8019722:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019728:	69ba      	ldr	r2, [r7, #24]
 801972a:	429a      	cmp	r2, r3
 801972c:	d03c      	beq.n	80197a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801972e:	f7fe fc1b 	bl	8017f68 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8019732:	69bb      	ldr	r3, [r7, #24]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d105      	bne.n	8019744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801973c:	4618      	mov	r0, r3
 801973e:	f7ff ff30 	bl	80195a2 <LL_RCC_SetRTCClockSource>
 8019742:	e02e      	b.n	80197a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8019744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801974c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801974e:	f7ff ff4b 	bl	80195e8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8019752:	f7ff ff5a 	bl	801960a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8019756:	697b      	ldr	r3, [r7, #20]
 8019758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019760:	4313      	orrs	r3, r2
 8019762:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8019764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019768:	697b      	ldr	r3, [r7, #20]
 801976a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801976e:	f7ff fde1 	bl	8019334 <LL_RCC_LSE_IsEnabled>
 8019772:	4603      	mov	r3, r0
 8019774:	2b01      	cmp	r3, #1
 8019776:	d114      	bne.n	80197a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8019778:	f7fc ff12 	bl	80165a0 <HAL_GetTick>
 801977c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801977e:	e00b      	b.n	8019798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019780:	f7fc ff0e 	bl	80165a0 <HAL_GetTick>
 8019784:	4602      	mov	r2, r0
 8019786:	693b      	ldr	r3, [r7, #16]
 8019788:	1ad3      	subs	r3, r2, r3
 801978a:	f241 3288 	movw	r2, #5000	; 0x1388
 801978e:	4293      	cmp	r3, r2
 8019790:	d902      	bls.n	8019798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8019792:	2303      	movs	r3, #3
 8019794:	77fb      	strb	r3, [r7, #31]
              break;
 8019796:	e004      	b.n	80197a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8019798:	f7ff fdde 	bl	8019358 <LL_RCC_LSE_IsReady>
 801979c:	4603      	mov	r3, r0
 801979e:	2b01      	cmp	r3, #1
 80197a0:	d1ee      	bne.n	8019780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80197a2:	7ffb      	ldrb	r3, [r7, #31]
 80197a4:	77bb      	strb	r3, [r7, #30]
 80197a6:	e001      	b.n	80197ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80197a8:	7ffb      	ldrb	r3, [r7, #31]
 80197aa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	f003 0301 	and.w	r3, r3, #1
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d004      	beq.n	80197c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	699b      	ldr	r3, [r3, #24]
 80197bc:	4618      	mov	r0, r3
 80197be:	f7ff fe2a 	bl	8019416 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f003 0302 	and.w	r3, r3, #2
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d004      	beq.n	80197d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	69db      	ldr	r3, [r3, #28]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7ff fe35 	bl	8019442 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	f003 0310 	and.w	r3, r3, #16
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d004      	beq.n	80197ee <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7ff fe5d 	bl	80194a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	f003 0320 	and.w	r3, r3, #32
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d004      	beq.n	8019804 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197fe:	4618      	mov	r0, r3
 8019800:	f7ff fe52 	bl	80194a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	f003 0304 	and.w	r3, r3, #4
 801980c:	2b00      	cmp	r3, #0
 801980e:	d004      	beq.n	801981a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6a1b      	ldr	r3, [r3, #32]
 8019814:	4618      	mov	r0, r3
 8019816:	f7ff fe2a 	bl	801946e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	f003 0308 	and.w	r3, r3, #8
 8019822:	2b00      	cmp	r3, #0
 8019824:	d004      	beq.n	8019830 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801982a:	4618      	mov	r0, r3
 801982c:	f7ff fe1f 	bl	801946e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019838:	2b00      	cmp	r3, #0
 801983a:	d022      	beq.n	8019882 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019840:	4618      	mov	r0, r3
 8019842:	f7ff fe8d 	bl	8019560 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801984a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801984e:	d107      	bne.n	8019860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8019850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019854:	68db      	ldr	r3, [r3, #12]
 8019856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801985a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801985e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8019868:	d10b      	bne.n	8019882 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	3304      	adds	r3, #4
 801986e:	4618      	mov	r0, r3
 8019870:	f000 f8e3 	bl	8019a3a <RCCEx_PLLSAI1_ConfigNQ>
 8019874:	4603      	mov	r3, r0
 8019876:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8019878:	7ffb      	ldrb	r3, [r7, #31]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d001      	beq.n	8019882 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801987e:	7ffb      	ldrb	r3, [r7, #31]
 8019880:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801988a:	2b00      	cmp	r3, #0
 801988c:	d02b      	beq.n	80198e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019896:	d008      	beq.n	80198aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801989c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80198a0:	d003      	beq.n	80198aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d105      	bne.n	80198b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7ff fe2a 	bl	8019508 <LL_RCC_SetRNGClockSource>
 80198b4:	e00a      	b.n	80198cc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80198be:	60fb      	str	r3, [r7, #12]
 80198c0:	2000      	movs	r0, #0
 80198c2:	f7ff fe21 	bl	8019508 <LL_RCC_SetRNGClockSource>
 80198c6:	68f8      	ldr	r0, [r7, #12]
 80198c8:	f7ff fe34 	bl	8019534 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80198d4:	d107      	bne.n	80198e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80198d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198da:	68db      	ldr	r3, [r3, #12]
 80198dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80198e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80198e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d022      	beq.n	8019938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7ff fe3d 	bl	8019576 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019904:	d107      	bne.n	8019916 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8019906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801990a:	68db      	ldr	r3, [r3, #12]
 801990c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019914:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801991a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801991e:	d10b      	bne.n	8019938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	3304      	adds	r3, #4
 8019924:	4618      	mov	r0, r3
 8019926:	f000 f8e3 	bl	8019af0 <RCCEx_PLLSAI1_ConfigNR>
 801992a:	4603      	mov	r3, r0
 801992c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801992e:	7ffb      	ldrb	r3, [r7, #31]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d001      	beq.n	8019938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8019934:	7ffb      	ldrb	r3, [r7, #31]
 8019936:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019940:	2b00      	cmp	r3, #0
 8019942:	d004      	beq.n	801994e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019948:	4618      	mov	r0, r3
 801994a:	f7ff fd26 	bl	801939a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019956:	2b00      	cmp	r3, #0
 8019958:	d009      	beq.n	801996e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801995e:	4618      	mov	r0, r3
 8019960:	f7ff fd45 	bl	80193ee <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019968:	4618      	mov	r0, r3
 801996a:	f7ff fd2c 	bl	80193c6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801996e:	7fbb      	ldrb	r3, [r7, #30]
}
 8019970:	4618      	mov	r0, r3
 8019972:	3720      	adds	r7, #32
 8019974:	46bd      	mov	sp, r7
 8019976:	bd80      	pop	{r7, pc}

08019978 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801997c:	f7ff fcfe 	bl	801937c <LL_RCC_MSI_EnablePLLMode>
}
 8019980:	bf00      	nop
 8019982:	bd80      	pop	{r7, pc}

08019984 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801998c:	2300      	movs	r3, #0
 801998e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019990:	f7ff fe5b 	bl	801964a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019994:	f7fc fe04 	bl	80165a0 <HAL_GetTick>
 8019998:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801999a:	e009      	b.n	80199b0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801999c:	f7fc fe00 	bl	80165a0 <HAL_GetTick>
 80199a0:	4602      	mov	r2, r0
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	1ad3      	subs	r3, r2, r3
 80199a6:	2b02      	cmp	r3, #2
 80199a8:	d902      	bls.n	80199b0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80199aa:	2303      	movs	r3, #3
 80199ac:	73fb      	strb	r3, [r7, #15]
      break;
 80199ae:	e004      	b.n	80199ba <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80199b0:	f7ff fe5a 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 80199b4:	4603      	mov	r3, r0
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d1f0      	bne.n	801999c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80199ba:	7bfb      	ldrb	r3, [r7, #15]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d137      	bne.n	8019a30 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80199c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199c4:	691b      	ldr	r3, [r3, #16]
 80199c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	021b      	lsls	r3, r3, #8
 80199d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80199d4:	4313      	orrs	r3, r2
 80199d6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80199d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199dc:	691b      	ldr	r3, [r3, #16]
 80199de:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	685b      	ldr	r3, [r3, #4]
 80199e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80199ea:	4313      	orrs	r3, r2
 80199ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80199ee:	f7ff fe1d 	bl	801962c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80199f2:	f7fc fdd5 	bl	80165a0 <HAL_GetTick>
 80199f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80199f8:	e009      	b.n	8019a0e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80199fa:	f7fc fdd1 	bl	80165a0 <HAL_GetTick>
 80199fe:	4602      	mov	r2, r0
 8019a00:	68bb      	ldr	r3, [r7, #8]
 8019a02:	1ad3      	subs	r3, r2, r3
 8019a04:	2b02      	cmp	r3, #2
 8019a06:	d902      	bls.n	8019a0e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8019a08:	2303      	movs	r3, #3
 8019a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8019a0c:	e004      	b.n	8019a18 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019a0e:	f7ff fe2b 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 8019a12:	4603      	mov	r3, r0
 8019a14:	2b01      	cmp	r3, #1
 8019a16:	d1f0      	bne.n	80199fa <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8019a18:	7bfb      	ldrb	r3, [r7, #15]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d108      	bne.n	8019a30 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a22:	691a      	ldr	r2, [r3, #16]
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	691b      	ldr	r3, [r3, #16]
 8019a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a2c:	4313      	orrs	r3, r2
 8019a2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a32:	4618      	mov	r0, r3
 8019a34:	3710      	adds	r7, #16
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd80      	pop	{r7, pc}

08019a3a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019a3a:	b580      	push	{r7, lr}
 8019a3c:	b084      	sub	sp, #16
 8019a3e:	af00      	add	r7, sp, #0
 8019a40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019a42:	2300      	movs	r3, #0
 8019a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019a46:	f7ff fe00 	bl	801964a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019a4a:	f7fc fda9 	bl	80165a0 <HAL_GetTick>
 8019a4e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019a50:	e009      	b.n	8019a66 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019a52:	f7fc fda5 	bl	80165a0 <HAL_GetTick>
 8019a56:	4602      	mov	r2, r0
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	1ad3      	subs	r3, r2, r3
 8019a5c:	2b02      	cmp	r3, #2
 8019a5e:	d902      	bls.n	8019a66 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8019a60:	2303      	movs	r3, #3
 8019a62:	73fb      	strb	r3, [r7, #15]
      break;
 8019a64:	e004      	b.n	8019a70 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019a66:	f7ff fdff 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d1f0      	bne.n	8019a52 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8019a70:	7bfb      	ldrb	r3, [r7, #15]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d137      	bne.n	8019ae6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8019a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a7a:	691b      	ldr	r3, [r3, #16]
 8019a7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	021b      	lsls	r3, r3, #8
 8019a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a8a:	4313      	orrs	r3, r2
 8019a8c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8019a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a92:	691b      	ldr	r3, [r3, #16]
 8019a94:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	689b      	ldr	r3, [r3, #8]
 8019a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019aa0:	4313      	orrs	r3, r2
 8019aa2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8019aa4:	f7ff fdc2 	bl	801962c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019aa8:	f7fc fd7a 	bl	80165a0 <HAL_GetTick>
 8019aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019aae:	e009      	b.n	8019ac4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019ab0:	f7fc fd76 	bl	80165a0 <HAL_GetTick>
 8019ab4:	4602      	mov	r2, r0
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	1ad3      	subs	r3, r2, r3
 8019aba:	2b02      	cmp	r3, #2
 8019abc:	d902      	bls.n	8019ac4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8019abe:	2303      	movs	r3, #3
 8019ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8019ac2:	e004      	b.n	8019ace <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019ac4:	f7ff fdd0 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	d1f0      	bne.n	8019ab0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8019ace:	7bfb      	ldrb	r3, [r7, #15]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d108      	bne.n	8019ae6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ad8:	691a      	ldr	r2, [r3, #16]
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	691b      	ldr	r3, [r3, #16]
 8019ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019ae2:	4313      	orrs	r3, r2
 8019ae4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ae8:	4618      	mov	r0, r3
 8019aea:	3710      	adds	r7, #16
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}

08019af0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b084      	sub	sp, #16
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019af8:	2300      	movs	r3, #0
 8019afa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019afc:	f7ff fda5 	bl	801964a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019b00:	f7fc fd4e 	bl	80165a0 <HAL_GetTick>
 8019b04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019b06:	e009      	b.n	8019b1c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019b08:	f7fc fd4a 	bl	80165a0 <HAL_GetTick>
 8019b0c:	4602      	mov	r2, r0
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	1ad3      	subs	r3, r2, r3
 8019b12:	2b02      	cmp	r3, #2
 8019b14:	d902      	bls.n	8019b1c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8019b16:	2303      	movs	r3, #3
 8019b18:	73fb      	strb	r3, [r7, #15]
      break;
 8019b1a:	e004      	b.n	8019b26 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019b1c:	f7ff fda4 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 8019b20:	4603      	mov	r3, r0
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d1f0      	bne.n	8019b08 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8019b26:	7bfb      	ldrb	r3, [r7, #15]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d137      	bne.n	8019b9c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8019b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b30:	691b      	ldr	r3, [r3, #16]
 8019b32:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	021b      	lsls	r3, r3, #8
 8019b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b40:	4313      	orrs	r3, r2
 8019b42:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8019b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b48:	691b      	ldr	r3, [r3, #16]
 8019b4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	68db      	ldr	r3, [r3, #12]
 8019b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b56:	4313      	orrs	r3, r2
 8019b58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8019b5a:	f7ff fd67 	bl	801962c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019b5e:	f7fc fd1f 	bl	80165a0 <HAL_GetTick>
 8019b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019b64:	e009      	b.n	8019b7a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019b66:	f7fc fd1b 	bl	80165a0 <HAL_GetTick>
 8019b6a:	4602      	mov	r2, r0
 8019b6c:	68bb      	ldr	r3, [r7, #8]
 8019b6e:	1ad3      	subs	r3, r2, r3
 8019b70:	2b02      	cmp	r3, #2
 8019b72:	d902      	bls.n	8019b7a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8019b74:	2303      	movs	r3, #3
 8019b76:	73fb      	strb	r3, [r7, #15]
        break;
 8019b78:	e004      	b.n	8019b84 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019b7a:	f7ff fd75 	bl	8019668 <LL_RCC_PLLSAI1_IsReady>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	2b01      	cmp	r3, #1
 8019b82:	d1f0      	bne.n	8019b66 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8019b84:	7bfb      	ldrb	r3, [r7, #15]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d108      	bne.n	8019b9c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b8e:	691a      	ldr	r2, [r3, #16]
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	691b      	ldr	r3, [r3, #16]
 8019b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	3710      	adds	r7, #16
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}

08019ba6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019ba6:	b580      	push	{r7, lr}
 8019ba8:	b082      	sub	sp, #8
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d101      	bne.n	8019bb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	e049      	b.n	8019c4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d106      	bne.n	8019bd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019bcc:	6878      	ldr	r0, [r7, #4]
 8019bce:	f000 f841 	bl	8019c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	2202      	movs	r2, #2
 8019bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681a      	ldr	r2, [r3, #0]
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	3304      	adds	r3, #4
 8019be2:	4619      	mov	r1, r3
 8019be4:	4610      	mov	r0, r2
 8019be6:	f000 f9d5 	bl	8019f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	2201      	movs	r2, #1
 8019bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2201      	movs	r2, #1
 8019bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2201      	movs	r2, #1
 8019c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2201      	movs	r2, #1
 8019c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	2201      	movs	r2, #1
 8019c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	2201      	movs	r2, #1
 8019c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	2201      	movs	r2, #1
 8019c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	2201      	movs	r2, #1
 8019c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	2201      	movs	r2, #1
 8019c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	2201      	movs	r2, #1
 8019c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019c4a:	2300      	movs	r3, #0
}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8019c54:	b480      	push	{r7}
 8019c56:	b083      	sub	sp, #12
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8019c5c:	bf00      	nop
 8019c5e:	370c      	adds	r7, #12
 8019c60:	46bd      	mov	sp, r7
 8019c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c66:	4770      	bx	lr

08019c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019c68:	b480      	push	{r7}
 8019c6a:	b085      	sub	sp, #20
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019c76:	b2db      	uxtb	r3, r3
 8019c78:	2b01      	cmp	r3, #1
 8019c7a:	d001      	beq.n	8019c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	e036      	b.n	8019cee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2202      	movs	r2, #2
 8019c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	68da      	ldr	r2, [r3, #12]
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	f042 0201 	orr.w	r2, r2, #1
 8019c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	4a17      	ldr	r2, [pc, #92]	; (8019cfc <HAL_TIM_Base_Start_IT+0x94>)
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	d004      	beq.n	8019cac <HAL_TIM_Base_Start_IT+0x44>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019caa:	d115      	bne.n	8019cd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	689a      	ldr	r2, [r3, #8]
 8019cb2:	4b13      	ldr	r3, [pc, #76]	; (8019d00 <HAL_TIM_Base_Start_IT+0x98>)
 8019cb4:	4013      	ands	r3, r2
 8019cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	2b06      	cmp	r3, #6
 8019cbc:	d015      	beq.n	8019cea <HAL_TIM_Base_Start_IT+0x82>
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019cc4:	d011      	beq.n	8019cea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	681a      	ldr	r2, [r3, #0]
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	f042 0201 	orr.w	r2, r2, #1
 8019cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019cd6:	e008      	b.n	8019cea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	681a      	ldr	r2, [r3, #0]
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	f042 0201 	orr.w	r2, r2, #1
 8019ce6:	601a      	str	r2, [r3, #0]
 8019ce8:	e000      	b.n	8019cec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019cec:	2300      	movs	r3, #0
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3714      	adds	r7, #20
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop
 8019cfc:	40012c00 	.word	0x40012c00
 8019d00:	00010007 	.word	0x00010007

08019d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b082      	sub	sp, #8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	691b      	ldr	r3, [r3, #16]
 8019d12:	f003 0302 	and.w	r3, r3, #2
 8019d16:	2b02      	cmp	r3, #2
 8019d18:	d122      	bne.n	8019d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	68db      	ldr	r3, [r3, #12]
 8019d20:	f003 0302 	and.w	r3, r3, #2
 8019d24:	2b02      	cmp	r3, #2
 8019d26:	d11b      	bne.n	8019d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	f06f 0202 	mvn.w	r2, #2
 8019d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	2201      	movs	r2, #1
 8019d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	699b      	ldr	r3, [r3, #24]
 8019d3e:	f003 0303 	and.w	r3, r3, #3
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d003      	beq.n	8019d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019d46:	6878      	ldr	r0, [r7, #4]
 8019d48:	f000 f905 	bl	8019f56 <HAL_TIM_IC_CaptureCallback>
 8019d4c:	e005      	b.n	8019d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019d4e:	6878      	ldr	r0, [r7, #4]
 8019d50:	f000 f8f7 	bl	8019f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f000 f908 	bl	8019f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	691b      	ldr	r3, [r3, #16]
 8019d66:	f003 0304 	and.w	r3, r3, #4
 8019d6a:	2b04      	cmp	r3, #4
 8019d6c:	d122      	bne.n	8019db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	68db      	ldr	r3, [r3, #12]
 8019d74:	f003 0304 	and.w	r3, r3, #4
 8019d78:	2b04      	cmp	r3, #4
 8019d7a:	d11b      	bne.n	8019db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f06f 0204 	mvn.w	r2, #4
 8019d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	2202      	movs	r2, #2
 8019d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	699b      	ldr	r3, [r3, #24]
 8019d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d003      	beq.n	8019da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019d9a:	6878      	ldr	r0, [r7, #4]
 8019d9c:	f000 f8db 	bl	8019f56 <HAL_TIM_IC_CaptureCallback>
 8019da0:	e005      	b.n	8019dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019da2:	6878      	ldr	r0, [r7, #4]
 8019da4:	f000 f8cd 	bl	8019f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f000 f8de 	bl	8019f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2200      	movs	r2, #0
 8019db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	691b      	ldr	r3, [r3, #16]
 8019dba:	f003 0308 	and.w	r3, r3, #8
 8019dbe:	2b08      	cmp	r3, #8
 8019dc0:	d122      	bne.n	8019e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	f003 0308 	and.w	r3, r3, #8
 8019dcc:	2b08      	cmp	r3, #8
 8019dce:	d11b      	bne.n	8019e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	f06f 0208 	mvn.w	r2, #8
 8019dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	2204      	movs	r2, #4
 8019dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	69db      	ldr	r3, [r3, #28]
 8019de6:	f003 0303 	and.w	r3, r3, #3
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d003      	beq.n	8019df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019dee:	6878      	ldr	r0, [r7, #4]
 8019df0:	f000 f8b1 	bl	8019f56 <HAL_TIM_IC_CaptureCallback>
 8019df4:	e005      	b.n	8019e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f000 f8a3 	bl	8019f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	f000 f8b4 	bl	8019f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	2200      	movs	r2, #0
 8019e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	691b      	ldr	r3, [r3, #16]
 8019e0e:	f003 0310 	and.w	r3, r3, #16
 8019e12:	2b10      	cmp	r3, #16
 8019e14:	d122      	bne.n	8019e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	68db      	ldr	r3, [r3, #12]
 8019e1c:	f003 0310 	and.w	r3, r3, #16
 8019e20:	2b10      	cmp	r3, #16
 8019e22:	d11b      	bne.n	8019e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	f06f 0210 	mvn.w	r2, #16
 8019e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2208      	movs	r2, #8
 8019e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	69db      	ldr	r3, [r3, #28]
 8019e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d003      	beq.n	8019e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019e42:	6878      	ldr	r0, [r7, #4]
 8019e44:	f000 f887 	bl	8019f56 <HAL_TIM_IC_CaptureCallback>
 8019e48:	e005      	b.n	8019e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	f000 f879 	bl	8019f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019e50:	6878      	ldr	r0, [r7, #4]
 8019e52:	f000 f88a 	bl	8019f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2200      	movs	r2, #0
 8019e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	691b      	ldr	r3, [r3, #16]
 8019e62:	f003 0301 	and.w	r3, r3, #1
 8019e66:	2b01      	cmp	r3, #1
 8019e68:	d10e      	bne.n	8019e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	f003 0301 	and.w	r3, r3, #1
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d107      	bne.n	8019e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	f06f 0201 	mvn.w	r2, #1
 8019e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019e82:	6878      	ldr	r0, [r7, #4]
 8019e84:	f7e7 fcf6 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	691b      	ldr	r3, [r3, #16]
 8019e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e92:	2b80      	cmp	r3, #128	; 0x80
 8019e94:	d10e      	bne.n	8019eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	68db      	ldr	r3, [r3, #12]
 8019e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ea0:	2b80      	cmp	r3, #128	; 0x80
 8019ea2:	d107      	bne.n	8019eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8019eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019eae:	6878      	ldr	r0, [r7, #4]
 8019eb0:	f000 f8de 	bl	801a070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	691b      	ldr	r3, [r3, #16]
 8019eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019ec2:	d10e      	bne.n	8019ee2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	68db      	ldr	r3, [r3, #12]
 8019eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ece:	2b80      	cmp	r3, #128	; 0x80
 8019ed0:	d107      	bne.n	8019ee2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8019eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	f000 f8d1 	bl	801a084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	691b      	ldr	r3, [r3, #16]
 8019ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019eec:	2b40      	cmp	r3, #64	; 0x40
 8019eee:	d10e      	bne.n	8019f0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	68db      	ldr	r3, [r3, #12]
 8019ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019efa:	2b40      	cmp	r3, #64	; 0x40
 8019efc:	d107      	bne.n	8019f0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f000 f838 	bl	8019f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	691b      	ldr	r3, [r3, #16]
 8019f14:	f003 0320 	and.w	r3, r3, #32
 8019f18:	2b20      	cmp	r3, #32
 8019f1a:	d10e      	bne.n	8019f3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	f003 0320 	and.w	r3, r3, #32
 8019f26:	2b20      	cmp	r3, #32
 8019f28:	d107      	bne.n	8019f3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f06f 0220 	mvn.w	r2, #32
 8019f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019f34:	6878      	ldr	r0, [r7, #4]
 8019f36:	f000 f891 	bl	801a05c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019f3a:	bf00      	nop
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}

08019f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019f42:	b480      	push	{r7}
 8019f44:	b083      	sub	sp, #12
 8019f46:	af00      	add	r7, sp, #0
 8019f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019f4a:	bf00      	nop
 8019f4c:	370c      	adds	r7, #12
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f54:	4770      	bx	lr

08019f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019f56:	b480      	push	{r7}
 8019f58:	b083      	sub	sp, #12
 8019f5a:	af00      	add	r7, sp, #0
 8019f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019f5e:	bf00      	nop
 8019f60:	370c      	adds	r7, #12
 8019f62:	46bd      	mov	sp, r7
 8019f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f68:	4770      	bx	lr

08019f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019f6a:	b480      	push	{r7}
 8019f6c:	b083      	sub	sp, #12
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019f72:	bf00      	nop
 8019f74:	370c      	adds	r7, #12
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr

08019f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019f7e:	b480      	push	{r7}
 8019f80:	b083      	sub	sp, #12
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019f86:	bf00      	nop
 8019f88:	370c      	adds	r7, #12
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f90:	4770      	bx	lr
	...

08019f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019f94:	b480      	push	{r7}
 8019f96:	b085      	sub	sp, #20
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
 8019f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	4a2a      	ldr	r2, [pc, #168]	; (801a050 <TIM_Base_SetConfig+0xbc>)
 8019fa8:	4293      	cmp	r3, r2
 8019faa:	d003      	beq.n	8019fb4 <TIM_Base_SetConfig+0x20>
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019fb2:	d108      	bne.n	8019fc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	68fa      	ldr	r2, [r7, #12]
 8019fc2:	4313      	orrs	r3, r2
 8019fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	4a21      	ldr	r2, [pc, #132]	; (801a050 <TIM_Base_SetConfig+0xbc>)
 8019fca:	4293      	cmp	r3, r2
 8019fcc:	d00b      	beq.n	8019fe6 <TIM_Base_SetConfig+0x52>
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019fd4:	d007      	beq.n	8019fe6 <TIM_Base_SetConfig+0x52>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	4a1e      	ldr	r2, [pc, #120]	; (801a054 <TIM_Base_SetConfig+0xc0>)
 8019fda:	4293      	cmp	r3, r2
 8019fdc:	d003      	beq.n	8019fe6 <TIM_Base_SetConfig+0x52>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	4a1d      	ldr	r2, [pc, #116]	; (801a058 <TIM_Base_SetConfig+0xc4>)
 8019fe2:	4293      	cmp	r3, r2
 8019fe4:	d108      	bne.n	8019ff8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	68db      	ldr	r3, [r3, #12]
 8019ff2:	68fa      	ldr	r2, [r7, #12]
 8019ff4:	4313      	orrs	r3, r2
 8019ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	695b      	ldr	r3, [r3, #20]
 801a002:	4313      	orrs	r3, r2
 801a004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	68fa      	ldr	r2, [r7, #12]
 801a00a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a00c:	683b      	ldr	r3, [r7, #0]
 801a00e:	689a      	ldr	r2, [r3, #8]
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a014:	683b      	ldr	r3, [r7, #0]
 801a016:	681a      	ldr	r2, [r3, #0]
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	4a0c      	ldr	r2, [pc, #48]	; (801a050 <TIM_Base_SetConfig+0xbc>)
 801a020:	4293      	cmp	r3, r2
 801a022:	d007      	beq.n	801a034 <TIM_Base_SetConfig+0xa0>
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	4a0b      	ldr	r2, [pc, #44]	; (801a054 <TIM_Base_SetConfig+0xc0>)
 801a028:	4293      	cmp	r3, r2
 801a02a:	d003      	beq.n	801a034 <TIM_Base_SetConfig+0xa0>
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	4a0a      	ldr	r2, [pc, #40]	; (801a058 <TIM_Base_SetConfig+0xc4>)
 801a030:	4293      	cmp	r3, r2
 801a032:	d103      	bne.n	801a03c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	691a      	ldr	r2, [r3, #16]
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2201      	movs	r2, #1
 801a040:	615a      	str	r2, [r3, #20]
}
 801a042:	bf00      	nop
 801a044:	3714      	adds	r7, #20
 801a046:	46bd      	mov	sp, r7
 801a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	40012c00 	.word	0x40012c00
 801a054:	40014400 	.word	0x40014400
 801a058:	40014800 	.word	0x40014800

0801a05c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a05c:	b480      	push	{r7}
 801a05e:	b083      	sub	sp, #12
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a064:	bf00      	nop
 801a066:	370c      	adds	r7, #12
 801a068:	46bd      	mov	sp, r7
 801a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06e:	4770      	bx	lr

0801a070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a070:	b480      	push	{r7}
 801a072:	b083      	sub	sp, #12
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a078:	bf00      	nop
 801a07a:	370c      	adds	r7, #12
 801a07c:	46bd      	mov	sp, r7
 801a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a082:	4770      	bx	lr

0801a084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801a08c:	bf00      	nop
 801a08e:	370c      	adds	r7, #12
 801a090:	46bd      	mov	sp, r7
 801a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a096:	4770      	bx	lr

0801a098 <LL_RCC_GetUSARTClockSource>:
{
 801a098:	b480      	push	{r7}
 801a09a:	b083      	sub	sp, #12
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801a0a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	4013      	ands	r3, r2
}
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	370c      	adds	r7, #12
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b6:	4770      	bx	lr

0801a0b8 <LL_RCC_GetLPUARTClockSource>:
{
 801a0b8:	b480      	push	{r7}
 801a0ba:	b083      	sub	sp, #12
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801a0c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	4013      	ands	r3, r2
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	370c      	adds	r7, #12
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr

0801a0d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b082      	sub	sp, #8
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d101      	bne.n	801a0ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	e042      	b.n	801a170 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d106      	bne.n	801a102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a0fc:	6878      	ldr	r0, [r7, #4]
 801a0fe:	f7e8 f943 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	2224      	movs	r2, #36	; 0x24
 801a106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	681a      	ldr	r2, [r3, #0]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	f022 0201 	bic.w	r2, r2, #1
 801a118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a11a:	6878      	ldr	r0, [r7, #4]
 801a11c:	f000 f82c 	bl	801a178 <UART_SetConfig>
 801a120:	4603      	mov	r3, r0
 801a122:	2b01      	cmp	r3, #1
 801a124:	d101      	bne.n	801a12a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801a126:	2301      	movs	r3, #1
 801a128:	e022      	b.n	801a170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d002      	beq.n	801a138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801a132:	6878      	ldr	r0, [r7, #4]
 801a134:	f000 fa48 	bl	801a5c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	685a      	ldr	r2, [r3, #4]
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	689a      	ldr	r2, [r3, #8]
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	681a      	ldr	r2, [r3, #0]
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	f042 0201 	orr.w	r2, r2, #1
 801a166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f000 facf 	bl	801a70c <UART_CheckIdleState>
 801a16e:	4603      	mov	r3, r0
}
 801a170:	4618      	mov	r0, r3
 801a172:	3708      	adds	r7, #8
 801a174:	46bd      	mov	sp, r7
 801a176:	bd80      	pop	{r7, pc}

0801a178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a17c:	b08c      	sub	sp, #48	; 0x30
 801a17e:	af00      	add	r7, sp, #0
 801a180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a182:	2300      	movs	r3, #0
 801a184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a188:	697b      	ldr	r3, [r7, #20]
 801a18a:	689a      	ldr	r2, [r3, #8]
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	691b      	ldr	r3, [r3, #16]
 801a190:	431a      	orrs	r2, r3
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	695b      	ldr	r3, [r3, #20]
 801a196:	431a      	orrs	r2, r3
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	69db      	ldr	r3, [r3, #28]
 801a19c:	4313      	orrs	r3, r2
 801a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a1a0:	697b      	ldr	r3, [r7, #20]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	681a      	ldr	r2, [r3, #0]
 801a1a6:	4baf      	ldr	r3, [pc, #700]	; (801a464 <UART_SetConfig+0x2ec>)
 801a1a8:	4013      	ands	r3, r2
 801a1aa:	697a      	ldr	r2, [r7, #20]
 801a1ac:	6812      	ldr	r2, [r2, #0]
 801a1ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1b0:	430b      	orrs	r3, r1
 801a1b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	685b      	ldr	r3, [r3, #4]
 801a1ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801a1be:	697b      	ldr	r3, [r7, #20]
 801a1c0:	68da      	ldr	r2, [r3, #12]
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	430a      	orrs	r2, r1
 801a1c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	699b      	ldr	r3, [r3, #24]
 801a1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	4aa4      	ldr	r2, [pc, #656]	; (801a468 <UART_SetConfig+0x2f0>)
 801a1d6:	4293      	cmp	r3, r2
 801a1d8:	d004      	beq.n	801a1e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a1da:	697b      	ldr	r3, [r7, #20]
 801a1dc:	6a1b      	ldr	r3, [r3, #32]
 801a1de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1e0:	4313      	orrs	r3, r2
 801a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a1e4:	697b      	ldr	r3, [r7, #20]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	689b      	ldr	r3, [r3, #8]
 801a1ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801a1ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801a1f2:	697a      	ldr	r2, [r7, #20]
 801a1f4:	6812      	ldr	r2, [r2, #0]
 801a1f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1f8:	430b      	orrs	r3, r1
 801a1fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a1fc:	697b      	ldr	r3, [r7, #20]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a202:	f023 010f 	bic.w	r1, r3, #15
 801a206:	697b      	ldr	r3, [r7, #20]
 801a208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	430a      	orrs	r2, r1
 801a210:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a212:	697b      	ldr	r3, [r7, #20]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4a95      	ldr	r2, [pc, #596]	; (801a46c <UART_SetConfig+0x2f4>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d125      	bne.n	801a268 <UART_SetConfig+0xf0>
 801a21c:	2003      	movs	r0, #3
 801a21e:	f7ff ff3b 	bl	801a098 <LL_RCC_GetUSARTClockSource>
 801a222:	4603      	mov	r3, r0
 801a224:	2b03      	cmp	r3, #3
 801a226:	d81b      	bhi.n	801a260 <UART_SetConfig+0xe8>
 801a228:	a201      	add	r2, pc, #4	; (adr r2, 801a230 <UART_SetConfig+0xb8>)
 801a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a22e:	bf00      	nop
 801a230:	0801a241 	.word	0x0801a241
 801a234:	0801a251 	.word	0x0801a251
 801a238:	0801a249 	.word	0x0801a249
 801a23c:	0801a259 	.word	0x0801a259
 801a240:	2301      	movs	r3, #1
 801a242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a246:	e042      	b.n	801a2ce <UART_SetConfig+0x156>
 801a248:	2302      	movs	r3, #2
 801a24a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a24e:	e03e      	b.n	801a2ce <UART_SetConfig+0x156>
 801a250:	2304      	movs	r3, #4
 801a252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a256:	e03a      	b.n	801a2ce <UART_SetConfig+0x156>
 801a258:	2308      	movs	r3, #8
 801a25a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a25e:	e036      	b.n	801a2ce <UART_SetConfig+0x156>
 801a260:	2310      	movs	r3, #16
 801a262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a266:	e032      	b.n	801a2ce <UART_SetConfig+0x156>
 801a268:	697b      	ldr	r3, [r7, #20]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	4a7e      	ldr	r2, [pc, #504]	; (801a468 <UART_SetConfig+0x2f0>)
 801a26e:	4293      	cmp	r3, r2
 801a270:	d12a      	bne.n	801a2c8 <UART_SetConfig+0x150>
 801a272:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a276:	f7ff ff1f 	bl	801a0b8 <LL_RCC_GetLPUARTClockSource>
 801a27a:	4603      	mov	r3, r0
 801a27c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a280:	d01a      	beq.n	801a2b8 <UART_SetConfig+0x140>
 801a282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a286:	d81b      	bhi.n	801a2c0 <UART_SetConfig+0x148>
 801a288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a28c:	d00c      	beq.n	801a2a8 <UART_SetConfig+0x130>
 801a28e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a292:	d815      	bhi.n	801a2c0 <UART_SetConfig+0x148>
 801a294:	2b00      	cmp	r3, #0
 801a296:	d003      	beq.n	801a2a0 <UART_SetConfig+0x128>
 801a298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a29c:	d008      	beq.n	801a2b0 <UART_SetConfig+0x138>
 801a29e:	e00f      	b.n	801a2c0 <UART_SetConfig+0x148>
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2a6:	e012      	b.n	801a2ce <UART_SetConfig+0x156>
 801a2a8:	2302      	movs	r3, #2
 801a2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2ae:	e00e      	b.n	801a2ce <UART_SetConfig+0x156>
 801a2b0:	2304      	movs	r3, #4
 801a2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2b6:	e00a      	b.n	801a2ce <UART_SetConfig+0x156>
 801a2b8:	2308      	movs	r3, #8
 801a2ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2be:	e006      	b.n	801a2ce <UART_SetConfig+0x156>
 801a2c0:	2310      	movs	r3, #16
 801a2c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2c6:	e002      	b.n	801a2ce <UART_SetConfig+0x156>
 801a2c8:	2310      	movs	r3, #16
 801a2ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	4a65      	ldr	r2, [pc, #404]	; (801a468 <UART_SetConfig+0x2f0>)
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	f040 8097 	bne.w	801a408 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a2da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a2de:	2b08      	cmp	r3, #8
 801a2e0:	d823      	bhi.n	801a32a <UART_SetConfig+0x1b2>
 801a2e2:	a201      	add	r2, pc, #4	; (adr r2, 801a2e8 <UART_SetConfig+0x170>)
 801a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2e8:	0801a30d 	.word	0x0801a30d
 801a2ec:	0801a32b 	.word	0x0801a32b
 801a2f0:	0801a315 	.word	0x0801a315
 801a2f4:	0801a32b 	.word	0x0801a32b
 801a2f8:	0801a31b 	.word	0x0801a31b
 801a2fc:	0801a32b 	.word	0x0801a32b
 801a300:	0801a32b 	.word	0x0801a32b
 801a304:	0801a32b 	.word	0x0801a32b
 801a308:	0801a323 	.word	0x0801a323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a30c:	f7fe ff00 	bl	8019110 <HAL_RCC_GetPCLK1Freq>
 801a310:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a312:	e010      	b.n	801a336 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a314:	4b56      	ldr	r3, [pc, #344]	; (801a470 <UART_SetConfig+0x2f8>)
 801a316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a318:	e00d      	b.n	801a336 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a31a:	f7fe fe79 	bl	8019010 <HAL_RCC_GetSysClockFreq>
 801a31e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a320:	e009      	b.n	801a336 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a328:	e005      	b.n	801a336 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801a32a:	2300      	movs	r3, #0
 801a32c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a32e:	2301      	movs	r3, #1
 801a330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a338:	2b00      	cmp	r3, #0
 801a33a:	f000 812b 	beq.w	801a594 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a33e:	697b      	ldr	r3, [r7, #20]
 801a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a342:	4a4c      	ldr	r2, [pc, #304]	; (801a474 <UART_SetConfig+0x2fc>)
 801a344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a348:	461a      	mov	r2, r3
 801a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a34c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a350:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	685a      	ldr	r2, [r3, #4]
 801a356:	4613      	mov	r3, r2
 801a358:	005b      	lsls	r3, r3, #1
 801a35a:	4413      	add	r3, r2
 801a35c:	69ba      	ldr	r2, [r7, #24]
 801a35e:	429a      	cmp	r2, r3
 801a360:	d305      	bcc.n	801a36e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	685b      	ldr	r3, [r3, #4]
 801a366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a368:	69ba      	ldr	r2, [r7, #24]
 801a36a:	429a      	cmp	r2, r3
 801a36c:	d903      	bls.n	801a376 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801a36e:	2301      	movs	r3, #1
 801a370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a374:	e10e      	b.n	801a594 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a378:	2200      	movs	r2, #0
 801a37a:	60bb      	str	r3, [r7, #8]
 801a37c:	60fa      	str	r2, [r7, #12]
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a382:	4a3c      	ldr	r2, [pc, #240]	; (801a474 <UART_SetConfig+0x2fc>)
 801a384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a388:	b29b      	uxth	r3, r3
 801a38a:	2200      	movs	r2, #0
 801a38c:	603b      	str	r3, [r7, #0]
 801a38e:	607a      	str	r2, [r7, #4]
 801a390:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a398:	f7e6 fc2e 	bl	8000bf8 <__aeabi_uldivmod>
 801a39c:	4602      	mov	r2, r0
 801a39e:	460b      	mov	r3, r1
 801a3a0:	4610      	mov	r0, r2
 801a3a2:	4619      	mov	r1, r3
 801a3a4:	f04f 0200 	mov.w	r2, #0
 801a3a8:	f04f 0300 	mov.w	r3, #0
 801a3ac:	020b      	lsls	r3, r1, #8
 801a3ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a3b2:	0202      	lsls	r2, r0, #8
 801a3b4:	6979      	ldr	r1, [r7, #20]
 801a3b6:	6849      	ldr	r1, [r1, #4]
 801a3b8:	0849      	lsrs	r1, r1, #1
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	460c      	mov	r4, r1
 801a3be:	4605      	mov	r5, r0
 801a3c0:	eb12 0804 	adds.w	r8, r2, r4
 801a3c4:	eb43 0905 	adc.w	r9, r3, r5
 801a3c8:	697b      	ldr	r3, [r7, #20]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	469a      	mov	sl, r3
 801a3d0:	4693      	mov	fp, r2
 801a3d2:	4652      	mov	r2, sl
 801a3d4:	465b      	mov	r3, fp
 801a3d6:	4640      	mov	r0, r8
 801a3d8:	4649      	mov	r1, r9
 801a3da:	f7e6 fc0d 	bl	8000bf8 <__aeabi_uldivmod>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a3e6:	6a3b      	ldr	r3, [r7, #32]
 801a3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a3ec:	d308      	bcc.n	801a400 <UART_SetConfig+0x288>
 801a3ee:	6a3b      	ldr	r3, [r7, #32]
 801a3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a3f4:	d204      	bcs.n	801a400 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801a3f6:	697b      	ldr	r3, [r7, #20]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	6a3a      	ldr	r2, [r7, #32]
 801a3fc:	60da      	str	r2, [r3, #12]
 801a3fe:	e0c9      	b.n	801a594 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801a400:	2301      	movs	r3, #1
 801a402:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a406:	e0c5      	b.n	801a594 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a408:	697b      	ldr	r3, [r7, #20]
 801a40a:	69db      	ldr	r3, [r3, #28]
 801a40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a410:	d16d      	bne.n	801a4ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801a412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a416:	3b01      	subs	r3, #1
 801a418:	2b07      	cmp	r3, #7
 801a41a:	d82d      	bhi.n	801a478 <UART_SetConfig+0x300>
 801a41c:	a201      	add	r2, pc, #4	; (adr r2, 801a424 <UART_SetConfig+0x2ac>)
 801a41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a422:	bf00      	nop
 801a424:	0801a445 	.word	0x0801a445
 801a428:	0801a44d 	.word	0x0801a44d
 801a42c:	0801a479 	.word	0x0801a479
 801a430:	0801a453 	.word	0x0801a453
 801a434:	0801a479 	.word	0x0801a479
 801a438:	0801a479 	.word	0x0801a479
 801a43c:	0801a479 	.word	0x0801a479
 801a440:	0801a45b 	.word	0x0801a45b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a444:	f7fe fe7a 	bl	801913c <HAL_RCC_GetPCLK2Freq>
 801a448:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a44a:	e01b      	b.n	801a484 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a44c:	4b08      	ldr	r3, [pc, #32]	; (801a470 <UART_SetConfig+0x2f8>)
 801a44e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a450:	e018      	b.n	801a484 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a452:	f7fe fddd 	bl	8019010 <HAL_RCC_GetSysClockFreq>
 801a456:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a458:	e014      	b.n	801a484 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a45a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a45e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a460:	e010      	b.n	801a484 <UART_SetConfig+0x30c>
 801a462:	bf00      	nop
 801a464:	cfff69f3 	.word	0xcfff69f3
 801a468:	40008000 	.word	0x40008000
 801a46c:	40013800 	.word	0x40013800
 801a470:	00f42400 	.word	0x00f42400
 801a474:	0801dd20 	.word	0x0801dd20
      default:
        pclk = 0U;
 801a478:	2300      	movs	r3, #0
 801a47a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a47c:	2301      	movs	r3, #1
 801a47e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a482:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a486:	2b00      	cmp	r3, #0
 801a488:	f000 8084 	beq.w	801a594 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a490:	4a4b      	ldr	r2, [pc, #300]	; (801a5c0 <UART_SetConfig+0x448>)
 801a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a496:	461a      	mov	r2, r3
 801a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a49e:	005a      	lsls	r2, r3, #1
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	085b      	lsrs	r3, r3, #1
 801a4a6:	441a      	add	r2, r3
 801a4a8:	697b      	ldr	r3, [r7, #20]
 801a4aa:	685b      	ldr	r3, [r3, #4]
 801a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a4b2:	6a3b      	ldr	r3, [r7, #32]
 801a4b4:	2b0f      	cmp	r3, #15
 801a4b6:	d916      	bls.n	801a4e6 <UART_SetConfig+0x36e>
 801a4b8:	6a3b      	ldr	r3, [r7, #32]
 801a4ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4be:	d212      	bcs.n	801a4e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a4c0:	6a3b      	ldr	r3, [r7, #32]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	f023 030f 	bic.w	r3, r3, #15
 801a4c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a4ca:	6a3b      	ldr	r3, [r7, #32]
 801a4cc:	085b      	lsrs	r3, r3, #1
 801a4ce:	b29b      	uxth	r3, r3
 801a4d0:	f003 0307 	and.w	r3, r3, #7
 801a4d4:	b29a      	uxth	r2, r3
 801a4d6:	8bfb      	ldrh	r3, [r7, #30]
 801a4d8:	4313      	orrs	r3, r2
 801a4da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801a4dc:	697b      	ldr	r3, [r7, #20]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	8bfa      	ldrh	r2, [r7, #30]
 801a4e2:	60da      	str	r2, [r3, #12]
 801a4e4:	e056      	b.n	801a594 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a4ec:	e052      	b.n	801a594 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a4ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a4f2:	3b01      	subs	r3, #1
 801a4f4:	2b07      	cmp	r3, #7
 801a4f6:	d822      	bhi.n	801a53e <UART_SetConfig+0x3c6>
 801a4f8:	a201      	add	r2, pc, #4	; (adr r2, 801a500 <UART_SetConfig+0x388>)
 801a4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4fe:	bf00      	nop
 801a500:	0801a521 	.word	0x0801a521
 801a504:	0801a529 	.word	0x0801a529
 801a508:	0801a53f 	.word	0x0801a53f
 801a50c:	0801a52f 	.word	0x0801a52f
 801a510:	0801a53f 	.word	0x0801a53f
 801a514:	0801a53f 	.word	0x0801a53f
 801a518:	0801a53f 	.word	0x0801a53f
 801a51c:	0801a537 	.word	0x0801a537
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a520:	f7fe fe0c 	bl	801913c <HAL_RCC_GetPCLK2Freq>
 801a524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a526:	e010      	b.n	801a54a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a528:	4b26      	ldr	r3, [pc, #152]	; (801a5c4 <UART_SetConfig+0x44c>)
 801a52a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a52c:	e00d      	b.n	801a54a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a52e:	f7fe fd6f 	bl	8019010 <HAL_RCC_GetSysClockFreq>
 801a532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a534:	e009      	b.n	801a54a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a53a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a53c:	e005      	b.n	801a54a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801a53e:	2300      	movs	r3, #0
 801a540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a542:	2301      	movs	r3, #1
 801a544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a548:	bf00      	nop
    }

    if (pclk != 0U)
 801a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d021      	beq.n	801a594 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a550:	697b      	ldr	r3, [r7, #20]
 801a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a554:	4a1a      	ldr	r2, [pc, #104]	; (801a5c0 <UART_SetConfig+0x448>)
 801a556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a55a:	461a      	mov	r2, r3
 801a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a55e:	fbb3 f2f2 	udiv	r2, r3, r2
 801a562:	697b      	ldr	r3, [r7, #20]
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	085b      	lsrs	r3, r3, #1
 801a568:	441a      	add	r2, r3
 801a56a:	697b      	ldr	r3, [r7, #20]
 801a56c:	685b      	ldr	r3, [r3, #4]
 801a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a574:	6a3b      	ldr	r3, [r7, #32]
 801a576:	2b0f      	cmp	r3, #15
 801a578:	d909      	bls.n	801a58e <UART_SetConfig+0x416>
 801a57a:	6a3b      	ldr	r3, [r7, #32]
 801a57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a580:	d205      	bcs.n	801a58e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a582:	6a3b      	ldr	r3, [r7, #32]
 801a584:	b29a      	uxth	r2, r3
 801a586:	697b      	ldr	r3, [r7, #20]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	60da      	str	r2, [r3, #12]
 801a58c:	e002      	b.n	801a594 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a58e:	2301      	movs	r3, #1
 801a590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a594:	697b      	ldr	r3, [r7, #20]
 801a596:	2201      	movs	r2, #1
 801a598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	2201      	movs	r2, #1
 801a5a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a5a4:	697b      	ldr	r3, [r7, #20]
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	2200      	movs	r2, #0
 801a5ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801a5b0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3730      	adds	r7, #48	; 0x30
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a5be:	bf00      	nop
 801a5c0:	0801dd20 	.word	0x0801dd20
 801a5c4:	00f42400 	.word	0x00f42400

0801a5c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a5c8:	b480      	push	{r7}
 801a5ca:	b083      	sub	sp, #12
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5d4:	f003 0301 	and.w	r3, r3, #1
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d00a      	beq.n	801a5f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	430a      	orrs	r2, r1
 801a5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5f6:	f003 0302 	and.w	r3, r3, #2
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d00a      	beq.n	801a614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	430a      	orrs	r2, r1
 801a612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a618:	f003 0304 	and.w	r3, r3, #4
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d00a      	beq.n	801a636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	685b      	ldr	r3, [r3, #4]
 801a626:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	430a      	orrs	r2, r1
 801a634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a63a:	f003 0308 	and.w	r3, r3, #8
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d00a      	beq.n	801a658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	685b      	ldr	r3, [r3, #4]
 801a648:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	430a      	orrs	r2, r1
 801a656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65c:	f003 0310 	and.w	r3, r3, #16
 801a660:	2b00      	cmp	r3, #0
 801a662:	d00a      	beq.n	801a67a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	689b      	ldr	r3, [r3, #8]
 801a66a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	430a      	orrs	r2, r1
 801a678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a67e:	f003 0320 	and.w	r3, r3, #32
 801a682:	2b00      	cmp	r3, #0
 801a684:	d00a      	beq.n	801a69c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	689b      	ldr	r3, [r3, #8]
 801a68c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	430a      	orrs	r2, r1
 801a69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d01a      	beq.n	801a6de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	685b      	ldr	r3, [r3, #4]
 801a6ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	430a      	orrs	r2, r1
 801a6bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a6c6:	d10a      	bne.n	801a6de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	685b      	ldr	r3, [r3, #4]
 801a6ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	430a      	orrs	r2, r1
 801a6dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d00a      	beq.n	801a700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	685b      	ldr	r3, [r3, #4]
 801a6f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	430a      	orrs	r2, r1
 801a6fe:	605a      	str	r2, [r3, #4]
  }
}
 801a700:	bf00      	nop
 801a702:	370c      	adds	r7, #12
 801a704:	46bd      	mov	sp, r7
 801a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70a:	4770      	bx	lr

0801a70c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b086      	sub	sp, #24
 801a710:	af02      	add	r7, sp, #8
 801a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2200      	movs	r2, #0
 801a718:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a71c:	f7fb ff40 	bl	80165a0 <HAL_GetTick>
 801a720:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	f003 0308 	and.w	r3, r3, #8
 801a72c:	2b08      	cmp	r3, #8
 801a72e:	d10e      	bne.n	801a74e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a734:	9300      	str	r3, [sp, #0]
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	2200      	movs	r2, #0
 801a73a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f000 f832 	bl	801a7a8 <UART_WaitOnFlagUntilTimeout>
 801a744:	4603      	mov	r3, r0
 801a746:	2b00      	cmp	r3, #0
 801a748:	d001      	beq.n	801a74e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a74a:	2303      	movs	r3, #3
 801a74c:	e028      	b.n	801a7a0 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	f003 0304 	and.w	r3, r3, #4
 801a758:	2b04      	cmp	r3, #4
 801a75a:	d10e      	bne.n	801a77a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a75c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a760:	9300      	str	r3, [sp, #0]
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	2200      	movs	r2, #0
 801a766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a76a:	6878      	ldr	r0, [r7, #4]
 801a76c:	f000 f81c 	bl	801a7a8 <UART_WaitOnFlagUntilTimeout>
 801a770:	4603      	mov	r3, r0
 801a772:	2b00      	cmp	r3, #0
 801a774:	d001      	beq.n	801a77a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a776:	2303      	movs	r3, #3
 801a778:	e012      	b.n	801a7a0 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	2220      	movs	r2, #32
 801a77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	2220      	movs	r2, #32
 801a786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2200      	movs	r2, #0
 801a78e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2200      	movs	r2, #0
 801a794:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	2200      	movs	r2, #0
 801a79a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a79e:	2300      	movs	r3, #0
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3710      	adds	r7, #16
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}

0801a7a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b09c      	sub	sp, #112	; 0x70
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	60f8      	str	r0, [r7, #12]
 801a7b0:	60b9      	str	r1, [r7, #8]
 801a7b2:	603b      	str	r3, [r7, #0]
 801a7b4:	4613      	mov	r3, r2
 801a7b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a7b8:	e0a9      	b.n	801a90e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7c0:	f000 80a5 	beq.w	801a90e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a7c4:	f7fb feec 	bl	80165a0 <HAL_GetTick>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	1ad3      	subs	r3, r2, r3
 801a7ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d302      	bcc.n	801a7da <UART_WaitOnFlagUntilTimeout+0x32>
 801a7d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d140      	bne.n	801a85c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7e2:	e853 3f00 	ldrex	r3, [r3]
 801a7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801a7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a7ee:	667b      	str	r3, [r7, #100]	; 0x64
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	461a      	mov	r2, r3
 801a7f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a7f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a7fa:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a7fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a800:	e841 2300 	strex	r3, r2, [r1]
 801a804:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801a806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d1e6      	bne.n	801a7da <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	3308      	adds	r3, #8
 801a812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a816:	e853 3f00 	ldrex	r3, [r3]
 801a81a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a81e:	f023 0301 	bic.w	r3, r3, #1
 801a822:	663b      	str	r3, [r7, #96]	; 0x60
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	3308      	adds	r3, #8
 801a82a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a82c:	64ba      	str	r2, [r7, #72]	; 0x48
 801a82e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a830:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a834:	e841 2300 	strex	r3, r2, [r1]
 801a838:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801a83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d1e5      	bne.n	801a80c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	2220      	movs	r2, #32
 801a844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	2220      	movs	r2, #32
 801a84c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	2200      	movs	r2, #0
 801a854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 801a858:	2303      	movs	r3, #3
 801a85a:	e069      	b.n	801a930 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	f003 0304 	and.w	r3, r3, #4
 801a866:	2b00      	cmp	r3, #0
 801a868:	d051      	beq.n	801a90e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	69db      	ldr	r3, [r3, #28]
 801a870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a878:	d149      	bne.n	801a90e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a882:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a88c:	e853 3f00 	ldrex	r3, [r3]
 801a890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a898:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	461a      	mov	r2, r3
 801a8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8a2:	637b      	str	r3, [r7, #52]	; 0x34
 801a8a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8aa:	e841 2300 	strex	r3, r2, [r1]
 801a8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d1e6      	bne.n	801a884 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	3308      	adds	r3, #8
 801a8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8be:	697b      	ldr	r3, [r7, #20]
 801a8c0:	e853 3f00 	ldrex	r3, [r3]
 801a8c4:	613b      	str	r3, [r7, #16]
   return(result);
 801a8c6:	693b      	ldr	r3, [r7, #16]
 801a8c8:	f023 0301 	bic.w	r3, r3, #1
 801a8cc:	66bb      	str	r3, [r7, #104]	; 0x68
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	3308      	adds	r3, #8
 801a8d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a8d6:	623a      	str	r2, [r7, #32]
 801a8d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8da:	69f9      	ldr	r1, [r7, #28]
 801a8dc:	6a3a      	ldr	r2, [r7, #32]
 801a8de:	e841 2300 	strex	r3, r2, [r1]
 801a8e2:	61bb      	str	r3, [r7, #24]
   return(result);
 801a8e4:	69bb      	ldr	r3, [r7, #24]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d1e5      	bne.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	2220      	movs	r2, #32
 801a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	2220      	movs	r2, #32
 801a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	2220      	movs	r2, #32
 801a8fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2200      	movs	r2, #0
 801a906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801a90a:	2303      	movs	r3, #3
 801a90c:	e010      	b.n	801a930 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	69da      	ldr	r2, [r3, #28]
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	4013      	ands	r3, r2
 801a918:	68ba      	ldr	r2, [r7, #8]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	bf0c      	ite	eq
 801a91e:	2301      	moveq	r3, #1
 801a920:	2300      	movne	r3, #0
 801a922:	b2db      	uxtb	r3, r3
 801a924:	461a      	mov	r2, r3
 801a926:	79fb      	ldrb	r3, [r7, #7]
 801a928:	429a      	cmp	r2, r3
 801a92a:	f43f af46 	beq.w	801a7ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a92e:	2300      	movs	r3, #0
}
 801a930:	4618      	mov	r0, r3
 801a932:	3770      	adds	r7, #112	; 0x70
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a938:	b480      	push	{r7}
 801a93a:	b085      	sub	sp, #20
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a946:	2b01      	cmp	r3, #1
 801a948:	d101      	bne.n	801a94e <HAL_UARTEx_DisableFifoMode+0x16>
 801a94a:	2302      	movs	r3, #2
 801a94c:	e027      	b.n	801a99e <HAL_UARTEx_DisableFifoMode+0x66>
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	2201      	movs	r2, #1
 801a952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2224      	movs	r2, #36	; 0x24
 801a95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	681a      	ldr	r2, [r3, #0]
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f022 0201 	bic.w	r2, r2, #1
 801a974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a97c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2200      	movs	r2, #0
 801a982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	68fa      	ldr	r2, [r7, #12]
 801a98a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2220      	movs	r2, #32
 801a990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2200      	movs	r2, #0
 801a998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a99c:	2300      	movs	r3, #0
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	3714      	adds	r7, #20
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a8:	4770      	bx	lr

0801a9aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b084      	sub	sp, #16
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	6078      	str	r0, [r7, #4]
 801a9b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a9ba:	2b01      	cmp	r3, #1
 801a9bc:	d101      	bne.n	801a9c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a9be:	2302      	movs	r3, #2
 801a9c0:	e02d      	b.n	801aa1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2201      	movs	r2, #1
 801a9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2224      	movs	r2, #36	; 0x24
 801a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	681a      	ldr	r2, [r3, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	f022 0201 	bic.w	r2, r2, #1
 801a9e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	689b      	ldr	r3, [r3, #8]
 801a9f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	683a      	ldr	r2, [r7, #0]
 801a9fa:	430a      	orrs	r2, r1
 801a9fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a9fe:	6878      	ldr	r0, [r7, #4]
 801aa00:	f000 f850 	bl	801aaa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	68fa      	ldr	r2, [r7, #12]
 801aa0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2220      	movs	r2, #32
 801aa10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2200      	movs	r2, #0
 801aa18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801aa1c:	2300      	movs	r3, #0
}
 801aa1e:	4618      	mov	r0, r3
 801aa20:	3710      	adds	r7, #16
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}

0801aa26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801aa26:	b580      	push	{r7, lr}
 801aa28:	b084      	sub	sp, #16
 801aa2a:	af00      	add	r7, sp, #0
 801aa2c:	6078      	str	r0, [r7, #4]
 801aa2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d101      	bne.n	801aa3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aa3a:	2302      	movs	r3, #2
 801aa3c:	e02d      	b.n	801aa9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	2201      	movs	r2, #1
 801aa42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	2224      	movs	r2, #36	; 0x24
 801aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	681a      	ldr	r2, [r3, #0]
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	f022 0201 	bic.w	r2, r2, #1
 801aa64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	689b      	ldr	r3, [r3, #8]
 801aa6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	683a      	ldr	r2, [r7, #0]
 801aa76:	430a      	orrs	r2, r1
 801aa78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aa7a:	6878      	ldr	r0, [r7, #4]
 801aa7c:	f000 f812 	bl	801aaa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	68fa      	ldr	r2, [r7, #12]
 801aa86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	2220      	movs	r2, #32
 801aa8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	2200      	movs	r2, #0
 801aa94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801aa98:	2300      	movs	r3, #0
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	3710      	adds	r7, #16
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}
	...

0801aaa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801aaa4:	b480      	push	{r7}
 801aaa6:	b085      	sub	sp, #20
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d108      	bne.n	801aac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	2201      	movs	r2, #1
 801aab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	2201      	movs	r2, #1
 801aac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801aac4:	e031      	b.n	801ab2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801aac6:	2308      	movs	r3, #8
 801aac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801aaca:	2308      	movs	r3, #8
 801aacc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	689b      	ldr	r3, [r3, #8]
 801aad4:	0e5b      	lsrs	r3, r3, #25
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	f003 0307 	and.w	r3, r3, #7
 801aadc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	689b      	ldr	r3, [r3, #8]
 801aae4:	0f5b      	lsrs	r3, r3, #29
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	f003 0307 	and.w	r3, r3, #7
 801aaec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801aaee:	7bbb      	ldrb	r3, [r7, #14]
 801aaf0:	7b3a      	ldrb	r2, [r7, #12]
 801aaf2:	4911      	ldr	r1, [pc, #68]	; (801ab38 <UARTEx_SetNbDataToProcess+0x94>)
 801aaf4:	5c8a      	ldrb	r2, [r1, r2]
 801aaf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801aafa:	7b3a      	ldrb	r2, [r7, #12]
 801aafc:	490f      	ldr	r1, [pc, #60]	; (801ab3c <UARTEx_SetNbDataToProcess+0x98>)
 801aafe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ab00:	fb93 f3f2 	sdiv	r3, r3, r2
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab0c:	7bfb      	ldrb	r3, [r7, #15]
 801ab0e:	7b7a      	ldrb	r2, [r7, #13]
 801ab10:	4909      	ldr	r1, [pc, #36]	; (801ab38 <UARTEx_SetNbDataToProcess+0x94>)
 801ab12:	5c8a      	ldrb	r2, [r1, r2]
 801ab14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ab18:	7b7a      	ldrb	r2, [r7, #13]
 801ab1a:	4908      	ldr	r1, [pc, #32]	; (801ab3c <UARTEx_SetNbDataToProcess+0x98>)
 801ab1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab1e:	fb93 f3f2 	sdiv	r3, r3, r2
 801ab22:	b29a      	uxth	r2, r3
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801ab2a:	bf00      	nop
 801ab2c:	3714      	adds	r7, #20
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab34:	4770      	bx	lr
 801ab36:	bf00      	nop
 801ab38:	0801dd38 	.word	0x0801dd38
 801ab3c:	0801dd40 	.word	0x0801dd40

0801ab40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801ab40:	b480      	push	{r7}
 801ab42:	b085      	sub	sp, #20
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ab48:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801ab4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801ab54:	b29a      	uxth	r2, r3
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	b29b      	uxth	r3, r3
 801ab5a:	43db      	mvns	r3, r3
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	4013      	ands	r3, r2
 801ab60:	b29a      	uxth	r2, r3
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801ab68:	2300      	movs	r3, #0
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3714      	adds	r7, #20
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab74:	4770      	bx	lr

0801ab76 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801ab76:	b084      	sub	sp, #16
 801ab78:	b480      	push	{r7}
 801ab7a:	b083      	sub	sp, #12
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	f107 0014 	add.w	r0, r7, #20
 801ab84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	2201      	movs	r2, #1
 801ab8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	2200      	movs	r2, #0
 801ab94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2200      	movs	r2, #0
 801aba4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801aba8:	2300      	movs	r3, #0
}
 801abaa:	4618      	mov	r0, r3
 801abac:	370c      	adds	r7, #12
 801abae:	46bd      	mov	sp, r7
 801abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb4:	b004      	add	sp, #16
 801abb6:	4770      	bx	lr

0801abb8 <__errno>:
 801abb8:	4b01      	ldr	r3, [pc, #4]	; (801abc0 <__errno+0x8>)
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	4770      	bx	lr
 801abbe:	bf00      	nop
 801abc0:	20000078 	.word	0x20000078

0801abc4 <__libc_init_array>:
 801abc4:	b570      	push	{r4, r5, r6, lr}
 801abc6:	4d0d      	ldr	r5, [pc, #52]	; (801abfc <__libc_init_array+0x38>)
 801abc8:	4c0d      	ldr	r4, [pc, #52]	; (801ac00 <__libc_init_array+0x3c>)
 801abca:	1b64      	subs	r4, r4, r5
 801abcc:	10a4      	asrs	r4, r4, #2
 801abce:	2600      	movs	r6, #0
 801abd0:	42a6      	cmp	r6, r4
 801abd2:	d109      	bne.n	801abe8 <__libc_init_array+0x24>
 801abd4:	4d0b      	ldr	r5, [pc, #44]	; (801ac04 <__libc_init_array+0x40>)
 801abd6:	4c0c      	ldr	r4, [pc, #48]	; (801ac08 <__libc_init_array+0x44>)
 801abd8:	f002 fe36 	bl	801d848 <_init>
 801abdc:	1b64      	subs	r4, r4, r5
 801abde:	10a4      	asrs	r4, r4, #2
 801abe0:	2600      	movs	r6, #0
 801abe2:	42a6      	cmp	r6, r4
 801abe4:	d105      	bne.n	801abf2 <__libc_init_array+0x2e>
 801abe6:	bd70      	pop	{r4, r5, r6, pc}
 801abe8:	f855 3b04 	ldr.w	r3, [r5], #4
 801abec:	4798      	blx	r3
 801abee:	3601      	adds	r6, #1
 801abf0:	e7ee      	b.n	801abd0 <__libc_init_array+0xc>
 801abf2:	f855 3b04 	ldr.w	r3, [r5], #4
 801abf6:	4798      	blx	r3
 801abf8:	3601      	adds	r6, #1
 801abfa:	e7f2      	b.n	801abe2 <__libc_init_array+0x1e>
 801abfc:	0801e12c 	.word	0x0801e12c
 801ac00:	0801e12c 	.word	0x0801e12c
 801ac04:	0801e12c 	.word	0x0801e12c
 801ac08:	0801e130 	.word	0x0801e130

0801ac0c <memcpy>:
 801ac0c:	440a      	add	r2, r1
 801ac0e:	4291      	cmp	r1, r2
 801ac10:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac14:	d100      	bne.n	801ac18 <memcpy+0xc>
 801ac16:	4770      	bx	lr
 801ac18:	b510      	push	{r4, lr}
 801ac1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac22:	4291      	cmp	r1, r2
 801ac24:	d1f9      	bne.n	801ac1a <memcpy+0xe>
 801ac26:	bd10      	pop	{r4, pc}

0801ac28 <memset>:
 801ac28:	4402      	add	r2, r0
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d100      	bne.n	801ac32 <memset+0xa>
 801ac30:	4770      	bx	lr
 801ac32:	f803 1b01 	strb.w	r1, [r3], #1
 801ac36:	e7f9      	b.n	801ac2c <memset+0x4>

0801ac38 <__cvt>:
 801ac38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac3c:	ec55 4b10 	vmov	r4, r5, d0
 801ac40:	2d00      	cmp	r5, #0
 801ac42:	460e      	mov	r6, r1
 801ac44:	4619      	mov	r1, r3
 801ac46:	462b      	mov	r3, r5
 801ac48:	bfbb      	ittet	lt
 801ac4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ac4e:	461d      	movlt	r5, r3
 801ac50:	2300      	movge	r3, #0
 801ac52:	232d      	movlt	r3, #45	; 0x2d
 801ac54:	700b      	strb	r3, [r1, #0]
 801ac56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ac5c:	4691      	mov	r9, r2
 801ac5e:	f023 0820 	bic.w	r8, r3, #32
 801ac62:	bfbc      	itt	lt
 801ac64:	4622      	movlt	r2, r4
 801ac66:	4614      	movlt	r4, r2
 801ac68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ac6c:	d005      	beq.n	801ac7a <__cvt+0x42>
 801ac6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ac72:	d100      	bne.n	801ac76 <__cvt+0x3e>
 801ac74:	3601      	adds	r6, #1
 801ac76:	2102      	movs	r1, #2
 801ac78:	e000      	b.n	801ac7c <__cvt+0x44>
 801ac7a:	2103      	movs	r1, #3
 801ac7c:	ab03      	add	r3, sp, #12
 801ac7e:	9301      	str	r3, [sp, #4]
 801ac80:	ab02      	add	r3, sp, #8
 801ac82:	9300      	str	r3, [sp, #0]
 801ac84:	ec45 4b10 	vmov	d0, r4, r5
 801ac88:	4653      	mov	r3, sl
 801ac8a:	4632      	mov	r2, r6
 801ac8c:	f000 fe44 	bl	801b918 <_dtoa_r>
 801ac90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ac94:	4607      	mov	r7, r0
 801ac96:	d102      	bne.n	801ac9e <__cvt+0x66>
 801ac98:	f019 0f01 	tst.w	r9, #1
 801ac9c:	d022      	beq.n	801ace4 <__cvt+0xac>
 801ac9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aca2:	eb07 0906 	add.w	r9, r7, r6
 801aca6:	d110      	bne.n	801acca <__cvt+0x92>
 801aca8:	783b      	ldrb	r3, [r7, #0]
 801acaa:	2b30      	cmp	r3, #48	; 0x30
 801acac:	d10a      	bne.n	801acc4 <__cvt+0x8c>
 801acae:	2200      	movs	r2, #0
 801acb0:	2300      	movs	r3, #0
 801acb2:	4620      	mov	r0, r4
 801acb4:	4629      	mov	r1, r5
 801acb6:	f7e5 fedf 	bl	8000a78 <__aeabi_dcmpeq>
 801acba:	b918      	cbnz	r0, 801acc4 <__cvt+0x8c>
 801acbc:	f1c6 0601 	rsb	r6, r6, #1
 801acc0:	f8ca 6000 	str.w	r6, [sl]
 801acc4:	f8da 3000 	ldr.w	r3, [sl]
 801acc8:	4499      	add	r9, r3
 801acca:	2200      	movs	r2, #0
 801accc:	2300      	movs	r3, #0
 801acce:	4620      	mov	r0, r4
 801acd0:	4629      	mov	r1, r5
 801acd2:	f7e5 fed1 	bl	8000a78 <__aeabi_dcmpeq>
 801acd6:	b108      	cbz	r0, 801acdc <__cvt+0xa4>
 801acd8:	f8cd 900c 	str.w	r9, [sp, #12]
 801acdc:	2230      	movs	r2, #48	; 0x30
 801acde:	9b03      	ldr	r3, [sp, #12]
 801ace0:	454b      	cmp	r3, r9
 801ace2:	d307      	bcc.n	801acf4 <__cvt+0xbc>
 801ace4:	9b03      	ldr	r3, [sp, #12]
 801ace6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ace8:	1bdb      	subs	r3, r3, r7
 801acea:	4638      	mov	r0, r7
 801acec:	6013      	str	r3, [r2, #0]
 801acee:	b004      	add	sp, #16
 801acf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acf4:	1c59      	adds	r1, r3, #1
 801acf6:	9103      	str	r1, [sp, #12]
 801acf8:	701a      	strb	r2, [r3, #0]
 801acfa:	e7f0      	b.n	801acde <__cvt+0xa6>

0801acfc <__exponent>:
 801acfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801acfe:	4603      	mov	r3, r0
 801ad00:	2900      	cmp	r1, #0
 801ad02:	bfb8      	it	lt
 801ad04:	4249      	neglt	r1, r1
 801ad06:	f803 2b02 	strb.w	r2, [r3], #2
 801ad0a:	bfb4      	ite	lt
 801ad0c:	222d      	movlt	r2, #45	; 0x2d
 801ad0e:	222b      	movge	r2, #43	; 0x2b
 801ad10:	2909      	cmp	r1, #9
 801ad12:	7042      	strb	r2, [r0, #1]
 801ad14:	dd2a      	ble.n	801ad6c <__exponent+0x70>
 801ad16:	f10d 0407 	add.w	r4, sp, #7
 801ad1a:	46a4      	mov	ip, r4
 801ad1c:	270a      	movs	r7, #10
 801ad1e:	46a6      	mov	lr, r4
 801ad20:	460a      	mov	r2, r1
 801ad22:	fb91 f6f7 	sdiv	r6, r1, r7
 801ad26:	fb07 1516 	mls	r5, r7, r6, r1
 801ad2a:	3530      	adds	r5, #48	; 0x30
 801ad2c:	2a63      	cmp	r2, #99	; 0x63
 801ad2e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ad32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ad36:	4631      	mov	r1, r6
 801ad38:	dcf1      	bgt.n	801ad1e <__exponent+0x22>
 801ad3a:	3130      	adds	r1, #48	; 0x30
 801ad3c:	f1ae 0502 	sub.w	r5, lr, #2
 801ad40:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ad44:	1c44      	adds	r4, r0, #1
 801ad46:	4629      	mov	r1, r5
 801ad48:	4561      	cmp	r1, ip
 801ad4a:	d30a      	bcc.n	801ad62 <__exponent+0x66>
 801ad4c:	f10d 0209 	add.w	r2, sp, #9
 801ad50:	eba2 020e 	sub.w	r2, r2, lr
 801ad54:	4565      	cmp	r5, ip
 801ad56:	bf88      	it	hi
 801ad58:	2200      	movhi	r2, #0
 801ad5a:	4413      	add	r3, r2
 801ad5c:	1a18      	subs	r0, r3, r0
 801ad5e:	b003      	add	sp, #12
 801ad60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad62:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad66:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ad6a:	e7ed      	b.n	801ad48 <__exponent+0x4c>
 801ad6c:	2330      	movs	r3, #48	; 0x30
 801ad6e:	3130      	adds	r1, #48	; 0x30
 801ad70:	7083      	strb	r3, [r0, #2]
 801ad72:	70c1      	strb	r1, [r0, #3]
 801ad74:	1d03      	adds	r3, r0, #4
 801ad76:	e7f1      	b.n	801ad5c <__exponent+0x60>

0801ad78 <_printf_float>:
 801ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad7c:	ed2d 8b02 	vpush	{d8}
 801ad80:	b08d      	sub	sp, #52	; 0x34
 801ad82:	460c      	mov	r4, r1
 801ad84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ad88:	4616      	mov	r6, r2
 801ad8a:	461f      	mov	r7, r3
 801ad8c:	4605      	mov	r5, r0
 801ad8e:	f001 fd69 	bl	801c864 <_localeconv_r>
 801ad92:	f8d0 a000 	ldr.w	sl, [r0]
 801ad96:	4650      	mov	r0, sl
 801ad98:	f7e5 f9f2 	bl	8000180 <strlen>
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	930a      	str	r3, [sp, #40]	; 0x28
 801ada0:	6823      	ldr	r3, [r4, #0]
 801ada2:	9305      	str	r3, [sp, #20]
 801ada4:	f8d8 3000 	ldr.w	r3, [r8]
 801ada8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801adac:	3307      	adds	r3, #7
 801adae:	f023 0307 	bic.w	r3, r3, #7
 801adb2:	f103 0208 	add.w	r2, r3, #8
 801adb6:	f8c8 2000 	str.w	r2, [r8]
 801adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801adc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801adc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801adca:	9307      	str	r3, [sp, #28]
 801adcc:	f8cd 8018 	str.w	r8, [sp, #24]
 801add0:	ee08 0a10 	vmov	s16, r0
 801add4:	4b9f      	ldr	r3, [pc, #636]	; (801b054 <_printf_float+0x2dc>)
 801add6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adda:	f04f 32ff 	mov.w	r2, #4294967295
 801adde:	f7e5 fe7d 	bl	8000adc <__aeabi_dcmpun>
 801ade2:	bb88      	cbnz	r0, 801ae48 <_printf_float+0xd0>
 801ade4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ade8:	4b9a      	ldr	r3, [pc, #616]	; (801b054 <_printf_float+0x2dc>)
 801adea:	f04f 32ff 	mov.w	r2, #4294967295
 801adee:	f7e5 fe57 	bl	8000aa0 <__aeabi_dcmple>
 801adf2:	bb48      	cbnz	r0, 801ae48 <_printf_float+0xd0>
 801adf4:	2200      	movs	r2, #0
 801adf6:	2300      	movs	r3, #0
 801adf8:	4640      	mov	r0, r8
 801adfa:	4649      	mov	r1, r9
 801adfc:	f7e5 fe46 	bl	8000a8c <__aeabi_dcmplt>
 801ae00:	b110      	cbz	r0, 801ae08 <_printf_float+0x90>
 801ae02:	232d      	movs	r3, #45	; 0x2d
 801ae04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae08:	4b93      	ldr	r3, [pc, #588]	; (801b058 <_printf_float+0x2e0>)
 801ae0a:	4894      	ldr	r0, [pc, #592]	; (801b05c <_printf_float+0x2e4>)
 801ae0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ae10:	bf94      	ite	ls
 801ae12:	4698      	movls	r8, r3
 801ae14:	4680      	movhi	r8, r0
 801ae16:	2303      	movs	r3, #3
 801ae18:	6123      	str	r3, [r4, #16]
 801ae1a:	9b05      	ldr	r3, [sp, #20]
 801ae1c:	f023 0204 	bic.w	r2, r3, #4
 801ae20:	6022      	str	r2, [r4, #0]
 801ae22:	f04f 0900 	mov.w	r9, #0
 801ae26:	9700      	str	r7, [sp, #0]
 801ae28:	4633      	mov	r3, r6
 801ae2a:	aa0b      	add	r2, sp, #44	; 0x2c
 801ae2c:	4621      	mov	r1, r4
 801ae2e:	4628      	mov	r0, r5
 801ae30:	f000 f9d8 	bl	801b1e4 <_printf_common>
 801ae34:	3001      	adds	r0, #1
 801ae36:	f040 8090 	bne.w	801af5a <_printf_float+0x1e2>
 801ae3a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae3e:	b00d      	add	sp, #52	; 0x34
 801ae40:	ecbd 8b02 	vpop	{d8}
 801ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae48:	4642      	mov	r2, r8
 801ae4a:	464b      	mov	r3, r9
 801ae4c:	4640      	mov	r0, r8
 801ae4e:	4649      	mov	r1, r9
 801ae50:	f7e5 fe44 	bl	8000adc <__aeabi_dcmpun>
 801ae54:	b140      	cbz	r0, 801ae68 <_printf_float+0xf0>
 801ae56:	464b      	mov	r3, r9
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	bfbc      	itt	lt
 801ae5c:	232d      	movlt	r3, #45	; 0x2d
 801ae5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ae62:	487f      	ldr	r0, [pc, #508]	; (801b060 <_printf_float+0x2e8>)
 801ae64:	4b7f      	ldr	r3, [pc, #508]	; (801b064 <_printf_float+0x2ec>)
 801ae66:	e7d1      	b.n	801ae0c <_printf_float+0x94>
 801ae68:	6863      	ldr	r3, [r4, #4]
 801ae6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ae6e:	9206      	str	r2, [sp, #24]
 801ae70:	1c5a      	adds	r2, r3, #1
 801ae72:	d13f      	bne.n	801aef4 <_printf_float+0x17c>
 801ae74:	2306      	movs	r3, #6
 801ae76:	6063      	str	r3, [r4, #4]
 801ae78:	9b05      	ldr	r3, [sp, #20]
 801ae7a:	6861      	ldr	r1, [r4, #4]
 801ae7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ae80:	2300      	movs	r3, #0
 801ae82:	9303      	str	r3, [sp, #12]
 801ae84:	ab0a      	add	r3, sp, #40	; 0x28
 801ae86:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ae8a:	ab09      	add	r3, sp, #36	; 0x24
 801ae8c:	ec49 8b10 	vmov	d0, r8, r9
 801ae90:	9300      	str	r3, [sp, #0]
 801ae92:	6022      	str	r2, [r4, #0]
 801ae94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ae98:	4628      	mov	r0, r5
 801ae9a:	f7ff fecd 	bl	801ac38 <__cvt>
 801ae9e:	9b06      	ldr	r3, [sp, #24]
 801aea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aea2:	2b47      	cmp	r3, #71	; 0x47
 801aea4:	4680      	mov	r8, r0
 801aea6:	d108      	bne.n	801aeba <_printf_float+0x142>
 801aea8:	1cc8      	adds	r0, r1, #3
 801aeaa:	db02      	blt.n	801aeb2 <_printf_float+0x13a>
 801aeac:	6863      	ldr	r3, [r4, #4]
 801aeae:	4299      	cmp	r1, r3
 801aeb0:	dd41      	ble.n	801af36 <_printf_float+0x1be>
 801aeb2:	f1ab 0b02 	sub.w	fp, fp, #2
 801aeb6:	fa5f fb8b 	uxtb.w	fp, fp
 801aeba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aebe:	d820      	bhi.n	801af02 <_printf_float+0x18a>
 801aec0:	3901      	subs	r1, #1
 801aec2:	465a      	mov	r2, fp
 801aec4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aec8:	9109      	str	r1, [sp, #36]	; 0x24
 801aeca:	f7ff ff17 	bl	801acfc <__exponent>
 801aece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aed0:	1813      	adds	r3, r2, r0
 801aed2:	2a01      	cmp	r2, #1
 801aed4:	4681      	mov	r9, r0
 801aed6:	6123      	str	r3, [r4, #16]
 801aed8:	dc02      	bgt.n	801aee0 <_printf_float+0x168>
 801aeda:	6822      	ldr	r2, [r4, #0]
 801aedc:	07d2      	lsls	r2, r2, #31
 801aede:	d501      	bpl.n	801aee4 <_printf_float+0x16c>
 801aee0:	3301      	adds	r3, #1
 801aee2:	6123      	str	r3, [r4, #16]
 801aee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d09c      	beq.n	801ae26 <_printf_float+0xae>
 801aeec:	232d      	movs	r3, #45	; 0x2d
 801aeee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aef2:	e798      	b.n	801ae26 <_printf_float+0xae>
 801aef4:	9a06      	ldr	r2, [sp, #24]
 801aef6:	2a47      	cmp	r2, #71	; 0x47
 801aef8:	d1be      	bne.n	801ae78 <_printf_float+0x100>
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d1bc      	bne.n	801ae78 <_printf_float+0x100>
 801aefe:	2301      	movs	r3, #1
 801af00:	e7b9      	b.n	801ae76 <_printf_float+0xfe>
 801af02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801af06:	d118      	bne.n	801af3a <_printf_float+0x1c2>
 801af08:	2900      	cmp	r1, #0
 801af0a:	6863      	ldr	r3, [r4, #4]
 801af0c:	dd0b      	ble.n	801af26 <_printf_float+0x1ae>
 801af0e:	6121      	str	r1, [r4, #16]
 801af10:	b913      	cbnz	r3, 801af18 <_printf_float+0x1a0>
 801af12:	6822      	ldr	r2, [r4, #0]
 801af14:	07d0      	lsls	r0, r2, #31
 801af16:	d502      	bpl.n	801af1e <_printf_float+0x1a6>
 801af18:	3301      	adds	r3, #1
 801af1a:	440b      	add	r3, r1
 801af1c:	6123      	str	r3, [r4, #16]
 801af1e:	65a1      	str	r1, [r4, #88]	; 0x58
 801af20:	f04f 0900 	mov.w	r9, #0
 801af24:	e7de      	b.n	801aee4 <_printf_float+0x16c>
 801af26:	b913      	cbnz	r3, 801af2e <_printf_float+0x1b6>
 801af28:	6822      	ldr	r2, [r4, #0]
 801af2a:	07d2      	lsls	r2, r2, #31
 801af2c:	d501      	bpl.n	801af32 <_printf_float+0x1ba>
 801af2e:	3302      	adds	r3, #2
 801af30:	e7f4      	b.n	801af1c <_printf_float+0x1a4>
 801af32:	2301      	movs	r3, #1
 801af34:	e7f2      	b.n	801af1c <_printf_float+0x1a4>
 801af36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801af3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af3c:	4299      	cmp	r1, r3
 801af3e:	db05      	blt.n	801af4c <_printf_float+0x1d4>
 801af40:	6823      	ldr	r3, [r4, #0]
 801af42:	6121      	str	r1, [r4, #16]
 801af44:	07d8      	lsls	r0, r3, #31
 801af46:	d5ea      	bpl.n	801af1e <_printf_float+0x1a6>
 801af48:	1c4b      	adds	r3, r1, #1
 801af4a:	e7e7      	b.n	801af1c <_printf_float+0x1a4>
 801af4c:	2900      	cmp	r1, #0
 801af4e:	bfd4      	ite	le
 801af50:	f1c1 0202 	rsble	r2, r1, #2
 801af54:	2201      	movgt	r2, #1
 801af56:	4413      	add	r3, r2
 801af58:	e7e0      	b.n	801af1c <_printf_float+0x1a4>
 801af5a:	6823      	ldr	r3, [r4, #0]
 801af5c:	055a      	lsls	r2, r3, #21
 801af5e:	d407      	bmi.n	801af70 <_printf_float+0x1f8>
 801af60:	6923      	ldr	r3, [r4, #16]
 801af62:	4642      	mov	r2, r8
 801af64:	4631      	mov	r1, r6
 801af66:	4628      	mov	r0, r5
 801af68:	47b8      	blx	r7
 801af6a:	3001      	adds	r0, #1
 801af6c:	d12c      	bne.n	801afc8 <_printf_float+0x250>
 801af6e:	e764      	b.n	801ae3a <_printf_float+0xc2>
 801af70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801af74:	f240 80e0 	bls.w	801b138 <_printf_float+0x3c0>
 801af78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801af7c:	2200      	movs	r2, #0
 801af7e:	2300      	movs	r3, #0
 801af80:	f7e5 fd7a 	bl	8000a78 <__aeabi_dcmpeq>
 801af84:	2800      	cmp	r0, #0
 801af86:	d034      	beq.n	801aff2 <_printf_float+0x27a>
 801af88:	4a37      	ldr	r2, [pc, #220]	; (801b068 <_printf_float+0x2f0>)
 801af8a:	2301      	movs	r3, #1
 801af8c:	4631      	mov	r1, r6
 801af8e:	4628      	mov	r0, r5
 801af90:	47b8      	blx	r7
 801af92:	3001      	adds	r0, #1
 801af94:	f43f af51 	beq.w	801ae3a <_printf_float+0xc2>
 801af98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af9c:	429a      	cmp	r2, r3
 801af9e:	db02      	blt.n	801afa6 <_printf_float+0x22e>
 801afa0:	6823      	ldr	r3, [r4, #0]
 801afa2:	07d8      	lsls	r0, r3, #31
 801afa4:	d510      	bpl.n	801afc8 <_printf_float+0x250>
 801afa6:	ee18 3a10 	vmov	r3, s16
 801afaa:	4652      	mov	r2, sl
 801afac:	4631      	mov	r1, r6
 801afae:	4628      	mov	r0, r5
 801afb0:	47b8      	blx	r7
 801afb2:	3001      	adds	r0, #1
 801afb4:	f43f af41 	beq.w	801ae3a <_printf_float+0xc2>
 801afb8:	f04f 0800 	mov.w	r8, #0
 801afbc:	f104 091a 	add.w	r9, r4, #26
 801afc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afc2:	3b01      	subs	r3, #1
 801afc4:	4543      	cmp	r3, r8
 801afc6:	dc09      	bgt.n	801afdc <_printf_float+0x264>
 801afc8:	6823      	ldr	r3, [r4, #0]
 801afca:	079b      	lsls	r3, r3, #30
 801afcc:	f100 8105 	bmi.w	801b1da <_printf_float+0x462>
 801afd0:	68e0      	ldr	r0, [r4, #12]
 801afd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afd4:	4298      	cmp	r0, r3
 801afd6:	bfb8      	it	lt
 801afd8:	4618      	movlt	r0, r3
 801afda:	e730      	b.n	801ae3e <_printf_float+0xc6>
 801afdc:	2301      	movs	r3, #1
 801afde:	464a      	mov	r2, r9
 801afe0:	4631      	mov	r1, r6
 801afe2:	4628      	mov	r0, r5
 801afe4:	47b8      	blx	r7
 801afe6:	3001      	adds	r0, #1
 801afe8:	f43f af27 	beq.w	801ae3a <_printf_float+0xc2>
 801afec:	f108 0801 	add.w	r8, r8, #1
 801aff0:	e7e6      	b.n	801afc0 <_printf_float+0x248>
 801aff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	dc39      	bgt.n	801b06c <_printf_float+0x2f4>
 801aff8:	4a1b      	ldr	r2, [pc, #108]	; (801b068 <_printf_float+0x2f0>)
 801affa:	2301      	movs	r3, #1
 801affc:	4631      	mov	r1, r6
 801affe:	4628      	mov	r0, r5
 801b000:	47b8      	blx	r7
 801b002:	3001      	adds	r0, #1
 801b004:	f43f af19 	beq.w	801ae3a <_printf_float+0xc2>
 801b008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b00c:	4313      	orrs	r3, r2
 801b00e:	d102      	bne.n	801b016 <_printf_float+0x29e>
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	07d9      	lsls	r1, r3, #31
 801b014:	d5d8      	bpl.n	801afc8 <_printf_float+0x250>
 801b016:	ee18 3a10 	vmov	r3, s16
 801b01a:	4652      	mov	r2, sl
 801b01c:	4631      	mov	r1, r6
 801b01e:	4628      	mov	r0, r5
 801b020:	47b8      	blx	r7
 801b022:	3001      	adds	r0, #1
 801b024:	f43f af09 	beq.w	801ae3a <_printf_float+0xc2>
 801b028:	f04f 0900 	mov.w	r9, #0
 801b02c:	f104 0a1a 	add.w	sl, r4, #26
 801b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b032:	425b      	negs	r3, r3
 801b034:	454b      	cmp	r3, r9
 801b036:	dc01      	bgt.n	801b03c <_printf_float+0x2c4>
 801b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b03a:	e792      	b.n	801af62 <_printf_float+0x1ea>
 801b03c:	2301      	movs	r3, #1
 801b03e:	4652      	mov	r2, sl
 801b040:	4631      	mov	r1, r6
 801b042:	4628      	mov	r0, r5
 801b044:	47b8      	blx	r7
 801b046:	3001      	adds	r0, #1
 801b048:	f43f aef7 	beq.w	801ae3a <_printf_float+0xc2>
 801b04c:	f109 0901 	add.w	r9, r9, #1
 801b050:	e7ee      	b.n	801b030 <_printf_float+0x2b8>
 801b052:	bf00      	nop
 801b054:	7fefffff 	.word	0x7fefffff
 801b058:	0801dd4c 	.word	0x0801dd4c
 801b05c:	0801dd50 	.word	0x0801dd50
 801b060:	0801dd58 	.word	0x0801dd58
 801b064:	0801dd54 	.word	0x0801dd54
 801b068:	0801dd5c 	.word	0x0801dd5c
 801b06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b06e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b070:	429a      	cmp	r2, r3
 801b072:	bfa8      	it	ge
 801b074:	461a      	movge	r2, r3
 801b076:	2a00      	cmp	r2, #0
 801b078:	4691      	mov	r9, r2
 801b07a:	dc37      	bgt.n	801b0ec <_printf_float+0x374>
 801b07c:	f04f 0b00 	mov.w	fp, #0
 801b080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b084:	f104 021a 	add.w	r2, r4, #26
 801b088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b08a:	9305      	str	r3, [sp, #20]
 801b08c:	eba3 0309 	sub.w	r3, r3, r9
 801b090:	455b      	cmp	r3, fp
 801b092:	dc33      	bgt.n	801b0fc <_printf_float+0x384>
 801b094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b098:	429a      	cmp	r2, r3
 801b09a:	db3b      	blt.n	801b114 <_printf_float+0x39c>
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	07da      	lsls	r2, r3, #31
 801b0a0:	d438      	bmi.n	801b114 <_printf_float+0x39c>
 801b0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0a4:	9a05      	ldr	r2, [sp, #20]
 801b0a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0a8:	1a9a      	subs	r2, r3, r2
 801b0aa:	eba3 0901 	sub.w	r9, r3, r1
 801b0ae:	4591      	cmp	r9, r2
 801b0b0:	bfa8      	it	ge
 801b0b2:	4691      	movge	r9, r2
 801b0b4:	f1b9 0f00 	cmp.w	r9, #0
 801b0b8:	dc35      	bgt.n	801b126 <_printf_float+0x3ae>
 801b0ba:	f04f 0800 	mov.w	r8, #0
 801b0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0c2:	f104 0a1a 	add.w	sl, r4, #26
 801b0c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b0ca:	1a9b      	subs	r3, r3, r2
 801b0cc:	eba3 0309 	sub.w	r3, r3, r9
 801b0d0:	4543      	cmp	r3, r8
 801b0d2:	f77f af79 	ble.w	801afc8 <_printf_float+0x250>
 801b0d6:	2301      	movs	r3, #1
 801b0d8:	4652      	mov	r2, sl
 801b0da:	4631      	mov	r1, r6
 801b0dc:	4628      	mov	r0, r5
 801b0de:	47b8      	blx	r7
 801b0e0:	3001      	adds	r0, #1
 801b0e2:	f43f aeaa 	beq.w	801ae3a <_printf_float+0xc2>
 801b0e6:	f108 0801 	add.w	r8, r8, #1
 801b0ea:	e7ec      	b.n	801b0c6 <_printf_float+0x34e>
 801b0ec:	4613      	mov	r3, r2
 801b0ee:	4631      	mov	r1, r6
 801b0f0:	4642      	mov	r2, r8
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	47b8      	blx	r7
 801b0f6:	3001      	adds	r0, #1
 801b0f8:	d1c0      	bne.n	801b07c <_printf_float+0x304>
 801b0fa:	e69e      	b.n	801ae3a <_printf_float+0xc2>
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	4631      	mov	r1, r6
 801b100:	4628      	mov	r0, r5
 801b102:	9205      	str	r2, [sp, #20]
 801b104:	47b8      	blx	r7
 801b106:	3001      	adds	r0, #1
 801b108:	f43f ae97 	beq.w	801ae3a <_printf_float+0xc2>
 801b10c:	9a05      	ldr	r2, [sp, #20]
 801b10e:	f10b 0b01 	add.w	fp, fp, #1
 801b112:	e7b9      	b.n	801b088 <_printf_float+0x310>
 801b114:	ee18 3a10 	vmov	r3, s16
 801b118:	4652      	mov	r2, sl
 801b11a:	4631      	mov	r1, r6
 801b11c:	4628      	mov	r0, r5
 801b11e:	47b8      	blx	r7
 801b120:	3001      	adds	r0, #1
 801b122:	d1be      	bne.n	801b0a2 <_printf_float+0x32a>
 801b124:	e689      	b.n	801ae3a <_printf_float+0xc2>
 801b126:	9a05      	ldr	r2, [sp, #20]
 801b128:	464b      	mov	r3, r9
 801b12a:	4442      	add	r2, r8
 801b12c:	4631      	mov	r1, r6
 801b12e:	4628      	mov	r0, r5
 801b130:	47b8      	blx	r7
 801b132:	3001      	adds	r0, #1
 801b134:	d1c1      	bne.n	801b0ba <_printf_float+0x342>
 801b136:	e680      	b.n	801ae3a <_printf_float+0xc2>
 801b138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b13a:	2a01      	cmp	r2, #1
 801b13c:	dc01      	bgt.n	801b142 <_printf_float+0x3ca>
 801b13e:	07db      	lsls	r3, r3, #31
 801b140:	d538      	bpl.n	801b1b4 <_printf_float+0x43c>
 801b142:	2301      	movs	r3, #1
 801b144:	4642      	mov	r2, r8
 801b146:	4631      	mov	r1, r6
 801b148:	4628      	mov	r0, r5
 801b14a:	47b8      	blx	r7
 801b14c:	3001      	adds	r0, #1
 801b14e:	f43f ae74 	beq.w	801ae3a <_printf_float+0xc2>
 801b152:	ee18 3a10 	vmov	r3, s16
 801b156:	4652      	mov	r2, sl
 801b158:	4631      	mov	r1, r6
 801b15a:	4628      	mov	r0, r5
 801b15c:	47b8      	blx	r7
 801b15e:	3001      	adds	r0, #1
 801b160:	f43f ae6b 	beq.w	801ae3a <_printf_float+0xc2>
 801b164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b168:	2200      	movs	r2, #0
 801b16a:	2300      	movs	r3, #0
 801b16c:	f7e5 fc84 	bl	8000a78 <__aeabi_dcmpeq>
 801b170:	b9d8      	cbnz	r0, 801b1aa <_printf_float+0x432>
 801b172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b174:	f108 0201 	add.w	r2, r8, #1
 801b178:	3b01      	subs	r3, #1
 801b17a:	4631      	mov	r1, r6
 801b17c:	4628      	mov	r0, r5
 801b17e:	47b8      	blx	r7
 801b180:	3001      	adds	r0, #1
 801b182:	d10e      	bne.n	801b1a2 <_printf_float+0x42a>
 801b184:	e659      	b.n	801ae3a <_printf_float+0xc2>
 801b186:	2301      	movs	r3, #1
 801b188:	4652      	mov	r2, sl
 801b18a:	4631      	mov	r1, r6
 801b18c:	4628      	mov	r0, r5
 801b18e:	47b8      	blx	r7
 801b190:	3001      	adds	r0, #1
 801b192:	f43f ae52 	beq.w	801ae3a <_printf_float+0xc2>
 801b196:	f108 0801 	add.w	r8, r8, #1
 801b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b19c:	3b01      	subs	r3, #1
 801b19e:	4543      	cmp	r3, r8
 801b1a0:	dcf1      	bgt.n	801b186 <_printf_float+0x40e>
 801b1a2:	464b      	mov	r3, r9
 801b1a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b1a8:	e6dc      	b.n	801af64 <_printf_float+0x1ec>
 801b1aa:	f04f 0800 	mov.w	r8, #0
 801b1ae:	f104 0a1a 	add.w	sl, r4, #26
 801b1b2:	e7f2      	b.n	801b19a <_printf_float+0x422>
 801b1b4:	2301      	movs	r3, #1
 801b1b6:	4642      	mov	r2, r8
 801b1b8:	e7df      	b.n	801b17a <_printf_float+0x402>
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	464a      	mov	r2, r9
 801b1be:	4631      	mov	r1, r6
 801b1c0:	4628      	mov	r0, r5
 801b1c2:	47b8      	blx	r7
 801b1c4:	3001      	adds	r0, #1
 801b1c6:	f43f ae38 	beq.w	801ae3a <_printf_float+0xc2>
 801b1ca:	f108 0801 	add.w	r8, r8, #1
 801b1ce:	68e3      	ldr	r3, [r4, #12]
 801b1d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1d2:	1a5b      	subs	r3, r3, r1
 801b1d4:	4543      	cmp	r3, r8
 801b1d6:	dcf0      	bgt.n	801b1ba <_printf_float+0x442>
 801b1d8:	e6fa      	b.n	801afd0 <_printf_float+0x258>
 801b1da:	f04f 0800 	mov.w	r8, #0
 801b1de:	f104 0919 	add.w	r9, r4, #25
 801b1e2:	e7f4      	b.n	801b1ce <_printf_float+0x456>

0801b1e4 <_printf_common>:
 801b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1e8:	4616      	mov	r6, r2
 801b1ea:	4699      	mov	r9, r3
 801b1ec:	688a      	ldr	r2, [r1, #8]
 801b1ee:	690b      	ldr	r3, [r1, #16]
 801b1f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b1f4:	4293      	cmp	r3, r2
 801b1f6:	bfb8      	it	lt
 801b1f8:	4613      	movlt	r3, r2
 801b1fa:	6033      	str	r3, [r6, #0]
 801b1fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b200:	4607      	mov	r7, r0
 801b202:	460c      	mov	r4, r1
 801b204:	b10a      	cbz	r2, 801b20a <_printf_common+0x26>
 801b206:	3301      	adds	r3, #1
 801b208:	6033      	str	r3, [r6, #0]
 801b20a:	6823      	ldr	r3, [r4, #0]
 801b20c:	0699      	lsls	r1, r3, #26
 801b20e:	bf42      	ittt	mi
 801b210:	6833      	ldrmi	r3, [r6, #0]
 801b212:	3302      	addmi	r3, #2
 801b214:	6033      	strmi	r3, [r6, #0]
 801b216:	6825      	ldr	r5, [r4, #0]
 801b218:	f015 0506 	ands.w	r5, r5, #6
 801b21c:	d106      	bne.n	801b22c <_printf_common+0x48>
 801b21e:	f104 0a19 	add.w	sl, r4, #25
 801b222:	68e3      	ldr	r3, [r4, #12]
 801b224:	6832      	ldr	r2, [r6, #0]
 801b226:	1a9b      	subs	r3, r3, r2
 801b228:	42ab      	cmp	r3, r5
 801b22a:	dc26      	bgt.n	801b27a <_printf_common+0x96>
 801b22c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b230:	1e13      	subs	r3, r2, #0
 801b232:	6822      	ldr	r2, [r4, #0]
 801b234:	bf18      	it	ne
 801b236:	2301      	movne	r3, #1
 801b238:	0692      	lsls	r2, r2, #26
 801b23a:	d42b      	bmi.n	801b294 <_printf_common+0xb0>
 801b23c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b240:	4649      	mov	r1, r9
 801b242:	4638      	mov	r0, r7
 801b244:	47c0      	blx	r8
 801b246:	3001      	adds	r0, #1
 801b248:	d01e      	beq.n	801b288 <_printf_common+0xa4>
 801b24a:	6823      	ldr	r3, [r4, #0]
 801b24c:	68e5      	ldr	r5, [r4, #12]
 801b24e:	6832      	ldr	r2, [r6, #0]
 801b250:	f003 0306 	and.w	r3, r3, #6
 801b254:	2b04      	cmp	r3, #4
 801b256:	bf08      	it	eq
 801b258:	1aad      	subeq	r5, r5, r2
 801b25a:	68a3      	ldr	r3, [r4, #8]
 801b25c:	6922      	ldr	r2, [r4, #16]
 801b25e:	bf0c      	ite	eq
 801b260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b264:	2500      	movne	r5, #0
 801b266:	4293      	cmp	r3, r2
 801b268:	bfc4      	itt	gt
 801b26a:	1a9b      	subgt	r3, r3, r2
 801b26c:	18ed      	addgt	r5, r5, r3
 801b26e:	2600      	movs	r6, #0
 801b270:	341a      	adds	r4, #26
 801b272:	42b5      	cmp	r5, r6
 801b274:	d11a      	bne.n	801b2ac <_printf_common+0xc8>
 801b276:	2000      	movs	r0, #0
 801b278:	e008      	b.n	801b28c <_printf_common+0xa8>
 801b27a:	2301      	movs	r3, #1
 801b27c:	4652      	mov	r2, sl
 801b27e:	4649      	mov	r1, r9
 801b280:	4638      	mov	r0, r7
 801b282:	47c0      	blx	r8
 801b284:	3001      	adds	r0, #1
 801b286:	d103      	bne.n	801b290 <_printf_common+0xac>
 801b288:	f04f 30ff 	mov.w	r0, #4294967295
 801b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b290:	3501      	adds	r5, #1
 801b292:	e7c6      	b.n	801b222 <_printf_common+0x3e>
 801b294:	18e1      	adds	r1, r4, r3
 801b296:	1c5a      	adds	r2, r3, #1
 801b298:	2030      	movs	r0, #48	; 0x30
 801b29a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b29e:	4422      	add	r2, r4
 801b2a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b2a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b2a8:	3302      	adds	r3, #2
 801b2aa:	e7c7      	b.n	801b23c <_printf_common+0x58>
 801b2ac:	2301      	movs	r3, #1
 801b2ae:	4622      	mov	r2, r4
 801b2b0:	4649      	mov	r1, r9
 801b2b2:	4638      	mov	r0, r7
 801b2b4:	47c0      	blx	r8
 801b2b6:	3001      	adds	r0, #1
 801b2b8:	d0e6      	beq.n	801b288 <_printf_common+0xa4>
 801b2ba:	3601      	adds	r6, #1
 801b2bc:	e7d9      	b.n	801b272 <_printf_common+0x8e>
	...

0801b2c0 <_printf_i>:
 801b2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b2c4:	7e0f      	ldrb	r7, [r1, #24]
 801b2c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b2c8:	2f78      	cmp	r7, #120	; 0x78
 801b2ca:	4691      	mov	r9, r2
 801b2cc:	4680      	mov	r8, r0
 801b2ce:	460c      	mov	r4, r1
 801b2d0:	469a      	mov	sl, r3
 801b2d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b2d6:	d807      	bhi.n	801b2e8 <_printf_i+0x28>
 801b2d8:	2f62      	cmp	r7, #98	; 0x62
 801b2da:	d80a      	bhi.n	801b2f2 <_printf_i+0x32>
 801b2dc:	2f00      	cmp	r7, #0
 801b2de:	f000 80d8 	beq.w	801b492 <_printf_i+0x1d2>
 801b2e2:	2f58      	cmp	r7, #88	; 0x58
 801b2e4:	f000 80a3 	beq.w	801b42e <_printf_i+0x16e>
 801b2e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b2ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b2f0:	e03a      	b.n	801b368 <_printf_i+0xa8>
 801b2f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b2f6:	2b15      	cmp	r3, #21
 801b2f8:	d8f6      	bhi.n	801b2e8 <_printf_i+0x28>
 801b2fa:	a101      	add	r1, pc, #4	; (adr r1, 801b300 <_printf_i+0x40>)
 801b2fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b300:	0801b359 	.word	0x0801b359
 801b304:	0801b36d 	.word	0x0801b36d
 801b308:	0801b2e9 	.word	0x0801b2e9
 801b30c:	0801b2e9 	.word	0x0801b2e9
 801b310:	0801b2e9 	.word	0x0801b2e9
 801b314:	0801b2e9 	.word	0x0801b2e9
 801b318:	0801b36d 	.word	0x0801b36d
 801b31c:	0801b2e9 	.word	0x0801b2e9
 801b320:	0801b2e9 	.word	0x0801b2e9
 801b324:	0801b2e9 	.word	0x0801b2e9
 801b328:	0801b2e9 	.word	0x0801b2e9
 801b32c:	0801b479 	.word	0x0801b479
 801b330:	0801b39d 	.word	0x0801b39d
 801b334:	0801b45b 	.word	0x0801b45b
 801b338:	0801b2e9 	.word	0x0801b2e9
 801b33c:	0801b2e9 	.word	0x0801b2e9
 801b340:	0801b49b 	.word	0x0801b49b
 801b344:	0801b2e9 	.word	0x0801b2e9
 801b348:	0801b39d 	.word	0x0801b39d
 801b34c:	0801b2e9 	.word	0x0801b2e9
 801b350:	0801b2e9 	.word	0x0801b2e9
 801b354:	0801b463 	.word	0x0801b463
 801b358:	682b      	ldr	r3, [r5, #0]
 801b35a:	1d1a      	adds	r2, r3, #4
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	602a      	str	r2, [r5, #0]
 801b360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b368:	2301      	movs	r3, #1
 801b36a:	e0a3      	b.n	801b4b4 <_printf_i+0x1f4>
 801b36c:	6820      	ldr	r0, [r4, #0]
 801b36e:	6829      	ldr	r1, [r5, #0]
 801b370:	0606      	lsls	r6, r0, #24
 801b372:	f101 0304 	add.w	r3, r1, #4
 801b376:	d50a      	bpl.n	801b38e <_printf_i+0xce>
 801b378:	680e      	ldr	r6, [r1, #0]
 801b37a:	602b      	str	r3, [r5, #0]
 801b37c:	2e00      	cmp	r6, #0
 801b37e:	da03      	bge.n	801b388 <_printf_i+0xc8>
 801b380:	232d      	movs	r3, #45	; 0x2d
 801b382:	4276      	negs	r6, r6
 801b384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b388:	485e      	ldr	r0, [pc, #376]	; (801b504 <_printf_i+0x244>)
 801b38a:	230a      	movs	r3, #10
 801b38c:	e019      	b.n	801b3c2 <_printf_i+0x102>
 801b38e:	680e      	ldr	r6, [r1, #0]
 801b390:	602b      	str	r3, [r5, #0]
 801b392:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b396:	bf18      	it	ne
 801b398:	b236      	sxthne	r6, r6
 801b39a:	e7ef      	b.n	801b37c <_printf_i+0xbc>
 801b39c:	682b      	ldr	r3, [r5, #0]
 801b39e:	6820      	ldr	r0, [r4, #0]
 801b3a0:	1d19      	adds	r1, r3, #4
 801b3a2:	6029      	str	r1, [r5, #0]
 801b3a4:	0601      	lsls	r1, r0, #24
 801b3a6:	d501      	bpl.n	801b3ac <_printf_i+0xec>
 801b3a8:	681e      	ldr	r6, [r3, #0]
 801b3aa:	e002      	b.n	801b3b2 <_printf_i+0xf2>
 801b3ac:	0646      	lsls	r6, r0, #25
 801b3ae:	d5fb      	bpl.n	801b3a8 <_printf_i+0xe8>
 801b3b0:	881e      	ldrh	r6, [r3, #0]
 801b3b2:	4854      	ldr	r0, [pc, #336]	; (801b504 <_printf_i+0x244>)
 801b3b4:	2f6f      	cmp	r7, #111	; 0x6f
 801b3b6:	bf0c      	ite	eq
 801b3b8:	2308      	moveq	r3, #8
 801b3ba:	230a      	movne	r3, #10
 801b3bc:	2100      	movs	r1, #0
 801b3be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b3c2:	6865      	ldr	r5, [r4, #4]
 801b3c4:	60a5      	str	r5, [r4, #8]
 801b3c6:	2d00      	cmp	r5, #0
 801b3c8:	bfa2      	ittt	ge
 801b3ca:	6821      	ldrge	r1, [r4, #0]
 801b3cc:	f021 0104 	bicge.w	r1, r1, #4
 801b3d0:	6021      	strge	r1, [r4, #0]
 801b3d2:	b90e      	cbnz	r6, 801b3d8 <_printf_i+0x118>
 801b3d4:	2d00      	cmp	r5, #0
 801b3d6:	d04d      	beq.n	801b474 <_printf_i+0x1b4>
 801b3d8:	4615      	mov	r5, r2
 801b3da:	fbb6 f1f3 	udiv	r1, r6, r3
 801b3de:	fb03 6711 	mls	r7, r3, r1, r6
 801b3e2:	5dc7      	ldrb	r7, [r0, r7]
 801b3e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b3e8:	4637      	mov	r7, r6
 801b3ea:	42bb      	cmp	r3, r7
 801b3ec:	460e      	mov	r6, r1
 801b3ee:	d9f4      	bls.n	801b3da <_printf_i+0x11a>
 801b3f0:	2b08      	cmp	r3, #8
 801b3f2:	d10b      	bne.n	801b40c <_printf_i+0x14c>
 801b3f4:	6823      	ldr	r3, [r4, #0]
 801b3f6:	07de      	lsls	r6, r3, #31
 801b3f8:	d508      	bpl.n	801b40c <_printf_i+0x14c>
 801b3fa:	6923      	ldr	r3, [r4, #16]
 801b3fc:	6861      	ldr	r1, [r4, #4]
 801b3fe:	4299      	cmp	r1, r3
 801b400:	bfde      	ittt	le
 801b402:	2330      	movle	r3, #48	; 0x30
 801b404:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b408:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b40c:	1b52      	subs	r2, r2, r5
 801b40e:	6122      	str	r2, [r4, #16]
 801b410:	f8cd a000 	str.w	sl, [sp]
 801b414:	464b      	mov	r3, r9
 801b416:	aa03      	add	r2, sp, #12
 801b418:	4621      	mov	r1, r4
 801b41a:	4640      	mov	r0, r8
 801b41c:	f7ff fee2 	bl	801b1e4 <_printf_common>
 801b420:	3001      	adds	r0, #1
 801b422:	d14c      	bne.n	801b4be <_printf_i+0x1fe>
 801b424:	f04f 30ff 	mov.w	r0, #4294967295
 801b428:	b004      	add	sp, #16
 801b42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b42e:	4835      	ldr	r0, [pc, #212]	; (801b504 <_printf_i+0x244>)
 801b430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b434:	6829      	ldr	r1, [r5, #0]
 801b436:	6823      	ldr	r3, [r4, #0]
 801b438:	f851 6b04 	ldr.w	r6, [r1], #4
 801b43c:	6029      	str	r1, [r5, #0]
 801b43e:	061d      	lsls	r5, r3, #24
 801b440:	d514      	bpl.n	801b46c <_printf_i+0x1ac>
 801b442:	07df      	lsls	r7, r3, #31
 801b444:	bf44      	itt	mi
 801b446:	f043 0320 	orrmi.w	r3, r3, #32
 801b44a:	6023      	strmi	r3, [r4, #0]
 801b44c:	b91e      	cbnz	r6, 801b456 <_printf_i+0x196>
 801b44e:	6823      	ldr	r3, [r4, #0]
 801b450:	f023 0320 	bic.w	r3, r3, #32
 801b454:	6023      	str	r3, [r4, #0]
 801b456:	2310      	movs	r3, #16
 801b458:	e7b0      	b.n	801b3bc <_printf_i+0xfc>
 801b45a:	6823      	ldr	r3, [r4, #0]
 801b45c:	f043 0320 	orr.w	r3, r3, #32
 801b460:	6023      	str	r3, [r4, #0]
 801b462:	2378      	movs	r3, #120	; 0x78
 801b464:	4828      	ldr	r0, [pc, #160]	; (801b508 <_printf_i+0x248>)
 801b466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b46a:	e7e3      	b.n	801b434 <_printf_i+0x174>
 801b46c:	0659      	lsls	r1, r3, #25
 801b46e:	bf48      	it	mi
 801b470:	b2b6      	uxthmi	r6, r6
 801b472:	e7e6      	b.n	801b442 <_printf_i+0x182>
 801b474:	4615      	mov	r5, r2
 801b476:	e7bb      	b.n	801b3f0 <_printf_i+0x130>
 801b478:	682b      	ldr	r3, [r5, #0]
 801b47a:	6826      	ldr	r6, [r4, #0]
 801b47c:	6961      	ldr	r1, [r4, #20]
 801b47e:	1d18      	adds	r0, r3, #4
 801b480:	6028      	str	r0, [r5, #0]
 801b482:	0635      	lsls	r5, r6, #24
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	d501      	bpl.n	801b48c <_printf_i+0x1cc>
 801b488:	6019      	str	r1, [r3, #0]
 801b48a:	e002      	b.n	801b492 <_printf_i+0x1d2>
 801b48c:	0670      	lsls	r0, r6, #25
 801b48e:	d5fb      	bpl.n	801b488 <_printf_i+0x1c8>
 801b490:	8019      	strh	r1, [r3, #0]
 801b492:	2300      	movs	r3, #0
 801b494:	6123      	str	r3, [r4, #16]
 801b496:	4615      	mov	r5, r2
 801b498:	e7ba      	b.n	801b410 <_printf_i+0x150>
 801b49a:	682b      	ldr	r3, [r5, #0]
 801b49c:	1d1a      	adds	r2, r3, #4
 801b49e:	602a      	str	r2, [r5, #0]
 801b4a0:	681d      	ldr	r5, [r3, #0]
 801b4a2:	6862      	ldr	r2, [r4, #4]
 801b4a4:	2100      	movs	r1, #0
 801b4a6:	4628      	mov	r0, r5
 801b4a8:	f7e4 fe72 	bl	8000190 <memchr>
 801b4ac:	b108      	cbz	r0, 801b4b2 <_printf_i+0x1f2>
 801b4ae:	1b40      	subs	r0, r0, r5
 801b4b0:	6060      	str	r0, [r4, #4]
 801b4b2:	6863      	ldr	r3, [r4, #4]
 801b4b4:	6123      	str	r3, [r4, #16]
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4bc:	e7a8      	b.n	801b410 <_printf_i+0x150>
 801b4be:	6923      	ldr	r3, [r4, #16]
 801b4c0:	462a      	mov	r2, r5
 801b4c2:	4649      	mov	r1, r9
 801b4c4:	4640      	mov	r0, r8
 801b4c6:	47d0      	blx	sl
 801b4c8:	3001      	adds	r0, #1
 801b4ca:	d0ab      	beq.n	801b424 <_printf_i+0x164>
 801b4cc:	6823      	ldr	r3, [r4, #0]
 801b4ce:	079b      	lsls	r3, r3, #30
 801b4d0:	d413      	bmi.n	801b4fa <_printf_i+0x23a>
 801b4d2:	68e0      	ldr	r0, [r4, #12]
 801b4d4:	9b03      	ldr	r3, [sp, #12]
 801b4d6:	4298      	cmp	r0, r3
 801b4d8:	bfb8      	it	lt
 801b4da:	4618      	movlt	r0, r3
 801b4dc:	e7a4      	b.n	801b428 <_printf_i+0x168>
 801b4de:	2301      	movs	r3, #1
 801b4e0:	4632      	mov	r2, r6
 801b4e2:	4649      	mov	r1, r9
 801b4e4:	4640      	mov	r0, r8
 801b4e6:	47d0      	blx	sl
 801b4e8:	3001      	adds	r0, #1
 801b4ea:	d09b      	beq.n	801b424 <_printf_i+0x164>
 801b4ec:	3501      	adds	r5, #1
 801b4ee:	68e3      	ldr	r3, [r4, #12]
 801b4f0:	9903      	ldr	r1, [sp, #12]
 801b4f2:	1a5b      	subs	r3, r3, r1
 801b4f4:	42ab      	cmp	r3, r5
 801b4f6:	dcf2      	bgt.n	801b4de <_printf_i+0x21e>
 801b4f8:	e7eb      	b.n	801b4d2 <_printf_i+0x212>
 801b4fa:	2500      	movs	r5, #0
 801b4fc:	f104 0619 	add.w	r6, r4, #25
 801b500:	e7f5      	b.n	801b4ee <_printf_i+0x22e>
 801b502:	bf00      	nop
 801b504:	0801dd5e 	.word	0x0801dd5e
 801b508:	0801dd6f 	.word	0x0801dd6f

0801b50c <iprintf>:
 801b50c:	b40f      	push	{r0, r1, r2, r3}
 801b50e:	4b0a      	ldr	r3, [pc, #40]	; (801b538 <iprintf+0x2c>)
 801b510:	b513      	push	{r0, r1, r4, lr}
 801b512:	681c      	ldr	r4, [r3, #0]
 801b514:	b124      	cbz	r4, 801b520 <iprintf+0x14>
 801b516:	69a3      	ldr	r3, [r4, #24]
 801b518:	b913      	cbnz	r3, 801b520 <iprintf+0x14>
 801b51a:	4620      	mov	r0, r4
 801b51c:	f001 f904 	bl	801c728 <__sinit>
 801b520:	ab05      	add	r3, sp, #20
 801b522:	9a04      	ldr	r2, [sp, #16]
 801b524:	68a1      	ldr	r1, [r4, #8]
 801b526:	9301      	str	r3, [sp, #4]
 801b528:	4620      	mov	r0, r4
 801b52a:	f001 feb3 	bl	801d294 <_vfiprintf_r>
 801b52e:	b002      	add	sp, #8
 801b530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b534:	b004      	add	sp, #16
 801b536:	4770      	bx	lr
 801b538:	20000078 	.word	0x20000078

0801b53c <putchar>:
 801b53c:	4b09      	ldr	r3, [pc, #36]	; (801b564 <putchar+0x28>)
 801b53e:	b513      	push	{r0, r1, r4, lr}
 801b540:	681c      	ldr	r4, [r3, #0]
 801b542:	4601      	mov	r1, r0
 801b544:	b134      	cbz	r4, 801b554 <putchar+0x18>
 801b546:	69a3      	ldr	r3, [r4, #24]
 801b548:	b923      	cbnz	r3, 801b554 <putchar+0x18>
 801b54a:	9001      	str	r0, [sp, #4]
 801b54c:	4620      	mov	r0, r4
 801b54e:	f001 f8eb 	bl	801c728 <__sinit>
 801b552:	9901      	ldr	r1, [sp, #4]
 801b554:	68a2      	ldr	r2, [r4, #8]
 801b556:	4620      	mov	r0, r4
 801b558:	b002      	add	sp, #8
 801b55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b55e:	f001 bfc9 	b.w	801d4f4 <_putc_r>
 801b562:	bf00      	nop
 801b564:	20000078 	.word	0x20000078

0801b568 <_puts_r>:
 801b568:	b570      	push	{r4, r5, r6, lr}
 801b56a:	460e      	mov	r6, r1
 801b56c:	4605      	mov	r5, r0
 801b56e:	b118      	cbz	r0, 801b578 <_puts_r+0x10>
 801b570:	6983      	ldr	r3, [r0, #24]
 801b572:	b90b      	cbnz	r3, 801b578 <_puts_r+0x10>
 801b574:	f001 f8d8 	bl	801c728 <__sinit>
 801b578:	69ab      	ldr	r3, [r5, #24]
 801b57a:	68ac      	ldr	r4, [r5, #8]
 801b57c:	b913      	cbnz	r3, 801b584 <_puts_r+0x1c>
 801b57e:	4628      	mov	r0, r5
 801b580:	f001 f8d2 	bl	801c728 <__sinit>
 801b584:	4b2c      	ldr	r3, [pc, #176]	; (801b638 <_puts_r+0xd0>)
 801b586:	429c      	cmp	r4, r3
 801b588:	d120      	bne.n	801b5cc <_puts_r+0x64>
 801b58a:	686c      	ldr	r4, [r5, #4]
 801b58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b58e:	07db      	lsls	r3, r3, #31
 801b590:	d405      	bmi.n	801b59e <_puts_r+0x36>
 801b592:	89a3      	ldrh	r3, [r4, #12]
 801b594:	0598      	lsls	r0, r3, #22
 801b596:	d402      	bmi.n	801b59e <_puts_r+0x36>
 801b598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b59a:	f001 f968 	bl	801c86e <__retarget_lock_acquire_recursive>
 801b59e:	89a3      	ldrh	r3, [r4, #12]
 801b5a0:	0719      	lsls	r1, r3, #28
 801b5a2:	d51d      	bpl.n	801b5e0 <_puts_r+0x78>
 801b5a4:	6923      	ldr	r3, [r4, #16]
 801b5a6:	b1db      	cbz	r3, 801b5e0 <_puts_r+0x78>
 801b5a8:	3e01      	subs	r6, #1
 801b5aa:	68a3      	ldr	r3, [r4, #8]
 801b5ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b5b0:	3b01      	subs	r3, #1
 801b5b2:	60a3      	str	r3, [r4, #8]
 801b5b4:	bb39      	cbnz	r1, 801b606 <_puts_r+0x9e>
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	da38      	bge.n	801b62c <_puts_r+0xc4>
 801b5ba:	4622      	mov	r2, r4
 801b5bc:	210a      	movs	r1, #10
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f000 f85c 	bl	801b67c <__swbuf_r>
 801b5c4:	3001      	adds	r0, #1
 801b5c6:	d011      	beq.n	801b5ec <_puts_r+0x84>
 801b5c8:	250a      	movs	r5, #10
 801b5ca:	e011      	b.n	801b5f0 <_puts_r+0x88>
 801b5cc:	4b1b      	ldr	r3, [pc, #108]	; (801b63c <_puts_r+0xd4>)
 801b5ce:	429c      	cmp	r4, r3
 801b5d0:	d101      	bne.n	801b5d6 <_puts_r+0x6e>
 801b5d2:	68ac      	ldr	r4, [r5, #8]
 801b5d4:	e7da      	b.n	801b58c <_puts_r+0x24>
 801b5d6:	4b1a      	ldr	r3, [pc, #104]	; (801b640 <_puts_r+0xd8>)
 801b5d8:	429c      	cmp	r4, r3
 801b5da:	bf08      	it	eq
 801b5dc:	68ec      	ldreq	r4, [r5, #12]
 801b5de:	e7d5      	b.n	801b58c <_puts_r+0x24>
 801b5e0:	4621      	mov	r1, r4
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f000 f89c 	bl	801b720 <__swsetup_r>
 801b5e8:	2800      	cmp	r0, #0
 801b5ea:	d0dd      	beq.n	801b5a8 <_puts_r+0x40>
 801b5ec:	f04f 35ff 	mov.w	r5, #4294967295
 801b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5f2:	07da      	lsls	r2, r3, #31
 801b5f4:	d405      	bmi.n	801b602 <_puts_r+0x9a>
 801b5f6:	89a3      	ldrh	r3, [r4, #12]
 801b5f8:	059b      	lsls	r3, r3, #22
 801b5fa:	d402      	bmi.n	801b602 <_puts_r+0x9a>
 801b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5fe:	f001 f937 	bl	801c870 <__retarget_lock_release_recursive>
 801b602:	4628      	mov	r0, r5
 801b604:	bd70      	pop	{r4, r5, r6, pc}
 801b606:	2b00      	cmp	r3, #0
 801b608:	da04      	bge.n	801b614 <_puts_r+0xac>
 801b60a:	69a2      	ldr	r2, [r4, #24]
 801b60c:	429a      	cmp	r2, r3
 801b60e:	dc06      	bgt.n	801b61e <_puts_r+0xb6>
 801b610:	290a      	cmp	r1, #10
 801b612:	d004      	beq.n	801b61e <_puts_r+0xb6>
 801b614:	6823      	ldr	r3, [r4, #0]
 801b616:	1c5a      	adds	r2, r3, #1
 801b618:	6022      	str	r2, [r4, #0]
 801b61a:	7019      	strb	r1, [r3, #0]
 801b61c:	e7c5      	b.n	801b5aa <_puts_r+0x42>
 801b61e:	4622      	mov	r2, r4
 801b620:	4628      	mov	r0, r5
 801b622:	f000 f82b 	bl	801b67c <__swbuf_r>
 801b626:	3001      	adds	r0, #1
 801b628:	d1bf      	bne.n	801b5aa <_puts_r+0x42>
 801b62a:	e7df      	b.n	801b5ec <_puts_r+0x84>
 801b62c:	6823      	ldr	r3, [r4, #0]
 801b62e:	250a      	movs	r5, #10
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	6022      	str	r2, [r4, #0]
 801b634:	701d      	strb	r5, [r3, #0]
 801b636:	e7db      	b.n	801b5f0 <_puts_r+0x88>
 801b638:	0801de30 	.word	0x0801de30
 801b63c:	0801de50 	.word	0x0801de50
 801b640:	0801de10 	.word	0x0801de10

0801b644 <puts>:
 801b644:	4b02      	ldr	r3, [pc, #8]	; (801b650 <puts+0xc>)
 801b646:	4601      	mov	r1, r0
 801b648:	6818      	ldr	r0, [r3, #0]
 801b64a:	f7ff bf8d 	b.w	801b568 <_puts_r>
 801b64e:	bf00      	nop
 801b650:	20000078 	.word	0x20000078

0801b654 <strncpy>:
 801b654:	b510      	push	{r4, lr}
 801b656:	3901      	subs	r1, #1
 801b658:	4603      	mov	r3, r0
 801b65a:	b132      	cbz	r2, 801b66a <strncpy+0x16>
 801b65c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b660:	f803 4b01 	strb.w	r4, [r3], #1
 801b664:	3a01      	subs	r2, #1
 801b666:	2c00      	cmp	r4, #0
 801b668:	d1f7      	bne.n	801b65a <strncpy+0x6>
 801b66a:	441a      	add	r2, r3
 801b66c:	2100      	movs	r1, #0
 801b66e:	4293      	cmp	r3, r2
 801b670:	d100      	bne.n	801b674 <strncpy+0x20>
 801b672:	bd10      	pop	{r4, pc}
 801b674:	f803 1b01 	strb.w	r1, [r3], #1
 801b678:	e7f9      	b.n	801b66e <strncpy+0x1a>
	...

0801b67c <__swbuf_r>:
 801b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b67e:	460e      	mov	r6, r1
 801b680:	4614      	mov	r4, r2
 801b682:	4605      	mov	r5, r0
 801b684:	b118      	cbz	r0, 801b68e <__swbuf_r+0x12>
 801b686:	6983      	ldr	r3, [r0, #24]
 801b688:	b90b      	cbnz	r3, 801b68e <__swbuf_r+0x12>
 801b68a:	f001 f84d 	bl	801c728 <__sinit>
 801b68e:	4b21      	ldr	r3, [pc, #132]	; (801b714 <__swbuf_r+0x98>)
 801b690:	429c      	cmp	r4, r3
 801b692:	d12b      	bne.n	801b6ec <__swbuf_r+0x70>
 801b694:	686c      	ldr	r4, [r5, #4]
 801b696:	69a3      	ldr	r3, [r4, #24]
 801b698:	60a3      	str	r3, [r4, #8]
 801b69a:	89a3      	ldrh	r3, [r4, #12]
 801b69c:	071a      	lsls	r2, r3, #28
 801b69e:	d52f      	bpl.n	801b700 <__swbuf_r+0x84>
 801b6a0:	6923      	ldr	r3, [r4, #16]
 801b6a2:	b36b      	cbz	r3, 801b700 <__swbuf_r+0x84>
 801b6a4:	6923      	ldr	r3, [r4, #16]
 801b6a6:	6820      	ldr	r0, [r4, #0]
 801b6a8:	1ac0      	subs	r0, r0, r3
 801b6aa:	6963      	ldr	r3, [r4, #20]
 801b6ac:	b2f6      	uxtb	r6, r6
 801b6ae:	4283      	cmp	r3, r0
 801b6b0:	4637      	mov	r7, r6
 801b6b2:	dc04      	bgt.n	801b6be <__swbuf_r+0x42>
 801b6b4:	4621      	mov	r1, r4
 801b6b6:	4628      	mov	r0, r5
 801b6b8:	f000 ffa2 	bl	801c600 <_fflush_r>
 801b6bc:	bb30      	cbnz	r0, 801b70c <__swbuf_r+0x90>
 801b6be:	68a3      	ldr	r3, [r4, #8]
 801b6c0:	3b01      	subs	r3, #1
 801b6c2:	60a3      	str	r3, [r4, #8]
 801b6c4:	6823      	ldr	r3, [r4, #0]
 801b6c6:	1c5a      	adds	r2, r3, #1
 801b6c8:	6022      	str	r2, [r4, #0]
 801b6ca:	701e      	strb	r6, [r3, #0]
 801b6cc:	6963      	ldr	r3, [r4, #20]
 801b6ce:	3001      	adds	r0, #1
 801b6d0:	4283      	cmp	r3, r0
 801b6d2:	d004      	beq.n	801b6de <__swbuf_r+0x62>
 801b6d4:	89a3      	ldrh	r3, [r4, #12]
 801b6d6:	07db      	lsls	r3, r3, #31
 801b6d8:	d506      	bpl.n	801b6e8 <__swbuf_r+0x6c>
 801b6da:	2e0a      	cmp	r6, #10
 801b6dc:	d104      	bne.n	801b6e8 <__swbuf_r+0x6c>
 801b6de:	4621      	mov	r1, r4
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	f000 ff8d 	bl	801c600 <_fflush_r>
 801b6e6:	b988      	cbnz	r0, 801b70c <__swbuf_r+0x90>
 801b6e8:	4638      	mov	r0, r7
 801b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6ec:	4b0a      	ldr	r3, [pc, #40]	; (801b718 <__swbuf_r+0x9c>)
 801b6ee:	429c      	cmp	r4, r3
 801b6f0:	d101      	bne.n	801b6f6 <__swbuf_r+0x7a>
 801b6f2:	68ac      	ldr	r4, [r5, #8]
 801b6f4:	e7cf      	b.n	801b696 <__swbuf_r+0x1a>
 801b6f6:	4b09      	ldr	r3, [pc, #36]	; (801b71c <__swbuf_r+0xa0>)
 801b6f8:	429c      	cmp	r4, r3
 801b6fa:	bf08      	it	eq
 801b6fc:	68ec      	ldreq	r4, [r5, #12]
 801b6fe:	e7ca      	b.n	801b696 <__swbuf_r+0x1a>
 801b700:	4621      	mov	r1, r4
 801b702:	4628      	mov	r0, r5
 801b704:	f000 f80c 	bl	801b720 <__swsetup_r>
 801b708:	2800      	cmp	r0, #0
 801b70a:	d0cb      	beq.n	801b6a4 <__swbuf_r+0x28>
 801b70c:	f04f 37ff 	mov.w	r7, #4294967295
 801b710:	e7ea      	b.n	801b6e8 <__swbuf_r+0x6c>
 801b712:	bf00      	nop
 801b714:	0801de30 	.word	0x0801de30
 801b718:	0801de50 	.word	0x0801de50
 801b71c:	0801de10 	.word	0x0801de10

0801b720 <__swsetup_r>:
 801b720:	4b32      	ldr	r3, [pc, #200]	; (801b7ec <__swsetup_r+0xcc>)
 801b722:	b570      	push	{r4, r5, r6, lr}
 801b724:	681d      	ldr	r5, [r3, #0]
 801b726:	4606      	mov	r6, r0
 801b728:	460c      	mov	r4, r1
 801b72a:	b125      	cbz	r5, 801b736 <__swsetup_r+0x16>
 801b72c:	69ab      	ldr	r3, [r5, #24]
 801b72e:	b913      	cbnz	r3, 801b736 <__swsetup_r+0x16>
 801b730:	4628      	mov	r0, r5
 801b732:	f000 fff9 	bl	801c728 <__sinit>
 801b736:	4b2e      	ldr	r3, [pc, #184]	; (801b7f0 <__swsetup_r+0xd0>)
 801b738:	429c      	cmp	r4, r3
 801b73a:	d10f      	bne.n	801b75c <__swsetup_r+0x3c>
 801b73c:	686c      	ldr	r4, [r5, #4]
 801b73e:	89a3      	ldrh	r3, [r4, #12]
 801b740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b744:	0719      	lsls	r1, r3, #28
 801b746:	d42c      	bmi.n	801b7a2 <__swsetup_r+0x82>
 801b748:	06dd      	lsls	r5, r3, #27
 801b74a:	d411      	bmi.n	801b770 <__swsetup_r+0x50>
 801b74c:	2309      	movs	r3, #9
 801b74e:	6033      	str	r3, [r6, #0]
 801b750:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b754:	81a3      	strh	r3, [r4, #12]
 801b756:	f04f 30ff 	mov.w	r0, #4294967295
 801b75a:	e03e      	b.n	801b7da <__swsetup_r+0xba>
 801b75c:	4b25      	ldr	r3, [pc, #148]	; (801b7f4 <__swsetup_r+0xd4>)
 801b75e:	429c      	cmp	r4, r3
 801b760:	d101      	bne.n	801b766 <__swsetup_r+0x46>
 801b762:	68ac      	ldr	r4, [r5, #8]
 801b764:	e7eb      	b.n	801b73e <__swsetup_r+0x1e>
 801b766:	4b24      	ldr	r3, [pc, #144]	; (801b7f8 <__swsetup_r+0xd8>)
 801b768:	429c      	cmp	r4, r3
 801b76a:	bf08      	it	eq
 801b76c:	68ec      	ldreq	r4, [r5, #12]
 801b76e:	e7e6      	b.n	801b73e <__swsetup_r+0x1e>
 801b770:	0758      	lsls	r0, r3, #29
 801b772:	d512      	bpl.n	801b79a <__swsetup_r+0x7a>
 801b774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b776:	b141      	cbz	r1, 801b78a <__swsetup_r+0x6a>
 801b778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b77c:	4299      	cmp	r1, r3
 801b77e:	d002      	beq.n	801b786 <__swsetup_r+0x66>
 801b780:	4630      	mov	r0, r6
 801b782:	f001 fc7d 	bl	801d080 <_free_r>
 801b786:	2300      	movs	r3, #0
 801b788:	6363      	str	r3, [r4, #52]	; 0x34
 801b78a:	89a3      	ldrh	r3, [r4, #12]
 801b78c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b790:	81a3      	strh	r3, [r4, #12]
 801b792:	2300      	movs	r3, #0
 801b794:	6063      	str	r3, [r4, #4]
 801b796:	6923      	ldr	r3, [r4, #16]
 801b798:	6023      	str	r3, [r4, #0]
 801b79a:	89a3      	ldrh	r3, [r4, #12]
 801b79c:	f043 0308 	orr.w	r3, r3, #8
 801b7a0:	81a3      	strh	r3, [r4, #12]
 801b7a2:	6923      	ldr	r3, [r4, #16]
 801b7a4:	b94b      	cbnz	r3, 801b7ba <__swsetup_r+0x9a>
 801b7a6:	89a3      	ldrh	r3, [r4, #12]
 801b7a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7b0:	d003      	beq.n	801b7ba <__swsetup_r+0x9a>
 801b7b2:	4621      	mov	r1, r4
 801b7b4:	4630      	mov	r0, r6
 801b7b6:	f001 f881 	bl	801c8bc <__smakebuf_r>
 801b7ba:	89a0      	ldrh	r0, [r4, #12]
 801b7bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7c0:	f010 0301 	ands.w	r3, r0, #1
 801b7c4:	d00a      	beq.n	801b7dc <__swsetup_r+0xbc>
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	60a3      	str	r3, [r4, #8]
 801b7ca:	6963      	ldr	r3, [r4, #20]
 801b7cc:	425b      	negs	r3, r3
 801b7ce:	61a3      	str	r3, [r4, #24]
 801b7d0:	6923      	ldr	r3, [r4, #16]
 801b7d2:	b943      	cbnz	r3, 801b7e6 <__swsetup_r+0xc6>
 801b7d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b7d8:	d1ba      	bne.n	801b750 <__swsetup_r+0x30>
 801b7da:	bd70      	pop	{r4, r5, r6, pc}
 801b7dc:	0781      	lsls	r1, r0, #30
 801b7de:	bf58      	it	pl
 801b7e0:	6963      	ldrpl	r3, [r4, #20]
 801b7e2:	60a3      	str	r3, [r4, #8]
 801b7e4:	e7f4      	b.n	801b7d0 <__swsetup_r+0xb0>
 801b7e6:	2000      	movs	r0, #0
 801b7e8:	e7f7      	b.n	801b7da <__swsetup_r+0xba>
 801b7ea:	bf00      	nop
 801b7ec:	20000078 	.word	0x20000078
 801b7f0:	0801de30 	.word	0x0801de30
 801b7f4:	0801de50 	.word	0x0801de50
 801b7f8:	0801de10 	.word	0x0801de10

0801b7fc <quorem>:
 801b7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b800:	6903      	ldr	r3, [r0, #16]
 801b802:	690c      	ldr	r4, [r1, #16]
 801b804:	42a3      	cmp	r3, r4
 801b806:	4607      	mov	r7, r0
 801b808:	f2c0 8081 	blt.w	801b90e <quorem+0x112>
 801b80c:	3c01      	subs	r4, #1
 801b80e:	f101 0814 	add.w	r8, r1, #20
 801b812:	f100 0514 	add.w	r5, r0, #20
 801b816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b81a:	9301      	str	r3, [sp, #4]
 801b81c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b824:	3301      	adds	r3, #1
 801b826:	429a      	cmp	r2, r3
 801b828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b82c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b830:	fbb2 f6f3 	udiv	r6, r2, r3
 801b834:	d331      	bcc.n	801b89a <quorem+0x9e>
 801b836:	f04f 0e00 	mov.w	lr, #0
 801b83a:	4640      	mov	r0, r8
 801b83c:	46ac      	mov	ip, r5
 801b83e:	46f2      	mov	sl, lr
 801b840:	f850 2b04 	ldr.w	r2, [r0], #4
 801b844:	b293      	uxth	r3, r2
 801b846:	fb06 e303 	mla	r3, r6, r3, lr
 801b84a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b84e:	b29b      	uxth	r3, r3
 801b850:	ebaa 0303 	sub.w	r3, sl, r3
 801b854:	f8dc a000 	ldr.w	sl, [ip]
 801b858:	0c12      	lsrs	r2, r2, #16
 801b85a:	fa13 f38a 	uxtah	r3, r3, sl
 801b85e:	fb06 e202 	mla	r2, r6, r2, lr
 801b862:	9300      	str	r3, [sp, #0]
 801b864:	9b00      	ldr	r3, [sp, #0]
 801b866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b86a:	b292      	uxth	r2, r2
 801b86c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b874:	f8bd 3000 	ldrh.w	r3, [sp]
 801b878:	4581      	cmp	r9, r0
 801b87a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b87e:	f84c 3b04 	str.w	r3, [ip], #4
 801b882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b886:	d2db      	bcs.n	801b840 <quorem+0x44>
 801b888:	f855 300b 	ldr.w	r3, [r5, fp]
 801b88c:	b92b      	cbnz	r3, 801b89a <quorem+0x9e>
 801b88e:	9b01      	ldr	r3, [sp, #4]
 801b890:	3b04      	subs	r3, #4
 801b892:	429d      	cmp	r5, r3
 801b894:	461a      	mov	r2, r3
 801b896:	d32e      	bcc.n	801b8f6 <quorem+0xfa>
 801b898:	613c      	str	r4, [r7, #16]
 801b89a:	4638      	mov	r0, r7
 801b89c:	f001 fad8 	bl	801ce50 <__mcmp>
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	db24      	blt.n	801b8ee <quorem+0xf2>
 801b8a4:	3601      	adds	r6, #1
 801b8a6:	4628      	mov	r0, r5
 801b8a8:	f04f 0c00 	mov.w	ip, #0
 801b8ac:	f858 2b04 	ldr.w	r2, [r8], #4
 801b8b0:	f8d0 e000 	ldr.w	lr, [r0]
 801b8b4:	b293      	uxth	r3, r2
 801b8b6:	ebac 0303 	sub.w	r3, ip, r3
 801b8ba:	0c12      	lsrs	r2, r2, #16
 801b8bc:	fa13 f38e 	uxtah	r3, r3, lr
 801b8c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b8c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b8ce:	45c1      	cmp	r9, r8
 801b8d0:	f840 3b04 	str.w	r3, [r0], #4
 801b8d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b8d8:	d2e8      	bcs.n	801b8ac <quorem+0xb0>
 801b8da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b8de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b8e2:	b922      	cbnz	r2, 801b8ee <quorem+0xf2>
 801b8e4:	3b04      	subs	r3, #4
 801b8e6:	429d      	cmp	r5, r3
 801b8e8:	461a      	mov	r2, r3
 801b8ea:	d30a      	bcc.n	801b902 <quorem+0x106>
 801b8ec:	613c      	str	r4, [r7, #16]
 801b8ee:	4630      	mov	r0, r6
 801b8f0:	b003      	add	sp, #12
 801b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8f6:	6812      	ldr	r2, [r2, #0]
 801b8f8:	3b04      	subs	r3, #4
 801b8fa:	2a00      	cmp	r2, #0
 801b8fc:	d1cc      	bne.n	801b898 <quorem+0x9c>
 801b8fe:	3c01      	subs	r4, #1
 801b900:	e7c7      	b.n	801b892 <quorem+0x96>
 801b902:	6812      	ldr	r2, [r2, #0]
 801b904:	3b04      	subs	r3, #4
 801b906:	2a00      	cmp	r2, #0
 801b908:	d1f0      	bne.n	801b8ec <quorem+0xf0>
 801b90a:	3c01      	subs	r4, #1
 801b90c:	e7eb      	b.n	801b8e6 <quorem+0xea>
 801b90e:	2000      	movs	r0, #0
 801b910:	e7ee      	b.n	801b8f0 <quorem+0xf4>
 801b912:	0000      	movs	r0, r0
 801b914:	0000      	movs	r0, r0
	...

0801b918 <_dtoa_r>:
 801b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91c:	ed2d 8b04 	vpush	{d8-d9}
 801b920:	ec57 6b10 	vmov	r6, r7, d0
 801b924:	b093      	sub	sp, #76	; 0x4c
 801b926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b92c:	9106      	str	r1, [sp, #24]
 801b92e:	ee10 aa10 	vmov	sl, s0
 801b932:	4604      	mov	r4, r0
 801b934:	9209      	str	r2, [sp, #36]	; 0x24
 801b936:	930c      	str	r3, [sp, #48]	; 0x30
 801b938:	46bb      	mov	fp, r7
 801b93a:	b975      	cbnz	r5, 801b95a <_dtoa_r+0x42>
 801b93c:	2010      	movs	r0, #16
 801b93e:	f000 fffd 	bl	801c93c <malloc>
 801b942:	4602      	mov	r2, r0
 801b944:	6260      	str	r0, [r4, #36]	; 0x24
 801b946:	b920      	cbnz	r0, 801b952 <_dtoa_r+0x3a>
 801b948:	4ba7      	ldr	r3, [pc, #668]	; (801bbe8 <_dtoa_r+0x2d0>)
 801b94a:	21ea      	movs	r1, #234	; 0xea
 801b94c:	48a7      	ldr	r0, [pc, #668]	; (801bbec <_dtoa_r+0x2d4>)
 801b94e:	f001 fe7f 	bl	801d650 <__assert_func>
 801b952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b956:	6005      	str	r5, [r0, #0]
 801b958:	60c5      	str	r5, [r0, #12]
 801b95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b95c:	6819      	ldr	r1, [r3, #0]
 801b95e:	b151      	cbz	r1, 801b976 <_dtoa_r+0x5e>
 801b960:	685a      	ldr	r2, [r3, #4]
 801b962:	604a      	str	r2, [r1, #4]
 801b964:	2301      	movs	r3, #1
 801b966:	4093      	lsls	r3, r2
 801b968:	608b      	str	r3, [r1, #8]
 801b96a:	4620      	mov	r0, r4
 801b96c:	f001 f82e 	bl	801c9cc <_Bfree>
 801b970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b972:	2200      	movs	r2, #0
 801b974:	601a      	str	r2, [r3, #0]
 801b976:	1e3b      	subs	r3, r7, #0
 801b978:	bfaa      	itet	ge
 801b97a:	2300      	movge	r3, #0
 801b97c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b980:	f8c8 3000 	strge.w	r3, [r8]
 801b984:	4b9a      	ldr	r3, [pc, #616]	; (801bbf0 <_dtoa_r+0x2d8>)
 801b986:	bfbc      	itt	lt
 801b988:	2201      	movlt	r2, #1
 801b98a:	f8c8 2000 	strlt.w	r2, [r8]
 801b98e:	ea33 030b 	bics.w	r3, r3, fp
 801b992:	d11b      	bne.n	801b9cc <_dtoa_r+0xb4>
 801b994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b996:	f242 730f 	movw	r3, #9999	; 0x270f
 801b99a:	6013      	str	r3, [r2, #0]
 801b99c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b9a0:	4333      	orrs	r3, r6
 801b9a2:	f000 8592 	beq.w	801c4ca <_dtoa_r+0xbb2>
 801b9a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9a8:	b963      	cbnz	r3, 801b9c4 <_dtoa_r+0xac>
 801b9aa:	4b92      	ldr	r3, [pc, #584]	; (801bbf4 <_dtoa_r+0x2dc>)
 801b9ac:	e022      	b.n	801b9f4 <_dtoa_r+0xdc>
 801b9ae:	4b92      	ldr	r3, [pc, #584]	; (801bbf8 <_dtoa_r+0x2e0>)
 801b9b0:	9301      	str	r3, [sp, #4]
 801b9b2:	3308      	adds	r3, #8
 801b9b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b9b6:	6013      	str	r3, [r2, #0]
 801b9b8:	9801      	ldr	r0, [sp, #4]
 801b9ba:	b013      	add	sp, #76	; 0x4c
 801b9bc:	ecbd 8b04 	vpop	{d8-d9}
 801b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c4:	4b8b      	ldr	r3, [pc, #556]	; (801bbf4 <_dtoa_r+0x2dc>)
 801b9c6:	9301      	str	r3, [sp, #4]
 801b9c8:	3303      	adds	r3, #3
 801b9ca:	e7f3      	b.n	801b9b4 <_dtoa_r+0x9c>
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	4650      	mov	r0, sl
 801b9d2:	4659      	mov	r1, fp
 801b9d4:	f7e5 f850 	bl	8000a78 <__aeabi_dcmpeq>
 801b9d8:	ec4b ab19 	vmov	d9, sl, fp
 801b9dc:	4680      	mov	r8, r0
 801b9de:	b158      	cbz	r0, 801b9f8 <_dtoa_r+0xe0>
 801b9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9e2:	2301      	movs	r3, #1
 801b9e4:	6013      	str	r3, [r2, #0]
 801b9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	f000 856b 	beq.w	801c4c4 <_dtoa_r+0xbac>
 801b9ee:	4883      	ldr	r0, [pc, #524]	; (801bbfc <_dtoa_r+0x2e4>)
 801b9f0:	6018      	str	r0, [r3, #0]
 801b9f2:	1e43      	subs	r3, r0, #1
 801b9f4:	9301      	str	r3, [sp, #4]
 801b9f6:	e7df      	b.n	801b9b8 <_dtoa_r+0xa0>
 801b9f8:	ec4b ab10 	vmov	d0, sl, fp
 801b9fc:	aa10      	add	r2, sp, #64	; 0x40
 801b9fe:	a911      	add	r1, sp, #68	; 0x44
 801ba00:	4620      	mov	r0, r4
 801ba02:	f001 facb 	bl	801cf9c <__d2b>
 801ba06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ba0a:	ee08 0a10 	vmov	s16, r0
 801ba0e:	2d00      	cmp	r5, #0
 801ba10:	f000 8084 	beq.w	801bb1c <_dtoa_r+0x204>
 801ba14:	ee19 3a90 	vmov	r3, s19
 801ba18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ba20:	4656      	mov	r6, sl
 801ba22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ba26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ba2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ba2e:	4b74      	ldr	r3, [pc, #464]	; (801bc00 <_dtoa_r+0x2e8>)
 801ba30:	2200      	movs	r2, #0
 801ba32:	4630      	mov	r0, r6
 801ba34:	4639      	mov	r1, r7
 801ba36:	f7e4 fbff 	bl	8000238 <__aeabi_dsub>
 801ba3a:	a365      	add	r3, pc, #404	; (adr r3, 801bbd0 <_dtoa_r+0x2b8>)
 801ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba40:	f7e4 fdb2 	bl	80005a8 <__aeabi_dmul>
 801ba44:	a364      	add	r3, pc, #400	; (adr r3, 801bbd8 <_dtoa_r+0x2c0>)
 801ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4a:	f7e4 fbf7 	bl	800023c <__adddf3>
 801ba4e:	4606      	mov	r6, r0
 801ba50:	4628      	mov	r0, r5
 801ba52:	460f      	mov	r7, r1
 801ba54:	f7e4 fd3e 	bl	80004d4 <__aeabi_i2d>
 801ba58:	a361      	add	r3, pc, #388	; (adr r3, 801bbe0 <_dtoa_r+0x2c8>)
 801ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba5e:	f7e4 fda3 	bl	80005a8 <__aeabi_dmul>
 801ba62:	4602      	mov	r2, r0
 801ba64:	460b      	mov	r3, r1
 801ba66:	4630      	mov	r0, r6
 801ba68:	4639      	mov	r1, r7
 801ba6a:	f7e4 fbe7 	bl	800023c <__adddf3>
 801ba6e:	4606      	mov	r6, r0
 801ba70:	460f      	mov	r7, r1
 801ba72:	f7e5 f849 	bl	8000b08 <__aeabi_d2iz>
 801ba76:	2200      	movs	r2, #0
 801ba78:	9000      	str	r0, [sp, #0]
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	4630      	mov	r0, r6
 801ba7e:	4639      	mov	r1, r7
 801ba80:	f7e5 f804 	bl	8000a8c <__aeabi_dcmplt>
 801ba84:	b150      	cbz	r0, 801ba9c <_dtoa_r+0x184>
 801ba86:	9800      	ldr	r0, [sp, #0]
 801ba88:	f7e4 fd24 	bl	80004d4 <__aeabi_i2d>
 801ba8c:	4632      	mov	r2, r6
 801ba8e:	463b      	mov	r3, r7
 801ba90:	f7e4 fff2 	bl	8000a78 <__aeabi_dcmpeq>
 801ba94:	b910      	cbnz	r0, 801ba9c <_dtoa_r+0x184>
 801ba96:	9b00      	ldr	r3, [sp, #0]
 801ba98:	3b01      	subs	r3, #1
 801ba9a:	9300      	str	r3, [sp, #0]
 801ba9c:	9b00      	ldr	r3, [sp, #0]
 801ba9e:	2b16      	cmp	r3, #22
 801baa0:	d85a      	bhi.n	801bb58 <_dtoa_r+0x240>
 801baa2:	9a00      	ldr	r2, [sp, #0]
 801baa4:	4b57      	ldr	r3, [pc, #348]	; (801bc04 <_dtoa_r+0x2ec>)
 801baa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baae:	ec51 0b19 	vmov	r0, r1, d9
 801bab2:	f7e4 ffeb 	bl	8000a8c <__aeabi_dcmplt>
 801bab6:	2800      	cmp	r0, #0
 801bab8:	d050      	beq.n	801bb5c <_dtoa_r+0x244>
 801baba:	9b00      	ldr	r3, [sp, #0]
 801babc:	3b01      	subs	r3, #1
 801babe:	9300      	str	r3, [sp, #0]
 801bac0:	2300      	movs	r3, #0
 801bac2:	930b      	str	r3, [sp, #44]	; 0x2c
 801bac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bac6:	1b5d      	subs	r5, r3, r5
 801bac8:	1e6b      	subs	r3, r5, #1
 801baca:	9305      	str	r3, [sp, #20]
 801bacc:	bf45      	ittet	mi
 801bace:	f1c5 0301 	rsbmi	r3, r5, #1
 801bad2:	9304      	strmi	r3, [sp, #16]
 801bad4:	2300      	movpl	r3, #0
 801bad6:	2300      	movmi	r3, #0
 801bad8:	bf4c      	ite	mi
 801bada:	9305      	strmi	r3, [sp, #20]
 801badc:	9304      	strpl	r3, [sp, #16]
 801bade:	9b00      	ldr	r3, [sp, #0]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	db3d      	blt.n	801bb60 <_dtoa_r+0x248>
 801bae4:	9b05      	ldr	r3, [sp, #20]
 801bae6:	9a00      	ldr	r2, [sp, #0]
 801bae8:	920a      	str	r2, [sp, #40]	; 0x28
 801baea:	4413      	add	r3, r2
 801baec:	9305      	str	r3, [sp, #20]
 801baee:	2300      	movs	r3, #0
 801baf0:	9307      	str	r3, [sp, #28]
 801baf2:	9b06      	ldr	r3, [sp, #24]
 801baf4:	2b09      	cmp	r3, #9
 801baf6:	f200 8089 	bhi.w	801bc0c <_dtoa_r+0x2f4>
 801bafa:	2b05      	cmp	r3, #5
 801bafc:	bfc4      	itt	gt
 801bafe:	3b04      	subgt	r3, #4
 801bb00:	9306      	strgt	r3, [sp, #24]
 801bb02:	9b06      	ldr	r3, [sp, #24]
 801bb04:	f1a3 0302 	sub.w	r3, r3, #2
 801bb08:	bfcc      	ite	gt
 801bb0a:	2500      	movgt	r5, #0
 801bb0c:	2501      	movle	r5, #1
 801bb0e:	2b03      	cmp	r3, #3
 801bb10:	f200 8087 	bhi.w	801bc22 <_dtoa_r+0x30a>
 801bb14:	e8df f003 	tbb	[pc, r3]
 801bb18:	59383a2d 	.word	0x59383a2d
 801bb1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bb20:	441d      	add	r5, r3
 801bb22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bb26:	2b20      	cmp	r3, #32
 801bb28:	bfc1      	itttt	gt
 801bb2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bb2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bb32:	fa0b f303 	lslgt.w	r3, fp, r3
 801bb36:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bb3a:	bfda      	itte	le
 801bb3c:	f1c3 0320 	rsble	r3, r3, #32
 801bb40:	fa06 f003 	lslle.w	r0, r6, r3
 801bb44:	4318      	orrgt	r0, r3
 801bb46:	f7e4 fcb5 	bl	80004b4 <__aeabi_ui2d>
 801bb4a:	2301      	movs	r3, #1
 801bb4c:	4606      	mov	r6, r0
 801bb4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bb52:	3d01      	subs	r5, #1
 801bb54:	930e      	str	r3, [sp, #56]	; 0x38
 801bb56:	e76a      	b.n	801ba2e <_dtoa_r+0x116>
 801bb58:	2301      	movs	r3, #1
 801bb5a:	e7b2      	b.n	801bac2 <_dtoa_r+0x1aa>
 801bb5c:	900b      	str	r0, [sp, #44]	; 0x2c
 801bb5e:	e7b1      	b.n	801bac4 <_dtoa_r+0x1ac>
 801bb60:	9b04      	ldr	r3, [sp, #16]
 801bb62:	9a00      	ldr	r2, [sp, #0]
 801bb64:	1a9b      	subs	r3, r3, r2
 801bb66:	9304      	str	r3, [sp, #16]
 801bb68:	4253      	negs	r3, r2
 801bb6a:	9307      	str	r3, [sp, #28]
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	930a      	str	r3, [sp, #40]	; 0x28
 801bb70:	e7bf      	b.n	801baf2 <_dtoa_r+0x1da>
 801bb72:	2300      	movs	r3, #0
 801bb74:	9308      	str	r3, [sp, #32]
 801bb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	dc55      	bgt.n	801bc28 <_dtoa_r+0x310>
 801bb7c:	2301      	movs	r3, #1
 801bb7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bb82:	461a      	mov	r2, r3
 801bb84:	9209      	str	r2, [sp, #36]	; 0x24
 801bb86:	e00c      	b.n	801bba2 <_dtoa_r+0x28a>
 801bb88:	2301      	movs	r3, #1
 801bb8a:	e7f3      	b.n	801bb74 <_dtoa_r+0x25c>
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb90:	9308      	str	r3, [sp, #32]
 801bb92:	9b00      	ldr	r3, [sp, #0]
 801bb94:	4413      	add	r3, r2
 801bb96:	9302      	str	r3, [sp, #8]
 801bb98:	3301      	adds	r3, #1
 801bb9a:	2b01      	cmp	r3, #1
 801bb9c:	9303      	str	r3, [sp, #12]
 801bb9e:	bfb8      	it	lt
 801bba0:	2301      	movlt	r3, #1
 801bba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bba4:	2200      	movs	r2, #0
 801bba6:	6042      	str	r2, [r0, #4]
 801bba8:	2204      	movs	r2, #4
 801bbaa:	f102 0614 	add.w	r6, r2, #20
 801bbae:	429e      	cmp	r6, r3
 801bbb0:	6841      	ldr	r1, [r0, #4]
 801bbb2:	d93d      	bls.n	801bc30 <_dtoa_r+0x318>
 801bbb4:	4620      	mov	r0, r4
 801bbb6:	f000 fec9 	bl	801c94c <_Balloc>
 801bbba:	9001      	str	r0, [sp, #4]
 801bbbc:	2800      	cmp	r0, #0
 801bbbe:	d13b      	bne.n	801bc38 <_dtoa_r+0x320>
 801bbc0:	4b11      	ldr	r3, [pc, #68]	; (801bc08 <_dtoa_r+0x2f0>)
 801bbc2:	4602      	mov	r2, r0
 801bbc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bbc8:	e6c0      	b.n	801b94c <_dtoa_r+0x34>
 801bbca:	2301      	movs	r3, #1
 801bbcc:	e7df      	b.n	801bb8e <_dtoa_r+0x276>
 801bbce:	bf00      	nop
 801bbd0:	636f4361 	.word	0x636f4361
 801bbd4:	3fd287a7 	.word	0x3fd287a7
 801bbd8:	8b60c8b3 	.word	0x8b60c8b3
 801bbdc:	3fc68a28 	.word	0x3fc68a28
 801bbe0:	509f79fb 	.word	0x509f79fb
 801bbe4:	3fd34413 	.word	0x3fd34413
 801bbe8:	0801dd8d 	.word	0x0801dd8d
 801bbec:	0801dda4 	.word	0x0801dda4
 801bbf0:	7ff00000 	.word	0x7ff00000
 801bbf4:	0801dd89 	.word	0x0801dd89
 801bbf8:	0801dd80 	.word	0x0801dd80
 801bbfc:	0801dd5d 	.word	0x0801dd5d
 801bc00:	3ff80000 	.word	0x3ff80000
 801bc04:	0801def8 	.word	0x0801def8
 801bc08:	0801ddff 	.word	0x0801ddff
 801bc0c:	2501      	movs	r5, #1
 801bc0e:	2300      	movs	r3, #0
 801bc10:	9306      	str	r3, [sp, #24]
 801bc12:	9508      	str	r5, [sp, #32]
 801bc14:	f04f 33ff 	mov.w	r3, #4294967295
 801bc18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	2312      	movs	r3, #18
 801bc20:	e7b0      	b.n	801bb84 <_dtoa_r+0x26c>
 801bc22:	2301      	movs	r3, #1
 801bc24:	9308      	str	r3, [sp, #32]
 801bc26:	e7f5      	b.n	801bc14 <_dtoa_r+0x2fc>
 801bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc2e:	e7b8      	b.n	801bba2 <_dtoa_r+0x28a>
 801bc30:	3101      	adds	r1, #1
 801bc32:	6041      	str	r1, [r0, #4]
 801bc34:	0052      	lsls	r2, r2, #1
 801bc36:	e7b8      	b.n	801bbaa <_dtoa_r+0x292>
 801bc38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc3a:	9a01      	ldr	r2, [sp, #4]
 801bc3c:	601a      	str	r2, [r3, #0]
 801bc3e:	9b03      	ldr	r3, [sp, #12]
 801bc40:	2b0e      	cmp	r3, #14
 801bc42:	f200 809d 	bhi.w	801bd80 <_dtoa_r+0x468>
 801bc46:	2d00      	cmp	r5, #0
 801bc48:	f000 809a 	beq.w	801bd80 <_dtoa_r+0x468>
 801bc4c:	9b00      	ldr	r3, [sp, #0]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	dd32      	ble.n	801bcb8 <_dtoa_r+0x3a0>
 801bc52:	4ab7      	ldr	r2, [pc, #732]	; (801bf30 <_dtoa_r+0x618>)
 801bc54:	f003 030f 	and.w	r3, r3, #15
 801bc58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bc5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bc60:	9b00      	ldr	r3, [sp, #0]
 801bc62:	05d8      	lsls	r0, r3, #23
 801bc64:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bc68:	d516      	bpl.n	801bc98 <_dtoa_r+0x380>
 801bc6a:	4bb2      	ldr	r3, [pc, #712]	; (801bf34 <_dtoa_r+0x61c>)
 801bc6c:	ec51 0b19 	vmov	r0, r1, d9
 801bc70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bc74:	f7e4 fdc2 	bl	80007fc <__aeabi_ddiv>
 801bc78:	f007 070f 	and.w	r7, r7, #15
 801bc7c:	4682      	mov	sl, r0
 801bc7e:	468b      	mov	fp, r1
 801bc80:	2503      	movs	r5, #3
 801bc82:	4eac      	ldr	r6, [pc, #688]	; (801bf34 <_dtoa_r+0x61c>)
 801bc84:	b957      	cbnz	r7, 801bc9c <_dtoa_r+0x384>
 801bc86:	4642      	mov	r2, r8
 801bc88:	464b      	mov	r3, r9
 801bc8a:	4650      	mov	r0, sl
 801bc8c:	4659      	mov	r1, fp
 801bc8e:	f7e4 fdb5 	bl	80007fc <__aeabi_ddiv>
 801bc92:	4682      	mov	sl, r0
 801bc94:	468b      	mov	fp, r1
 801bc96:	e028      	b.n	801bcea <_dtoa_r+0x3d2>
 801bc98:	2502      	movs	r5, #2
 801bc9a:	e7f2      	b.n	801bc82 <_dtoa_r+0x36a>
 801bc9c:	07f9      	lsls	r1, r7, #31
 801bc9e:	d508      	bpl.n	801bcb2 <_dtoa_r+0x39a>
 801bca0:	4640      	mov	r0, r8
 801bca2:	4649      	mov	r1, r9
 801bca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bca8:	f7e4 fc7e 	bl	80005a8 <__aeabi_dmul>
 801bcac:	3501      	adds	r5, #1
 801bcae:	4680      	mov	r8, r0
 801bcb0:	4689      	mov	r9, r1
 801bcb2:	107f      	asrs	r7, r7, #1
 801bcb4:	3608      	adds	r6, #8
 801bcb6:	e7e5      	b.n	801bc84 <_dtoa_r+0x36c>
 801bcb8:	f000 809b 	beq.w	801bdf2 <_dtoa_r+0x4da>
 801bcbc:	9b00      	ldr	r3, [sp, #0]
 801bcbe:	4f9d      	ldr	r7, [pc, #628]	; (801bf34 <_dtoa_r+0x61c>)
 801bcc0:	425e      	negs	r6, r3
 801bcc2:	4b9b      	ldr	r3, [pc, #620]	; (801bf30 <_dtoa_r+0x618>)
 801bcc4:	f006 020f 	and.w	r2, r6, #15
 801bcc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd0:	ec51 0b19 	vmov	r0, r1, d9
 801bcd4:	f7e4 fc68 	bl	80005a8 <__aeabi_dmul>
 801bcd8:	1136      	asrs	r6, r6, #4
 801bcda:	4682      	mov	sl, r0
 801bcdc:	468b      	mov	fp, r1
 801bcde:	2300      	movs	r3, #0
 801bce0:	2502      	movs	r5, #2
 801bce2:	2e00      	cmp	r6, #0
 801bce4:	d17a      	bne.n	801bddc <_dtoa_r+0x4c4>
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d1d3      	bne.n	801bc92 <_dtoa_r+0x37a>
 801bcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	f000 8082 	beq.w	801bdf6 <_dtoa_r+0x4de>
 801bcf2:	4b91      	ldr	r3, [pc, #580]	; (801bf38 <_dtoa_r+0x620>)
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	4650      	mov	r0, sl
 801bcf8:	4659      	mov	r1, fp
 801bcfa:	f7e4 fec7 	bl	8000a8c <__aeabi_dcmplt>
 801bcfe:	2800      	cmp	r0, #0
 801bd00:	d079      	beq.n	801bdf6 <_dtoa_r+0x4de>
 801bd02:	9b03      	ldr	r3, [sp, #12]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d076      	beq.n	801bdf6 <_dtoa_r+0x4de>
 801bd08:	9b02      	ldr	r3, [sp, #8]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	dd36      	ble.n	801bd7c <_dtoa_r+0x464>
 801bd0e:	9b00      	ldr	r3, [sp, #0]
 801bd10:	4650      	mov	r0, sl
 801bd12:	4659      	mov	r1, fp
 801bd14:	1e5f      	subs	r7, r3, #1
 801bd16:	2200      	movs	r2, #0
 801bd18:	4b88      	ldr	r3, [pc, #544]	; (801bf3c <_dtoa_r+0x624>)
 801bd1a:	f7e4 fc45 	bl	80005a8 <__aeabi_dmul>
 801bd1e:	9e02      	ldr	r6, [sp, #8]
 801bd20:	4682      	mov	sl, r0
 801bd22:	468b      	mov	fp, r1
 801bd24:	3501      	adds	r5, #1
 801bd26:	4628      	mov	r0, r5
 801bd28:	f7e4 fbd4 	bl	80004d4 <__aeabi_i2d>
 801bd2c:	4652      	mov	r2, sl
 801bd2e:	465b      	mov	r3, fp
 801bd30:	f7e4 fc3a 	bl	80005a8 <__aeabi_dmul>
 801bd34:	4b82      	ldr	r3, [pc, #520]	; (801bf40 <_dtoa_r+0x628>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	f7e4 fa80 	bl	800023c <__adddf3>
 801bd3c:	46d0      	mov	r8, sl
 801bd3e:	46d9      	mov	r9, fp
 801bd40:	4682      	mov	sl, r0
 801bd42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bd46:	2e00      	cmp	r6, #0
 801bd48:	d158      	bne.n	801bdfc <_dtoa_r+0x4e4>
 801bd4a:	4b7e      	ldr	r3, [pc, #504]	; (801bf44 <_dtoa_r+0x62c>)
 801bd4c:	2200      	movs	r2, #0
 801bd4e:	4640      	mov	r0, r8
 801bd50:	4649      	mov	r1, r9
 801bd52:	f7e4 fa71 	bl	8000238 <__aeabi_dsub>
 801bd56:	4652      	mov	r2, sl
 801bd58:	465b      	mov	r3, fp
 801bd5a:	4680      	mov	r8, r0
 801bd5c:	4689      	mov	r9, r1
 801bd5e:	f7e4 feb3 	bl	8000ac8 <__aeabi_dcmpgt>
 801bd62:	2800      	cmp	r0, #0
 801bd64:	f040 8295 	bne.w	801c292 <_dtoa_r+0x97a>
 801bd68:	4652      	mov	r2, sl
 801bd6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bd6e:	4640      	mov	r0, r8
 801bd70:	4649      	mov	r1, r9
 801bd72:	f7e4 fe8b 	bl	8000a8c <__aeabi_dcmplt>
 801bd76:	2800      	cmp	r0, #0
 801bd78:	f040 8289 	bne.w	801c28e <_dtoa_r+0x976>
 801bd7c:	ec5b ab19 	vmov	sl, fp, d9
 801bd80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	f2c0 8148 	blt.w	801c018 <_dtoa_r+0x700>
 801bd88:	9a00      	ldr	r2, [sp, #0]
 801bd8a:	2a0e      	cmp	r2, #14
 801bd8c:	f300 8144 	bgt.w	801c018 <_dtoa_r+0x700>
 801bd90:	4b67      	ldr	r3, [pc, #412]	; (801bf30 <_dtoa_r+0x618>)
 801bd92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd96:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	f280 80d5 	bge.w	801bf4c <_dtoa_r+0x634>
 801bda2:	9b03      	ldr	r3, [sp, #12]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	f300 80d1 	bgt.w	801bf4c <_dtoa_r+0x634>
 801bdaa:	f040 826f 	bne.w	801c28c <_dtoa_r+0x974>
 801bdae:	4b65      	ldr	r3, [pc, #404]	; (801bf44 <_dtoa_r+0x62c>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	4640      	mov	r0, r8
 801bdb4:	4649      	mov	r1, r9
 801bdb6:	f7e4 fbf7 	bl	80005a8 <__aeabi_dmul>
 801bdba:	4652      	mov	r2, sl
 801bdbc:	465b      	mov	r3, fp
 801bdbe:	f7e4 fe79 	bl	8000ab4 <__aeabi_dcmpge>
 801bdc2:	9e03      	ldr	r6, [sp, #12]
 801bdc4:	4637      	mov	r7, r6
 801bdc6:	2800      	cmp	r0, #0
 801bdc8:	f040 8245 	bne.w	801c256 <_dtoa_r+0x93e>
 801bdcc:	9d01      	ldr	r5, [sp, #4]
 801bdce:	2331      	movs	r3, #49	; 0x31
 801bdd0:	f805 3b01 	strb.w	r3, [r5], #1
 801bdd4:	9b00      	ldr	r3, [sp, #0]
 801bdd6:	3301      	adds	r3, #1
 801bdd8:	9300      	str	r3, [sp, #0]
 801bdda:	e240      	b.n	801c25e <_dtoa_r+0x946>
 801bddc:	07f2      	lsls	r2, r6, #31
 801bdde:	d505      	bpl.n	801bdec <_dtoa_r+0x4d4>
 801bde0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bde4:	f7e4 fbe0 	bl	80005a8 <__aeabi_dmul>
 801bde8:	3501      	adds	r5, #1
 801bdea:	2301      	movs	r3, #1
 801bdec:	1076      	asrs	r6, r6, #1
 801bdee:	3708      	adds	r7, #8
 801bdf0:	e777      	b.n	801bce2 <_dtoa_r+0x3ca>
 801bdf2:	2502      	movs	r5, #2
 801bdf4:	e779      	b.n	801bcea <_dtoa_r+0x3d2>
 801bdf6:	9f00      	ldr	r7, [sp, #0]
 801bdf8:	9e03      	ldr	r6, [sp, #12]
 801bdfa:	e794      	b.n	801bd26 <_dtoa_r+0x40e>
 801bdfc:	9901      	ldr	r1, [sp, #4]
 801bdfe:	4b4c      	ldr	r3, [pc, #304]	; (801bf30 <_dtoa_r+0x618>)
 801be00:	4431      	add	r1, r6
 801be02:	910d      	str	r1, [sp, #52]	; 0x34
 801be04:	9908      	ldr	r1, [sp, #32]
 801be06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801be0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801be0e:	2900      	cmp	r1, #0
 801be10:	d043      	beq.n	801be9a <_dtoa_r+0x582>
 801be12:	494d      	ldr	r1, [pc, #308]	; (801bf48 <_dtoa_r+0x630>)
 801be14:	2000      	movs	r0, #0
 801be16:	f7e4 fcf1 	bl	80007fc <__aeabi_ddiv>
 801be1a:	4652      	mov	r2, sl
 801be1c:	465b      	mov	r3, fp
 801be1e:	f7e4 fa0b 	bl	8000238 <__aeabi_dsub>
 801be22:	9d01      	ldr	r5, [sp, #4]
 801be24:	4682      	mov	sl, r0
 801be26:	468b      	mov	fp, r1
 801be28:	4649      	mov	r1, r9
 801be2a:	4640      	mov	r0, r8
 801be2c:	f7e4 fe6c 	bl	8000b08 <__aeabi_d2iz>
 801be30:	4606      	mov	r6, r0
 801be32:	f7e4 fb4f 	bl	80004d4 <__aeabi_i2d>
 801be36:	4602      	mov	r2, r0
 801be38:	460b      	mov	r3, r1
 801be3a:	4640      	mov	r0, r8
 801be3c:	4649      	mov	r1, r9
 801be3e:	f7e4 f9fb 	bl	8000238 <__aeabi_dsub>
 801be42:	3630      	adds	r6, #48	; 0x30
 801be44:	f805 6b01 	strb.w	r6, [r5], #1
 801be48:	4652      	mov	r2, sl
 801be4a:	465b      	mov	r3, fp
 801be4c:	4680      	mov	r8, r0
 801be4e:	4689      	mov	r9, r1
 801be50:	f7e4 fe1c 	bl	8000a8c <__aeabi_dcmplt>
 801be54:	2800      	cmp	r0, #0
 801be56:	d163      	bne.n	801bf20 <_dtoa_r+0x608>
 801be58:	4642      	mov	r2, r8
 801be5a:	464b      	mov	r3, r9
 801be5c:	4936      	ldr	r1, [pc, #216]	; (801bf38 <_dtoa_r+0x620>)
 801be5e:	2000      	movs	r0, #0
 801be60:	f7e4 f9ea 	bl	8000238 <__aeabi_dsub>
 801be64:	4652      	mov	r2, sl
 801be66:	465b      	mov	r3, fp
 801be68:	f7e4 fe10 	bl	8000a8c <__aeabi_dcmplt>
 801be6c:	2800      	cmp	r0, #0
 801be6e:	f040 80b5 	bne.w	801bfdc <_dtoa_r+0x6c4>
 801be72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be74:	429d      	cmp	r5, r3
 801be76:	d081      	beq.n	801bd7c <_dtoa_r+0x464>
 801be78:	4b30      	ldr	r3, [pc, #192]	; (801bf3c <_dtoa_r+0x624>)
 801be7a:	2200      	movs	r2, #0
 801be7c:	4650      	mov	r0, sl
 801be7e:	4659      	mov	r1, fp
 801be80:	f7e4 fb92 	bl	80005a8 <__aeabi_dmul>
 801be84:	4b2d      	ldr	r3, [pc, #180]	; (801bf3c <_dtoa_r+0x624>)
 801be86:	4682      	mov	sl, r0
 801be88:	468b      	mov	fp, r1
 801be8a:	4640      	mov	r0, r8
 801be8c:	4649      	mov	r1, r9
 801be8e:	2200      	movs	r2, #0
 801be90:	f7e4 fb8a 	bl	80005a8 <__aeabi_dmul>
 801be94:	4680      	mov	r8, r0
 801be96:	4689      	mov	r9, r1
 801be98:	e7c6      	b.n	801be28 <_dtoa_r+0x510>
 801be9a:	4650      	mov	r0, sl
 801be9c:	4659      	mov	r1, fp
 801be9e:	f7e4 fb83 	bl	80005a8 <__aeabi_dmul>
 801bea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bea4:	9d01      	ldr	r5, [sp, #4]
 801bea6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bea8:	4682      	mov	sl, r0
 801beaa:	468b      	mov	fp, r1
 801beac:	4649      	mov	r1, r9
 801beae:	4640      	mov	r0, r8
 801beb0:	f7e4 fe2a 	bl	8000b08 <__aeabi_d2iz>
 801beb4:	4606      	mov	r6, r0
 801beb6:	f7e4 fb0d 	bl	80004d4 <__aeabi_i2d>
 801beba:	3630      	adds	r6, #48	; 0x30
 801bebc:	4602      	mov	r2, r0
 801bebe:	460b      	mov	r3, r1
 801bec0:	4640      	mov	r0, r8
 801bec2:	4649      	mov	r1, r9
 801bec4:	f7e4 f9b8 	bl	8000238 <__aeabi_dsub>
 801bec8:	f805 6b01 	strb.w	r6, [r5], #1
 801becc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bece:	429d      	cmp	r5, r3
 801bed0:	4680      	mov	r8, r0
 801bed2:	4689      	mov	r9, r1
 801bed4:	f04f 0200 	mov.w	r2, #0
 801bed8:	d124      	bne.n	801bf24 <_dtoa_r+0x60c>
 801beda:	4b1b      	ldr	r3, [pc, #108]	; (801bf48 <_dtoa_r+0x630>)
 801bedc:	4650      	mov	r0, sl
 801bede:	4659      	mov	r1, fp
 801bee0:	f7e4 f9ac 	bl	800023c <__adddf3>
 801bee4:	4602      	mov	r2, r0
 801bee6:	460b      	mov	r3, r1
 801bee8:	4640      	mov	r0, r8
 801beea:	4649      	mov	r1, r9
 801beec:	f7e4 fdec 	bl	8000ac8 <__aeabi_dcmpgt>
 801bef0:	2800      	cmp	r0, #0
 801bef2:	d173      	bne.n	801bfdc <_dtoa_r+0x6c4>
 801bef4:	4652      	mov	r2, sl
 801bef6:	465b      	mov	r3, fp
 801bef8:	4913      	ldr	r1, [pc, #76]	; (801bf48 <_dtoa_r+0x630>)
 801befa:	2000      	movs	r0, #0
 801befc:	f7e4 f99c 	bl	8000238 <__aeabi_dsub>
 801bf00:	4602      	mov	r2, r0
 801bf02:	460b      	mov	r3, r1
 801bf04:	4640      	mov	r0, r8
 801bf06:	4649      	mov	r1, r9
 801bf08:	f7e4 fdc0 	bl	8000a8c <__aeabi_dcmplt>
 801bf0c:	2800      	cmp	r0, #0
 801bf0e:	f43f af35 	beq.w	801bd7c <_dtoa_r+0x464>
 801bf12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bf14:	1e6b      	subs	r3, r5, #1
 801bf16:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bf1c:	2b30      	cmp	r3, #48	; 0x30
 801bf1e:	d0f8      	beq.n	801bf12 <_dtoa_r+0x5fa>
 801bf20:	9700      	str	r7, [sp, #0]
 801bf22:	e049      	b.n	801bfb8 <_dtoa_r+0x6a0>
 801bf24:	4b05      	ldr	r3, [pc, #20]	; (801bf3c <_dtoa_r+0x624>)
 801bf26:	f7e4 fb3f 	bl	80005a8 <__aeabi_dmul>
 801bf2a:	4680      	mov	r8, r0
 801bf2c:	4689      	mov	r9, r1
 801bf2e:	e7bd      	b.n	801beac <_dtoa_r+0x594>
 801bf30:	0801def8 	.word	0x0801def8
 801bf34:	0801ded0 	.word	0x0801ded0
 801bf38:	3ff00000 	.word	0x3ff00000
 801bf3c:	40240000 	.word	0x40240000
 801bf40:	401c0000 	.word	0x401c0000
 801bf44:	40140000 	.word	0x40140000
 801bf48:	3fe00000 	.word	0x3fe00000
 801bf4c:	9d01      	ldr	r5, [sp, #4]
 801bf4e:	4656      	mov	r6, sl
 801bf50:	465f      	mov	r7, fp
 801bf52:	4642      	mov	r2, r8
 801bf54:	464b      	mov	r3, r9
 801bf56:	4630      	mov	r0, r6
 801bf58:	4639      	mov	r1, r7
 801bf5a:	f7e4 fc4f 	bl	80007fc <__aeabi_ddiv>
 801bf5e:	f7e4 fdd3 	bl	8000b08 <__aeabi_d2iz>
 801bf62:	4682      	mov	sl, r0
 801bf64:	f7e4 fab6 	bl	80004d4 <__aeabi_i2d>
 801bf68:	4642      	mov	r2, r8
 801bf6a:	464b      	mov	r3, r9
 801bf6c:	f7e4 fb1c 	bl	80005a8 <__aeabi_dmul>
 801bf70:	4602      	mov	r2, r0
 801bf72:	460b      	mov	r3, r1
 801bf74:	4630      	mov	r0, r6
 801bf76:	4639      	mov	r1, r7
 801bf78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bf7c:	f7e4 f95c 	bl	8000238 <__aeabi_dsub>
 801bf80:	f805 6b01 	strb.w	r6, [r5], #1
 801bf84:	9e01      	ldr	r6, [sp, #4]
 801bf86:	9f03      	ldr	r7, [sp, #12]
 801bf88:	1bae      	subs	r6, r5, r6
 801bf8a:	42b7      	cmp	r7, r6
 801bf8c:	4602      	mov	r2, r0
 801bf8e:	460b      	mov	r3, r1
 801bf90:	d135      	bne.n	801bffe <_dtoa_r+0x6e6>
 801bf92:	f7e4 f953 	bl	800023c <__adddf3>
 801bf96:	4642      	mov	r2, r8
 801bf98:	464b      	mov	r3, r9
 801bf9a:	4606      	mov	r6, r0
 801bf9c:	460f      	mov	r7, r1
 801bf9e:	f7e4 fd93 	bl	8000ac8 <__aeabi_dcmpgt>
 801bfa2:	b9d0      	cbnz	r0, 801bfda <_dtoa_r+0x6c2>
 801bfa4:	4642      	mov	r2, r8
 801bfa6:	464b      	mov	r3, r9
 801bfa8:	4630      	mov	r0, r6
 801bfaa:	4639      	mov	r1, r7
 801bfac:	f7e4 fd64 	bl	8000a78 <__aeabi_dcmpeq>
 801bfb0:	b110      	cbz	r0, 801bfb8 <_dtoa_r+0x6a0>
 801bfb2:	f01a 0f01 	tst.w	sl, #1
 801bfb6:	d110      	bne.n	801bfda <_dtoa_r+0x6c2>
 801bfb8:	4620      	mov	r0, r4
 801bfba:	ee18 1a10 	vmov	r1, s16
 801bfbe:	f000 fd05 	bl	801c9cc <_Bfree>
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	9800      	ldr	r0, [sp, #0]
 801bfc6:	702b      	strb	r3, [r5, #0]
 801bfc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfca:	3001      	adds	r0, #1
 801bfcc:	6018      	str	r0, [r3, #0]
 801bfce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	f43f acf1 	beq.w	801b9b8 <_dtoa_r+0xa0>
 801bfd6:	601d      	str	r5, [r3, #0]
 801bfd8:	e4ee      	b.n	801b9b8 <_dtoa_r+0xa0>
 801bfda:	9f00      	ldr	r7, [sp, #0]
 801bfdc:	462b      	mov	r3, r5
 801bfde:	461d      	mov	r5, r3
 801bfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bfe4:	2a39      	cmp	r2, #57	; 0x39
 801bfe6:	d106      	bne.n	801bff6 <_dtoa_r+0x6de>
 801bfe8:	9a01      	ldr	r2, [sp, #4]
 801bfea:	429a      	cmp	r2, r3
 801bfec:	d1f7      	bne.n	801bfde <_dtoa_r+0x6c6>
 801bfee:	9901      	ldr	r1, [sp, #4]
 801bff0:	2230      	movs	r2, #48	; 0x30
 801bff2:	3701      	adds	r7, #1
 801bff4:	700a      	strb	r2, [r1, #0]
 801bff6:	781a      	ldrb	r2, [r3, #0]
 801bff8:	3201      	adds	r2, #1
 801bffa:	701a      	strb	r2, [r3, #0]
 801bffc:	e790      	b.n	801bf20 <_dtoa_r+0x608>
 801bffe:	4ba6      	ldr	r3, [pc, #664]	; (801c298 <_dtoa_r+0x980>)
 801c000:	2200      	movs	r2, #0
 801c002:	f7e4 fad1 	bl	80005a8 <__aeabi_dmul>
 801c006:	2200      	movs	r2, #0
 801c008:	2300      	movs	r3, #0
 801c00a:	4606      	mov	r6, r0
 801c00c:	460f      	mov	r7, r1
 801c00e:	f7e4 fd33 	bl	8000a78 <__aeabi_dcmpeq>
 801c012:	2800      	cmp	r0, #0
 801c014:	d09d      	beq.n	801bf52 <_dtoa_r+0x63a>
 801c016:	e7cf      	b.n	801bfb8 <_dtoa_r+0x6a0>
 801c018:	9a08      	ldr	r2, [sp, #32]
 801c01a:	2a00      	cmp	r2, #0
 801c01c:	f000 80d7 	beq.w	801c1ce <_dtoa_r+0x8b6>
 801c020:	9a06      	ldr	r2, [sp, #24]
 801c022:	2a01      	cmp	r2, #1
 801c024:	f300 80ba 	bgt.w	801c19c <_dtoa_r+0x884>
 801c028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c02a:	2a00      	cmp	r2, #0
 801c02c:	f000 80b2 	beq.w	801c194 <_dtoa_r+0x87c>
 801c030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c034:	9e07      	ldr	r6, [sp, #28]
 801c036:	9d04      	ldr	r5, [sp, #16]
 801c038:	9a04      	ldr	r2, [sp, #16]
 801c03a:	441a      	add	r2, r3
 801c03c:	9204      	str	r2, [sp, #16]
 801c03e:	9a05      	ldr	r2, [sp, #20]
 801c040:	2101      	movs	r1, #1
 801c042:	441a      	add	r2, r3
 801c044:	4620      	mov	r0, r4
 801c046:	9205      	str	r2, [sp, #20]
 801c048:	f000 fd78 	bl	801cb3c <__i2b>
 801c04c:	4607      	mov	r7, r0
 801c04e:	2d00      	cmp	r5, #0
 801c050:	dd0c      	ble.n	801c06c <_dtoa_r+0x754>
 801c052:	9b05      	ldr	r3, [sp, #20]
 801c054:	2b00      	cmp	r3, #0
 801c056:	dd09      	ble.n	801c06c <_dtoa_r+0x754>
 801c058:	42ab      	cmp	r3, r5
 801c05a:	9a04      	ldr	r2, [sp, #16]
 801c05c:	bfa8      	it	ge
 801c05e:	462b      	movge	r3, r5
 801c060:	1ad2      	subs	r2, r2, r3
 801c062:	9204      	str	r2, [sp, #16]
 801c064:	9a05      	ldr	r2, [sp, #20]
 801c066:	1aed      	subs	r5, r5, r3
 801c068:	1ad3      	subs	r3, r2, r3
 801c06a:	9305      	str	r3, [sp, #20]
 801c06c:	9b07      	ldr	r3, [sp, #28]
 801c06e:	b31b      	cbz	r3, 801c0b8 <_dtoa_r+0x7a0>
 801c070:	9b08      	ldr	r3, [sp, #32]
 801c072:	2b00      	cmp	r3, #0
 801c074:	f000 80af 	beq.w	801c1d6 <_dtoa_r+0x8be>
 801c078:	2e00      	cmp	r6, #0
 801c07a:	dd13      	ble.n	801c0a4 <_dtoa_r+0x78c>
 801c07c:	4639      	mov	r1, r7
 801c07e:	4632      	mov	r2, r6
 801c080:	4620      	mov	r0, r4
 801c082:	f000 fe1b 	bl	801ccbc <__pow5mult>
 801c086:	ee18 2a10 	vmov	r2, s16
 801c08a:	4601      	mov	r1, r0
 801c08c:	4607      	mov	r7, r0
 801c08e:	4620      	mov	r0, r4
 801c090:	f000 fd6a 	bl	801cb68 <__multiply>
 801c094:	ee18 1a10 	vmov	r1, s16
 801c098:	4680      	mov	r8, r0
 801c09a:	4620      	mov	r0, r4
 801c09c:	f000 fc96 	bl	801c9cc <_Bfree>
 801c0a0:	ee08 8a10 	vmov	s16, r8
 801c0a4:	9b07      	ldr	r3, [sp, #28]
 801c0a6:	1b9a      	subs	r2, r3, r6
 801c0a8:	d006      	beq.n	801c0b8 <_dtoa_r+0x7a0>
 801c0aa:	ee18 1a10 	vmov	r1, s16
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	f000 fe04 	bl	801ccbc <__pow5mult>
 801c0b4:	ee08 0a10 	vmov	s16, r0
 801c0b8:	2101      	movs	r1, #1
 801c0ba:	4620      	mov	r0, r4
 801c0bc:	f000 fd3e 	bl	801cb3c <__i2b>
 801c0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	4606      	mov	r6, r0
 801c0c6:	f340 8088 	ble.w	801c1da <_dtoa_r+0x8c2>
 801c0ca:	461a      	mov	r2, r3
 801c0cc:	4601      	mov	r1, r0
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	f000 fdf4 	bl	801ccbc <__pow5mult>
 801c0d4:	9b06      	ldr	r3, [sp, #24]
 801c0d6:	2b01      	cmp	r3, #1
 801c0d8:	4606      	mov	r6, r0
 801c0da:	f340 8081 	ble.w	801c1e0 <_dtoa_r+0x8c8>
 801c0de:	f04f 0800 	mov.w	r8, #0
 801c0e2:	6933      	ldr	r3, [r6, #16]
 801c0e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c0e8:	6918      	ldr	r0, [r3, #16]
 801c0ea:	f000 fcd7 	bl	801ca9c <__hi0bits>
 801c0ee:	f1c0 0020 	rsb	r0, r0, #32
 801c0f2:	9b05      	ldr	r3, [sp, #20]
 801c0f4:	4418      	add	r0, r3
 801c0f6:	f010 001f 	ands.w	r0, r0, #31
 801c0fa:	f000 8092 	beq.w	801c222 <_dtoa_r+0x90a>
 801c0fe:	f1c0 0320 	rsb	r3, r0, #32
 801c102:	2b04      	cmp	r3, #4
 801c104:	f340 808a 	ble.w	801c21c <_dtoa_r+0x904>
 801c108:	f1c0 001c 	rsb	r0, r0, #28
 801c10c:	9b04      	ldr	r3, [sp, #16]
 801c10e:	4403      	add	r3, r0
 801c110:	9304      	str	r3, [sp, #16]
 801c112:	9b05      	ldr	r3, [sp, #20]
 801c114:	4403      	add	r3, r0
 801c116:	4405      	add	r5, r0
 801c118:	9305      	str	r3, [sp, #20]
 801c11a:	9b04      	ldr	r3, [sp, #16]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	dd07      	ble.n	801c130 <_dtoa_r+0x818>
 801c120:	ee18 1a10 	vmov	r1, s16
 801c124:	461a      	mov	r2, r3
 801c126:	4620      	mov	r0, r4
 801c128:	f000 fe22 	bl	801cd70 <__lshift>
 801c12c:	ee08 0a10 	vmov	s16, r0
 801c130:	9b05      	ldr	r3, [sp, #20]
 801c132:	2b00      	cmp	r3, #0
 801c134:	dd05      	ble.n	801c142 <_dtoa_r+0x82a>
 801c136:	4631      	mov	r1, r6
 801c138:	461a      	mov	r2, r3
 801c13a:	4620      	mov	r0, r4
 801c13c:	f000 fe18 	bl	801cd70 <__lshift>
 801c140:	4606      	mov	r6, r0
 801c142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c144:	2b00      	cmp	r3, #0
 801c146:	d06e      	beq.n	801c226 <_dtoa_r+0x90e>
 801c148:	ee18 0a10 	vmov	r0, s16
 801c14c:	4631      	mov	r1, r6
 801c14e:	f000 fe7f 	bl	801ce50 <__mcmp>
 801c152:	2800      	cmp	r0, #0
 801c154:	da67      	bge.n	801c226 <_dtoa_r+0x90e>
 801c156:	9b00      	ldr	r3, [sp, #0]
 801c158:	3b01      	subs	r3, #1
 801c15a:	ee18 1a10 	vmov	r1, s16
 801c15e:	9300      	str	r3, [sp, #0]
 801c160:	220a      	movs	r2, #10
 801c162:	2300      	movs	r3, #0
 801c164:	4620      	mov	r0, r4
 801c166:	f000 fc53 	bl	801ca10 <__multadd>
 801c16a:	9b08      	ldr	r3, [sp, #32]
 801c16c:	ee08 0a10 	vmov	s16, r0
 801c170:	2b00      	cmp	r3, #0
 801c172:	f000 81b1 	beq.w	801c4d8 <_dtoa_r+0xbc0>
 801c176:	2300      	movs	r3, #0
 801c178:	4639      	mov	r1, r7
 801c17a:	220a      	movs	r2, #10
 801c17c:	4620      	mov	r0, r4
 801c17e:	f000 fc47 	bl	801ca10 <__multadd>
 801c182:	9b02      	ldr	r3, [sp, #8]
 801c184:	2b00      	cmp	r3, #0
 801c186:	4607      	mov	r7, r0
 801c188:	f300 808e 	bgt.w	801c2a8 <_dtoa_r+0x990>
 801c18c:	9b06      	ldr	r3, [sp, #24]
 801c18e:	2b02      	cmp	r3, #2
 801c190:	dc51      	bgt.n	801c236 <_dtoa_r+0x91e>
 801c192:	e089      	b.n	801c2a8 <_dtoa_r+0x990>
 801c194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c19a:	e74b      	b.n	801c034 <_dtoa_r+0x71c>
 801c19c:	9b03      	ldr	r3, [sp, #12]
 801c19e:	1e5e      	subs	r6, r3, #1
 801c1a0:	9b07      	ldr	r3, [sp, #28]
 801c1a2:	42b3      	cmp	r3, r6
 801c1a4:	bfbf      	itttt	lt
 801c1a6:	9b07      	ldrlt	r3, [sp, #28]
 801c1a8:	9607      	strlt	r6, [sp, #28]
 801c1aa:	1af2      	sublt	r2, r6, r3
 801c1ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c1ae:	bfb6      	itet	lt
 801c1b0:	189b      	addlt	r3, r3, r2
 801c1b2:	1b9e      	subge	r6, r3, r6
 801c1b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c1b6:	9b03      	ldr	r3, [sp, #12]
 801c1b8:	bfb8      	it	lt
 801c1ba:	2600      	movlt	r6, #0
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	bfb7      	itett	lt
 801c1c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c1c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c1c8:	1a9d      	sublt	r5, r3, r2
 801c1ca:	2300      	movlt	r3, #0
 801c1cc:	e734      	b.n	801c038 <_dtoa_r+0x720>
 801c1ce:	9e07      	ldr	r6, [sp, #28]
 801c1d0:	9d04      	ldr	r5, [sp, #16]
 801c1d2:	9f08      	ldr	r7, [sp, #32]
 801c1d4:	e73b      	b.n	801c04e <_dtoa_r+0x736>
 801c1d6:	9a07      	ldr	r2, [sp, #28]
 801c1d8:	e767      	b.n	801c0aa <_dtoa_r+0x792>
 801c1da:	9b06      	ldr	r3, [sp, #24]
 801c1dc:	2b01      	cmp	r3, #1
 801c1de:	dc18      	bgt.n	801c212 <_dtoa_r+0x8fa>
 801c1e0:	f1ba 0f00 	cmp.w	sl, #0
 801c1e4:	d115      	bne.n	801c212 <_dtoa_r+0x8fa>
 801c1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1ea:	b993      	cbnz	r3, 801c212 <_dtoa_r+0x8fa>
 801c1ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c1f0:	0d1b      	lsrs	r3, r3, #20
 801c1f2:	051b      	lsls	r3, r3, #20
 801c1f4:	b183      	cbz	r3, 801c218 <_dtoa_r+0x900>
 801c1f6:	9b04      	ldr	r3, [sp, #16]
 801c1f8:	3301      	adds	r3, #1
 801c1fa:	9304      	str	r3, [sp, #16]
 801c1fc:	9b05      	ldr	r3, [sp, #20]
 801c1fe:	3301      	adds	r3, #1
 801c200:	9305      	str	r3, [sp, #20]
 801c202:	f04f 0801 	mov.w	r8, #1
 801c206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c208:	2b00      	cmp	r3, #0
 801c20a:	f47f af6a 	bne.w	801c0e2 <_dtoa_r+0x7ca>
 801c20e:	2001      	movs	r0, #1
 801c210:	e76f      	b.n	801c0f2 <_dtoa_r+0x7da>
 801c212:	f04f 0800 	mov.w	r8, #0
 801c216:	e7f6      	b.n	801c206 <_dtoa_r+0x8ee>
 801c218:	4698      	mov	r8, r3
 801c21a:	e7f4      	b.n	801c206 <_dtoa_r+0x8ee>
 801c21c:	f43f af7d 	beq.w	801c11a <_dtoa_r+0x802>
 801c220:	4618      	mov	r0, r3
 801c222:	301c      	adds	r0, #28
 801c224:	e772      	b.n	801c10c <_dtoa_r+0x7f4>
 801c226:	9b03      	ldr	r3, [sp, #12]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	dc37      	bgt.n	801c29c <_dtoa_r+0x984>
 801c22c:	9b06      	ldr	r3, [sp, #24]
 801c22e:	2b02      	cmp	r3, #2
 801c230:	dd34      	ble.n	801c29c <_dtoa_r+0x984>
 801c232:	9b03      	ldr	r3, [sp, #12]
 801c234:	9302      	str	r3, [sp, #8]
 801c236:	9b02      	ldr	r3, [sp, #8]
 801c238:	b96b      	cbnz	r3, 801c256 <_dtoa_r+0x93e>
 801c23a:	4631      	mov	r1, r6
 801c23c:	2205      	movs	r2, #5
 801c23e:	4620      	mov	r0, r4
 801c240:	f000 fbe6 	bl	801ca10 <__multadd>
 801c244:	4601      	mov	r1, r0
 801c246:	4606      	mov	r6, r0
 801c248:	ee18 0a10 	vmov	r0, s16
 801c24c:	f000 fe00 	bl	801ce50 <__mcmp>
 801c250:	2800      	cmp	r0, #0
 801c252:	f73f adbb 	bgt.w	801bdcc <_dtoa_r+0x4b4>
 801c256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c258:	9d01      	ldr	r5, [sp, #4]
 801c25a:	43db      	mvns	r3, r3
 801c25c:	9300      	str	r3, [sp, #0]
 801c25e:	f04f 0800 	mov.w	r8, #0
 801c262:	4631      	mov	r1, r6
 801c264:	4620      	mov	r0, r4
 801c266:	f000 fbb1 	bl	801c9cc <_Bfree>
 801c26a:	2f00      	cmp	r7, #0
 801c26c:	f43f aea4 	beq.w	801bfb8 <_dtoa_r+0x6a0>
 801c270:	f1b8 0f00 	cmp.w	r8, #0
 801c274:	d005      	beq.n	801c282 <_dtoa_r+0x96a>
 801c276:	45b8      	cmp	r8, r7
 801c278:	d003      	beq.n	801c282 <_dtoa_r+0x96a>
 801c27a:	4641      	mov	r1, r8
 801c27c:	4620      	mov	r0, r4
 801c27e:	f000 fba5 	bl	801c9cc <_Bfree>
 801c282:	4639      	mov	r1, r7
 801c284:	4620      	mov	r0, r4
 801c286:	f000 fba1 	bl	801c9cc <_Bfree>
 801c28a:	e695      	b.n	801bfb8 <_dtoa_r+0x6a0>
 801c28c:	2600      	movs	r6, #0
 801c28e:	4637      	mov	r7, r6
 801c290:	e7e1      	b.n	801c256 <_dtoa_r+0x93e>
 801c292:	9700      	str	r7, [sp, #0]
 801c294:	4637      	mov	r7, r6
 801c296:	e599      	b.n	801bdcc <_dtoa_r+0x4b4>
 801c298:	40240000 	.word	0x40240000
 801c29c:	9b08      	ldr	r3, [sp, #32]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	f000 80ca 	beq.w	801c438 <_dtoa_r+0xb20>
 801c2a4:	9b03      	ldr	r3, [sp, #12]
 801c2a6:	9302      	str	r3, [sp, #8]
 801c2a8:	2d00      	cmp	r5, #0
 801c2aa:	dd05      	ble.n	801c2b8 <_dtoa_r+0x9a0>
 801c2ac:	4639      	mov	r1, r7
 801c2ae:	462a      	mov	r2, r5
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f000 fd5d 	bl	801cd70 <__lshift>
 801c2b6:	4607      	mov	r7, r0
 801c2b8:	f1b8 0f00 	cmp.w	r8, #0
 801c2bc:	d05b      	beq.n	801c376 <_dtoa_r+0xa5e>
 801c2be:	6879      	ldr	r1, [r7, #4]
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	f000 fb43 	bl	801c94c <_Balloc>
 801c2c6:	4605      	mov	r5, r0
 801c2c8:	b928      	cbnz	r0, 801c2d6 <_dtoa_r+0x9be>
 801c2ca:	4b87      	ldr	r3, [pc, #540]	; (801c4e8 <_dtoa_r+0xbd0>)
 801c2cc:	4602      	mov	r2, r0
 801c2ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c2d2:	f7ff bb3b 	b.w	801b94c <_dtoa_r+0x34>
 801c2d6:	693a      	ldr	r2, [r7, #16]
 801c2d8:	3202      	adds	r2, #2
 801c2da:	0092      	lsls	r2, r2, #2
 801c2dc:	f107 010c 	add.w	r1, r7, #12
 801c2e0:	300c      	adds	r0, #12
 801c2e2:	f7fe fc93 	bl	801ac0c <memcpy>
 801c2e6:	2201      	movs	r2, #1
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	4620      	mov	r0, r4
 801c2ec:	f000 fd40 	bl	801cd70 <__lshift>
 801c2f0:	9b01      	ldr	r3, [sp, #4]
 801c2f2:	f103 0901 	add.w	r9, r3, #1
 801c2f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	9305      	str	r3, [sp, #20]
 801c2fe:	f00a 0301 	and.w	r3, sl, #1
 801c302:	46b8      	mov	r8, r7
 801c304:	9304      	str	r3, [sp, #16]
 801c306:	4607      	mov	r7, r0
 801c308:	4631      	mov	r1, r6
 801c30a:	ee18 0a10 	vmov	r0, s16
 801c30e:	f7ff fa75 	bl	801b7fc <quorem>
 801c312:	4641      	mov	r1, r8
 801c314:	9002      	str	r0, [sp, #8]
 801c316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c31a:	ee18 0a10 	vmov	r0, s16
 801c31e:	f000 fd97 	bl	801ce50 <__mcmp>
 801c322:	463a      	mov	r2, r7
 801c324:	9003      	str	r0, [sp, #12]
 801c326:	4631      	mov	r1, r6
 801c328:	4620      	mov	r0, r4
 801c32a:	f000 fdad 	bl	801ce88 <__mdiff>
 801c32e:	68c2      	ldr	r2, [r0, #12]
 801c330:	f109 3bff 	add.w	fp, r9, #4294967295
 801c334:	4605      	mov	r5, r0
 801c336:	bb02      	cbnz	r2, 801c37a <_dtoa_r+0xa62>
 801c338:	4601      	mov	r1, r0
 801c33a:	ee18 0a10 	vmov	r0, s16
 801c33e:	f000 fd87 	bl	801ce50 <__mcmp>
 801c342:	4602      	mov	r2, r0
 801c344:	4629      	mov	r1, r5
 801c346:	4620      	mov	r0, r4
 801c348:	9207      	str	r2, [sp, #28]
 801c34a:	f000 fb3f 	bl	801c9cc <_Bfree>
 801c34e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c352:	ea43 0102 	orr.w	r1, r3, r2
 801c356:	9b04      	ldr	r3, [sp, #16]
 801c358:	430b      	orrs	r3, r1
 801c35a:	464d      	mov	r5, r9
 801c35c:	d10f      	bne.n	801c37e <_dtoa_r+0xa66>
 801c35e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c362:	d02a      	beq.n	801c3ba <_dtoa_r+0xaa2>
 801c364:	9b03      	ldr	r3, [sp, #12]
 801c366:	2b00      	cmp	r3, #0
 801c368:	dd02      	ble.n	801c370 <_dtoa_r+0xa58>
 801c36a:	9b02      	ldr	r3, [sp, #8]
 801c36c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c370:	f88b a000 	strb.w	sl, [fp]
 801c374:	e775      	b.n	801c262 <_dtoa_r+0x94a>
 801c376:	4638      	mov	r0, r7
 801c378:	e7ba      	b.n	801c2f0 <_dtoa_r+0x9d8>
 801c37a:	2201      	movs	r2, #1
 801c37c:	e7e2      	b.n	801c344 <_dtoa_r+0xa2c>
 801c37e:	9b03      	ldr	r3, [sp, #12]
 801c380:	2b00      	cmp	r3, #0
 801c382:	db04      	blt.n	801c38e <_dtoa_r+0xa76>
 801c384:	9906      	ldr	r1, [sp, #24]
 801c386:	430b      	orrs	r3, r1
 801c388:	9904      	ldr	r1, [sp, #16]
 801c38a:	430b      	orrs	r3, r1
 801c38c:	d122      	bne.n	801c3d4 <_dtoa_r+0xabc>
 801c38e:	2a00      	cmp	r2, #0
 801c390:	ddee      	ble.n	801c370 <_dtoa_r+0xa58>
 801c392:	ee18 1a10 	vmov	r1, s16
 801c396:	2201      	movs	r2, #1
 801c398:	4620      	mov	r0, r4
 801c39a:	f000 fce9 	bl	801cd70 <__lshift>
 801c39e:	4631      	mov	r1, r6
 801c3a0:	ee08 0a10 	vmov	s16, r0
 801c3a4:	f000 fd54 	bl	801ce50 <__mcmp>
 801c3a8:	2800      	cmp	r0, #0
 801c3aa:	dc03      	bgt.n	801c3b4 <_dtoa_r+0xa9c>
 801c3ac:	d1e0      	bne.n	801c370 <_dtoa_r+0xa58>
 801c3ae:	f01a 0f01 	tst.w	sl, #1
 801c3b2:	d0dd      	beq.n	801c370 <_dtoa_r+0xa58>
 801c3b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c3b8:	d1d7      	bne.n	801c36a <_dtoa_r+0xa52>
 801c3ba:	2339      	movs	r3, #57	; 0x39
 801c3bc:	f88b 3000 	strb.w	r3, [fp]
 801c3c0:	462b      	mov	r3, r5
 801c3c2:	461d      	mov	r5, r3
 801c3c4:	3b01      	subs	r3, #1
 801c3c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c3ca:	2a39      	cmp	r2, #57	; 0x39
 801c3cc:	d071      	beq.n	801c4b2 <_dtoa_r+0xb9a>
 801c3ce:	3201      	adds	r2, #1
 801c3d0:	701a      	strb	r2, [r3, #0]
 801c3d2:	e746      	b.n	801c262 <_dtoa_r+0x94a>
 801c3d4:	2a00      	cmp	r2, #0
 801c3d6:	dd07      	ble.n	801c3e8 <_dtoa_r+0xad0>
 801c3d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c3dc:	d0ed      	beq.n	801c3ba <_dtoa_r+0xaa2>
 801c3de:	f10a 0301 	add.w	r3, sl, #1
 801c3e2:	f88b 3000 	strb.w	r3, [fp]
 801c3e6:	e73c      	b.n	801c262 <_dtoa_r+0x94a>
 801c3e8:	9b05      	ldr	r3, [sp, #20]
 801c3ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c3ee:	4599      	cmp	r9, r3
 801c3f0:	d047      	beq.n	801c482 <_dtoa_r+0xb6a>
 801c3f2:	ee18 1a10 	vmov	r1, s16
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	220a      	movs	r2, #10
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	f000 fb08 	bl	801ca10 <__multadd>
 801c400:	45b8      	cmp	r8, r7
 801c402:	ee08 0a10 	vmov	s16, r0
 801c406:	f04f 0300 	mov.w	r3, #0
 801c40a:	f04f 020a 	mov.w	r2, #10
 801c40e:	4641      	mov	r1, r8
 801c410:	4620      	mov	r0, r4
 801c412:	d106      	bne.n	801c422 <_dtoa_r+0xb0a>
 801c414:	f000 fafc 	bl	801ca10 <__multadd>
 801c418:	4680      	mov	r8, r0
 801c41a:	4607      	mov	r7, r0
 801c41c:	f109 0901 	add.w	r9, r9, #1
 801c420:	e772      	b.n	801c308 <_dtoa_r+0x9f0>
 801c422:	f000 faf5 	bl	801ca10 <__multadd>
 801c426:	4639      	mov	r1, r7
 801c428:	4680      	mov	r8, r0
 801c42a:	2300      	movs	r3, #0
 801c42c:	220a      	movs	r2, #10
 801c42e:	4620      	mov	r0, r4
 801c430:	f000 faee 	bl	801ca10 <__multadd>
 801c434:	4607      	mov	r7, r0
 801c436:	e7f1      	b.n	801c41c <_dtoa_r+0xb04>
 801c438:	9b03      	ldr	r3, [sp, #12]
 801c43a:	9302      	str	r3, [sp, #8]
 801c43c:	9d01      	ldr	r5, [sp, #4]
 801c43e:	ee18 0a10 	vmov	r0, s16
 801c442:	4631      	mov	r1, r6
 801c444:	f7ff f9da 	bl	801b7fc <quorem>
 801c448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c44c:	9b01      	ldr	r3, [sp, #4]
 801c44e:	f805 ab01 	strb.w	sl, [r5], #1
 801c452:	1aea      	subs	r2, r5, r3
 801c454:	9b02      	ldr	r3, [sp, #8]
 801c456:	4293      	cmp	r3, r2
 801c458:	dd09      	ble.n	801c46e <_dtoa_r+0xb56>
 801c45a:	ee18 1a10 	vmov	r1, s16
 801c45e:	2300      	movs	r3, #0
 801c460:	220a      	movs	r2, #10
 801c462:	4620      	mov	r0, r4
 801c464:	f000 fad4 	bl	801ca10 <__multadd>
 801c468:	ee08 0a10 	vmov	s16, r0
 801c46c:	e7e7      	b.n	801c43e <_dtoa_r+0xb26>
 801c46e:	9b02      	ldr	r3, [sp, #8]
 801c470:	2b00      	cmp	r3, #0
 801c472:	bfc8      	it	gt
 801c474:	461d      	movgt	r5, r3
 801c476:	9b01      	ldr	r3, [sp, #4]
 801c478:	bfd8      	it	le
 801c47a:	2501      	movle	r5, #1
 801c47c:	441d      	add	r5, r3
 801c47e:	f04f 0800 	mov.w	r8, #0
 801c482:	ee18 1a10 	vmov	r1, s16
 801c486:	2201      	movs	r2, #1
 801c488:	4620      	mov	r0, r4
 801c48a:	f000 fc71 	bl	801cd70 <__lshift>
 801c48e:	4631      	mov	r1, r6
 801c490:	ee08 0a10 	vmov	s16, r0
 801c494:	f000 fcdc 	bl	801ce50 <__mcmp>
 801c498:	2800      	cmp	r0, #0
 801c49a:	dc91      	bgt.n	801c3c0 <_dtoa_r+0xaa8>
 801c49c:	d102      	bne.n	801c4a4 <_dtoa_r+0xb8c>
 801c49e:	f01a 0f01 	tst.w	sl, #1
 801c4a2:	d18d      	bne.n	801c3c0 <_dtoa_r+0xaa8>
 801c4a4:	462b      	mov	r3, r5
 801c4a6:	461d      	mov	r5, r3
 801c4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c4ac:	2a30      	cmp	r2, #48	; 0x30
 801c4ae:	d0fa      	beq.n	801c4a6 <_dtoa_r+0xb8e>
 801c4b0:	e6d7      	b.n	801c262 <_dtoa_r+0x94a>
 801c4b2:	9a01      	ldr	r2, [sp, #4]
 801c4b4:	429a      	cmp	r2, r3
 801c4b6:	d184      	bne.n	801c3c2 <_dtoa_r+0xaaa>
 801c4b8:	9b00      	ldr	r3, [sp, #0]
 801c4ba:	3301      	adds	r3, #1
 801c4bc:	9300      	str	r3, [sp, #0]
 801c4be:	2331      	movs	r3, #49	; 0x31
 801c4c0:	7013      	strb	r3, [r2, #0]
 801c4c2:	e6ce      	b.n	801c262 <_dtoa_r+0x94a>
 801c4c4:	4b09      	ldr	r3, [pc, #36]	; (801c4ec <_dtoa_r+0xbd4>)
 801c4c6:	f7ff ba95 	b.w	801b9f4 <_dtoa_r+0xdc>
 801c4ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	f47f aa6e 	bne.w	801b9ae <_dtoa_r+0x96>
 801c4d2:	4b07      	ldr	r3, [pc, #28]	; (801c4f0 <_dtoa_r+0xbd8>)
 801c4d4:	f7ff ba8e 	b.w	801b9f4 <_dtoa_r+0xdc>
 801c4d8:	9b02      	ldr	r3, [sp, #8]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	dcae      	bgt.n	801c43c <_dtoa_r+0xb24>
 801c4de:	9b06      	ldr	r3, [sp, #24]
 801c4e0:	2b02      	cmp	r3, #2
 801c4e2:	f73f aea8 	bgt.w	801c236 <_dtoa_r+0x91e>
 801c4e6:	e7a9      	b.n	801c43c <_dtoa_r+0xb24>
 801c4e8:	0801ddff 	.word	0x0801ddff
 801c4ec:	0801dd5c 	.word	0x0801dd5c
 801c4f0:	0801dd80 	.word	0x0801dd80

0801c4f4 <__sflush_r>:
 801c4f4:	898a      	ldrh	r2, [r1, #12]
 801c4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4fa:	4605      	mov	r5, r0
 801c4fc:	0710      	lsls	r0, r2, #28
 801c4fe:	460c      	mov	r4, r1
 801c500:	d458      	bmi.n	801c5b4 <__sflush_r+0xc0>
 801c502:	684b      	ldr	r3, [r1, #4]
 801c504:	2b00      	cmp	r3, #0
 801c506:	dc05      	bgt.n	801c514 <__sflush_r+0x20>
 801c508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	dc02      	bgt.n	801c514 <__sflush_r+0x20>
 801c50e:	2000      	movs	r0, #0
 801c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c516:	2e00      	cmp	r6, #0
 801c518:	d0f9      	beq.n	801c50e <__sflush_r+0x1a>
 801c51a:	2300      	movs	r3, #0
 801c51c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c520:	682f      	ldr	r7, [r5, #0]
 801c522:	602b      	str	r3, [r5, #0]
 801c524:	d032      	beq.n	801c58c <__sflush_r+0x98>
 801c526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c528:	89a3      	ldrh	r3, [r4, #12]
 801c52a:	075a      	lsls	r2, r3, #29
 801c52c:	d505      	bpl.n	801c53a <__sflush_r+0x46>
 801c52e:	6863      	ldr	r3, [r4, #4]
 801c530:	1ac0      	subs	r0, r0, r3
 801c532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c534:	b10b      	cbz	r3, 801c53a <__sflush_r+0x46>
 801c536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c538:	1ac0      	subs	r0, r0, r3
 801c53a:	2300      	movs	r3, #0
 801c53c:	4602      	mov	r2, r0
 801c53e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c540:	6a21      	ldr	r1, [r4, #32]
 801c542:	4628      	mov	r0, r5
 801c544:	47b0      	blx	r6
 801c546:	1c43      	adds	r3, r0, #1
 801c548:	89a3      	ldrh	r3, [r4, #12]
 801c54a:	d106      	bne.n	801c55a <__sflush_r+0x66>
 801c54c:	6829      	ldr	r1, [r5, #0]
 801c54e:	291d      	cmp	r1, #29
 801c550:	d82c      	bhi.n	801c5ac <__sflush_r+0xb8>
 801c552:	4a2a      	ldr	r2, [pc, #168]	; (801c5fc <__sflush_r+0x108>)
 801c554:	40ca      	lsrs	r2, r1
 801c556:	07d6      	lsls	r6, r2, #31
 801c558:	d528      	bpl.n	801c5ac <__sflush_r+0xb8>
 801c55a:	2200      	movs	r2, #0
 801c55c:	6062      	str	r2, [r4, #4]
 801c55e:	04d9      	lsls	r1, r3, #19
 801c560:	6922      	ldr	r2, [r4, #16]
 801c562:	6022      	str	r2, [r4, #0]
 801c564:	d504      	bpl.n	801c570 <__sflush_r+0x7c>
 801c566:	1c42      	adds	r2, r0, #1
 801c568:	d101      	bne.n	801c56e <__sflush_r+0x7a>
 801c56a:	682b      	ldr	r3, [r5, #0]
 801c56c:	b903      	cbnz	r3, 801c570 <__sflush_r+0x7c>
 801c56e:	6560      	str	r0, [r4, #84]	; 0x54
 801c570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c572:	602f      	str	r7, [r5, #0]
 801c574:	2900      	cmp	r1, #0
 801c576:	d0ca      	beq.n	801c50e <__sflush_r+0x1a>
 801c578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c57c:	4299      	cmp	r1, r3
 801c57e:	d002      	beq.n	801c586 <__sflush_r+0x92>
 801c580:	4628      	mov	r0, r5
 801c582:	f000 fd7d 	bl	801d080 <_free_r>
 801c586:	2000      	movs	r0, #0
 801c588:	6360      	str	r0, [r4, #52]	; 0x34
 801c58a:	e7c1      	b.n	801c510 <__sflush_r+0x1c>
 801c58c:	6a21      	ldr	r1, [r4, #32]
 801c58e:	2301      	movs	r3, #1
 801c590:	4628      	mov	r0, r5
 801c592:	47b0      	blx	r6
 801c594:	1c41      	adds	r1, r0, #1
 801c596:	d1c7      	bne.n	801c528 <__sflush_r+0x34>
 801c598:	682b      	ldr	r3, [r5, #0]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d0c4      	beq.n	801c528 <__sflush_r+0x34>
 801c59e:	2b1d      	cmp	r3, #29
 801c5a0:	d001      	beq.n	801c5a6 <__sflush_r+0xb2>
 801c5a2:	2b16      	cmp	r3, #22
 801c5a4:	d101      	bne.n	801c5aa <__sflush_r+0xb6>
 801c5a6:	602f      	str	r7, [r5, #0]
 801c5a8:	e7b1      	b.n	801c50e <__sflush_r+0x1a>
 801c5aa:	89a3      	ldrh	r3, [r4, #12]
 801c5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5b0:	81a3      	strh	r3, [r4, #12]
 801c5b2:	e7ad      	b.n	801c510 <__sflush_r+0x1c>
 801c5b4:	690f      	ldr	r7, [r1, #16]
 801c5b6:	2f00      	cmp	r7, #0
 801c5b8:	d0a9      	beq.n	801c50e <__sflush_r+0x1a>
 801c5ba:	0793      	lsls	r3, r2, #30
 801c5bc:	680e      	ldr	r6, [r1, #0]
 801c5be:	bf08      	it	eq
 801c5c0:	694b      	ldreq	r3, [r1, #20]
 801c5c2:	600f      	str	r7, [r1, #0]
 801c5c4:	bf18      	it	ne
 801c5c6:	2300      	movne	r3, #0
 801c5c8:	eba6 0807 	sub.w	r8, r6, r7
 801c5cc:	608b      	str	r3, [r1, #8]
 801c5ce:	f1b8 0f00 	cmp.w	r8, #0
 801c5d2:	dd9c      	ble.n	801c50e <__sflush_r+0x1a>
 801c5d4:	6a21      	ldr	r1, [r4, #32]
 801c5d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5d8:	4643      	mov	r3, r8
 801c5da:	463a      	mov	r2, r7
 801c5dc:	4628      	mov	r0, r5
 801c5de:	47b0      	blx	r6
 801c5e0:	2800      	cmp	r0, #0
 801c5e2:	dc06      	bgt.n	801c5f2 <__sflush_r+0xfe>
 801c5e4:	89a3      	ldrh	r3, [r4, #12]
 801c5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5ea:	81a3      	strh	r3, [r4, #12]
 801c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801c5f0:	e78e      	b.n	801c510 <__sflush_r+0x1c>
 801c5f2:	4407      	add	r7, r0
 801c5f4:	eba8 0800 	sub.w	r8, r8, r0
 801c5f8:	e7e9      	b.n	801c5ce <__sflush_r+0xda>
 801c5fa:	bf00      	nop
 801c5fc:	20400001 	.word	0x20400001

0801c600 <_fflush_r>:
 801c600:	b538      	push	{r3, r4, r5, lr}
 801c602:	690b      	ldr	r3, [r1, #16]
 801c604:	4605      	mov	r5, r0
 801c606:	460c      	mov	r4, r1
 801c608:	b913      	cbnz	r3, 801c610 <_fflush_r+0x10>
 801c60a:	2500      	movs	r5, #0
 801c60c:	4628      	mov	r0, r5
 801c60e:	bd38      	pop	{r3, r4, r5, pc}
 801c610:	b118      	cbz	r0, 801c61a <_fflush_r+0x1a>
 801c612:	6983      	ldr	r3, [r0, #24]
 801c614:	b90b      	cbnz	r3, 801c61a <_fflush_r+0x1a>
 801c616:	f000 f887 	bl	801c728 <__sinit>
 801c61a:	4b14      	ldr	r3, [pc, #80]	; (801c66c <_fflush_r+0x6c>)
 801c61c:	429c      	cmp	r4, r3
 801c61e:	d11b      	bne.n	801c658 <_fflush_r+0x58>
 801c620:	686c      	ldr	r4, [r5, #4]
 801c622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d0ef      	beq.n	801c60a <_fflush_r+0xa>
 801c62a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c62c:	07d0      	lsls	r0, r2, #31
 801c62e:	d404      	bmi.n	801c63a <_fflush_r+0x3a>
 801c630:	0599      	lsls	r1, r3, #22
 801c632:	d402      	bmi.n	801c63a <_fflush_r+0x3a>
 801c634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c636:	f000 f91a 	bl	801c86e <__retarget_lock_acquire_recursive>
 801c63a:	4628      	mov	r0, r5
 801c63c:	4621      	mov	r1, r4
 801c63e:	f7ff ff59 	bl	801c4f4 <__sflush_r>
 801c642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c644:	07da      	lsls	r2, r3, #31
 801c646:	4605      	mov	r5, r0
 801c648:	d4e0      	bmi.n	801c60c <_fflush_r+0xc>
 801c64a:	89a3      	ldrh	r3, [r4, #12]
 801c64c:	059b      	lsls	r3, r3, #22
 801c64e:	d4dd      	bmi.n	801c60c <_fflush_r+0xc>
 801c650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c652:	f000 f90d 	bl	801c870 <__retarget_lock_release_recursive>
 801c656:	e7d9      	b.n	801c60c <_fflush_r+0xc>
 801c658:	4b05      	ldr	r3, [pc, #20]	; (801c670 <_fflush_r+0x70>)
 801c65a:	429c      	cmp	r4, r3
 801c65c:	d101      	bne.n	801c662 <_fflush_r+0x62>
 801c65e:	68ac      	ldr	r4, [r5, #8]
 801c660:	e7df      	b.n	801c622 <_fflush_r+0x22>
 801c662:	4b04      	ldr	r3, [pc, #16]	; (801c674 <_fflush_r+0x74>)
 801c664:	429c      	cmp	r4, r3
 801c666:	bf08      	it	eq
 801c668:	68ec      	ldreq	r4, [r5, #12]
 801c66a:	e7da      	b.n	801c622 <_fflush_r+0x22>
 801c66c:	0801de30 	.word	0x0801de30
 801c670:	0801de50 	.word	0x0801de50
 801c674:	0801de10 	.word	0x0801de10

0801c678 <std>:
 801c678:	2300      	movs	r3, #0
 801c67a:	b510      	push	{r4, lr}
 801c67c:	4604      	mov	r4, r0
 801c67e:	e9c0 3300 	strd	r3, r3, [r0]
 801c682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c686:	6083      	str	r3, [r0, #8]
 801c688:	8181      	strh	r1, [r0, #12]
 801c68a:	6643      	str	r3, [r0, #100]	; 0x64
 801c68c:	81c2      	strh	r2, [r0, #14]
 801c68e:	6183      	str	r3, [r0, #24]
 801c690:	4619      	mov	r1, r3
 801c692:	2208      	movs	r2, #8
 801c694:	305c      	adds	r0, #92	; 0x5c
 801c696:	f7fe fac7 	bl	801ac28 <memset>
 801c69a:	4b05      	ldr	r3, [pc, #20]	; (801c6b0 <std+0x38>)
 801c69c:	6263      	str	r3, [r4, #36]	; 0x24
 801c69e:	4b05      	ldr	r3, [pc, #20]	; (801c6b4 <std+0x3c>)
 801c6a0:	62a3      	str	r3, [r4, #40]	; 0x28
 801c6a2:	4b05      	ldr	r3, [pc, #20]	; (801c6b8 <std+0x40>)
 801c6a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6a6:	4b05      	ldr	r3, [pc, #20]	; (801c6bc <std+0x44>)
 801c6a8:	6224      	str	r4, [r4, #32]
 801c6aa:	6323      	str	r3, [r4, #48]	; 0x30
 801c6ac:	bd10      	pop	{r4, pc}
 801c6ae:	bf00      	nop
 801c6b0:	0801d5a5 	.word	0x0801d5a5
 801c6b4:	0801d5c7 	.word	0x0801d5c7
 801c6b8:	0801d5ff 	.word	0x0801d5ff
 801c6bc:	0801d623 	.word	0x0801d623

0801c6c0 <_cleanup_r>:
 801c6c0:	4901      	ldr	r1, [pc, #4]	; (801c6c8 <_cleanup_r+0x8>)
 801c6c2:	f000 b8af 	b.w	801c824 <_fwalk_reent>
 801c6c6:	bf00      	nop
 801c6c8:	0801c601 	.word	0x0801c601

0801c6cc <__sfmoreglue>:
 801c6cc:	b570      	push	{r4, r5, r6, lr}
 801c6ce:	2268      	movs	r2, #104	; 0x68
 801c6d0:	1e4d      	subs	r5, r1, #1
 801c6d2:	4355      	muls	r5, r2
 801c6d4:	460e      	mov	r6, r1
 801c6d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c6da:	f000 fd3d 	bl	801d158 <_malloc_r>
 801c6de:	4604      	mov	r4, r0
 801c6e0:	b140      	cbz	r0, 801c6f4 <__sfmoreglue+0x28>
 801c6e2:	2100      	movs	r1, #0
 801c6e4:	e9c0 1600 	strd	r1, r6, [r0]
 801c6e8:	300c      	adds	r0, #12
 801c6ea:	60a0      	str	r0, [r4, #8]
 801c6ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c6f0:	f7fe fa9a 	bl	801ac28 <memset>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	bd70      	pop	{r4, r5, r6, pc}

0801c6f8 <__sfp_lock_acquire>:
 801c6f8:	4801      	ldr	r0, [pc, #4]	; (801c700 <__sfp_lock_acquire+0x8>)
 801c6fa:	f000 b8b8 	b.w	801c86e <__retarget_lock_acquire_recursive>
 801c6fe:	bf00      	nop
 801c700:	20008845 	.word	0x20008845

0801c704 <__sfp_lock_release>:
 801c704:	4801      	ldr	r0, [pc, #4]	; (801c70c <__sfp_lock_release+0x8>)
 801c706:	f000 b8b3 	b.w	801c870 <__retarget_lock_release_recursive>
 801c70a:	bf00      	nop
 801c70c:	20008845 	.word	0x20008845

0801c710 <__sinit_lock_acquire>:
 801c710:	4801      	ldr	r0, [pc, #4]	; (801c718 <__sinit_lock_acquire+0x8>)
 801c712:	f000 b8ac 	b.w	801c86e <__retarget_lock_acquire_recursive>
 801c716:	bf00      	nop
 801c718:	20008846 	.word	0x20008846

0801c71c <__sinit_lock_release>:
 801c71c:	4801      	ldr	r0, [pc, #4]	; (801c724 <__sinit_lock_release+0x8>)
 801c71e:	f000 b8a7 	b.w	801c870 <__retarget_lock_release_recursive>
 801c722:	bf00      	nop
 801c724:	20008846 	.word	0x20008846

0801c728 <__sinit>:
 801c728:	b510      	push	{r4, lr}
 801c72a:	4604      	mov	r4, r0
 801c72c:	f7ff fff0 	bl	801c710 <__sinit_lock_acquire>
 801c730:	69a3      	ldr	r3, [r4, #24]
 801c732:	b11b      	cbz	r3, 801c73c <__sinit+0x14>
 801c734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c738:	f7ff bff0 	b.w	801c71c <__sinit_lock_release>
 801c73c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c740:	6523      	str	r3, [r4, #80]	; 0x50
 801c742:	4b13      	ldr	r3, [pc, #76]	; (801c790 <__sinit+0x68>)
 801c744:	4a13      	ldr	r2, [pc, #76]	; (801c794 <__sinit+0x6c>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	62a2      	str	r2, [r4, #40]	; 0x28
 801c74a:	42a3      	cmp	r3, r4
 801c74c:	bf04      	itt	eq
 801c74e:	2301      	moveq	r3, #1
 801c750:	61a3      	streq	r3, [r4, #24]
 801c752:	4620      	mov	r0, r4
 801c754:	f000 f820 	bl	801c798 <__sfp>
 801c758:	6060      	str	r0, [r4, #4]
 801c75a:	4620      	mov	r0, r4
 801c75c:	f000 f81c 	bl	801c798 <__sfp>
 801c760:	60a0      	str	r0, [r4, #8]
 801c762:	4620      	mov	r0, r4
 801c764:	f000 f818 	bl	801c798 <__sfp>
 801c768:	2200      	movs	r2, #0
 801c76a:	60e0      	str	r0, [r4, #12]
 801c76c:	2104      	movs	r1, #4
 801c76e:	6860      	ldr	r0, [r4, #4]
 801c770:	f7ff ff82 	bl	801c678 <std>
 801c774:	68a0      	ldr	r0, [r4, #8]
 801c776:	2201      	movs	r2, #1
 801c778:	2109      	movs	r1, #9
 801c77a:	f7ff ff7d 	bl	801c678 <std>
 801c77e:	68e0      	ldr	r0, [r4, #12]
 801c780:	2202      	movs	r2, #2
 801c782:	2112      	movs	r1, #18
 801c784:	f7ff ff78 	bl	801c678 <std>
 801c788:	2301      	movs	r3, #1
 801c78a:	61a3      	str	r3, [r4, #24]
 801c78c:	e7d2      	b.n	801c734 <__sinit+0xc>
 801c78e:	bf00      	nop
 801c790:	0801dd48 	.word	0x0801dd48
 801c794:	0801c6c1 	.word	0x0801c6c1

0801c798 <__sfp>:
 801c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c79a:	4607      	mov	r7, r0
 801c79c:	f7ff ffac 	bl	801c6f8 <__sfp_lock_acquire>
 801c7a0:	4b1e      	ldr	r3, [pc, #120]	; (801c81c <__sfp+0x84>)
 801c7a2:	681e      	ldr	r6, [r3, #0]
 801c7a4:	69b3      	ldr	r3, [r6, #24]
 801c7a6:	b913      	cbnz	r3, 801c7ae <__sfp+0x16>
 801c7a8:	4630      	mov	r0, r6
 801c7aa:	f7ff ffbd 	bl	801c728 <__sinit>
 801c7ae:	3648      	adds	r6, #72	; 0x48
 801c7b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7b4:	3b01      	subs	r3, #1
 801c7b6:	d503      	bpl.n	801c7c0 <__sfp+0x28>
 801c7b8:	6833      	ldr	r3, [r6, #0]
 801c7ba:	b30b      	cbz	r3, 801c800 <__sfp+0x68>
 801c7bc:	6836      	ldr	r6, [r6, #0]
 801c7be:	e7f7      	b.n	801c7b0 <__sfp+0x18>
 801c7c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7c4:	b9d5      	cbnz	r5, 801c7fc <__sfp+0x64>
 801c7c6:	4b16      	ldr	r3, [pc, #88]	; (801c820 <__sfp+0x88>)
 801c7c8:	60e3      	str	r3, [r4, #12]
 801c7ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7ce:	6665      	str	r5, [r4, #100]	; 0x64
 801c7d0:	f000 f84c 	bl	801c86c <__retarget_lock_init_recursive>
 801c7d4:	f7ff ff96 	bl	801c704 <__sfp_lock_release>
 801c7d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c7dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c7e0:	6025      	str	r5, [r4, #0]
 801c7e2:	61a5      	str	r5, [r4, #24]
 801c7e4:	2208      	movs	r2, #8
 801c7e6:	4629      	mov	r1, r5
 801c7e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c7ec:	f7fe fa1c 	bl	801ac28 <memset>
 801c7f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c7f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7fc:	3468      	adds	r4, #104	; 0x68
 801c7fe:	e7d9      	b.n	801c7b4 <__sfp+0x1c>
 801c800:	2104      	movs	r1, #4
 801c802:	4638      	mov	r0, r7
 801c804:	f7ff ff62 	bl	801c6cc <__sfmoreglue>
 801c808:	4604      	mov	r4, r0
 801c80a:	6030      	str	r0, [r6, #0]
 801c80c:	2800      	cmp	r0, #0
 801c80e:	d1d5      	bne.n	801c7bc <__sfp+0x24>
 801c810:	f7ff ff78 	bl	801c704 <__sfp_lock_release>
 801c814:	230c      	movs	r3, #12
 801c816:	603b      	str	r3, [r7, #0]
 801c818:	e7ee      	b.n	801c7f8 <__sfp+0x60>
 801c81a:	bf00      	nop
 801c81c:	0801dd48 	.word	0x0801dd48
 801c820:	ffff0001 	.word	0xffff0001

0801c824 <_fwalk_reent>:
 801c824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c828:	4606      	mov	r6, r0
 801c82a:	4688      	mov	r8, r1
 801c82c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c830:	2700      	movs	r7, #0
 801c832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c836:	f1b9 0901 	subs.w	r9, r9, #1
 801c83a:	d505      	bpl.n	801c848 <_fwalk_reent+0x24>
 801c83c:	6824      	ldr	r4, [r4, #0]
 801c83e:	2c00      	cmp	r4, #0
 801c840:	d1f7      	bne.n	801c832 <_fwalk_reent+0xe>
 801c842:	4638      	mov	r0, r7
 801c844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c848:	89ab      	ldrh	r3, [r5, #12]
 801c84a:	2b01      	cmp	r3, #1
 801c84c:	d907      	bls.n	801c85e <_fwalk_reent+0x3a>
 801c84e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c852:	3301      	adds	r3, #1
 801c854:	d003      	beq.n	801c85e <_fwalk_reent+0x3a>
 801c856:	4629      	mov	r1, r5
 801c858:	4630      	mov	r0, r6
 801c85a:	47c0      	blx	r8
 801c85c:	4307      	orrs	r7, r0
 801c85e:	3568      	adds	r5, #104	; 0x68
 801c860:	e7e9      	b.n	801c836 <_fwalk_reent+0x12>
	...

0801c864 <_localeconv_r>:
 801c864:	4800      	ldr	r0, [pc, #0]	; (801c868 <_localeconv_r+0x4>)
 801c866:	4770      	bx	lr
 801c868:	200001cc 	.word	0x200001cc

0801c86c <__retarget_lock_init_recursive>:
 801c86c:	4770      	bx	lr

0801c86e <__retarget_lock_acquire_recursive>:
 801c86e:	4770      	bx	lr

0801c870 <__retarget_lock_release_recursive>:
 801c870:	4770      	bx	lr

0801c872 <__swhatbuf_r>:
 801c872:	b570      	push	{r4, r5, r6, lr}
 801c874:	460e      	mov	r6, r1
 801c876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c87a:	2900      	cmp	r1, #0
 801c87c:	b096      	sub	sp, #88	; 0x58
 801c87e:	4614      	mov	r4, r2
 801c880:	461d      	mov	r5, r3
 801c882:	da08      	bge.n	801c896 <__swhatbuf_r+0x24>
 801c884:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c888:	2200      	movs	r2, #0
 801c88a:	602a      	str	r2, [r5, #0]
 801c88c:	061a      	lsls	r2, r3, #24
 801c88e:	d410      	bmi.n	801c8b2 <__swhatbuf_r+0x40>
 801c890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c894:	e00e      	b.n	801c8b4 <__swhatbuf_r+0x42>
 801c896:	466a      	mov	r2, sp
 801c898:	f000 ff1a 	bl	801d6d0 <_fstat_r>
 801c89c:	2800      	cmp	r0, #0
 801c89e:	dbf1      	blt.n	801c884 <__swhatbuf_r+0x12>
 801c8a0:	9a01      	ldr	r2, [sp, #4]
 801c8a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c8a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c8aa:	425a      	negs	r2, r3
 801c8ac:	415a      	adcs	r2, r3
 801c8ae:	602a      	str	r2, [r5, #0]
 801c8b0:	e7ee      	b.n	801c890 <__swhatbuf_r+0x1e>
 801c8b2:	2340      	movs	r3, #64	; 0x40
 801c8b4:	2000      	movs	r0, #0
 801c8b6:	6023      	str	r3, [r4, #0]
 801c8b8:	b016      	add	sp, #88	; 0x58
 801c8ba:	bd70      	pop	{r4, r5, r6, pc}

0801c8bc <__smakebuf_r>:
 801c8bc:	898b      	ldrh	r3, [r1, #12]
 801c8be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8c0:	079d      	lsls	r5, r3, #30
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	460c      	mov	r4, r1
 801c8c6:	d507      	bpl.n	801c8d8 <__smakebuf_r+0x1c>
 801c8c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c8cc:	6023      	str	r3, [r4, #0]
 801c8ce:	6123      	str	r3, [r4, #16]
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	6163      	str	r3, [r4, #20]
 801c8d4:	b002      	add	sp, #8
 801c8d6:	bd70      	pop	{r4, r5, r6, pc}
 801c8d8:	ab01      	add	r3, sp, #4
 801c8da:	466a      	mov	r2, sp
 801c8dc:	f7ff ffc9 	bl	801c872 <__swhatbuf_r>
 801c8e0:	9900      	ldr	r1, [sp, #0]
 801c8e2:	4605      	mov	r5, r0
 801c8e4:	4630      	mov	r0, r6
 801c8e6:	f000 fc37 	bl	801d158 <_malloc_r>
 801c8ea:	b948      	cbnz	r0, 801c900 <__smakebuf_r+0x44>
 801c8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8f0:	059a      	lsls	r2, r3, #22
 801c8f2:	d4ef      	bmi.n	801c8d4 <__smakebuf_r+0x18>
 801c8f4:	f023 0303 	bic.w	r3, r3, #3
 801c8f8:	f043 0302 	orr.w	r3, r3, #2
 801c8fc:	81a3      	strh	r3, [r4, #12]
 801c8fe:	e7e3      	b.n	801c8c8 <__smakebuf_r+0xc>
 801c900:	4b0d      	ldr	r3, [pc, #52]	; (801c938 <__smakebuf_r+0x7c>)
 801c902:	62b3      	str	r3, [r6, #40]	; 0x28
 801c904:	89a3      	ldrh	r3, [r4, #12]
 801c906:	6020      	str	r0, [r4, #0]
 801c908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c90c:	81a3      	strh	r3, [r4, #12]
 801c90e:	9b00      	ldr	r3, [sp, #0]
 801c910:	6163      	str	r3, [r4, #20]
 801c912:	9b01      	ldr	r3, [sp, #4]
 801c914:	6120      	str	r0, [r4, #16]
 801c916:	b15b      	cbz	r3, 801c930 <__smakebuf_r+0x74>
 801c918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c91c:	4630      	mov	r0, r6
 801c91e:	f000 fee9 	bl	801d6f4 <_isatty_r>
 801c922:	b128      	cbz	r0, 801c930 <__smakebuf_r+0x74>
 801c924:	89a3      	ldrh	r3, [r4, #12]
 801c926:	f023 0303 	bic.w	r3, r3, #3
 801c92a:	f043 0301 	orr.w	r3, r3, #1
 801c92e:	81a3      	strh	r3, [r4, #12]
 801c930:	89a0      	ldrh	r0, [r4, #12]
 801c932:	4305      	orrs	r5, r0
 801c934:	81a5      	strh	r5, [r4, #12]
 801c936:	e7cd      	b.n	801c8d4 <__smakebuf_r+0x18>
 801c938:	0801c6c1 	.word	0x0801c6c1

0801c93c <malloc>:
 801c93c:	4b02      	ldr	r3, [pc, #8]	; (801c948 <malloc+0xc>)
 801c93e:	4601      	mov	r1, r0
 801c940:	6818      	ldr	r0, [r3, #0]
 801c942:	f000 bc09 	b.w	801d158 <_malloc_r>
 801c946:	bf00      	nop
 801c948:	20000078 	.word	0x20000078

0801c94c <_Balloc>:
 801c94c:	b570      	push	{r4, r5, r6, lr}
 801c94e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c950:	4604      	mov	r4, r0
 801c952:	460d      	mov	r5, r1
 801c954:	b976      	cbnz	r6, 801c974 <_Balloc+0x28>
 801c956:	2010      	movs	r0, #16
 801c958:	f7ff fff0 	bl	801c93c <malloc>
 801c95c:	4602      	mov	r2, r0
 801c95e:	6260      	str	r0, [r4, #36]	; 0x24
 801c960:	b920      	cbnz	r0, 801c96c <_Balloc+0x20>
 801c962:	4b18      	ldr	r3, [pc, #96]	; (801c9c4 <_Balloc+0x78>)
 801c964:	4818      	ldr	r0, [pc, #96]	; (801c9c8 <_Balloc+0x7c>)
 801c966:	2166      	movs	r1, #102	; 0x66
 801c968:	f000 fe72 	bl	801d650 <__assert_func>
 801c96c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c970:	6006      	str	r6, [r0, #0]
 801c972:	60c6      	str	r6, [r0, #12]
 801c974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c976:	68f3      	ldr	r3, [r6, #12]
 801c978:	b183      	cbz	r3, 801c99c <_Balloc+0x50>
 801c97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c97c:	68db      	ldr	r3, [r3, #12]
 801c97e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c982:	b9b8      	cbnz	r0, 801c9b4 <_Balloc+0x68>
 801c984:	2101      	movs	r1, #1
 801c986:	fa01 f605 	lsl.w	r6, r1, r5
 801c98a:	1d72      	adds	r2, r6, #5
 801c98c:	0092      	lsls	r2, r2, #2
 801c98e:	4620      	mov	r0, r4
 801c990:	f000 fb60 	bl	801d054 <_calloc_r>
 801c994:	b160      	cbz	r0, 801c9b0 <_Balloc+0x64>
 801c996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c99a:	e00e      	b.n	801c9ba <_Balloc+0x6e>
 801c99c:	2221      	movs	r2, #33	; 0x21
 801c99e:	2104      	movs	r1, #4
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f000 fb57 	bl	801d054 <_calloc_r>
 801c9a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9a8:	60f0      	str	r0, [r6, #12]
 801c9aa:	68db      	ldr	r3, [r3, #12]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d1e4      	bne.n	801c97a <_Balloc+0x2e>
 801c9b0:	2000      	movs	r0, #0
 801c9b2:	bd70      	pop	{r4, r5, r6, pc}
 801c9b4:	6802      	ldr	r2, [r0, #0]
 801c9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c9c0:	e7f7      	b.n	801c9b2 <_Balloc+0x66>
 801c9c2:	bf00      	nop
 801c9c4:	0801dd8d 	.word	0x0801dd8d
 801c9c8:	0801de70 	.word	0x0801de70

0801c9cc <_Bfree>:
 801c9cc:	b570      	push	{r4, r5, r6, lr}
 801c9ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c9d0:	4605      	mov	r5, r0
 801c9d2:	460c      	mov	r4, r1
 801c9d4:	b976      	cbnz	r6, 801c9f4 <_Bfree+0x28>
 801c9d6:	2010      	movs	r0, #16
 801c9d8:	f7ff ffb0 	bl	801c93c <malloc>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	6268      	str	r0, [r5, #36]	; 0x24
 801c9e0:	b920      	cbnz	r0, 801c9ec <_Bfree+0x20>
 801c9e2:	4b09      	ldr	r3, [pc, #36]	; (801ca08 <_Bfree+0x3c>)
 801c9e4:	4809      	ldr	r0, [pc, #36]	; (801ca0c <_Bfree+0x40>)
 801c9e6:	218a      	movs	r1, #138	; 0x8a
 801c9e8:	f000 fe32 	bl	801d650 <__assert_func>
 801c9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9f0:	6006      	str	r6, [r0, #0]
 801c9f2:	60c6      	str	r6, [r0, #12]
 801c9f4:	b13c      	cbz	r4, 801ca06 <_Bfree+0x3a>
 801c9f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c9f8:	6862      	ldr	r2, [r4, #4]
 801c9fa:	68db      	ldr	r3, [r3, #12]
 801c9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ca00:	6021      	str	r1, [r4, #0]
 801ca02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ca06:	bd70      	pop	{r4, r5, r6, pc}
 801ca08:	0801dd8d 	.word	0x0801dd8d
 801ca0c:	0801de70 	.word	0x0801de70

0801ca10 <__multadd>:
 801ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca14:	690d      	ldr	r5, [r1, #16]
 801ca16:	4607      	mov	r7, r0
 801ca18:	460c      	mov	r4, r1
 801ca1a:	461e      	mov	r6, r3
 801ca1c:	f101 0c14 	add.w	ip, r1, #20
 801ca20:	2000      	movs	r0, #0
 801ca22:	f8dc 3000 	ldr.w	r3, [ip]
 801ca26:	b299      	uxth	r1, r3
 801ca28:	fb02 6101 	mla	r1, r2, r1, r6
 801ca2c:	0c1e      	lsrs	r6, r3, #16
 801ca2e:	0c0b      	lsrs	r3, r1, #16
 801ca30:	fb02 3306 	mla	r3, r2, r6, r3
 801ca34:	b289      	uxth	r1, r1
 801ca36:	3001      	adds	r0, #1
 801ca38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca3c:	4285      	cmp	r5, r0
 801ca3e:	f84c 1b04 	str.w	r1, [ip], #4
 801ca42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ca46:	dcec      	bgt.n	801ca22 <__multadd+0x12>
 801ca48:	b30e      	cbz	r6, 801ca8e <__multadd+0x7e>
 801ca4a:	68a3      	ldr	r3, [r4, #8]
 801ca4c:	42ab      	cmp	r3, r5
 801ca4e:	dc19      	bgt.n	801ca84 <__multadd+0x74>
 801ca50:	6861      	ldr	r1, [r4, #4]
 801ca52:	4638      	mov	r0, r7
 801ca54:	3101      	adds	r1, #1
 801ca56:	f7ff ff79 	bl	801c94c <_Balloc>
 801ca5a:	4680      	mov	r8, r0
 801ca5c:	b928      	cbnz	r0, 801ca6a <__multadd+0x5a>
 801ca5e:	4602      	mov	r2, r0
 801ca60:	4b0c      	ldr	r3, [pc, #48]	; (801ca94 <__multadd+0x84>)
 801ca62:	480d      	ldr	r0, [pc, #52]	; (801ca98 <__multadd+0x88>)
 801ca64:	21b5      	movs	r1, #181	; 0xb5
 801ca66:	f000 fdf3 	bl	801d650 <__assert_func>
 801ca6a:	6922      	ldr	r2, [r4, #16]
 801ca6c:	3202      	adds	r2, #2
 801ca6e:	f104 010c 	add.w	r1, r4, #12
 801ca72:	0092      	lsls	r2, r2, #2
 801ca74:	300c      	adds	r0, #12
 801ca76:	f7fe f8c9 	bl	801ac0c <memcpy>
 801ca7a:	4621      	mov	r1, r4
 801ca7c:	4638      	mov	r0, r7
 801ca7e:	f7ff ffa5 	bl	801c9cc <_Bfree>
 801ca82:	4644      	mov	r4, r8
 801ca84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ca88:	3501      	adds	r5, #1
 801ca8a:	615e      	str	r6, [r3, #20]
 801ca8c:	6125      	str	r5, [r4, #16]
 801ca8e:	4620      	mov	r0, r4
 801ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca94:	0801ddff 	.word	0x0801ddff
 801ca98:	0801de70 	.word	0x0801de70

0801ca9c <__hi0bits>:
 801ca9c:	0c03      	lsrs	r3, r0, #16
 801ca9e:	041b      	lsls	r3, r3, #16
 801caa0:	b9d3      	cbnz	r3, 801cad8 <__hi0bits+0x3c>
 801caa2:	0400      	lsls	r0, r0, #16
 801caa4:	2310      	movs	r3, #16
 801caa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801caaa:	bf04      	itt	eq
 801caac:	0200      	lsleq	r0, r0, #8
 801caae:	3308      	addeq	r3, #8
 801cab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cab4:	bf04      	itt	eq
 801cab6:	0100      	lsleq	r0, r0, #4
 801cab8:	3304      	addeq	r3, #4
 801caba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cabe:	bf04      	itt	eq
 801cac0:	0080      	lsleq	r0, r0, #2
 801cac2:	3302      	addeq	r3, #2
 801cac4:	2800      	cmp	r0, #0
 801cac6:	db05      	blt.n	801cad4 <__hi0bits+0x38>
 801cac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cacc:	f103 0301 	add.w	r3, r3, #1
 801cad0:	bf08      	it	eq
 801cad2:	2320      	moveq	r3, #32
 801cad4:	4618      	mov	r0, r3
 801cad6:	4770      	bx	lr
 801cad8:	2300      	movs	r3, #0
 801cada:	e7e4      	b.n	801caa6 <__hi0bits+0xa>

0801cadc <__lo0bits>:
 801cadc:	6803      	ldr	r3, [r0, #0]
 801cade:	f013 0207 	ands.w	r2, r3, #7
 801cae2:	4601      	mov	r1, r0
 801cae4:	d00b      	beq.n	801cafe <__lo0bits+0x22>
 801cae6:	07da      	lsls	r2, r3, #31
 801cae8:	d423      	bmi.n	801cb32 <__lo0bits+0x56>
 801caea:	0798      	lsls	r0, r3, #30
 801caec:	bf49      	itett	mi
 801caee:	085b      	lsrmi	r3, r3, #1
 801caf0:	089b      	lsrpl	r3, r3, #2
 801caf2:	2001      	movmi	r0, #1
 801caf4:	600b      	strmi	r3, [r1, #0]
 801caf6:	bf5c      	itt	pl
 801caf8:	600b      	strpl	r3, [r1, #0]
 801cafa:	2002      	movpl	r0, #2
 801cafc:	4770      	bx	lr
 801cafe:	b298      	uxth	r0, r3
 801cb00:	b9a8      	cbnz	r0, 801cb2e <__lo0bits+0x52>
 801cb02:	0c1b      	lsrs	r3, r3, #16
 801cb04:	2010      	movs	r0, #16
 801cb06:	b2da      	uxtb	r2, r3
 801cb08:	b90a      	cbnz	r2, 801cb0e <__lo0bits+0x32>
 801cb0a:	3008      	adds	r0, #8
 801cb0c:	0a1b      	lsrs	r3, r3, #8
 801cb0e:	071a      	lsls	r2, r3, #28
 801cb10:	bf04      	itt	eq
 801cb12:	091b      	lsreq	r3, r3, #4
 801cb14:	3004      	addeq	r0, #4
 801cb16:	079a      	lsls	r2, r3, #30
 801cb18:	bf04      	itt	eq
 801cb1a:	089b      	lsreq	r3, r3, #2
 801cb1c:	3002      	addeq	r0, #2
 801cb1e:	07da      	lsls	r2, r3, #31
 801cb20:	d403      	bmi.n	801cb2a <__lo0bits+0x4e>
 801cb22:	085b      	lsrs	r3, r3, #1
 801cb24:	f100 0001 	add.w	r0, r0, #1
 801cb28:	d005      	beq.n	801cb36 <__lo0bits+0x5a>
 801cb2a:	600b      	str	r3, [r1, #0]
 801cb2c:	4770      	bx	lr
 801cb2e:	4610      	mov	r0, r2
 801cb30:	e7e9      	b.n	801cb06 <__lo0bits+0x2a>
 801cb32:	2000      	movs	r0, #0
 801cb34:	4770      	bx	lr
 801cb36:	2020      	movs	r0, #32
 801cb38:	4770      	bx	lr
	...

0801cb3c <__i2b>:
 801cb3c:	b510      	push	{r4, lr}
 801cb3e:	460c      	mov	r4, r1
 801cb40:	2101      	movs	r1, #1
 801cb42:	f7ff ff03 	bl	801c94c <_Balloc>
 801cb46:	4602      	mov	r2, r0
 801cb48:	b928      	cbnz	r0, 801cb56 <__i2b+0x1a>
 801cb4a:	4b05      	ldr	r3, [pc, #20]	; (801cb60 <__i2b+0x24>)
 801cb4c:	4805      	ldr	r0, [pc, #20]	; (801cb64 <__i2b+0x28>)
 801cb4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cb52:	f000 fd7d 	bl	801d650 <__assert_func>
 801cb56:	2301      	movs	r3, #1
 801cb58:	6144      	str	r4, [r0, #20]
 801cb5a:	6103      	str	r3, [r0, #16]
 801cb5c:	bd10      	pop	{r4, pc}
 801cb5e:	bf00      	nop
 801cb60:	0801ddff 	.word	0x0801ddff
 801cb64:	0801de70 	.word	0x0801de70

0801cb68 <__multiply>:
 801cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb6c:	4691      	mov	r9, r2
 801cb6e:	690a      	ldr	r2, [r1, #16]
 801cb70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cb74:	429a      	cmp	r2, r3
 801cb76:	bfb8      	it	lt
 801cb78:	460b      	movlt	r3, r1
 801cb7a:	460c      	mov	r4, r1
 801cb7c:	bfbc      	itt	lt
 801cb7e:	464c      	movlt	r4, r9
 801cb80:	4699      	movlt	r9, r3
 801cb82:	6927      	ldr	r7, [r4, #16]
 801cb84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cb88:	68a3      	ldr	r3, [r4, #8]
 801cb8a:	6861      	ldr	r1, [r4, #4]
 801cb8c:	eb07 060a 	add.w	r6, r7, sl
 801cb90:	42b3      	cmp	r3, r6
 801cb92:	b085      	sub	sp, #20
 801cb94:	bfb8      	it	lt
 801cb96:	3101      	addlt	r1, #1
 801cb98:	f7ff fed8 	bl	801c94c <_Balloc>
 801cb9c:	b930      	cbnz	r0, 801cbac <__multiply+0x44>
 801cb9e:	4602      	mov	r2, r0
 801cba0:	4b44      	ldr	r3, [pc, #272]	; (801ccb4 <__multiply+0x14c>)
 801cba2:	4845      	ldr	r0, [pc, #276]	; (801ccb8 <__multiply+0x150>)
 801cba4:	f240 115d 	movw	r1, #349	; 0x15d
 801cba8:	f000 fd52 	bl	801d650 <__assert_func>
 801cbac:	f100 0514 	add.w	r5, r0, #20
 801cbb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cbb4:	462b      	mov	r3, r5
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	4543      	cmp	r3, r8
 801cbba:	d321      	bcc.n	801cc00 <__multiply+0x98>
 801cbbc:	f104 0314 	add.w	r3, r4, #20
 801cbc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cbc4:	f109 0314 	add.w	r3, r9, #20
 801cbc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cbcc:	9202      	str	r2, [sp, #8]
 801cbce:	1b3a      	subs	r2, r7, r4
 801cbd0:	3a15      	subs	r2, #21
 801cbd2:	f022 0203 	bic.w	r2, r2, #3
 801cbd6:	3204      	adds	r2, #4
 801cbd8:	f104 0115 	add.w	r1, r4, #21
 801cbdc:	428f      	cmp	r7, r1
 801cbde:	bf38      	it	cc
 801cbe0:	2204      	movcc	r2, #4
 801cbe2:	9201      	str	r2, [sp, #4]
 801cbe4:	9a02      	ldr	r2, [sp, #8]
 801cbe6:	9303      	str	r3, [sp, #12]
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	d80c      	bhi.n	801cc06 <__multiply+0x9e>
 801cbec:	2e00      	cmp	r6, #0
 801cbee:	dd03      	ble.n	801cbf8 <__multiply+0x90>
 801cbf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d05a      	beq.n	801ccae <__multiply+0x146>
 801cbf8:	6106      	str	r6, [r0, #16]
 801cbfa:	b005      	add	sp, #20
 801cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc00:	f843 2b04 	str.w	r2, [r3], #4
 801cc04:	e7d8      	b.n	801cbb8 <__multiply+0x50>
 801cc06:	f8b3 a000 	ldrh.w	sl, [r3]
 801cc0a:	f1ba 0f00 	cmp.w	sl, #0
 801cc0e:	d024      	beq.n	801cc5a <__multiply+0xf2>
 801cc10:	f104 0e14 	add.w	lr, r4, #20
 801cc14:	46a9      	mov	r9, r5
 801cc16:	f04f 0c00 	mov.w	ip, #0
 801cc1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cc1e:	f8d9 1000 	ldr.w	r1, [r9]
 801cc22:	fa1f fb82 	uxth.w	fp, r2
 801cc26:	b289      	uxth	r1, r1
 801cc28:	fb0a 110b 	mla	r1, sl, fp, r1
 801cc2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cc30:	f8d9 2000 	ldr.w	r2, [r9]
 801cc34:	4461      	add	r1, ip
 801cc36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc3a:	fb0a c20b 	mla	r2, sl, fp, ip
 801cc3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cc42:	b289      	uxth	r1, r1
 801cc44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cc48:	4577      	cmp	r7, lr
 801cc4a:	f849 1b04 	str.w	r1, [r9], #4
 801cc4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc52:	d8e2      	bhi.n	801cc1a <__multiply+0xb2>
 801cc54:	9a01      	ldr	r2, [sp, #4]
 801cc56:	f845 c002 	str.w	ip, [r5, r2]
 801cc5a:	9a03      	ldr	r2, [sp, #12]
 801cc5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cc60:	3304      	adds	r3, #4
 801cc62:	f1b9 0f00 	cmp.w	r9, #0
 801cc66:	d020      	beq.n	801ccaa <__multiply+0x142>
 801cc68:	6829      	ldr	r1, [r5, #0]
 801cc6a:	f104 0c14 	add.w	ip, r4, #20
 801cc6e:	46ae      	mov	lr, r5
 801cc70:	f04f 0a00 	mov.w	sl, #0
 801cc74:	f8bc b000 	ldrh.w	fp, [ip]
 801cc78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cc7c:	fb09 220b 	mla	r2, r9, fp, r2
 801cc80:	4492      	add	sl, r2
 801cc82:	b289      	uxth	r1, r1
 801cc84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cc88:	f84e 1b04 	str.w	r1, [lr], #4
 801cc8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cc90:	f8be 1000 	ldrh.w	r1, [lr]
 801cc94:	0c12      	lsrs	r2, r2, #16
 801cc96:	fb09 1102 	mla	r1, r9, r2, r1
 801cc9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cc9e:	4567      	cmp	r7, ip
 801cca0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cca4:	d8e6      	bhi.n	801cc74 <__multiply+0x10c>
 801cca6:	9a01      	ldr	r2, [sp, #4]
 801cca8:	50a9      	str	r1, [r5, r2]
 801ccaa:	3504      	adds	r5, #4
 801ccac:	e79a      	b.n	801cbe4 <__multiply+0x7c>
 801ccae:	3e01      	subs	r6, #1
 801ccb0:	e79c      	b.n	801cbec <__multiply+0x84>
 801ccb2:	bf00      	nop
 801ccb4:	0801ddff 	.word	0x0801ddff
 801ccb8:	0801de70 	.word	0x0801de70

0801ccbc <__pow5mult>:
 801ccbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccc0:	4615      	mov	r5, r2
 801ccc2:	f012 0203 	ands.w	r2, r2, #3
 801ccc6:	4606      	mov	r6, r0
 801ccc8:	460f      	mov	r7, r1
 801ccca:	d007      	beq.n	801ccdc <__pow5mult+0x20>
 801cccc:	4c25      	ldr	r4, [pc, #148]	; (801cd64 <__pow5mult+0xa8>)
 801ccce:	3a01      	subs	r2, #1
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ccd6:	f7ff fe9b 	bl	801ca10 <__multadd>
 801ccda:	4607      	mov	r7, r0
 801ccdc:	10ad      	asrs	r5, r5, #2
 801ccde:	d03d      	beq.n	801cd5c <__pow5mult+0xa0>
 801cce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cce2:	b97c      	cbnz	r4, 801cd04 <__pow5mult+0x48>
 801cce4:	2010      	movs	r0, #16
 801cce6:	f7ff fe29 	bl	801c93c <malloc>
 801ccea:	4602      	mov	r2, r0
 801ccec:	6270      	str	r0, [r6, #36]	; 0x24
 801ccee:	b928      	cbnz	r0, 801ccfc <__pow5mult+0x40>
 801ccf0:	4b1d      	ldr	r3, [pc, #116]	; (801cd68 <__pow5mult+0xac>)
 801ccf2:	481e      	ldr	r0, [pc, #120]	; (801cd6c <__pow5mult+0xb0>)
 801ccf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ccf8:	f000 fcaa 	bl	801d650 <__assert_func>
 801ccfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd00:	6004      	str	r4, [r0, #0]
 801cd02:	60c4      	str	r4, [r0, #12]
 801cd04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd0c:	b94c      	cbnz	r4, 801cd22 <__pow5mult+0x66>
 801cd0e:	f240 2171 	movw	r1, #625	; 0x271
 801cd12:	4630      	mov	r0, r6
 801cd14:	f7ff ff12 	bl	801cb3c <__i2b>
 801cd18:	2300      	movs	r3, #0
 801cd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd1e:	4604      	mov	r4, r0
 801cd20:	6003      	str	r3, [r0, #0]
 801cd22:	f04f 0900 	mov.w	r9, #0
 801cd26:	07eb      	lsls	r3, r5, #31
 801cd28:	d50a      	bpl.n	801cd40 <__pow5mult+0x84>
 801cd2a:	4639      	mov	r1, r7
 801cd2c:	4622      	mov	r2, r4
 801cd2e:	4630      	mov	r0, r6
 801cd30:	f7ff ff1a 	bl	801cb68 <__multiply>
 801cd34:	4639      	mov	r1, r7
 801cd36:	4680      	mov	r8, r0
 801cd38:	4630      	mov	r0, r6
 801cd3a:	f7ff fe47 	bl	801c9cc <_Bfree>
 801cd3e:	4647      	mov	r7, r8
 801cd40:	106d      	asrs	r5, r5, #1
 801cd42:	d00b      	beq.n	801cd5c <__pow5mult+0xa0>
 801cd44:	6820      	ldr	r0, [r4, #0]
 801cd46:	b938      	cbnz	r0, 801cd58 <__pow5mult+0x9c>
 801cd48:	4622      	mov	r2, r4
 801cd4a:	4621      	mov	r1, r4
 801cd4c:	4630      	mov	r0, r6
 801cd4e:	f7ff ff0b 	bl	801cb68 <__multiply>
 801cd52:	6020      	str	r0, [r4, #0]
 801cd54:	f8c0 9000 	str.w	r9, [r0]
 801cd58:	4604      	mov	r4, r0
 801cd5a:	e7e4      	b.n	801cd26 <__pow5mult+0x6a>
 801cd5c:	4638      	mov	r0, r7
 801cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd62:	bf00      	nop
 801cd64:	0801dfc0 	.word	0x0801dfc0
 801cd68:	0801dd8d 	.word	0x0801dd8d
 801cd6c:	0801de70 	.word	0x0801de70

0801cd70 <__lshift>:
 801cd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd74:	460c      	mov	r4, r1
 801cd76:	6849      	ldr	r1, [r1, #4]
 801cd78:	6923      	ldr	r3, [r4, #16]
 801cd7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cd7e:	68a3      	ldr	r3, [r4, #8]
 801cd80:	4607      	mov	r7, r0
 801cd82:	4691      	mov	r9, r2
 801cd84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd88:	f108 0601 	add.w	r6, r8, #1
 801cd8c:	42b3      	cmp	r3, r6
 801cd8e:	db0b      	blt.n	801cda8 <__lshift+0x38>
 801cd90:	4638      	mov	r0, r7
 801cd92:	f7ff fddb 	bl	801c94c <_Balloc>
 801cd96:	4605      	mov	r5, r0
 801cd98:	b948      	cbnz	r0, 801cdae <__lshift+0x3e>
 801cd9a:	4602      	mov	r2, r0
 801cd9c:	4b2a      	ldr	r3, [pc, #168]	; (801ce48 <__lshift+0xd8>)
 801cd9e:	482b      	ldr	r0, [pc, #172]	; (801ce4c <__lshift+0xdc>)
 801cda0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cda4:	f000 fc54 	bl	801d650 <__assert_func>
 801cda8:	3101      	adds	r1, #1
 801cdaa:	005b      	lsls	r3, r3, #1
 801cdac:	e7ee      	b.n	801cd8c <__lshift+0x1c>
 801cdae:	2300      	movs	r3, #0
 801cdb0:	f100 0114 	add.w	r1, r0, #20
 801cdb4:	f100 0210 	add.w	r2, r0, #16
 801cdb8:	4618      	mov	r0, r3
 801cdba:	4553      	cmp	r3, sl
 801cdbc:	db37      	blt.n	801ce2e <__lshift+0xbe>
 801cdbe:	6920      	ldr	r0, [r4, #16]
 801cdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cdc4:	f104 0314 	add.w	r3, r4, #20
 801cdc8:	f019 091f 	ands.w	r9, r9, #31
 801cdcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cdd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cdd4:	d02f      	beq.n	801ce36 <__lshift+0xc6>
 801cdd6:	f1c9 0e20 	rsb	lr, r9, #32
 801cdda:	468a      	mov	sl, r1
 801cddc:	f04f 0c00 	mov.w	ip, #0
 801cde0:	681a      	ldr	r2, [r3, #0]
 801cde2:	fa02 f209 	lsl.w	r2, r2, r9
 801cde6:	ea42 020c 	orr.w	r2, r2, ip
 801cdea:	f84a 2b04 	str.w	r2, [sl], #4
 801cdee:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdf2:	4298      	cmp	r0, r3
 801cdf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cdf8:	d8f2      	bhi.n	801cde0 <__lshift+0x70>
 801cdfa:	1b03      	subs	r3, r0, r4
 801cdfc:	3b15      	subs	r3, #21
 801cdfe:	f023 0303 	bic.w	r3, r3, #3
 801ce02:	3304      	adds	r3, #4
 801ce04:	f104 0215 	add.w	r2, r4, #21
 801ce08:	4290      	cmp	r0, r2
 801ce0a:	bf38      	it	cc
 801ce0c:	2304      	movcc	r3, #4
 801ce0e:	f841 c003 	str.w	ip, [r1, r3]
 801ce12:	f1bc 0f00 	cmp.w	ip, #0
 801ce16:	d001      	beq.n	801ce1c <__lshift+0xac>
 801ce18:	f108 0602 	add.w	r6, r8, #2
 801ce1c:	3e01      	subs	r6, #1
 801ce1e:	4638      	mov	r0, r7
 801ce20:	612e      	str	r6, [r5, #16]
 801ce22:	4621      	mov	r1, r4
 801ce24:	f7ff fdd2 	bl	801c9cc <_Bfree>
 801ce28:	4628      	mov	r0, r5
 801ce2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce2e:	f842 0f04 	str.w	r0, [r2, #4]!
 801ce32:	3301      	adds	r3, #1
 801ce34:	e7c1      	b.n	801cdba <__lshift+0x4a>
 801ce36:	3904      	subs	r1, #4
 801ce38:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce3c:	f841 2f04 	str.w	r2, [r1, #4]!
 801ce40:	4298      	cmp	r0, r3
 801ce42:	d8f9      	bhi.n	801ce38 <__lshift+0xc8>
 801ce44:	e7ea      	b.n	801ce1c <__lshift+0xac>
 801ce46:	bf00      	nop
 801ce48:	0801ddff 	.word	0x0801ddff
 801ce4c:	0801de70 	.word	0x0801de70

0801ce50 <__mcmp>:
 801ce50:	b530      	push	{r4, r5, lr}
 801ce52:	6902      	ldr	r2, [r0, #16]
 801ce54:	690c      	ldr	r4, [r1, #16]
 801ce56:	1b12      	subs	r2, r2, r4
 801ce58:	d10e      	bne.n	801ce78 <__mcmp+0x28>
 801ce5a:	f100 0314 	add.w	r3, r0, #20
 801ce5e:	3114      	adds	r1, #20
 801ce60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ce64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ce68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ce6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ce70:	42a5      	cmp	r5, r4
 801ce72:	d003      	beq.n	801ce7c <__mcmp+0x2c>
 801ce74:	d305      	bcc.n	801ce82 <__mcmp+0x32>
 801ce76:	2201      	movs	r2, #1
 801ce78:	4610      	mov	r0, r2
 801ce7a:	bd30      	pop	{r4, r5, pc}
 801ce7c:	4283      	cmp	r3, r0
 801ce7e:	d3f3      	bcc.n	801ce68 <__mcmp+0x18>
 801ce80:	e7fa      	b.n	801ce78 <__mcmp+0x28>
 801ce82:	f04f 32ff 	mov.w	r2, #4294967295
 801ce86:	e7f7      	b.n	801ce78 <__mcmp+0x28>

0801ce88 <__mdiff>:
 801ce88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce8c:	460c      	mov	r4, r1
 801ce8e:	4606      	mov	r6, r0
 801ce90:	4611      	mov	r1, r2
 801ce92:	4620      	mov	r0, r4
 801ce94:	4690      	mov	r8, r2
 801ce96:	f7ff ffdb 	bl	801ce50 <__mcmp>
 801ce9a:	1e05      	subs	r5, r0, #0
 801ce9c:	d110      	bne.n	801cec0 <__mdiff+0x38>
 801ce9e:	4629      	mov	r1, r5
 801cea0:	4630      	mov	r0, r6
 801cea2:	f7ff fd53 	bl	801c94c <_Balloc>
 801cea6:	b930      	cbnz	r0, 801ceb6 <__mdiff+0x2e>
 801cea8:	4b3a      	ldr	r3, [pc, #232]	; (801cf94 <__mdiff+0x10c>)
 801ceaa:	4602      	mov	r2, r0
 801ceac:	f240 2132 	movw	r1, #562	; 0x232
 801ceb0:	4839      	ldr	r0, [pc, #228]	; (801cf98 <__mdiff+0x110>)
 801ceb2:	f000 fbcd 	bl	801d650 <__assert_func>
 801ceb6:	2301      	movs	r3, #1
 801ceb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cec0:	bfa4      	itt	ge
 801cec2:	4643      	movge	r3, r8
 801cec4:	46a0      	movge	r8, r4
 801cec6:	4630      	mov	r0, r6
 801cec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cecc:	bfa6      	itte	ge
 801cece:	461c      	movge	r4, r3
 801ced0:	2500      	movge	r5, #0
 801ced2:	2501      	movlt	r5, #1
 801ced4:	f7ff fd3a 	bl	801c94c <_Balloc>
 801ced8:	b920      	cbnz	r0, 801cee4 <__mdiff+0x5c>
 801ceda:	4b2e      	ldr	r3, [pc, #184]	; (801cf94 <__mdiff+0x10c>)
 801cedc:	4602      	mov	r2, r0
 801cede:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cee2:	e7e5      	b.n	801ceb0 <__mdiff+0x28>
 801cee4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cee8:	6926      	ldr	r6, [r4, #16]
 801ceea:	60c5      	str	r5, [r0, #12]
 801ceec:	f104 0914 	add.w	r9, r4, #20
 801cef0:	f108 0514 	add.w	r5, r8, #20
 801cef4:	f100 0e14 	add.w	lr, r0, #20
 801cef8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cefc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cf00:	f108 0210 	add.w	r2, r8, #16
 801cf04:	46f2      	mov	sl, lr
 801cf06:	2100      	movs	r1, #0
 801cf08:	f859 3b04 	ldr.w	r3, [r9], #4
 801cf0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cf10:	fa1f f883 	uxth.w	r8, r3
 801cf14:	fa11 f18b 	uxtah	r1, r1, fp
 801cf18:	0c1b      	lsrs	r3, r3, #16
 801cf1a:	eba1 0808 	sub.w	r8, r1, r8
 801cf1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cf22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cf26:	fa1f f888 	uxth.w	r8, r8
 801cf2a:	1419      	asrs	r1, r3, #16
 801cf2c:	454e      	cmp	r6, r9
 801cf2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cf32:	f84a 3b04 	str.w	r3, [sl], #4
 801cf36:	d8e7      	bhi.n	801cf08 <__mdiff+0x80>
 801cf38:	1b33      	subs	r3, r6, r4
 801cf3a:	3b15      	subs	r3, #21
 801cf3c:	f023 0303 	bic.w	r3, r3, #3
 801cf40:	3304      	adds	r3, #4
 801cf42:	3415      	adds	r4, #21
 801cf44:	42a6      	cmp	r6, r4
 801cf46:	bf38      	it	cc
 801cf48:	2304      	movcc	r3, #4
 801cf4a:	441d      	add	r5, r3
 801cf4c:	4473      	add	r3, lr
 801cf4e:	469e      	mov	lr, r3
 801cf50:	462e      	mov	r6, r5
 801cf52:	4566      	cmp	r6, ip
 801cf54:	d30e      	bcc.n	801cf74 <__mdiff+0xec>
 801cf56:	f10c 0203 	add.w	r2, ip, #3
 801cf5a:	1b52      	subs	r2, r2, r5
 801cf5c:	f022 0203 	bic.w	r2, r2, #3
 801cf60:	3d03      	subs	r5, #3
 801cf62:	45ac      	cmp	ip, r5
 801cf64:	bf38      	it	cc
 801cf66:	2200      	movcc	r2, #0
 801cf68:	441a      	add	r2, r3
 801cf6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cf6e:	b17b      	cbz	r3, 801cf90 <__mdiff+0x108>
 801cf70:	6107      	str	r7, [r0, #16]
 801cf72:	e7a3      	b.n	801cebc <__mdiff+0x34>
 801cf74:	f856 8b04 	ldr.w	r8, [r6], #4
 801cf78:	fa11 f288 	uxtah	r2, r1, r8
 801cf7c:	1414      	asrs	r4, r2, #16
 801cf7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cf82:	b292      	uxth	r2, r2
 801cf84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cf88:	f84e 2b04 	str.w	r2, [lr], #4
 801cf8c:	1421      	asrs	r1, r4, #16
 801cf8e:	e7e0      	b.n	801cf52 <__mdiff+0xca>
 801cf90:	3f01      	subs	r7, #1
 801cf92:	e7ea      	b.n	801cf6a <__mdiff+0xe2>
 801cf94:	0801ddff 	.word	0x0801ddff
 801cf98:	0801de70 	.word	0x0801de70

0801cf9c <__d2b>:
 801cf9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cfa0:	4689      	mov	r9, r1
 801cfa2:	2101      	movs	r1, #1
 801cfa4:	ec57 6b10 	vmov	r6, r7, d0
 801cfa8:	4690      	mov	r8, r2
 801cfaa:	f7ff fccf 	bl	801c94c <_Balloc>
 801cfae:	4604      	mov	r4, r0
 801cfb0:	b930      	cbnz	r0, 801cfc0 <__d2b+0x24>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	4b25      	ldr	r3, [pc, #148]	; (801d04c <__d2b+0xb0>)
 801cfb6:	4826      	ldr	r0, [pc, #152]	; (801d050 <__d2b+0xb4>)
 801cfb8:	f240 310a 	movw	r1, #778	; 0x30a
 801cfbc:	f000 fb48 	bl	801d650 <__assert_func>
 801cfc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cfc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cfc8:	bb35      	cbnz	r5, 801d018 <__d2b+0x7c>
 801cfca:	2e00      	cmp	r6, #0
 801cfcc:	9301      	str	r3, [sp, #4]
 801cfce:	d028      	beq.n	801d022 <__d2b+0x86>
 801cfd0:	4668      	mov	r0, sp
 801cfd2:	9600      	str	r6, [sp, #0]
 801cfd4:	f7ff fd82 	bl	801cadc <__lo0bits>
 801cfd8:	9900      	ldr	r1, [sp, #0]
 801cfda:	b300      	cbz	r0, 801d01e <__d2b+0x82>
 801cfdc:	9a01      	ldr	r2, [sp, #4]
 801cfde:	f1c0 0320 	rsb	r3, r0, #32
 801cfe2:	fa02 f303 	lsl.w	r3, r2, r3
 801cfe6:	430b      	orrs	r3, r1
 801cfe8:	40c2      	lsrs	r2, r0
 801cfea:	6163      	str	r3, [r4, #20]
 801cfec:	9201      	str	r2, [sp, #4]
 801cfee:	9b01      	ldr	r3, [sp, #4]
 801cff0:	61a3      	str	r3, [r4, #24]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	bf14      	ite	ne
 801cff6:	2202      	movne	r2, #2
 801cff8:	2201      	moveq	r2, #1
 801cffa:	6122      	str	r2, [r4, #16]
 801cffc:	b1d5      	cbz	r5, 801d034 <__d2b+0x98>
 801cffe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d002:	4405      	add	r5, r0
 801d004:	f8c9 5000 	str.w	r5, [r9]
 801d008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d00c:	f8c8 0000 	str.w	r0, [r8]
 801d010:	4620      	mov	r0, r4
 801d012:	b003      	add	sp, #12
 801d014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d01c:	e7d5      	b.n	801cfca <__d2b+0x2e>
 801d01e:	6161      	str	r1, [r4, #20]
 801d020:	e7e5      	b.n	801cfee <__d2b+0x52>
 801d022:	a801      	add	r0, sp, #4
 801d024:	f7ff fd5a 	bl	801cadc <__lo0bits>
 801d028:	9b01      	ldr	r3, [sp, #4]
 801d02a:	6163      	str	r3, [r4, #20]
 801d02c:	2201      	movs	r2, #1
 801d02e:	6122      	str	r2, [r4, #16]
 801d030:	3020      	adds	r0, #32
 801d032:	e7e3      	b.n	801cffc <__d2b+0x60>
 801d034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d03c:	f8c9 0000 	str.w	r0, [r9]
 801d040:	6918      	ldr	r0, [r3, #16]
 801d042:	f7ff fd2b 	bl	801ca9c <__hi0bits>
 801d046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d04a:	e7df      	b.n	801d00c <__d2b+0x70>
 801d04c:	0801ddff 	.word	0x0801ddff
 801d050:	0801de70 	.word	0x0801de70

0801d054 <_calloc_r>:
 801d054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d056:	fba1 2402 	umull	r2, r4, r1, r2
 801d05a:	b94c      	cbnz	r4, 801d070 <_calloc_r+0x1c>
 801d05c:	4611      	mov	r1, r2
 801d05e:	9201      	str	r2, [sp, #4]
 801d060:	f000 f87a 	bl	801d158 <_malloc_r>
 801d064:	9a01      	ldr	r2, [sp, #4]
 801d066:	4605      	mov	r5, r0
 801d068:	b930      	cbnz	r0, 801d078 <_calloc_r+0x24>
 801d06a:	4628      	mov	r0, r5
 801d06c:	b003      	add	sp, #12
 801d06e:	bd30      	pop	{r4, r5, pc}
 801d070:	220c      	movs	r2, #12
 801d072:	6002      	str	r2, [r0, #0]
 801d074:	2500      	movs	r5, #0
 801d076:	e7f8      	b.n	801d06a <_calloc_r+0x16>
 801d078:	4621      	mov	r1, r4
 801d07a:	f7fd fdd5 	bl	801ac28 <memset>
 801d07e:	e7f4      	b.n	801d06a <_calloc_r+0x16>

0801d080 <_free_r>:
 801d080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d082:	2900      	cmp	r1, #0
 801d084:	d044      	beq.n	801d110 <_free_r+0x90>
 801d086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d08a:	9001      	str	r0, [sp, #4]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	f1a1 0404 	sub.w	r4, r1, #4
 801d092:	bfb8      	it	lt
 801d094:	18e4      	addlt	r4, r4, r3
 801d096:	f000 fb61 	bl	801d75c <__malloc_lock>
 801d09a:	4a1e      	ldr	r2, [pc, #120]	; (801d114 <_free_r+0x94>)
 801d09c:	9801      	ldr	r0, [sp, #4]
 801d09e:	6813      	ldr	r3, [r2, #0]
 801d0a0:	b933      	cbnz	r3, 801d0b0 <_free_r+0x30>
 801d0a2:	6063      	str	r3, [r4, #4]
 801d0a4:	6014      	str	r4, [r2, #0]
 801d0a6:	b003      	add	sp, #12
 801d0a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d0ac:	f000 bb5c 	b.w	801d768 <__malloc_unlock>
 801d0b0:	42a3      	cmp	r3, r4
 801d0b2:	d908      	bls.n	801d0c6 <_free_r+0x46>
 801d0b4:	6825      	ldr	r5, [r4, #0]
 801d0b6:	1961      	adds	r1, r4, r5
 801d0b8:	428b      	cmp	r3, r1
 801d0ba:	bf01      	itttt	eq
 801d0bc:	6819      	ldreq	r1, [r3, #0]
 801d0be:	685b      	ldreq	r3, [r3, #4]
 801d0c0:	1949      	addeq	r1, r1, r5
 801d0c2:	6021      	streq	r1, [r4, #0]
 801d0c4:	e7ed      	b.n	801d0a2 <_free_r+0x22>
 801d0c6:	461a      	mov	r2, r3
 801d0c8:	685b      	ldr	r3, [r3, #4]
 801d0ca:	b10b      	cbz	r3, 801d0d0 <_free_r+0x50>
 801d0cc:	42a3      	cmp	r3, r4
 801d0ce:	d9fa      	bls.n	801d0c6 <_free_r+0x46>
 801d0d0:	6811      	ldr	r1, [r2, #0]
 801d0d2:	1855      	adds	r5, r2, r1
 801d0d4:	42a5      	cmp	r5, r4
 801d0d6:	d10b      	bne.n	801d0f0 <_free_r+0x70>
 801d0d8:	6824      	ldr	r4, [r4, #0]
 801d0da:	4421      	add	r1, r4
 801d0dc:	1854      	adds	r4, r2, r1
 801d0de:	42a3      	cmp	r3, r4
 801d0e0:	6011      	str	r1, [r2, #0]
 801d0e2:	d1e0      	bne.n	801d0a6 <_free_r+0x26>
 801d0e4:	681c      	ldr	r4, [r3, #0]
 801d0e6:	685b      	ldr	r3, [r3, #4]
 801d0e8:	6053      	str	r3, [r2, #4]
 801d0ea:	4421      	add	r1, r4
 801d0ec:	6011      	str	r1, [r2, #0]
 801d0ee:	e7da      	b.n	801d0a6 <_free_r+0x26>
 801d0f0:	d902      	bls.n	801d0f8 <_free_r+0x78>
 801d0f2:	230c      	movs	r3, #12
 801d0f4:	6003      	str	r3, [r0, #0]
 801d0f6:	e7d6      	b.n	801d0a6 <_free_r+0x26>
 801d0f8:	6825      	ldr	r5, [r4, #0]
 801d0fa:	1961      	adds	r1, r4, r5
 801d0fc:	428b      	cmp	r3, r1
 801d0fe:	bf04      	itt	eq
 801d100:	6819      	ldreq	r1, [r3, #0]
 801d102:	685b      	ldreq	r3, [r3, #4]
 801d104:	6063      	str	r3, [r4, #4]
 801d106:	bf04      	itt	eq
 801d108:	1949      	addeq	r1, r1, r5
 801d10a:	6021      	streq	r1, [r4, #0]
 801d10c:	6054      	str	r4, [r2, #4]
 801d10e:	e7ca      	b.n	801d0a6 <_free_r+0x26>
 801d110:	b003      	add	sp, #12
 801d112:	bd30      	pop	{r4, r5, pc}
 801d114:	20008848 	.word	0x20008848

0801d118 <sbrk_aligned>:
 801d118:	b570      	push	{r4, r5, r6, lr}
 801d11a:	4e0e      	ldr	r6, [pc, #56]	; (801d154 <sbrk_aligned+0x3c>)
 801d11c:	460c      	mov	r4, r1
 801d11e:	6831      	ldr	r1, [r6, #0]
 801d120:	4605      	mov	r5, r0
 801d122:	b911      	cbnz	r1, 801d12a <sbrk_aligned+0x12>
 801d124:	f000 fa2e 	bl	801d584 <_sbrk_r>
 801d128:	6030      	str	r0, [r6, #0]
 801d12a:	4621      	mov	r1, r4
 801d12c:	4628      	mov	r0, r5
 801d12e:	f000 fa29 	bl	801d584 <_sbrk_r>
 801d132:	1c43      	adds	r3, r0, #1
 801d134:	d00a      	beq.n	801d14c <sbrk_aligned+0x34>
 801d136:	1cc4      	adds	r4, r0, #3
 801d138:	f024 0403 	bic.w	r4, r4, #3
 801d13c:	42a0      	cmp	r0, r4
 801d13e:	d007      	beq.n	801d150 <sbrk_aligned+0x38>
 801d140:	1a21      	subs	r1, r4, r0
 801d142:	4628      	mov	r0, r5
 801d144:	f000 fa1e 	bl	801d584 <_sbrk_r>
 801d148:	3001      	adds	r0, #1
 801d14a:	d101      	bne.n	801d150 <sbrk_aligned+0x38>
 801d14c:	f04f 34ff 	mov.w	r4, #4294967295
 801d150:	4620      	mov	r0, r4
 801d152:	bd70      	pop	{r4, r5, r6, pc}
 801d154:	2000884c 	.word	0x2000884c

0801d158 <_malloc_r>:
 801d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d15c:	1ccd      	adds	r5, r1, #3
 801d15e:	f025 0503 	bic.w	r5, r5, #3
 801d162:	3508      	adds	r5, #8
 801d164:	2d0c      	cmp	r5, #12
 801d166:	bf38      	it	cc
 801d168:	250c      	movcc	r5, #12
 801d16a:	2d00      	cmp	r5, #0
 801d16c:	4607      	mov	r7, r0
 801d16e:	db01      	blt.n	801d174 <_malloc_r+0x1c>
 801d170:	42a9      	cmp	r1, r5
 801d172:	d905      	bls.n	801d180 <_malloc_r+0x28>
 801d174:	230c      	movs	r3, #12
 801d176:	603b      	str	r3, [r7, #0]
 801d178:	2600      	movs	r6, #0
 801d17a:	4630      	mov	r0, r6
 801d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d180:	4e2e      	ldr	r6, [pc, #184]	; (801d23c <_malloc_r+0xe4>)
 801d182:	f000 faeb 	bl	801d75c <__malloc_lock>
 801d186:	6833      	ldr	r3, [r6, #0]
 801d188:	461c      	mov	r4, r3
 801d18a:	bb34      	cbnz	r4, 801d1da <_malloc_r+0x82>
 801d18c:	4629      	mov	r1, r5
 801d18e:	4638      	mov	r0, r7
 801d190:	f7ff ffc2 	bl	801d118 <sbrk_aligned>
 801d194:	1c43      	adds	r3, r0, #1
 801d196:	4604      	mov	r4, r0
 801d198:	d14d      	bne.n	801d236 <_malloc_r+0xde>
 801d19a:	6834      	ldr	r4, [r6, #0]
 801d19c:	4626      	mov	r6, r4
 801d19e:	2e00      	cmp	r6, #0
 801d1a0:	d140      	bne.n	801d224 <_malloc_r+0xcc>
 801d1a2:	6823      	ldr	r3, [r4, #0]
 801d1a4:	4631      	mov	r1, r6
 801d1a6:	4638      	mov	r0, r7
 801d1a8:	eb04 0803 	add.w	r8, r4, r3
 801d1ac:	f000 f9ea 	bl	801d584 <_sbrk_r>
 801d1b0:	4580      	cmp	r8, r0
 801d1b2:	d13a      	bne.n	801d22a <_malloc_r+0xd2>
 801d1b4:	6821      	ldr	r1, [r4, #0]
 801d1b6:	3503      	adds	r5, #3
 801d1b8:	1a6d      	subs	r5, r5, r1
 801d1ba:	f025 0503 	bic.w	r5, r5, #3
 801d1be:	3508      	adds	r5, #8
 801d1c0:	2d0c      	cmp	r5, #12
 801d1c2:	bf38      	it	cc
 801d1c4:	250c      	movcc	r5, #12
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	4638      	mov	r0, r7
 801d1ca:	f7ff ffa5 	bl	801d118 <sbrk_aligned>
 801d1ce:	3001      	adds	r0, #1
 801d1d0:	d02b      	beq.n	801d22a <_malloc_r+0xd2>
 801d1d2:	6823      	ldr	r3, [r4, #0]
 801d1d4:	442b      	add	r3, r5
 801d1d6:	6023      	str	r3, [r4, #0]
 801d1d8:	e00e      	b.n	801d1f8 <_malloc_r+0xa0>
 801d1da:	6822      	ldr	r2, [r4, #0]
 801d1dc:	1b52      	subs	r2, r2, r5
 801d1de:	d41e      	bmi.n	801d21e <_malloc_r+0xc6>
 801d1e0:	2a0b      	cmp	r2, #11
 801d1e2:	d916      	bls.n	801d212 <_malloc_r+0xba>
 801d1e4:	1961      	adds	r1, r4, r5
 801d1e6:	42a3      	cmp	r3, r4
 801d1e8:	6025      	str	r5, [r4, #0]
 801d1ea:	bf18      	it	ne
 801d1ec:	6059      	strne	r1, [r3, #4]
 801d1ee:	6863      	ldr	r3, [r4, #4]
 801d1f0:	bf08      	it	eq
 801d1f2:	6031      	streq	r1, [r6, #0]
 801d1f4:	5162      	str	r2, [r4, r5]
 801d1f6:	604b      	str	r3, [r1, #4]
 801d1f8:	4638      	mov	r0, r7
 801d1fa:	f104 060b 	add.w	r6, r4, #11
 801d1fe:	f000 fab3 	bl	801d768 <__malloc_unlock>
 801d202:	f026 0607 	bic.w	r6, r6, #7
 801d206:	1d23      	adds	r3, r4, #4
 801d208:	1af2      	subs	r2, r6, r3
 801d20a:	d0b6      	beq.n	801d17a <_malloc_r+0x22>
 801d20c:	1b9b      	subs	r3, r3, r6
 801d20e:	50a3      	str	r3, [r4, r2]
 801d210:	e7b3      	b.n	801d17a <_malloc_r+0x22>
 801d212:	6862      	ldr	r2, [r4, #4]
 801d214:	42a3      	cmp	r3, r4
 801d216:	bf0c      	ite	eq
 801d218:	6032      	streq	r2, [r6, #0]
 801d21a:	605a      	strne	r2, [r3, #4]
 801d21c:	e7ec      	b.n	801d1f8 <_malloc_r+0xa0>
 801d21e:	4623      	mov	r3, r4
 801d220:	6864      	ldr	r4, [r4, #4]
 801d222:	e7b2      	b.n	801d18a <_malloc_r+0x32>
 801d224:	4634      	mov	r4, r6
 801d226:	6876      	ldr	r6, [r6, #4]
 801d228:	e7b9      	b.n	801d19e <_malloc_r+0x46>
 801d22a:	230c      	movs	r3, #12
 801d22c:	603b      	str	r3, [r7, #0]
 801d22e:	4638      	mov	r0, r7
 801d230:	f000 fa9a 	bl	801d768 <__malloc_unlock>
 801d234:	e7a1      	b.n	801d17a <_malloc_r+0x22>
 801d236:	6025      	str	r5, [r4, #0]
 801d238:	e7de      	b.n	801d1f8 <_malloc_r+0xa0>
 801d23a:	bf00      	nop
 801d23c:	20008848 	.word	0x20008848

0801d240 <__sfputc_r>:
 801d240:	6893      	ldr	r3, [r2, #8]
 801d242:	3b01      	subs	r3, #1
 801d244:	2b00      	cmp	r3, #0
 801d246:	b410      	push	{r4}
 801d248:	6093      	str	r3, [r2, #8]
 801d24a:	da08      	bge.n	801d25e <__sfputc_r+0x1e>
 801d24c:	6994      	ldr	r4, [r2, #24]
 801d24e:	42a3      	cmp	r3, r4
 801d250:	db01      	blt.n	801d256 <__sfputc_r+0x16>
 801d252:	290a      	cmp	r1, #10
 801d254:	d103      	bne.n	801d25e <__sfputc_r+0x1e>
 801d256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d25a:	f7fe ba0f 	b.w	801b67c <__swbuf_r>
 801d25e:	6813      	ldr	r3, [r2, #0]
 801d260:	1c58      	adds	r0, r3, #1
 801d262:	6010      	str	r0, [r2, #0]
 801d264:	7019      	strb	r1, [r3, #0]
 801d266:	4608      	mov	r0, r1
 801d268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d26c:	4770      	bx	lr

0801d26e <__sfputs_r>:
 801d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d270:	4606      	mov	r6, r0
 801d272:	460f      	mov	r7, r1
 801d274:	4614      	mov	r4, r2
 801d276:	18d5      	adds	r5, r2, r3
 801d278:	42ac      	cmp	r4, r5
 801d27a:	d101      	bne.n	801d280 <__sfputs_r+0x12>
 801d27c:	2000      	movs	r0, #0
 801d27e:	e007      	b.n	801d290 <__sfputs_r+0x22>
 801d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d284:	463a      	mov	r2, r7
 801d286:	4630      	mov	r0, r6
 801d288:	f7ff ffda 	bl	801d240 <__sfputc_r>
 801d28c:	1c43      	adds	r3, r0, #1
 801d28e:	d1f3      	bne.n	801d278 <__sfputs_r+0xa>
 801d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d294 <_vfiprintf_r>:
 801d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d298:	460d      	mov	r5, r1
 801d29a:	b09d      	sub	sp, #116	; 0x74
 801d29c:	4614      	mov	r4, r2
 801d29e:	4698      	mov	r8, r3
 801d2a0:	4606      	mov	r6, r0
 801d2a2:	b118      	cbz	r0, 801d2ac <_vfiprintf_r+0x18>
 801d2a4:	6983      	ldr	r3, [r0, #24]
 801d2a6:	b90b      	cbnz	r3, 801d2ac <_vfiprintf_r+0x18>
 801d2a8:	f7ff fa3e 	bl	801c728 <__sinit>
 801d2ac:	4b89      	ldr	r3, [pc, #548]	; (801d4d4 <_vfiprintf_r+0x240>)
 801d2ae:	429d      	cmp	r5, r3
 801d2b0:	d11b      	bne.n	801d2ea <_vfiprintf_r+0x56>
 801d2b2:	6875      	ldr	r5, [r6, #4]
 801d2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2b6:	07d9      	lsls	r1, r3, #31
 801d2b8:	d405      	bmi.n	801d2c6 <_vfiprintf_r+0x32>
 801d2ba:	89ab      	ldrh	r3, [r5, #12]
 801d2bc:	059a      	lsls	r2, r3, #22
 801d2be:	d402      	bmi.n	801d2c6 <_vfiprintf_r+0x32>
 801d2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2c2:	f7ff fad4 	bl	801c86e <__retarget_lock_acquire_recursive>
 801d2c6:	89ab      	ldrh	r3, [r5, #12]
 801d2c8:	071b      	lsls	r3, r3, #28
 801d2ca:	d501      	bpl.n	801d2d0 <_vfiprintf_r+0x3c>
 801d2cc:	692b      	ldr	r3, [r5, #16]
 801d2ce:	b9eb      	cbnz	r3, 801d30c <_vfiprintf_r+0x78>
 801d2d0:	4629      	mov	r1, r5
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	f7fe fa24 	bl	801b720 <__swsetup_r>
 801d2d8:	b1c0      	cbz	r0, 801d30c <_vfiprintf_r+0x78>
 801d2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2dc:	07dc      	lsls	r4, r3, #31
 801d2de:	d50e      	bpl.n	801d2fe <_vfiprintf_r+0x6a>
 801d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d2e4:	b01d      	add	sp, #116	; 0x74
 801d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ea:	4b7b      	ldr	r3, [pc, #492]	; (801d4d8 <_vfiprintf_r+0x244>)
 801d2ec:	429d      	cmp	r5, r3
 801d2ee:	d101      	bne.n	801d2f4 <_vfiprintf_r+0x60>
 801d2f0:	68b5      	ldr	r5, [r6, #8]
 801d2f2:	e7df      	b.n	801d2b4 <_vfiprintf_r+0x20>
 801d2f4:	4b79      	ldr	r3, [pc, #484]	; (801d4dc <_vfiprintf_r+0x248>)
 801d2f6:	429d      	cmp	r5, r3
 801d2f8:	bf08      	it	eq
 801d2fa:	68f5      	ldreq	r5, [r6, #12]
 801d2fc:	e7da      	b.n	801d2b4 <_vfiprintf_r+0x20>
 801d2fe:	89ab      	ldrh	r3, [r5, #12]
 801d300:	0598      	lsls	r0, r3, #22
 801d302:	d4ed      	bmi.n	801d2e0 <_vfiprintf_r+0x4c>
 801d304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d306:	f7ff fab3 	bl	801c870 <__retarget_lock_release_recursive>
 801d30a:	e7e9      	b.n	801d2e0 <_vfiprintf_r+0x4c>
 801d30c:	2300      	movs	r3, #0
 801d30e:	9309      	str	r3, [sp, #36]	; 0x24
 801d310:	2320      	movs	r3, #32
 801d312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d316:	f8cd 800c 	str.w	r8, [sp, #12]
 801d31a:	2330      	movs	r3, #48	; 0x30
 801d31c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d4e0 <_vfiprintf_r+0x24c>
 801d320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d324:	f04f 0901 	mov.w	r9, #1
 801d328:	4623      	mov	r3, r4
 801d32a:	469a      	mov	sl, r3
 801d32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d330:	b10a      	cbz	r2, 801d336 <_vfiprintf_r+0xa2>
 801d332:	2a25      	cmp	r2, #37	; 0x25
 801d334:	d1f9      	bne.n	801d32a <_vfiprintf_r+0x96>
 801d336:	ebba 0b04 	subs.w	fp, sl, r4
 801d33a:	d00b      	beq.n	801d354 <_vfiprintf_r+0xc0>
 801d33c:	465b      	mov	r3, fp
 801d33e:	4622      	mov	r2, r4
 801d340:	4629      	mov	r1, r5
 801d342:	4630      	mov	r0, r6
 801d344:	f7ff ff93 	bl	801d26e <__sfputs_r>
 801d348:	3001      	adds	r0, #1
 801d34a:	f000 80aa 	beq.w	801d4a2 <_vfiprintf_r+0x20e>
 801d34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d350:	445a      	add	r2, fp
 801d352:	9209      	str	r2, [sp, #36]	; 0x24
 801d354:	f89a 3000 	ldrb.w	r3, [sl]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f000 80a2 	beq.w	801d4a2 <_vfiprintf_r+0x20e>
 801d35e:	2300      	movs	r3, #0
 801d360:	f04f 32ff 	mov.w	r2, #4294967295
 801d364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d368:	f10a 0a01 	add.w	sl, sl, #1
 801d36c:	9304      	str	r3, [sp, #16]
 801d36e:	9307      	str	r3, [sp, #28]
 801d370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d374:	931a      	str	r3, [sp, #104]	; 0x68
 801d376:	4654      	mov	r4, sl
 801d378:	2205      	movs	r2, #5
 801d37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d37e:	4858      	ldr	r0, [pc, #352]	; (801d4e0 <_vfiprintf_r+0x24c>)
 801d380:	f7e2 ff06 	bl	8000190 <memchr>
 801d384:	9a04      	ldr	r2, [sp, #16]
 801d386:	b9d8      	cbnz	r0, 801d3c0 <_vfiprintf_r+0x12c>
 801d388:	06d1      	lsls	r1, r2, #27
 801d38a:	bf44      	itt	mi
 801d38c:	2320      	movmi	r3, #32
 801d38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d392:	0713      	lsls	r3, r2, #28
 801d394:	bf44      	itt	mi
 801d396:	232b      	movmi	r3, #43	; 0x2b
 801d398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d39c:	f89a 3000 	ldrb.w	r3, [sl]
 801d3a0:	2b2a      	cmp	r3, #42	; 0x2a
 801d3a2:	d015      	beq.n	801d3d0 <_vfiprintf_r+0x13c>
 801d3a4:	9a07      	ldr	r2, [sp, #28]
 801d3a6:	4654      	mov	r4, sl
 801d3a8:	2000      	movs	r0, #0
 801d3aa:	f04f 0c0a 	mov.w	ip, #10
 801d3ae:	4621      	mov	r1, r4
 801d3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d3b4:	3b30      	subs	r3, #48	; 0x30
 801d3b6:	2b09      	cmp	r3, #9
 801d3b8:	d94e      	bls.n	801d458 <_vfiprintf_r+0x1c4>
 801d3ba:	b1b0      	cbz	r0, 801d3ea <_vfiprintf_r+0x156>
 801d3bc:	9207      	str	r2, [sp, #28]
 801d3be:	e014      	b.n	801d3ea <_vfiprintf_r+0x156>
 801d3c0:	eba0 0308 	sub.w	r3, r0, r8
 801d3c4:	fa09 f303 	lsl.w	r3, r9, r3
 801d3c8:	4313      	orrs	r3, r2
 801d3ca:	9304      	str	r3, [sp, #16]
 801d3cc:	46a2      	mov	sl, r4
 801d3ce:	e7d2      	b.n	801d376 <_vfiprintf_r+0xe2>
 801d3d0:	9b03      	ldr	r3, [sp, #12]
 801d3d2:	1d19      	adds	r1, r3, #4
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	9103      	str	r1, [sp, #12]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	bfbb      	ittet	lt
 801d3dc:	425b      	neglt	r3, r3
 801d3de:	f042 0202 	orrlt.w	r2, r2, #2
 801d3e2:	9307      	strge	r3, [sp, #28]
 801d3e4:	9307      	strlt	r3, [sp, #28]
 801d3e6:	bfb8      	it	lt
 801d3e8:	9204      	strlt	r2, [sp, #16]
 801d3ea:	7823      	ldrb	r3, [r4, #0]
 801d3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801d3ee:	d10c      	bne.n	801d40a <_vfiprintf_r+0x176>
 801d3f0:	7863      	ldrb	r3, [r4, #1]
 801d3f2:	2b2a      	cmp	r3, #42	; 0x2a
 801d3f4:	d135      	bne.n	801d462 <_vfiprintf_r+0x1ce>
 801d3f6:	9b03      	ldr	r3, [sp, #12]
 801d3f8:	1d1a      	adds	r2, r3, #4
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	9203      	str	r2, [sp, #12]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	bfb8      	it	lt
 801d402:	f04f 33ff 	movlt.w	r3, #4294967295
 801d406:	3402      	adds	r4, #2
 801d408:	9305      	str	r3, [sp, #20]
 801d40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d4f0 <_vfiprintf_r+0x25c>
 801d40e:	7821      	ldrb	r1, [r4, #0]
 801d410:	2203      	movs	r2, #3
 801d412:	4650      	mov	r0, sl
 801d414:	f7e2 febc 	bl	8000190 <memchr>
 801d418:	b140      	cbz	r0, 801d42c <_vfiprintf_r+0x198>
 801d41a:	2340      	movs	r3, #64	; 0x40
 801d41c:	eba0 000a 	sub.w	r0, r0, sl
 801d420:	fa03 f000 	lsl.w	r0, r3, r0
 801d424:	9b04      	ldr	r3, [sp, #16]
 801d426:	4303      	orrs	r3, r0
 801d428:	3401      	adds	r4, #1
 801d42a:	9304      	str	r3, [sp, #16]
 801d42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d430:	482c      	ldr	r0, [pc, #176]	; (801d4e4 <_vfiprintf_r+0x250>)
 801d432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d436:	2206      	movs	r2, #6
 801d438:	f7e2 feaa 	bl	8000190 <memchr>
 801d43c:	2800      	cmp	r0, #0
 801d43e:	d03f      	beq.n	801d4c0 <_vfiprintf_r+0x22c>
 801d440:	4b29      	ldr	r3, [pc, #164]	; (801d4e8 <_vfiprintf_r+0x254>)
 801d442:	bb1b      	cbnz	r3, 801d48c <_vfiprintf_r+0x1f8>
 801d444:	9b03      	ldr	r3, [sp, #12]
 801d446:	3307      	adds	r3, #7
 801d448:	f023 0307 	bic.w	r3, r3, #7
 801d44c:	3308      	adds	r3, #8
 801d44e:	9303      	str	r3, [sp, #12]
 801d450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d452:	443b      	add	r3, r7
 801d454:	9309      	str	r3, [sp, #36]	; 0x24
 801d456:	e767      	b.n	801d328 <_vfiprintf_r+0x94>
 801d458:	fb0c 3202 	mla	r2, ip, r2, r3
 801d45c:	460c      	mov	r4, r1
 801d45e:	2001      	movs	r0, #1
 801d460:	e7a5      	b.n	801d3ae <_vfiprintf_r+0x11a>
 801d462:	2300      	movs	r3, #0
 801d464:	3401      	adds	r4, #1
 801d466:	9305      	str	r3, [sp, #20]
 801d468:	4619      	mov	r1, r3
 801d46a:	f04f 0c0a 	mov.w	ip, #10
 801d46e:	4620      	mov	r0, r4
 801d470:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d474:	3a30      	subs	r2, #48	; 0x30
 801d476:	2a09      	cmp	r2, #9
 801d478:	d903      	bls.n	801d482 <_vfiprintf_r+0x1ee>
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d0c5      	beq.n	801d40a <_vfiprintf_r+0x176>
 801d47e:	9105      	str	r1, [sp, #20]
 801d480:	e7c3      	b.n	801d40a <_vfiprintf_r+0x176>
 801d482:	fb0c 2101 	mla	r1, ip, r1, r2
 801d486:	4604      	mov	r4, r0
 801d488:	2301      	movs	r3, #1
 801d48a:	e7f0      	b.n	801d46e <_vfiprintf_r+0x1da>
 801d48c:	ab03      	add	r3, sp, #12
 801d48e:	9300      	str	r3, [sp, #0]
 801d490:	462a      	mov	r2, r5
 801d492:	4b16      	ldr	r3, [pc, #88]	; (801d4ec <_vfiprintf_r+0x258>)
 801d494:	a904      	add	r1, sp, #16
 801d496:	4630      	mov	r0, r6
 801d498:	f7fd fc6e 	bl	801ad78 <_printf_float>
 801d49c:	4607      	mov	r7, r0
 801d49e:	1c78      	adds	r0, r7, #1
 801d4a0:	d1d6      	bne.n	801d450 <_vfiprintf_r+0x1bc>
 801d4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4a4:	07d9      	lsls	r1, r3, #31
 801d4a6:	d405      	bmi.n	801d4b4 <_vfiprintf_r+0x220>
 801d4a8:	89ab      	ldrh	r3, [r5, #12]
 801d4aa:	059a      	lsls	r2, r3, #22
 801d4ac:	d402      	bmi.n	801d4b4 <_vfiprintf_r+0x220>
 801d4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d4b0:	f7ff f9de 	bl	801c870 <__retarget_lock_release_recursive>
 801d4b4:	89ab      	ldrh	r3, [r5, #12]
 801d4b6:	065b      	lsls	r3, r3, #25
 801d4b8:	f53f af12 	bmi.w	801d2e0 <_vfiprintf_r+0x4c>
 801d4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d4be:	e711      	b.n	801d2e4 <_vfiprintf_r+0x50>
 801d4c0:	ab03      	add	r3, sp, #12
 801d4c2:	9300      	str	r3, [sp, #0]
 801d4c4:	462a      	mov	r2, r5
 801d4c6:	4b09      	ldr	r3, [pc, #36]	; (801d4ec <_vfiprintf_r+0x258>)
 801d4c8:	a904      	add	r1, sp, #16
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	f7fd fef8 	bl	801b2c0 <_printf_i>
 801d4d0:	e7e4      	b.n	801d49c <_vfiprintf_r+0x208>
 801d4d2:	bf00      	nop
 801d4d4:	0801de30 	.word	0x0801de30
 801d4d8:	0801de50 	.word	0x0801de50
 801d4dc:	0801de10 	.word	0x0801de10
 801d4e0:	0801dfcc 	.word	0x0801dfcc
 801d4e4:	0801dfd6 	.word	0x0801dfd6
 801d4e8:	0801ad79 	.word	0x0801ad79
 801d4ec:	0801d26f 	.word	0x0801d26f
 801d4f0:	0801dfd2 	.word	0x0801dfd2

0801d4f4 <_putc_r>:
 801d4f4:	b570      	push	{r4, r5, r6, lr}
 801d4f6:	460d      	mov	r5, r1
 801d4f8:	4614      	mov	r4, r2
 801d4fa:	4606      	mov	r6, r0
 801d4fc:	b118      	cbz	r0, 801d506 <_putc_r+0x12>
 801d4fe:	6983      	ldr	r3, [r0, #24]
 801d500:	b90b      	cbnz	r3, 801d506 <_putc_r+0x12>
 801d502:	f7ff f911 	bl	801c728 <__sinit>
 801d506:	4b1c      	ldr	r3, [pc, #112]	; (801d578 <_putc_r+0x84>)
 801d508:	429c      	cmp	r4, r3
 801d50a:	d124      	bne.n	801d556 <_putc_r+0x62>
 801d50c:	6874      	ldr	r4, [r6, #4]
 801d50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d510:	07d8      	lsls	r0, r3, #31
 801d512:	d405      	bmi.n	801d520 <_putc_r+0x2c>
 801d514:	89a3      	ldrh	r3, [r4, #12]
 801d516:	0599      	lsls	r1, r3, #22
 801d518:	d402      	bmi.n	801d520 <_putc_r+0x2c>
 801d51a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d51c:	f7ff f9a7 	bl	801c86e <__retarget_lock_acquire_recursive>
 801d520:	68a3      	ldr	r3, [r4, #8]
 801d522:	3b01      	subs	r3, #1
 801d524:	2b00      	cmp	r3, #0
 801d526:	60a3      	str	r3, [r4, #8]
 801d528:	da05      	bge.n	801d536 <_putc_r+0x42>
 801d52a:	69a2      	ldr	r2, [r4, #24]
 801d52c:	4293      	cmp	r3, r2
 801d52e:	db1c      	blt.n	801d56a <_putc_r+0x76>
 801d530:	b2eb      	uxtb	r3, r5
 801d532:	2b0a      	cmp	r3, #10
 801d534:	d019      	beq.n	801d56a <_putc_r+0x76>
 801d536:	6823      	ldr	r3, [r4, #0]
 801d538:	1c5a      	adds	r2, r3, #1
 801d53a:	6022      	str	r2, [r4, #0]
 801d53c:	701d      	strb	r5, [r3, #0]
 801d53e:	b2ed      	uxtb	r5, r5
 801d540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d542:	07da      	lsls	r2, r3, #31
 801d544:	d405      	bmi.n	801d552 <_putc_r+0x5e>
 801d546:	89a3      	ldrh	r3, [r4, #12]
 801d548:	059b      	lsls	r3, r3, #22
 801d54a:	d402      	bmi.n	801d552 <_putc_r+0x5e>
 801d54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d54e:	f7ff f98f 	bl	801c870 <__retarget_lock_release_recursive>
 801d552:	4628      	mov	r0, r5
 801d554:	bd70      	pop	{r4, r5, r6, pc}
 801d556:	4b09      	ldr	r3, [pc, #36]	; (801d57c <_putc_r+0x88>)
 801d558:	429c      	cmp	r4, r3
 801d55a:	d101      	bne.n	801d560 <_putc_r+0x6c>
 801d55c:	68b4      	ldr	r4, [r6, #8]
 801d55e:	e7d6      	b.n	801d50e <_putc_r+0x1a>
 801d560:	4b07      	ldr	r3, [pc, #28]	; (801d580 <_putc_r+0x8c>)
 801d562:	429c      	cmp	r4, r3
 801d564:	bf08      	it	eq
 801d566:	68f4      	ldreq	r4, [r6, #12]
 801d568:	e7d1      	b.n	801d50e <_putc_r+0x1a>
 801d56a:	4629      	mov	r1, r5
 801d56c:	4622      	mov	r2, r4
 801d56e:	4630      	mov	r0, r6
 801d570:	f7fe f884 	bl	801b67c <__swbuf_r>
 801d574:	4605      	mov	r5, r0
 801d576:	e7e3      	b.n	801d540 <_putc_r+0x4c>
 801d578:	0801de30 	.word	0x0801de30
 801d57c:	0801de50 	.word	0x0801de50
 801d580:	0801de10 	.word	0x0801de10

0801d584 <_sbrk_r>:
 801d584:	b538      	push	{r3, r4, r5, lr}
 801d586:	4d06      	ldr	r5, [pc, #24]	; (801d5a0 <_sbrk_r+0x1c>)
 801d588:	2300      	movs	r3, #0
 801d58a:	4604      	mov	r4, r0
 801d58c:	4608      	mov	r0, r1
 801d58e:	602b      	str	r3, [r5, #0]
 801d590:	f7e4 fdf2 	bl	8002178 <_sbrk>
 801d594:	1c43      	adds	r3, r0, #1
 801d596:	d102      	bne.n	801d59e <_sbrk_r+0x1a>
 801d598:	682b      	ldr	r3, [r5, #0]
 801d59a:	b103      	cbz	r3, 801d59e <_sbrk_r+0x1a>
 801d59c:	6023      	str	r3, [r4, #0]
 801d59e:	bd38      	pop	{r3, r4, r5, pc}
 801d5a0:	20008850 	.word	0x20008850

0801d5a4 <__sread>:
 801d5a4:	b510      	push	{r4, lr}
 801d5a6:	460c      	mov	r4, r1
 801d5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5ac:	f000 f8e2 	bl	801d774 <_read_r>
 801d5b0:	2800      	cmp	r0, #0
 801d5b2:	bfab      	itete	ge
 801d5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d5b6:	89a3      	ldrhlt	r3, [r4, #12]
 801d5b8:	181b      	addge	r3, r3, r0
 801d5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d5be:	bfac      	ite	ge
 801d5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d5c2:	81a3      	strhlt	r3, [r4, #12]
 801d5c4:	bd10      	pop	{r4, pc}

0801d5c6 <__swrite>:
 801d5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5ca:	461f      	mov	r7, r3
 801d5cc:	898b      	ldrh	r3, [r1, #12]
 801d5ce:	05db      	lsls	r3, r3, #23
 801d5d0:	4605      	mov	r5, r0
 801d5d2:	460c      	mov	r4, r1
 801d5d4:	4616      	mov	r6, r2
 801d5d6:	d505      	bpl.n	801d5e4 <__swrite+0x1e>
 801d5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5dc:	2302      	movs	r3, #2
 801d5de:	2200      	movs	r2, #0
 801d5e0:	f000 f898 	bl	801d714 <_lseek_r>
 801d5e4:	89a3      	ldrh	r3, [r4, #12]
 801d5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d5ee:	81a3      	strh	r3, [r4, #12]
 801d5f0:	4632      	mov	r2, r6
 801d5f2:	463b      	mov	r3, r7
 801d5f4:	4628      	mov	r0, r5
 801d5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5fa:	f000 b817 	b.w	801d62c <_write_r>

0801d5fe <__sseek>:
 801d5fe:	b510      	push	{r4, lr}
 801d600:	460c      	mov	r4, r1
 801d602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d606:	f000 f885 	bl	801d714 <_lseek_r>
 801d60a:	1c43      	adds	r3, r0, #1
 801d60c:	89a3      	ldrh	r3, [r4, #12]
 801d60e:	bf15      	itete	ne
 801d610:	6560      	strne	r0, [r4, #84]	; 0x54
 801d612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d61a:	81a3      	strheq	r3, [r4, #12]
 801d61c:	bf18      	it	ne
 801d61e:	81a3      	strhne	r3, [r4, #12]
 801d620:	bd10      	pop	{r4, pc}

0801d622 <__sclose>:
 801d622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d626:	f000 b831 	b.w	801d68c <_close_r>
	...

0801d62c <_write_r>:
 801d62c:	b538      	push	{r3, r4, r5, lr}
 801d62e:	4d07      	ldr	r5, [pc, #28]	; (801d64c <_write_r+0x20>)
 801d630:	4604      	mov	r4, r0
 801d632:	4608      	mov	r0, r1
 801d634:	4611      	mov	r1, r2
 801d636:	2200      	movs	r2, #0
 801d638:	602a      	str	r2, [r5, #0]
 801d63a:	461a      	mov	r2, r3
 801d63c:	f7e3 ffdf 	bl	80015fe <_write>
 801d640:	1c43      	adds	r3, r0, #1
 801d642:	d102      	bne.n	801d64a <_write_r+0x1e>
 801d644:	682b      	ldr	r3, [r5, #0]
 801d646:	b103      	cbz	r3, 801d64a <_write_r+0x1e>
 801d648:	6023      	str	r3, [r4, #0]
 801d64a:	bd38      	pop	{r3, r4, r5, pc}
 801d64c:	20008850 	.word	0x20008850

0801d650 <__assert_func>:
 801d650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d652:	4614      	mov	r4, r2
 801d654:	461a      	mov	r2, r3
 801d656:	4b09      	ldr	r3, [pc, #36]	; (801d67c <__assert_func+0x2c>)
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	4605      	mov	r5, r0
 801d65c:	68d8      	ldr	r0, [r3, #12]
 801d65e:	b14c      	cbz	r4, 801d674 <__assert_func+0x24>
 801d660:	4b07      	ldr	r3, [pc, #28]	; (801d680 <__assert_func+0x30>)
 801d662:	9100      	str	r1, [sp, #0]
 801d664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d668:	4906      	ldr	r1, [pc, #24]	; (801d684 <__assert_func+0x34>)
 801d66a:	462b      	mov	r3, r5
 801d66c:	f000 f81e 	bl	801d6ac <fiprintf>
 801d670:	f000 f89f 	bl	801d7b2 <abort>
 801d674:	4b04      	ldr	r3, [pc, #16]	; (801d688 <__assert_func+0x38>)
 801d676:	461c      	mov	r4, r3
 801d678:	e7f3      	b.n	801d662 <__assert_func+0x12>
 801d67a:	bf00      	nop
 801d67c:	20000078 	.word	0x20000078
 801d680:	0801dfdd 	.word	0x0801dfdd
 801d684:	0801dfea 	.word	0x0801dfea
 801d688:	0801e018 	.word	0x0801e018

0801d68c <_close_r>:
 801d68c:	b538      	push	{r3, r4, r5, lr}
 801d68e:	4d06      	ldr	r5, [pc, #24]	; (801d6a8 <_close_r+0x1c>)
 801d690:	2300      	movs	r3, #0
 801d692:	4604      	mov	r4, r0
 801d694:	4608      	mov	r0, r1
 801d696:	602b      	str	r3, [r5, #0]
 801d698:	f7e4 fd39 	bl	800210e <_close>
 801d69c:	1c43      	adds	r3, r0, #1
 801d69e:	d102      	bne.n	801d6a6 <_close_r+0x1a>
 801d6a0:	682b      	ldr	r3, [r5, #0]
 801d6a2:	b103      	cbz	r3, 801d6a6 <_close_r+0x1a>
 801d6a4:	6023      	str	r3, [r4, #0]
 801d6a6:	bd38      	pop	{r3, r4, r5, pc}
 801d6a8:	20008850 	.word	0x20008850

0801d6ac <fiprintf>:
 801d6ac:	b40e      	push	{r1, r2, r3}
 801d6ae:	b503      	push	{r0, r1, lr}
 801d6b0:	4601      	mov	r1, r0
 801d6b2:	ab03      	add	r3, sp, #12
 801d6b4:	4805      	ldr	r0, [pc, #20]	; (801d6cc <fiprintf+0x20>)
 801d6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6ba:	6800      	ldr	r0, [r0, #0]
 801d6bc:	9301      	str	r3, [sp, #4]
 801d6be:	f7ff fde9 	bl	801d294 <_vfiprintf_r>
 801d6c2:	b002      	add	sp, #8
 801d6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6c8:	b003      	add	sp, #12
 801d6ca:	4770      	bx	lr
 801d6cc:	20000078 	.word	0x20000078

0801d6d0 <_fstat_r>:
 801d6d0:	b538      	push	{r3, r4, r5, lr}
 801d6d2:	4d07      	ldr	r5, [pc, #28]	; (801d6f0 <_fstat_r+0x20>)
 801d6d4:	2300      	movs	r3, #0
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	4608      	mov	r0, r1
 801d6da:	4611      	mov	r1, r2
 801d6dc:	602b      	str	r3, [r5, #0]
 801d6de:	f7e4 fd22 	bl	8002126 <_fstat>
 801d6e2:	1c43      	adds	r3, r0, #1
 801d6e4:	d102      	bne.n	801d6ec <_fstat_r+0x1c>
 801d6e6:	682b      	ldr	r3, [r5, #0]
 801d6e8:	b103      	cbz	r3, 801d6ec <_fstat_r+0x1c>
 801d6ea:	6023      	str	r3, [r4, #0]
 801d6ec:	bd38      	pop	{r3, r4, r5, pc}
 801d6ee:	bf00      	nop
 801d6f0:	20008850 	.word	0x20008850

0801d6f4 <_isatty_r>:
 801d6f4:	b538      	push	{r3, r4, r5, lr}
 801d6f6:	4d06      	ldr	r5, [pc, #24]	; (801d710 <_isatty_r+0x1c>)
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	4604      	mov	r4, r0
 801d6fc:	4608      	mov	r0, r1
 801d6fe:	602b      	str	r3, [r5, #0]
 801d700:	f7e4 fd21 	bl	8002146 <_isatty>
 801d704:	1c43      	adds	r3, r0, #1
 801d706:	d102      	bne.n	801d70e <_isatty_r+0x1a>
 801d708:	682b      	ldr	r3, [r5, #0]
 801d70a:	b103      	cbz	r3, 801d70e <_isatty_r+0x1a>
 801d70c:	6023      	str	r3, [r4, #0]
 801d70e:	bd38      	pop	{r3, r4, r5, pc}
 801d710:	20008850 	.word	0x20008850

0801d714 <_lseek_r>:
 801d714:	b538      	push	{r3, r4, r5, lr}
 801d716:	4d07      	ldr	r5, [pc, #28]	; (801d734 <_lseek_r+0x20>)
 801d718:	4604      	mov	r4, r0
 801d71a:	4608      	mov	r0, r1
 801d71c:	4611      	mov	r1, r2
 801d71e:	2200      	movs	r2, #0
 801d720:	602a      	str	r2, [r5, #0]
 801d722:	461a      	mov	r2, r3
 801d724:	f7e4 fd1a 	bl	800215c <_lseek>
 801d728:	1c43      	adds	r3, r0, #1
 801d72a:	d102      	bne.n	801d732 <_lseek_r+0x1e>
 801d72c:	682b      	ldr	r3, [r5, #0]
 801d72e:	b103      	cbz	r3, 801d732 <_lseek_r+0x1e>
 801d730:	6023      	str	r3, [r4, #0]
 801d732:	bd38      	pop	{r3, r4, r5, pc}
 801d734:	20008850 	.word	0x20008850

0801d738 <__ascii_mbtowc>:
 801d738:	b082      	sub	sp, #8
 801d73a:	b901      	cbnz	r1, 801d73e <__ascii_mbtowc+0x6>
 801d73c:	a901      	add	r1, sp, #4
 801d73e:	b142      	cbz	r2, 801d752 <__ascii_mbtowc+0x1a>
 801d740:	b14b      	cbz	r3, 801d756 <__ascii_mbtowc+0x1e>
 801d742:	7813      	ldrb	r3, [r2, #0]
 801d744:	600b      	str	r3, [r1, #0]
 801d746:	7812      	ldrb	r2, [r2, #0]
 801d748:	1e10      	subs	r0, r2, #0
 801d74a:	bf18      	it	ne
 801d74c:	2001      	movne	r0, #1
 801d74e:	b002      	add	sp, #8
 801d750:	4770      	bx	lr
 801d752:	4610      	mov	r0, r2
 801d754:	e7fb      	b.n	801d74e <__ascii_mbtowc+0x16>
 801d756:	f06f 0001 	mvn.w	r0, #1
 801d75a:	e7f8      	b.n	801d74e <__ascii_mbtowc+0x16>

0801d75c <__malloc_lock>:
 801d75c:	4801      	ldr	r0, [pc, #4]	; (801d764 <__malloc_lock+0x8>)
 801d75e:	f7ff b886 	b.w	801c86e <__retarget_lock_acquire_recursive>
 801d762:	bf00      	nop
 801d764:	20008844 	.word	0x20008844

0801d768 <__malloc_unlock>:
 801d768:	4801      	ldr	r0, [pc, #4]	; (801d770 <__malloc_unlock+0x8>)
 801d76a:	f7ff b881 	b.w	801c870 <__retarget_lock_release_recursive>
 801d76e:	bf00      	nop
 801d770:	20008844 	.word	0x20008844

0801d774 <_read_r>:
 801d774:	b538      	push	{r3, r4, r5, lr}
 801d776:	4d07      	ldr	r5, [pc, #28]	; (801d794 <_read_r+0x20>)
 801d778:	4604      	mov	r4, r0
 801d77a:	4608      	mov	r0, r1
 801d77c:	4611      	mov	r1, r2
 801d77e:	2200      	movs	r2, #0
 801d780:	602a      	str	r2, [r5, #0]
 801d782:	461a      	mov	r2, r3
 801d784:	f7e4 fca6 	bl	80020d4 <_read>
 801d788:	1c43      	adds	r3, r0, #1
 801d78a:	d102      	bne.n	801d792 <_read_r+0x1e>
 801d78c:	682b      	ldr	r3, [r5, #0]
 801d78e:	b103      	cbz	r3, 801d792 <_read_r+0x1e>
 801d790:	6023      	str	r3, [r4, #0]
 801d792:	bd38      	pop	{r3, r4, r5, pc}
 801d794:	20008850 	.word	0x20008850

0801d798 <__ascii_wctomb>:
 801d798:	b149      	cbz	r1, 801d7ae <__ascii_wctomb+0x16>
 801d79a:	2aff      	cmp	r2, #255	; 0xff
 801d79c:	bf85      	ittet	hi
 801d79e:	238a      	movhi	r3, #138	; 0x8a
 801d7a0:	6003      	strhi	r3, [r0, #0]
 801d7a2:	700a      	strbls	r2, [r1, #0]
 801d7a4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d7a8:	bf98      	it	ls
 801d7aa:	2001      	movls	r0, #1
 801d7ac:	4770      	bx	lr
 801d7ae:	4608      	mov	r0, r1
 801d7b0:	4770      	bx	lr

0801d7b2 <abort>:
 801d7b2:	b508      	push	{r3, lr}
 801d7b4:	2006      	movs	r0, #6
 801d7b6:	f000 f82b 	bl	801d810 <raise>
 801d7ba:	2001      	movs	r0, #1
 801d7bc:	f7e4 fc80 	bl	80020c0 <_exit>

0801d7c0 <_raise_r>:
 801d7c0:	291f      	cmp	r1, #31
 801d7c2:	b538      	push	{r3, r4, r5, lr}
 801d7c4:	4604      	mov	r4, r0
 801d7c6:	460d      	mov	r5, r1
 801d7c8:	d904      	bls.n	801d7d4 <_raise_r+0x14>
 801d7ca:	2316      	movs	r3, #22
 801d7cc:	6003      	str	r3, [r0, #0]
 801d7ce:	f04f 30ff 	mov.w	r0, #4294967295
 801d7d2:	bd38      	pop	{r3, r4, r5, pc}
 801d7d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d7d6:	b112      	cbz	r2, 801d7de <_raise_r+0x1e>
 801d7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d7dc:	b94b      	cbnz	r3, 801d7f2 <_raise_r+0x32>
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f000 f830 	bl	801d844 <_getpid_r>
 801d7e4:	462a      	mov	r2, r5
 801d7e6:	4601      	mov	r1, r0
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d7ee:	f000 b817 	b.w	801d820 <_kill_r>
 801d7f2:	2b01      	cmp	r3, #1
 801d7f4:	d00a      	beq.n	801d80c <_raise_r+0x4c>
 801d7f6:	1c59      	adds	r1, r3, #1
 801d7f8:	d103      	bne.n	801d802 <_raise_r+0x42>
 801d7fa:	2316      	movs	r3, #22
 801d7fc:	6003      	str	r3, [r0, #0]
 801d7fe:	2001      	movs	r0, #1
 801d800:	e7e7      	b.n	801d7d2 <_raise_r+0x12>
 801d802:	2400      	movs	r4, #0
 801d804:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d808:	4628      	mov	r0, r5
 801d80a:	4798      	blx	r3
 801d80c:	2000      	movs	r0, #0
 801d80e:	e7e0      	b.n	801d7d2 <_raise_r+0x12>

0801d810 <raise>:
 801d810:	4b02      	ldr	r3, [pc, #8]	; (801d81c <raise+0xc>)
 801d812:	4601      	mov	r1, r0
 801d814:	6818      	ldr	r0, [r3, #0]
 801d816:	f7ff bfd3 	b.w	801d7c0 <_raise_r>
 801d81a:	bf00      	nop
 801d81c:	20000078 	.word	0x20000078

0801d820 <_kill_r>:
 801d820:	b538      	push	{r3, r4, r5, lr}
 801d822:	4d07      	ldr	r5, [pc, #28]	; (801d840 <_kill_r+0x20>)
 801d824:	2300      	movs	r3, #0
 801d826:	4604      	mov	r4, r0
 801d828:	4608      	mov	r0, r1
 801d82a:	4611      	mov	r1, r2
 801d82c:	602b      	str	r3, [r5, #0]
 801d82e:	f7e4 fc37 	bl	80020a0 <_kill>
 801d832:	1c43      	adds	r3, r0, #1
 801d834:	d102      	bne.n	801d83c <_kill_r+0x1c>
 801d836:	682b      	ldr	r3, [r5, #0]
 801d838:	b103      	cbz	r3, 801d83c <_kill_r+0x1c>
 801d83a:	6023      	str	r3, [r4, #0]
 801d83c:	bd38      	pop	{r3, r4, r5, pc}
 801d83e:	bf00      	nop
 801d840:	20008850 	.word	0x20008850

0801d844 <_getpid_r>:
 801d844:	f7e4 bc24 	b.w	8002090 <_getpid>

0801d848 <_init>:
 801d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d84a:	bf00      	nop
 801d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d84e:	bc08      	pop	{r3}
 801d850:	469e      	mov	lr, r3
 801d852:	4770      	bx	lr

0801d854 <_fini>:
 801d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d856:	bf00      	nop
 801d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d85a:	bc08      	pop	{r3}
 801d85c:	469e      	mov	lr, r3
 801d85e:	4770      	bx	lr
