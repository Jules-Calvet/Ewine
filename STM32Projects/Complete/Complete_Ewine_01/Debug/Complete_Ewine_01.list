
Complete_Ewine_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0801a8e0  0801a8e0  0002a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac74  0801ac74  0002ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ac7c  0801ac7c  0002ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ac80  0801ac80  0002ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000008  0801ac84  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008584  200000e0  0801ad58  000300e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20008664  0801ad58  00038664  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064d45  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d42  00000000  00000000  00094e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003300  00000000  00000000  0009bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003008  00000000  00000000  0009ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f572  00000000  00000000  000a1ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b610  00000000  00000000  000d1412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011a9cf  00000000  00000000  0010ca22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002273f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e474  00000000  00000000  00227444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a8c8 	.word	0x0801a8c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0801a8c8 	.word	0x0801a8c8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 80005c8:	f000 f82e 	bl	8000628 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 80005cc:	f000 f842 	bl	8000654 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 80005d0:	f000 f856 	bl	8000680 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */
  printf("  start TOF Center  \n");
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <VL_TOF_Process+0x38>)
 80005de:	f019 f999 	bl	8019914 <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 80005e2:	f000 f863 	bl	80006ac <VL_53L1A2_SimpleRanging_Process_C>
  printf("  end TOF Center  \n");
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <VL_TOF_Process+0x3c>)
 80005e8:	f019 f994 	bl	8019914 <puts>

  printf("  start TOF Right  \n");
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <VL_TOF_Process+0x40>)
 80005ee:	f019 f991 	bl	8019914 <puts>
  VL_53L1A2_SimpleRanging_Process_R();
 80005f2:	f000 f8b9 	bl	8000768 <VL_53L1A2_SimpleRanging_Process_R>
  printf("  end TOF Right  \n");
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <VL_TOF_Process+0x44>)
 80005f8:	f019 f98c 	bl	8019914 <puts>

  printf("  start TOF Left  \n");
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <VL_TOF_Process+0x48>)
 80005fe:	f019 f989 	bl	8019914 <puts>
  VL_53L1A2_SimpleRanging_Process_L();
 8000602:	f000 f90f 	bl	8000824 <VL_53L1A2_SimpleRanging_Process_L>
  printf("  end TOF Left  \n");
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <VL_TOF_Process+0x4c>)
 8000608:	f019 f984 	bl	8019914 <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	0801a8e0 	.word	0x0801a8e0
 8000614:	0801a8f8 	.word	0x0801a8f8
 8000618:	0801a90c 	.word	0x0801a90c
 800061c:	0801a920 	.word	0x0801a920
 8000620:	0801a934 	.word	0x0801a934
 8000624:	0801a948 	.word	0x0801a948

08000628 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f9f5 	bl	8001a1c <VL53L1A2_RANGING_SENSOR_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	4a05      	ldr	r2, [pc, #20]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x24>)
 8000636:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x24>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <VL_53L1A2_SimpleRanging_Init_C+0x28>)
 8000642:	f019 f967 	bl	8019914 <puts>
    while(1);
 8000646:	e7fe      	b.n	8000646 <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000138 	.word	0x20000138
 8000650:	0801a95c 	.word	0x0801a95c

08000654 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 8000658:	2002      	movs	r0, #2
 800065a:	f001 f9df 	bl	8001a1c <VL53L1A2_RANGING_SENSOR_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <VL_53L1A2_SimpleRanging_Init_R+0x24>)
 8000662:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <VL_53L1A2_SimpleRanging_Init_R+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <VL_53L1A2_SimpleRanging_Init_R+0x28>)
 800066e:	f019 f951 	bl	8019914 <puts>
    while(1);
 8000672:	e7fe      	b.n	8000672 <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000013c 	.word	0x2000013c
 800067c:	0801a95c 	.word	0x0801a95c

08000680 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 8000684:	2000      	movs	r0, #0
 8000686:	f001 f9c9 	bl	8001a1c <VL53L1A2_RANGING_SENSOR_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <VL_53L1A2_SimpleRanging_Init_L+0x24>)
 800068e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <VL_53L1A2_SimpleRanging_Init_L+0x24>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <VL_53L1A2_SimpleRanging_Init_L+0x28>)
 800069a:	f019 f93b 	bl	8019914 <puts>
    while(1);
 800069e:	e7fe      	b.n	800069e <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000140 	.word	0x20000140
 80006a8:	0801a95c 	.word	0x0801a95c

080006ac <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 80006b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006b6:	4619      	mov	r1, r3
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 f9d5 	bl	8001a68 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006c6:	221e      	movs	r2, #30
 80006c8:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 80006dc:	491e      	ldr	r1, [pc, #120]	; (8000758 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f9ea 	bl	8001ab8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80006e4:	2101      	movs	r1, #1
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 fa36 	bl	8001b58 <VL53L1A2_RANGING_SENSOR_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1b      	ldr	r2, [pc, #108]	; (800075c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80006f0:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 80006fc:	f019 f90a 	bl	8019914 <puts>
    while(1);
 8000700:	e7fe      	b.n	8000700 <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 8000702:	2301      	movs	r3, #1
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000706:	e01a      	b.n	800073e <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	2001      	movs	r0, #1
 800070e:	f001 f9fb 	bl	8001b08 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8000712:	4603      	mov	r3, r0
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000716:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d107      	bne.n	8000730 <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 8000720:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8000724:	f019 f85a 	bl	80197dc <iprintf>
      print_result(&Result_Center);
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8da 	bl	80008e4 <print_result>
    }

    HAL_Delay(1500);
 8000730:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000734:	f014 ff80 	bl	8015638 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8000738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800073a:	3301      	adds	r3, #1
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800073e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000740:	2b05      	cmp	r3, #5
 8000742:	dde1      	ble.n	8000708 <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8000744:	2001      	movs	r0, #1
 8000746:	f001 fa2f 	bl	8001ba8 <VL53L1A2_RANGING_SENSOR_Stop>
 800074a:	4603      	mov	r3, r0
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000fc 	.word	0x200000fc
 800075c:	20000138 	.word	0x20000138
 8000760:	0801a980 	.word	0x0801a980
 8000764:	0801a9ac 	.word	0x0801a9ac

08000768 <VL_53L1A2_SimpleRanging_Process_R>:

static void VL_53L1A2_SimpleRanging_Process_R(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  uint32_t Id_Right;
  RANGING_SENSOR_Result_t Result_Right;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_RIGHT, &Id_Right);
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	4619      	mov	r1, r3
 8000774:	2002      	movs	r0, #2
 8000776:	f001 f977 	bl	8001a68 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileRight.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
  ProfileRight.TimingBudget = TIMING_BUDGET;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 8000782:	221e      	movs	r2, #30
 8000784:	605a      	str	r2, [r3, #4]
  ProfileRight.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  ProfileRight.EnableAmbient = 0; // Enable: 1, Disable: 0
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  ProfileRight.EnableSignal = 0; // Enable: 1, Disable: 0
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_RIGHT, &ProfileRight);
 8000798:	491e      	ldr	r1, [pc, #120]	; (8000814 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 800079a:	2002      	movs	r0, #2
 800079c:	f001 f98c 	bl	8001ab8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusRight = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_RIGHT, RS_MODE_BLOCKING_CONTINUOUS);
 80007a0:	2101      	movs	r1, #1
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 f9d8 	bl	8001b58 <VL53L1A2_RANGING_SENSOR_Start>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007ac:	6013      	str	r3, [r2, #0]

  if (statusRight != BSP_ERROR_NONE)
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <VL_53L1A2_SimpleRanging_Process_R+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Right failed\n");
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <VL_53L1A2_SimpleRanging_Process_R+0xb4>)
 80007b8:	f019 f8ac 	bl	8019914 <puts>
    while(1);
 80007bc:	e7fe      	b.n	80007bc <VL_53L1A2_SimpleRanging_Process_R+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 80007be:	2301      	movs	r3, #1
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007c2:	e019      	b.n	80007f8 <VL_53L1A2_SimpleRanging_Process_R+0x90>
    /* repetition mode */
    statusRight = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_RIGHT, &Result_Right);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	2002      	movs	r0, #2
 80007ca:	f001 f99d 	bl	8001b08 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a11      	ldr	r2, [pc, #68]	; (8000818 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007d2:	6013      	str	r3, [r2, #0]

    if (statusRight == BSP_ERROR_NONE)
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d106      	bne.n	80007ea <VL_53L1A2_SimpleRanging_Process_R+0x82>
    {
      printf("\n RIGHT \n");
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <VL_53L1A2_SimpleRanging_Process_R+0xb8>)
 80007de:	f019 f899 	bl	8019914 <puts>
      print_result(&Result_Right);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f87d 	bl	80008e4 <print_result>
    }

    HAL_Delay(1500);
 80007ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80007ee:	f014 ff23 	bl	8015638 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 80007f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007f4:	3301      	adds	r3, #1
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	dde2      	ble.n	80007c4 <VL_53L1A2_SimpleRanging_Process_R+0x5c>

  }
  statusRight = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_RIGHT);
 80007fe:	2002      	movs	r0, #2
 8000800:	f001 f9d2 	bl	8001ba8 <VL53L1A2_RANGING_SENSOR_Stop>
 8000804:	4603      	mov	r3, r0
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8000808:	6013      	str	r3, [r2, #0]
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000110 	.word	0x20000110
 8000818:	2000013c 	.word	0x2000013c
 800081c:	0801a9bc 	.word	0x0801a9bc
 8000820:	0801a9e8 	.word	0x0801a9e8

08000824 <VL_53L1A2_SimpleRanging_Process_L>:
static void VL_53L1A2_SimpleRanging_Process_L(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  uint32_t Id_Left;
  RANGING_SENSOR_Result_t Result_Left;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_LEFT, &Id_Left);
 800082a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800082e:	4619      	mov	r1, r3
 8000830:	2000      	movs	r0, #0
 8000832:	f001 f919 	bl	8001a68 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileLeft.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
  ProfileLeft.TimingBudget = TIMING_BUDGET;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800083e:	221e      	movs	r2, #30
 8000840:	605a      	str	r2, [r3, #4]
  ProfileLeft.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  ProfileLeft.EnableAmbient = 0; // Enable: 1, Disable: 0
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  ProfileLeft.EnableSignal = 0; // Enable: 1, Disable: 0
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_LEFT, &ProfileLeft);
 8000854:	491e      	ldr	r1, [pc, #120]	; (80008d0 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000856:	2000      	movs	r0, #0
 8000858:	f001 f92e 	bl	8001ab8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusLeft = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_LEFT, RS_MODE_BLOCKING_CONTINUOUS);
 800085c:	2101      	movs	r1, #1
 800085e:	2000      	movs	r0, #0
 8000860:	f001 f97a 	bl	8001b58 <VL53L1A2_RANGING_SENSOR_Start>
 8000864:	4603      	mov	r3, r0
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 8000868:	6013      	str	r3, [r2, #0]

  if (statusLeft != BSP_ERROR_NONE)
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d003      	beq.n	800087a <VL_53L1A2_SimpleRanging_Process_L+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Left failed\n");
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <VL_53L1A2_SimpleRanging_Process_L+0xb4>)
 8000874:	f019 f84e 	bl	8019914 <puts>
    while(1);
 8000878:	e7fe      	b.n	8000878 <VL_53L1A2_SimpleRanging_Process_L+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800087a:	2301      	movs	r3, #1
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800087e:	e01a      	b.n	80008b6 <VL_53L1A2_SimpleRanging_Process_L+0x92>
    /* repetition mode */
    statusRight = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_LEFT, &Result_Left);
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	2000      	movs	r0, #0
 8000886:	f001 f93f 	bl	8001b08 <VL53L1A2_RANGING_SENSOR_GetDistance>
 800088a:	4603      	mov	r3, r0
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <VL_53L1A2_SimpleRanging_Process_L+0xb8>)
 800088e:	6013      	str	r3, [r2, #0]

    if (statusLeft == BSP_ERROR_NONE)
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <VL_53L1A2_SimpleRanging_Process_L+0x84>
    {
      printf("\n LEFT %d\n",i);
 8000898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <VL_53L1A2_SimpleRanging_Process_L+0xbc>)
 800089c:	f018 ff9e 	bl	80197dc <iprintf>
      print_result(&Result_Left);
 80008a0:	463b      	mov	r3, r7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f81e 	bl	80008e4 <print_result>
    }

    HAL_Delay(1500);
 80008a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008ac:	f014 fec4 	bl	8015638 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 80008b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008b2:	3301      	adds	r3, #1
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	dde1      	ble.n	8000880 <VL_53L1A2_SimpleRanging_Process_L+0x5c>

  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
 80008bc:	2000      	movs	r0, #0
 80008be:	f001 f973 	bl	8001ba8 <VL53L1A2_RANGING_SENSOR_Stop>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000124 	.word	0x20000124
 80008d4:	20000140 	.word	0x20000140
 80008d8:	0801a9f4 	.word	0x0801a9f4
 80008dc:	2000013c 	.word	0x2000013c
 80008e0:	0801aa20 	.word	0x0801aa20

080008e4 <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e03f      	b.n	8000972 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	4613      	mov	r3, r2
 80008f8:	011b      	lsls	r3, r3, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	3304      	adds	r3, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	4820      	ldr	r0, [pc, #128]	; (8000988 <print_result+0xa4>)
 8000908:	f018 ff68 	bl	80197dc <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800090c:	2300      	movs	r3, #0
 800090e:	73bb      	strb	r3, [r7, #14]
 8000910:	e020      	b.n	8000954 <print_result+0x70>
    {
      printf("\n |---> ");
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <print_result+0xa8>)
 8000914:	f018 ff62 	bl	80197dc <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	7bb8      	ldrb	r0, [r7, #14]
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	4413      	add	r3, r2
 8000924:	4403      	add	r3, r0
 8000926:	3304      	adds	r3, #4
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 800092e:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	7bb8      	ldrb	r0, [r7, #14]
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	4413      	add	r3, r2
 800093c:	4403      	add	r3, r0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8000944:	461a      	mov	r2, r3
 8000946:	4621      	mov	r1, r4
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <print_result+0xac>)
 800094a:	f018 ff47 	bl	80197dc <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	3301      	adds	r3, #1
 8000952:	73bb      	strb	r3, [r7, #14]
 8000954:	7bb9      	ldrb	r1, [r7, #14]
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	4613      	mov	r3, r2
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4403      	add	r3, r0
 8000964:	3304      	adds	r3, #4
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4299      	cmp	r1, r3
 800096a:	d3d2      	bcc.n	8000912 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	3301      	adds	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0bc      	beq.n	80008f2 <print_result+0xe>
    }
  }
  printf ("\n");
 8000978:	200a      	movs	r0, #10
 800097a:	f018 ff47 	bl	801980c <putchar>
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	0801aa2c 	.word	0x0801aa2c
 800098c:	0801aa3c 	.word	0x0801aa3c
 8000990:	0801aa48 	.word	0x0801aa48

08000994 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800099c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b8:	68fb      	ldr	r3, [r7, #12]
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff ffd9 	bl	8000994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff ffd6 	bl	8000994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ffd3 	bl	8000994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2008      	movs	r0, #8
 80009f0:	f7ff ffd0 	bl	8000994 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2123      	movs	r1, #35	; 0x23
 80009f8:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x84>)
 80009fa:	f015 f987 	bl	8015d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fe:	2310      	movs	r3, #16
 8000a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4810      	ldr	r0, [pc, #64]	; (8000a50 <MX_GPIO_Init+0x88>)
 8000a10:	f014 ff16 	bl	8015840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a14:	2323      	movs	r3, #35	; 0x23
 8000a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_GPIO_Init+0x84>)
 8000a2a:	f014 ff09 	bl	8015840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_GPIO_Init+0x8c>)
 8000a40:	f014 fefe 	bl	8015840 <HAL_GPIO_Init>

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	48000800 	.word	0x48000800
 8000a54:	48000c00 	.word	0x48000c00

08000a58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d013      	beq.n	8000a98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a80:	e000      	b.n	8000a84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f9      	beq.n	8000a82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ab6:	f023 0218 	bic.w	r2, r3, #24
 8000aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e009      	b.n	8000af8 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ffb3 	bl	8000a58 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf1      	blt.n	8000ae4 <_write+0x12>
}
return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f014 fd46 	bl	80155a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f81c 	bl	8000b50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b18:	f000 f890 	bl	8000c3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f7ff ff54 	bl	80009c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b20:	f000 fc18 	bl	8001354 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000b24:	f000 fcdc 	bl	80014e0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("  init  \n");
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <main+0x38>)
 8000b2a:	f018 fef3 	bl	8019914 <puts>
  VL_TOF_Init();
 8000b2e:	f7ff fd49 	bl	80005c4 <VL_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("  start TOF Test  \n");
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <main+0x3c>)
 8000b34:	f018 feee 	bl	8019914 <puts>
	  VL_TOF_Process();
 8000b38:	f7ff fd4e 	bl	80005d8 <VL_TOF_Process>
	  printf("  end TOF Test  \n");
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <main+0x40>)
 8000b3e:	f018 fee9 	bl	8019914 <puts>
	  printf("  start TOF Test  \n");
 8000b42:	e7f6      	b.n	8000b32 <main+0x26>
 8000b44:	0801aa6c 	.word	0x0801aa6c
 8000b48:	0801aa78 	.word	0x0801aa78
 8000b4c:	0801aa8c 	.word	0x0801aa8c

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09a      	sub	sp, #104	; 0x68
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	2248      	movs	r2, #72	; 0x48
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f018 fe34 	bl	80197cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b84:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f023 0303 	bic.w	r3, r3, #3
 8000b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b9a:	f015 ffb7 	bl	8016b0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff81 	bl	8000aa6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <SystemClock_Config+0xe8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <SystemClock_Config+0xe8>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <SystemClock_Config+0xe8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000bc0:	2327      	movs	r3, #39	; 0x27
 8000bc2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f016 fb2d 	bl	801724c <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bf8:	f000 f850 	bl	8000c9c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000bfc:	236f      	movs	r3, #111	; 0x6f
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f016 fe89 	bl	8017934 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c28:	f000 f838 	bl	8000c9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c2c:	f017 fc76 	bl	801851c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c30:	bf00      	nop
 8000c32:	3768      	adds	r7, #104	; 0x68
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58000400 	.word	0x58000400

08000c3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2250      	movs	r2, #80	; 0x50
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f018 fdbf 	bl	80197cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f017 fae6 	bl	8018230 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c6a:	f000 f817 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	; 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f014 fca9 	bl	80155e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40014800 	.word	0x40014800

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>

08000ca6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	201a      	movs	r0, #26
 8000cfe:	f014 fd77 	bl	80157f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d02:	201a      	movs	r0, #26
 8000d04:	f014 fd8e 	bl	8015824 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000d08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d0c:	f7ff ffd2 	bl	8000cb4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d10:	f107 0208 	add.w	r2, r7, #8
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f016 fff6 	bl	8017d0c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d20:	f016 ffde 	bl	8017ce0 <HAL_RCC_GetPCLK2Freq>
 8000d24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <HAL_InitTick+0x8c>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	3b01      	subs	r3, #1
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_InitTick+0x90>)
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_InitTick+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_InitTick+0x90>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_InitTick+0x90>)
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_InitTick+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_InitTick+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <HAL_InitTick+0x90>)
 8000d56:	f017 fcf8 	bl	801874a <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d104      	bne.n	8000d6a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_InitTick+0x90>)
 8000d62:	f017 fd53 	bl	801880c <HAL_TIM_Base_Start_IT>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	20000144 	.word	0x20000144
 8000d7c:	40014800 	.word	0x40014800

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000dde:	f017 fd63 	bl	80188a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000144 	.word	0x20000144

08000dec <LL_AHB2_GRP1_EnableClock>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_APB1_GRP1_EnableClock>:
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_APB1_GRP1_DisableClock>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e66:	4013      	ands	r3, r2
 8000e68:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <BSP_I2C1_Init+0x70>)
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <BSP_I2C1_Init+0x74>)
 8000e86:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <BSP_I2C1_Init+0x78>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <BSP_I2C1_Init+0x78>)
 8000e90:	600a      	str	r2, [r1, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d122      	bne.n	8000edc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <BSP_I2C1_Init+0x70>)
 8000e98:	f015 fa0c 	bl	80162b4 <HAL_I2C_GetState>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d11c      	bne.n	8000edc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <BSP_I2C1_Init+0x70>)
 8000ea4:	f000 f8ee 	bl	8001084 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <BSP_I2C1_Init+0x70>)
 8000eb0:	f000 f8a4 	bl	8000ffc <MX_I2C1_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000eba:	f06f 0307 	mvn.w	r3, #7
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	e00c      	b.n	8000edc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <BSP_I2C1_Init+0x70>)
 8000ec6:	f015 fc87 	bl	80167d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ed0:	f06f 0307 	mvn.w	r3, #7
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	e001      	b.n	8000edc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000190 	.word	0x20000190
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	200001e4 	.word	0x200001e4

08000ef4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <BSP_I2C1_DeInit+0x48>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d014      	beq.n	8000f30 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <BSP_I2C1_DeInit+0x48>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <BSP_I2C1_DeInit+0x48>)
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <BSP_I2C1_DeInit+0x48>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <BSP_I2C1_DeInit+0x4c>)
 8000f1a:	f000 f8f7 	bl	800110c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <BSP_I2C1_DeInit+0x4c>)
 8000f20:	f014 ff9b 	bl	8015e5a <HAL_I2C_DeInit>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f2a:	f06f 0307 	mvn.w	r3, #7
 8000f2e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001e4 	.word	0x200001e4
 8000f40:	20000190 	.word	0x20000190

08000f44 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	88f9      	ldrh	r1, [r7, #6]
 8000f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f60:	9200      	str	r2, [sp, #0]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <BSP_I2C1_Send+0x50>)
 8000f66:	f014 ffbb 	bl	8015ee0 <HAL_I2C_Master_Transmit>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <BSP_I2C1_Send+0x50>)
 8000f72:	f015 f9ad 	bl	80162d0 <HAL_I2C_GetError>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d003      	beq.n	8000f84 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f7c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e002      	b.n	8000f8a <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f84:	f06f 0303 	mvn.w	r3, #3
 8000f88:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000190 	.word	0x20000190

08000f98 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	80fb      	strh	r3, [r7, #6]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	88f9      	ldrh	r1, [r7, #6]
 8000fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb4:	9200      	str	r2, [sp, #0]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <BSP_I2C1_Recv+0x50>)
 8000fba:	f015 f885 	bl	80160c8 <HAL_I2C_Master_Receive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00c      	beq.n	8000fde <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <BSP_I2C1_Recv+0x50>)
 8000fc6:	f015 f983 	bl	80162d0 <HAL_I2C_GetError>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d003      	beq.n	8000fd8 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fd0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e002      	b.n	8000fde <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000fd8:	f06f 0303 	mvn.w	r3, #3
 8000fdc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000190 	.word	0x20000190

08000fec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000ff0:	f014 fb0a 	bl	8015608 <HAL_GetTick>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <MX_I2C1_Init+0x80>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <MX_I2C1_Init+0x84>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f014 fe7c 	bl	8015d3c <HAL_I2C_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f015 fbc1 	bl	80167d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f015 fc03 	bl	801686e <HAL_I2CEx_ConfigDigitalFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005400 	.word	0x40005400
 8001080:	00707cbb 	.word	0x00707cbb

08001084 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09c      	sub	sp, #112	; 0x70
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2250      	movs	r2, #80	; 0x50
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f018 fb99 	bl	80197cc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800109a:	2304      	movs	r3, #4
 800109c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800109e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4618      	mov	r0, r3
 80010aa:	f017 f8c1 	bl	8018230 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff fe9c 	bl	8000dec <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80010b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80010c6:	2304      	movs	r3, #4
 80010c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80010ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ce:	4619      	mov	r1, r3
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <I2C1_MspInit+0x84>)
 80010d2:	f014 fbb5 	bl	8015840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80010d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80010e8:	2304      	movs	r3, #4
 80010ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80010ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <I2C1_MspInit+0x84>)
 80010f4:	f014 fba4 	bl	8015840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80010fc:	f7ff fe8f 	bl	8000e1e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001100:	bf00      	nop
 8001102:	3770      	adds	r7, #112	; 0x70
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	48000400 	.word	0x48000400

0800110c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001114:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001118:	f7ff fe9a 	bl	8000e50 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <I2C1_MspDeInit+0x2c>)
 8001122:	f014 fcfd 	bl	8015b20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <I2C1_MspDeInit+0x2c>)
 800112c:	f014 fcf8 	bl	8015b20 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	48000400 	.word	0x48000400

0800113c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e00a      	b.n	8001164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114e:	f3af 8000 	nop.w
 8001152:	4601      	mov	r1, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf0      	blt.n	800114e <_read+0x12>
  }

  return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	605a      	str	r2, [r3, #4]
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f018 faa4 	bl	801975c <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20030000 	.word	0x20030000
 8001240:	00000400 	.word	0x00000400
 8001244:	200001e8 	.word	0x200001e8
 8001248:	20008668 	.word	0x20008668

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <SystemInit+0x98>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <SystemInit+0x98>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001278:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <SystemInit+0x9c>)
 8001286:	4013      	ands	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001296:	f023 0305 	bic.w	r3, r3, #5
 800129a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <SystemInit+0xa0>)
 80012b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <SystemInit+0xa0>)
 80012c0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	faf6fefb 	.word	0xfaf6fefb
 80012ec:	22041000 	.word	0x22041000

080012f0 <LL_AHB2_GRP1_EnableClock>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4313      	orrs	r3, r2
 8001306:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_APB2_GRP1_EnableClock>:
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <MX_USART1_UART_Init+0x98>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800136c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 800137c:	220c      	movs	r2, #12
 800137e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 80013a0:	f017 fc6c 	bl	8018c7c <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013aa:	f7ff fc77 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 80013b2:	f018 f8cc 	bl	801954e <HAL_UARTEx_SetTxFifoThreshold>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80013bc:	f7ff fc6e 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 80013c4:	f018 f901 	bl	80195ca <HAL_UARTEx_SetRxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f7ff fc65 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART1_UART_Init+0x94>)
 80013d4:	f018 f882 	bl	80194dc <HAL_UARTEx_DisableFifoMode>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80013de:	f7ff fc5d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001ec 	.word	0x200001ec
 80013ec:	40013800 	.word	0x40013800

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	; 0x70
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2250      	movs	r2, #80	; 0x50
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f018 f9db 	bl	80197cc <memset>
  if(uartHandle->Instance==USART1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_UART_MspInit+0x84>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d124      	bne.n	800146a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4618      	mov	r0, r3
 800142e:	f016 feff 	bl	8018230 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001438:	f7ff fc30 	bl	8000c9c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001440:	f7ff ff6f 	bl	8001322 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff ff53 	bl	80012f0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800144a:	23c0      	movs	r3, #192	; 0xc0
 800144c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145a:	2307      	movs	r3, #7
 800145c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001462:	4619      	mov	r1, r3
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001466:	f014 f9eb 	bl	8015840 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3770      	adds	r7, #112	; 0x70
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40013800 	.word	0x40013800
 8001478:	48000400 	.word	0x48000400

0800147c <LL_AHB2_GRP1_EnableClock>:
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_APB1_GRP1_EnableClock>:
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USB_PCD_Init+0x48>)
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <MX_USB_PCD_Init+0x4c>)
 80014e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USB_PCD_Init+0x48>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_USB_PCD_Init+0x48>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USB_PCD_Init+0x48>)
 80014f8:	2202      	movs	r2, #2
 80014fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_USB_PCD_Init+0x48>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USB_PCD_Init+0x48>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_USB_PCD_Init+0x48>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USB_PCD_Init+0x48>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_USB_PCD_Init+0x48>)
 8001516:	f015 f9f6 	bl	8016906 <HAL_PCD_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001520:	f7ff fbbc 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000280 	.word	0x20000280
 800152c:	40006800 	.word	0x40006800

08001530 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09c      	sub	sp, #112	; 0x70
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2250      	movs	r2, #80	; 0x50
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f018 f93b 	bl	80197cc <memset>
  if(pcdHandle->Instance==USB)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_PCD_MspInit+0xa8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d136      	bne.n	80015ce <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001566:	2318      	movs	r3, #24
 8001568:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800156a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001574:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001576:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800157a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800157c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001580:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001582:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4618      	mov	r0, r3
 800158e:	f016 fe4f 	bl	8018230 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001598:	f7ff fb80 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff ff6d 	bl	800147c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80015b4:	230a      	movs	r3, #10
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f014 f93d 	bl	8015840 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015ca:	f7ff ff70 	bl	80014ae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80015ce:	bf00      	nop
 80015d0:	3770      	adds	r7, #112	; 0x70
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40006800 	.word	0x40006800

080015dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e0:	3304      	adds	r3, #4

080015e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015e6:	d3f9      	bcc.n	80015dc <CopyDataInit>
  bx lr
 80015e8:	4770      	bx	lr

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015ec:	3004      	adds	r0, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>
  bx lr
 80015f2:	4770      	bx	lr

080015f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7ff fe28 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0x6>)
 80015fe:	490c      	ldr	r1, [pc, #48]	; (8001630 <LoopForever+0xa>)
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LoopForever+0xe>)
 8001602:	2300      	movs	r3, #0
 8001604:	f7ff ffed 	bl	80015e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <LoopForever+0x12>)
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <LoopForever+0x16>)
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <LoopForever+0x1a>)
 800160e:	2300      	movs	r3, #0
 8001610:	f7ff ffe7 	bl	80015e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopForever+0x1e>)
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <LoopForever+0x22>)
 8001618:	2300      	movs	r3, #0
 800161a:	f7ff ffe8 	bl	80015ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800161e:	f018 f8a3 	bl	8019768 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001622:	f7ff fa73 	bl	8000b0c <main>

08001626 <LoopForever>:

LoopForever:
  b LoopForever
 8001626:	e7fe      	b.n	8001626 <LoopForever>
  ldr   r0, =_estack
 8001628:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800162c:	20000008 	.word	0x20000008
 8001630:	200000dc 	.word	0x200000dc
 8001634:	0801ac84 	.word	0x0801ac84
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001638:	20030000 	.word	0x20030000
 800163c:	20030000 	.word	0x20030000
 8001640:	0801ad58 	.word	0x0801ad58
  INIT_BSS _sbss, _ebss
 8001644:	200000e0 	.word	0x200000e0
 8001648:	20008664 	.word	0x20008664

0800164c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_IRQHandler>

0800164e <LL_AHB2_GRP1_EnableClock>:
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800165c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4313      	orrs	r3, r2
 8001664:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <VL53L1A2_Init+0xe4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4934      	ldr	r1, [pc, #208]	; (8001764 <VL53L1A2_Init+0xe4>)
 8001692:	600a      	str	r2, [r1, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d154      	bne.n	8001742 <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001698:	f000 f8d4 	bl	8001844 <_I2cFailRecover>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 80016a4:	f7ff fbe8 	bl	8000e78 <BSP_I2C1_Init>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d147      	bne.n	8001746 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80016b6:	463a      	mov	r2, r7
 80016b8:	2302      	movs	r3, #2
 80016ba:	2100      	movs	r1, #0
 80016bc:	2086      	movs	r0, #134	; 0x86
 80016be:	f000 f953 	bl	8001968 <_ExpanderRd>
 80016c2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d13f      	bne.n	800174a <VL53L1A2_Init+0xca>
 80016ca:	783b      	ldrb	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d13c      	bne.n	800174a <VL53L1A2_Init+0xca>
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b16      	cmp	r3, #22
 80016d4:	d139      	bne.n	800174a <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80016d6:	463a      	mov	r2, r7
 80016d8:	2302      	movs	r3, #2
 80016da:	2100      	movs	r1, #0
 80016dc:	2084      	movs	r0, #132	; 0x84
 80016de:	f000 f943 	bl	8001968 <_ExpanderRd>
 80016e2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d131      	bne.n	800174e <VL53L1A2_Init+0xce>
 80016ea:	783b      	ldrb	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12e      	bne.n	800174e <VL53L1A2_Init+0xce>
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b16      	cmp	r3, #22
 80016f4:	d12b      	bne.n	800174e <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <VL53L1A2_Init+0xe8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80016fc:	23ff      	movs	r3, #255	; 0xff
 80016fe:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001700:	23ff      	movs	r3, #255	; 0xff
 8001702:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001704:	463a      	mov	r2, r7
 8001706:	2302      	movs	r3, #2
 8001708:	2114      	movs	r1, #20
 800170a:	2086      	movs	r0, #134	; 0x86
 800170c:	f000 f95e 	bl	80019cc <_ExpanderWR>
 8001710:	6078      	str	r0, [r7, #4]

	  if (status)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11c      	bne.n	8001752 <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001718:	23ff      	movs	r3, #255	; 0xff
 800171a:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 800171c:	23bf      	movs	r3, #191	; 0xbf
 800171e:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001720:	463a      	mov	r2, r7
 8001722:	2302      	movs	r3, #2
 8001724:	2114      	movs	r1, #20
 8001726:	2084      	movs	r0, #132	; 0x84
 8001728:	f000 f950 	bl	80019cc <_ExpanderWR>
 800172c:	6078      	str	r0, [r7, #4]

	  if (status)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d110      	bne.n	8001756 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <VL53L1A2_Init+0xe8>)
 8001736:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800173a:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 800173c:	f000 f8f4 	bl	8001928 <_ExpandersSetAllIO>
 8001740:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8001742:	bf00      	nop
 8001744:	e008      	b.n	8001758 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001746:	bf00      	nop
 8001748:	e006      	b.n	8001758 <VL53L1A2_Init+0xd8>
      goto done_err;
 800174a:	bf00      	nop
 800174c:	e004      	b.n	8001758 <VL53L1A2_Init+0xd8>
		  goto done_err;
 800174e:	bf00      	nop
 8001750:	e002      	b.n	8001758 <VL53L1A2_Init+0xd8>
		goto done_err;
 8001752:	bf00      	nop
 8001754:	e000      	b.n	8001758 <VL53L1A2_Init+0xd8>
		goto done_err;
 8001756:	bf00      	nop
  return status;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000574 	.word	0x20000574
 8001768:	20000578 	.word	0x20000578

0800176c <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d037      	beq.n	80017f2 <VL53L1A2_ResetId+0x86>
 8001782:	2b02      	cmp	r3, #2
 8001784:	dc4e      	bgt.n	8001824 <VL53L1A2_ResetId+0xb8>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01a      	beq.n	80017c0 <VL53L1A2_ResetId+0x54>
 800178a:	2b01      	cmp	r3, #1
 800178c:	d14a      	bne.n	8001824 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 800179a:	70da      	strb	r2, [r3, #3]

      if (state)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017ae:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80017b0:	2301      	movs	r3, #1
 80017b2:	4a22      	ldr	r2, [pc, #136]	; (800183c <VL53L1A2_ResetId+0xd0>)
 80017b4:	2113      	movs	r1, #19
 80017b6:	2084      	movs	r0, #132	; 0x84
 80017b8:	f000 f908 	bl	80019cc <_ExpanderWR>
 80017bc:	60f8      	str	r0, [r7, #12]
      break;
 80017be:	e035      	b.n	800182c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017cc:	705a      	strb	r2, [r3, #1]

      if (state)
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017e0:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80017e2:	2301      	movs	r3, #1
 80017e4:	4a16      	ldr	r2, [pc, #88]	; (8001840 <VL53L1A2_ResetId+0xd4>)
 80017e6:	2113      	movs	r1, #19
 80017e8:	2086      	movs	r0, #134	; 0x86
 80017ea:	f000 f8ef 	bl	80019cc <_ExpanderWR>
 80017ee:	60f8      	str	r0, [r7, #12]
      break;
 80017f0:	e01c      	b.n	800182c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 80017fe:	705a      	strb	r2, [r3, #1]

      if (state)
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <VL53L1A2_ResetId+0xcc>)
 8001812:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001814:	2301      	movs	r3, #1
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <VL53L1A2_ResetId+0xd4>)
 8001818:	2113      	movs	r1, #19
 800181a:	2086      	movs	r0, #134	; 0x86
 800181c:	f000 f8d6 	bl	80019cc <_ExpanderWR>
 8001820:	60f8      	str	r0, [r7, #12]
      break;
 8001822:	e003      	b.n	800182c <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	60fb      	str	r3, [r7, #12]
      goto done;
 800182a:	e000      	b.n	800182e <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 800182c:	bf00      	nop
  return status;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000578 	.word	0x20000578
 800183c:	2000057b 	.word	0x2000057b
 8001840:	20000579 	.word	0x20000579

08001844 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <_I2cFailRecover+0xdc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	e05e      	b.n	8001918 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2002      	movs	r0, #2
 800185c:	f7ff fef7 	bl	800164e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001866:	2311      	movs	r3, #17
 8001868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	482c      	ldr	r0, [pc, #176]	; (8001924 <_I2cFailRecover+0xe0>)
 8001874:	f013 ffe4 	bl	8015840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8001878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800187e:	2311      	movs	r3, #17
 8001880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001882:	2301      	movs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4826      	ldr	r0, [pc, #152]	; (8001924 <_I2cFailRecover+0xe0>)
 800188c:	f013 ffd8 	bl	8015840 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <_I2cFailRecover+0xe0>)
 8001898:	f014 fa38 	bl	8015d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <_I2cFailRecover+0xe0>)
 80018a4:	f014 fa32 	bl	8015d0c <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
 80018ac:	e014      	b.n	80018d8 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b4:	481b      	ldr	r0, [pc, #108]	; (8001924 <_I2cFailRecover+0xe0>)
 80018b6:	f014 fa29 	bl	8015d0c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f013 febc 	bl	8015638 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <_I2cFailRecover+0xe0>)
 80018c8:	f014 fa20 	bl	8015d0c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f013 feb3 	bl	8015638 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	3301      	adds	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b09      	cmp	r3, #9
 80018dc:	d9e7      	bls.n	80018ae <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80018de:	7dbb      	ldrb	r3, [r7, #22]
 80018e0:	3301      	adds	r3, #1
 80018e2:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	480e      	ldr	r0, [pc, #56]	; (8001924 <_I2cFailRecover+0xe0>)
 80018ea:	f014 f9f7 	bl	8015cdc <HAL_GPIO_ReadPin>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_I2cFailRecover+0xb6>
 80018f4:	7dbb      	ldrb	r3, [r7, #22]
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d9d6      	bls.n	80018a8 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80018fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <_I2cFailRecover+0xe0>)
 8001900:	f014 f9ec 	bl	8015cdc <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 800190a:	f06f 0304 	mvn.w	r3, #4
 800190e:	e003      	b.n	8001918 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <_I2cFailRecover+0xdc>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000057c 	.word	0x2000057c
 8001924:	48000400 	.word	0x48000400

08001928 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800192e:	2302      	movs	r3, #2
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <_ExpandersSetAllIO+0x38>)
 8001932:	2112      	movs	r1, #18
 8001934:	2086      	movs	r0, #134	; 0x86
 8001936:	f000 f849 	bl	80019cc <_ExpanderWR>
 800193a:	6078      	str	r0, [r7, #4]

  if (status)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8001942:	2302      	movs	r3, #2
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <_ExpandersSetAllIO+0x3c>)
 8001946:	2112      	movs	r1, #18
 8001948:	2084      	movs	r0, #132	; 0x84
 800194a:	f000 f83f 	bl	80019cc <_ExpanderWR>
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	e000      	b.n	8001954 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8001952:	bf00      	nop

done_err:
  return status;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000578 	.word	0x20000578
 8001964:	2000057a 	.word	0x2000057a

08001968 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	b299      	uxth	r1, r3
 8001980:	f107 0213 	add.w	r2, r7, #19
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	480f      	ldr	r0, [pc, #60]	; (80019c8 <_ExpanderRd+0x60>)
 800198c:	f014 faa8 	bl	8015ee0 <HAL_I2C_Master_Transmit>
 8001990:	4603      	mov	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

    if (status)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d110      	bne.n	80019bc <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	b299      	uxth	r1, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2064      	movs	r0, #100	; 0x64
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <_ExpanderRd+0x60>)
 80019b2:	f014 fb89 	bl	80160c8 <HAL_I2C_Master_Receive>
 80019b6:	4603      	mov	r3, r0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e000      	b.n	80019be <_ExpanderRd+0x56>
      break;
 80019bc:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80019be:	697b      	ldr	r3, [r7, #20]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000190 	.word	0x20000190

080019cc <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	3301      	adds	r3, #1
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f017 fee0 	bl	80197b0 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	b299      	uxth	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f107 0214 	add.w	r2, r7, #20
 8001a00:	2064      	movs	r0, #100	; 0x64
 8001a02:	9000      	str	r0, [sp, #0]
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <_ExpanderWR+0x4c>)
 8001a06:	f014 fa6b 	bl	8015ee0 <HAL_I2C_Master_Transmit>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000190 	.word	0x20000190

08001a1c <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d903      	bls.n	8001a32 <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a2a:	f06f 0301 	mvn.w	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e014      	b.n	8001a5c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 8001a32:	f7ff fe25 	bl	8001680 <VL53L1A2_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001a3c:	f06f 0303 	mvn.w	r3, #3
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e00b      	b.n	8001a5c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001a44:	2101      	movs	r1, #1
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8d4 	bl	8001bf4 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8d0 	bl	8001bf4 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f90d 	bl	8001c74 <VL53L1CB_Probe>
 8001a5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d903      	bls.n	8001a80 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a78:	f06f 0301 	mvn.w	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e012      	b.n	8001aa6 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	4610      	mov	r0, r2
 8001a92:	4798      	blx	r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da03      	bge.n	8001aa2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a9a:	f06f 0304 	mvn.w	r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e001      	b.n	8001aa6 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000058c 	.word	0x2000058c
 8001ab4:	20000580 	.word	0x20000580

08001ab8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d903      	bls.n	8001ad0 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ac8:	f06f 0301 	mvn.w	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e012      	b.n	8001af6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	490b      	ldr	r1, [pc, #44]	; (8001b04 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4798      	blx	r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da03      	bge.n	8001af2 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001aea:	f06f 0304 	mvn.w	r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e001      	b.n	8001af6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2000058c 	.word	0x2000058c
 8001b04:	20000580 	.word	0x20000580

08001b08 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d903      	bls.n	8001b20 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b18:	f06f 0301 	mvn.w	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e012      	b.n	8001b46 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	490b      	ldr	r1, [pc, #44]	; (8001b54 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	4610      	mov	r0, r2
 8001b32:	4798      	blx	r3
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da03      	bge.n	8001b42 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b3a:	f06f 0304 	mvn.w	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e001      	b.n	8001b46 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000058c 	.word	0x2000058c
 8001b54:	20000580 	.word	0x20000580

08001b58 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d903      	bls.n	8001b70 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b68:	f06f 0301 	mvn.w	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e012      	b.n	8001b96 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	4610      	mov	r0, r2
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da03      	bge.n	8001b92 <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b8a:	f06f 0304 	mvn.w	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e001      	b.n	8001b96 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000058c 	.word	0x2000058c
 8001ba4:	20000580 	.word	0x20000580

08001ba8 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d903      	bls.n	8001bbe <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bb6:	f06f 0301 	mvn.w	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e011      	b.n	8001be2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	490a      	ldr	r1, [pc, #40]	; (8001bf0 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4798      	blx	r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da03      	bge.n	8001bde <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bd6:	f06f 0304 	mvn.w	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e001      	b.n	8001be2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000058c 	.word	0x2000058c
 8001bf0:	20000580 	.word	0x20000580

08001bf4 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d903      	bls.n	8001c0c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c04:	f06f 0301 	mvn.w	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e02e      	b.n	8001c6a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2101      	movs	r1, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fda7 	bl	800176c <VL53L1A2_ResetId>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da03      	bge.n	8001c2c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c24:	f06f 0303 	mvn.w	r3, #3
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e01e      	b.n	8001c6a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f013 fd03 	bl	8015638 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e018      	b.n	8001c6a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d112      	bne.n	8001c64 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fd91 	bl	800176c <VL53L1A2_ResetId>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da03      	bge.n	8001c58 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c50:	f06f 0303 	mvn.w	r3, #3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e008      	b.n	8001c6a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f013 fced 	bl	8015638 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e002      	b.n	8001c6a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c64:	f06f 0301 	mvn.w	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001c7c:	2352      	movs	r3, #82	; 0x52
 8001c7e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <VL53L1CB_Probe+0xf0>)
 8001c82:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <VL53L1CB_Probe+0xf4>)
 8001c86:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <VL53L1CB_Probe+0xf8>)
 8001c8a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <VL53L1CB_Probe+0xfc>)
 8001c8e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <VL53L1CB_Probe+0x100>)
 8001c92:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a36      	ldr	r2, [pc, #216]	; (8001d78 <VL53L1CB_Probe+0x104>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f013 f824 	bl	8014cf6 <VL53L1CB_RegisterBusIO>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cb4:	f06f 0304 	mvn.w	r3, #4
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e04d      	b.n	8001d58 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <VL53L1CB_Probe+0x104>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f013 f8cc 	bl	8014e6e <VL53L1CB_ReadID>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cdc:	f06f 0304 	mvn.w	r3, #4
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e039      	b.n	8001d58 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001cee:	f06f 0306 	mvn.w	r3, #6
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	e030      	b.n	8001d58 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <VL53L1CB_Probe+0x108>)
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <VL53L1CB_Probe+0x10c>)
 8001cfa:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <VL53L1CB_Probe+0x104>)
 8001d08:	441a      	add	r2, r3
 8001d0a:	491e      	ldr	r1, [pc, #120]	; (8001d84 <VL53L1CB_Probe+0x110>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <VL53L1CB_Probe+0x108>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	491a      	ldr	r1, [pc, #104]	; (8001d84 <VL53L1CB_Probe+0x110>)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d20:	4610      	mov	r0, r2
 8001d22:	4798      	blx	r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d2a:	f06f 0304 	mvn.w	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e012      	b.n	8001d58 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <VL53L1CB_Probe+0x108>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4912      	ldr	r1, [pc, #72]	; (8001d84 <VL53L1CB_Probe+0x110>)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d40:	4911      	ldr	r1, [pc, #68]	; (8001d88 <VL53L1CB_Probe+0x114>)
 8001d42:	4610      	mov	r0, r2
 8001d44:	4798      	blx	r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d4c:	f06f 0304 	mvn.w	r3, #4
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	e001      	b.n	8001d58 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	08000e79 	.word	0x08000e79
 8001d68:	08000ef5 	.word	0x08000ef5
 8001d6c:	08000f45 	.word	0x08000f45
 8001d70:	08000f99 	.word	0x08000f99
 8001d74:	08000fed 	.word	0x08000fed
 8001d78:	200005a0 	.word	0x200005a0
 8001d7c:	2000058c 	.word	0x2000058c
 8001d80:	20000038 	.word	0x20000038
 8001d84:	20000580 	.word	0x20000580
 8001d88:	20000590 	.word	0x20000590

08001d8c <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001d98:	793b      	ldrb	r3, [r7, #4]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d808      	bhi.n	8001db0 <CheckValidRectRoi+0x24>
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d805      	bhi.n	8001db0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001da4:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d802      	bhi.n	8001db0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d901      	bls.n	8001db4 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001db0:	23fc      	movs	r3, #252	; 0xfc
 8001db2:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001db4:	793a      	ldrb	r2, [r7, #4]
 8001db6:	79bb      	ldrb	r3, [r7, #6]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d803      	bhi.n	8001dc4 <CheckValidRectRoi+0x38>
 8001dbc:	797a      	ldrb	r2, [r7, #5]
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d201      	bcs.n	8001dc8 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001dc4:	23fc      	movs	r3, #252	; 0xfc
 8001dc6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3318      	adds	r3, #24
 8001dec:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001df4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2101      	movs	r1, #1
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f012 fd7d 	bl	8014900 <VL53L1_WrByte>
 8001e06:	4603      	mov	r3, r0
 8001e08:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f002 fc56 	bl	80046ee <VL53L1_data_init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3318      	adds	r3, #24
 8001e52:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	220c      	movs	r2, #12
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f017 fcb3 	bl	80197cc <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d105      	bne.n	8001e7a <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73bb      	strb	r3, [r7, #14]
 8001e7e:	e012      	b.n	8001ea6 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc90 	bl	80027b6 <VL53L1_SetLimitCheckEnable>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73bb      	strb	r3, [r7, #14]
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d9e9      	bls.n	8001e80 <VL53L1_DataInit+0x5a>
 8001eac:	e000      	b.n	8001eb0 <VL53L1_DataInit+0x8a>
		else
			break;
 8001eae:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001eb8:	2102      	movs	r1, #2
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f005 faef 	bl	800749e <VL53L1_set_dmax_mode>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7bba      	ldrb	r2, [r7, #14]
 8001ef0:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f947 	bl	8002188 <VL53L1_SetPresetMode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001efe:	2102      	movs	r1, #2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f98b 	bl	800221c <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f001 fe69 	bl	8003bec <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001f32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f011 ffa1 	bl	8013e7e <VL53L1_poll_for_boot_completion>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001f60:	4a48      	ldr	r2, [pc, #288]	; (8002084 <ComputeDevicePresetMode+0x138>)
 8001f62:	f107 0318 	add.w	r3, r7, #24
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	8019      	strh	r1, [r3, #0]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	0c12      	lsrs	r2, r2, #16
 8001f70:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001f72:	4a45      	ldr	r2, [pc, #276]	; (8002088 <ComputeDevicePresetMode+0x13c>)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	8019      	strh	r1, [r3, #0]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	0c12      	lsrs	r2, r2, #16
 8001f82:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001f84:	4a41      	ldr	r2, [pc, #260]	; (800208c <ComputeDevicePresetMode+0x140>)
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	8019      	strh	r1, [r3, #0]
 8001f90:	3302      	adds	r3, #2
 8001f92:	0c12      	lsrs	r2, r2, #16
 8001f94:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001f96:	4a3e      	ldr	r2, [pc, #248]	; (8002090 <ComputeDevicePresetMode+0x144>)
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	8019      	strh	r1, [r3, #0]
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	0c12      	lsrs	r2, r2, #16
 8001fa6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001fa8:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <ComputeDevicePresetMode+0x148>)
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	8019      	strh	r1, [r3, #0]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	0c12      	lsrs	r2, r2, #16
 8001fb8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d002      	beq.n	8001fcc <ComputeDevicePresetMode+0x80>
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <ComputeDevicePresetMode+0x86>
 8001fca:	e005      	b.n	8001fd8 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77bb      	strb	r3, [r7, #30]
		break;
 8001fd0:	e004      	b.n	8001fdc <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	77bb      	strb	r3, [r7, #30]
		break;
 8001fd6:	e001      	b.n	8001fdc <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d845      	bhi.n	8002070 <ComputeDevicePresetMode+0x124>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <ComputeDevicePresetMode+0xa0>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08002021 	.word	0x08002021
 8001ff0:	08002031 	.word	0x08002031
 8001ff4:	08002041 	.word	0x08002041
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002071 	.word	0x08002071
 8002000:	08002071 	.word	0x08002071
 8002004:	08002061 	.word	0x08002061
 8002008:	08002051 	.word	0x08002051
 800200c:	08002069 	.word	0x08002069
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8002010:	7fbb      	ldrb	r3, [r7, #30]
 8002012:	3320      	adds	r3, #32
 8002014:	443b      	add	r3, r7
 8002016:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	701a      	strb	r2, [r3, #0]
		break;
 800201e:	e029      	b.n	8002074 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8002020:	7fbb      	ldrb	r3, [r7, #30]
 8002022:	3320      	adds	r3, #32
 8002024:	443b      	add	r3, r7
 8002026:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	701a      	strb	r2, [r3, #0]
		break;
 800202e:	e021      	b.n	8002074 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8002030:	7fbb      	ldrb	r3, [r7, #30]
 8002032:	3320      	adds	r3, #32
 8002034:	443b      	add	r3, r7
 8002036:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	701a      	strb	r2, [r3, #0]
		break;
 800203e:	e019      	b.n	8002074 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8002040:	7fbb      	ldrb	r3, [r7, #30]
 8002042:	3320      	adds	r3, #32
 8002044:	443b      	add	r3, r7
 8002046:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	701a      	strb	r2, [r3, #0]
		break;
 800204e:	e011      	b.n	8002074 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8002050:	7fbb      	ldrb	r3, [r7, #30]
 8002052:	3320      	adds	r3, #32
 8002054:	443b      	add	r3, r7
 8002056:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	701a      	strb	r2, [r3, #0]
		break;
 800205e:	e009      	b.n	8002074 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2211      	movs	r2, #17
 8002064:	701a      	strb	r2, [r3, #0]
		break;
 8002066:	e005      	b.n	8002074 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2227      	movs	r2, #39	; 0x27
 800206c:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 800206e:	e001      	b.n	8002074 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002070:	23f8      	movs	r3, #248	; 0xf8
 8002072:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8002074:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	0801aacc 	.word	0x0801aacc
 8002088:	0801aad0 	.word	0x0801aad0
 800208c:	0801aad4 	.word	0x0801aad4
 8002090:	0801aad8 	.word	0x0801aad8
 8002094:	0801aadc 	.word	0x0801aadc

08002098 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af04      	add	r7, sp, #16
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	72fb      	strb	r3, [r7, #11]
 80020a6:	4613      	mov	r3, r2
 80020a8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d002      	beq.n	80020cc <SetPresetMode+0x34>
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d103      	bne.n	80020d4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020d2:	e002      	b.n	80020da <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80020d4:	2320      	movs	r3, #32
 80020d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80020da:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80020de:	7ab9      	ldrb	r1, [r7, #10]
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff32 	bl	8001f4c <ComputeDevicePresetMode>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80020ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80020f6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80020fa:	f107 001c 	add.w	r0, r7, #28
 80020fe:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4603      	mov	r3, r0
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f002 ffaf 	bl	8005074 <VL53L1_get_preset_mode_timing_cfg>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800211c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002120:	2b00      	cmp	r3, #0
 8002122:	d112      	bne.n	800214a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8002124:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002128:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800212a:	69fd      	ldr	r5, [r7, #28]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	9102      	str	r1, [sp, #8]
 8002134:	9201      	str	r2, [sp, #4]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	462b      	mov	r3, r5
 800213a:	4622      	mov	r2, r4
 800213c:	4601      	mov	r1, r0
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f003 f8ee 	bl	8005320 <VL53L1_set_preset_mode>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800214a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002158:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800215a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002168:	461a      	mov	r2, r3
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 800217c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002180:	4618      	mov	r0, r3
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bdb0      	pop	{r4, r5, r7, pc}

08002188 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002198:	2303      	movs	r3, #3
 800219a:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f00c f94a 	bl	800e436 <VL53L1_low_power_auto_data_init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d101      	bne.n	80021b0 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 80021b0:	7bba      	ldrb	r2, [r7, #14]
 80021b2:	78f9      	ldrb	r1, [r7, #3]
 80021b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff6d 	bl	8002098 <SetPresetMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d117      	bne.n	80021fa <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d005      	beq.n	80021dc <VL53L1_SetPresetMode+0x54>
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d002      	beq.n	80021dc <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d107      	bne.n	80021ec <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80021dc:	f24a 0128 	movw	r1, #41000	; 0xa028
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8a9 	bl	8002338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e006      	b.n	80021fa <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80021ec:	f248 2135 	movw	r1, #33333	; 0x8235
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f8a1 	bl	8002338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8002202:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa68 	bl	80026dc <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a2      	sub	sp, #136	; 0x88
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002240:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002244:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8002248:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800224c:	2b09      	cmp	r3, #9
 800224e:	d105      	bne.n	800225c <VL53L1_SetDistanceMode+0x40>
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8002256:	f06f 0303 	mvn.w	r3, #3
 800225a:	e069      	b.n	8002330 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d008      	beq.n	8002274 <VL53L1_SetDistanceMode+0x58>
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d005      	beq.n	8002274 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d002      	beq.n	8002274 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800226e:	f06f 0303 	mvn.w	r3, #3
 8002272:	e05d      	b.n	8002330 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8002274:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 800227c:	f107 0308 	add.w	r3, r7, #8
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f002 fede 	bl	8005044 <VL53L1_get_zone_config>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8002296:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10b      	bne.n	80022b6 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800229e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022a2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80022a6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f002 fd8a 	bl	8004dc4 <VL53L1_get_timeouts_us>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80022b6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fee5 	bl	8002098 <SetPresetMode>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80022d4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022e2:	461a      	mov	r2, r3
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80022ea:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10f      	bne.n	8002312 <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80022f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80022f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f002 fd2a 	bl	8004d52 <VL53L1_set_timeouts_us>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002304:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800230c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8002312:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f002 fe4c 	bl	8004fbe <VL53L1_set_zone_config>
 8002326:	4603      	mov	r3, r0
 8002328:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 800232c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8002330:	4618      	mov	r0, r3
 8002332:	3788      	adds	r7, #136	; 0x88
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800235e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d902      	bls.n	800236e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002368:	23fc      	movs	r3, #252	; 0xfc
 800236a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800236e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002376:	f107 031a 	add.w	r3, r7, #26
 800237a:	461a      	mov	r2, r3
 800237c:	2105      	movs	r1, #5
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fb9a 	bl	8002ab8 <VL53L1_GetSequenceStepEnable>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800238a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002392:	f107 0319 	add.w	r3, r7, #25
 8002396:	461a      	mov	r2, r3
 8002398:	2106      	movs	r1, #6
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fb8c 	bl	8002ab8 <VL53L1_GetSequenceStepEnable>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80023a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	f107 0210 	add.w	r2, r7, #16
 80023b6:	f107 010c 	add.w	r1, r7, #12
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f002 fd02 	bl	8004dc4 <VL53L1_get_timeouts_us>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80023c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80a0 	bne.w	8002510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023d6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80023da:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80023e4:	7efb      	ldrb	r3, [r7, #27]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d861      	bhi.n	80024b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 80023ec:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002499 	.word	0x08002499
 80023f8:	08002499 	.word	0x08002499
 80023fc:	08002435 	.word	0x08002435
 8002400:	08002419 	.word	0x08002419
 8002404:	080024b1 	.word	0x080024b1
 8002408:	080024b1 	.word	0x080024b1
 800240c:	080024a5 	.word	0x080024a5
 8002410:	0800245b 	.word	0x0800245b
 8002414:	08002499 	.word	0x08002499
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002418:	7ebb      	ldrb	r3, [r7, #26]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d002      	beq.n	8002424 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 800241e:	7e7b      	ldrb	r3, [r7, #25]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d103      	bne.n	800242c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8002424:	f241 3388 	movw	r3, #5000	; 0x1388
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800242a:	e044      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 800242c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002432:	e040      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800243a:	7ebb      	ldrb	r3, [r7, #26]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8002440:	7e7b      	ldrb	r3, [r7, #25]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d103      	bne.n	800244e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8002446:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
 800244c:	e002      	b.n	8002454 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 800244e:	f245 4360 	movw	r3, #21600	; 0x5460
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8002454:	2302      	movs	r3, #2
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002458:	e02d      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002460:	23f5      	movs	r3, #245	; 0xf5
 8002462:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	461a      	mov	r2, r3
 800246a:	f248 0188 	movw	r1, #32904	; 0x8088
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f005 f88c 	bl	800758c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	dd07      	ble.n	800248a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	22f5      	movs	r2, #245	; 0xf5
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	4413      	add	r3, r2
 8002488:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8002492:	2302      	movs	r3, #2
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002496:	e00e      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8002498:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 800249e:	2306      	movs	r3, #6
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80024a2:	e008      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80024aa:	3308      	adds	r3, #8
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024ae:	e002      	b.n	80024b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80024b0:	23f8      	movs	r3, #248	; 0xf8
 80024b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d803      	bhi.n	80024c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80024be:	23fc      	movs	r3, #252	; 0xfc
 80024c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024c4:	e003      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80024cc:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80024ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11c      	bne.n	8002510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d203      	bcs.n	80024e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80024de:	23fc      	movs	r3, #252	; 0xfc
 80024e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024e4:	e00d      	b.n	8002502 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f002 fc2b 	bl	8004d52 <VL53L1_set_timeouts_us>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8002502:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8002510:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800251e:	461a      	mov	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002526:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800252a:	4618      	mov	r0, r3
 800252c:	3730      	adds	r7, #48	; 0x30
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	00086470 	.word	0x00086470
 8002538:	00989680 	.word	0x00989680

0800253c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800256a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002572:	f107 031b 	add.w	r3, r7, #27
 8002576:	461a      	mov	r2, r3
 8002578:	2105      	movs	r1, #5
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa9c 	bl	8002ab8 <VL53L1_GetSequenceStepEnable>
 8002580:	4603      	mov	r3, r0
 8002582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8002586:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800258e:	f107 031a 	add.w	r3, r7, #26
 8002592:	461a      	mov	r2, r3
 8002594:	2106      	movs	r1, #6
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa8e 	bl	8002ab8 <VL53L1_GetSequenceStepEnable>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80025a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	f107 0214 	add.w	r2, r7, #20
 80025b2:	f107 010c 	add.w	r1, r7, #12
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f002 fc04 	bl	8004dc4 <VL53L1_get_timeouts_us>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80025c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d179      	bne.n	80026be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025d0:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80025d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80025d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025dc:	3b01      	subs	r3, #1
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d869      	bhi.n	80026b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	08002695 	.word	0x08002695
 80025ec:	08002695 	.word	0x08002695
 80025f0:	0800262f 	.word	0x0800262f
 80025f4:	0800260d 	.word	0x0800260d
 80025f8:	080026b7 	.word	0x080026b7
 80025fc:	080026b7 	.word	0x080026b7
 8002600:	080026a7 	.word	0x080026a7
 8002604:	08002657 	.word	0x08002657
 8002608:	08002695 	.word	0x08002695
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800260c:	7efb      	ldrb	r3, [r7, #27]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8002612:	7ebb      	ldrb	r3, [r7, #26]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800261e:	3308      	adds	r3, #8
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8002622:	e04d      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800262c:	e048      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800262e:	7efb      	ldrb	r3, [r7, #27]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8002634:	7ebb      	ldrb	r3, [r7, #26]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002640:	3334      	adds	r3, #52	; 0x34
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8002646:	e03b      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800264e:	3330      	adds	r3, #48	; 0x30
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002654:	e034      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002656:	23f5      	movs	r3, #245	; 0xf5
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	461a      	mov	r2, r3
 8002660:	f248 0188 	movw	r1, #32904	; 0x8088
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f004 ff91 	bl	800758c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	dd07      	ble.n	8002680 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	22f5      	movs	r2, #245	; 0xf5
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	461a      	mov	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	4413      	add	r3, r2
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002686:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002692:	e015      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80026a4:	e00c      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80026b0:	3308      	adds	r3, #8
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80026b4:	e004      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80026b6:	23f8      	movs	r3, #248	; 0xf8
 80026b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026bc:	e000      	b.n	80026c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80026be:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80026c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026cc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80026ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3730      	adds	r7, #48	; 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4413      	add	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f002 facc 	bl	8004ca0 <VL53L1_set_inter_measurement_period_ms>
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800270c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	10624dd3 	.word	0x10624dd3

0800271c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f002 fae3 	bl	8004cfc <VL53L1_get_inter_measurement_period_ms>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	019b      	lsls	r3, r3, #6
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8002742:	fba1 1303 	umull	r1, r3, r1, r3
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	460b      	mov	r3, r1
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <SetLimitValue+0x1e>
 800277c:	2b01      	cmp	r3, #1
 800277e:	d009      	beq.n	8002794 <SetLimitValue+0x30>
 8002780:	e011      	b.n	80027a6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0b9b      	lsrs	r3, r3, #14
 8002786:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8002788:	8abb      	ldrh	r3, [r7, #20]
 800278a:	4619      	mov	r1, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f003 f988 	bl	8005aa2 <VL53L1_set_lite_sigma_threshold>
		break;
 8002792:	e00a      	b.n	80027aa <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0a5b      	lsrs	r3, r3, #9
 8002798:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800279a:	8abb      	ldrh	r3, [r7, #20]
 800279c:	4619      	mov	r1, r3
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f003 f9ad 	bl	8005afe <VL53L1_set_lite_min_count_rate>
		break;
 80027a4:	e001      	b.n	80027aa <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027a6:	23fc      	movs	r3, #252	; 0xfc
 80027a8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d902      	bls.n	80027da <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027d4:	23fc      	movs	r3, #252	; 0xfc
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e015      	b.n	8002806 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 80027da:	787b      	ldrb	r3, [r7, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	e007      	b.n	80027f6 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffb1 	bl	8002764 <SetLimitValue>
 8002802:	4603      	mov	r3, r0
 8002804:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800280e:	787b      	ldrb	r3, [r7, #1]
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2da      	uxtb	r2, r3
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	4611      	mov	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002826:	3334      	adds	r3, #52	; 0x34
 8002828:	460a      	mov	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	460b      	mov	r3, r1
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d905      	bls.n	800285c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002850:	23fc      	movs	r3, #252	; 0xfc
 8002852:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e00a      	b.n	8002872 <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002866:	3334      	adds	r3, #52	; 0x34
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7dba      	ldrb	r2, [r7, #22]
 8002870:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002876:	4618      	mov	r0, r3
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b088      	sub	sp, #32
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	460b      	mov	r3, r1
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002898:	897b      	ldrh	r3, [r7, #10]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <VL53L1_GetLimitCheckValue+0x22>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00c      	beq.n	80028bc <VL53L1_GetLimitCheckValue+0x3a>
 80028a2:	e017      	b.n	80028d4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f003 f8e2 	bl	8005a74 <VL53L1_get_lite_sigma_threshold>
 80028b0:	4603      	mov	r3, r0
 80028b2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80028b4:	8abb      	ldrh	r3, [r7, #20]
 80028b6:	039b      	lsls	r3, r3, #14
 80028b8:	61bb      	str	r3, [r7, #24]
		break;
 80028ba:	e00d      	b.n	80028d8 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80028bc:	f107 0316 	add.w	r3, r7, #22
 80028c0:	4619      	mov	r1, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f003 f904 	bl	8005ad0 <VL53L1_get_lite_min_count_rate>
 80028c8:	4603      	mov	r3, r0
 80028ca:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	61bb      	str	r3, [r7, #24]
		break;
 80028d2:	e001      	b.n	80028d8 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80028d4:	23fc      	movs	r3, #252	; 0xfc
 80028d6:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80028d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d129      	bne.n	8002934 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80028e6:	897b      	ldrh	r3, [r7, #10]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002906:	3334      	adds	r3, #52	; 0x34
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e012      	b.n	8002934 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800292e:	3334      	adds	r3, #52	; 0x34
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002934:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a0      	sub	sp, #128	; 0x80
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800295c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002960:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8002964:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002968:	2b02      	cmp	r3, #2
 800296a:	d102      	bne.n	8002972 <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 800296c:	2310      	movs	r3, #16
 800296e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800297a:	429a      	cmp	r2, r3
 800297c:	d303      	bcc.n	8002986 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002986:	23fc      	movs	r3, #252	; 0xfc
 8002988:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 800298c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002990:	2b00      	cmp	r3, #0
 8002992:	d17e      	bne.n	8002a92 <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 8002994:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002998:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	3b01      	subs	r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80029aa:	e06a      	b.n	8002a82 <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80029ac:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	f107 0208 	add.w	r2, r7, #8
 80029ba:	3301      	adds	r3, #1
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f7ff f9e3 	bl	8001d8c <CheckValidRectRoi>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80029cc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d15d      	bne.n	8002a90 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80029d4:	7abb      	ldrb	r3, [r7, #10]
 80029d6:	461a      	mov	r2, r3
 80029d8:	7a3b      	ldrb	r3, [r7, #8]
 80029da:	4413      	add	r3, r2
 80029dc:	3301      	adds	r3, #1
					/ 2;
 80029de:	0fda      	lsrs	r2, r3, #31
 80029e0:	4413      	add	r3, r2
 80029e2:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80029e4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80029e8:	7a7b      	ldrb	r3, [r7, #9]
 80029ea:	461a      	mov	r2, r3
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	4413      	add	r3, r2
 80029f0:	3301      	adds	r3, #1
					/ 2;
 80029f2:	0fda      	lsrs	r2, r3, #31
 80029f4:	4413      	add	r3, r2
 80029f6:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80029f8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 80029fc:	7aba      	ldrb	r2, [r7, #10]
 80029fe:	7a3b      	ldrb	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002a06:	7a7a      	ldrb	r2, [r7, #9]
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8002a10:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d903      	bls.n	8002a20 <VL53L1_SetROI+0xe0>
 8002a18:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d803      	bhi.n	8002a28 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002a20:	23fc      	movs	r3, #252	; 0xfc
 8002a22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002a26:	e034      	b.n	8002a92 <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002a28:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3380      	adds	r3, #128	; 0x80
 8002a32:	443b      	add	r3, r7
 8002a34:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002a38:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002a3c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a40:	3306      	adds	r3, #6
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3380      	adds	r3, #128	; 0x80
 8002a46:	443b      	add	r3, r7
 8002a48:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002a4c:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8002a50:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a54:	3306      	adds	r3, #6
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3380      	adds	r3, #128	; 0x80
 8002a5a:	443b      	add	r3, r7
 8002a5c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8002a60:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8002a64:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a68:	3306      	adds	r3, #6
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	3380      	adds	r3, #128	; 0x80
 8002a6e:	443b      	add	r3, r7
 8002a70:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8002a74:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002a78:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d38e      	bcc.n	80029ac <VL53L1_SetROI+0x6c>
 8002a8e:	e000      	b.n	8002a92 <VL53L1_SetROI+0x152>
				break;
 8002a90:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8002a92:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f002 fa8c 	bl	8004fbe <VL53L1_set_zone_config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8002aac:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3780      	adds	r7, #128	; 0x80
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f002 f9e3 	bl	8004e9c <VL53L1_get_sequence_config_bit>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3318      	adds	r3, #24
 8002af8:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7edb      	ldrb	r3, [r3, #27]
 8002afe:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d002      	beq.n	8002b0c <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f001 fc8e 	bl	8004428 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77bb      	strb	r3, [r7, #30]
 8002b10:	e01a      	b.n	8002b48 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002b12:	7fbb      	ldrb	r3, [r7, #30]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002b22:	7fbb      	ldrb	r3, [r7, #30]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002b32:	7fbb      	ldrb	r3, [r7, #30]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002b3c:	3324      	adds	r3, #36	; 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002b42:	7fbb      	ldrb	r3, [r7, #30]
 8002b44:	3301      	adds	r3, #1
 8002b46:	77bb      	strb	r3, [r7, #30]
 8002b48:	7fbb      	ldrb	r3, [r7, #30]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d9e1      	bls.n	8002b12 <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b6c:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8002b70:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002b72:	7dbb      	ldrb	r3, [r7, #22]
 8002b74:	2b63      	cmp	r3, #99	; 0x63
 8002b76:	dc12      	bgt.n	8002b9e <VL53L1_StartMeasurement+0xb6>
 8002b78:	2b62      	cmp	r3, #98	; 0x62
 8002b7a:	da0d      	bge.n	8002b98 <VL53L1_StartMeasurement+0xb0>
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	dc0e      	bgt.n	8002b9e <VL53L1_StartMeasurement+0xb6>
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	da09      	bge.n	8002b98 <VL53L1_StartMeasurement+0xb0>
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	dc02      	bgt.n	8002b8e <VL53L1_StartMeasurement+0xa6>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da05      	bge.n	8002b98 <VL53L1_StartMeasurement+0xb0>
 8002b8c:	e007      	b.n	8002b9e <VL53L1_StartMeasurement+0xb6>
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d105      	bne.n	8002b9e <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	77fb      	strb	r3, [r7, #31]
		break;
 8002b96:	e004      	b.n	8002ba2 <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8002b98:	23f2      	movs	r3, #242	; 0xf2
 8002b9a:	77fb      	strb	r3, [r7, #31]
		break;
 8002b9c:	e001      	b.n	8002ba2 <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8002b9e:	23fd      	movs	r3, #253	; 0xfd
 8002ba0:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8002ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <VL53L1_StartMeasurement+0x102>
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d11c      	bne.n	8002bea <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fcc0 	bl	800253c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <VL53L1_StartMeasurement+0x13c>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fda2 	bl	800271c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d901      	bls.n	8002bea <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002be6:	23fc      	movs	r3, #252	; 0xfc
 8002be8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f002 ff97 	bl	8005b2c <VL53L1_init_and_start_range>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c10:	2204      	movs	r2, #4
 8002c12:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f003 fa47 	bl	80060c8 <VL53L1_stop_range>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7edb      	ldrb	r3, [r3, #27]
 8002c42:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d002      	beq.n	8002c50 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 fd1a 	bl	8004684 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c5e:	2203      	movs	r2, #3
 8002c60:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7edb      	ldrb	r3, [r3, #27]
 8002c80:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f003 ff4b 	bl	8006b22 <VL53L1_clear_interrupt_and_enable_next_range>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f011 f8ac 	bl	8013e0a <VL53L1_is_new_data_ready>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	603a      	str	r2, [r7, #0]
 8002ccc:	80fb      	strh	r3, [r7, #6]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8002cd2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002cd6:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002cd8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002cdc:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8002cde:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002ce2:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002ce4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002ce8:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002cea:	797b      	ldrb	r3, [r7, #5]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <GenNewPresetMode+0x34>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d012      	beq.n	8002d1a <GenNewPresetMode+0x58>
 8002cf4:	e023      	b.n	8002d3e <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002cf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dd03      	ble.n	8002d08 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2203      	movs	r2, #3
 8002d04:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002d06:	e02c      	b.n	8002d62 <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002d08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d0c:	89bb      	ldrh	r3, [r7, #12]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dd27      	ble.n	8002d62 <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	701a      	strb	r2, [r3, #0]
		break;
 8002d18:	e023      	b.n	8002d62 <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002d1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dd03      	ble.n	8002d2c <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2203      	movs	r2, #3
 8002d28:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002d2a:	e01c      	b.n	8002d66 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002d2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da17      	bge.n	8002d66 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
		break;
 8002d3c:	e013      	b.n	8002d66 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	da03      	bge.n	8002d50 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002d4e:	e00c      	b.n	8002d6a <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002d50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	da07      	bge.n	8002d6a <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
		break;
 8002d60:	e003      	b.n	8002d6a <GenNewPresetMode+0xa8>
		break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <GenNewPresetMode+0xaa>
		break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <GenNewPresetMode+0xaa>
		break;
 8002d6a:	bf00      	nop
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	7ddb      	ldrb	r3, [r3, #23]
 8002d8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <CheckAndChangeDistanceMode+0xbc>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3318      	adds	r3, #24
 8002d9a:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	d042      	beq.n	8002e2a <CheckAndChangeDistanceMode+0xb2>
 8002da4:	2bff      	cmp	r3, #255	; 0xff
 8002da6:	dc07      	bgt.n	8002db8 <CheckAndChangeDistanceMode+0x40>
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	dc02      	bgt.n	8002db2 <CheckAndChangeDistanceMode+0x3a>
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	da3c      	bge.n	8002e2a <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002db0:	e002      	b.n	8002db8 <CheckAndChangeDistanceMode+0x40>
 8002db2:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d938      	bls.n	8002e2a <CheckAndChangeDistanceMode+0xb2>
		break;
 8002db8:	bf00      	nop
	}

	DmaxValid = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002dc6:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	db03      	blt.n	8002dd8 <CheckAndChangeDistanceMode+0x60>
 8002dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002de4:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002de8:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	7dfa      	ldrb	r2, [r7, #23]
 8002dee:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002dfe:	7df9      	ldrb	r1, [r7, #23]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff5d 	bl	8002cc2 <GenNewPresetMode>
 8002e08:	e010      	b.n	8002e2c <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002e12:	7df9      	ldrb	r1, [r7, #23]
 8002e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff51 	bl	8002cc2 <GenNewPresetMode>
 8002e20:	e004      	b.n	8002e2c <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2203      	movs	r2, #3
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e000      	b.n	8002e2c <CheckAndChangeDistanceMode+0xb4>
		return;
 8002e2a:	bf00      	nop
	}
}
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b08d      	sub	sp, #52	; 0x34
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	603a      	str	r2, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	460b      	mov	r3, r1
 8002e46:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002e48:	2396      	movs	r3, #150	; 0x96
 8002e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002e4c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e50:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002e52:	231e      	movs	r3, #30
 8002e54:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <ComputeRQL+0x104>)
 8002e58:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <ComputeRQL+0x108>)
 8002e5c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002e5e:	f641 139a 	movw	r3, #6554	; 0x199a
 8002e62:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <ComputeRQL+0x3a>
		returnvalue = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e70:	e05b      	b.n	8002f2a <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002e78:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002e80:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002e82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002e86:	429a      	cmp	r2, r3
 8002e88:	da02      	bge.n	8002e90 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d103      	bne.n	8002e98 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002e90:	2332      	movs	r3, #50	; 0x32
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e96:	e048      	b.n	8002f2a <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002e9e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dd03      	ble.n	8002eae <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002ea6:	8c3b      	ldrh	r3, [r7, #32]
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	e007      	b.n	8002ebe <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002ec8:	461a      	mov	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d804      	bhi.n	8002efe <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	e006      	b.n	8002f0c <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002efe:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	e002      	b.n	8002f0c <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002f06:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b32      	cmp	r3, #50	; 0x32
 8002f16:	d905      	bls.n	8002f24 <ComputeRQL+0xec>
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	bf28      	it	cs
 8002f1e:	2364      	movcs	r3, #100	; 0x64
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e000      	b.n	8002f26 <ComputeRQL+0xee>
 8002f24:	2332      	movs	r3, #50	; 0x32
 8002f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3734      	adds	r7, #52	; 0x34
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	0075b333 	.word	0x0075b333
 8002f40:	0030cccd 	.word	0x0030cccd

08002f44 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	3b04      	subs	r3, #4
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	d83d      	bhi.n	8002fd2 <ConvertStatusLite+0x8e>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <ConvertStatusLite+0x18>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002faf 	.word	0x08002faf
 8002f60:	08002fa9 	.word	0x08002fa9
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fbb 	.word	0x08002fbb
 8002f6c:	08002fc7 	.word	0x08002fc7
 8002f70:	08002fcd 	.word	0x08002fcd
 8002f74:	08002fd3 	.word	0x08002fd3
 8002f78:	08002fd3 	.word	0x08002fd3
 8002f7c:	08002fc1 	.word	0x08002fc1
 8002f80:	08002fd3 	.word	0x08002fd3
 8002f84:	08002fd3 	.word	0x08002fd3
 8002f88:	08002fd3 	.word	0x08002fd3
 8002f8c:	08002fd3 	.word	0x08002fd3
 8002f90:	08002fd3 	.word	0x08002fd3
 8002f94:	08002f9d 	.word	0x08002f9d
 8002f98:	08002fa3 	.word	0x08002fa3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	73fb      	strb	r3, [r7, #15]
		break;
 8002fa0:	e019      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	73fb      	strb	r3, [r7, #15]
		break;
 8002fa6:	e016      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	73fb      	strb	r3, [r7, #15]
		break;
 8002fac:	e013      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	73fb      	strb	r3, [r7, #15]
		break;
 8002fb2:	e010      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
		break;
 8002fb8:	e00d      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	73fb      	strb	r3, [r7, #15]
		break;
 8002fbe:	e00a      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002fc0:	2309      	movs	r3, #9
 8002fc2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fc4:	e007      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	73fb      	strb	r3, [r7, #15]
		break;
 8002fca:	e004      	b.n	8002fd6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
		break;
 8002fd0:	e001      	b.n	8002fd6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002fd2:	23ff      	movs	r3, #255	; 0xff
 8002fd4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	3b05      	subs	r3, #5
 8002ff2:	2b12      	cmp	r3, #18
 8002ff4:	d840      	bhi.n	8003078 <ConvertStatusHisto+0x94>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <ConvertStatusHisto+0x18>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003049 	.word	0x08003049
 8003000:	0800304f 	.word	0x0800304f
 8003004:	0800305b 	.word	0x0800305b
 8003008:	08003079 	.word	0x08003079
 800300c:	08003073 	.word	0x08003073
 8003010:	08003079 	.word	0x08003079
 8003014:	08003079 	.word	0x08003079
 8003018:	08003079 	.word	0x08003079
 800301c:	08003079 	.word	0x08003079
 8003020:	08003079 	.word	0x08003079
 8003024:	08003079 	.word	0x08003079
 8003028:	08003079 	.word	0x08003079
 800302c:	08003079 	.word	0x08003079
 8003030:	08003079 	.word	0x08003079
 8003034:	08003055 	.word	0x08003055
 8003038:	08003067 	.word	0x08003067
 800303c:	08003079 	.word	0x08003079
 8003040:	0800306d 	.word	0x0800306d
 8003044:	08003061 	.word	0x08003061
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003048:	2304      	movs	r3, #4
 800304a:	73fb      	strb	r3, [r7, #15]
		break;
 800304c:	e016      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
		break;
 8003052:	e013      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003054:	2306      	movs	r3, #6
 8003056:	73fb      	strb	r3, [r7, #15]
		break;
 8003058:	e010      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800305a:	2307      	movs	r3, #7
 800305c:	73fb      	strb	r3, [r7, #15]
		break;
 800305e:	e00d      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003060:	230c      	movs	r3, #12
 8003062:	73fb      	strb	r3, [r7, #15]
		break;
 8003064:	e00a      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003066:	2307      	movs	r3, #7
 8003068:	73fb      	strb	r3, [r7, #15]
		break;
 800306a:	e007      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 800306c:	230b      	movs	r3, #11
 800306e:	73fb      	strb	r3, [r7, #15]
		break;
 8003070:	e004      	b.n	800307c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
		break;
 8003076:	e001      	b.n	800307c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003078:	23ff      	movs	r3, #255	; 0xff
 800307a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b092      	sub	sp, #72	; 0x48
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	461a      	mov	r2, r3
 800309a:	4603      	mov	r3, r0
 800309c:	70fb      	strb	r3, [r7, #3]
 800309e:	460b      	mov	r3, r1
 80030a0:	70bb      	strb	r3, [r7, #2]
 80030a2:	4613      	mov	r3, r2
 80030a4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3318      	adds	r3, #24
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80030be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80030cc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff feaf 	bl	8002e38 <ComputeRQL>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e0:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80030e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030e6:	025b      	lsls	r3, r3, #9
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80030ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ee:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80030f4:	025b      	lsls	r3, r3, #9
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80030f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fc:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80030fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003100:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8003106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310a:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8003112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003114:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8003116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003118:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800311c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800311e:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8003120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003122:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8003126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003128:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	2200      	movs	r2, #0
 800312e:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8003130:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003134:	2b11      	cmp	r3, #17
 8003136:	d009      	beq.n	800314c <SetTargetData+0xc0>
 8003138:	2b11      	cmp	r3, #17
 800313a:	dc0f      	bgt.n	800315c <SetTargetData+0xd0>
 800313c:	2b03      	cmp	r3, #3
 800313e:	dc02      	bgt.n	8003146 <SetTargetData+0xba>
 8003140:	2b00      	cmp	r3, #0
 8003142:	dc03      	bgt.n	800314c <SetTargetData+0xc0>
 8003144:	e00a      	b.n	800315c <SetTargetData+0xd0>
 8003146:	2b0d      	cmp	r3, #13
 8003148:	d004      	beq.n	8003154 <SetTargetData+0xc8>
 800314a:	e007      	b.n	800315c <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800314c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314e:	2205      	movs	r2, #5
 8003150:	75da      	strb	r2, [r3, #23]
		break;
 8003152:	e006      	b.n	8003162 <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8003154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003156:	220d      	movs	r2, #13
 8003158:	75da      	strb	r2, [r3, #23]
		break;
 800315a:	e002      	b.n	8003162 <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800315c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315e:	2200      	movs	r2, #0
 8003160:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003164:	7ddb      	ldrb	r3, [r3, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d117      	bne.n	800319a <SetTargetData+0x10e>
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d114      	bne.n	800319a <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003172:	22ff      	movs	r2, #255	; 0xff
 8003174:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8003176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 800317c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8003182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003184:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003188:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 800318a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003190:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8003192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003194:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003198:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800319a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800319c:	7ddb      	ldrb	r3, [r3, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d125      	bne.n	80031ee <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031a8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80031ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 80031b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <SetTargetData+0x13c>
 80031b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d003      	beq.n	80031c8 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d109      	bne.n	80031dc <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 80031c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff09 	bl	8002fe4 <ConvertStatusHisto>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80031d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d8:	75da      	strb	r2, [r3, #23]
 80031da:	e008      	b.n	80031ee <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80031dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff feaf 	bl	8002f44 <ConvertStatusLite>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031fc:	461a      	mov	r2, r3
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003206:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003212:	461a      	mov	r2, r3
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	461a      	mov	r2, r3
 8003220:	2100      	movs	r1, #0
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fb2d 	bl	8002882 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8003228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800322c:	2b06      	cmp	r3, #6
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8003236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 800323a:	f107 0315 	add.w	r3, r7, #21
 800323e:	461a      	mov	r2, r3
 8003240:	2100      	movs	r1, #0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff faf8 	bl	8002838 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8003248:	7d7b      	ldrb	r3, [r7, #21]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <SetTargetData+0x1ce>
 800324e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <SetTargetData+0x1ce>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <SetTargetData+0x1d0>
 800325a:	2300      	movs	r3, #0
 800325c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003266:	461a      	mov	r2, r3
 8003268:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800326c:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	461a      	mov	r2, r3
 8003276:	2101      	movs	r1, #1
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fb02 	bl	8002882 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800327e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003282:	2b04      	cmp	r3, #4
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800328c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8003290:	f107 0315 	add.w	r3, r7, #21
 8003294:	461a      	mov	r2, r3
 8003296:	2101      	movs	r1, #1
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff facd 	bl	8002838 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800329e:	7d7b      	ldrb	r3, [r7, #21]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <SetTargetData+0x224>
 80032a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <SetTargetData+0x224>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <SetTargetData+0x226>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032bc:	461a      	mov	r2, r3
 80032be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032c2:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80032c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c8:	8a9b      	ldrh	r3, [r3, #20]
 80032ca:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80032cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ce:	7ddb      	ldrb	r3, [r3, #23]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d110      	bne.n	80032f6 <SetTargetData+0x26a>
 80032d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0c      	bge.n	80032f6 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80032dc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80032e0:	4ba3      	ldr	r3, [pc, #652]	; (8003570 <SetTargetData+0x4e4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	da03      	bge.n	80032f0 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 80032e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ea:	220e      	movs	r2, #14
 80032ec:	75da      	strb	r2, [r3, #23]
 80032ee:	e002      	b.n	80032f6 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80032f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f2:	2200      	movs	r2, #0
 80032f4:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	461a      	mov	r2, r3
 80032fc:	f248 01be 	movw	r1, #32958	; 0x80be
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f004 f943 	bl	800758c <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 800330a:	787b      	ldrb	r3, [r7, #1]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003312:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331a:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	429a      	cmp	r2, r3
 8003320:	d902      	bls.n	8003328 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	220c      	movs	r2, #12
 8003326:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	461a      	mov	r2, r3
 800332e:	f248 0191 	movw	r1, #32913	; 0x8091
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f004 f92a 	bl	800758c <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003338:	78bb      	ldrb	r3, [r7, #2]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003348:	8a9b      	ldrh	r3, [r3, #20]
 800334a:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8003352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003354:	2200      	movs	r2, #0
 8003356:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003364:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8250 	beq.w	8003818 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8003378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337a:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 800337c:	2b07      	cmp	r3, #7
 800337e:	d004      	beq.n	800338a <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003382:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003384:	2b04      	cmp	r3, #4
 8003386:	f040 8247 	bne.w	8003818 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800338a:	787b      	ldrb	r3, [r7, #1]
 800338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338e:	4413      	add	r3, r2
 8003390:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003394:	3320      	adds	r3, #32
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d01c      	beq.n	80033d6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033a6:	3320      	adds	r3, #32
 80033a8:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d013      	beq.n	80033d6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80033ae:	787b      	ldrb	r3, [r7, #1]
 80033b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033b8:	3320      	adds	r3, #32
 80033ba:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 822b 	bne.w	8003818 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80033c2:	787b      	ldrb	r3, [r7, #1]
 80033c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033cc:	3324      	adds	r3, #36	; 0x24
 80033ce:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 8221 	bne.w	8003818 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 80033d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033dc:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80033e0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80033e8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d00c      	beq.n	8003408 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033f4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80033f8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003400:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8003402:	429a      	cmp	r2, r3
 8003404:	f040 81dc 	bne.w	80037c0 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800340e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003414:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003418:	330c      	adds	r3, #12
 800341a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800341e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d008      	beq.n	8003446 <SetTargetData+0x3ba>
 8003434:	2b21      	cmp	r3, #33	; 0x21
 8003436:	f300 81bf 	bgt.w	80037b8 <SetTargetData+0x72c>
 800343a:	2b1b      	cmp	r3, #27
 800343c:	f000 8113 	beq.w	8003666 <SetTargetData+0x5da>
 8003440:	2b1e      	cmp	r3, #30
 8003442:	d004      	beq.n	800344e <SetTargetData+0x3c2>
 8003444:	e1b8      	b.n	80037b8 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800344c:	e1b9      	b.n	80037c2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8003454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003458:	429a      	cmp	r2, r3
 800345a:	dd0f      	ble.n	800347c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003466:	429a      	cmp	r2, r3
 8003468:	da08      	bge.n	800347c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800346a:	7efb      	ldrb	r3, [r7, #27]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800347a:	e0f3      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800347c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8003486:	425b      	negs	r3, r3
 8003488:	429a      	cmp	r2, r3
 800348a:	da10      	bge.n	80034ae <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800348c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8003496:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003498:	429a      	cmp	r2, r3
 800349a:	dd08      	ble.n	80034ae <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800349c:	7efb      	ldrb	r3, [r7, #27]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80034a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034ac:	e0da      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80034b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dd0f      	ble.n	80034dc <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80034c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	da08      	bge.n	80034dc <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80034ca:	7efb      	ldrb	r3, [r7, #27]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80034d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034da:	e0c3      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80034dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80034e6:	425b      	negs	r3, r3
 80034e8:	429a      	cmp	r2, r3
 80034ea:	da10      	bge.n	800350e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80034ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80034f6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80034f8:	429a      	cmp	r2, r3
 80034fa:	dd08      	ble.n	800350e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80034fc:	7efb      	ldrb	r3, [r7, #27]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003508:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800350c:	e0aa      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003514:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003518:	429a      	cmp	r2, r3
 800351a:	dd0f      	ble.n	800353c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003522:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003526:	429a      	cmp	r2, r3
 8003528:	da08      	bge.n	800353c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800352a:	7efb      	ldrb	r3, [r7, #27]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003536:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800353a:	e093      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800353c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003546:	425b      	negs	r3, r3
 8003548:	429a      	cmp	r2, r3
 800354a:	da13      	bge.n	8003574 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800354c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8003556:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003558:	429a      	cmp	r2, r3
 800355a:	dd0b      	ble.n	8003574 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800355c:	7efb      	ldrb	r3, [r7, #27]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003568:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800356c:	e07a      	b.n	8003664 <SetTargetData+0x5d8>
 800356e:	bf00      	nop
 8003570:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 800357a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800357e:	429a      	cmp	r2, r3
 8003580:	dd0f      	ble.n	80035a2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003588:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800358c:	429a      	cmp	r2, r3
 800358e:	da08      	bge.n	80035a2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003590:	7efb      	ldrb	r3, [r7, #27]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800359c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035a0:	e060      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80035a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80035ac:	425b      	negs	r3, r3
 80035ae:	429a      	cmp	r2, r3
 80035b0:	da10      	bge.n	80035d4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80035b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80035bc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80035be:	429a      	cmp	r2, r3
 80035c0:	dd08      	ble.n	80035d4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80035c2:	7efb      	ldrb	r3, [r7, #27]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80035ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035d2:	e047      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80035da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035de:	429a      	cmp	r2, r3
 80035e0:	da0c      	bge.n	80035fc <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80035e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dd05      	ble.n	80035fc <SetTargetData+0x570>
					AddOffset =
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80035f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035fa:	e033      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003606:	429a      	cmp	r2, r3
 8003608:	dd0f      	ble.n	800362a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003610:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003614:	429a      	cmp	r2, r3
 8003616:	da08      	bge.n	800362a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003618:	7efb      	ldrb	r3, [r7, #27]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003624:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003628:	e01c      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800362a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003634:	425b      	negs	r3, r3
 8003636:	429a      	cmp	r2, r3
 8003638:	da10      	bge.n	800365c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800363a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8003644:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003646:	429a      	cmp	r2, r3
 8003648:	dd08      	ble.n	800365c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800364a:	7efb      	ldrb	r3, [r7, #27]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8003656:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800365a:	e003      	b.n	8003664 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003662:	e0ae      	b.n	80037c2 <SetTargetData+0x736>
 8003664:	e0ad      	b.n	80037c2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800366c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003670:	429a      	cmp	r2, r3
 8003672:	dd0f      	ble.n	8003694 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800367a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800367e:	429a      	cmp	r2, r3
 8003680:	da08      	bge.n	8003694 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003682:	7efb      	ldrb	r3, [r7, #27]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800368e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003692:	e090      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003694:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800369e:	425b      	negs	r3, r3
 80036a0:	429a      	cmp	r2, r3
 80036a2:	da10      	bge.n	80036c6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80036a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80036ae:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dd08      	ble.n	80036c6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80036b4:	7efb      	ldrb	r3, [r7, #27]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80036c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036c4:	e077      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80036cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dd0f      	ble.n	80036f4 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80036da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036de:	429a      	cmp	r2, r3
 80036e0:	da08      	bge.n	80036f4 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80036e2:	7efb      	ldrb	r3, [r7, #27]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80036ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036f2:	e060      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80036f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80036fe:	425b      	negs	r3, r3
 8003700:	429a      	cmp	r2, r3
 8003702:	da10      	bge.n	8003726 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003704:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800370e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003710:	429a      	cmp	r2, r3
 8003712:	dd08      	ble.n	8003726 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003714:	7efb      	ldrb	r3, [r7, #27]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8003720:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003724:	e047      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 800372c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003730:	429a      	cmp	r2, r3
 8003732:	da0c      	bge.n	800374e <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800373a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800373e:	429a      	cmp	r2, r3
 8003740:	dd05      	ble.n	800374e <SetTargetData+0x6c2>
					AddOffset =
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003748:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800374c:	e033      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003754:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003758:	429a      	cmp	r2, r3
 800375a:	dd0f      	ble.n	800377c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8003762:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003766:	429a      	cmp	r2, r3
 8003768:	da08      	bge.n	800377c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800376a:	7efb      	ldrb	r3, [r7, #27]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8003776:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800377a:	e01c      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 800377c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003786:	425b      	negs	r3, r3
 8003788:	429a      	cmp	r2, r3
 800378a:	da10      	bge.n	80037ae <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 800378c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8003796:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003798:	429a      	cmp	r2, r3
 800379a:	dd08      	ble.n	80037ae <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 800379c:	7efb      	ldrb	r3, [r7, #27]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80037a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037ac:	e003      	b.n	80037b6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80037b4:	e005      	b.n	80037c2 <SetTargetData+0x736>
 80037b6:	e004      	b.n	80037c2 <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80037be:	e000      	b.n	80037c2 <SetTargetData+0x736>
			}
		}
 80037c0:	bf00      	nop

		if (uwr_status) {
 80037c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d026      	beq.n	8003818 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80037ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037d6:	4413      	add	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b21a      	sxth	r2, r3
 80037dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037de:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80037e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ec:	4413      	add	r3, r2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b21a      	sxth	r2, r3
 80037f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f4:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80037f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003802:	4413      	add	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	b21a      	sxth	r2, r3
 8003808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380a:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 800380c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380e:	2201      	movs	r2, #1
 8003810:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 8003812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003814:	2200      	movs	r2, #0
 8003816:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003818:	787b      	ldrb	r3, [r7, #1]
 800381a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800381c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003820:	330c      	adds	r3, #12
 8003822:	8b39      	ldrh	r1, [r7, #24]
 8003824:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382c:	7dd1      	ldrb	r1, [r2, #23]
 800382e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003830:	4413      	add	r3, r2
 8003832:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003836:	3320      	adds	r3, #32
 8003838:	460a      	mov	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003840:	7e11      	ldrb	r1, [r2, #24]
 8003842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003844:	4413      	add	r3, r2
 8003846:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800384a:	3324      	adds	r3, #36	; 0x24
 800384c:	460a      	mov	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003856:	461a      	mov	r2, r3
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800385e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8003862:	4618      	mov	r0, r3
 8003864:	3748      	adds	r7, #72	; 0x48
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop

0800386c <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b091      	sub	sp, #68	; 0x44
 8003870:	af04      	add	r7, sp, #16
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3318      	adds	r3, #24
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	7c9a      	ldrb	r2, [r3, #18]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	789a      	ldrb	r2, [r3, #2]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bfa8      	it	ge
 80038ba:	4613      	movge	r3, r2
 80038bc:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80038c2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	78da      	ldrb	r2, [r3, #3]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038da:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	7c9b      	ldrb	r3, [r3, #18]
 80038e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 80038ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <SetMeasurementData+0x90>

		iteration = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80038fa:	e003      	b.n	8003904 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 80038fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003900:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003904:	2300      	movs	r3, #0
 8003906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800390a:	e048      	b.n	800399e <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800390c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	3308      	adds	r3, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8003920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003924:	224c      	movs	r2, #76	; 0x4c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	3310      	adds	r3, #16
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8003934:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003938:	2b00      	cmp	r3, #0
 800393a:	d114      	bne.n	8003966 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7918      	ldrb	r0, [r3, #4]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	7c1b      	ldrb	r3, [r3, #16]
 8003944:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003948:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	9202      	str	r2, [sp, #8]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	9201      	str	r2, [sp, #4]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	4623      	mov	r3, r4
 8003958:	4602      	mov	r2, r0
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fb96 	bl	800308c <SetTargetData>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	7ddb      	ldrb	r3, [r3, #23]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10d      	bne.n	8003994 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800397e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003982:	429a      	cmp	r2, r3
 8003984:	da06      	bge.n	8003994 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	8a9b      	ldrh	r3, [r3, #20]
 800398a:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 800398c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003990:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 8003994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003998:	3301      	adds	r3, #1
 800399a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800399e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3b0      	bcc.n	800390c <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039b6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80039ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039c2:	e01f      	b.n	8003a04 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80039c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80039ce:	330c      	adds	r3, #12
 80039d0:	2100      	movs	r1, #0
 80039d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80039d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	4413      	add	r3, r2
 80039de:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80039e2:	3320      	adds	r3, #32
 80039e4:	22ff      	movs	r2, #255	; 0xff
 80039e6:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80039e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80039fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039fe:	3301      	adds	r3, #1
 8003a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d9db      	bls.n	80039c4 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003a0c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11b      	bne.n	8003a4c <SetMeasurementData+0x1e0>
 8003a14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003a1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3308      	adds	r3, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8003a30:	2304      	movs	r3, #4
 8003a32:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003a34:	7efb      	ldrb	r3, [r7, #27]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	337e      	adds	r3, #126	; 0x7e
 8003a44:	69f9      	ldr	r1, [r7, #28]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff f996 	bl	8002d78 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8003a4c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3734      	adds	r7, #52	; 0x34
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd90      	pop	{r4, r7, pc}

08003a58 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8003a72:	3308      	adds	r3, #8
 8003a74:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	21ff      	movs	r1, #255	; 0xff
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f015 fea6 	bl	80197cc <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	2102      	movs	r1, #2
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f002 fc2e 	bl	80062e6 <VL53L1_get_device_results>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8003a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b07      	cmp	r3, #7
 8003a9c:	d002      	beq.n	8003aa4 <VL53L1_GetMultiRangingData+0x4c>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d004      	beq.n	8003aac <VL53L1_GetMultiRangingData+0x54>
 8003aa2:	e007      	b.n	8003ab4 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8003aaa:	e006      	b.n	8003aba <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8003ab2:	e002      	b.n	8003aba <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fed4 	bl	800386c <SetMeasurementData>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b090      	sub	sp, #64	; 0x40
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8003ae2:	f240 3305 	movw	r3, #773	; 0x305
 8003ae6:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3318      	adds	r3, #24
 8003aec:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	3348      	adds	r3, #72	; 0x48
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11c      	bne.n	8003b36 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b02:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003b0a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8e3 	bl	8003cdc <VL53L1_run_ref_spad_char>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fe fb2c 	bl	8002188 <VL53L1_SetPresetMode>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b3a:	f113 0f1d 	cmn.w	r3, #29
 8003b3e:	d14e      	bne.n	8003bde <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8003b40:	f107 0310 	add.w	r3, r7, #16
 8003b44:	2206      	movs	r2, #6
 8003b46:	2128      	movs	r1, #40	; 0x28
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f00e fbf6 	bl	801233a <VL53L1_read_nvm_raw_data>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003b54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003b5c:	f107 020c 	add.w	r2, r7, #12
 8003b60:	2302      	movs	r3, #2
 8003b62:	2114      	movs	r1, #20
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f010 fe5f 	bl	8014828 <VL53L1_WriteMulti>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8003b70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003b78:	7b3a      	ldrb	r2, [r7, #12]
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7c:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8003b7e:	7b7a      	ldrb	r2, [r7, #13]
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	3310      	adds	r3, #16
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8003b8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d108      	bne.n	8003ba6 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8003b94:	2306      	movs	r3, #6
 8003b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b98:	210d      	movs	r1, #13
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f010 fe44 	bl	8014828 <VL53L1_WriteMulti>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8003ba6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d117      	bne.n	8003bde <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	785a      	ldrb	r2, [r3, #1]
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	789a      	ldrb	r2, [r3, #2]
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	78da      	ldrb	r2, [r3, #3]
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	791a      	ldrb	r2, [r3, #4]
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	795a      	ldrb	r2, [r3, #5]
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8003bde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3740      	adds	r7, #64	; 0x40
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d84a      	bhi.n	8003ca4 <VL53L1_SmudgeCorrectionEnable+0xb8>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c45 	.word	0x08003c45
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c85 	.word	0x08003c85
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f004 fbee 	bl	8008406 <VL53L1_dynamic_xtalk_correction_disable>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f004 fc17 	bl	8008462 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003c34:	4603      	mov	r3, r0
 8003c36:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f004 fc40 	bl	80084be <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	733b      	strb	r3, [r7, #12]
		break;
 8003c42:	e032      	b.n	8003caa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f004 fbc7 	bl	80083d8 <VL53L1_dynamic_xtalk_correction_enable>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f004 fbf0 	bl	8008434 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003c54:	4603      	mov	r3, r0
 8003c56:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f004 fc30 	bl	80084be <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	733b      	strb	r3, [r7, #12]
		break;
 8003c62:	e022      	b.n	8003caa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f004 fbb7 	bl	80083d8 <VL53L1_dynamic_xtalk_correction_enable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f004 fbe0 	bl	8008434 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003c74:	4603      	mov	r3, r0
 8003c76:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f004 fc09 	bl	8008490 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	733b      	strb	r3, [r7, #12]
		break;
 8003c82:	e012      	b.n	8003caa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f004 fba7 	bl	80083d8 <VL53L1_dynamic_xtalk_correction_enable>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f004 fbe7 	bl	8008462 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003c94:	4603      	mov	r3, r0
 8003c96:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f004 fc10 	bl	80084be <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	733b      	strb	r3, [r7, #12]
		break;
 8003ca2:	e002      	b.n	8003caa <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003ca4:	23fc      	movs	r3, #252	; 0xfc
 8003ca6:	73fb      	strb	r3, [r7, #15]
		break;
 8003ca8:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003cb2:	7bbb      	ldrb	r3, [r7, #14]
 8003cb4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003cbe:	7b7b      	ldrb	r3, [r7, #13]
 8003cc0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003cca:	7b3b      	ldrb	r3, [r7, #12]
 8003ccc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af04      	add	r7, sp, #16
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3318      	adds	r3, #24
 8003cee:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003cf6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f007 fc99 	bl	800b638 <VL53L1_enable_powerforce>
 8003d06:	4603      	mov	r3, r0
 8003d08:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d117      	bne.n	8003d42 <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	7858      	ldrb	r0, [r3, #1]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685c      	ldr	r4, [r3, #4]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	891d      	ldrh	r5, [r3, #8]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	899b      	ldrh	r3, [r3, #12]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	8952      	ldrh	r2, [r2, #10]
 8003d26:	69b9      	ldr	r1, [r7, #24]
 8003d28:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003d2c:	9102      	str	r1, [sp, #8]
 8003d2e:	9201      	str	r2, [sp, #4]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	462b      	mov	r3, r5
 8003d34:	4622      	mov	r2, r4
 8003d36:	4601      	mov	r1, r0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f009 fbda 	bl	800d4f2 <VL53L1_set_ref_spad_char_config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d107      	bne.n	8003d5a <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f891 	bl	8003e78 <VL53L1_run_device_test>
 8003d56:	4603      	mov	r3, r0
 8003d58:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d108      	bne.n	8003d74 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003d62:	f107 020c 	add.w	r2, r7, #12
 8003d66:	2302      	movs	r3, #2
 8003d68:	21d9      	movs	r1, #217	; 0xd9
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f010 fd92 	bl	8014894 <VL53L1_ReadMulti>
 8003d70:	4603      	mov	r3, r0
 8003d72:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003d7c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d84:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003d88:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003d9c:	f107 020c 	add.w	r2, r7, #12
 8003da0:	2302      	movs	r3, #2
 8003da2:	2114      	movs	r1, #20
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f010 fd3f 	bl	8014828 <VL53L1_WriteMulti>
 8003daa:	4603      	mov	r3, r0
 8003dac:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003db6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003dbe:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003dc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003dce:	f107 020c 	add.w	r2, r7, #12
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	21ac      	movs	r1, #172	; 0xac
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f010 fd5c 	bl	8014894 <VL53L1_ReadMulti>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003de0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003de8:	f107 020c 	add.w	r2, r7, #12
 8003dec:	2306      	movs	r3, #6
 8003dee:	210d      	movs	r1, #13
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f010 fd19 	bl	8014828 <VL53L1_WriteMulti>
 8003df6:	4603      	mov	r3, r0
 8003df8:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003dfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d117      	bne.n	8003e32 <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003e02:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003e0a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003e12:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003e22:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003e2a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003e32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d114      	bne.n	8003e64 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d00c      	beq.n	8003e5e <VL53L1_run_ref_spad_char+0x182>
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	dc0e      	bgt.n	8003e66 <VL53L1_run_ref_spad_char+0x18a>
 8003e48:	2b0e      	cmp	r3, #14
 8003e4a:	d002      	beq.n	8003e52 <VL53L1_run_ref_spad_char+0x176>
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d003      	beq.n	8003e58 <VL53L1_run_ref_spad_char+0x17c>
 8003e50:	e009      	b.n	8003e66 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003e52:	23e4      	movs	r3, #228	; 0xe4
 8003e54:	77fb      	strb	r3, [r7, #31]
			break;
 8003e56:	e006      	b.n	8003e66 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003e58:	23e3      	movs	r3, #227	; 0xe3
 8003e5a:	77fb      	strb	r3, [r7, #31]
			break;
 8003e5c:	e003      	b.n	8003e66 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003e5e:	23e2      	movs	r3, #226	; 0xe2
 8003e60:	77fb      	strb	r3, [r7, #31]
			break;
 8003e62:	e000      	b.n	8003e66 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003e64:	bf00      	nop



	*pcal_status = status;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	7ffa      	ldrb	r2, [r7, #31]
 8003e6a:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003e6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bdb0      	pop	{r4, r5, r7, pc}

08003e78 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003e9a:	f107 030b 	add.w	r3, r7, #11
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2130      	movs	r1, #48	; 0x30
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f010 fd88 	bl	80149b8 <VL53L1_RdByte>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003eb4:	7afa      	ldrb	r2, [r7, #11]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f007 fb39 	bl	800b540 <VL53L1_start_test>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f00f ff5c 	bl	8013d98 <VL53L1_wait_for_test_completion>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003eec:	f107 020c 	add.w	r2, r7, #12
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	2189      	movs	r1, #137	; 0x89
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f010 fccd 	bl	8014894 <VL53L1_ReadMulti>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003f06:	7b3a      	ldrb	r2, [r7, #12]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003f0e:	7b7a      	ldrb	r2, [r7, #13]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f007 fba1 	bl	800b680 <VL53L1_clear_interrupt>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f007 faf7 	bl	800b540 <VL53L1_start_test>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b21      	cmp	r3, #33	; 0x21
 8003f76:	d006      	beq.n	8003f86 <select_offset_per_vcsel+0x24>
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	dc2b      	bgt.n	8003fd4 <select_offset_per_vcsel+0x72>
 8003f7c:	2b1b      	cmp	r3, #27
 8003f7e:	d01c      	beq.n	8003fba <select_offset_per_vcsel+0x58>
 8003f80:	2b1e      	cmp	r3, #30
 8003f82:	d00d      	beq.n	8003fa0 <select_offset_per_vcsel+0x3e>
 8003f84:	e026      	b.n	8003fd4 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003f90:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003f9c:	817b      	strh	r3, [r7, #10]
		break;
 8003f9e:	e02b      	b.n	8003ff8 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa6:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003faa:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003fb6:	817b      	strh	r3, [r7, #10]
		break;
 8003fb8:	e01e      	b.n	8003ff8 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003fc4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003fd0:	817b      	strh	r3, [r7, #10]
		break;
 8003fd2:	e011      	b.n	8003ff8 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003fde:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe6:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003fea:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003fec:	23fc      	movs	r3, #252	; 0xfc
 8003fee:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
		break;
 8003ff6:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ffe:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004008:	7a7b      	ldrb	r3, [r7, #9]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <select_offset_per_vcsel+0xb6>
 8004012:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004016:	e001      	b.n	800401c <select_offset_per_vcsel+0xba>
 8004018:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	8013      	strh	r3, [r2, #0]

	return status;
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004030:	b490      	push	{r4, r7}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	460b      	mov	r3, r1
 8004040:	71fb      	strb	r3, [r7, #7]
 8004042:	4613      	mov	r3, r2
 8004044:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	b29b      	uxth	r3, r3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004062:	e021      	b.n	80040a8 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8004064:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	0052      	lsls	r2, r2, #1
 8004072:	441a      	add	r2, r3
 8004074:	00d3      	lsls	r3, r2, #3
 8004076:	461a      	mov	r2, r3
 8004078:	460b      	mov	r3, r1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	440b      	add	r3, r1
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4413      	add	r3, r2
 8004082:	4423      	add	r3, r4
 8004084:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	4413      	add	r3, r2
 8004090:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8004092:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3206      	adds	r2, #6
 8004098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80040a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040a4:	3301      	adds	r3, #1
 80040a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040a8:	79bb      	ldrb	r3, [r7, #6]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3d8      	bcc.n	8004064 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d047      	beq.n	8004148 <vl53l1_diff_histo_stddev+0x118>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040c6:	e03a      	b.n	800413e <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80040c8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	461a      	mov	r2, r3
 80040d4:	0052      	lsls	r2, r2, #1
 80040d6:	441a      	add	r2, r3
 80040d8:	00d3      	lsls	r3, r2, #3
 80040da:	461a      	mov	r2, r3
 80040dc:	460b      	mov	r3, r1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	440b      	add	r3, r1
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	4413      	add	r3, r2
 80040e6:	4423      	add	r3, r4
 80040e8:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80040ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040f0:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f8:	fb03 f202 	mul.w	r2, r3, r2
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8004104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3206      	adds	r2, #6
 800410a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004112:	fb03 f202 	mul.w	r2, r3, r2
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fb92 f3f3 	sdiv	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	69b9      	ldr	r1, [r7, #24]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	6979      	ldr	r1, [r7, #20]
 800412c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	441a      	add	r2, r3
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800413a:	3301      	adds	r3, #1
 800413c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800413e:	79bb      	ldrb	r3, [r7, #6]
 8004140:	b29b      	uxth	r3, r3
 8004142:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004144:	429a      	cmp	r2, r3
 8004146:	d3bf      	bcc.n	80040c8 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8004148:	bf00      	nop
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc90      	pop	{r4, r7}
 8004150:	4770      	bx	lr

08004152 <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8004152:	b5b0      	push	{r4, r5, r7, lr}
 8004154:	b08c      	sub	sp, #48	; 0x30
 8004156:	af02      	add	r7, sp, #8
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3318      	adds	r3, #24
 8004160:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8004176:	2300      	movs	r3, #0
 8004178:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8004182:	2318      	movs	r3, #24
 8004184:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	461a      	mov	r2, r3
 800418c:	f248 018f 	movw	r1, #32911	; 0x808f
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f003 f9fb 	bl	800758c <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	461a      	mov	r2, r3
 800419c:	f248 018e 	movw	r1, #32910	; 0x808e
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f003 f9f3 	bl	800758c <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 811b 	bne.w	80043ec <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80041d0:	7efb      	ldrb	r3, [r7, #27]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	7eba      	ldrb	r2, [r7, #26]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e004      	b.n	8004206 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8004206:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800420a:	7efb      	ldrb	r3, [r7, #27]
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	461a      	mov	r2, r3
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	441a      	add	r2, r3
 8004214:	0153      	lsls	r3, r2, #5
 8004216:	461a      	mov	r2, r3
 8004218:	460b      	mov	r3, r1
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	440b      	add	r3, r1
 800421e:	019b      	lsls	r3, r3, #6
 8004220:	4413      	add	r3, r2
 8004222:	4403      	add	r3, r0
 8004224:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8004228:	3308      	adds	r3, #8
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	dd0c      	ble.n	800424a <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8004230:	7e79      	ldrb	r1, [r7, #25]
 8004232:	7efa      	ldrb	r2, [r7, #27]
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	460b      	mov	r3, r1
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	69f8      	ldr	r0, [r7, #28]
 8004246:	f7ff fef3 	bl	8004030 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	429a      	cmp	r2, r3
 8004250:	db23      	blt.n	800429a <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004258:	3318      	adds	r3, #24
 800425a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f015 fab3 	bl	80197cc <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8004278:	7efb      	ldrb	r3, [r7, #27]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	2206      	movs	r2, #6
 8004286:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 800428a:	e034      	b.n	80042f6 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	2207      	movs	r2, #7
 8004294:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8004298:	e02d      	b.n	80042f6 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80042a4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042ac:	e01e      	b.n	80042ec <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80042ae:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80042b2:	7e39      	ldrb	r1, [r7, #24]
 80042b4:	7efb      	ldrb	r3, [r7, #27]
 80042b6:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	3006      	adds	r0, #6
 80042be:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80042c2:	69f8      	ldr	r0, [r7, #28]
 80042c4:	461a      	mov	r2, r3
 80042c6:	0052      	lsls	r2, r2, #1
 80042c8:	441a      	add	r2, r3
 80042ca:	00d3      	lsls	r3, r2, #3
 80042cc:	461a      	mov	r2, r3
 80042ce:	460b      	mov	r3, r1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4413      	add	r3, r2
 80042d8:	442b      	add	r3, r5
 80042da:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80042de:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80042e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042e6:	3301      	adds	r3, #1
 80042e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042ec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80042f0:	7ebb      	ldrb	r3, [r7, #26]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3db      	bcc.n	80042ae <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fc:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004300:	461a      	mov	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3b01      	subs	r3, #1
 8004306:	429a      	cmp	r2, r3
 8004308:	d109      	bne.n	800431e <vl53l1_histo_merge+0x1cc>
 800430a:	7efb      	ldrb	r3, [r7, #27]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 800431c:	e00e      	b.n	800433c <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 800431e:	7efb      	ldrb	r3, [r7, #27]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10b      	bne.n	800433c <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800432e:	3301      	adds	r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800433c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <vl53l1_histo_merge+0x1f8>
 8004344:	7efb      	ldrb	r3, [r7, #27]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d069      	beq.n	800441e <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004350:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	d162      	bne.n	800441e <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8004358:	2300      	movs	r3, #0
 800435a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800435c:	e008      	b.n	8004370 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 800435e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	3206      	adds	r2, #6
 8004364:	2100      	movs	r1, #0
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800436a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800436c:	3301      	adds	r3, #1
 800436e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004370:	7ebb      	ldrb	r3, [r7, #26]
 8004372:	b29b      	uxth	r3, r3
 8004374:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004376:	429a      	cmp	r2, r3
 8004378:	d3f1      	bcc.n	800435e <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 800437a:	2300      	movs	r3, #0
 800437c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800437e:	e02f      	b.n	80043e0 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004386:	e023      	b.n	80043d0 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8004388:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	3206      	adds	r2, #6
 800438e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8004392:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004396:	7efb      	ldrb	r3, [r7, #27]
 8004398:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 800439a:	69fc      	ldr	r4, [r7, #28]
 800439c:	461a      	mov	r2, r3
 800439e:	0052      	lsls	r2, r2, #1
 80043a0:	441a      	add	r2, r3
 80043a2:	00d3      	lsls	r3, r2, #3
 80043a4:	461a      	mov	r2, r3
 80043a6:	460b      	mov	r3, r1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	440b      	add	r3, r1
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	4413      	add	r3, r2
 80043b0:	442b      	add	r3, r5
 80043b2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80043b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80043ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043bc:	18c1      	adds	r1, r0, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	3206      	adds	r2, #6
 80043c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80043c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043ca:	3301      	adds	r3, #1
 80043cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043d0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	dbd6      	blt.n	8004388 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 80043da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043dc:	3301      	adds	r3, #1
 80043de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043e0:	7ebb      	ldrb	r3, [r7, #26]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d3ca      	bcc.n	8004380 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80043ea:	e018      	b.n	800441e <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004400:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800440e:	2bff      	cmp	r3, #255	; 0xff
 8004410:	d105      	bne.n	800441e <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004428 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b0c6      	sub	sp, #280	; 0x118
 800442c:	af00      	add	r7, sp, #0
 800442e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004432:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004436:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004444:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 800444c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004450:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004454:	2200      	movs	r2, #0
 8004456:	2185      	movs	r1, #133	; 0x85
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	f010 fa51 	bl	8014900 <VL53L1_WrByte>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004464:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 800446c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004470:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f007 f8df 	bl	800b638 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 800447a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800447e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004486:	f248 018c 	movw	r1, #32908	; 0x808c
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f003 f87e 	bl	800758c <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004494:	2b03      	cmp	r3, #3
 8004496:	d81b      	bhi.n	80044d0 <VL53L1_load_patch+0xa8>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <VL53L1_load_patch+0x78>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044b9 	.word	0x080044b9
 80044a8:	080044c1 	.word	0x080044c1
 80044ac:	080044c9 	.word	0x080044c9
	case 0:
		patch_power = 0x00;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044b6:	e00e      	b.n	80044d6 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80044b8:	2310      	movs	r3, #16
 80044ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044be:	e00a      	b.n	80044d6 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80044c0:	2320      	movs	r3, #32
 80044c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044c6:	e006      	b.n	80044d6 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044ce:	e002      	b.n	80044d6 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 80044d6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d134      	bne.n	8004548 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80044de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044e6:	2229      	movs	r2, #41	; 0x29
 80044e8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80044ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044f2:	22c9      	movs	r2, #201	; 0xc9
 80044f4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80044f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044fe:	220e      	movs	r2, #14
 8004500:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8004502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004506:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800450e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004516:	2228      	movs	r2, #40	; 0x28
 8004518:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800451a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800451e:	b2da      	uxtb	r2, r3
 8004520:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004528:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004532:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004536:	2306      	movs	r3, #6
 8004538:	f240 4176 	movw	r1, #1142	; 0x476
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f010 f973 	bl	8014828 <VL53L1_WriteMulti>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004548:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800454c:	2b00      	cmp	r3, #0
 800454e:	d132      	bne.n	80045b6 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004550:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004554:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004558:	2203      	movs	r2, #3
 800455a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800455c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004560:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004564:	226d      	movs	r2, #109	; 0x6d
 8004566:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004568:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800456c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004570:	2203      	movs	r2, #3
 8004572:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004578:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800457c:	226f      	movs	r2, #111	; 0x6f
 800457e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004588:	2207      	movs	r2, #7
 800458a:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800458c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004594:	2229      	movs	r2, #41	; 0x29
 8004596:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8004598:	f107 020c 	add.w	r2, r7, #12
 800459c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045a0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80045a4:	2306      	movs	r3, #6
 80045a6:	f240 4196 	movw	r1, #1174	; 0x496
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	f010 f93c 	bl	8014828 <VL53L1_WriteMulti>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80045b6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11a      	bne.n	80045f4 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80045be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80045ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045d2:	2207      	movs	r2, #7
 80045d4:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80045d6:	f107 020c 	add.w	r2, r7, #12
 80045da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045de:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80045e2:	2302      	movs	r3, #2
 80045e4:	f240 4172 	movw	r1, #1138	; 0x472
 80045e8:	6800      	ldr	r0, [r0, #0]
 80045ea:	f010 f91d 	bl	8014828 <VL53L1_WriteMulti>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 80045f4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11a      	bne.n	8004632 <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80045fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004600:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004608:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800460c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004610:	2207      	movs	r2, #7
 8004612:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8004614:	f107 020c 	add.w	r2, r7, #12
 8004618:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800461c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004620:	2302      	movs	r3, #2
 8004622:	f240 4174 	movw	r1, #1140	; 0x474
 8004626:	6800      	ldr	r0, [r0, #0]
 8004628:	f010 f8fe 	bl	8014828 <VL53L1_WriteMulti>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8004632:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 800463a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800463e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004642:	2201      	movs	r2, #1
 8004644:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f010 f959 	bl	8014900 <VL53L1_WrByte>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8004654:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 800465c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004660:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004664:	2201      	movs	r2, #1
 8004666:	2185      	movs	r1, #133	; 0x85
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f010 f949 	bl	8014900 <VL53L1_WrByte>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004674:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004678:	4618      	mov	r0, r3
 800467a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop

08004684 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8004698:	2200      	movs	r2, #0
 800469a:	2185      	movs	r1, #133	; 0x85
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f010 f92f 	bl	8014900 <VL53L1_WrByte>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f006 ffd4 	bl	800b65c <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80046b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80046bc:	2200      	movs	r2, #0
 80046be:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f010 f91c 	bl	8014900 <VL53L1_WrByte>
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80046cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 80046d4:	2201      	movs	r2, #1
 80046d6:	2185      	movs	r1, #133	; 0x85
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f010 f911 	bl	8014900 <VL53L1_WrByte>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80046ee:	b5b0      	push	{r4, r5, r7, lr}
 80046f0:	b08a      	sub	sp, #40	; 0x28
 80046f2:	af04      	add	r7, sp, #16
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3318      	adds	r3, #24
 8004702:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800470a:	3308      	adds	r3, #8
 800470c:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 8004712:	2162      	movs	r1, #98	; 0x62
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f006 f810 	bl	800a73a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2204      	movs	r2, #4
 800471e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2210      	movs	r2, #16
 800472a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004736:	2300      	movs	r3, #0
 8004738:	75bb      	strb	r3, [r7, #22]
 800473a:	e01b      	b.n	8004774 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 800473c:	7dba      	ldrb	r2, [r7, #22]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	3308      	adds	r3, #8
 8004750:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800476e:	7dbb      	ldrb	r3, [r7, #22]
 8004770:	3301      	adds	r3, #1
 8004772:	75bb      	strb	r3, [r7, #22]
 8004774:	7dbb      	ldrb	r3, [r7, #22]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	d9e0      	bls.n	800473c <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2210      	movs	r2, #16
 800477e:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2210      	movs	r2, #16
 800478e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800479a:	2300      	movs	r3, #0
 800479c:	75bb      	strb	r3, [r7, #22]
 800479e:	e039      	b.n	8004814 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80047a0:	7dba      	ldrb	r2, [r7, #22]
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80047b6:	7dba      	ldrb	r2, [r7, #22]
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80047cc:	7dba      	ldrb	r2, [r7, #22]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 80047e2:	7dba      	ldrb	r2, [r7, #22]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 80047f8:	7dba      	ldrb	r2, [r7, #22]
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800480e:	7dbb      	ldrb	r3, [r7, #22]
 8004810:	3301      	adds	r3, #1
 8004812:	75bb      	strb	r3, [r7, #22]
 8004814:	7dbb      	ldrb	r3, [r7, #22]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d9c2      	bls.n	80047a0 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2201      	movs	r2, #1
 8004824:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2200      	movs	r2, #0
 800482a:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2200      	movs	r2, #0
 8004830:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2201      	movs	r2, #1
 8004836:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2201      	movs	r2, #1
 800483c:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2201      	movs	r2, #1
 8004842:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800484a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004852:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800485a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2264      	movs	r2, #100	; 0x64
 8004860:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004868:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	2203      	movs	r2, #3
 800487a:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f240 72db 	movw	r2, #2011	; 0x7db
 8004890:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800489a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f005 ff2e 	bl	800a700 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80048aa:	3318      	adds	r3, #24
 80048ac:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f014 ff8a 	bl	80197cc <memset>
	pdev->bin_rec_pos = 0;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <VL53L1_data_init+0x1fa>
 80048d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8b8 	bl	8004a54 <VL53L1_read_p2p_data>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80048e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80048f6:	4618      	mov	r0, r3
 80048f8:	f003 fdf8 	bl	80084ec <VL53L1_init_refspadchar_config_struct>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8004900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fe10 	bl	8008534 <VL53L1_init_ssc_config_struct>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f003 fe21 	bl	8008576 <VL53L1_init_xtalk_config_struct>
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fe89 	bl	800865e <VL53L1_init_xtalk_extract_config_struct>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800495e:	4618      	mov	r0, r3
 8004960:	f003 feac 	bl	80086bc <VL53L1_init_offset_cal_config_struct>
 8004964:	4603      	mov	r3, r0
 8004966:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004976:	4618      	mov	r0, r3
 8004978:	f003 fec7 	bl	800870a <VL53L1_init_zone_cal_config_struct>
 800497c:	4603      	mov	r3, r0
 800497e:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f003 fedb 	bl	8008752 <VL53L1_init_hist_post_process_config_struct>
 800499c:	4603      	mov	r3, r0
 800499e:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80049a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 f8f6 	bl	8008ba0 <VL53L1_init_hist_gen3_dmax_config_struct>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80049b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80049c6:	4618      	mov	r0, r3
 80049c8:	f003 ff32 	bl	8008830 <VL53L1_init_tuning_parm_storage_struct>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80049d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d116      	bne.n	8004a06 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	7858      	ldrb	r0, [r3, #1]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	8b1c      	ldrh	r4, [r3, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	689d      	ldr	r5, [r3, #8]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	6912      	ldr	r2, [r2, #16]
 80049ec:	6939      	ldr	r1, [r7, #16]
 80049ee:	6949      	ldr	r1, [r1, #20]
 80049f0:	9102      	str	r1, [sp, #8]
 80049f2:	9201      	str	r2, [sp, #4]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462b      	mov	r3, r5
 80049f8:	4622      	mov	r2, r4
 80049fa:	4601      	mov	r1, r0
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fc8f 	bl	8005320 <VL53L1_set_preset_mode>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2118      	movs	r1, #24
 8004a10:	2000      	movs	r0, #0
 8004a12:	f00a fa90 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2118      	movs	r1, #24
 8004a20:	2000      	movs	r0, #0
 8004a22:	f00a fa88 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	210c      	movs	r1, #12
 8004a30:	2000      	movs	r0, #0
 8004a32:	f006 fc26 	bl	800b282 <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f009 fcd2 	bl	800e3e0 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f009 fbd1 	bl	800e1e4 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f009 fcf7 	bl	800e436 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bdb0      	pop	{r4, r5, r7, pc}

08004a54 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b091      	sub	sp, #68	; 0x44
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3318      	adds	r3, #24
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	3348      	adds	r3, #72	; 0x48
 8004a74:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	339c      	adds	r3, #156	; 0x9c
 8004a7a:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004a7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f00d fdd1 	bl	8012634 <VL53L1_get_static_nvm_managed>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004a98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	3348      	adds	r3, #72	; 0x48
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f00d ff02 	bl	80128b0 <VL53L1_get_customer_nvm_managed>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004ab2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d117      	bne.n	8004aea <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f00e fdda 	bl	801367c <VL53L1_get_nvm_copy_data>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8004ace:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f006 f921 	bl	800ad2c <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004aea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10e      	bne.n	8004b10 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8004b10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	33c0      	adds	r3, #192	; 0xc0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f00d fc3c 	bl	801239c <VL53L1_read_nvm_optical_centre>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	3360      	adds	r3, #96	; 0x60
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f00d fc52 	bl	80123e2 <VL53L1_read_nvm_cal_peak_rate_map>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004b44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12d      	bne.n	8004ba8 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	339c      	adds	r3, #156	; 0x9c
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f00d fc6b 	bl	801242e <VL53L1_read_nvm_additional_offset_cal_data>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	889b      	ldrh	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d120      	bne.n	8004ba8 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d11c      	bne.n	8004ba8 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004b7a:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	3102      	adds	r1, #2
 8004b94:	9103      	str	r1, [sp, #12]
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	2238      	movs	r2, #56	; 0x38
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	23ff      	movs	r3, #255	; 0xff
 8004ba0:	22c7      	movs	r2, #199	; 0xc7
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	f008 f934 	bl	800ce10 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8004ba8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d12f      	bne.n	8004c10 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f00d fc5a 	bl	8012474 <VL53L1_read_nvm_fmt_range_results_data>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8004bc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d120      	bne.n	8004c10 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004bce:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004bd6:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004bde:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004bfc:	e003      	b.n	8004c06 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2214      	movs	r2, #20
 8004c02:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c0c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004c10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8004c1e:	3308      	adds	r3, #8
 8004c20:	461a      	mov	r2, r3
 8004c22:	21de      	movs	r1, #222	; 0xde
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f00f fefb 	bl	8014a20 <VL53L1_RdWord>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d204      	bcs.n	8004c46 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004c42:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004c46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	33bc      	adds	r3, #188	; 0xbc
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f97d 	bl	8004f54 <VL53L1_get_mode_mitigation_roi>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d114      	bne.n	8004c94 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3734      	adds	r7, #52	; 0x34
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3318      	adds	r3, #24
 8004cb2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cba:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004cc2:	23f1      	movs	r3, #241	; 0xf1
 8004cc4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10e      	bne.n	8004cec <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004cde:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d16:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d1e:	23f1      	movs	r3, #241	; 0xf1
 8004d20:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d36:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004d3a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3318      	adds	r3, #24
 8004d68:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d74:	23f1      	movs	r3, #241	; 0xf1
 8004d76:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11b      	bne.n	8004db8 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004da4:	9201      	str	r2, [sp, #4]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	460b      	mov	r3, r1
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	68b8      	ldr	r0, [r7, #8]
 8004db0:	f006 fe0b 	bl	800b9ca <VL53L1_calc_timeout_register_values>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3318      	adds	r3, #24
 8004dda:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004dee:	23f1      	movs	r3, #241	; 0xf1
 8004df0:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d14a      	bne.n	8004e90 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f006 fc56 	bl	800b6ba <VL53L1_calc_macro_period_us>
 8004e0e:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f006 fd14 	bl	800b846 <VL53L1_calc_timeout_us>
 8004e1e:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004e2a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004e2c:	8a7b      	ldrh	r3, [r7, #18]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004e38:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004e3a:	4413      	add	r3, r2
 8004e3c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004e3e:	8a7b      	ldrh	r3, [r7, #18]
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f006 fd66 	bl	800b914 <VL53L1_calc_decoded_timeout_us>
 8004e48:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004e54:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004e56:	8a7b      	ldrh	r3, [r7, #18]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004e62:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004e64:	4413      	add	r3, r2
 8004e66:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004e68:	8a7b      	ldrh	r3, [r7, #18]
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f006 fd51 	bl	800b914 <VL53L1_calc_decoded_timeout_us>
 8004e72:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004e90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
 8004eba:	2b07      	cmp	r3, #7
 8004ebc:	d81c      	bhi.n	8004ef8 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004ed4:	7dbb      	ldrb	r3, [r7, #22]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	fa42 f303 	asr.w	r3, r2, r3
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e001      	b.n	8004efc <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004ef8:	23fc      	movs	r3, #252	; 0xfc
 8004efa:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	7858      	ldrb	r0, [r3, #1]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	7819      	ldrb	r1, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f007 fdeb 	bl	800cb0a <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	7898      	ldrb	r0, [r3, #2]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	78d9      	ldrb	r1, [r3, #3]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f42:	461a      	mov	r2, r3
 8004f44:	f007 fe20 	bl	800cb88 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3318      	adds	r3, #24
 8004f66:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004f7a:	f107 020e 	add.w	r2, r7, #14
 8004f7e:	f107 010d 	add.w	r1, r7, #13
 8004f82:	4618      	mov	r0, r3
 8004f84:	f00a f880 	bl	800f088 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004f88:	7bba      	ldrb	r2, [r7, #14]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004f8e:	7b7a      	ldrb	r2, [r7, #13]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004f9a:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3318      	adds	r3, #24
 8004fd0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	331c      	adds	r3, #28
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f014 fbe6 	bl	80197b0 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785a      	ldrb	r2, [r3, #1]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	33c2      	adds	r3, #194	; 0xc2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00f fbce 	bl	801479e <VL53L1_init_zone_config_histogram_bins>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005016:	e00f      	b.n	8005038 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b0f      	cmp	r3, #15
 800501e:	d807      	bhi.n	8005030 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	3301      	adds	r3, #1
 8005026:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800502e:	e003      	b.n	8005038 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2211      	movs	r2, #17
 8005034:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8005038:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3318      	adds	r3, #24
 8005056:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	33c2      	adds	r3, #194	; 0xc2
 800505c:	226c      	movs	r2, #108	; 0x6c
 800505e:	4619      	mov	r1, r3
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f014 fba5 	bl	80197b0 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8005066:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	460b      	mov	r3, r1
 8005082:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3318      	adds	r3, #24
 800508c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	3b01      	subs	r3, #1
 8005092:	2b26      	cmp	r3, #38	; 0x26
 8005094:	f200 8139 	bhi.w	800530a <VL53L1_get_preset_mode_timing_cfg+0x296>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	0800513d 	.word	0x0800513d
 80050a4:	0800513d 	.word	0x0800513d
 80050a8:	0800513d 	.word	0x0800513d
 80050ac:	0800513d 	.word	0x0800513d
 80050b0:	0800513d 	.word	0x0800513d
 80050b4:	08005167 	.word	0x08005167
 80050b8:	08005167 	.word	0x08005167
 80050bc:	08005167 	.word	0x08005167
 80050c0:	0800530b 	.word	0x0800530b
 80050c4:	0800530b 	.word	0x0800530b
 80050c8:	080051bb 	.word	0x080051bb
 80050cc:	08005263 	.word	0x08005263
 80050d0:	080051bb 	.word	0x080051bb
 80050d4:	0800530b 	.word	0x0800530b
 80050d8:	0800530b 	.word	0x0800530b
 80050dc:	0800530b 	.word	0x0800530b
 80050e0:	0800513d 	.word	0x0800513d
 80050e4:	08005167 	.word	0x08005167
 80050e8:	080051bb 	.word	0x080051bb
 80050ec:	080051bb 	.word	0x080051bb
 80050f0:	080051bb 	.word	0x080051bb
 80050f4:	080051bb 	.word	0x080051bb
 80050f8:	080051bb 	.word	0x080051bb
 80050fc:	080051e5 	.word	0x080051e5
 8005100:	0800520f 	.word	0x0800520f
 8005104:	08005239 	.word	0x08005239
 8005108:	080051bb 	.word	0x080051bb
 800510c:	080051bb 	.word	0x080051bb
 8005110:	080051bb 	.word	0x080051bb
 8005114:	0800528d 	.word	0x0800528d
 8005118:	0800528d 	.word	0x0800528d
 800511c:	0800528d 	.word	0x0800528d
 8005120:	080052b7 	.word	0x080052b7
 8005124:	080052b7 	.word	0x080052b7
 8005128:	080052b7 	.word	0x080052b7
 800512c:	08005191 	.word	0x08005191
 8005130:	08005191 	.word	0x08005191
 8005134:	08005191 	.word	0x08005191
 8005138:	080052e1 	.word	0x080052e1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	601a      	str	r2, [r3, #0]
	break;
 8005164:	e0d4      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	601a      	str	r2, [r3, #0]
	break;
 800518e:	e0bf      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	601a      	str	r2, [r3, #0]
	break;
 80051b8:	e0aa      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	601a      	str	r2, [r3, #0]

	break;
 80051e2:	e095      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	601a      	str	r2, [r3, #0]
	break;
 800520c:	e080      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	601a      	str	r2, [r3, #0]
	break;
 8005236:	e06b      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	601a      	str	r2, [r3, #0]
	break;
 8005260:	e056      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	601a      	str	r2, [r3, #0]
	break;
 800528a:	e041      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	601a      	str	r2, [r3, #0]
	break;
 80052b4:	e02c      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	601a      	str	r2, [r3, #0]
	break;
 80052de:	e017      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	601a      	str	r2, [r3, #0]
	break;
 8005308:	e002      	b.n	8005310 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800530a:	23fc      	movs	r3, #252	; 0xfc
 800530c:	75fb      	strb	r3, [r7, #23]
		break;
 800530e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b098      	sub	sp, #96	; 0x60
 8005324:	af06      	add	r7, sp, #24
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	72fb      	strb	r3, [r7, #11]
 800532e:	4613      	mov	r3, r2
 8005330:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3318      	adds	r3, #24
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005344:	3308      	adds	r3, #8
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005352:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8005358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800535e:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800537e:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005382:	33c2      	adds	r3, #194	; 0xc2
 8005384:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005388:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800538c:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800538e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005390:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8005394:	3318      	adds	r3, #24
 8005396:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8005398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539a:	7afa      	ldrb	r2, [r7, #11]
 800539c:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053a2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053a8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ae:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80053b0:	2103      	movs	r1, #3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f005 f9c1 	bl	800a73a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	2b26      	cmp	r3, #38	; 0x26
 80053be:	f200 8321 	bhi.w	8005a04 <VL53L1_set_preset_mode+0x6e4>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <VL53L1_set_preset_mode+0xa8>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	08005465 	.word	0x08005465
 80053cc:	08005489 	.word	0x08005489
 80053d0:	080054ad 	.word	0x080054ad
 80053d4:	080054d1 	.word	0x080054d1
 80053d8:	080054f5 	.word	0x080054f5
 80053dc:	08005519 	.word	0x08005519
 80053e0:	0800553d 	.word	0x0800553d
 80053e4:	08005561 	.word	0x08005561
 80053e8:	08005a05 	.word	0x08005a05
 80053ec:	08005a05 	.word	0x08005a05
 80053f0:	08005585 	.word	0x08005585
 80053f4:	080056ed 	.word	0x080056ed
 80053f8:	0800587d 	.word	0x0800587d
 80053fc:	080058a5 	.word	0x080058a5
 8005400:	080058cd 	.word	0x080058cd
 8005404:	080058f5 	.word	0x080058f5
 8005408:	0800591d 	.word	0x0800591d
 800540c:	08005941 	.word	0x08005941
 8005410:	080056c5 	.word	0x080056c5
 8005414:	080055ad 	.word	0x080055ad
 8005418:	080055d5 	.word	0x080055d5
 800541c:	080055fd 	.word	0x080055fd
 8005420:	08005625 	.word	0x08005625
 8005424:	0800564d 	.word	0x0800564d
 8005428:	08005675 	.word	0x08005675
 800542c:	0800569d 	.word	0x0800569d
 8005430:	08005715 	.word	0x08005715
 8005434:	0800573d 	.word	0x0800573d
 8005438:	08005765 	.word	0x08005765
 800543c:	0800578d 	.word	0x0800578d
 8005440:	080057b5 	.word	0x080057b5
 8005444:	080057dd 	.word	0x080057dd
 8005448:	08005805 	.word	0x08005805
 800544c:	0800582d 	.word	0x0800582d
 8005450:	08005855 	.word	0x08005855
 8005454:	08005965 	.word	0x08005965
 8005458:	0800598d 	.word	0x0800598d
 800545c:	080059b5 	.word	0x080059b5
 8005460:	080059dd 	.word	0x080059dd

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800547a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800547c:	f003 fbc6 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005486:	e2c1      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800549c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800549e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054a0:	f003 fd2d 	bl	8008efe <VL53L1_preset_mode_standard_ranging_short_range>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054aa:	e2af      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054c4:	f003 fd60 	bl	8008f88 <VL53L1_preset_mode_standard_ranging_long_range>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054ce:	e29d      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9303      	str	r3, [sp, #12]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054e8:	f003 fd93 	bl	8009012 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054f2:	e28b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800550a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800550c:	f003 fdaa 	bl	8009064 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005516:	e279      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800552e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005530:	f003 fdc1 	bl	80090b6 <VL53L1_preset_mode_timed_ranging>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800553a:	e267      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005552:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005554:	f003 fded 	bl	8009132 <VL53L1_preset_mode_timed_ranging_short_range>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800555e:	e255      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	9302      	str	r3, [sp, #8]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005576:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005578:	f003 fe19 	bl	80091ae <VL53L1_preset_mode_timed_ranging_long_range>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005582:	e243      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	9302      	str	r3, [sp, #8]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a0:	f003 fefb 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055aa:	e22f      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	9302      	str	r3, [sp, #8]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055c8:	f003 ff7c 	bl	80094c4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055d2:	e21b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055f0:	f003 ffcc 	bl	800958c <VL53L1_preset_mode_histogram_ranging_with_mm2>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055fa:	e207      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005614:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005618:	f003 ffe0 	bl	80095dc <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005622:	e1f3      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800563e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005640:	f004 f830 	bl	80096a4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8005644:	4603      	mov	r3, r0
 8005646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800564a:	e1df      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005666:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005668:	f004 fe25 	bl	800a2b6 <VL53L1_preset_mode_histogram_multizone>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005672:	e1cb      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	9302      	str	r3, [sp, #8]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800568e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005690:	f004 fe63 	bl	800a35a <VL53L1_preset_mode_histogram_multizone_short_range>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800569a:	e1b7      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056b8:	f004 fea1 	bl	800a3fe <VL53L1_preset_mode_histogram_multizone_long_range>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056c2:	e1a3      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056e0:	f004 ffde 	bl	800a6a0 <VL53L1_preset_mode_histogram_ranging_ref>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056ea:	e18f      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005708:	f003 fff4 	bl	80096f4 <VL53L1_preset_mode_histogram_ranging_short_timing>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005712:	e17b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	9302      	str	r3, [sp, #8]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800572e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005730:	f004 f86c 	bl	800980c <VL53L1_preset_mode_histogram_long_range>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800573a:	e167      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005758:	f004 f8f6 	bl	8009948 <VL53L1_preset_mode_histogram_long_range_mm1>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005762:	e153      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800577e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005780:	f004 f943 	bl	8009a0a <VL53L1_preset_mode_histogram_long_range_mm2>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800578a:	e13f      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057a8:	f004 f957 	bl	8009a5a <VL53L1_preset_mode_histogram_medium_range>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057b2:	e12b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	9303      	str	r3, [sp, #12]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	9302      	str	r3, [sp, #8]
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057d0:	f004 f9e1 	bl	8009b96 <VL53L1_preset_mode_histogram_medium_range_mm1>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057da:	e117      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	9303      	str	r3, [sp, #12]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057f8:	f004 fa2e 	bl	8009c58 <VL53L1_preset_mode_histogram_medium_range_mm2>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005802:	e103      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	9304      	str	r3, [sp, #16]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	9303      	str	r3, [sp, #12]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	9302      	str	r3, [sp, #8]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800581e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005820:	f004 fa42 	bl	8009ca8 <VL53L1_preset_mode_histogram_short_range>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800582a:	e0ef      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005846:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005848:	f004 fb4c 	bl	8009ee4 <VL53L1_preset_mode_histogram_short_range_mm1>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005852:	e0db      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800586e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005870:	f004 fb99 	bl	8009fa6 <VL53L1_preset_mode_histogram_short_range_mm2>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800587a:	e0c7      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	9303      	str	r3, [sp, #12]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005896:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005898:	f004 fbad 	bl	8009ff6 <VL53L1_preset_mode_histogram_characterisation>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058a2:	e0b3      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	9303      	str	r3, [sp, #12]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058c0:	f004 fbca 	bl	800a058 <VL53L1_preset_mode_histogram_xtalk_planar>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058ca:	e09f      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	9303      	str	r3, [sp, #12]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	9302      	str	r3, [sp, #8]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058e8:	f004 fc2d 	bl	800a146 <VL53L1_preset_mode_histogram_xtalk_mm1>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058f2:	e08b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	9304      	str	r3, [sp, #16]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800590e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005910:	f004 fcad 	bl	800a26e <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800591a:	e077      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	9302      	str	r3, [sp, #8]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005934:	f004 fdb5 	bl	800a4a2 <VL53L1_preset_mode_olt>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800593e:	e065      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	9303      	str	r3, [sp, #12]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	9302      	str	r3, [sp, #8]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005958:	f003 fce5 	bl	8009326 <VL53L1_preset_mode_singleshot_ranging>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005962:	e053      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	9304      	str	r3, [sp, #16]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005980:	f003 fc7d 	bl	800927e <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800598a:	e03f      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	9303      	str	r3, [sp, #12]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	9302      	str	r3, [sp, #8]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059a8:	f003 fc3f 	bl	800922a <VL53L1_preset_mode_low_power_auto_ranging>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80059b2:	e02b      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	9302      	str	r3, [sp, #8]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059d0:	f003 fc7f 	bl	80092d2 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80059da:	e017      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	9304      	str	r3, [sp, #16]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	9303      	str	r3, [sp, #12]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059f8:	f004 f9f4 	bl	8009de4 <VL53L1_preset_mode_special_histogram_short_range>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8005a02:	e003      	b.n	8005a0c <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005a04:	23fc      	movs	r3, #252	; 0xfc
 8005a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005a0a:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005a0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	893a      	ldrh	r2, [r7, #8]
 8005a18:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1c:	893a      	ldrh	r2, [r7, #8]
 8005a1e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8005a20:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff f98f 	bl	8004d52 <VL53L1_set_timeouts_us>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005a3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005a42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff f92b 	bl	8004ca0 <VL53L1_set_inter_measurement_period_ms>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a52:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f005 fa82 	bl	800af6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005a68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3748      	adds	r7, #72	; 0x48
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3318      	adds	r3, #24
 8005a86:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3318      	adds	r3, #24
 8005ab6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	887a      	ldrh	r2, [r7, #2]
 8005abc:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005aee:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	460b      	mov	r3, r1
 8005b08:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3318      	adds	r3, #24
 8005b12:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0d2      	sub	sp, #328	; 0x148
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b3a:	6018      	str	r0, [r3, #0]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b44:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005b48:	4602      	mov	r2, r0
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b50:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005b54:	460a      	mov	r2, r1
 8005b56:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3318      	adds	r3, #24
 8005b6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8005b6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005b82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b86:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005b8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b92:	3348      	adds	r3, #72	; 0x48
 8005b94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b9c:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005ba4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ba8:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005bac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005bb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bb4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005bb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005bbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bc0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bcc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005bd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bd8:	332c      	adds	r3, #44	; 0x2c
 8005bda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005bde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005be2:	3348      	adds	r3, #72	; 0x48
 8005be4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005c08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c0c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c10:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005c18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c1c:	791b      	ldrb	r3, [r3, #4]
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005c26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c2a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005c38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c3c:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005c3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005c46:	3336      	adds	r3, #54	; 0x36
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005c4e:	4413      	add	r3, r2
 8005c50:	1d9a      	adds	r2, r3, #6
 8005c52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	f7ff f955 	bl	8004f0c <VL53L1_set_user_zone>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005c68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c6c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d019      	beq.n	8005ca8 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005c74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c7c:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005c8a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005c8e:	4413      	add	r3, r2
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f001 fbd7 	bl	8007450 <VL53L1_set_zone_dss_config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005ca8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cac:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10d      	bne.n	8005cd4 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005cb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cbc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cc8:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005ccc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cd0:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005cd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8005ce0:	2bff      	cmp	r3, #255	; 0xff
 8005ce2:	d106      	bne.n	8005cf2 <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005ce4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d139      	bne.n	8005d76 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d131      	bne.n	8005d76 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d16:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005d1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005d26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005d30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d34:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005d40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d44:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005d48:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005d4a:	b21a      	sxth	r2, r3
 8005d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d50:	825a      	strh	r2, [r3, #18]
 8005d52:	e003      	b.n	8005d5c <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005d54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d58:	2200      	movs	r2, #0
 8005d5a:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005d5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d60:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d805      	bhi.n	8005d76 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d6e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d72:	2205      	movs	r2, #5
 8005d74:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d117      	bne.n	8005db6 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8e:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10f      	bne.n	8005db6 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005d96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9e:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005da2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005da6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005daa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dae:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005db2:	2206      	movs	r2, #6
 8005db4:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005db6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	f007 f98c 	bl	800d0e4 <VL53L1_save_cfg_data>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005dd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dd6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d826      	bhi.n	8005e30 <VL53L1_init_and_start_range+0x304>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <VL53L1_init_and_start_range+0x2bc>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e29 	.word	0x08005e29
 8005dec:	08005e21 	.word	0x08005e21
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e01 	.word	0x08005e01
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e06:	e017      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005e08:	230d      	movs	r3, #13
 8005e0a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e0e:	e013      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005e10:	2324      	movs	r3, #36	; 0x24
 8005e12:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e16:	e00f      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005e18:	2344      	movs	r3, #68	; 0x44
 8005e1a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e1e:	e00b      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005e20:	235a      	movs	r3, #90	; 0x5a
 8005e22:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e26:	e007      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005e28:	2371      	movs	r3, #113	; 0x71
 8005e2a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e2e:	e003      	b.n	8005e38 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005e30:	2383      	movs	r3, #131	; 0x83
 8005e32:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e36:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005e38:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e3c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005e40:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005e52:	e00b      	b.n	8005e6c <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005e54:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005e62:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005e6c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005e70:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d3ed      	bcc.n	8005e54 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005e78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e7c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d917      	bls.n	8005eb6 <VL53L1_init_and_start_range+0x38a>
 8005e86:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d113      	bne.n	8005eb6 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005e8e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e92:	f1c3 0301 	rsb	r3, r3, #1
 8005e96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e9a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005e9e:	f107 020c 	add.w	r2, r7, #12
 8005ea2:	4413      	add	r3, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	210b      	movs	r1, #11
 8005ea8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005eac:	f00c fb0d 	bl	80124ca <VL53L1_i2c_encode_static_nvm_managed>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005eb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eba:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d917      	bls.n	8005ef4 <VL53L1_init_and_start_range+0x3c8>
 8005ec4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d113      	bne.n	8005ef4 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ecc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ed0:	f1c3 030d 	rsb	r3, r3, #13
 8005ed4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ed8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005edc:	f107 020c 	add.w	r2, r7, #12
 8005ee0:	4413      	add	r3, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2117      	movs	r1, #23
 8005ee6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005eea:	f00c fbca 	bl	8012682 <VL53L1_i2c_encode_customer_nvm_managed>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ef8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d917      	bls.n	8005f32 <VL53L1_init_and_start_range+0x406>
 8005f02:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d113      	bne.n	8005f32 <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f0a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f0e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005f12:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f16:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005f1a:	f107 020c 	add.w	r2, r7, #12
 8005f1e:	4413      	add	r3, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	2120      	movs	r1, #32
 8005f24:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005f28:	f00c fce9 	bl	80128fe <VL53L1_i2c_encode_static_config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005f32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f36:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d917      	bls.n	8005f70 <VL53L1_init_and_start_range+0x444>
 8005f40:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d113      	bne.n	8005f70 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f48:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f4c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005f50:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005f58:	f107 020c 	add.w	r2, r7, #12
 8005f5c:	4413      	add	r3, r2
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2116      	movs	r1, #22
 8005f62:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005f66:	f00c fdad 	bl	8012ac4 <VL53L1_i2c_encode_general_config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005f70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f74:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d917      	bls.n	8005fae <VL53L1_init_and_start_range+0x482>
 8005f7e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f86:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f8a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005f8e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f92:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005f96:	f107 020c 	add.w	r2, r7, #12
 8005f9a:	4413      	add	r3, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2117      	movs	r1, #23
 8005fa0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005fa4:	f00c fe12 	bl	8012bcc <VL53L1_i2c_encode_timing_config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005fae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fb2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d036      	beq.n	800602a <VL53L1_init_and_start_range+0x4fe>
 8005fbc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d132      	bne.n	800602a <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005fc4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005fc8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005fcc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005fd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d017      	beq.n	800600e <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fee:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006000:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006006:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8006008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800600c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800600e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8006012:	f107 020c 	add.w	r2, r7, #12
 8006016:	4413      	add	r3, r2
 8006018:	461a      	mov	r2, r3
 800601a:	2112      	movs	r1, #18
 800601c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006020:	f00c fe56 	bl	8012cd0 <VL53L1_i2c_encode_dynamic_config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 800602a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800602e:	2b00      	cmp	r3, #0
 8006030:	d113      	bne.n	800605a <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8006032:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006036:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800603a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800603e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8006042:	f107 020c 	add.w	r2, r7, #12
 8006046:	4413      	add	r3, r2
 8006048:	461a      	mov	r2, r3
 800604a:	2105      	movs	r1, #5
 800604c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8006050:	f00c fec3 	bl	8012dda <VL53L1_i2c_encode_system_control>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 800605a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8006062:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006066:	f107 020c 	add.w	r2, r7, #12
 800606a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800606e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006072:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	f00e fbd6 	bl	8014828 <VL53L1_WriteMulti>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8006082:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800608a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800608e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	f004 fb82 	bl	800a79c <VL53L1_update_ll_driver_rd_state>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 800609e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80060a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	f004 fd15 	bl	800aade <VL53L1_update_ll_driver_cfg_state>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80060ba:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80060be:	4618      	mov	r0, r3
 80060c0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3318      	adds	r3, #24
 80060d8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80060e0:	3308      	adds	r3, #8
 80060e2:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80060f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f00c fea1 	bl	8012e50 <VL53L1_set_system_control>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8006124:	2103      	movs	r1, #3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f004 fb07 	bl	800a73a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8006132:	3301      	adds	r3, #1
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f004 ff14 	bl	800af6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f004 ff46 	bl	800afd6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006150:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006154:	2b01      	cmp	r3, #1
 8006156:	d102      	bne.n	800615e <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f008 f9b4 	bl	800e4c6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800615e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b0c8      	sub	sp, #288	; 0x120
 800616e:	af00      	add	r7, sp, #0
 8006170:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006174:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006178:	6018      	str	r0, [r3, #0]
 800617a:	460a      	mov	r2, r1
 800617c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006180:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006184:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006186:	2300      	movs	r3, #0
 8006188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800618c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006190:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3318      	adds	r3, #24
 8006198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800619c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061a0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80061a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80061a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061ac:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80061b0:	331c      	adds	r3, #28
 80061b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80061b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061ba:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80061be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 80061c2:	2388      	movs	r3, #136	; 0x88
 80061c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80061d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80061d8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d008      	beq.n	80061f4 <VL53L1_get_measurement_results+0x8a>
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d10d      	bne.n	8006202 <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80061e6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80061ea:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80061ee:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80061f2:	e00a      	b.n	800620a <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80061f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80061f8:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80061fc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006200:	e003      	b.n	800620a <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8006202:	232c      	movs	r3, #44	; 0x2c
 8006204:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006208:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 800620a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8006212:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8006216:	f107 0208 	add.w	r2, r7, #8
 800621a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800621e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8006222:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8006226:	6800      	ldr	r0, [r0, #0]
 8006228:	f00e fb34 	bl	8014894 <VL53L1_ReadMulti>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006232:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006236:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d917      	bls.n	8006270 <VL53L1_get_measurement_results+0x106>
 8006240:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006244:	2b00      	cmp	r3, #0
 8006246:	d113      	bne.n	8006270 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006248:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800624c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8006250:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006254:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8006258:	f107 0208 	add.w	r2, r7, #8
 800625c:	4413      	add	r3, r2
 800625e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006262:	4619      	mov	r1, r3
 8006264:	2038      	movs	r0, #56	; 0x38
 8006266:	f00c ff71 	bl	801314c <VL53L1_i2c_decode_debug_results>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8006270:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006274:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d017      	beq.n	80062ae <VL53L1_get_measurement_results+0x144>
 800627e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d113      	bne.n	80062ae <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006286:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800628a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800628e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006292:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8006296:	f107 0208 	add.w	r2, r7, #8
 800629a:	4413      	add	r3, r2
 800629c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80062a0:	4619      	mov	r1, r3
 80062a2:	2021      	movs	r0, #33	; 0x21
 80062a4:	f00c fef1 	bl	801308a <VL53L1_i2c_decode_core_results>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80062ae:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d110      	bne.n	80062d8 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80062bc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 80062c0:	f107 0208 	add.w	r2, r7, #8
 80062c4:	4413      	add	r3, r2
 80062c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80062ca:	4619      	mov	r1, r3
 80062cc:	202c      	movs	r0, #44	; 0x2c
 80062ce:	f00c fde6 	bl	8012e9e <VL53L1_i2c_decode_system_results>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80062d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80062dc:	4618      	mov	r0, r3
 80062de:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80062e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	b0a0      	sub	sp, #128	; 0x80
 80062ec:	af06      	add	r7, sp, #24
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	460b      	mov	r3, r1
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3318      	adds	r3, #24
 8006300:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006308:	3308      	adds	r3, #8
 800630a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 800630c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8006310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006312:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006316:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631a:	332c      	adds	r3, #44	; 0x2c
 800631c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 800631e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006320:	33c2      	adds	r3, #194	; 0xc2
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8006324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006326:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800632a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006334:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006338:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800633a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800633c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8006342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006344:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006348:	3318      	adds	r3, #24
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 800634c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800634e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006356:	3348      	adds	r3, #72	; 0x48
 8006358:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 800635a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8006362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006364:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800636a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8006370:	2b01      	cmp	r3, #1
 8006372:	d108      	bne.n	8006386 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800637a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <VL53L1_get_device_results+0xa0>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <VL53L1_get_device_results+0xa2>
 8006386:	2300      	movs	r3, #0
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 800638c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 82a9 	beq.w	80068ee <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 800639c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fbd7 	bl	8006b58 <VL53L1_get_histogram_bin_data>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 80063b0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d118      	bne.n	80063ea <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d114      	bne.n	80063ea <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 80063c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 80063ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d2:	4413      	add	r3, r2
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f005 fb6c 	bl	800babc <VL53L1_hist_copy_and_scale_ambient_info>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 80063ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 8220 	bne.w	8006834 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80063f4:	f107 0313 	add.w	r3, r7, #19
 80063f8:	4619      	mov	r1, r3
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f008 f91a 	bl	800e634 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	3b01      	subs	r3, #1
 800640e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8006412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800641a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	3202      	adds	r2, #2
 8006422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006428:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 800642a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800642c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8006434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f005 fa41 	bl	800b8c8 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8006446:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8006452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006454:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800645c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645e:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8006464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006466:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 800646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646c:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800646e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006470:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800647e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006480:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8006484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006486:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 800648a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648c:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8006490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006492:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8006496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006498:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 800649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649e:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80064a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a8:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80064ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b0:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80064b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b8:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 80064ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064bc:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80064c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f004 fc2f 	bl	800ad2c <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80064ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d0:	795b      	ldrb	r3, [r3, #5]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d048      	beq.n	8006568 <VL53L1_get_device_results+0x282>
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	dc56      	bgt.n	8006588 <VL53L1_get_device_results+0x2a2>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d002      	beq.n	80064e4 <VL53L1_get_device_results+0x1fe>
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d02e      	beq.n	8006540 <VL53L1_get_device_results+0x25a>
 80064e2:	e051      	b.n	8006588 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80064e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e6:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 80064ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80064fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064fc:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8006500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006502:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006508:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800650c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650e:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8006512:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006514:	319c      	adds	r1, #156	; 0x9c
 8006516:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006518:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 800651c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8006520:	b2a4      	uxth	r4, r4
 8006522:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8006524:	351c      	adds	r5, #28
 8006526:	9505      	str	r5, [sp, #20]
 8006528:	9404      	str	r4, [sp, #16]
 800652a:	9003      	str	r0, [sp, #12]
 800652c:	9102      	str	r1, [sp, #8]
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4643      	mov	r3, r8
 8006534:	4672      	mov	r2, lr
 8006536:	4661      	mov	r1, ip
 8006538:	4630      	mov	r0, r6
 800653a:	f006 fa36 	bl	800c9aa <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800653e:	e027      	b.n	8006590 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8006540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 800654a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800654e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800655e:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8006560:	b21a      	sxth	r2, r3
 8006562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006564:	839a      	strh	r2, [r3, #28]
		break;
 8006566:	e013      	b.n	8006590 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	331c      	adds	r3, #28
 800656c:	4619      	mov	r1, r3
 800656e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006570:	f7fd fcf7 	bl	8003f62 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800657a:	b29b      	uxth	r3, r3
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	b29b      	uxth	r3, r3
 8006580:	b21a      	sxth	r2, r3
 8006582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006584:	839a      	strh	r2, [r3, #28]
		break;
 8006586:	e003      	b.n	8006590 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	2200      	movs	r2, #0
 800658c:	839a      	strh	r2, [r3, #28]
		break;
 800658e:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8006590:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006594:	2b00      	cmp	r3, #0
 8006596:	f040 814f 	bne.w	8006838 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 80065a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a8:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80065ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ae:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 80065b2:	b29c      	uxth	r4, r3
 80065b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b6:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4623      	mov	r3, r4
 80065be:	f006 fb99 	bl	800ccf4 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 80065c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c4:	7999      	ldrb	r1, [r3, #6]
 80065c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 ff7b 	bl	80074ca <VL53L1_get_dmax_calibration_data>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 80065da:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 812c 	bne.w	800683c <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 80065e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e6:	f503 7526 	add.w	r5, r3, #664	; 0x298
 80065ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ec:	f503 7616 	add.w	r6, r3, #600	; 0x258
 80065f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f2:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80065f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f8:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80065fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fe:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8006602:	3308      	adds	r3, #8
				pdev->wArea2,
 8006604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006606:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 800660a:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 800660c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800660e:	9405      	str	r4, [sp, #20]
 8006610:	f107 0413 	add.w	r4, r7, #19
 8006614:	9404      	str	r4, [sp, #16]
 8006616:	9203      	str	r2, [sp, #12]
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	9100      	str	r1, [sp, #0]
 800661e:	4633      	mov	r3, r6
 8006620:	462a      	mov	r2, r5
 8006622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f00e fb45 	bl	8014cb4 <VL53L1_ipp_hist_process_data>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8006630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006634:	2b00      	cmp	r3, #0
 8006636:	d050      	beq.n	80066da <VL53L1_get_device_results+0x3f4>
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d94d      	bls.n	80066da <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800663e:	2300      	movs	r3, #0
 8006640:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006644:	e045      	b.n	80066d2 <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8006646:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800664a:	224c      	movs	r2, #76	; 0x4c
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	3310      	adds	r3, #16
 8006652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006654:	4413      	add	r3, r2
 8006656:	3304      	adds	r3, #4
 8006658:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	7cfa      	ldrb	r2, [r7, #19]
 8006660:	fbb3 f2f2 	udiv	r2, r3, r2
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	7cfa      	ldrb	r2, [r7, #19]
 800666e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	7cfa      	ldrb	r2, [r7, #19]
 800667c:	fb93 f2f2 	sdiv	r2, r3, r2
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006688:	461a      	mov	r2, r3
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006690:	b29a      	uxth	r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800669a:	461a      	mov	r2, r3
 800669c:	7cfb      	ldrb	r3, [r7, #19]
 800669e:	fb92 f3f3 	sdiv	r3, r2, r3
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80066ac:	461a      	mov	r2, r3
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	7cfa      	ldrb	r2, [r7, #19]
 80066c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80066c8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066cc:	3301      	adds	r3, #1
 80066ce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80066d2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d9b5      	bls.n	8006646 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 80066da:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 80ae 	bne.w	8006840 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 80066e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e6:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80066ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ec:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80066f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f2:	330e      	adds	r3, #14
 80066f4:	461a      	mov	r2, r3
 80066f6:	f006 f922 	bl	800c93e <VL53L1_hist_wrap_dmax>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8006700:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 809d 	bne.w	8006844 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800670a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800670c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671c:	4413      	add	r3, r2
 800671e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006720:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006732:	4413      	add	r3, r2
 8006734:	f103 0208 	add.w	r2, r3, #8
 8006738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f005 fc1d 	bl	800bf7a <VL53L1_hist_phase_consistency_check>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8006746:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800674a:	2b00      	cmp	r3, #0
 800674c:	d17c      	bne.n	8006848 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800674e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006760:	4413      	add	r3, r2
 8006762:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006764:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006768:	4613      	mov	r3, r2
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006776:	4413      	add	r3, r2
 8006778:	f103 0208 	add.w	r2, r3, #8
 800677c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800677e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f006 f883 	bl	800c88e <VL53L1_hist_xmonitor_consistency_check>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 800678e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006792:	2b00      	cmp	r3, #0
 8006794:	d15a      	bne.n	800684c <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8006796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800679c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	2210      	movs	r2, #16
 80067a4:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80067ac:	3301      	adds	r3, #1
 80067ae:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067ba:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80067bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067be:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80067c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d222      	bcs.n	8006810 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80067ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d2:	4413      	add	r3, r2
 80067d4:	3304      	adds	r3, #4
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80067dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067de:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80067e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e2:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80067e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e6:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 80067f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fa:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8006810:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11b      	bne.n	8006850 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681a:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8006824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006826:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800682a:	331c      	adds	r3, #28
 800682c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800682e:	f006 fbbe 	bl	800cfae <VL53L1_hist_copy_results_to_sys_and_core>
 8006832:	e00e      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006834:	bf00      	nop
 8006836:	e00c      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006838:	bf00      	nop
 800683a:	e00a      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800683c:	bf00      	nop
 800683e:	e008      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006840:	bf00      	nop
 8006842:	e006      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006844:	bf00      	nop
 8006846:	e004      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006848:	bf00      	nop
 800684a:	e002      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006850:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8006852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d036      	beq.n	80068c8 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 800685a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685c:	79db      	ldrb	r3, [r3, #7]
 800685e:	2b06      	cmp	r3, #6
 8006860:	d00a      	beq.n	8006878 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 8006862:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 800686a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f006 fc73 	bl	800d158 <VL53L1_dynamic_zone_update>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800687e:	e015      	b.n	80068ac <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8006880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006882:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8006886:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <VL53L1_get_device_results+0x5ac>
 800688e:	2103      	movs	r1, #3
 8006890:	e000      	b.n	8006894 <VL53L1_get_device_results+0x5ae>
 8006892:	2101      	movs	r1, #1
 8006894:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689a:	4413      	add	r3, r2
 800689c:	460a      	mov	r2, r1
 800689e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80068a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068a6:	3301      	adds	r3, #1
 80068a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80068ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9e5      	bls.n	8006880 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80068b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f006 fcc6 	bl	800d24e <VL53L1_multizone_hist_bins_update>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 80068c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f007 f9d3 	bl	800dc7c <VL53L1_dynamic_xtalk_correction_corrector>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 80068dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d043      	beq.n	800696c <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80068e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e03e      	b.n	800696c <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 80068ee:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	4619      	mov	r1, r3
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fc35 	bl	800616a <VL53L1_get_measurement_results>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006906:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800690e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006910:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006914:	4618      	mov	r0, r3
 8006916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006918:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 800691c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800691e:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8006922:	321c      	adds	r2, #28
 8006924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006926:	f000 fc1f 	bl	8007168 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d11c      	bne.n	800696c <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 8006932:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f007 fe24 	bl	800e590 <VL53L1_low_power_auto_setup_manual_calibration>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	2201      	movs	r2, #1
 8006952:	709a      	strb	r2, [r3, #2]
 8006954:	e00a      	b.n	800696c <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006956:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006962:	2b01      	cmp	r3, #1
 8006964:	d102      	bne.n	800696c <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2202      	movs	r2, #2
 800696a:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800696c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006974:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8006976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006978:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800697c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006982:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006988:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 800698a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80b0 	bne.w	8006af4 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 8006994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006996:	2210      	movs	r2, #16
 8006998:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800699c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80069a2:	3301      	adds	r3, #1
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80069ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80069b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80069bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80069c0:	429a      	cmp	r2, r3
 80069c2:	f080 8097 	bcs.w	8006af4 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80069c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80069d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069d8:	4413      	add	r3, r2
 80069da:	3308      	adds	r3, #8
 80069dc:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80069de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e0:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80069e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e4:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80069e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e8:	785a      	ldrb	r2, [r3, #1]
 80069ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ec:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80069ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f0:	789a      	ldrb	r2, [r3, #2]
 80069f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f4:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80069f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f8:	78da      	ldrb	r2, [r3, #3]
 80069fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fc:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8006a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a14:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8006a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a20:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a2c:	7c5a      	ldrb	r2, [r3, #17]
 8006a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a30:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8006a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a34:	7c9a      	ldrb	r2, [r3, #18]
 8006a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a38:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006a40:	e052      	b.n	8006ae8 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006a42:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006a46:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a4c:	204c      	movs	r0, #76	; 0x4c
 8006a4e:	fb00 f303 	mul.w	r3, r0, r3
 8006a52:	440b      	add	r3, r1
 8006a54:	3338      	adds	r3, #56	; 0x38
 8006a56:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006a58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4403      	add	r3, r0
 8006a64:	3308      	adds	r3, #8
 8006a66:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006a68:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006a6c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a72:	204c      	movs	r0, #76	; 0x4c
 8006a74:	fb00 f303 	mul.w	r3, r0, r3
 8006a78:	440b      	add	r3, r1
 8006a7a:	333c      	adds	r3, #60	; 0x3c
 8006a7c:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006a7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006a80:	4613      	mov	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4403      	add	r3, r0
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006a8e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006a92:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a98:	204c      	movs	r0, #76	; 0x4c
 8006a9a:	fb00 f303 	mul.w	r3, r0, r3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3354      	adds	r3, #84	; 0x54
 8006aa2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3310      	adds	r3, #16
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8006ab6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8006aba:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8006abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ac0:	204c      	movs	r0, #76	; 0x4c
 8006ac2:	fb00 f303 	mul.w	r3, r0, r3
 8006ac6:	440b      	add	r3, r1
 8006ac8:	335e      	adds	r3, #94	; 0x5e
 8006aca:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3312      	adds	r3, #18
 8006ada:	4602      	mov	r2, r0
 8006adc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8006ade:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aea:	7c9b      	ldrb	r3, [r3, #18]
 8006aec:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d3a6      	bcc.n	8006a42 <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006af4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006af8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f012 fe58 	bl	80197b0 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006b00:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f003 ff35 	bl	800a978 <VL53L1_check_ll_driver_rd_state>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006b14:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3768      	adds	r7, #104	; 0x68
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b22 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8006b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d107      	bne.n	8006b4a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fe fff3 	bl	8005b2c <VL53L1_init_and_start_range>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0d2      	sub	sp, #328	; 0x148
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b66:	6018      	str	r0, [r3, #0]
 8006b68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b70:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006b78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3318      	adds	r3, #24
 8006b84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006b88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b8c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006b96:	3308      	adds	r3, #8
 8006b98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006b9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ba0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bac:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bb8:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006bbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8006bc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bc4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006bd4:	f107 030c 	add.w	r3, r7, #12
 8006bd8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006c06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c0a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006c12:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10d      	bne.n	8006c36 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006c1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c1e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006c22:	2353      	movs	r3, #83	; 0x53
 8006c24:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006c28:	2188      	movs	r1, #136	; 0x88
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	f00d fe32 	bl	8014894 <VL53L1_ReadMulti>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006c36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006c4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c4e:	785a      	ldrb	r2, [r3, #1]
 8006c50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006c5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c62:	789a      	ldrb	r2, [r3, #2]
 8006c64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006c72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c76:	78da      	ldrb	r2, [r3, #3]
 8006c78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006c86:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	2002      	movs	r0, #2
 8006c90:	f004 fb75 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006c98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006ca6:	234e      	movs	r3, #78	; 0x4e
 8006ca8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006cac:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006cb0:	f107 020c 	add.w	r2, r7, #12
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006cba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006cbe:	2002      	movs	r0, #2
 8006cc0:	f004 fb5d 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006cc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ccc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006cd6:	2350      	movs	r3, #80	; 0x50
 8006cd8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006cdc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006ce0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006ce4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006ce8:	5cd2      	ldrb	r2, [r2, r3]
 8006cea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006cf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0e:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006d12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d16:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006d20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d28:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006d2c:	2351      	movs	r3, #81	; 0x51
 8006d2e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006d32:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d36:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d3a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d3e:	5cd3      	ldrb	r3, [r2, r3]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006d46:	2352      	movs	r3, #82	; 0x52
 8006d48:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006d4c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d50:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d54:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d58:	5cd2      	ldrb	r2, [r2, r3]
 8006d5a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006d5e:	4413      	add	r3, r2
 8006d60:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006d64:	234d      	movs	r3, #77	; 0x4d
 8006d66:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006d6a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d6e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d72:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d76:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006d7a:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006d7c:	2306      	movs	r3, #6
 8006d7e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006d82:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d86:	f107 020c 	add.w	r2, r7, #12
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006d96:	e01a      	b.n	8006dce <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006d98:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006d9c:	2003      	movs	r0, #3
 8006d9e:	f004 fb8d 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 8006da2:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006da4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006da8:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006daa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3206      	adds	r2, #6
 8006db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006dba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006dbe:	3303      	adds	r3, #3
 8006dc0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006dc4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006dce:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006dd2:	2b17      	cmp	r3, #23
 8006dd4:	d9e0      	bls.n	8006d98 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006dd6:	f107 0208 	add.w	r2, r7, #8
 8006dda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006de2:	f248 018d 	movw	r1, #32909	; 0x808d
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	f000 fbd0 	bl	800758c <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006dec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006df0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d118      	bne.n	8006e30 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e02:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006e06:	3318      	adds	r3, #24
 8006e08:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f012 fcdc 	bl	80197cc <memset>
		pdev->bin_rec_pos = 0;
 8006e14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006e22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10b      	bne.n	8006e56 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006e3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e42:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006e46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e4e:	6811      	ldr	r1, [r2, #0]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	f7fd f97e 	bl	8004152 <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006e56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e5a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006e5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e62:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006e6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e6e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006e78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2218      	movs	r2, #24
 8006e84:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006e86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e8a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2218      	movs	r2, #24
 8006e92:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006e94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e98:	78da      	ldrb	r2, [r3, #3]
 8006e9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e9e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006ea8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006eac:	799b      	ldrb	r3, [r3, #6]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006eb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006eb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006ec2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ec6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006ed8:	4413      	add	r3, r2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ee0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006ef0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ef4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006efe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f02:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006f06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006f0e:	6811      	ldr	r1, [r2, #0]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f004 fed4 	bl	800bcbe <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d117      	bne.n	8006f52 <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006f22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f26:	791b      	ldrb	r3, [r3, #4]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f32:	795b      	ldrb	r3, [r3, #5]
 8006f34:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006f36:	4413      	add	r3, r2
 8006f38:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f40:	799a      	ldrb	r2, [r3, #6]
 8006f42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f46:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006f50:	e016      	b.n	8006f80 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f56:	79db      	ldrb	r3, [r3, #7]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f62:	7a1b      	ldrb	r3, [r3, #8]
 8006f64:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006f66:	4413      	add	r3, r2
 8006f68:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f70:	7a5a      	ldrb	r2, [r3, #9]
 8006f72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f76:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006f80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006f94:	e01f      	b.n	8006fd6 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006f96:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006f9a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f9e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006fa2:	6812      	ldr	r2, [r2, #0]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	7b1b      	ldrb	r3, [r3, #12]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2b07      	cmp	r3, #7
 8006fae:	d10d      	bne.n	8006fcc <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006fb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	7adb      	ldrb	r3, [r3, #11]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006fc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006fcc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006fd6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d9db      	bls.n	8006f96 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006fde:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f004 fcdb 	bl	800b99e <VL53L1_decode_timeout>
 8006fe8:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006fea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006ff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ffc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007006:	4618      	mov	r0, r3
 8007008:	f007 fb54 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 800700c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8007010:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007014:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701e:	3301      	adds	r3, #1
 8007020:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8007024:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007028:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8007032:	4619      	mov	r1, r3
 8007034:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800703c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8007040:	f007 fb4f 	bl	800e6e2 <VL53L1_duration_maths>
 8007044:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8007046:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800704a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8007054:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007058:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8007064:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	f007 fc5e 	bl	800e92e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8007072:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007076:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	f008 f875 	bl	800f16a <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007080:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007084:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007088:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800708c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8007094:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007098:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800709c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 80070a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	789b      	ldrb	r3, [r3, #2]
 80070b4:	461a      	mov	r2, r3
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80070c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80070c6:	4413      	add	r3, r2
 80070c8:	3302      	adds	r3, #2
 80070ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80070ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070d2:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80070d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e6:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80070e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80070f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070fa:	2200      	movs	r2, #0
 80070fc:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80070fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007102:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2b11      	cmp	r3, #17
 8007112:	bf8c      	ite	hi
 8007114:	2201      	movhi	r2, #1
 8007116:	2200      	movls	r2, #0
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	2a00      	cmp	r2, #0
 800711c:	d11b      	bne.n	8007156 <VL53L1_get_histogram_bin_data+0x5fe>
 800711e:	2201      	movs	r2, #1
 8007120:	409a      	lsls	r2, r3
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <VL53L1_get_histogram_bin_data+0x60c>)
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d010      	beq.n	8007156 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8007134:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007138:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	b2da      	uxtb	r2, r3
 8007148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800714c:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 800714e:	23fa      	movs	r3, #250	; 0xfa
 8007150:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8007154:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007156:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800715a:	4618      	mov	r0, r3
 800715c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	0002200e 	.word	0x0002200e

08007168 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8007168:	b480      	push	{r7}
 800716a:	b08b      	sub	sp, #44	; 0x2c
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	78da      	ldrb	r2, [r3, #3]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2204      	movs	r2, #4
 800719c:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2201      	movs	r2, #1
 80071a2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	8a1b      	ldrh	r3, [r3, #16]
 80071a8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	8a9b      	ldrh	r3, [r3, #20]
 80071ae:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	8a5b      	ldrh	r3, [r3, #18]
 80071b4:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071bc:	e00b      	b.n	80071d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4413      	add	r3, r2
 80071c8:	2200      	movs	r2, #0
 80071ca:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80071cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d0:	3301      	adds	r3, #1
 80071d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d9ef      	bls.n	80071be <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ea:	e0fe      	b.n	80073ea <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071f2:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	2200      	movs	r2, #0
 80071f8:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	78db      	ldrb	r3, [r3, #3]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800720a:	2b09      	cmp	r3, #9
 800720c:	d104      	bne.n	8007218 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	2213      	movs	r2, #19
 8007212:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8007216:	e007      	b.n	8007228 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2200      	movs	r2, #0
 800722c:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2200      	movs	r2, #0
 8007232:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	2200      	movs	r2, #0
 8007238:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	2200      	movs	r2, #0
 800723e:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	2200      	movs	r2, #0
 8007244:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	2200      	movs	r2, #0
 800724a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d05c      	beq.n	8007312 <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8007258:	e0a8      	b.n	80073ac <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	789b      	ldrb	r3, [r3, #2]
 800725e:	2b07      	cmp	r3, #7
 8007260:	d103      	bne.n	800726a <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	8a7a      	ldrh	r2, [r7, #18]
 8007266:	82da      	strh	r2, [r3, #22]
 8007268:	e00b      	b.n	8007282 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	789b      	ldrb	r3, [r3, #2]
 800726e:	2b08      	cmp	r3, #8
 8007270:	d103      	bne.n	800727a <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	8aba      	ldrh	r2, [r7, #20]
 8007276:	82da      	strh	r2, [r3, #22]
 8007278:	e003      	b.n	8007282 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	8afa      	ldrh	r2, [r7, #22]
 8007286:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	895b      	ldrh	r3, [r3, #10]
 800729c:	015b      	lsls	r3, r3, #5
 800729e:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a6:	d302      	bcc.n	80072ae <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80072a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072ac:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80072c4:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d6:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da01      	bge.n	80072e2 <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 80072de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80072e2:	12db      	asrs	r3, r3, #11
 80072e4:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b21a      	sxth	r2, r3
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007310:	e04c      	b.n	80073ac <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007328:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	8bdb      	ldrh	r3, [r3, #30]
 8007336:	015b      	lsls	r3, r3, #5
 8007338:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d302      	bcc.n	8007348 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8007342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007346:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	b29a      	uxth	r2, r3
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800735e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007370:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	da01      	bge.n	800737c <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8007378:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800737c:	12db      	asrs	r3, r3, #11
 800737e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	b21a      	sxth	r2, r3
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80073aa:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	334c      	adds	r3, #76	; 0x4c
 80073de:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e4:	3301      	adds	r3, #1
 80073e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	f67f aefc 	bls.w	80071ec <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2b11      	cmp	r3, #17
 8007404:	bf8c      	ite	hi
 8007406:	2201      	movhi	r2, #1
 8007408:	2200      	movls	r2, #0
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	2a00      	cmp	r2, #0
 800740e:	d116      	bne.n	800743e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8007416:	4013      	ands	r3, r2
 8007418:	2b00      	cmp	r3, #0
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
 800741e:	2300      	moveq	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00b      	beq.n	800743e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	b2da      	uxtb	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 800743c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800743e:	bf00      	nop
 8007440:	372c      	adds	r7, #44	; 0x2c
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	0002200e 	.word	0x0002200e

08007450 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3318      	adds	r3, #24
 8007462:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	332c      	adds	r3, #44	; 0x2c
 8007468:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b05      	cmp	r3, #5
 8007470:	d109      	bne.n	8007486 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8007484:	e003      	b.n	800748e <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800748e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007492:	4618      	mov	r0, r3
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3318      	adds	r3, #24
 80074b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80074ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b088      	sub	sp, #32
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	607b      	str	r3, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	72fb      	strb	r3, [r7, #11]
 80074d8:	4613      	mov	r3, r2
 80074da:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074dc:	2300      	movs	r3, #0
 80074de:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3318      	adds	r3, #24
 80074e4:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80074ec:	3308      	adds	r3, #8
 80074ee:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d006      	beq.n	8007504 <VL53L1_get_dmax_calibration_data+0x3a>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	dc3e      	bgt.n	8007578 <VL53L1_get_dmax_calibration_data+0xae>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d034      	beq.n	8007568 <VL53L1_get_dmax_calibration_data+0x9e>
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d02a      	beq.n	8007558 <VL53L1_get_dmax_calibration_data+0x8e>
 8007502:	e039      	b.n	8007578 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8007504:	7aba      	ldrb	r2, [r7, #10]
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 800751e:	7aba      	ldrb	r2, [r7, #10]
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 800753e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007554:	811a      	strh	r2, [r3, #8]
	break;
 8007556:	e012      	b.n	800757e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800755c:	220a      	movs	r2, #10
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f012 f925 	bl	80197b0 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007566:	e00a      	b.n	800757e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 800756c:	220a      	movs	r2, #10
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f012 f91d 	bl	80197b0 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007576:	e002      	b.n	800757e <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007578:	23fc      	movs	r3, #252	; 0xfc
 800757a:	77fb      	strb	r3, [r7, #31]
	break;
 800757c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800757e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	; 0x24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	460b      	mov	r3, r1
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800759a:	2300      	movs	r3, #0
 800759c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3318      	adds	r3, #24
 80075a2:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80075aa:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80075b2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80075b4:	897b      	ldrh	r3, [r7, #10]
 80075b6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80075ba:	2bbe      	cmp	r3, #190	; 0xbe
 80075bc:	f200 86fc 	bhi.w	80083b8 <VL53L1_get_tuning_parm+0xe2c>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <VL53L1_get_tuning_parm+0x3c>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080078c5 	.word	0x080078c5
 80075cc:	080078d5 	.word	0x080078d5
 80075d0:	080078e5 	.word	0x080078e5
 80075d4:	080078f5 	.word	0x080078f5
 80075d8:	08007903 	.word	0x08007903
 80075dc:	08007911 	.word	0x08007911
 80075e0:	0800791f 	.word	0x0800791f
 80075e4:	0800792d 	.word	0x0800792d
 80075e8:	0800793b 	.word	0x0800793b
 80075ec:	08007949 	.word	0x08007949
 80075f0:	08007957 	.word	0x08007957
 80075f4:	08007963 	.word	0x08007963
 80075f8:	08007971 	.word	0x08007971
 80075fc:	0800797f 	.word	0x0800797f
 8007600:	0800798b 	.word	0x0800798b
 8007604:	08007999 	.word	0x08007999
 8007608:	080079a7 	.word	0x080079a7
 800760c:	080079b7 	.word	0x080079b7
 8007610:	080079c7 	.word	0x080079c7
 8007614:	080079d5 	.word	0x080079d5
 8007618:	080079e5 	.word	0x080079e5
 800761c:	080079f3 	.word	0x080079f3
 8007620:	08007a03 	.word	0x08007a03
 8007624:	08007a13 	.word	0x08007a13
 8007628:	08007a23 	.word	0x08007a23
 800762c:	08007a33 	.word	0x08007a33
 8007630:	08007a43 	.word	0x08007a43
 8007634:	08007a53 	.word	0x08007a53
 8007638:	08007a63 	.word	0x08007a63
 800763c:	08007a73 	.word	0x08007a73
 8007640:	08007a83 	.word	0x08007a83
 8007644:	08007a91 	.word	0x08007a91
 8007648:	08007aa1 	.word	0x08007aa1
 800764c:	08007ab1 	.word	0x08007ab1
 8007650:	08007ac1 	.word	0x08007ac1
 8007654:	08007ad1 	.word	0x08007ad1
 8007658:	08007ae1 	.word	0x08007ae1
 800765c:	08007af1 	.word	0x08007af1
 8007660:	08007b01 	.word	0x08007b01
 8007664:	08007b11 	.word	0x08007b11
 8007668:	08007b21 	.word	0x08007b21
 800766c:	08007b31 	.word	0x08007b31
 8007670:	08007b41 	.word	0x08007b41
 8007674:	08007b51 	.word	0x08007b51
 8007678:	08007b61 	.word	0x08007b61
 800767c:	08007b71 	.word	0x08007b71
 8007680:	08007b81 	.word	0x08007b81
 8007684:	08007b91 	.word	0x08007b91
 8007688:	08007ba1 	.word	0x08007ba1
 800768c:	08007bb1 	.word	0x08007bb1
 8007690:	08007bc1 	.word	0x08007bc1
 8007694:	08007bcf 	.word	0x08007bcf
 8007698:	08007bdd 	.word	0x08007bdd
 800769c:	08007beb 	.word	0x08007beb
 80076a0:	08007bf9 	.word	0x08007bf9
 80076a4:	08007c07 	.word	0x08007c07
 80076a8:	08007c15 	.word	0x08007c15
 80076ac:	08007c23 	.word	0x08007c23
 80076b0:	08007c31 	.word	0x08007c31
 80076b4:	08007c3f 	.word	0x08007c3f
 80076b8:	08007c4d 	.word	0x08007c4d
 80076bc:	08007c5b 	.word	0x08007c5b
 80076c0:	08007c69 	.word	0x08007c69
 80076c4:	08007c77 	.word	0x08007c77
 80076c8:	08007c85 	.word	0x08007c85
 80076cc:	08007c93 	.word	0x08007c93
 80076d0:	08007ca1 	.word	0x08007ca1
 80076d4:	08007caf 	.word	0x08007caf
 80076d8:	08007cbd 	.word	0x08007cbd
 80076dc:	08007ccb 	.word	0x08007ccb
 80076e0:	08007cd9 	.word	0x08007cd9
 80076e4:	08007ce7 	.word	0x08007ce7
 80076e8:	08007cf5 	.word	0x08007cf5
 80076ec:	08007d03 	.word	0x08007d03
 80076f0:	08007d0f 	.word	0x08007d0f
 80076f4:	08007d1d 	.word	0x08007d1d
 80076f8:	08007d2b 	.word	0x08007d2b
 80076fc:	08007d37 	.word	0x08007d37
 8007700:	08007d43 	.word	0x08007d43
 8007704:	08007d4f 	.word	0x08007d4f
 8007708:	08007d5b 	.word	0x08007d5b
 800770c:	08007d67 	.word	0x08007d67
 8007710:	08007d73 	.word	0x08007d73
 8007714:	08007d81 	.word	0x08007d81
 8007718:	08007d8f 	.word	0x08007d8f
 800771c:	08007d9d 	.word	0x08007d9d
 8007720:	08007dab 	.word	0x08007dab
 8007724:	08007db9 	.word	0x08007db9
 8007728:	08007dc7 	.word	0x08007dc7
 800772c:	08007dd5 	.word	0x08007dd5
 8007730:	08007de3 	.word	0x08007de3
 8007734:	08007df1 	.word	0x08007df1
 8007738:	08007dff 	.word	0x08007dff
 800773c:	08007e0d 	.word	0x08007e0d
 8007740:	08007e1b 	.word	0x08007e1b
 8007744:	08007e29 	.word	0x08007e29
 8007748:	08007e37 	.word	0x08007e37
 800774c:	08007e45 	.word	0x08007e45
 8007750:	08007e53 	.word	0x08007e53
 8007754:	08007e61 	.word	0x08007e61
 8007758:	08007e6f 	.word	0x08007e6f
 800775c:	08007e7d 	.word	0x08007e7d
 8007760:	08007e8b 	.word	0x08007e8b
 8007764:	08007e99 	.word	0x08007e99
 8007768:	08007ea7 	.word	0x08007ea7
 800776c:	08007eb5 	.word	0x08007eb5
 8007770:	08007ec3 	.word	0x08007ec3
 8007774:	08007ed1 	.word	0x08007ed1
 8007778:	08007edf 	.word	0x08007edf
 800777c:	08007eed 	.word	0x08007eed
 8007780:	08007efb 	.word	0x08007efb
 8007784:	08007f09 	.word	0x08007f09
 8007788:	08007f17 	.word	0x08007f17
 800778c:	08007f25 	.word	0x08007f25
 8007790:	08007f33 	.word	0x08007f33
 8007794:	08007f41 	.word	0x08007f41
 8007798:	08007f4f 	.word	0x08007f4f
 800779c:	08007f5d 	.word	0x08007f5d
 80077a0:	08007f6b 	.word	0x08007f6b
 80077a4:	08007f7d 	.word	0x08007f7d
 80077a8:	08007f8f 	.word	0x08007f8f
 80077ac:	08007fa1 	.word	0x08007fa1
 80077b0:	08007fb3 	.word	0x08007fb3
 80077b4:	08007fc5 	.word	0x08007fc5
 80077b8:	08007fd7 	.word	0x08007fd7
 80077bc:	08007fe9 	.word	0x08007fe9
 80077c0:	08007ffb 	.word	0x08007ffb
 80077c4:	0800800d 	.word	0x0800800d
 80077c8:	0800801f 	.word	0x0800801f
 80077cc:	08008031 	.word	0x08008031
 80077d0:	08008043 	.word	0x08008043
 80077d4:	08008055 	.word	0x08008055
 80077d8:	08008067 	.word	0x08008067
 80077dc:	08008079 	.word	0x08008079
 80077e0:	0800808b 	.word	0x0800808b
 80077e4:	0800809d 	.word	0x0800809d
 80077e8:	080080af 	.word	0x080080af
 80077ec:	080080c1 	.word	0x080080c1
 80077f0:	080080cf 	.word	0x080080cf
 80077f4:	080080dd 	.word	0x080080dd
 80077f8:	080080eb 	.word	0x080080eb
 80077fc:	080080f9 	.word	0x080080f9
 8007800:	08008107 	.word	0x08008107
 8007804:	08008115 	.word	0x08008115
 8007808:	08008123 	.word	0x08008123
 800780c:	08008135 	.word	0x08008135
 8007810:	08008143 	.word	0x08008143
 8007814:	08008151 	.word	0x08008151
 8007818:	0800815f 	.word	0x0800815f
 800781c:	0800816d 	.word	0x0800816d
 8007820:	0800817b 	.word	0x0800817b
 8007824:	08008189 	.word	0x08008189
 8007828:	08008197 	.word	0x08008197
 800782c:	080081a5 	.word	0x080081a5
 8007830:	080081b3 	.word	0x080081b3
 8007834:	080081c1 	.word	0x080081c1
 8007838:	080081cf 	.word	0x080081cf
 800783c:	080081dd 	.word	0x080081dd
 8007840:	080081eb 	.word	0x080081eb
 8007844:	080081f9 	.word	0x080081f9
 8007848:	08008207 	.word	0x08008207
 800784c:	08008215 	.word	0x08008215
 8007850:	08008223 	.word	0x08008223
 8007854:	08008231 	.word	0x08008231
 8007858:	0800823f 	.word	0x0800823f
 800785c:	0800824d 	.word	0x0800824d
 8007860:	0800825b 	.word	0x0800825b
 8007864:	08008269 	.word	0x08008269
 8007868:	08008277 	.word	0x08008277
 800786c:	08008285 	.word	0x08008285
 8007870:	08008293 	.word	0x08008293
 8007874:	080082a1 	.word	0x080082a1
 8007878:	080082af 	.word	0x080082af
 800787c:	080082bd 	.word	0x080082bd
 8007880:	080082cb 	.word	0x080082cb
 8007884:	080082d9 	.word	0x080082d9
 8007888:	080082e7 	.word	0x080082e7
 800788c:	080082f5 	.word	0x080082f5
 8007890:	08008303 	.word	0x08008303
 8007894:	08008311 	.word	0x08008311
 8007898:	0800831f 	.word	0x0800831f
 800789c:	0800832d 	.word	0x0800832d
 80078a0:	0800833b 	.word	0x0800833b
 80078a4:	08008349 	.word	0x08008349
 80078a8:	08008357 	.word	0x08008357
 80078ac:	08008365 	.word	0x08008365
 80078b0:	08008373 	.word	0x08008373
 80078b4:	08008381 	.word	0x08008381
 80078b8:	0800838f 	.word	0x0800838f
 80078bc:	0800839d 	.word	0x0800839d
 80078c0:	080083ab 	.word	0x080083ab

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80078ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
	break;
 80078d0:	f000 bd79 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80078da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	601a      	str	r2, [r3, #0]
	break;
 80078e0:	f000 bd71 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 80078ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
	break;
 80078f0:	f000 bd69 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
	break;
 80078fe:	f000 bd62 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
	break;
 800790c:	f000 bd5b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	789b      	ldrb	r3, [r3, #2]
 8007914:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
	break;
 800791a:	f000 bd54 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	78db      	ldrb	r3, [r3, #3]
 8007922:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
	break;
 8007928:	f000 bd4d 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	791b      	ldrb	r3, [r3, #4]
 8007930:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
	break;
 8007936:	f000 bd46 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
	break;
 8007944:	f000 bd3f 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	799b      	ldrb	r3, [r3, #6]
 800794c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
	break;
 8007952:	f000 bd38 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
	break;
 800795e:	f000 bd32 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	891b      	ldrh	r3, [r3, #8]
 8007966:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	break;
 800796c:	f000 bd2b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	8a1b      	ldrh	r3, [r3, #16]
 8007974:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
	break;
 800797a:	f000 bd24 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
	break;
 8007986:	f000 bd1e 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	7e1b      	ldrb	r3, [r3, #24]
 800798e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
	break;
 8007994:	f000 bd17 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	8b5b      	ldrh	r3, [r3, #26]
 800799c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
	break;
 80079a2:	f000 bd10 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80079ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
	break;
 80079b2:	f000 bd08 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80079bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
	break;
 80079c2:	f000 bd00 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	601a      	str	r2, [r3, #0]
	break;
 80079d0:	f000 bcf9 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80079da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]
	break;
 80079e0:	f000 bcf1 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
	break;
 80079ee:	f000 bcea 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80079f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
	break;
 80079fe:	f000 bce2 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007a08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
	break;
 8007a0e:	f000 bcda 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007a18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
	break;
 8007a1e:	f000 bcd2 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007a28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
	break;
 8007a2e:	f000 bcca 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	601a      	str	r2, [r3, #0]
	break;
 8007a3e:	f000 bcc2 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007a48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
	break;
 8007a4e:	f000 bcba 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
	break;
 8007a5e:	f000 bcb2 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007a68:	461a      	mov	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
	break;
 8007a6e:	f000 bcaa 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8007a78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
	break;
 8007a7e:	f000 bca2 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	break;
 8007a8c:	f000 bc9b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	break;
 8007a9c:	f000 bc93 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	break;
 8007aac:	f000 bc8b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8007ab6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
	break;
 8007abc:	f000 bc83 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007ac6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]
	break;
 8007acc:	f000 bc7b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007ad6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]
	break;
 8007adc:	f000 bc73 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007ae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
	break;
 8007aec:	f000 bc6b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007af6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
	break;
 8007afc:	f000 bc63 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007b06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
	break;
 8007b0c:	f000 bc5b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
	break;
 8007b1c:	f000 bc53 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007b26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	601a      	str	r2, [r3, #0]
	break;
 8007b2c:	f000 bc4b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007b36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]
	break;
 8007b3c:	f000 bc43 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
	break;
 8007b4c:	f000 bc3b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007b56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	601a      	str	r2, [r3, #0]
	break;
 8007b5c:	f000 bc33 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	601a      	str	r2, [r3, #0]
	break;
 8007b6c:	f000 bc2b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
	break;
 8007b7c:	f000 bc23 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007b86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]
	break;
 8007b8c:	f000 bc1b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8007b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
	break;
 8007b9c:	f000 bc13 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8007ba6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
	break;
 8007bac:	f000 bc0b 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8007bb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
	break;
 8007bbc:	f000 bc03 	b.w	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007bc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
	break;
 8007bcc:	e3fb      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007bd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
	break;
 8007bda:	e3f4      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8007be2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]
	break;
 8007be8:	e3ed      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007bf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
	break;
 8007bf6:	e3e6      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8007bfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
	break;
 8007c04:	e3df      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007c0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
	break;
 8007c12:	e3d8      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007c1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	break;
 8007c20:	e3d1      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007c28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
	break;
 8007c2e:	e3ca      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007c36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]
	break;
 8007c3c:	e3c3      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007c44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	601a      	str	r2, [r3, #0]
	break;
 8007c4a:	e3bc      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007c52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]
	break;
 8007c58:	e3b5      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007c60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	break;
 8007c66:	e3ae      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8007c6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]
	break;
 8007c74:	e3a7      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007c7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
	break;
 8007c82:	e3a0      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007c8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	break;
 8007c90:	e399      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007c98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
	break;
 8007c9e:	e392      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007ca6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
	break;
 8007cac:	e38b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007cb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
	break;
 8007cba:	e384      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007cc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
	break;
 8007cc8:	e37d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8007cd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	break;
 8007cd6:	e376      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8007cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	601a      	str	r2, [r3, #0]
	break;
 8007ce4:	e36f      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007cec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	601a      	str	r2, [r3, #0]
	break;
 8007cf2:	e368      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007cfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
	break;
 8007d00:	e361      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
	break;
 8007d0c:	e35b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007d14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
	break;
 8007d1a:	e354      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	601a      	str	r2, [r3, #0]
	break;
 8007d28:	e34d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	break;
 8007d34:	e347      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	601a      	str	r2, [r3, #0]
	break;
 8007d40:	e341      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	8adb      	ldrh	r3, [r3, #22]
 8007d46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
	break;
 8007d4c:	e33b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	8b1b      	ldrh	r3, [r3, #24]
 8007d52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
	break;
 8007d58:	e335      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
	break;
 8007d64:	e32f      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
	break;
 8007d70:	e329      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007d78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
	break;
 8007d7e:	e322      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007d86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
	break;
 8007d8c:	e31b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
	break;
 8007d9a:	e314      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007da2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
	break;
 8007da8:	e30d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007db0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
	break;
 8007db6:	e306      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007dbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
	break;
 8007dc4:	e2ff      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007dcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	601a      	str	r2, [r3, #0]
	break;
 8007dd2:	e2f8      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007dda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
	break;
 8007de0:	e2f1      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007de8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
	break;
 8007dee:	e2ea      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007df6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
	break;
 8007dfc:	e2e3      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007e04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	601a      	str	r2, [r3, #0]
	break;
 8007e0a:	e2dc      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007e12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	601a      	str	r2, [r3, #0]
	break;
 8007e18:	e2d5      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007e20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
	break;
 8007e26:	e2ce      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007e2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
	break;
 8007e34:	e2c7      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
	break;
 8007e42:	e2c0      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007e4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	break;
 8007e50:	e2b9      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007e58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
	break;
 8007e5e:	e2b2      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007e66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
	break;
 8007e6c:	e2ab      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007e74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
	break;
 8007e7a:	e2a4      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007e82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
	break;
 8007e88:	e29d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007e90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
	break;
 8007e96:	e296      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007e9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
	break;
 8007ea4:	e28f      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007eac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
	break;
 8007eb2:	e288      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007eba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
	break;
 8007ec0:	e281      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007ec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
	break;
 8007ece:	e27a      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007ed6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
	break;
 8007edc:	e273      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
	break;
 8007eea:	e26c      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
	break;
 8007ef8:	e265      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
	break;
 8007f06:	e25e      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
	break;
 8007f14:	e257      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007f1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
	break;
 8007f22:	e250      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	break;
 8007f30:	e249      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
	break;
 8007f3e:	e242      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007f46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
	break;
 8007f4c:	e23b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
	break;
 8007f5a:	e234      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007f62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
	break;
 8007f68:	e22d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f70:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007f74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	601a      	str	r2, [r3, #0]
	break;
 8007f7a:	e224      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	601a      	str	r2, [r3, #0]
	break;
 8007f8c:	e21b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f94:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
	break;
 8007f9e:	e212      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	601a      	str	r2, [r3, #0]
	break;
 8007fb0:	e209      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007fbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	601a      	str	r2, [r3, #0]
	break;
 8007fc2:	e200      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fca:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
	break;
 8007fd4:	e1f7      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	break;
 8007fe6:	e1ee      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fee:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	601a      	str	r2, [r3, #0]
	break;
 8007ff8:	e1e5      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008000:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	601a      	str	r2, [r3, #0]
	break;
 800800a:	e1dc      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008012:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8008016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
	break;
 800801c:	e1d3      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008024:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8008028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
	break;
 800802e:	e1ca      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800803a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
	break;
 8008040:	e1c1      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008048:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800804c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
	break;
 8008052:	e1b8      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	break;
 8008064:	e1af      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	break;
 8008076:	e1a6      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	601a      	str	r2, [r3, #0]
	break;
 8008088:	e19d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008090:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008094:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
	break;
 800809a:	e194      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 80080a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
	break;
 80080ac:	e18b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80080b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
	break;
 80080be:	e182      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80080c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
	break;
 80080cc:	e17b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80080d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
	break;
 80080da:	e174      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80080e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
	break;
 80080e8:	e16d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80080f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
	break;
 80080f6:	e166      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80080fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
	break;
 8008104:	e15f      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800810c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]
	break;
 8008112:	e158      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800811a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
	break;
 8008120:	e151      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800812c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	601a      	str	r2, [r3, #0]
	break;
 8008132:	e148      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800813a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	601a      	str	r2, [r3, #0]
	break;
 8008140:	e141      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8008148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
	break;
 800814e:	e13a      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8008156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	601a      	str	r2, [r3, #0]
	break;
 800815c:	e133      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8008164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
	break;
 800816a:	e12c      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8008172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
	break;
 8008178:	e125      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8008180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
	break;
 8008186:	e11e      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800818e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
	break;
 8008194:	e117      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800819c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
	break;
 80081a2:	e110      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80081aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
	break;
 80081b0:	e109      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80081b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
	break;
 80081be:	e102      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80081c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	601a      	str	r2, [r3, #0]
	break;
 80081cc:	e0fb      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80081d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
	break;
 80081da:	e0f4      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80081e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]
	break;
 80081e8:	e0ed      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 80081f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
	break;
 80081f6:	e0e6      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 80081fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
	break;
 8008204:	e0df      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800820c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
	break;
 8008212:	e0d8      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800821a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
	break;
 8008220:	e0d1      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8008228:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
	break;
 800822e:	e0ca      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8008236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	601a      	str	r2, [r3, #0]
	break;
 800823c:	e0c3      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8008244:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
	break;
 800824a:	e0bc      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 8008252:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
	break;
 8008258:	e0b5      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8008260:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
	break;
 8008266:	e0ae      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800826e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
	break;
 8008274:	e0a7      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800827c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
	break;
 8008282:	e0a0      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800828a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	601a      	str	r2, [r3, #0]
	break;
 8008290:	e099      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8008298:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
	break;
 800829e:	e092      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80082a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
	break;
 80082ac:	e08b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 80082b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
	break;
 80082ba:	e084      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 80082c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	601a      	str	r2, [r3, #0]
	break;
 80082c8:	e07d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 80082d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
	break;
 80082d6:	e076      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 80082de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
	break;
 80082e4:	e06f      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 80082ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
	break;
 80082f2:	e068      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80082fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	601a      	str	r2, [r3, #0]
	break;
 8008300:	e061      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008308:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
	break;
 800830e:	e05a      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8008316:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	601a      	str	r2, [r3, #0]
	break;
 800831c:	e053      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8008324:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
	break;
 800832a:	e04c      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 8008332:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]
	break;
 8008338:	e045      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8008340:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
	break;
 8008346:	e03e      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800834e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
	break;
 8008354:	e037      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800835c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
	break;
 8008362:	e030      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800836a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
	break;
 8008370:	e029      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8008378:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	601a      	str	r2, [r3, #0]
	break;
 800837e:	e022      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 8008386:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	601a      	str	r2, [r3, #0]
	break;
 800838c:	e01b      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 8008394:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
	break;
 800839a:	e014      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80083a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]
	break;
 80083a8:	e00d      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80083b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
	break;
 80083b6:	e006      	b.n	80083c6 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80083be:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80083c0:	23fc      	movs	r3, #252	; 0xfc
 80083c2:	77fb      	strb	r3, [r7, #31]
	break;
 80083c4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80083c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3724      	adds	r7, #36	; 0x24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop

080083d8 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3318      	adds	r3, #24
 80083e8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80083f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3318      	adds	r3, #24
 8008416:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841e:	2200      	movs	r2, #0
 8008420:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3318      	adds	r3, #24
 8008444:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844c:	2201      	movs	r2, #1
 800844e:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3318      	adds	r3, #24
 8008472:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847a:	2200      	movs	r2, #0
 800847c:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3318      	adds	r3, #24
 80084a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80084ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3318      	adds	r3, #24
 80084ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80084dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2208      	movs	r2, #8
 80084fc:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220b      	movs	r2, #11
 8008502:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800850a:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008512:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800851a:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008522:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2212      	movs	r2, #18
 800854a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220f      	movs	r2, #15
 8008550:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2202      	movs	r2, #2
 8008556:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800855e:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220c      	movs	r2, #12
 8008564:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	895b      	ldrh	r3, [r3, #10]
 8008588:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	895b      	ldrh	r3, [r3, #10]
 80085a6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085c6:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2240      	movs	r2, #64	; 0x40
 80085d2:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d103      	bne.n	80085f8 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	741a      	strb	r2, [r3, #16]
 80085f6:	e002      	b.n	80085fe <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2201      	movs	r2, #1
 80085fc:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80085fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d114      	bne.n	8008630 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800860a:	2b01      	cmp	r3, #1
 800860c:	d110      	bne.n	8008630 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	7d9b      	ldrb	r3, [r3, #22]
 8008622:	f003 f879 	bl	800b718 <VL53L1_calc_range_ignore_threshold>
 8008626:	4603      	mov	r3, r0
 8008628:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	831a      	strh	r2, [r3, #24]
 800862e:	e002      	b.n	8008636 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800863c:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2232      	movs	r2, #50	; 0x32
 8008642:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800864a:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	228c      	movs	r2, #140	; 0x8c
 8008650:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008670:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008678:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2207      	movs	r2, #7
 800867e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008686:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f242 7210 	movw	r2, #10000	; 0x2710
 800868e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8008696:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2246      	movs	r2, #70	; 0x46
 800869c:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80086a4:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	228c      	movs	r2, #140	; 0x8c
 80086aa:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80086ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80086ce:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80086d6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086de:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086e6:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2208      	movs	r2, #8
 80086ec:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2228      	movs	r2, #40	; 0x28
 80086f2:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2209      	movs	r2, #9
 80086f8:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80086fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800871c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008724:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800872c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008734:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2210      	movs	r2, #16
 800873a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2208      	movs	r2, #8
 8008740:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	4603      	mov	r3, r0
 800875a:	6039      	str	r1, [r7, #0]
 800875c:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2204      	movs	r2, #4
 8008766:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2201      	movs	r2, #1
 800876c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2202      	movs	r2, #2
 8008778:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2201      	movs	r2, #1
 800877e:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2250      	movs	r2, #80	; 0x50
 8008784:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2270      	movs	r2, #112	; 0x70
 800878a:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f241 023d 	movw	r2, #4157	; 0x103d
 8008792:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2210      	movs	r2, #16
 8008798:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2232      	movs	r2, #50	; 0x32
 800879e:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2264      	movs	r2, #100	; 0x64
 80087a4:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2201      	movs	r2, #1
 80087aa:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	22a0      	movs	r2, #160	; 0xa0
 80087b0:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2200      	movs	r2, #0
 80087b6:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80087be:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2208      	movs	r2, #8
 80087c4:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2288      	movs	r2, #136	; 0x88
 80087cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2208      	movs	r2, #8
 80087d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e6:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	22fa      	movs	r2, #250	; 0xfa
 80087ec:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	79fa      	ldrb	r2, [r7, #7]
 80087f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80087fc:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2232      	movs	r2, #50	; 0x32
 8008802:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800880a:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	228c      	movs	r2, #140	; 0x8c
 8008810:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2250      	movs	r2, #80	; 0x50
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2232      	movs	r2, #50	; 0x32
 800881e:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8008820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	220e      	movs	r2, #14
 8008846:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f642 7294 	movw	r2, #12180	; 0x2f94
 800884e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	220e      	movs	r2, #14
 8008854:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	220a      	movs	r2, #10
 800885a:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2206      	movs	r2, #6
 8008860:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	220e      	movs	r2, #14
 8008866:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	220a      	movs	r2, #10
 800886c:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2206      	movs	r2, #6
 8008872:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2209      	movs	r2, #9
 8008878:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2205      	movs	r2, #5
 800887e:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2203      	movs	r2, #3
 8008884:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2206      	movs	r2, #6
 800888a:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2206      	movs	r2, #6
 8008890:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2206      	movs	r2, #6
 8008896:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2221      	movs	r2, #33	; 0x21
 80088a2:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	223c      	movs	r2, #60	; 0x3c
 80088b4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	223c      	movs	r2, #60	; 0x3c
 80088ba:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	223c      	movs	r2, #60	; 0x3c
 80088c0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2280      	movs	r2, #128	; 0x80
 80088c6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2280      	movs	r2, #128	; 0x80
 80088cc:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2208      	movs	r2, #8
 80088d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2210      	movs	r2, #16
 80088e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008912:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800891a:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008922:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800892a:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008932:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f643 2298 	movw	r2, #15000	; 0x3a98
 800893a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008942:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f241 7270 	movw	r2, #6000	; 0x1770
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008952:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f242 3228 	movw	r2, #9000	; 0x2328
 800895a:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f241 7270 	movw	r2, #6000	; 0x1770
 8008962:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008972:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800897a:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008982:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800898a:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f24f 6218 	movw	r2, #63000	; 0xf618
 8008992:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800899a:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80089a2:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80089aa:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80089b8:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80089c0:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80089d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2206      	movs	r2, #6
 80089e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80089f2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f640 22be 	movw	r2, #2750	; 0xabe
 80089fc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	22fa      	movs	r2, #250	; 0xfa
 8008a04:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a0e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a18:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008a22:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a2c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008a36:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008a40:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	22c8      	movs	r2, #200	; 0xc8
 8008a48:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	22fa      	movs	r2, #250	; 0xfa
 8008a50:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a5a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f640 1206 	movw	r2, #2310	; 0x906
 8008a64:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f640 1206 	movw	r2, #2310	; 0x906
 8008a76:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008a80:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008a8a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008a94:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008a9e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f641 022e 	movw	r2, #6190	; 0x182e
 8008aa8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f641 3230 	movw	r2, #6960	; 0x1b30
 8008ac2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f641 022e 	movw	r2, #6190	; 0x182e
 8008acc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	22fa      	movs	r2, #250	; 0xfa
 8008ad4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008ade:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008ae8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f241 1294 	movw	r2, #4500	; 0x1194
 8008af2:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008afc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	22c8      	movs	r2, #200	; 0xc8
 8008b04:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f640 3222 	movw	r2, #2850	; 0xb22
 8008b0e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008b18:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f640 721e 	movw	r2, #3870	; 0xf1e
 8008b32:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f241 222a 	movw	r2, #4650	; 0x122a
 8008b3c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008b46:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008b68:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008b72:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f641 1288 	movw	r2, #6536	; 0x1988
 8008b8c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8008b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008bb2:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2238      	movs	r2, #56	; 0x38
 8008bb8:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2270      	movs	r2, #112	; 0x70
 8008bc4:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2210      	movs	r2, #16
 8008bca:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2264      	movs	r2, #100	; 0x64
 8008bd0:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bd8:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	220f      	movs	r2, #15
 8008bde:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2234      	movs	r2, #52	; 0x34
 8008be4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	22c8      	movs	r2, #200	; 0xc8
 8008bea:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008bf2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008bfa:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008c24:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2211      	movs	r2, #17
 8008c66:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2202      	movs	r2, #2
 8008c78:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	22ff      	movs	r2, #255	; 0xff
 8008cc0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	220b      	movs	r2, #11
 8008cfa:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220d      	movs	r2, #13
 8008d0e:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008d36:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2238      	movs	r2, #56	; 0x38
 8008d42:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	22ff      	movs	r2, #255	; 0xff
 8008d48:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	221a      	movs	r2, #26
 8008d5a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2220      	movs	r2, #32
 8008d66:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	22cc      	movs	r2, #204	; 0xcc
 8008d72:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	220b      	movs	r2, #11
 8008d78:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	22f5      	movs	r2, #245	; 0xf5
 8008d84:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2209      	movs	r2, #9
 8008d8a:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2208      	movs	r2, #8
 8008da0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2278      	movs	r2, #120	; 0x78
 8008da6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2200      	movs	r2, #0
 8008db2:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2207      	movs	r2, #7
 8008db8:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2221      	movs	r2, #33	; 0x21
 8008dbe:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2243      	movs	r2, #67	; 0x43
 8008dc4:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2210      	movs	r2, #16
 8008dca:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2232      	movs	r2, #50	; 0x32
 8008dd0:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2254      	movs	r2, #84	; 0x54
 8008dd6:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2207      	movs	r2, #7
 8008ddc:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2221      	movs	r2, #33	; 0x21
 8008de2:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2243      	movs	r2, #67	; 0x43
 8008de8:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2210      	movs	r2, #16
 8008dee:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2202      	movs	r2, #2
 8008df4:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2243      	movs	r2, #67	; 0x43
 8008dfa:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2205      	movs	r2, #5
 8008e00:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2207      	movs	r2, #7
 8008e0c:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2221      	movs	r2, #33	; 0x21
 8008e12:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2243      	movs	r2, #67	; 0x43
 8008e18:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2232      	movs	r2, #50	; 0x32
 8008e24:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2254      	movs	r2, #84	; 0x54
 8008e2a:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e32:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e3a:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2210      	movs	r2, #16
 8008e46:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	220f      	movs	r2, #15
 8008e52:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	220f      	movs	r2, #15
 8008e58:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	2208      	movs	r2, #8
 8008e64:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2200      	movs	r2, #0
 8008e76:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	220b      	movs	r2, #11
 8008e8c:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	2209      	movs	r2, #9
 8008e92:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	22c7      	movs	r2, #199	; 0xc7
 8008ec2:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	22ff      	movs	r2, #255	; 0xff
 8008ec8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	22db      	movs	r2, #219	; 0xdb
 8008ece:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2200      	movs	r2, #0
 8008eda:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	2201      	movs	r2, #1
 8008ee0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	2221      	movs	r2, #33	; 0x21
 8008eec:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b08a      	sub	sp, #40	; 0x28
 8008f02:	af04      	add	r7, sp, #16
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	9302      	str	r3, [sp, #8]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff fe70 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d121      	bne.n	8008f7c <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2207      	movs	r2, #7
 8008f3c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2205      	movs	r2, #5
 8008f42:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2208      	movs	r2, #8
 8008f58:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2238      	movs	r2, #56	; 0x38
 8008f5e:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2207      	movs	r2, #7
 8008f64:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	2205      	movs	r2, #5
 8008f6a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af04      	add	r7, sp, #16
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	9302      	str	r3, [sp, #8]
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fe2b 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d121      	bne.n	8009006 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	220f      	movs	r2, #15
 8008fc6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	220d      	movs	r2, #13
 8008fcc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2208      	movs	r2, #8
 8008fe2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	22b8      	movs	r2, #184	; 0xb8
 8008fe8:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	220f      	movs	r2, #15
 8008fee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	220d      	movs	r2, #13
 8008ff4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08a      	sub	sp, #40	; 0x28
 8009016:	af04      	add	r7, sp, #16
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009020:	2300      	movs	r3, #0
 8009022:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	9302      	str	r3, [sp, #8]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fde6 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d105      	bne.n	8009058 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	223b      	movs	r2, #59	; 0x3b
 8009056:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	; 0x28
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fdbd 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d105      	bne.n	80090aa <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	225b      	movs	r2, #91	; 0x5b
 80090a8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80090aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b08a      	sub	sp, #40	; 0x28
 80090ba:	af04      	add	r7, sp, #16
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fd94 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d11a      	bne.n	8009126 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2200      	movs	r2, #0
 80090f4:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	22b1      	movs	r2, #177	; 0xb1
 8009100:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2200      	movs	r2, #0
 8009106:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	22d4      	movs	r2, #212	; 0xd4
 800910c:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009114:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	2240      	movs	r2, #64	; 0x40
 8009124:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b08a      	sub	sp, #40	; 0x28
 8009136:	af04      	add	r7, sp, #16
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
 800913e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009140:	2300      	movs	r3, #0
 8009142:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	9302      	str	r3, [sp, #8]
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff fecf 	bl	8008efe <VL53L1_preset_mode_standard_ranging_short_range>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11a      	bne.n	80091a2 <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	2200      	movs	r2, #0
 8009170:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2201      	movs	r2, #1
 8009176:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2284      	movs	r2, #132	; 0x84
 800917c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2201      	movs	r2, #1
 8009182:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	22b1      	movs	r2, #177	; 0xb1
 8009188:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009190:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2240      	movs	r2, #64	; 0x40
 80091a0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80091a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b08a      	sub	sp, #40	; 0x28
 80091b2:	af04      	add	r7, sp, #16
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff fed6 	bl	8008f88 <VL53L1_preset_mode_standard_ranging_long_range>
 80091dc:	4603      	mov	r3, r0
 80091de:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d11a      	bne.n	800921e <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	2200      	movs	r2, #0
 80091ec:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2297      	movs	r2, #151	; 0x97
 80091f8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	22b1      	movs	r2, #177	; 0xb1
 8009204:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800920c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	2240      	movs	r2, #64	; 0x40
 800921c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800921e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b08a      	sub	sp, #40	; 0x28
 800922e:	af04      	add	r7, sp, #16
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009238:	2300      	movs	r3, #0
 800923a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	9302      	str	r3, [sp, #8]
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff ff2f 	bl	80090b6 <VL53L1_preset_mode_timed_ranging>
 8009258:	4603      	mov	r3, r0
 800925a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800925c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d106      	bne.n	8009272 <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009266:	6a39      	ldr	r1, [r7, #32]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f005 f978 	bl	800e55e <VL53L1_config_low_power_auto_mode>
 800926e:	4603      	mov	r3, r0
 8009270:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b08a      	sub	sp, #40	; 0x28
 8009282:	af04      	add	r7, sp, #16
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800928c:	2300      	movs	r3, #0
 800928e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff43 	bl	8009132 <VL53L1_preset_mode_timed_ranging_short_range>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80092b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ba:	6a39      	ldr	r1, [r7, #32]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f005 f94e 	bl	800e55e <VL53L1_config_low_power_auto_mode>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80092c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b08a      	sub	sp, #40	; 0x28
 80092d6:	af04      	add	r7, sp, #16
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	9303      	str	r3, [sp, #12]
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	9302      	str	r3, [sp, #8]
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff ff57 	bl	80091ae <VL53L1_preset_mode_timed_ranging_long_range>
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800930c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930e:	6a39      	ldr	r1, [r7, #32]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f005 f924 	bl	800e55e <VL53L1_config_low_power_auto_mode>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800931a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b08a      	sub	sp, #40	; 0x28
 800932a:	af04      	add	r7, sp, #16
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	9302      	str	r3, [sp, #8]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fc5c 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 8009354:	4603      	mov	r3, r0
 8009356:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d116      	bne.n	800938e <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	2200      	movs	r2, #0
 8009364:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2200      	movs	r2, #0
 800936a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	22b1      	movs	r2, #177	; 0xb1
 8009370:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2200      	movs	r2, #0
 8009376:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	22d4      	movs	r2, #212	; 0xd4
 800937c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2210      	movs	r2, #16
 800938c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800938e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b090      	sub	sp, #64	; 0x40
 800939e:	af0a      	add	r7, sp, #40	; 0x28
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	9302      	str	r3, [sp, #8]
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	68b8      	ldr	r0, [r7, #8]
 80093c4:	f7ff fc22 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 80093c8:	4603      	mov	r3, r0
 80093ca:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80093cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d171      	bne.n	80094b8 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80093da:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	9308      	str	r3, [sp, #32]
 80093e0:	2305      	movs	r3, #5
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	2304      	movs	r3, #4
 80093e6:	9306      	str	r3, [sp, #24]
 80093e8:	2303      	movs	r3, #3
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	2302      	movs	r3, #2
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	2301      	movs	r3, #1
 80093f2:	9303      	str	r3, [sp, #12]
 80093f4:	2300      	movs	r3, #0
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	2304      	movs	r3, #4
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	2303      	movs	r3, #3
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2302      	movs	r3, #2
 8009402:	2201      	movs	r2, #1
 8009404:	2100      	movs	r1, #0
 8009406:	2007      	movs	r0, #7
 8009408:	f001 fe1b 	bl	800b042 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	3302      	adds	r3, #2
 8009410:	9308      	str	r3, [sp, #32]
 8009412:	2305      	movs	r3, #5
 8009414:	9307      	str	r3, [sp, #28]
 8009416:	2304      	movs	r3, #4
 8009418:	9306      	str	r3, [sp, #24]
 800941a:	2303      	movs	r3, #3
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	2302      	movs	r3, #2
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	2301      	movs	r3, #1
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	2300      	movs	r3, #0
 8009428:	9302      	str	r3, [sp, #8]
 800942a:	2304      	movs	r3, #4
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	2303      	movs	r3, #3
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2302      	movs	r3, #2
 8009434:	2201      	movs	r2, #1
 8009436:	2100      	movs	r1, #0
 8009438:	2007      	movs	r0, #7
 800943a:	f001 fe92 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	2209      	movs	r2, #9
 8009442:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	220b      	movs	r2, #11
 8009448:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	2209      	movs	r2, #9
 800944e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	220b      	movs	r2, #11
 8009454:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	2200      	movs	r2, #0
 800945a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	2220      	movs	r2, #32
 8009460:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	2200      	movs	r2, #0
 8009466:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	221a      	movs	r2, #26
 800946c:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	2200      	movs	r2, #0
 8009472:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2228      	movs	r2, #40	; 0x28
 8009478:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2200      	movs	r2, #0
 800947e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	2221      	movs	r2, #33	; 0x21
 8009484:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	22f5      	movs	r2, #245	; 0xf5
 800948a:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2208      	movs	r2, #8
 8009490:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2288      	movs	r2, #136	; 0x88
 8009498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f821 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	229b      	movs	r2, #155	; 0x9b
 80094b0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	2226      	movs	r2, #38	; 0x26
 80094b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80094b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b090      	sub	sp, #64	; 0x40
 80094c8:	af0a      	add	r7, sp, #40	; 0x28
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	9303      	str	r3, [sp, #12]
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff ff52 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80094fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d13e      	bne.n	8009580 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	9308      	str	r3, [sp, #32]
 8009506:	2305      	movs	r3, #5
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	2304      	movs	r3, #4
 800950c:	9306      	str	r3, [sp, #24]
 800950e:	2303      	movs	r3, #3
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	230a      	movs	r3, #10
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	2309      	movs	r3, #9
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	2308      	movs	r3, #8
 800951c:	9302      	str	r3, [sp, #8]
 800951e:	2304      	movs	r3, #4
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	2303      	movs	r3, #3
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	2302      	movs	r3, #2
 8009528:	2201      	movs	r2, #1
 800952a:	2100      	movs	r1, #0
 800952c:	2007      	movs	r0, #7
 800952e:	f001 fd88 	bl	800b042 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	3302      	adds	r3, #2
 8009536:	9308      	str	r3, [sp, #32]
 8009538:	2305      	movs	r3, #5
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	2304      	movs	r3, #4
 800953e:	9306      	str	r3, [sp, #24]
 8009540:	2303      	movs	r3, #3
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	230a      	movs	r3, #10
 8009546:	9304      	str	r3, [sp, #16]
 8009548:	2309      	movs	r3, #9
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	2308      	movs	r3, #8
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	2304      	movs	r3, #4
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2303      	movs	r3, #3
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2302      	movs	r3, #2
 800955a:	2201      	movs	r2, #1
 800955c:	2100      	movs	r1, #0
 800955e:	2007      	movs	r0, #7
 8009560:	f001 fdff 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 ffbd 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	22bb      	movs	r2, #187	; 0xbb
 8009578:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	2226      	movs	r2, #38	; 0x26
 800957e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	; 0x30
 8009590:	af06      	add	r7, sp, #24
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	9303      	str	r3, [sp, #12]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	9302      	str	r3, [sp, #8]
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff ff83 	bl	80094c4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80095c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	22db      	movs	r2, #219	; 0xdb
 80095ce:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80095d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b090      	sub	sp, #64	; 0x40
 80095e0:	af0a      	add	r7, sp, #40	; 0x28
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f4:	9303      	str	r3, [sp, #12]
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fec6 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 800960e:	4603      	mov	r3, r0
 8009610:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d13e      	bne.n	8009698 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	9308      	str	r3, [sp, #32]
 800961e:	230d      	movs	r3, #13
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	230c      	movs	r3, #12
 8009624:	9306      	str	r3, [sp, #24]
 8009626:	230b      	movs	r3, #11
 8009628:	9305      	str	r3, [sp, #20]
 800962a:	230a      	movs	r3, #10
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	2309      	movs	r3, #9
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	2308      	movs	r3, #8
 8009634:	9302      	str	r3, [sp, #8]
 8009636:	230c      	movs	r3, #12
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	230b      	movs	r3, #11
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	230a      	movs	r3, #10
 8009640:	2209      	movs	r2, #9
 8009642:	2108      	movs	r1, #8
 8009644:	2007      	movs	r0, #7
 8009646:	f001 fcfc 	bl	800b042 <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	3302      	adds	r3, #2
 800964e:	9308      	str	r3, [sp, #32]
 8009650:	230d      	movs	r3, #13
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	230c      	movs	r3, #12
 8009656:	9306      	str	r3, [sp, #24]
 8009658:	230b      	movs	r3, #11
 800965a:	9305      	str	r3, [sp, #20]
 800965c:	230a      	movs	r3, #10
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	2309      	movs	r3, #9
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	2308      	movs	r3, #8
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	230c      	movs	r3, #12
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	230b      	movs	r3, #11
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	230a      	movs	r3, #10
 8009672:	2209      	movs	r2, #9
 8009674:	2108      	movs	r1, #8
 8009676:	2007      	movs	r0, #7
 8009678:	f001 fd73 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 ff31 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2202      	movs	r2, #2
 8009690:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	22bb      	movs	r2, #187	; 0xbb
 8009696:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08c      	sub	sp, #48	; 0x30
 80096a8:	af06      	add	r7, sp, #24
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	9302      	str	r3, [sp, #8]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff ff83 	bl	80095dc <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 80096da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	22db      	movs	r2, #219	; 0xdb
 80096e6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80096e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b090      	sub	sp, #64	; 0x40
 80096f8:	af0a      	add	r7, sp, #40	; 0x28
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	9303      	str	r3, [sp, #12]
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	9302      	str	r3, [sp, #8]
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff fe3a 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800972a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d166      	bne.n	8009800 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009738:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	9308      	str	r3, [sp, #32]
 800973e:	2304      	movs	r3, #4
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	2303      	movs	r3, #3
 8009744:	9306      	str	r3, [sp, #24]
 8009746:	2302      	movs	r3, #2
 8009748:	9305      	str	r3, [sp, #20]
 800974a:	2301      	movs	r3, #1
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	2307      	movs	r3, #7
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	2304      	movs	r3, #4
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	2303      	movs	r3, #3
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2302      	movs	r3, #2
 8009760:	2201      	movs	r2, #1
 8009762:	2100      	movs	r1, #0
 8009764:	2007      	movs	r0, #7
 8009766:	f001 fc6c 	bl	800b042 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	3302      	adds	r3, #2
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	2304      	movs	r3, #4
 8009772:	9307      	str	r3, [sp, #28]
 8009774:	2303      	movs	r3, #3
 8009776:	9306      	str	r3, [sp, #24]
 8009778:	2302      	movs	r3, #2
 800977a:	9305      	str	r3, [sp, #20]
 800977c:	2301      	movs	r3, #1
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	2300      	movs	r3, #0
 8009782:	9303      	str	r3, [sp, #12]
 8009784:	2307      	movs	r3, #7
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	2304      	movs	r3, #4
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	2303      	movs	r3, #3
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	2302      	movs	r3, #2
 8009792:	2201      	movs	r2, #1
 8009794:	2100      	movs	r1, #0
 8009796:	2007      	movs	r0, #7
 8009798:	f001 fce3 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fea1 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	2204      	movs	r2, #4
 80097b0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	2203      	movs	r2, #3
 80097b6:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	2242      	movs	r2, #66	; 0x42
 80097c2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	2200      	movs	r2, #0
 80097c8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	2242      	movs	r2, #66	; 0x42
 80097ce:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	2200      	movs	r2, #0
 80097d4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	2252      	movs	r2, #82	; 0x52
 80097da:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	2200      	movs	r2, #0
 80097e0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	2266      	movs	r2, #102	; 0x66
 80097e6:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2204      	movs	r2, #4
 80097ec:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	22a4      	movs	r2, #164	; 0xa4
 80097f2:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	229b      	movs	r2, #155	; 0x9b
 80097f8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	2226      	movs	r2, #38	; 0x26
 80097fe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b090      	sub	sp, #64	; 0x40
 8009810:	af0a      	add	r7, sp, #40	; 0x28
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	9302      	str	r3, [sp, #8]
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fdae 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 800983e:	4603      	mov	r3, r0
 8009840:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d178      	bne.n	800993c <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	9308      	str	r3, [sp, #32]
 800984e:	2305      	movs	r3, #5
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	2304      	movs	r3, #4
 8009854:	9306      	str	r3, [sp, #24]
 8009856:	2303      	movs	r3, #3
 8009858:	9305      	str	r3, [sp, #20]
 800985a:	2302      	movs	r3, #2
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	2301      	movs	r3, #1
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	2300      	movs	r3, #0
 8009864:	9302      	str	r3, [sp, #8]
 8009866:	2304      	movs	r3, #4
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	2303      	movs	r3, #3
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2302      	movs	r3, #2
 8009870:	2201      	movs	r2, #1
 8009872:	2100      	movs	r1, #0
 8009874:	2007      	movs	r0, #7
 8009876:	f001 fbe4 	bl	800b042 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	3302      	adds	r3, #2
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	2305      	movs	r3, #5
 8009882:	9307      	str	r3, [sp, #28]
 8009884:	2304      	movs	r3, #4
 8009886:	9306      	str	r3, [sp, #24]
 8009888:	2303      	movs	r3, #3
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	2302      	movs	r3, #2
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	2301      	movs	r3, #1
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	2300      	movs	r3, #0
 8009896:	9302      	str	r3, [sp, #8]
 8009898:	2304      	movs	r3, #4
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	2303      	movs	r3, #3
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2302      	movs	r3, #2
 80098a2:	2201      	movs	r2, #1
 80098a4:	2100      	movs	r1, #0
 80098a6:	2007      	movs	r0, #7
 80098a8:	f001 fc5b 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fe19 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	2209      	movs	r2, #9
 80098c0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	220b      	movs	r2, #11
 80098c6:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	2221      	movs	r2, #33	; 0x21
 80098d2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	2200      	movs	r2, #0
 80098d8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	221b      	movs	r2, #27
 80098de:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	2200      	movs	r2, #0
 80098e4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	2229      	movs	r2, #41	; 0x29
 80098ea:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	2200      	movs	r2, #0
 80098f0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	2222      	movs	r2, #34	; 0x22
 80098f6:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2209      	movs	r2, #9
 80098fc:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	22f5      	movs	r2, #245	; 0xf5
 8009902:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	2209      	movs	r2, #9
 8009908:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	220b      	movs	r2, #11
 800990e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2208      	movs	r2, #8
 8009924:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2288      	movs	r2, #136	; 0x88
 800992c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	229b      	movs	r2, #155	; 0x9b
 8009934:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	2226      	movs	r2, #38	; 0x26
 800993a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800993c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b090      	sub	sp, #64	; 0x40
 800994c:	af0a      	add	r7, sp, #40	; 0x28
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	9302      	str	r3, [sp, #8]
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff ff49 	bl	800980c <VL53L1_preset_mode_histogram_long_range>
 800997a:	4603      	mov	r3, r0
 800997c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800997e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d13b      	bne.n	80099fe <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	2305      	movs	r3, #5
 800998c:	9307      	str	r3, [sp, #28]
 800998e:	2304      	movs	r3, #4
 8009990:	9306      	str	r3, [sp, #24]
 8009992:	2303      	movs	r3, #3
 8009994:	9305      	str	r3, [sp, #20]
 8009996:	230a      	movs	r3, #10
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	2309      	movs	r3, #9
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	2308      	movs	r3, #8
 80099a0:	9302      	str	r3, [sp, #8]
 80099a2:	2304      	movs	r3, #4
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	2303      	movs	r3, #3
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	2302      	movs	r3, #2
 80099ac:	2201      	movs	r2, #1
 80099ae:	2100      	movs	r1, #0
 80099b0:	2007      	movs	r0, #7
 80099b2:	f001 fb46 	bl	800b042 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	3302      	adds	r3, #2
 80099ba:	9308      	str	r3, [sp, #32]
 80099bc:	2305      	movs	r3, #5
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	2304      	movs	r3, #4
 80099c2:	9306      	str	r3, [sp, #24]
 80099c4:	2303      	movs	r3, #3
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	230a      	movs	r3, #10
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	2309      	movs	r3, #9
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	2308      	movs	r3, #8
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	2304      	movs	r3, #4
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	2303      	movs	r3, #3
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2302      	movs	r3, #2
 80099de:	2201      	movs	r2, #1
 80099e0:	2100      	movs	r1, #0
 80099e2:	2007      	movs	r0, #7
 80099e4:	f001 fbbd 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fd7b 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	22bb      	movs	r2, #187	; 0xbb
 80099fc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b08c      	sub	sp, #48	; 0x30
 8009a0e:	af06      	add	r7, sp, #24
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	9302      	str	r3, [sp, #8]
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7ff ff86 	bl	8009948 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	22db      	movs	r2, #219	; 0xdb
 8009a4c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b090      	sub	sp, #64	; 0x40
 8009a5e:	af0a      	add	r7, sp, #40	; 0x28
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	68b9      	ldr	r1, [r7, #8]
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fc87 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d178      	bne.n	8009b8a <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	2301      	movs	r3, #1
 8009aae:	9303      	str	r3, [sp, #12]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9302      	str	r3, [sp, #8]
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2301      	movs	r3, #1
 8009abe:	2201      	movs	r2, #1
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2007      	movs	r0, #7
 8009ac4:	f001 fabd 	bl	800b042 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	3302      	adds	r3, #2
 8009acc:	9308      	str	r3, [sp, #32]
 8009ace:	2303      	movs	r3, #3
 8009ad0:	9307      	str	r3, [sp, #28]
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	2302      	movs	r3, #2
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	2301      	movs	r3, #1
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	2302      	movs	r3, #2
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	2301      	movs	r3, #1
 8009af0:	2201      	movs	r2, #1
 8009af2:	2100      	movs	r1, #0
 8009af4:	2007      	movs	r0, #7
 8009af6:	f001 fb34 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fcf2 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	2207      	movs	r2, #7
 8009b14:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	2236      	movs	r2, #54	; 0x36
 8009b20:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2200      	movs	r2, #0
 8009b26:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	2228      	movs	r2, #40	; 0x28
 8009b2c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	2200      	movs	r2, #0
 8009b32:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	2244      	movs	r2, #68	; 0x44
 8009b38:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2233      	movs	r2, #51	; 0x33
 8009b44:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2205      	movs	r2, #5
 8009b4a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	22f5      	movs	r2, #245	; 0xf5
 8009b50:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	2205      	movs	r2, #5
 8009b56:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2207      	movs	r2, #7
 8009b5c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2208      	movs	r2, #8
 8009b72:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2248      	movs	r2, #72	; 0x48
 8009b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	229b      	movs	r2, #155	; 0x9b
 8009b82:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	2226      	movs	r2, #38	; 0x26
 8009b88:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b090      	sub	sp, #64	; 0x40
 8009b9a:	af0a      	add	r7, sp, #40	; 0x28
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ff49 	bl	8009a5a <VL53L1_preset_mode_histogram_medium_range>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d13b      	bne.n	8009c4c <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	9308      	str	r3, [sp, #32]
 8009bd8:	2303      	movs	r3, #3
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	2302      	movs	r3, #2
 8009bde:	9306      	str	r3, [sp, #24]
 8009be0:	2301      	movs	r3, #1
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	230a      	movs	r3, #10
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	2309      	movs	r3, #9
 8009bea:	9303      	str	r3, [sp, #12]
 8009bec:	2308      	movs	r3, #8
 8009bee:	9302      	str	r3, [sp, #8]
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	2007      	movs	r0, #7
 8009c00:	f001 fa1f 	bl	800b042 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	3302      	adds	r3, #2
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	9307      	str	r3, [sp, #28]
 8009c0e:	2302      	movs	r3, #2
 8009c10:	9306      	str	r3, [sp, #24]
 8009c12:	2301      	movs	r3, #1
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	230a      	movs	r3, #10
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	2309      	movs	r3, #9
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	2308      	movs	r3, #8
 8009c20:	9302      	str	r3, [sp, #8]
 8009c22:	2302      	movs	r3, #2
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	2302      	movs	r3, #2
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	2100      	movs	r1, #0
 8009c30:	2007      	movs	r0, #7
 8009c32:	f001 fa96 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fc54 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	22bb      	movs	r2, #187	; 0xbb
 8009c4a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08c      	sub	sp, #48	; 0x30
 8009c5c:	af06      	add	r7, sp, #24
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	9302      	str	r3, [sp, #8]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff ff86 	bl	8009b96 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d102      	bne.n	8009c9c <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	22db      	movs	r2, #219	; 0xdb
 8009c9a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b090      	sub	sp, #64	; 0x40
 8009cac:	af0a      	add	r7, sp, #40	; 0x28
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7ff fb60 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d178      	bne.n	8009dd8 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	9308      	str	r3, [sp, #32]
 8009cea:	2302      	movs	r3, #2
 8009cec:	9307      	str	r3, [sp, #28]
 8009cee:	2302      	movs	r3, #2
 8009cf0:	9306      	str	r3, [sp, #24]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	9303      	str	r3, [sp, #12]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9302      	str	r3, [sp, #8]
 8009d02:	2301      	movs	r3, #1
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	2301      	movs	r3, #1
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2107      	movs	r1, #7
 8009d10:	2007      	movs	r0, #7
 8009d12:	f001 f996 	bl	800b042 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	3302      	adds	r3, #2
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	2302      	movs	r3, #2
 8009d22:	9306      	str	r3, [sp, #24]
 8009d24:	2301      	movs	r3, #1
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	2301      	movs	r3, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	9303      	str	r3, [sp, #12]
 8009d30:	2300      	movs	r3, #0
 8009d32:	9302      	str	r3, [sp, #8]
 8009d34:	2301      	movs	r3, #1
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2107      	movs	r1, #7
 8009d42:	2007      	movs	r0, #7
 8009d44:	f001 fa0d 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fbcb 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	2203      	movs	r2, #3
 8009d5c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	2205      	movs	r2, #5
 8009d62:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	2200      	movs	r2, #0
 8009d68:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	2252      	movs	r2, #82	; 0x52
 8009d6e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	2200      	movs	r2, #0
 8009d74:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	2237      	movs	r2, #55	; 0x37
 8009d7a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2266      	movs	r2, #102	; 0x66
 8009d86:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	2244      	movs	r2, #68	; 0x44
 8009d92:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2203      	movs	r2, #3
 8009d98:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	22f5      	movs	r2, #245	; 0xf5
 8009d9e:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	2203      	movs	r2, #3
 8009da4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2205      	movs	r2, #5
 8009daa:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2208      	movs	r2, #8
 8009dc0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2228      	movs	r2, #40	; 0x28
 8009dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	22bb      	movs	r2, #187	; 0xbb
 8009dd0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	2226      	movs	r2, #38	; 0x26
 8009dd6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b090      	sub	sp, #64	; 0x40
 8009de8:	af0a      	add	r7, sp, #40	; 0x28
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	9302      	str	r3, [sp, #8]
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f7ff ff49 	bl	8009ca8 <VL53L1_preset_mode_histogram_short_range>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d15a      	bne.n	8009ed8 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	9308      	str	r3, [sp, #32]
 8009e26:	2301      	movs	r3, #1
 8009e28:	9307      	str	r3, [sp, #28]
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	9306      	str	r3, [sp, #24]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	2300      	movs	r3, #0
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	2300      	movs	r3, #0
 8009e38:	9303      	str	r3, [sp, #12]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9302      	str	r3, [sp, #8]
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	2301      	movs	r3, #1
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	2300      	movs	r3, #0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2107      	movs	r1, #7
 8009e4c:	2007      	movs	r0, #7
 8009e4e:	f001 f8f8 	bl	800b042 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	3302      	adds	r3, #2
 8009e56:	9308      	str	r3, [sp, #32]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	9307      	str	r3, [sp, #28]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9306      	str	r3, [sp, #24]
 8009e60:	2301      	movs	r3, #1
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9302      	str	r3, [sp, #8]
 8009e70:	2301      	movs	r3, #1
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	2301      	movs	r3, #1
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2107      	movs	r1, #7
 8009e7e:	2007      	movs	r0, #7
 8009e80:	f001 f96f 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fb2d 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	2202      	movs	r2, #2
 8009e98:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	2203      	movs	r2, #3
 8009e9e:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2231      	movs	r2, #49	; 0x31
 8009eaa:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	2202      	movs	r2, #2
 8009eb0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2210      	movs	r2, #16
 8009ecc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2218      	movs	r2, #24
 8009ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b090      	sub	sp, #64	; 0x40
 8009ee8:	af0a      	add	r7, sp, #40	; 0x28
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7ff fec9 	bl	8009ca8 <VL53L1_preset_mode_histogram_short_range>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d13b      	bne.n	8009f9a <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	2302      	movs	r3, #2
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	9306      	str	r3, [sp, #24]
 8009f2e:	2301      	movs	r3, #1
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	2301      	movs	r3, #1
 8009f34:	9304      	str	r3, [sp, #16]
 8009f36:	2309      	movs	r3, #9
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	2301      	movs	r3, #1
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	2301      	movs	r3, #1
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2107      	movs	r1, #7
 8009f4c:	2007      	movs	r0, #7
 8009f4e:	f001 f878 	bl	800b042 <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	3302      	adds	r3, #2
 8009f56:	9308      	str	r3, [sp, #32]
 8009f58:	2302      	movs	r3, #2
 8009f5a:	9307      	str	r3, [sp, #28]
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	9306      	str	r3, [sp, #24]
 8009f60:	2301      	movs	r3, #1
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	2301      	movs	r3, #1
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	2309      	movs	r3, #9
 8009f6a:	9303      	str	r3, [sp, #12]
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	2301      	movs	r3, #1
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2301      	movs	r3, #1
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2107      	movs	r1, #7
 8009f7e:	2007      	movs	r0, #7
 8009f80:	f001 f8ef 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	68b9      	ldr	r1, [r7, #8]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 faad 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	22bb      	movs	r2, #187	; 0xbb
 8009f98:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b08c      	sub	sp, #48	; 0x30
 8009faa:	af06      	add	r7, sp, #24
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	607a      	str	r2, [r7, #4]
 8009fb2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	9302      	str	r3, [sp, #8]
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff ff86 	bl	8009ee4 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d102      	bne.n	8009fea <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	22db      	movs	r2, #219	; 0xdb
 8009fe8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b08c      	sub	sp, #48	; 0x30
 8009ffa:	af06      	add	r7, sp, #24
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	607a      	str	r2, [r7, #4]
 800a002:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	9302      	str	r3, [sp, #8]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff f9b9 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10b      	bne.n	800a04c <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2201      	movs	r2, #1
 800a038:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	2201      	movs	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2283      	movs	r2, #131	; 0x83
 800a044:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	222e      	movs	r2, #46	; 0x2e
 800a04a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b090      	sub	sp, #64	; 0x40
 800a05c:	af0a      	add	r7, sp, #40	; 0x28
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	9303      	str	r3, [sp, #12]
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	9302      	str	r3, [sp, #8]
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	9301      	str	r3, [sp, #4]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f9ba 	bl	800a3fe <VL53L1_preset_mode_histogram_multizone_long_range>
 800a08a:	4603      	mov	r3, r0
 800a08c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d151      	bne.n	800a13a <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800a096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a098:	6838      	ldr	r0, [r7, #0]
 800a09a:	f00a fb1c 	bl	80146d6 <VL53L1_zone_preset_xtalk_planar>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	2209      	movs	r2, #9
 800a0a6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	2209      	movs	r2, #9
 800a0ac:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	9308      	str	r3, [sp, #32]
 800a0b2:	2304      	movs	r3, #4
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	9306      	str	r3, [sp, #24]
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	2307      	movs	r3, #7
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	2007      	movs	r0, #7
 800a0da:	f000 ffb2 	bl	800b042 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	9307      	str	r3, [sp, #28]
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	9306      	str	r3, [sp, #24]
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9303      	str	r3, [sp, #12]
 800a0f8:	2307      	movs	r3, #7
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	2303      	movs	r3, #3
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2302      	movs	r3, #2
 800a106:	2201      	movs	r2, #1
 800a108:	2100      	movs	r1, #0
 800a10a:	2007      	movs	r0, #7
 800a10c:	f001 f829 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800a110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d108      	bne.n	800a12a <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	3302      	adds	r3, #2
 800a11c:	461a      	mov	r2, r3
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a122:	f003 f97d 	bl	800d420 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f9da 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800a13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b090      	sub	sp, #64	; 0x40
 800a14a:	af0a      	add	r7, sp, #40	; 0x28
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a154:	2300      	movs	r3, #0
 800a156:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	9302      	str	r3, [sp, #8]
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff f911 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800a17c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d16e      	bne.n	800a262 <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	230c      	movs	r3, #12
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	230b      	movs	r3, #11
 800a18e:	9306      	str	r3, [sp, #24]
 800a190:	230a      	movs	r3, #10
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	2309      	movs	r3, #9
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	2308      	movs	r3, #8
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	230f      	movs	r3, #15
 800a19e:	9302      	str	r3, [sp, #8]
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	230b      	movs	r3, #11
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	230a      	movs	r3, #10
 800a1aa:	2209      	movs	r2, #9
 800a1ac:	2108      	movs	r1, #8
 800a1ae:	200f      	movs	r0, #15
 800a1b0:	f000 ff47 	bl	800b042 <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	3302      	adds	r3, #2
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	9307      	str	r3, [sp, #28]
 800a1be:	230b      	movs	r3, #11
 800a1c0:	9306      	str	r3, [sp, #24]
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	9305      	str	r3, [sp, #20]
 800a1c6:	2309      	movs	r3, #9
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	2308      	movs	r3, #8
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	230f      	movs	r3, #15
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	230b      	movs	r3, #11
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	230a      	movs	r3, #10
 800a1dc:	2209      	movs	r2, #9
 800a1de:	2108      	movs	r1, #8
 800a1e0:	200f      	movs	r0, #15
 800a1e2:	f000 ffbe 	bl	800b162 <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f97c 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	2209      	movs	r2, #9
 800a1fa:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2209      	movs	r2, #9
 800a200:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	2200      	movs	r2, #0
 800a206:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2221      	movs	r2, #33	; 0x21
 800a20c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	2200      	movs	r2, #0
 800a212:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	2221      	movs	r2, #33	; 0x21
 800a218:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	2200      	movs	r2, #0
 800a21e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	2229      	movs	r2, #41	; 0x29
 800a224:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	2200      	movs	r2, #0
 800a22a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2229      	movs	r2, #41	; 0x29
 800a230:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2209      	movs	r2, #9
 800a236:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	22f5      	movs	r2, #245	; 0xf5
 800a23c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	2209      	movs	r2, #9
 800a242:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	2209      	movs	r2, #9
 800a248:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	2209      	movs	r2, #9
 800a24e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	2206      	movs	r2, #6
 800a254:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	22bb      	movs	r2, #187	; 0xbb
 800a25a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	2226      	movs	r2, #38	; 0x26
 800a260:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b08c      	sub	sp, #48	; 0x30
 800a272:	af06      	add	r7, sp, #24
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
 800a27a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68b9      	ldr	r1, [r7, #8]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff ff53 	bl	800a146 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	22db      	movs	r2, #219	; 0xdb
 800a2a8:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800a2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b08c      	sub	sp, #48	; 0x30
 800a2ba:	af06      	add	r7, sp, #24
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fbb9 	bl	8009a5a <VL53L1_preset_mode_histogram_medium_range>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d12c      	bne.n	800a34e <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	9304      	str	r3, [sp, #16]
 800a2f8:	2307      	movs	r3, #7
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	2307      	movs	r3, #7
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	2302      	movs	r3, #2
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	2308      	movs	r3, #8
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2304      	movs	r3, #4
 800a30a:	2202      	movs	r2, #2
 800a30c:	2108      	movs	r1, #8
 800a30e:	2004      	movs	r0, #4
 800a310:	f00a f96c 	bl	80145ec <VL53L1_init_zone_config_structure>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	3301      	adds	r3, #1
 800a31e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d108      	bne.n	800a33e <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	3302      	adds	r3, #2
 800a330:	461a      	mov	r2, r3
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a336:	f003 f873 	bl	800d420 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f8d0 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b08c      	sub	sp, #48	; 0x30
 800a35e:	af06      	add	r7, sp, #24
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	607a      	str	r2, [r7, #4]
 800a366:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	68b9      	ldr	r1, [r7, #8]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fc8e 	bl	8009ca8 <VL53L1_preset_mode_histogram_short_range>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d12c      	bne.n	800a3f2 <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	2307      	movs	r3, #7
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	9302      	str	r3, [sp, #8]
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	2108      	movs	r1, #8
 800a3b2:	2004      	movs	r0, #4
 800a3b4:	f00a f91a 	bl	80145ec <VL53L1_init_zone_config_structure>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	785b      	ldrb	r3, [r3, #1]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a3c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d108      	bne.n	800a3e2 <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3da:	f003 f821 	bl	800d420 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f87e 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b08c      	sub	sp, #48	; 0x30
 800a402:	af06      	add	r7, sp, #24
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	9302      	str	r3, [sp, #8]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff f9ee 	bl	800980c <VL53L1_preset_mode_histogram_long_range>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d12c      	bne.n	800a496 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	2307      	movs	r3, #7
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	2307      	movs	r3, #7
 800a446:	9302      	str	r3, [sp, #8]
 800a448:	2302      	movs	r3, #2
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	2308      	movs	r3, #8
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2304      	movs	r3, #4
 800a452:	2202      	movs	r2, #2
 800a454:	2108      	movs	r1, #8
 800a456:	2004      	movs	r0, #4
 800a458:	f00a f8c8 	bl	80145ec <VL53L1_init_zone_config_structure>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	3301      	adds	r3, #1
 800a466:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	3302      	adds	r3, #2
 800a478:	461a      	mov	r2, r3
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a47e:	f002 ffcf 	bl	800d420 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a482:	4603      	mov	r3, r0
 800a484:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f82c 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b08a      	sub	sp, #40	; 0x28
 800a4a6:	af04      	add	r7, sp, #16
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	9302      	str	r3, [sp, #8]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7fe fb9e 	bl	8008c0c <VL53L1_preset_mode_standard_ranging>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a4d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	2201      	movs	r2, #1
 800a4e0:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	607a      	str	r2, [r7, #4]
 800a4fa:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	79db      	ldrb	r3, [r3, #7]
 800a530:	b29b      	uxth	r3, r3
				<< 8)
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7a1b      	ldrb	r3, [r3, #8]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	4413      	add	r3, r2
 800a53e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	b29b      	uxth	r3, r3
				<< 8)
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	789b      	ldrb	r3, [r3, #2]
 800a582:	b29b      	uxth	r3, r3
 800a584:	4413      	add	r3, r2
 800a586:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	78db      	ldrb	r3, [r3, #3]
 800a590:	b29b      	uxth	r3, r3
				<< 8)
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	791b      	ldrb	r3, [r3, #4]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a5cc:	bf00      	nop
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	79db      	ldrb	r3, [r3, #7]
 800a618:	b29b      	uxth	r3, r3
				<< 8)
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	7a1b      	ldrb	r3, [r3, #8]
 800a622:	b29b      	uxth	r3, r3
 800a624:	4413      	add	r3, r2
 800a626:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	b29b      	uxth	r3, r3
				<< 8)
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	789b      	ldrb	r3, [r3, #2]
 800a662:	b29b      	uxth	r3, r3
 800a664:	4413      	add	r3, r2
 800a666:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	78db      	ldrb	r3, [r3, #3]
 800a670:	b29b      	uxth	r3, r3
				<< 8)
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08c      	sub	sp, #48	; 0x30
 800a6a4:	af06      	add	r7, sp, #24
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	9302      	str	r3, [sp, #8]
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7fe fe64 	bl	800939a <VL53L1_preset_mode_histogram_ranging>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a6d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	68b9      	ldr	r1, [r7, #8]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fefd 	bl	800a4ee <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3318      	adds	r3, #24
 800a70c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2230      	movs	r2, #48	; 0x30
 800a722:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a72c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a72e:	bf00      	nop
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b085      	sub	sp, #20
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3318      	adds	r3, #24
 800a74a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	332c      	adds	r3, #44	; 0x2c
 800a750:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	78fa      	ldrb	r2, [r7, #3]
 800a756:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2200      	movs	r2, #0
 800a75c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2202      	movs	r2, #2
 800a762:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2200      	movs	r2, #0
 800a768:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2200      	movs	r2, #0
 800a76e:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	78fa      	ldrb	r2, [r7, #3]
 800a774:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2200      	movs	r2, #0
 800a77a:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2202      	movs	r2, #2
 800a780:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2200      	movs	r2, #0
 800a786:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	735a      	strb	r2, [r3, #13]

}
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3318      	adds	r3, #24
 800a7ac:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	332c      	adds	r3, #44	; 0x2c
 800a7b2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d115      	bne.n	800a7ee <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2203      	movs	r2, #3
 800a7c6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	735a      	strb	r2, [r3, #13]
 800a7ec:	e0be      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	7a1b      	ldrb	r3, [r3, #8]
 800a7f2:	2bff      	cmp	r3, #255	; 0xff
 800a7f4:	d103      	bne.n	800a7fe <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2280      	movs	r2, #128	; 0x80
 800a7fa:	721a      	strb	r2, [r3, #8]
 800a7fc:	e005      	b.n	800a80a <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	7a1b      	ldrb	r3, [r3, #8]
 800a802:	3301      	adds	r3, #1
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	7a19      	ldrb	r1, [r3, #8]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f103 0209 	add.w	r2, r3, #9
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	330a      	adds	r3, #10
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f002 fdc2 	bl	800d3a2 <VL53L1_update_internal_stream_counters>
 800a81e:	4603      	mov	r3, r0
 800a820:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	7adb      	ldrb	r3, [r3, #11]
 800a826:	f083 0302 	eor.w	r3, r3, #2
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	79db      	ldrb	r3, [r3, #7]
 800a834:	3b03      	subs	r3, #3
 800a836:	2b05      	cmp	r3, #5
 800a838:	f200 8082 	bhi.w	800a940 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a83c:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a85d 	.word	0x0800a85d
 800a848:	0800a941 	.word	0x0800a941
 800a84c:	0800a941 	.word	0x0800a941
 800a850:	0800a8af 	.word	0x0800a8af
 800a854:	0800a8e5 	.word	0x0800a8e5
 800a858:	0800a90f 	.word	0x0800a90f

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd03      	ble.n	800a872 <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2206      	movs	r2, #6
 800a86e:	71da      	strb	r2, [r3, #7]
 800a870:	e00d      	b.n	800a88e <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d303      	bcc.n	800a888 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2208      	movs	r2, #8
 800a884:	71da      	strb	r2, [r3, #7]
 800a886:	e002      	b.n	800a88e <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2207      	movs	r2, #7
 800a88c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	735a      	strb	r2, [r3, #13]

			break;
 800a8ac:	e05e      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d303      	bcc.n	800a8dc <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a8da:	e047      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2207      	movs	r2, #7
 800a8e0:	71da      	strb	r2, [r3, #7]
			break;
 800a8e2:	e043      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	7b5b      	ldrb	r3, [r3, #13]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d303      	bcc.n	800a906 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2208      	movs	r2, #8
 800a902:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a904:	e032      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2207      	movs	r2, #7
 800a90a:	71da      	strb	r2, [r3, #7]
			break;
 800a90c:	e02e      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	7b1b      	ldrb	r3, [r3, #12]
 800a918:	f083 0301 	eor.w	r3, r3, #1
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d303      	bcc.n	800a938 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2208      	movs	r2, #8
 800a934:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a936:	e019      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2207      	movs	r2, #7
 800a93c:	71da      	strb	r2, [r3, #7]
			break;
 800a93e:	e015      	b.n	800a96c <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2203      	movs	r2, #3
 800a944:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2202      	movs	r2, #2
 800a95c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	735a      	strb	r2, [r3, #13]
			break;
 800a96a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a978:	b480      	push	{r7}
 800a97a:	b08d      	sub	sp, #52	; 0x34
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3318      	adds	r3, #24
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a992:	3308      	adds	r3, #8
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	332c      	adds	r3, #44	; 0x2c
 800a99a:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a9a2:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a9aa:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a9b2:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a9d2:	f003 031f 	and.w	r3, r3, #31
 800a9d6:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	78db      	ldrb	r3, [r3, #3]
 800a9dc:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a9e4:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bf14      	ite	ne
 800a9ec:	2301      	movne	r3, #1
 800a9ee:	2300      	moveq	r3, #0
 800a9f0:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a9f2:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a9f8:	111b      	asrs	r3, r3, #4
 800a9fa:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800aa04:	7c7b      	ldrb	r3, [r7, #17]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800aa10:	111b      	asrs	r3, r3, #4
 800aa12:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800aa22:	f003 0320 	and.w	r3, r3, #32
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d04e      	beq.n	800aac8 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	79db      	ldrb	r3, [r3, #7]
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d109      	bne.n	800aa46 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800aa32:	7c7b      	ldrb	r3, [r7, #17]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d14a      	bne.n	800aace <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800aa38:	7cfb      	ldrb	r3, [r7, #19]
 800aa3a:	2b12      	cmp	r3, #18
 800aa3c:	d047      	beq.n	800aace <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800aa3e:	23ef      	movs	r3, #239	; 0xef
 800aa40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa44:	e043      	b.n	800aace <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	7a1b      	ldrb	r3, [r3, #8]
 800aa4a:	7cba      	ldrb	r2, [r7, #18]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d002      	beq.n	800aa56 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800aa50:	23ee      	movs	r3, #238	; 0xee
 800aa52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	7adb      	ldrb	r3, [r3, #11]
 800aa5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d002      	beq.n	800aa68 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800aa62:	23ed      	movs	r3, #237	; 0xed
 800aa64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	7b5b      	ldrb	r3, [r3, #13]
 800aa6c:	4619      	mov	r1, r3
		expected_stream_count =
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	460b      	mov	r3, r1
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	440b      	add	r3, r1
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	7b5b      	ldrb	r3, [r3, #13]
 800aa84:	4619      	mov	r1, r3
		expected_gph_id =
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	4413      	add	r3, r2
 800aa92:	3303      	adds	r3, #3
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800aa98:	7c3a      	ldrb	r2, [r7, #16]
 800aa9a:	7cbb      	ldrb	r3, [r7, #18]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d00a      	beq.n	800aab6 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <VL53L1_check_ll_driver_rd_state+0x138>
 800aaaa:	7cbb      	ldrb	r3, [r7, #18]
 800aaac:	2bff      	cmp	r3, #255	; 0xff
 800aaae:	d002      	beq.n	800aab6 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800aab0:	23ec      	movs	r3, #236	; 0xec
 800aab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800aab6:	7bfa      	ldrb	r2, [r7, #15]
 800aab8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d005      	beq.n	800aacc <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800aac0:	23eb      	movs	r3, #235	; 0xeb
 800aac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aac6:	e002      	b.n	800aace <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800aac8:	bf00      	nop
 800aaca:	e000      	b.n	800aace <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800aacc:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800aace:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3734      	adds	r7, #52	; 0x34
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b088      	sub	sp, #32
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3318      	adds	r3, #24
 800aaee:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800aaf6:	3308      	adds	r3, #8
 800aaf8:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	332c      	adds	r3, #44	; 0x2c
 800aafe:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ab06:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800ab0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d11b      	bne.n	800ab4e <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2203      	movs	r2, #3
 800ab1a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2200      	movs	r2, #0
 800ab26:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2202      	movs	r2, #2
 800ab32:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2200      	movs	r2, #0
 800ab38:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	773b      	strb	r3, [r7, #28]
 800ab4c:	e0b1      	b.n	800acb2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	791b      	ldrb	r3, [r3, #4]
 800ab52:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	799b      	ldrb	r3, [r3, #6]
 800ab58:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2bff      	cmp	r3, #255	; 0xff
 800ab66:	d103      	bne.n	800ab70 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2280      	movs	r2, #128	; 0x80
 800ab6c:	705a      	strb	r2, [r3, #1]
 800ab6e:	e005      	b.n	800ab7c <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	785b      	ldrb	r3, [r3, #1]
 800ab74:	3301      	adds	r3, #1
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	7859      	ldrb	r1, [r3, #1]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	1c9a      	adds	r2, r3, #2
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	3303      	adds	r3, #3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f002 fc0a 	bl	800d3a2 <VL53L1_update_internal_stream_counters>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	791b      	ldrb	r3, [r3, #4]
 800ab96:	f083 0302 	eor.w	r3, r3, #2
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d053      	beq.n	800ac50 <VL53L1_update_ll_driver_cfg_state+0x172>
 800aba8:	2b05      	cmp	r3, #5
 800abaa:	dc69      	bgt.n	800ac80 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800abac:	2b03      	cmp	r3, #3
 800abae:	d002      	beq.n	800abb6 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d02d      	beq.n	800ac10 <VL53L1_update_ll_driver_cfg_state+0x132>
 800abb4:	e064      	b.n	800ac80 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2201      	movs	r2, #1
 800abba:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d909      	bls.n	800abde <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2200      	movs	r2, #0
 800abce:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	795b      	ldrb	r3, [r3, #5]
 800abd4:	f083 0301 	eor.w	r3, r3, #1
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2201      	movs	r2, #1
 800abe2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800abea:	2b00      	cmp	r3, #0
 800abec:	d106      	bne.n	800abfc <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2201      	movs	r2, #1
 800abf2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2200      	movs	r2, #0
 800abf8:	70da      	strb	r2, [r3, #3]
 800abfa:	e005      	b.n	800ac08 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2200      	movs	r2, #0
 800ac00:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2201      	movs	r2, #1
 800ac06:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2204      	movs	r2, #4
 800ac0c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800ac0e:	e050      	b.n	800acb2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	799b      	ldrb	r3, [r3, #6]
 800ac14:	3301      	adds	r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d940      	bls.n	800acac <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	795b      	ldrb	r3, [r3, #5]
 800ac34:	f083 0301 	eor.w	r3, r3, #1
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d031      	beq.n	800acac <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800ac4e:	e02d      	b.n	800acac <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	799b      	ldrb	r3, [r3, #6]
 800ac54:	3301      	adds	r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d922      	bls.n	800acb0 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	795b      	ldrb	r3, [r3, #5]
 800ac74:	f083 0301 	eor.w	r3, r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ac7e:	e017      	b.n	800acb0 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2203      	movs	r2, #3
 800ac84:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2200      	movs	r2, #0
 800ac96:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2200      	movs	r2, #0
 800aca2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2200      	movs	r2, #0
 800aca8:	719a      	strb	r2, [r3, #6]
			break;
 800acaa:	e002      	b.n	800acb2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800acac:	bf00      	nop
 800acae:	e000      	b.n	800acb2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800acb0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d11d      	bne.n	800acf8 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800acbc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800acbe:	7f3b      	ldrb	r3, [r7, #28]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	b2d8      	uxtb	r0, r3
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	440b      	add	r3, r1
 800acd0:	3302      	adds	r3, #2
 800acd2:	4602      	mov	r2, r0
 800acd4:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	7b5b      	ldrb	r3, [r3, #13]
 800acda:	4619      	mov	r1, r3
 800acdc:	7f7b      	ldrb	r3, [r7, #29]
 800acde:	f083 0302 	eor.w	r3, r3, #2
 800ace2:	b2d8      	uxtb	r0, r3
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	460b      	mov	r3, r1
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	3303      	adds	r3, #3
 800acf2:	4602      	mov	r2, r0
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	e013      	b.n	800ad20 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800acf8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	440b      	add	r3, r1
 800ad06:	3302      	adds	r3, #2
 800ad08:	7f3a      	ldrb	r2, [r7, #28]
 800ad0a:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800ad0c:	7fba      	ldrb	r2, [r7, #30]
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	440b      	add	r3, r1
 800ad1a:	3303      	adds	r3, #3
 800ad1c:	7f7a      	ldrb	r2, [r7, #29]
 800ad1e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800ad20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7c1a      	ldrb	r2, [r3, #16]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	3301      	adds	r3, #1
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	7c52      	ldrb	r2, [r2, #17]
 800ad46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	7c92      	ldrb	r2, [r2, #18]
 800ad50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	3303      	adds	r3, #3
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	7cd2      	ldrb	r2, [r2, #19]
 800ad5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7d12      	ldrb	r2, [r2, #20]
 800ad64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	3305      	adds	r3, #5
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	7d52      	ldrb	r2, [r2, #21]
 800ad6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	3306      	adds	r3, #6
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7d92      	ldrb	r2, [r2, #22]
 800ad78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3307      	adds	r3, #7
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	7dd2      	ldrb	r2, [r2, #23]
 800ad82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	3308      	adds	r3, #8
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	7e12      	ldrb	r2, [r2, #24]
 800ad8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	3309      	adds	r3, #9
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	7e52      	ldrb	r2, [r2, #25]
 800ad96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	330a      	adds	r3, #10
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7e92      	ldrb	r2, [r2, #26]
 800ada0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	330b      	adds	r3, #11
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	7ed2      	ldrb	r2, [r2, #27]
 800adaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	330c      	adds	r3, #12
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	7f12      	ldrb	r2, [r2, #28]
 800adb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	330d      	adds	r3, #13
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	7f52      	ldrb	r2, [r2, #29]
 800adbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	330e      	adds	r3, #14
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	7f92      	ldrb	r2, [r2, #30]
 800adc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	330f      	adds	r3, #15
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	7fd2      	ldrb	r2, [r2, #31]
 800add2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	3310      	adds	r3, #16
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	f892 2020 	ldrb.w	r2, [r2, #32]
 800adde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	3311      	adds	r3, #17
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800adea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	3312      	adds	r3, #18
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800adf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	3313      	adds	r3, #19
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ae02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	3314      	adds	r3, #20
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ae0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	3315      	adds	r3, #21
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ae1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3316      	adds	r3, #22
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ae26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	3317      	adds	r3, #23
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ae32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	3318      	adds	r3, #24
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ae3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	3319      	adds	r3, #25
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ae4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	331a      	adds	r3, #26
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ae56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	331b      	adds	r3, #27
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ae62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	331c      	adds	r3, #28
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ae6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	331d      	adds	r3, #29
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ae7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	331e      	adds	r3, #30
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ae86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	331f      	adds	r3, #31
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800ae92:	701a      	strb	r2, [r3, #0]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	22ff      	movs	r2, #255	; 0xff
 800aeac:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	22ff      	movs	r2, #255	; 0xff
 800aeb2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	22ff      	movs	r2, #255	; 0xff
 800aeb8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	22ff      	movs	r2, #255	; 0xff
 800aebe:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aec6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aece:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aed6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aede:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeee:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aefe:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af06:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af0e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af16:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af1e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af26:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af2e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af36:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af3e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af46:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af4e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af56:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	22ff      	movs	r2, #255	; 0xff
 800af5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	6039      	str	r1, [r7, #0]
 800af76:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2210      	movs	r2, #16
 800af80:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	79fa      	ldrb	r2, [r7, #7]
 800af86:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800af88:	2300      	movs	r3, #0
 800af8a:	73fb      	strb	r3, [r7, #15]
 800af8c:	e017      	b.n	800afbe <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800af8e:	7bfa      	ldrb	r2, [r7, #15]
 800af90:	4613      	mov	r3, r2
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	4413      	add	r3, r2
 800af9c:	3304      	adds	r3, #4
 800af9e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2203      	movs	r2, #3
 800afa4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2203      	movs	r2, #3
 800afaa:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2204      	movs	r2, #4
 800afb0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2200      	movs	r2, #0
 800afb6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	3301      	adds	r3, #1
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	7bfa      	ldrb	r2, [r7, #15]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d3e2      	bcc.n	800af8e <V53L1_init_zone_results_structure+0x22>
	}
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b087      	sub	sp, #28
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800afe4:	3308      	adds	r3, #8
 800afe6:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800afec:	2310      	movs	r3, #16
 800afee:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800aff6:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800aff8:	2300      	movs	r3, #0
 800affa:	75fb      	strb	r3, [r7, #23]
 800affc:	e016      	b.n	800b02c <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800affe:	7dfa      	ldrb	r2, [r7, #23]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	440b      	add	r3, r1
 800b00c:	3304      	adds	r3, #4
 800b00e:	2201      	movs	r2, #1
 800b010:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800b012:	7dfa      	ldrb	r2, [r7, #23]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	440b      	add	r3, r1
 800b020:	3306      	adds	r3, #6
 800b022:	2200      	movs	r2, #0
 800b024:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	3301      	adds	r3, #1
 800b02a:	75fb      	strb	r3, [r7, #23]
 800b02c:	7dfa      	ldrb	r2, [r7, #23]
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	429a      	cmp	r2, r3
 800b032:	d3e4      	bcc.n	800affe <V53L1_init_zone_dss_configs+0x28>
	}
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800b042:	b490      	push	{r4, r7}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	4604      	mov	r4, r0
 800b04a:	4608      	mov	r0, r1
 800b04c:	4611      	mov	r1, r2
 800b04e:	461a      	mov	r2, r3
 800b050:	4623      	mov	r3, r4
 800b052:	71fb      	strb	r3, [r7, #7]
 800b054:	4603      	mov	r3, r0
 800b056:	71bb      	strb	r3, [r7, #6]
 800b058:	460b      	mov	r3, r1
 800b05a:	717b      	strb	r3, [r7, #5]
 800b05c:	4613      	mov	r3, r2
 800b05e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b060:	79bb      	ldrb	r3, [r7, #6]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	b2da      	uxtb	r2, r3
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	4413      	add	r3, r2
 800b06a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b070:	793b      	ldrb	r3, [r7, #4]
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	b2da      	uxtb	r2, r3
 800b076:	797b      	ldrb	r3, [r7, #5]
 800b078:	4413      	add	r3, r2
 800b07a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b080:	7d3b      	ldrb	r3, [r7, #20]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	b2da      	uxtb	r2, r3
 800b086:	7c3b      	ldrb	r3, [r7, #16]
 800b088:	4413      	add	r3, r2
 800b08a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800b090:	7f3b      	ldrb	r3, [r7, #28]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	b2da      	uxtb	r2, r3
 800b096:	7e3b      	ldrb	r3, [r7, #24]
 800b098:	4413      	add	r3, r2
 800b09a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800b0a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800b0b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b0b8:	011b      	lsls	r3, r3, #4
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0c0:	4413      	add	r3, r2
 800b0c2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b0ee:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b0f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0f4:	011b      	lsls	r3, r3, #4
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0fc:	4413      	add	r3, r2
 800b0fe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b10a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	2200      	movs	r2, #0
 800b110:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b148:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b150:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	2200      	movs	r2, #0
 800b156:	701a      	strb	r2, [r3, #0]

}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc90      	pop	{r4, r7}
 800b160:	4770      	bx	lr

0800b162 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800b162:	b490      	push	{r4, r7}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	4604      	mov	r4, r0
 800b16a:	4608      	mov	r0, r1
 800b16c:	4611      	mov	r1, r2
 800b16e:	461a      	mov	r2, r3
 800b170:	4623      	mov	r3, r4
 800b172:	71fb      	strb	r3, [r7, #7]
 800b174:	4603      	mov	r3, r0
 800b176:	71bb      	strb	r3, [r7, #6]
 800b178:	460b      	mov	r3, r1
 800b17a:	717b      	strb	r3, [r7, #5]
 800b17c:	4613      	mov	r3, r2
 800b17e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b180:	79bb      	ldrb	r3, [r7, #6]
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	b2da      	uxtb	r2, r3
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	4413      	add	r3, r2
 800b18a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b190:	793b      	ldrb	r3, [r7, #4]
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	b2da      	uxtb	r2, r3
 800b196:	797b      	ldrb	r3, [r7, #5]
 800b198:	4413      	add	r3, r2
 800b19a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b1a0:	7d3b      	ldrb	r3, [r7, #20]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	7c3b      	ldrb	r3, [r7, #16]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	789a      	ldrb	r2, [r3, #2]
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	78da      	ldrb	r2, [r3, #3]
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	789a      	ldrb	r2, [r3, #2]
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	78da      	ldrb	r2, [r3, #3]
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	791a      	ldrb	r2, [r3, #4]
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b1ee:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b1f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1fc:	4413      	add	r3, r2
 800b1fe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b20a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	2200      	movs	r2, #0
 800b210:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800b212:	7f3b      	ldrb	r3, [r7, #28]
 800b214:	011b      	lsls	r3, r3, #4
 800b216:	b2da      	uxtb	r2, r3
 800b218:	7e3b      	ldrb	r3, [r7, #24]
 800b21a:	4413      	add	r3, r2
 800b21c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800b222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b22e:	4413      	add	r3, r2
 800b230:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800b236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b242:	4413      	add	r3, r2
 800b244:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	7bda      	ldrb	r2, [r3, #15]
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	7c1a      	ldrb	r2, [r3, #16]
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	7c5a      	ldrb	r2, [r3, #17]
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b268:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b270:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc90      	pop	{r4, r7}
 800b280:	4770      	bx	lr

0800b282 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800b282:	b480      	push	{r7}
 800b284:	b087      	sub	sp, #28
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	460b      	mov	r3, r1
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	220c      	movs	r2, #12
 800b2aa:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b2ac:	897b      	ldrh	r3, [r7, #10]
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	82fb      	strh	r3, [r7, #22]
 800b2e6:	e015      	b.n	800b314 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b2e8:	8afa      	ldrh	r2, [r7, #22]
 800b2ea:	897b      	ldrh	r3, [r7, #10]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d207      	bcs.n	800b300 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b2f0:	8afb      	ldrh	r3, [r7, #22]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	3302      	adds	r3, #2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	e006      	b.n	800b30e <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	3302      	adds	r3, #2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b30e:	8afb      	ldrh	r3, [r7, #22]
 800b310:	3301      	adds	r3, #1
 800b312:	82fb      	strh	r3, [r7, #22]
 800b314:	8afb      	ldrh	r3, [r7, #22]
 800b316:	2b0b      	cmp	r3, #11
 800b318:	d9e6      	bls.n	800b2e8 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	603a      	str	r2, [r7, #0]
 800b332:	80fb      	strh	r3, [r7, #6]
 800b334:	460b      	mov	r3, r1
 800b336:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b344:	2300      	movs	r3, #0
 800b346:	81fb      	strh	r3, [r7, #14]
 800b348:	e00e      	b.n	800b368 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b34a:	88ba      	ldrh	r2, [r7, #4]
 800b34c:	89fb      	ldrh	r3, [r7, #14]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	3b01      	subs	r3, #1
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	4413      	add	r3, r2
 800b356:	89ba      	ldrh	r2, [r7, #12]
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b35c:	89bb      	ldrh	r3, [r7, #12]
 800b35e:	0a1b      	lsrs	r3, r3, #8
 800b360:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b362:	89fb      	ldrh	r3, [r7, #14]
 800b364:	3301      	adds	r3, #1
 800b366:	81fb      	strh	r3, [r7, #14]
 800b368:	89fa      	ldrh	r2, [r7, #14]
 800b36a:	88bb      	ldrh	r3, [r7, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d3ec      	bcc.n	800b34a <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	4603      	mov	r3, r0
 800b386:	6039      	str	r1, [r7, #0]
 800b388:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b38a:	2300      	movs	r3, #0
 800b38c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b38e:	e00a      	b.n	800b3a6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b390:	89fb      	ldrh	r3, [r7, #14]
 800b392:	021b      	lsls	r3, r3, #8
 800b394:	b21a      	sxth	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	1c59      	adds	r1, r3, #1
 800b39a:	6039      	str	r1, [r7, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	b21b      	sxth	r3, r3
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	1e5a      	subs	r2, r3, #1
 800b3aa:	80fa      	strh	r2, [r7, #6]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1ef      	bne.n	800b390 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b3b0:	89fb      	ldrh	r3, [r7, #14]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	603a      	str	r2, [r7, #0]
 800b3c8:	80fb      	strh	r3, [r7, #6]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b3d6:	88fb      	ldrh	r3, [r7, #6]
 800b3d8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b3da:	2300      	movs	r3, #0
 800b3dc:	81fb      	strh	r3, [r7, #14]
 800b3de:	e00f      	b.n	800b400 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b3e0:	88ba      	ldrh	r2, [r7, #4]
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	89ba      	ldrh	r2, [r7, #12]
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b3f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b3f6:	121b      	asrs	r3, r3, #8
 800b3f8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b3fa:	89fb      	ldrh	r3, [r7, #14]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	81fb      	strh	r3, [r7, #14]
 800b400:	89fa      	ldrh	r2, [r7, #14]
 800b402:	88bb      	ldrh	r3, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d3eb      	bcc.n	800b3e0 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	4603      	mov	r3, r0
 800b41e:	6039      	str	r1, [r7, #0]
 800b420:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b422:	2300      	movs	r3, #0
 800b424:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b25b      	sxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da0e      	bge.n	800b44e <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b434:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b436:	e00a      	b.n	800b44e <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b43c:	021b      	lsls	r3, r3, #8
 800b43e:	b21a      	sxth	r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	1c59      	adds	r1, r3, #1
 800b444:	6039      	str	r1, [r7, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	b21b      	sxth	r3, r3
 800b44a:	4313      	orrs	r3, r2
 800b44c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b44e:	88fb      	ldrh	r3, [r7, #6]
 800b450:	1e5a      	subs	r2, r3, #1
 800b452:	80fa      	strh	r2, [r7, #6]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1ef      	bne.n	800b438 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	460b      	mov	r3, r1
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b482:	2300      	movs	r3, #0
 800b484:	82fb      	strh	r3, [r7, #22]
 800b486:	e00e      	b.n	800b4a6 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b488:	897a      	ldrh	r2, [r7, #10]
 800b48a:	8afb      	ldrh	r3, [r7, #22]
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	3b01      	subs	r3, #1
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	4413      	add	r3, r2
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	0a1b      	lsrs	r3, r3, #8
 800b49e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b4a0:	8afb      	ldrh	r3, [r7, #22]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	82fb      	strh	r3, [r7, #22]
 800b4a6:	8afa      	ldrh	r2, [r7, #22]
 800b4a8:	897b      	ldrh	r3, [r7, #10]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d3ec      	bcc.n	800b488 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b4cc:	e007      	b.n	800b4de <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	021a      	lsls	r2, r3, #8
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	1c59      	adds	r1, r3, #1
 800b4d6:	6039      	str	r1, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b4de:	88fb      	ldrh	r3, [r7, #6]
 800b4e0:	1e5a      	subs	r2, r3, #1
 800b4e2:	80fa      	strh	r2, [r7, #6]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f2      	bne.n	800b4ce <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	6039      	str	r1, [r7, #0]
 800b500:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	b25b      	sxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	da0b      	bge.n	800b528 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b510:	f04f 33ff 	mov.w	r3, #4294967295
 800b514:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b516:	e007      	b.n	800b528 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	021a      	lsls	r2, r3, #8
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	1c59      	adds	r1, r3, #1
 800b520:	6039      	str	r1, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	1e5a      	subs	r2, r3, #1
 800b52c:	80fa      	strh	r2, [r7, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1f2      	bne.n	800b518 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b532:	68fb      	ldr	r3, [r7, #12]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d107      	bne.n	800b568 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	461a      	mov	r2, r3
 800b55c:	2127      	movs	r1, #39	; 0x27
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f009 f9ce 	bl	8014900 <VL53L1_WrByte>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3318      	adds	r3, #24
 800b588:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b598:	461a      	mov	r2, r3
 800b59a:	2185      	movs	r1, #133	; 0x85
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f009 f9af 	bl	8014900 <VL53L1_WrByte>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b5be:	2101      	movs	r1, #1
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff ffd7 	bl	800b574 <VL53L1_set_firmware_enable_register>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ffc5 	bl	800b574 <VL53L1_set_firmware_enable_register>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3318      	adds	r3, #24
 800b60e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	78fa      	ldrb	r2, [r7, #3]
 800b614:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b61e:	461a      	mov	r2, r3
 800b620:	2183      	movs	r1, #131	; 0x83
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f009 f96c 	bl	8014900 <VL53L1_WrByte>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b644:	2101      	movs	r1, #1
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff ffd7 	bl	800b5fa <VL53L1_set_powerforce_register>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b668:	2100      	movs	r1, #0
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ffc5 	bl	800b5fa <VL53L1_set_powerforce_register>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3318      	adds	r3, #24
 800b690:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	2186      	movs	r1, #134	; 0x86
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f009 f92b 	bl	8014900 <VL53L1_WrByte>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b6ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b086      	sub	sp, #24
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	460a      	mov	r2, r1
 800b6c4:	80fb      	strh	r3, [r7, #6]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b6d6:	88fb      	ldrh	r3, [r7, #6]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f002 ffeb 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 800b6de:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b6e0:	797b      	ldrb	r3, [r7, #5]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f003 fbd6 	bl	800ee94 <VL53L1_decode_vcsel_period>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	021b      	lsls	r3, r3, #8
 800b6f6:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	099b      	lsrs	r3, r3, #6
 800b6fc:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b6fe:	7cfa      	ldrb	r2, [r7, #19]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	099b      	lsrs	r3, r3, #6
 800b70c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b70e:	68fb      	ldr	r3, [r7, #12]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b718:	b480      	push	{r7}
 800b71a:	b089      	sub	sp, #36	; 0x24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	4608      	mov	r0, r1
 800b722:	4611      	mov	r1, r2
 800b724:	461a      	mov	r2, r3
 800b726:	4603      	mov	r3, r0
 800b728:	817b      	strh	r3, [r7, #10]
 800b72a:	460b      	mov	r3, r1
 800b72c:	813b      	strh	r3, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	4a23      	ldr	r2, [pc, #140]	; (800b7d8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b74c:	fb82 1203 	smull	r1, r2, r2, r3
 800b750:	1192      	asrs	r2, r2, #6
 800b752:	17db      	asrs	r3, r3, #31
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b758:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	da03      	bge.n	800b768 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b760:	897b      	ldrh	r3, [r7, #10]
 800b762:	425b      	negs	r3, r3
 800b764:	b29b      	uxth	r3, r3
 800b766:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b768:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da03      	bge.n	800b778 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b770:	893b      	ldrh	r3, [r7, #8]
 800b772:	425b      	negs	r3, r3
 800b774:	b29b      	uxth	r3, r3
 800b776:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b778:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b77c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b780:	4413      	add	r3, r2
 800b782:	015b      	lsls	r3, r3, #5
 800b784:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b78a:	fb82 1203 	smull	r1, r2, r2, r3
 800b78e:	1192      	asrs	r2, r2, #6
 800b790:	17db      	asrs	r3, r3, #31
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	4413      	add	r3, r2
 800b79c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b79e:	79fa      	ldrb	r2, [r7, #7]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	fb02 f303 	mul.w	r3, r2, r3
 800b7a6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	3310      	adds	r3, #16
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	da00      	bge.n	800b7b2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800b7b0:	331f      	adds	r3, #31
 800b7b2:	115b      	asrs	r3, r3, #5
 800b7b4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7bc:	db03      	blt.n	800b7c6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7c2:	83fb      	strh	r3, [r7, #30]
 800b7c4:	e001      	b.n	800b7ca <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b7ca:	8bfb      	ldrh	r3, [r7, #30]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3724      	adds	r7, #36	; 0x24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	10624dd3 	.word	0x10624dd3

0800b7dc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	e008      	b.n	800b808 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	031a      	lsls	r2, r3, #12
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	085b      	lsrs	r3, r3, #1
 800b7fe:	441a      	add	r2, r3
		timeout_mclks =
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b808:	68fb      	ldr	r3, [r7, #12]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff ffd6 	bl	800b7dc <VL53L1_calc_timeout_mclks>
 800b830:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 f887 	bl	800b946 <VL53L1_encode_timeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b83c:	897b      	ldrh	r3, [r7, #10]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b846:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b852:	2100      	movs	r1, #0
 800b854:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b856:	f04f 0000 	mov.w	r0, #0
 800b85a:	f04f 0100 	mov.w	r1, #0
 800b85e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	2000      	movs	r0, #0
 800b866:	4688      	mov	r8, r1
 800b868:	4681      	mov	r9, r0
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	2000      	movs	r0, #0
 800b86e:	460c      	mov	r4, r1
 800b870:	4605      	mov	r5, r0
 800b872:	fb04 f009 	mul.w	r0, r4, r9
 800b876:	fb08 f105 	mul.w	r1, r8, r5
 800b87a:	4401      	add	r1, r0
 800b87c:	fba8 2304 	umull	r2, r3, r8, r4
 800b880:	4419      	add	r1, r3
 800b882:	460b      	mov	r3, r1
 800b884:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b888:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b88c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b890:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b894:	f143 0b00 	adc.w	fp, r3, #0
 800b898:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b89c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b8a0:	f04f 0200 	mov.w	r2, #0
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	0b02      	lsrs	r2, r0, #12
 800b8aa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b8ae:	0b0b      	lsrs	r3, r1, #12
 800b8b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b8b8:	697b      	ldr	r3, [r7, #20]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b8dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b8e0:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b8e2:	4413      	add	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da02      	bge.n	800b8f2 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e005      	b.n	800b8fe <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8f8:	db01      	blt.n	800b8fe <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b8fa:	4b05      	ldr	r3, [pc, #20]	; (800b910 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b8fc:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b902:	68bb      	ldr	r3, [r7, #8]

}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	0003ffff 	.word	0x0003ffff

0800b914 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	6039      	str	r1, [r7, #0]
 800b91e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b928:	88fb      	ldrh	r3, [r7, #6]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f837 	bl	800b99e <VL53L1_decode_timeout>
 800b930:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f7ff ff86 	bl	800b846 <VL53L1_calc_timeout_us>
 800b93a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b93c:	68bb      	ldr	r3, [r7, #8]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b946:	b480      	push	{r7}
 800b948:	b087      	sub	sp, #28
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d017      	beq.n	800b990 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3b01      	subs	r3, #1
 800b964:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b966:	e005      	b.n	800b974 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	085b      	lsrs	r3, r3, #1
 800b96c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b96e:	89fb      	ldrh	r3, [r7, #14]
 800b970:	3301      	adds	r3, #1
 800b972:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1f4      	bne.n	800b968 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b97e:	89fb      	ldrh	r3, [r7, #14]
 800b980:	021b      	lsls	r3, r3, #8
 800b982:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	b29b      	uxth	r3, r3
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b98c:	4413      	add	r3, r2
 800b98e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b990:	8afb      	ldrh	r3, [r7, #22]
}
 800b992:	4618      	mov	r0, r3
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b9b0:	88fa      	ldrh	r2, [r7, #6]
 800b9b2:	0a12      	lsrs	r2, r2, #8
 800b9b4:	b292      	uxth	r2, r2
 800b9b6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b9e8:	887b      	ldrh	r3, [r7, #2]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b9ee:	23f1      	movs	r3, #241	; 0xf1
 800b9f0:	77fb      	strb	r3, [r7, #31]
 800b9f2:	e05d      	b.n	800bab0 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	799a      	ldrb	r2, [r3, #6]
 800b9f8:	887b      	ldrh	r3, [r7, #2]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fe5c 	bl	800b6ba <VL53L1_calc_macro_period_us>
 800ba02:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800ba04:	6979      	ldr	r1, [r7, #20]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fee8 	bl	800b7dc <VL53L1_calc_timeout_mclks>
 800ba0c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	2bff      	cmp	r3, #255	; 0xff
 800ba12:	d901      	bls.n	800ba18 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800ba14:	23ff      	movs	r3, #255	; 0xff
 800ba16:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ba20:	6979      	ldr	r1, [r7, #20]
 800ba22:	68b8      	ldr	r0, [r7, #8]
 800ba24:	f7ff fef7 	bl	800b816 <VL53L1_calc_encoded_timeout>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba2c:	8a7b      	ldrh	r3, [r7, #18]
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba38:	8a7b      	ldrh	r3, [r7, #18]
 800ba3a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ba40:	6979      	ldr	r1, [r7, #20]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fee7 	bl	800b816 <VL53L1_calc_encoded_timeout>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba4c:	8a7b      	ldrh	r3, [r7, #18]
 800ba4e:	0a1b      	lsrs	r3, r3, #8
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba58:	8a7b      	ldrh	r3, [r7, #18]
 800ba5a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ba60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba62:	7a5a      	ldrb	r2, [r3, #9]
 800ba64:	887b      	ldrh	r3, [r7, #2]
 800ba66:	4611      	mov	r1, r2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff fe26 	bl	800b6ba <VL53L1_calc_macro_period_us>
 800ba6e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800ba70:	6979      	ldr	r1, [r7, #20]
 800ba72:	68b8      	ldr	r0, [r7, #8]
 800ba74:	f7ff fecf 	bl	800b816 <VL53L1_calc_encoded_timeout>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba7c:	8a7b      	ldrh	r3, [r7, #18]
 800ba7e:	0a1b      	lsrs	r3, r3, #8
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800ba84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba86:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba88:	8a7b      	ldrh	r3, [r7, #18]
 800ba8a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800ba90:	6979      	ldr	r1, [r7, #20]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff febf 	bl	800b816 <VL53L1_calc_encoded_timeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba9c:	8a7b      	ldrh	r3, [r7, #18]
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800baa8:	8a7b      	ldrh	r3, [r7, #18]
 800baaa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800bab0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800babc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bac0:	b09e      	sub	sp, #120	; 0x78
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6578      	str	r0, [r7, #84]	; 0x54
 800bac6:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bac8:	2300      	movs	r3, #0
 800baca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	f04f 0300 	mov.w	r3, #0
 800bad6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800bada:	f04f 0200 	mov.w	r2, #0
 800bade:	f04f 0300 	mov.w	r3, #0
 800bae2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800bae6:	f04f 0200 	mov.w	r2, #0
 800baea:	f04f 0300 	mov.w	r3, #0
 800baee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800baf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d103      	bne.n	800bb02 <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bafa:	23f1      	movs	r3, #241	; 0xf1
 800bafc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bb00:	e0d6      	b.n	800bcb0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800bb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb04:	785b      	ldrb	r3, [r3, #1]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 80d2 	beq.w	800bcb0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800bb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 80cd 	bne.w	800bcb0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800bb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	643b      	str	r3, [r7, #64]	; 0x40
 800bb20:	647a      	str	r2, [r7, #68]	; 0x44
 800bb22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb26:	460b      	mov	r3, r1
 800bb28:	3301      	adds	r3, #1
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	f143 0300 	adc.w	r3, r3, #0
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
 800bb34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb38:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2200      	movs	r2, #0
 800bb46:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb48:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800bb4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb4c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bb50:	4602      	mov	r2, r0
 800bb52:	fb02 f203 	mul.w	r2, r2, r3
 800bb56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb58:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	441a      	add	r2, r3
 800bb62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb66:	fba3 4501 	umull	r4, r5, r3, r1
 800bb6a:	1953      	adds	r3, r2, r5
 800bb6c:	461d      	mov	r5, r3
 800bb6e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800bb72:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800bb76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb7e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bb84:	460b      	mov	r3, r1
 800bb86:	3301      	adds	r3, #1
 800bb88:	61bb      	str	r3, [r7, #24]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	f143 0300 	adc.w	r3, r3, #0
 800bb90:	61fb      	str	r3, [r7, #28]
 800bb92:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bb96:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800bb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9c:	885b      	ldrh	r3, [r3, #2]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2200      	movs	r2, #0
 800bba2:	633b      	str	r3, [r7, #48]	; 0x30
 800bba4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800bba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bba8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bbac:	4622      	mov	r2, r4
 800bbae:	fb02 f203 	mul.w	r2, r2, r3
 800bbb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	fb01 f303 	mul.w	r3, r1, r3
 800bbba:	441a      	add	r2, r3
 800bbbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	fba3 ab01 	umull	sl, fp, r3, r1
 800bbc4:	eb02 030b 	add.w	r3, r2, fp
 800bbc8:	469b      	mov	fp, r3
 800bbca:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800bbce:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800bbd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	17da      	asrs	r2, r3, #31
 800bbd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbda:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800bbdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbde:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	fb02 f203 	mul.w	r2, r2, r3
 800bbe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbea:	4629      	mov	r1, r5
 800bbec:	fb01 f303 	mul.w	r3, r1, r3
 800bbf0:	4413      	add	r3, r2
 800bbf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	fba2 8901 	umull	r8, r9, r2, r1
 800bbfa:	444b      	add	r3, r9
 800bbfc:	4699      	mov	r9, r3
 800bbfe:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800bc02:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800bc06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc0a:	0fd9      	lsrs	r1, r3, #31
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	6139      	str	r1, [r7, #16]
 800bc10:	6178      	str	r0, [r7, #20]
 800bc12:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bc16:	4621      	mov	r1, r4
 800bc18:	1889      	adds	r1, r1, r2
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	eb43 0101 	adc.w	r1, r3, r1
 800bc22:	60f9      	str	r1, [r7, #12]
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bc30:	4621      	mov	r1, r4
 800bc32:	084a      	lsrs	r2, r1, #1
 800bc34:	4629      	mov	r1, r5
 800bc36:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	104b      	asrs	r3, r1, #1
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4619      	mov	r1, r3
 800bc42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bc46:	1814      	adds	r4, r2, r0
 800bc48:	603c      	str	r4, [r7, #0]
 800bc4a:	414b      	adcs	r3, r1
 800bc4c:	607b      	str	r3, [r7, #4]
 800bc4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bc52:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800bc56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	d009      	beq.n	800bc72 <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800bc5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc66:	f7f4 fadb 	bl	8000220 <__aeabi_ldivmod>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800bc72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800bc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800bc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800bc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800bc8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc8e:	7852      	ldrb	r2, [r2, #1]
 800bc90:	0852      	lsrs	r2, r2, #1
 800bc92:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800bc94:	441a      	add	r2, r3
 800bc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800bca2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bca4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800bca6:	fb93 f2f2 	sdiv	r2, r3, r2
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800bcb0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3778      	adds	r7, #120	; 0x78
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bcbe <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b087      	sub	sp, #28
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3318      	adds	r3, #24
 800bccc:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800bce0:	029b      	lsls	r3, r3, #10
 800bce2:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800bcea:	029b      	lsls	r3, r3, #10
 800bcec:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f040 8095 	bne.w	800be28 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800bd04:	091b      	lsrs	r3, r3, #4
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800bd12:	f003 030f 	and.w	r3, r3, #15
 800bd16:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800bd22:	091b      	lsrs	r3, r3, #4
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800bd30:	f003 030f 	and.w	r3, r3, #15
 800bd34:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800bd40:	091b      	lsrs	r3, r3, #4
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800bd4e:	f003 030f 	and.w	r3, r3, #15
 800bd52:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	da2c      	bge.n	800bdbe <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800bd6a:	091b      	lsrs	r3, r3, #4
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800bd88:	091b      	lsrs	r3, r3, #4
 800bd8a:	b2da      	uxtb	r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bd96:	f003 030f 	and.w	r3, r3, #15
 800bd9a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bda6:	091b      	lsrs	r3, r3, #4
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bdb4:	f003 030f 	and.w	r3, r3, #15
 800bdb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	f340 80c2 	ble.w	800bf50 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bdd2:	091b      	lsrs	r3, r3, #4
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bdf0:	091b      	lsrs	r3, r3, #4
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bdfe:	f003 030f 	and.w	r3, r3, #15
 800be02:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800be0e:	091b      	lsrs	r3, r3, #4
 800be10:	b2da      	uxtb	r2, r3
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	731a      	strb	r2, [r3, #12]
 800be26:	e093      	b.n	800bf50 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800be2e:	f003 030f 	and.w	r3, r3, #15
 800be32:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800be3e:	f003 030f 	and.w	r3, r3, #15
 800be42:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800be4e:	091b      	lsrs	r3, r3, #4
 800be50:	b2da      	uxtb	r2, r3
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800be5c:	f003 030f 	and.w	r3, r3, #15
 800be60:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800be6c:	091b      	lsrs	r3, r3, #4
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	da2c      	bge.n	800beea <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800be96:	091b      	lsrs	r3, r3, #4
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bea4:	f003 030f 	and.w	r3, r3, #15
 800bea8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800bec2:	f003 030f 	and.w	r3, r3, #15
 800bec6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800bed2:	091b      	lsrs	r3, r3, #4
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bee0:	f003 030f 	and.w	r3, r3, #15
 800bee4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	dd2c      	ble.n	800bf50 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800befc:	091b      	lsrs	r3, r3, #4
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bf0a:	f003 030f 	and.w	r3, r3, #15
 800bf0e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	b2da      	uxtb	r2, r3
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bf28:	f003 030f 	and.w	r3, r3, #15
 800bf2c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bf38:	091b      	lsrs	r3, r3, #4
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf50:	2300      	movs	r3, #0
 800bf52:	75fb      	strb	r3, [r7, #23]
 800bf54:	e007      	b.n	800bf66 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	3301      	adds	r3, #1
 800bf64:	75fb      	strb	r3, [r7, #23]
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	2b05      	cmp	r3, #5
 800bf6a:	d9f4      	bls.n	800bf56 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bf6c:	bf00      	nop
 800bf6e:	bf00      	nop
 800bf70:	371c      	adds	r7, #28
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bf7a:	b590      	push	{r4, r7, lr}
 800bf7c:	b093      	sub	sp, #76	; 0x4c
 800bf7e:	af04      	add	r7, sp, #16
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3318      	adds	r3, #24
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bf94:	2300      	movs	r3, #0
 800bf96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bfba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bfc4:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800bfcc:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800bfd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800bfd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfdc:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800bfde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bfe0:	021b      	lsls	r3, r3, #8
 800bfe2:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b07      	cmp	r3, #7
 800bfea:	d006      	beq.n	800bffa <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800bff0:	2b08      	cmp	r3, #8
 800bff2:	d002      	beq.n	800bffa <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800bff4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bff8:	e0ec      	b.n	800c1d4 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800bffa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800c000:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c004:	e0e6      	b.n	800c1d4 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c006:	2300      	movs	r3, #0
 800c008:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c00c:	e0d9      	b.n	800c1c2 <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800c00e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	214c      	movs	r1, #76	; 0x4c
 800c016:	fb01 f303 	mul.w	r3, r1, r3
 800c01a:	4413      	add	r3, r2
 800c01c:	335e      	adds	r3, #94	; 0x5e
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b09      	cmp	r3, #9
 800c022:	d00b      	beq.n	800c03c <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800c024:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	214c      	movs	r1, #76	; 0x4c
 800c02c:	fb01 f303 	mul.w	r3, r1, r3
 800c030:	4413      	add	r3, r2
 800c032:	335e      	adds	r3, #94	; 0x5e
 800c034:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800c036:	2b13      	cmp	r3, #19
 800c038:	f040 80bd 	bne.w	800c1b6 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	795b      	ldrb	r3, [r3, #5]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800c044:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	214c      	movs	r1, #76	; 0x4c
 800c04c:	fb01 f303 	mul.w	r3, r1, r3
 800c050:	4413      	add	r3, r2
 800c052:	335e      	adds	r3, #94	; 0x5e
 800c054:	2217      	movs	r2, #23
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	e009      	b.n	800c06e <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800c05a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	214c      	movs	r1, #76	; 0x4c
 800c062:	fb01 f303 	mul.w	r3, r1, r3
 800c066:	4413      	add	r3, r2
 800c068:	335e      	adds	r3, #94	; 0x5e
 800c06a:	2207      	movs	r2, #7
 800c06c:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800c06e:	2300      	movs	r3, #0
 800c070:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c074:	e097      	b.n	800c1a6 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800c076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	214c      	movs	r1, #76	; 0x4c
 800c07e:	fb01 f303 	mul.w	r3, r1, r3
 800c082:	4413      	add	r3, r2
 800c084:	3354      	adds	r3, #84	; 0x54
 800c086:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800c088:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	005b      	lsls	r3, r3, #1
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4403      	add	r3, r0
 800c098:	3310      	adds	r3, #16
 800c09a:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800c09c:	4299      	cmp	r1, r3
 800c09e:	d915      	bls.n	800c0cc <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800c0a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	214c      	movs	r1, #76	; 0x4c
 800c0a8:	fb01 f303 	mul.w	r3, r1, r3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	3354      	adds	r3, #84	; 0x54
 800c0b0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800c0b2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	4413      	add	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4403      	add	r3, r0
 800c0c2:	3310      	adds	r3, #16
 800c0c4:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c0c6:	1acb      	subs	r3, r1, r3
 800c0c8:	867b      	strh	r3, [r7, #50]	; 0x32
 800c0ca:	e014      	b.n	800c0f6 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800c0cc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	4413      	add	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	440b      	add	r3, r1
 800c0dc:	3310      	adds	r3, #16
 800c0de:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800c0e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	204c      	movs	r0, #76	; 0x4c
 800c0e8:	fb00 f303 	mul.w	r3, r0, r3
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3354      	adds	r3, #84	; 0x54
 800c0f0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800c0f6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c0f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d24e      	bcs.n	800c19c <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800c0fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c102:	2b00      	cmp	r3, #0
 800c104:	d125      	bne.n	800c152 <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800c106:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800c10a:	4613      	mov	r3, r2
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	3308      	adds	r3, #8
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800c118:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800c11c:	224c      	movs	r2, #76	; 0x4c
 800c11e:	fb02 f303 	mul.w	r3, r2, r3
 800c122:	3310      	adds	r3, #16
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	4413      	add	r3, r2
 800c128:	3304      	adds	r3, #4
 800c12a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800c12c:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800c130:	f107 0217 	add.w	r2, r7, #23
 800c134:	9203      	str	r2, [sp, #12]
 800c136:	f107 021c 	add.w	r2, r7, #28
 800c13a:	9202      	str	r2, [sp, #8]
 800c13c:	f107 0218 	add.w	r2, r7, #24
 800c140:	9201      	str	r2, [sp, #4]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4623      	mov	r3, r4
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	f000 f848 	bl	800c1dc <VL53L1_hist_events_consistency_check>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800c152:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c156:	2b00      	cmp	r3, #0
 800c158:	d115      	bne.n	800c186 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	d112      	bne.n	800c186 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800c160:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800c164:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800c168:	224c      	movs	r2, #76	; 0x4c
 800c16a:	fb02 f303 	mul.w	r3, r2, r3
 800c16e:	3310      	adds	r3, #16
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	4413      	add	r3, r2
 800c174:	3304      	adds	r3, #4
 800c176:	f107 0217 	add.w	r2, r7, #23
 800c17a:	4619      	mov	r1, r3
 800c17c:	f000 fb44 	bl	800c808 <VL53L1_hist_merged_pulse_check>
 800c180:	4603      	mov	r3, r0
 800c182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800c186:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c18a:	7df8      	ldrb	r0, [r7, #23]
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	214c      	movs	r1, #76	; 0x4c
 800c190:	fb01 f303 	mul.w	r3, r1, r3
 800c194:	4413      	add	r3, r2
 800c196:	335e      	adds	r3, #94	; 0x5e
 800c198:	4602      	mov	r2, r0
 800c19a:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800c19c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	795b      	ldrb	r3, [r3, #5]
 800c1aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	f4ff af61 	bcc.w	800c076 <VL53L1_hist_phase_consistency_check+0xfc>
 800c1b4:	e000      	b.n	800c1b8 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800c1b6:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c1b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	7c9b      	ldrb	r3, [r3, #18]
 800c1c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	f4ff af1f 	bcc.w	800c00e <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c1d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	373c      	adds	r7, #60	; 0x3c
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd90      	pop	{r4, r7, pc}

0800c1dc <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800c1dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1e0:	b0d4      	sub	sp, #336	; 0x150
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c1e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800c1fe:	f04f 0200 	mov.w	r2, #0
 800c202:	f04f 0300 	mov.w	r3, #0
 800c206:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800c20a:	f04f 0200 	mov.w	r2, #0
 800c20e:	f04f 0300 	mov.w	r3, #0
 800c212:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800c216:	f04f 0200 	mov.w	r2, #0
 800c21a:	f04f 0300 	mov.w	r3, #0
 800c21e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800c222:	f04f 0200 	mov.w	r2, #0
 800c226:	f04f 0300 	mov.w	r3, #0
 800c22a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800c22e:	f04f 0200 	mov.w	r2, #0
 800c232:	f04f 0300 	mov.w	r3, #0
 800c236:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800c23a:	f04f 0200 	mov.w	r2, #0
 800c23e:	f04f 0300 	mov.w	r3, #0
 800c242:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800c246:	f04f 0200 	mov.w	r2, #0
 800c24a:	f04f 0300 	mov.w	r3, #0
 800c24e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800c26a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d106      	bne.n	800c280 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c272:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c276:	2209      	movs	r2, #9
 800c278:	701a      	strb	r2, [r3, #0]
		return status;
 800c27a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800c27e:	e2bd      	b.n	800c7fc <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800c280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	2200      	movs	r2, #0
 800c288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c28c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c290:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c294:	460b      	mov	r3, r1
 800c296:	3301      	adds	r3, #1
 800c298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c29c:	4613      	mov	r3, r2
 800c29e:	f143 0300 	adc.w	r3, r3, #0
 800c2a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c2aa:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800c2ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2b2:	885b      	ldrh	r3, [r3, #2]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	469a      	mov	sl, r3
 800c2ba:	4693      	mov	fp, r2
 800c2bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c2c0:	fb0a f203 	mul.w	r2, sl, r3
 800c2c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c2c8:	fb0b f303 	mul.w	r3, fp, r3
 800c2cc:	441a      	add	r2, r3
 800c2ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c2d2:	fba3 450a 	umull	r4, r5, r3, sl
 800c2d6:	1953      	adds	r3, r2, r5
 800c2d8:	461d      	mov	r5, r3
 800c2da:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800c2de:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800c2e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2ee:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c2f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2fe:	4613      	mov	r3, r2
 800c300:	f143 0300 	adc.w	r3, r3, #0
 800c304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c308:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c30c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c310:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c314:	8adb      	ldrh	r3, [r3, #22]
 800c316:	b29b      	uxth	r3, r3
 800c318:	2200      	movs	r2, #0
 800c31a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c31e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c322:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c326:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c32a:	4622      	mov	r2, r4
 800c32c:	fb02 f203 	mul.w	r2, r2, r3
 800c330:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c334:	4629      	mov	r1, r5
 800c336:	fb01 f303 	mul.w	r3, r1, r3
 800c33a:	441a      	add	r2, r3
 800c33c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c340:	4621      	mov	r1, r4
 800c342:	fba3 8901 	umull	r8, r9, r3, r1
 800c346:	eb02 0309 	add.w	r3, r2, r9
 800c34a:	4699      	mov	r9, r3
 800c34c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c350:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c354:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c358:	f04f 0000 	mov.w	r0, #0
 800c35c:	f04f 0100 	mov.w	r1, #0
 800c360:	0319      	lsls	r1, r3, #12
 800c362:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c366:	0310      	lsls	r0, r2, #12
 800c368:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c36c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c370:	0fd9      	lsrs	r1, r3, #31
 800c372:	2000      	movs	r0, #0
 800c374:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c378:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c37c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c380:	4621      	mov	r1, r4
 800c382:	1889      	adds	r1, r1, r2
 800c384:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c388:	4629      	mov	r1, r5
 800c38a:	eb43 0101 	adc.w	r1, r3, r1
 800c38e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c392:	f04f 0200 	mov.w	r2, #0
 800c396:	f04f 0300 	mov.w	r3, #0
 800c39a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c39e:	4621      	mov	r1, r4
 800c3a0:	084a      	lsrs	r2, r1, #1
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	104b      	asrs	r3, r1, #1
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c3b4:	1814      	adds	r4, r2, r0
 800c3b6:	67bc      	str	r4, [r7, #120]	; 0x78
 800c3b8:	414b      	adcs	r3, r1
 800c3ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3bc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c3c0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c3c4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	d009      	beq.n	800c3e0 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c3cc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c3d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c3d4:	f7f3 ff24 	bl	8000220 <__aeabi_ldivmod>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c3e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c3e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3e8:	fb03 f102 	mul.w	r1, r3, r2
 800c3ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c3f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3f4:	fb02 f303 	mul.w	r3, r2, r3
 800c3f8:	18ca      	adds	r2, r1, r3
 800c3fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3fe:	fba3 1303 	umull	r1, r3, r3, r3
 800c402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c406:	460b      	mov	r3, r1
 800c408:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c40c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c410:	18d3      	adds	r3, r2, r3
 800c412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c416:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c41a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c41e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c422:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c426:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c42a:	6739      	str	r1, [r7, #112]	; 0x70
 800c42c:	f143 0300 	adc.w	r3, r3, #0
 800c430:	677b      	str	r3, [r7, #116]	; 0x74
 800c432:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c436:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c43a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c43e:	2b00      	cmp	r3, #0
 800c440:	da08      	bge.n	800c454 <VL53L1_hist_events_consistency_check+0x278>
 800c442:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c446:	1851      	adds	r1, r2, r1
 800c448:	66b9      	str	r1, [r7, #104]	; 0x68
 800c44a:	f143 0300 	adc.w	r3, r3, #0
 800c44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c450:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c454:	f04f 0000 	mov.w	r0, #0
 800c458:	f04f 0100 	mov.w	r1, #0
 800c45c:	0b10      	lsrs	r0, r2, #12
 800c45e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c462:	1319      	asrs	r1, r3, #12
 800c464:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c468:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46e:	2200      	movs	r2, #0
 800c470:	663b      	str	r3, [r7, #96]	; 0x60
 800c472:	667a      	str	r2, [r7, #100]	; 0x64
 800c474:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c478:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c47c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c482:	2200      	movs	r2, #0
 800c484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c488:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c48c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c490:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c494:	4621      	mov	r1, r4
 800c496:	1a51      	subs	r1, r2, r1
 800c498:	65b9      	str	r1, [r7, #88]	; 0x58
 800c49a:	4629      	mov	r1, r5
 800c49c:	eb63 0301 	sbc.w	r3, r3, r1
 800c4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4a2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c4a6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c4aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c4ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4b2:	fb03 f102 	mul.w	r1, r3, r2
 800c4b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c4ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	4419      	add	r1, r3
 800c4c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c4c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4de:	18cb      	adds	r3, r1, r3
 800c4e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4e4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c4e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c4ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c4f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c4f4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c4f8:	6539      	str	r1, [r7, #80]	; 0x50
 800c4fa:	f143 0300 	adc.w	r3, r3, #0
 800c4fe:	657b      	str	r3, [r7, #84]	; 0x54
 800c500:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c504:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c508:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da08      	bge.n	800c522 <VL53L1_hist_events_consistency_check+0x346>
 800c510:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c514:	1851      	adds	r1, r2, r1
 800c516:	64b9      	str	r1, [r7, #72]	; 0x48
 800c518:	f143 0300 	adc.w	r3, r3, #0
 800c51c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c51e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c522:	f04f 0000 	mov.w	r0, #0
 800c526:	f04f 0100 	mov.w	r1, #0
 800c52a:	0b10      	lsrs	r0, r2, #12
 800c52c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c530:	1319      	asrs	r1, r3, #12
 800c532:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c536:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c53a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c53e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c544:	2200      	movs	r2, #0
 800c546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c54a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c54e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c552:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c556:	4622      	mov	r2, r4
 800c558:	fb02 f203 	mul.w	r2, r2, r3
 800c55c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c560:	4629      	mov	r1, r5
 800c562:	fb01 f303 	mul.w	r3, r1, r3
 800c566:	441a      	add	r2, r3
 800c568:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c56c:	4621      	mov	r1, r4
 800c56e:	fba3 1301 	umull	r1, r3, r3, r1
 800c572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c576:	460b      	mov	r3, r1
 800c578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c580:	18d3      	adds	r3, r2, r3
 800c582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c586:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c58a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c58e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c592:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c596:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c59a:	6439      	str	r1, [r7, #64]	; 0x40
 800c59c:	f143 0300 	adc.w	r3, r3, #0
 800c5a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c5a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c5aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	da08      	bge.n	800c5c4 <VL53L1_hist_events_consistency_check+0x3e8>
 800c5b2:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c5b6:	1851      	adds	r1, r2, r1
 800c5b8:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5ba:	f143 0300 	adc.w	r3, r3, #0
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c5c4:	f04f 0000 	mov.w	r0, #0
 800c5c8:	f04f 0100 	mov.w	r1, #0
 800c5cc:	0b10      	lsrs	r0, r2, #12
 800c5ce:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c5d2:	1319      	asrs	r1, r3, #12
 800c5d4:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c5d8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c5dc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c5e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	fb02 f203 	mul.w	r2, r2, r3
 800c5fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c602:	4629      	mov	r1, r5
 800c604:	fb01 f303 	mul.w	r3, r1, r3
 800c608:	441a      	add	r2, r3
 800c60a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c60e:	4621      	mov	r1, r4
 800c610:	fba3 1301 	umull	r1, r3, r3, r1
 800c614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c618:	460b      	mov	r3, r1
 800c61a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c61e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c622:	18d3      	adds	r3, r2, r3
 800c624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c628:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c62c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c630:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c634:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c638:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c63c:	6339      	str	r1, [r7, #48]	; 0x30
 800c63e:	f143 0300 	adc.w	r3, r3, #0
 800c642:	637b      	str	r3, [r7, #52]	; 0x34
 800c644:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c648:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c64c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c650:	4610      	mov	r0, r2
 800c652:	4619      	mov	r1, r3
 800c654:	2900      	cmp	r1, #0
 800c656:	da08      	bge.n	800c66a <VL53L1_hist_events_consistency_check+0x48e>
 800c658:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c65c:	18c3      	adds	r3, r0, r3
 800c65e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c660:	f141 0300 	adc.w	r3, r1, #0
 800c664:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c66a:	f04f 0200 	mov.w	r2, #0
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	0b02      	lsrs	r2, r0, #12
 800c674:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c678:	130b      	asrs	r3, r1, #12
 800c67a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c67e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c682:	1c91      	adds	r1, r2, #2
 800c684:	6239      	str	r1, [r7, #32]
 800c686:	f143 0300 	adc.w	r3, r3, #0
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
 800c68c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c690:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c694:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c698:	2b00      	cmp	r3, #0
 800c69a:	da06      	bge.n	800c6aa <VL53L1_hist_events_consistency_check+0x4ce>
 800c69c:	1cd1      	adds	r1, r2, #3
 800c69e:	61b9      	str	r1, [r7, #24]
 800c6a0:	f143 0300 	adc.w	r3, r3, #0
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6aa:	f04f 0000 	mov.w	r0, #0
 800c6ae:	f04f 0100 	mov.w	r1, #0
 800c6b2:	0890      	lsrs	r0, r2, #2
 800c6b4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c6b8:	1099      	asrs	r1, r3, #2
 800c6ba:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6c2:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	613b      	str	r3, [r7, #16]
 800c6c8:	617a      	str	r2, [r7, #20]
 800c6ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c6ce:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c6d2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c6d6:	1c91      	adds	r1, r2, #2
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	f143 0300 	adc.w	r3, r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c6e4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c6e8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	da06      	bge.n	800c6fe <VL53L1_hist_events_consistency_check+0x522>
 800c6f0:	1cd1      	adds	r1, r2, #3
 800c6f2:	6039      	str	r1, [r7, #0]
 800c6f4:	f143 0300 	adc.w	r3, r3, #0
 800c6f8:	607b      	str	r3, [r7, #4]
 800c6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6fe:	f04f 0000 	mov.w	r0, #0
 800c702:	f04f 0100 	mov.w	r1, #0
 800c706:	0890      	lsrs	r0, r2, #2
 800c708:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c70c:	1099      	asrs	r1, r3, #2
 800c70e:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c716:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c718:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c71c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c71e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c722:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c728:	4413      	add	r3, r2
 800c72a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c72e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c732:	011b      	lsls	r3, r3, #4
 800c734:	4618      	mov	r0, r3
 800c736:	f002 f8c6 	bl	800e8c6 <VL53L1_isqrt>
 800c73a:	4603      	mov	r3, r0
 800c73c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c73e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c742:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c744:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c74e:	fb03 f202 	mul.w	r2, r3, r2
 800c752:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c756:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c758:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f103 0220 	add.w	r2, r3, #32
 800c762:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c766:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c768:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da00      	bge.n	800c774 <VL53L1_hist_events_consistency_check+0x598>
 800c772:	333f      	adds	r3, #63	; 0x3f
 800c774:	119b      	asrs	r3, r3, #6
 800c776:	461a      	mov	r2, r3
 800c778:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c77c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c79a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c79e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	da08      	bge.n	800c7b8 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c7a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c7b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	e007      	b.n	800c7c8 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c7b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c7bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c7c0:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c7c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7c6:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c7c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	dd0b      	ble.n	800c7f0 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c7d8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c7dc:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c7de:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d204      	bcs.n	800c7f0 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c7e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c7ea:	2214      	movs	r2, #20
 800c7ec:	701a      	strb	r2, [r3, #0]
 800c7ee:	e003      	b.n	800c7f8 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c7f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c7f4:	2209      	movs	r2, #9
 800c7f6:	701a      	strb	r2, [r3, #0]





	return status;
 800c7f8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c802:	46bd      	mov	sp, r7
 800c804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c808 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c816:	2300      	movs	r3, #0
 800c818:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c82a:	429a      	cmp	r2, r3
 800c82c:	dd0b      	ble.n	800c846 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c834:	b29a      	uxth	r2, r3
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	b29b      	uxth	r3, r3
		delta_mm =
 800c842:	82fb      	strh	r3, [r7, #22]
 800c844:	e00a      	b.n	800c85c <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c854:	b29b      	uxth	r3, r3
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	b29b      	uxth	r3, r3
		delta_mm =
 800c85a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c85c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dd09      	ble.n	800c878 <VL53L1_hist_merged_pulse_check+0x70>
 800c864:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	dd03      	ble.n	800c878 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2216      	movs	r2, #22
 800c874:	701a      	strb	r2, [r3, #0]
 800c876:	e002      	b.n	800c87e <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2209      	movs	r2, #9
 800c87c:	701a      	strb	r2, [r3, #0]

	return status;
 800c87e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c882:	4618      	mov	r0, r3
 800c884:	371c      	adds	r7, #28
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b08e      	sub	sp, #56	; 0x38
 800c892:	af04      	add	r7, sp, #16
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
 800c89a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3318      	adds	r3, #24
 800c8a6:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c8b6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c8be:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c8c6:	2b09      	cmp	r3, #9
 800c8c8:	d009      	beq.n	800c8de <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c8d0:	2b13      	cmp	r3, #19
 800c8d2:	d004      	beq.n	800c8de <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c8da:	2b14      	cmp	r3, #20
 800c8dc:	d129      	bne.n	800c932 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8e4:	2b09      	cmp	r3, #9
 800c8e6:	d009      	beq.n	800c8fc <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c8ee:	2b13      	cmp	r3, #19
 800c8f0:	d004      	beq.n	800c8fc <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c8f8:	2b14      	cmp	r3, #20
 800c8fa:	d11a      	bne.n	800c932 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2209      	movs	r2, #9
 800c900:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c90e:	8bb9      	ldrh	r1, [r7, #28]
 800c910:	7ff8      	ldrb	r0, [r7, #31]
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	f107 0318 	add.w	r3, r7, #24
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	f107 0314 	add.w	r3, r7, #20
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	4613      	mov	r3, r2
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	f7ff fc58 	bl	800c1dc <VL53L1_hist_events_consistency_check>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c936:	4618      	mov	r0, r3
 800c938:	3728      	adds	r7, #40	; 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b088      	sub	sp, #32
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c966:	2b00      	cmp	r3, #0
 800c968:	d019      	beq.n	800c99e <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c970:	4618      	mov	r0, r3
 800c972:	f002 f90f 	bl	800eb94 <VL53L1_calc_pll_period_mm>
 800c976:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c97e:	021b      	lsls	r3, r3, #8
 800c980:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	fb02 f303 	mul.w	r3, r2, r3
 800c98a:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c992:	0bdb      	lsrs	r3, r3, #15
 800c994:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	b21a      	sxth	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c99e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3720      	adds	r7, #32
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c9aa:	b590      	push	{r4, r7, lr}
 800c9ac:	b08d      	sub	sp, #52	; 0x34
 800c9ae:	af04      	add	r7, sp, #16
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	4608      	mov	r0, r1
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	80fb      	strh	r3, [r7, #6]
 800c9bc:	4603      	mov	r3, r0
 800c9be:	80bb      	strh	r3, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c9e8:	78b9      	ldrb	r1, [r7, #2]
 800c9ea:	78f8      	ldrb	r0, [r7, #3]
 800c9ec:	f107 030c 	add.w	r3, r7, #12
 800c9f0:	9303      	str	r3, [sp, #12]
 800c9f2:	f107 030e 	add.w	r3, r7, #14
 800c9f6:	9302      	str	r3, [sp, #8]
 800c9f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	23ff      	movs	r3, #255	; 0xff
 800ca04:	22c7      	movs	r2, #199	; 0xc7
 800ca06:	f000 fa03 	bl	800ce10 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800ca0a:	89fb      	ldrh	r3, [r7, #14]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d050      	beq.n	800cab2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800ca10:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d04d      	beq.n	800cab2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800ca16:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800ca1a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ca1e:	78b9      	ldrb	r1, [r7, #2]
 800ca20:	78f8      	ldrb	r0, [r7, #3]
 800ca22:	f107 0308 	add.w	r3, r7, #8
 800ca26:	9303      	str	r3, [sp, #12]
 800ca28:	f107 030a 	add.w	r3, r7, #10
 800ca2c:	9302      	str	r3, [sp, #8]
 800ca2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	4623      	mov	r3, r4
 800ca3a:	f000 f9e9 	bl	800ce10 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800ca42:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800ca44:	897b      	ldrh	r3, [r7, #10]
 800ca46:	461a      	mov	r2, r3
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	fb02 f303 	mul.w	r3, r2, r3
 800ca4e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	461a      	mov	r2, r3
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca5a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800ca60:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800ca62:	893b      	ldrh	r3, [r7, #8]
 800ca64:	461a      	mov	r2, r3
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	fb02 f303 	mul.w	r3, r2, r3
 800ca6c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800ca6e:	89bb      	ldrh	r3, [r7, #12]
 800ca70:	461a      	mov	r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca78:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800ca7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	fb02 f303 	mul.w	r3, r2, r3
 800ca84:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800ca86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	fb02 f303 	mul.w	r3, r2, r3
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	4413      	add	r3, r2
 800ca94:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800ca96:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800ca98:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800ca9a:	4413      	add	r3, r2
 800ca9c:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	009a      	lsls	r2, r3, #2
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	fb92 f3f3 	sdiv	r3, r2, r3
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e002      	b.n	800cab8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800cab2:	bf00      	nop
 800cab4:	e000      	b.n	800cab8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800cab6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	b21a      	sxth	r2, r3
 800cabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cabe:	801a      	strh	r2, [r3, #0]

}
 800cac0:	bf00      	nop
 800cac2:	3724      	adds	r7, #36	; 0x24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd90      	pop	{r4, r7, pc}

0800cac8 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60b9      	str	r1, [r7, #8]
 800cad0:	607a      	str	r2, [r7, #4]
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	4603      	mov	r3, r0
 800cad6:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
 800cada:	08db      	lsrs	r3, r3, #3
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	f003 0307 	and.w	r3, r3, #7
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	2301      	movs	r3, #1
 800caf6:	4093      	lsls	r3, r2
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	701a      	strb	r2, [r3, #0]

}
 800cafe:	bf00      	nop
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b083      	sub	sp, #12
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	4603      	mov	r3, r0
 800cb12:	603a      	str	r2, [r7, #0]
 800cb14:	71fb      	strb	r3, [r7, #7]
 800cb16:	460b      	mov	r3, r1
 800cb18:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	2b07      	cmp	r3, #7
 800cb1e:	d90a      	bls.n	800cb36 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800cb20:	79bb      	ldrb	r3, [r7, #6]
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	3b71      	subs	r3, #113	; 0x71
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800cb34:	e00a      	b.n	800cb4c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800cb36:	79bb      	ldrb	r3, [r7, #6]
 800cb38:	f1c3 030f 	rsb	r3, r3, #15
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	4413      	add	r3, r2
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	701a      	strb	r2, [r3, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
 800cb64:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	091b      	lsrs	r3, r3, #4
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	f003 030f 	and.w	r3, r3, #15
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	701a      	strb	r2, [r3, #0]

}
 800cb7c:	bf00      	nop
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	603a      	str	r2, [r7, #0]
 800cb92:	71fb      	strb	r3, [r7, #7]
 800cb94:	460b      	mov	r3, r1
 800cb96:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800cb98:	79bb      	ldrb	r3, [r7, #6]
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	4413      	add	r3, r2
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	701a      	strb	r2, [r3, #0]

}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60ba      	str	r2, [r7, #8]
 800cbbc:	607b      	str	r3, [r7, #4]
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73fb      	strb	r3, [r7, #15]
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800cbd6:	f107 0217 	add.w	r2, r7, #23
 800cbda:	f107 0116 	add.w	r1, r7, #22
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f002 fa51 	bl	800f088 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800cbe6:	f107 0214 	add.w	r2, r7, #20
 800cbea:	f107 0115 	add.w	r1, r7, #21
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff ffb1 	bl	800cb58 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	7d7b      	ldrb	r3, [r7, #21]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	0fd9      	lsrs	r1, r3, #31
 800cc00:	440b      	add	r3, r1
 800cc02:	105b      	asrs	r3, r3, #1
 800cc04:	425b      	negs	r3, r3
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	4413      	add	r3, r2
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	b21a      	sxth	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	da02      	bge.n	800cc22 <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	7d7b      	ldrb	r3, [r7, #21]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	b21a      	sxth	r2, r3
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc3e:	2b0f      	cmp	r3, #15
 800cc40:	dd02      	ble.n	800cc48 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800cc42:	6a3b      	ldr	r3, [r7, #32]
 800cc44:	220f      	movs	r2, #15
 800cc46:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800cc48:	7dbb      	ldrb	r3, [r7, #22]
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	7d3b      	ldrb	r3, [r7, #20]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	0fd9      	lsrs	r1, r3, #31
 800cc52:	440b      	add	r3, r1
 800cc54:	105b      	asrs	r3, r3, #1
 800cc56:	425b      	negs	r3, r3
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	b21a      	sxth	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	da02      	bge.n	800cc74 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	7d3b      	ldrb	r3, [r7, #20]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	4413      	add	r3, r2
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	b21a      	sxth	r2, r3
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc90:	2b0f      	cmp	r3, #15
 800cc92:	dd02      	ble.n	800cc9a <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	220f      	movs	r2, #15
 800cc98:	801a      	strh	r2, [r3, #0]
}
 800cc9a:	bf00      	nop
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b085      	sub	sp, #20
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	4603      	mov	r3, r0
 800ccaa:	460a      	mov	r2, r1
 800ccac:	71fb      	strb	r3, [r7, #7]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800ccbe:	79bb      	ldrb	r3, [r7, #6]
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d104      	bne.n	800ccd6 <VL53L1_is_aperture_location+0x34>
 800cccc:	7b7b      	ldrb	r3, [r7, #13]
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d101      	bne.n	800ccd6 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800ccd6:	7bbb      	ldrb	r3, [r7, #14]
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d104      	bne.n	800cce6 <VL53L1_is_aperture_location+0x44>
 800ccdc:	7b7b      	ldrb	r3, [r7, #13]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800cce2:	2301      	movs	r3, #1
 800cce4:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800ccf4:	b590      	push	{r4, r7, lr}
 800ccf6:	b08b      	sub	sp, #44	; 0x2c
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	603a      	str	r2, [r7, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	4603      	mov	r3, r0
 800cd00:	71fb      	strb	r3, [r7, #7]
 800cd02:	460b      	mov	r3, r1
 800cd04:	71bb      	strb	r3, [r7, #6]
 800cd06:	4613      	mov	r3, r2
 800cd08:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800cd36:	f107 0416 	add.w	r4, r7, #22
 800cd3a:	f107 0218 	add.w	r2, r7, #24
 800cd3e:	79b9      	ldrb	r1, [r7, #6]
 800cd40:	79f8      	ldrb	r0, [r7, #7]
 800cd42:	f107 0312 	add.w	r3, r7, #18
 800cd46:	9301      	str	r3, [sp, #4]
 800cd48:	f107 0314 	add.w	r3, r7, #20
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4623      	mov	r3, r4
 800cd50:	f7ff ff30 	bl	800cbb4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	2200      	movs	r2, #0
 800cd58:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cd5a:	8afb      	ldrh	r3, [r7, #22]
 800cd5c:	83bb      	strh	r3, [r7, #28]
 800cd5e:	e04c      	b.n	800cdfa <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cd60:	8b3b      	ldrh	r3, [r7, #24]
 800cd62:	83fb      	strh	r3, [r7, #30]
 800cd64:	e03d      	b.n	800cde2 <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800cd66:	8bbb      	ldrh	r3, [r7, #28]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	8bfa      	ldrh	r2, [r7, #30]
 800cd6c:	b2d1      	uxtb	r1, r2
 800cd6e:	f107 0211 	add.w	r2, r7, #17
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff fec9 	bl	800cb0a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cd78:	7c78      	ldrb	r0, [r7, #17]
 800cd7a:	f107 030e 	add.w	r3, r7, #14
 800cd7e:	f107 020f 	add.w	r2, r7, #15
 800cd82:	f107 0110 	add.w	r1, r7, #16
 800cd86:	f7ff fe9f 	bl	800cac8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cd8a:	7c3b      	ldrb	r3, [r7, #16]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	4413      	add	r3, r2
 800cd92:	781a      	ldrb	r2, [r3, #0]
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	4013      	ands	r3, r2
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d01b      	beq.n	800cdd6 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800cd9e:	8bbb      	ldrh	r3, [r7, #28]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	8bfa      	ldrh	r2, [r7, #30]
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff ff7a 	bl	800cca2 <VL53L1_is_aperture_location>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cdb2:	7efb      	ldrb	r3, [r7, #27]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	881a      	ldrh	r2, [r3, #0]
 800cdbc:	88bb      	ldrh	r3, [r7, #4]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	801a      	strh	r2, [r3, #0]
 800cdc6:	e006      	b.n	800cdd6 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cdd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	3301      	adds	r3, #1
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	83fb      	strh	r3, [r7, #30]
 800cde2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cde6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	ddbb      	ble.n	800cd66 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cdee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	83bb      	strh	r3, [r7, #28]
 800cdfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdfe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	ddac      	ble.n	800cd60 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800ce06:	bf00      	nop
 800ce08:	bf00      	nop
 800ce0a:	3724      	adds	r7, #36	; 0x24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}

0800ce10 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b08d      	sub	sp, #52	; 0x34
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	4604      	mov	r4, r0
 800ce18:	4608      	mov	r0, r1
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	4623      	mov	r3, r4
 800ce20:	71fb      	strb	r3, [r7, #7]
 800ce22:	4603      	mov	r3, r0
 800ce24:	71bb      	strb	r3, [r7, #6]
 800ce26:	460b      	mov	r3, r1
 800ce28:	717b      	strb	r3, [r7, #5]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800ce70:	f107 041c 	add.w	r4, r7, #28
 800ce74:	f107 021e 	add.w	r2, r7, #30
 800ce78:	79b9      	ldrb	r1, [r7, #6]
 800ce7a:	79f8      	ldrb	r0, [r7, #7]
 800ce7c:	f107 0318 	add.w	r3, r7, #24
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	f107 031a 	add.w	r3, r7, #26
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	4623      	mov	r3, r4
 800ce8a:	f7ff fe93 	bl	800cbb4 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800ce8e:	f107 0414 	add.w	r4, r7, #20
 800ce92:	f107 0216 	add.w	r2, r7, #22
 800ce96:	7939      	ldrb	r1, [r7, #4]
 800ce98:	7978      	ldrb	r0, [r7, #5]
 800ce9a:	f107 0310 	add.w	r3, r7, #16
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	f107 0312 	add.w	r3, r7, #18
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	4623      	mov	r3, r4
 800cea8:	f7ff fe84 	bl	800cbb4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800ceac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceae:	2200      	movs	r2, #0
 800ceb0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800ceb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ceb8:	8abb      	ldrh	r3, [r7, #20]
 800ceba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cebc:	e06c      	b.n	800cf98 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cebe:	8afb      	ldrh	r3, [r7, #22]
 800cec0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cec2:	e05d      	b.n	800cf80 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800cec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ceca:	b2d1      	uxtb	r1, r2
 800cecc:	f107 020f 	add.w	r2, r7, #15
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fe1a 	bl	800cb0a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ced6:	7bf8      	ldrb	r0, [r7, #15]
 800ced8:	f107 030c 	add.w	r3, r7, #12
 800cedc:	f107 020d 	add.w	r2, r7, #13
 800cee0:	f107 010e 	add.w	r1, r7, #14
 800cee4:	f7ff fdf0 	bl	800cac8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	4413      	add	r3, r2
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	7b3b      	ldrb	r3, [r7, #12]
 800cef4:	4013      	ands	r3, r2
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d03b      	beq.n	800cf74 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cefc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fecb 	bl	800cca2 <VL53L1_is_aperture_location>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cf12:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cf1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf1c:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf1e:	e002      	b.n	800cf26 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cf20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf24:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cf26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf2a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	db19      	blt.n	800cf66 <VL53L1_calc_mm_effective_spads+0x156>
 800cf32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cf36:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	dc13      	bgt.n	800cf66 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cf3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cf42:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cf46:	429a      	cmp	r2, r3
 800cf48:	db0d      	blt.n	800cf66 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cf4a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cf4e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cf52:	429a      	cmp	r2, r3
 800cf54:	dc07      	bgt.n	800cf66 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf58:	881a      	ldrh	r2, [r3, #0]
 800cf5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf5c:	4413      	add	r3, r2
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf62:	801a      	strh	r2, [r3, #0]
 800cf64:	e006      	b.n	800cf74 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cf66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf68:	881a      	ldrh	r2, [r3, #0]
 800cf6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf6c:	4413      	add	r3, r2
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf72:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cf74:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cf80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf84:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	dd9b      	ble.n	800cec4 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cf8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3301      	adds	r3, #1
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cf98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cf9c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	dd8c      	ble.n	800cebe <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop
 800cfa8:	372c      	adds	r7, #44	; 0x2c
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd90      	pop	{r4, r7, pc}

0800cfae <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b086      	sub	sp, #24
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7fd ff6d 	bl	800aea0 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	7c9a      	ldrb	r2, [r3, #18]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	3314      	adds	r3, #20
 800cff0:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	75fb      	strb	r3, [r7, #23]
 800cff6:	e06b      	b.n	800d0d0 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800cff8:	7dfb      	ldrb	r3, [r7, #23]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d034      	beq.n	800d06c <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800d002:	e05f      	b.n	800d0c4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d03c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	8a9a      	ldrh	r2, [r3, #20]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	601a      	str	r2, [r3, #0]

			break;
 800d06a:	e02b      	b.n	800d0c4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d09c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	611a      	str	r2, [r3, #16]
			break;
 800d0c2:	bf00      	nop
		}

		pdata++;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	334c      	adds	r3, #76	; 0x4c
 800d0c8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	75fb      	strb	r3, [r7, #23]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	7c9b      	ldrb	r3, [r3, #18]
 800d0d4:	7dfa      	ldrb	r2, [r7, #23]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d38e      	bcc.n	800cff8 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b089      	sub	sp, #36	; 0x24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3318      	adds	r3, #24
 800d0f4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800d106:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d10e:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800d110:	4613      	mov	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	4413      	add	r3, r2
 800d120:	3302      	adds	r3, #2
 800d122:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800d148:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3724      	adds	r7, #36	; 0x24
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800d158:	b480      	push	{r7}
 800d15a:	b08b      	sub	sp, #44	; 0x2c
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d162:	2300      	movs	r3, #0
 800d164:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3318      	adds	r3, #24
 800d16a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d172:	3308      	adds	r3, #8
 800d174:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d17c:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d184:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800d18c:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800d18e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d192:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800d194:	7bfa      	ldrb	r2, [r7, #15]
 800d196:	6939      	ldr	r1, [r7, #16]
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	440b      	add	r3, r1
 800d1a2:	3306      	adds	r3, #6
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d1ae:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1b6:	e01a      	b.n	800d1ee <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	214c      	movs	r1, #76	; 0x4c
 800d1c0:	fb01 f303 	mul.w	r3, r1, r3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	334a      	adds	r3, #74	; 0x4a
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d209      	bcs.n	800d1e4 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	214c      	movs	r1, #76	; 0x4c
 800d1d8:	fb01 f303 	mul.w	r3, r1, r3
 800d1dc:	4413      	add	r3, r2
 800d1de:	334a      	adds	r3, #74	; 0x4a
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800d1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	7c9b      	ldrb	r3, [r3, #18]
 800d1f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d3de      	bcc.n	800d1b8 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800d1fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800d200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d204:	623b      	str	r3, [r7, #32]
 800d206:	e00e      	b.n	800d226 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800d208:	89bb      	ldrh	r3, [r7, #12]
 800d20a:	039b      	lsls	r3, r3, #14
 800d20c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800d20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d210:	6a3a      	ldr	r2, [r7, #32]
 800d212:	fbb2 f3f3 	udiv	r3, r2, r3
 800d216:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d21e:	d302      	bcc.n	800d226 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800d220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d224:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d226:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d22c:	6939      	ldr	r1, [r7, #16]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	440b      	add	r3, r1
 800d238:	3306      	adds	r3, #6
 800d23a:	4602      	mov	r2, r0
 800d23c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800d23e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d242:	4618      	mov	r0, r3
 800d244:	372c      	adds	r7, #44	; 0x2c
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b08a      	sub	sp, #40	; 0x28
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d256:	2300      	movs	r3, #0
 800d258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3318      	adds	r3, #24
 800d260:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	332c      	adds	r3, #44	; 0x2c
 800d266:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	33c2      	adds	r3, #194	; 0xc2
 800d26c:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d274:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	3302      	adds	r3, #2
 800d27a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	785b      	ldrb	r3, [r3, #1]
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d28c:	461a      	mov	r2, r3
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	4413      	add	r3, r2
 800d292:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d296:	2b01      	cmp	r3, #1
 800d298:	d11e      	bne.n	800d2d8 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d05d      	beq.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	719a      	strb	r2, [r3, #6]
 800d2d6:	e050      	b.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d2de:	461a      	mov	r2, r3
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d11e      	bne.n	800d32a <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10b      	bne.n	800d30a <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d034      	beq.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	719a      	strb	r2, [r3, #6]
 800d328:	e027      	b.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d330:	461a      	mov	r2, r3
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	4413      	add	r3, r2
 800d336:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d11d      	bne.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10b      	bne.n	800d35c <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00b      	beq.n	800d37a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d37a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d109      	bne.n	800d396 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d38e:	461a      	mov	r2, r3
 800d390:	6978      	ldr	r0, [r7, #20]
 800d392:	f7fd f921 	bl	800a5d8 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3728      	adds	r7, #40	; 0x28
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b089      	sub	sp, #36	; 0x24
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	607a      	str	r2, [r7, #4]
 800d3ac:	603b      	str	r3, [r7, #0]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	3318      	adds	r3, #24
 800d3ba:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d3c2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d103      	bne.n	800d3d2 <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	7afa      	ldrb	r2, [r7, #11]
 800d3ce:	701a      	strb	r2, [r3, #0]
 800d3d0:	e01e      	b.n	800d410 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d111      	bne.n	800d404 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2bff      	cmp	r3, #255	; 0xff
 800d3e6:	d103      	bne.n	800d3f0 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2280      	movs	r2, #128	; 0x80
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	e005      	b.n	800d3fc <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2200      	movs	r2, #0
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	e005      	b.n	800d410 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	3301      	adds	r3, #1
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d410:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3724      	adds	r7, #36	; 0x24
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d436:	2b01      	cmp	r3, #1
 800d438:	d118      	bne.n	800d46c <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	719a      	strb	r2, [r3, #6]
 800d46a:	e03a      	b.n	800d4e2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d472:	2b02      	cmp	r3, #2
 800d474:	d118      	bne.n	800d4a8 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	719a      	strb	r2, [r3, #6]
 800d4a6:	e01c      	b.n	800d4e2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d117      	bne.n	800d4e2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	371c      	adds	r7, #28
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b08a      	sub	sp, #40	; 0x28
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	460b      	mov	r3, r1
 800d500:	72fb      	strb	r3, [r7, #11]
 800d502:	4613      	mov	r3, r2
 800d504:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d506:	2300      	movs	r3, #0
 800d508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3318      	adds	r3, #24
 800d510:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d51a:	7afa      	ldrb	r2, [r7, #11]
 800d51c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d51e:	4611      	mov	r1, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe f8ca 	bl	800b6ba <VL53L1_calc_macro_period_us>
 800d526:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	031b      	lsls	r3, r3, #12
 800d536:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	085b      	lsrs	r3, r3, #1
 800d53c:	69ba      	ldr	r2, [r7, #24]
 800d53e:	4413      	add	r3, r2
 800d540:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d542:	69ba      	ldr	r2, [r7, #24]
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	fbb2 f3f3 	udiv	r3, r2, r3
 800d54a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	2bff      	cmp	r3, #255	; 0xff
 800d550:	d904      	bls.n	800d55c <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	22ff      	movs	r2, #255	; 0xff
 800d556:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d55a:	e004      	b.n	800d566 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	7afa      	ldrb	r2, [r7, #11]
 800d56a:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10a      	bne.n	800d58c <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d57c:	461a      	mov	r2, r3
 800d57e:	214b      	movs	r1, #75	; 0x4b
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f007 f9bd 	bl	8014900 <VL53L1_WrByte>
 800d586:	4603      	mov	r3, r0
 800d588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d58c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d59a:	461a      	mov	r2, r3
 800d59c:	2160      	movs	r1, #96	; 0x60
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f007 f9ae 	bl	8014900 <VL53L1_WrByte>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d5b0:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d5b8:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d5ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d109      	bne.n	800d5d6 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d5c2:	f107 0214 	add.w	r2, r7, #20
 800d5c6:	2302      	movs	r3, #2
 800d5c8:	2178      	movs	r1, #120	; 0x78
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f007 f92c 	bl	8014828 <VL53L1_WriteMulti>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	893a      	ldrh	r2, [r7, #8]
 800d5da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d5de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d108      	bne.n	800d5f8 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d5e6:	893b      	ldrh	r3, [r7, #8]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	211c      	movs	r1, #28
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f007 f9b1 	bl	8014954 <VL53L1_WrWord>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d5f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d108      	bne.n	800d612 <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d600:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d602:	461a      	mov	r2, r3
 800d604:	2164      	movs	r1, #100	; 0x64
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f007 f9a4 	bl	8014954 <VL53L1_WrWord>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d616:	2b00      	cmp	r3, #0
 800d618:	d108      	bne.n	800d62c <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d61a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d61c:	461a      	mov	r2, r3
 800d61e:	2166      	movs	r1, #102	; 0x66
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f007 f997 	bl	8014954 <VL53L1_WrWord>
 800d626:	4603      	mov	r3, r0
 800d628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d62c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d630:	4618      	mov	r0, r3
 800d632:	3728      	adds	r7, #40	; 0x28
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d63c:	b0a2      	sub	sp, #136	; 0x88
 800d63e:	af00      	add	r7, sp, #0
 800d640:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d642:	2300      	movs	r3, #0
 800d644:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	3318      	adds	r3, #24
 800d64c:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d650:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d654:	3308      	adds	r3, #8
 800d656:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d65a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d65e:	3318      	adds	r3, #24
 800d660:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d664:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d668:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66c:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d670:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d674:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d67e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d682:	2b00      	cmp	r3, #0
 800d684:	d103      	bne.n	800d68e <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d68a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d696:	4413      	add	r3, r2
 800d698:	2200      	movs	r2, #0
 800d69a:	461c      	mov	r4, r3
 800d69c:	4615      	mov	r5, r2
 800d69e:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d6a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d6a6:	4622      	mov	r2, r4
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	f04f 0000 	mov.w	r0, #0
 800d6ae:	f04f 0100 	mov.w	r1, #0
 800d6b2:	0159      	lsls	r1, r3, #5
 800d6b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d6b8:	0150      	lsls	r0, r2, #5
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	ebb2 0804 	subs.w	r8, r2, r4
 800d6c2:	eb63 0905 	sbc.w	r9, r3, r5
 800d6c6:	f04f 0200 	mov.w	r2, #0
 800d6ca:	f04f 0300 	mov.w	r3, #0
 800d6ce:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d6d2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d6d6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d6da:	4690      	mov	r8, r2
 800d6dc:	4699      	mov	r9, r3
 800d6de:	eb18 0304 	adds.w	r3, r8, r4
 800d6e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d6e4:	eb49 0305 	adc.w	r3, r9, r5
 800d6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ea:	f04f 0200 	mov.w	r2, #0
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	00cb      	lsls	r3, r1, #3
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d700:	4621      	mov	r1, r4
 800d702:	00ca      	lsls	r2, r1, #3
 800d704:	4610      	mov	r0, r2
 800d706:	4619      	mov	r1, r3
 800d708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d70c:	2200      	movs	r2, #0
 800d70e:	643b      	str	r3, [r7, #64]	; 0x40
 800d710:	647a      	str	r2, [r7, #68]	; 0x44
 800d712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d716:	f7f2 fdd3 	bl	80002c0 <__aeabi_uldivmod>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d722:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d726:	4622      	mov	r2, r4
 800d728:	462b      	mov	r3, r5
 800d72a:	f04f 0000 	mov.w	r0, #0
 800d72e:	f04f 0100 	mov.w	r1, #0
 800d732:	0159      	lsls	r1, r3, #5
 800d734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d738:	0150      	lsls	r0, r2, #5
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	ebb2 0a04 	subs.w	sl, r2, r4
 800d742:	eb63 0b05 	sbc.w	fp, r3, r5
 800d746:	f04f 0200 	mov.w	r2, #0
 800d74a:	f04f 0300 	mov.w	r3, #0
 800d74e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d752:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d756:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d75a:	4692      	mov	sl, r2
 800d75c:	469b      	mov	fp, r3
 800d75e:	eb1a 0304 	adds.w	r3, sl, r4
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28
 800d764:	eb4b 0305 	adc.w	r3, fp, r5
 800d768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d76a:	f04f 0200 	mov.w	r2, #0
 800d76e:	f04f 0300 	mov.w	r3, #0
 800d772:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d776:	4629      	mov	r1, r5
 800d778:	00cb      	lsls	r3, r1, #3
 800d77a:	4621      	mov	r1, r4
 800d77c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d780:	4621      	mov	r1, r4
 800d782:	00ca      	lsls	r2, r1, #3
 800d784:	4610      	mov	r0, r2
 800d786:	4619      	mov	r1, r3
 800d788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d78c:	2200      	movs	r2, #0
 800d78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d790:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d792:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d796:	f7f2 fd93 	bl	80002c0 <__aeabi_uldivmod>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d7a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7a8:	8ad2      	ldrh	r2, [r2, #22]
 800d7aa:	fb02 f303 	mul.w	r3, r2, r3
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	623b      	str	r3, [r7, #32]
 800d7b2:	627a      	str	r2, [r7, #36]	; 0x24
 800d7b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d7b8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d7bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	d105      	bne.n	800d7d0 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d7c4:	f04f 0201 	mov.w	r2, #1
 800d7c8:	f04f 0300 	mov.w	r3, #0
 800d7cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d7d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	f04f 0400 	mov.w	r4, #0
 800d7dc:	f04f 0500 	mov.w	r5, #0
 800d7e0:	015d      	lsls	r5, r3, #5
 800d7e2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d7e6:	0154      	lsls	r4, r2, #5
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	1a14      	subs	r4, r2, r0
 800d7ee:	61bc      	str	r4, [r7, #24]
 800d7f0:	eb63 0301 	sbc.w	r3, r3, r1
 800d7f4:	61fb      	str	r3, [r7, #28]
 800d7f6:	f04f 0200 	mov.w	r2, #0
 800d7fa:	f04f 0300 	mov.w	r3, #0
 800d7fe:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d802:	464c      	mov	r4, r9
 800d804:	00a3      	lsls	r3, r4, #2
 800d806:	4644      	mov	r4, r8
 800d808:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d80c:	4644      	mov	r4, r8
 800d80e:	00a2      	lsls	r2, r4, #2
 800d810:	4614      	mov	r4, r2
 800d812:	461d      	mov	r5, r3
 800d814:	4623      	mov	r3, r4
 800d816:	181b      	adds	r3, r3, r0
 800d818:	613b      	str	r3, [r7, #16]
 800d81a:	462b      	mov	r3, r5
 800d81c:	eb41 0303 	adc.w	r3, r1, r3
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	f04f 0200 	mov.w	r2, #0
 800d826:	f04f 0300 	mov.w	r3, #0
 800d82a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d82e:	4629      	mov	r1, r5
 800d830:	02cb      	lsls	r3, r1, #11
 800d832:	4621      	mov	r1, r4
 800d834:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d838:	4621      	mov	r1, r4
 800d83a:	02ca      	lsls	r2, r1, #11
 800d83c:	461c      	mov	r4, r3
 800d83e:	4613      	mov	r3, r2
 800d840:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d844:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d848:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d84c:	f7f2 fd38 	bl	80002c0 <__aeabi_uldivmod>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d858:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d85c:	4602      	mov	r2, r0
 800d85e:	460b      	mov	r3, r1
 800d860:	f04f 0400 	mov.w	r4, #0
 800d864:	f04f 0500 	mov.w	r5, #0
 800d868:	015d      	lsls	r5, r3, #5
 800d86a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d86e:	0154      	lsls	r4, r2, #5
 800d870:	4622      	mov	r2, r4
 800d872:	462b      	mov	r3, r5
 800d874:	1a14      	subs	r4, r2, r0
 800d876:	60bc      	str	r4, [r7, #8]
 800d878:	eb63 0301 	sbc.w	r3, r3, r1
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	f04f 0200 	mov.w	r2, #0
 800d882:	f04f 0300 	mov.w	r3, #0
 800d886:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d88a:	464c      	mov	r4, r9
 800d88c:	00a3      	lsls	r3, r4, #2
 800d88e:	4644      	mov	r4, r8
 800d890:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d894:	4644      	mov	r4, r8
 800d896:	00a2      	lsls	r2, r4, #2
 800d898:	4614      	mov	r4, r2
 800d89a:	461d      	mov	r5, r3
 800d89c:	4623      	mov	r3, r4
 800d89e:	181b      	adds	r3, r3, r0
 800d8a0:	603b      	str	r3, [r7, #0]
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	eb41 0303 	adc.w	r3, r1, r3
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	f04f 0200 	mov.w	r2, #0
 800d8ae:	f04f 0300 	mov.w	r3, #0
 800d8b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	02cb      	lsls	r3, r1, #11
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	02ca      	lsls	r2, r1, #11
 800d8c4:	461c      	mov	r4, r3
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d8cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d8d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d8d4:	f7f2 fcf4 	bl	80002c0 <__aeabi_uldivmod>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d8e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e4:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d8e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d802      	bhi.n	800d8f4 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d8ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d8f4:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3788      	adds	r7, #136	; 0x88
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b096      	sub	sp, #88	; 0x58
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d912:	2300      	movs	r3, #0
 800d914:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3318      	adds	r3, #24
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d920:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d924:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d928:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d930:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d934:	2b01      	cmp	r3, #1
 800d936:	d108      	bne.n	800d94a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d93e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d942:	2b01      	cmp	r3, #1
 800d944:	d101      	bne.n	800d94a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d946:	2301      	movs	r3, #1
 800d948:	e000      	b.n	800d94c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d950:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d954:	2b01      	cmp	r3, #1
 800d956:	d107      	bne.n	800d968 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	889b      	ldrh	r3, [r3, #4]
 800d95c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	609a      	str	r2, [r3, #8]
 800d966:	e002      	b.n	800d96e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d976:	899b      	ldrh	r3, [r3, #12]
 800d978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	89db      	ldrh	r3, [r3, #14]
 800d980:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d004      	beq.n	800d998 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d994:	2b01      	cmp	r3, #1
 800d996:	d125      	bne.n	800d9e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d021      	beq.n	800d9e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d9a0:	f107 0313 	add.w	r3, r7, #19
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 fe44 	bl	800e634 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d9ac:	7cfb      	ldrb	r3, [r7, #19]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d101      	bne.n	800d9b6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d9b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d103      	bne.n	800d9c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	653b      	str	r3, [r7, #80]	; 0x50
 800d9c4:	e006      	b.n	800d9d4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d9c6:	7cfb      	ldrb	r3, [r7, #19]
 800d9c8:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d2:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	889b      	ldrh	r3, [r3, #4]
 800d9d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	88db      	ldrh	r3, [r3, #6]
 800d9e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10a      	bne.n	800da04 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d9ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	795b      	ldrb	r3, [r3, #5]
 800d9fa:	f043 0301 	orr.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10a      	bne.n	800da24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800da0e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800da12:	2b00      	cmp	r3, #0
 800da14:	d106      	bne.n	800da24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	795b      	ldrb	r3, [r3, #5]
 800da1a:	f043 0302 	orr.w	r3, r3, #2
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800da24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da26:	2b00      	cmp	r3, #0
 800da28:	d101      	bne.n	800da2e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800da2a:	2301      	movs	r3, #1
 800da2c:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da34:	2b01      	cmp	r3, #1
 800da36:	d108      	bne.n	800da4a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800da44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800da48:	e019      	b.n	800da7e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800da4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800da4e:	019b      	lsls	r3, r3, #6
 800da50:	461a      	mov	r2, r3
 800da52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da54:	fbb2 f3f3 	udiv	r3, r2, r3
 800da58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800da62:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800da64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800da68:	019b      	lsls	r3, r3, #6
 800da6a:	461a      	mov	r2, r3
 800da6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800da7c:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da84:	2b00      	cmp	r3, #0
 800da86:	d12a      	bne.n	800dade <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800da90:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800da94:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800da96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da98:	119b      	asrs	r3, r3, #6
 800da9a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800da9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daa2:	db02      	blt.n	800daaa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800daa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daa8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800daaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daac:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800daba:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800dabe:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800dac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac2:	119b      	asrs	r3, r3, #6
 800dac4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800dac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dacc:	db02      	blt.n	800dad4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800dace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dad2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800dad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dad6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	81da      	strh	r2, [r3, #14]
 800dadc:	e042      	b.n	800db64 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d13d      	bne.n	800db64 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800daec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800daf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	da00      	bge.n	800dafa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800daf8:	330f      	adds	r3, #15
 800dafa:	111b      	asrs	r3, r3, #4
 800dafc:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800dafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800db04:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800db08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db0a:	4413      	add	r3, r2
 800db0c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800db0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db14:	db02      	blt.n	800db1c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800db16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db1a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800db1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db1e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800db28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800db2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db30:	4a51      	ldr	r2, [pc, #324]	; (800dc78 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800db32:	fb82 1203 	smull	r1, r2, r2, r3
 800db36:	1152      	asrs	r2, r2, #5
 800db38:	17db      	asrs	r3, r3, #31
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800db3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800db44:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800db48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db4a:	4413      	add	r3, r2
 800db4c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800db4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db54:	db02      	blt.n	800db5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800db56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db5a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800db5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db5e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	785b      	ldrb	r3, [r3, #1]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d177      	bne.n	800dc5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800db6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800db70:	2b01      	cmp	r3, #1
 800db72:	d073      	beq.n	800dc5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2201      	movs	r2, #1
 800db78:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800db80:	f107 0313 	add.w	r3, r7, #19
 800db84:	4619      	mov	r1, r3
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 fd54 	bl	800e634 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800db8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8e:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800db92:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	3308      	adds	r3, #8
 800db98:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800db9a:	7cfb      	ldrb	r3, [r7, #19]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d041      	beq.n	800dc24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800dba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d03d      	beq.n	800dc24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d03a      	beq.n	800dc24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dbba:	fb03 f202 	mul.w	r2, r3, r2
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc4:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800dbd0:	69ba      	ldr	r2, [r7, #24]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d303      	bcc.n	800dbde <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	719a      	strb	r2, [r3, #6]
 800dbdc:	e022      	b.n	800dc24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800dbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe6:	617b      	str	r3, [r7, #20]
				cval = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800dbec:	2300      	movs	r3, #0
 800dbee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800dbf2:	e00e      	b.n	800dc12 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800dbf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800dbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc00:	601a      	str	r2, [r3, #0]
					pcpo++;
 800dc02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc04:	3304      	adds	r3, #4
 800dc06:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800dc08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800dc12:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d3ea      	bcc.n	800dbf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc22:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	799b      	ldrb	r3, [r3, #6]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d017      	beq.n	800dc5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc46:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	789b      	ldrb	r3, [r3, #2]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d105      	bne.n	800dc5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800dc5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d002      	beq.n	800dc6a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2201      	movs	r2, #1
 800dc68:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800dc6a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3758      	adds	r7, #88	; 0x58
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	66666667 	.word	0x66666667

0800dc7c <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800dc7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc80:	b0a2      	sub	sp, #136	; 0x88
 800dc82:	af02      	add	r7, sp, #8
 800dc84:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	3318      	adds	r3, #24
 800dc90:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800dc98:	3308      	adds	r3, #8
 800dc9a:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800dc9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc9e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800dca2:	3318      	adds	r3, #24
 800dca4:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800dca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dca8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dcac:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800dcae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcb0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcb4:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800dcb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcb8:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800dcba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcbc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dcc0:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800dcde:	f04f 0200 	mov.w	r2, #0
 800dce2:	f04f 0300 	mov.w	r3, #0
 800dce6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800dcea:	2300      	movs	r3, #0
 800dcec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dd0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd0e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d108      	bne.n	800dd28 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd1c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d101      	bne.n	800dd28 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800dd2e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dd32:	4619      	mov	r1, r3
 800dd34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd36:	f000 fc7d 	bl	800e634 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800dd3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d003      	beq.n	800dd4a <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800dd42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d102      	bne.n	800dd50 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dd50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dd52:	f000 fb15 	bl	800e380 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dd56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00a      	beq.n	800dd74 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800dd5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd66:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800dd6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd6c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d901      	bls.n	800dd78 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800dd74:	2301      	movs	r3, #1
 800dd76:	e000      	b.n	800dd7a <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800dd7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d006      	beq.n	800dd94 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800dd86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd88:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800dd8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d101      	bne.n	800dd98 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800dd94:	2301      	movs	r3, #1
 800dd96:	e000      	b.n	800dd9a <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800dd9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dda0:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d10e      	bne.n	800ddc4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dda6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00a      	beq.n	800ddc4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800ddae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddb0:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ddb4:	2b09      	cmp	r3, #9
 800ddb6:	d105      	bne.n	800ddc4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ddb8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e000      	b.n	800ddc6 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800ddc4:	2300      	movs	r3, #0
	run_smudge_detection =
 800ddc6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ddca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddcc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ddd0:	2b09      	cmp	r3, #9
 800ddd2:	f000 80a6 	beq.w	800df22 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ddd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddd8:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	f040 80a1 	bne.w	800df22 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800dde0:	2302      	movs	r3, #2
 800dde2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800dde6:	2300      	movs	r3, #0
 800dde8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ddec:	e02d      	b.n	800de4a <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800ddee:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ddf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddf4:	234c      	movs	r3, #76	; 0x4c
 800ddf6:	fb01 f303 	mul.w	r3, r1, r3
 800ddfa:	4413      	add	r3, r2
 800ddfc:	335e      	adds	r3, #94	; 0x5e
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b09      	cmp	r3, #9
 800de02:	d11d      	bne.n	800de40 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800de04:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800de08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de0a:	234c      	movs	r3, #76	; 0x4c
 800de0c:	fb01 f303 	mul.w	r3, r1, r3
 800de10:	4413      	add	r3, r2
 800de12:	335a      	adds	r3, #90	; 0x5a
 800de14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de18:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800de1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800de1e:	429a      	cmp	r2, r3
 800de20:	dc03      	bgt.n	800de2a <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800de28:	e00a      	b.n	800de40 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800de2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de2e:	2b02      	cmp	r3, #2
 800de30:	d106      	bne.n	800de40 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800de32:	2301      	movs	r3, #1
 800de34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800de38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de3c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800de40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de44:	3301      	adds	r3, #1
 800de46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800de4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de4c:	7c9a      	ldrb	r2, [r3, #18]
 800de4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de52:	4293      	cmp	r3, r2
 800de54:	d3cb      	bcc.n	800ddee <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800de56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d102      	bne.n	800de64 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800de64:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800de68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de6a:	234c      	movs	r3, #76	; 0x4c
 800de6c:	fb01 f303 	mul.w	r3, r1, r3
 800de70:	4413      	add	r3, r2
 800de72:	3348      	adds	r3, #72	; 0x48
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800de78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d150      	bne.n	800df22 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800de80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de82:	2200      	movs	r2, #0
 800de84:	469a      	mov	sl, r3
 800de86:	4693      	mov	fp, r2
 800de88:	4652      	mov	r2, sl
 800de8a:	465b      	mov	r3, fp
 800de8c:	f04f 0000 	mov.w	r0, #0
 800de90:	f04f 0100 	mov.w	r1, #0
 800de94:	0159      	lsls	r1, r3, #5
 800de96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de9a:	0150      	lsls	r0, r2, #5
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	ebb2 040a 	subs.w	r4, r2, sl
 800dea4:	eb63 050b 	sbc.w	r5, r3, fp
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	f04f 0300 	mov.w	r3, #0
 800deb0:	00ab      	lsls	r3, r5, #2
 800deb2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800deb6:	00a2      	lsls	r2, r4, #2
 800deb8:	4614      	mov	r4, r2
 800deba:	461d      	mov	r5, r3
 800debc:	eb14 080a 	adds.w	r8, r4, sl
 800dec0:	eb45 090b 	adc.w	r9, r5, fp
 800dec4:	f04f 0200 	mov.w	r2, #0
 800dec8:	f04f 0300 	mov.w	r3, #0
 800decc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ded0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ded4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ded8:	4690      	mov	r8, r2
 800deda:	4699      	mov	r9, r3
 800dedc:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800dee0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dee4:	f04f 0200 	mov.w	r2, #0
 800dee8:	f04f 0300 	mov.w	r3, #0
 800deec:	024b      	lsls	r3, r1, #9
 800deee:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800def2:	0242      	lsls	r2, r0, #9
 800def4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800def8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800defa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800defc:	2200      	movs	r2, #0
 800defe:	61bb      	str	r3, [r7, #24]
 800df00:	61fa      	str	r2, [r7, #28]
 800df02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df06:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800df0a:	4621      	mov	r1, r4
 800df0c:	428a      	cmp	r2, r1
 800df0e:	4629      	mov	r1, r5
 800df10:	418b      	sbcs	r3, r1
 800df12:	d203      	bcs.n	800df1c <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800df14:	2301      	movs	r3, #1
 800df16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800df1a:	e002      	b.n	800df22 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800df22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 810b 	beq.w	800e142 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800df2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df2e:	2200      	movs	r2, #0
 800df30:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800df32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df34:	f7ff fb80 	bl	800d638 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800df38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df3a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800df40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800df4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df4e:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800df54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	1ad2      	subs	r2, r2, r3
 800df5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5c:	4413      	add	r3, r2
 800df5e:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800df60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df62:	2b00      	cmp	r3, #0
 800df64:	da02      	bge.n	800df6c <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800df66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df68:	425b      	negs	r3, r3
 800df6a:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800df6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	461a      	mov	r2, r3
 800df72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df74:	4293      	cmp	r3, r2
 800df76:	dd0c      	ble.n	800df92 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800df78:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800df7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800df7c:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800df7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df80:	429a      	cmp	r2, r3
 800df82:	da03      	bge.n	800df8c <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800df84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df86:	2201      	movs	r2, #1
 800df88:	709a      	strb	r2, [r3, #2]
 800df8a:	e002      	b.n	800df92 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800df8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df8e:	2202      	movs	r2, #2
 800df90:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800df92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df9a:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800df9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfa2:	695b      	ldr	r3, [r3, #20]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d906      	bls.n	800dfb6 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800dfa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfaa:	2201      	movs	r2, #1
 800dfac:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800dfae:	2302      	movs	r3, #2
 800dfb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dfb4:	e014      	b.n	800dfe0 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800dfb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dfbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	6139      	str	r1, [r7, #16]
 800dfc2:	6178      	str	r0, [r7, #20]
 800dfc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dfc8:	4621      	mov	r1, r4
 800dfca:	1851      	adds	r1, r2, r1
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4629      	mov	r1, r5
 800dfd0:	eb43 0101 	adc.w	r1, r3, r1
 800dfd4:	60f9      	str	r1, [r7, #12]
 800dfd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dfdc:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800dfe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d202      	bcs.n	800dff2 <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800dfec:	2301      	movs	r3, #1
 800dfee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800dff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dff4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2200      	movs	r2, #0
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	607a      	str	r2, [r7, #4]
 800e002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e006:	f7f2 f95b 	bl	80002c0 <__aeabi_uldivmod>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
		xtalk_offset_out =
 800e00e:	4613      	mov	r3, r2
 800e010:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800e012:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	1ad2      	subs	r2, r2, r3
 800e018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e01a:	4413      	add	r3, r2
 800e01c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800e01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e020:	2b00      	cmp	r3, #0
 800e022:	da02      	bge.n	800e02a <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800e024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e026:	425b      	negs	r3, r3
 800e028:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800e02a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d112      	bne.n	800e058 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800e032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800e038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e03a:	4293      	cmp	r3, r2
 800e03c:	db0c      	blt.n	800e058 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800e03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800e040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800e042:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800e044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e046:	429a      	cmp	r2, r3
 800e048:	da03      	bge.n	800e052 <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800e04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e04c:	2201      	movs	r2, #1
 800e04e:	70da      	strb	r2, [r3, #3]
 800e050:	e002      	b.n	800e058 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800e052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e054:	2202      	movs	r2, #2
 800e056:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800e058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d108      	bne.n	800e072 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800e060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e062:	69db      	ldr	r3, [r3, #28]
 800e064:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800e066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e068:	4293      	cmp	r3, r2
 800e06a:	da02      	bge.n	800e072 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800e06c:	2302      	movs	r3, #2
 800e06e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800e072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e074:	2200      	movs	r2, #0
 800e076:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800e078:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d112      	bne.n	800e0a6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800e080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e082:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00e      	beq.n	800e0a6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800e088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e08a:	6a1b      	ldr	r3, [r3, #32]
 800e08c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e090:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800e094:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e096:	429a      	cmp	r2, r3
 800e098:	d905      	bls.n	800e0a6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800e09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e09c:	2201      	movs	r2, #1
 800e09e:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800e0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0a8:	7c1b      	ldrb	r3, [r3, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800e0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0b0:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800e0b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d902      	bls.n	800e0be <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800e0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c0:	7c1b      	ldrb	r3, [r3, #16]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d107      	bne.n	800e0d6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800e0c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c8:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e0ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d202      	bcs.n	800e0d6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800e0d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800e0d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0d8:	089b      	lsrs	r3, r3, #2
 800e0da:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800e0dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0e2:	d301      	bcc.n	800e0e8 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800e0e4:	4b3e      	ldr	r3, [pc, #248]	; (800e1e0 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800e0e6:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800e0e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10d      	bne.n	800e10c <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e0fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e100:	f7ff fc00 	bl	800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800e104:	2302      	movs	r3, #2
 800e106:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e10a:	e009      	b.n	800e120 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e10c:	2301      	movs	r3, #1
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	2301      	movs	r3, #1
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e118:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e11a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e11c:	f7ff fbf2 	bl	800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e124:	2b02      	cmp	r3, #2
 800e126:	d10c      	bne.n	800e142 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800e128:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e12a:	f04f 0200 	mov.w	r2, #0
 800e12e:	f04f 0300 	mov.w	r3, #0
 800e132:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e13e:	2200      	movs	r2, #0
 800e140:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800e142:	2300      	movs	r3, #0
 800e144:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800e148:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d140      	bne.n	800e1d2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800e150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e158:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800e15a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e15c:	691a      	ldr	r2, [r3, #16]
 800e15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e162:	429a      	cmp	r2, r3
 800e164:	d202      	bcs.n	800e16c <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800e166:	2301      	movs	r3, #1
 800e168:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800e16c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e170:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800e172:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e176:	2b00      	cmp	r3, #0
 800e178:	d110      	bne.n	800e19c <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e17a:	2300      	movs	r3, #0
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	2300      	movs	r3, #0
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e186:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e18a:	f7ff fbbb 	bl	800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800e18e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e190:	2202      	movs	r2, #2
 800e192:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800e194:	2302      	movs	r3, #2
 800e196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e19a:	e009      	b.n	800e1b0 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e19c:	2301      	movs	r3, #1
 800e19e:	9301      	str	r3, [sp, #4]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ac:	f7ff fbaa 	bl	800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e1b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	d10c      	bne.n	800e1d2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800e1b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e1ba:	f04f 0200 	mov.w	r2, #0
 800e1be:	f04f 0300 	mov.w	r3, #0
 800e1c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e1c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e1d2:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3780      	adds	r7, #128	; 0x80
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1e0:	0003ffff 	.word	0x0003ffff

0800e1e4 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3318      	adds	r3, #24
 800e1f4:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e206:	2201      	movs	r2, #1
 800e208:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e212:	2201      	movs	r2, #1
 800e214:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e22a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e22e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e238:	461a      	mov	r2, r3
 800e23a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e23e:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e248:	461a      	mov	r2, r3
 800e24a:	2300      	movs	r3, #0
 800e24c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e256:	2200      	movs	r2, #0
 800e258:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e262:	461a      	mov	r2, r3
 800e264:	23c8      	movs	r3, #200	; 0xc8
 800e266:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e270:	461a      	mov	r2, r3
 800e272:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e276:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e280:	461a      	mov	r2, r3
 800e282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e286:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e290:	461a      	mov	r2, r3
 800e292:	4b3a      	ldr	r3, [pc, #232]	; (800e37c <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800e294:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e2a4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2be:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2cc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e2e8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	230a      	movs	r3, #10
 800e2f6:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e300:	461a      	mov	r2, r3
 800e302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e306:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e310:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e314:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e31e:	461a      	mov	r2, r3
 800e320:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e324:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32e:	461a      	mov	r2, r3
 800e330:	2300      	movs	r3, #0
 800e332:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33c:	461a      	mov	r2, r3
 800e33e:	2300      	movs	r3, #0
 800e340:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e34a:	3310      	adds	r3, #16
 800e34c:	4619      	mov	r1, r3
 800e34e:	f04f 0200 	mov.w	r2, #0
 800e352:	f04f 0300 	mov.w	r3, #0
 800e356:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e360:	461a      	mov	r2, r3
 800e362:	2300      	movs	r3, #0
 800e364:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f000 f809 	bl	800e380 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	000ff800 	.word	0x000ff800

0800e380 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e388:	2300      	movs	r3, #0
 800e38a:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e392:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	2200      	movs	r2, #0
 800e39e:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3318      	adds	r3, #24
 800e3f0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e406:	2200      	movs	r2, #0
 800e408:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e412:	2200      	movs	r2, #0
 800e414:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e41e:	3308      	adds	r3, #8
 800e420:	2218      	movs	r2, #24
 800e422:	2100      	movs	r1, #0
 800e424:	4618      	mov	r0, r3
 800e426:	f00b f9d1 	bl	80197cc <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e436:	b480      	push	{r7}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	3318      	adds	r3, #24
 800e446:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e44e:	2203      	movs	r2, #3
 800e450:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e466:	2200      	movs	r2, #0
 800e468:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e472:	2200      	movs	r2, #0
 800e474:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e496:	2200      	movs	r2, #0
 800e498:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e4c6:	b480      	push	{r7}
 800e4c8:	b085      	sub	sp, #20
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	3318      	adds	r3, #24
 800e4d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4de:	22ff      	movs	r2, #255	; 0xff
 800e4e0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e504:	2200      	movs	r2, #0
 800e506:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e510:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e51e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e52e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e532:	2b00      	cmp	r3, #0
 800e534:	d007      	beq.n	800e546 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e53c:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2200      	movs	r2, #0
 800e54a:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3714      	adds	r7, #20
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr

0800e55e <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e55e:	b480      	push	{r7}
 800e560:	b087      	sub	sp, #28
 800e562:	af00      	add	r7, sp, #0
 800e564:	60f8      	str	r0, [r7, #12]
 800e566:	60b9      	str	r1, [r7, #8]
 800e568:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	229b      	movs	r2, #155	; 0x9b
 800e57e:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e584:	4618      	mov	r0, r3
 800e586:	371c      	adds	r7, #28
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3318      	adds	r3, #24
 800e59c:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5ae:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e5c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5e6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e5ee:	4413      	add	r3, r2
 800e5f0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e606:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e610:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e61a:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e624:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e634:	b480      	push	{r7}
 800e636:	b087      	sub	sp, #28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	3318      	adds	r3, #24
 800e642:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e644:	2300      	movs	r3, #0
 800e646:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e652:	2b07      	cmp	r3, #7
 800e654:	bf0c      	ite	eq
 800e656:	2301      	moveq	r3, #1
 800e658:	2300      	movne	r3, #0
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e65e:	2300      	movs	r3, #0
 800e660:	75fb      	strb	r3, [r7, #23]
 800e662:	e019      	b.n	800e698 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e664:	7df9      	ldrb	r1, [r7, #23]
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	6938      	ldr	r0, [r7, #16]
 800e66a:	461a      	mov	r2, r3
 800e66c:	0052      	lsls	r2, r2, #1
 800e66e:	441a      	add	r2, r3
 800e670:	0153      	lsls	r3, r2, #5
 800e672:	461a      	mov	r2, r3
 800e674:	460b      	mov	r3, r1
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	440b      	add	r3, r1
 800e67a:	019b      	lsls	r3, r3, #6
 800e67c:	4413      	add	r3, r2
 800e67e:	4403      	add	r3, r0
 800e680:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e684:	3314      	adds	r3, #20
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dd02      	ble.n	800e692 <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e68c:	7dbb      	ldrb	r3, [r7, #22]
 800e68e:	3301      	adds	r3, #1
 800e690:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e692:	7dfb      	ldrb	r3, [r7, #23]
 800e694:	3301      	adds	r3, #1
 800e696:	75fb      	strb	r3, [r7, #23]
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	2b05      	cmp	r3, #5
 800e69c:	d9e2      	bls.n	800e664 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	7dba      	ldrb	r2, [r7, #22]
 800e6a2:	701a      	strb	r2, [r3, #0]

	return status;
 800e6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	371c      	adds	r7, #28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e6c2:	88fb      	ldrh	r3, [r7, #6]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d005      	beq.n	800e6d4 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e6c8:	88fb      	ldrh	r3, [r7, #6]
 800e6ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6d2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e6e2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e6e6:	b089      	sub	sp, #36	; 0x24
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
 800e6f0:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e6f2:	f04f 0200 	mov.w	r2, #0
 800e6f6:	f04f 0300 	mov.w	r3, #0
 800e6fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	fb02 f303 	mul.w	r3, r2, r3
 800e70a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	0b1b      	lsrs	r3, r3, #12
 800e710:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	2200      	movs	r2, #0
 800e716:	469a      	mov	sl, r3
 800e718:	4693      	mov	fp, r2
 800e71a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	fb02 f303 	mul.w	r3, r2, r3
 800e726:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	091b      	lsrs	r3, r3, #4
 800e72c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	2200      	movs	r2, #0
 800e732:	4698      	mov	r8, r3
 800e734:	4691      	mov	r9, r2
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	fb08 f203 	mul.w	r2, r8, r3
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	fb09 f303 	mul.w	r3, r9, r3
 800e742:	4413      	add	r3, r2
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	fba2 4508 	umull	r4, r5, r2, r8
 800e74a:	442b      	add	r3, r5
 800e74c:	461d      	mov	r5, r3
 800e74e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e752:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e75a:	f04f 0200 	mov.w	r2, #0
 800e75e:	f04f 0300 	mov.w	r3, #0
 800e762:	0b02      	lsrs	r2, r0, #12
 800e764:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e768:	0b0b      	lsrs	r3, r1, #12
 800e76a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e76e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d305      	bcc.n	800e782 <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e776:	f04f 32ff 	mov.w	r2, #4294967295
 800e77a:	f04f 0300 	mov.w	r3, #0
 800e77e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e786:	697b      	ldr	r3, [r7, #20]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3724      	adds	r7, #36	; 0x24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e792:	4770      	bx	lr

0800e794 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e798:	b096      	sub	sp, #88	; 0x58
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e79e:	460b      	mov	r3, r1
 800e7a0:	627a      	str	r2, [r7, #36]	; 0x24
 800e7a2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e7a4:	f04f 0200 	mov.w	r2, #0
 800e7a8:	f04f 0300 	mov.w	r3, #0
 800e7ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e7b0:	f04f 0200 	mov.w	r2, #0
 800e7b4:	f04f 0300 	mov.w	r3, #0
 800e7b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	17da      	asrs	r2, r3, #31
 800e7c4:	469a      	mov	sl, r3
 800e7c6:	4693      	mov	fp, r2
 800e7c8:	4652      	mov	r2, sl
 800e7ca:	465b      	mov	r3, fp
 800e7cc:	f04f 0000 	mov.w	r0, #0
 800e7d0:	f04f 0100 	mov.w	r1, #0
 800e7d4:	0159      	lsls	r1, r3, #5
 800e7d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7da:	0150      	lsls	r0, r2, #5
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	ebb2 040a 	subs.w	r4, r2, sl
 800e7e4:	eb63 050b 	sbc.w	r5, r3, fp
 800e7e8:	f04f 0200 	mov.w	r2, #0
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	00ab      	lsls	r3, r5, #2
 800e7f2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e7f6:	00a2      	lsls	r2, r4, #2
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	461d      	mov	r5, r3
 800e7fc:	eb14 080a 	adds.w	r8, r4, sl
 800e800:	eb45 090b 	adc.w	r9, r5, fp
 800e804:	f04f 0200 	mov.w	r2, #0
 800e808:	f04f 0300 	mov.w	r3, #0
 800e80c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e810:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e814:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e818:	4690      	mov	r8, r2
 800e81a:	4699      	mov	r9, r3
 800e81c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e820:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00d      	beq.n	800e842 <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e828:	2200      	movs	r2, #0
 800e82a:	61bb      	str	r3, [r7, #24]
 800e82c:	61fa      	str	r2, [r7, #28]
 800e82e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e832:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e836:	f7f1 fd43 	bl	80002c0 <__aeabi_uldivmod>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	d02a      	beq.n	800e89e <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e848:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e84c:	f04f 0200 	mov.w	r2, #0
 800e850:	f04f 0300 	mov.w	r3, #0
 800e854:	02cb      	lsls	r3, r1, #11
 800e856:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e85a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e85c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e85e:	0849      	lsrs	r1, r1, #1
 800e860:	2000      	movs	r0, #0
 800e862:	6139      	str	r1, [r7, #16]
 800e864:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e866:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e86a:	4621      	mov	r1, r4
 800e86c:	1851      	adds	r1, r2, r1
 800e86e:	6039      	str	r1, [r7, #0]
 800e870:	4629      	mov	r1, r5
 800e872:	eb43 0101 	adc.w	r1, r3, r1
 800e876:	6079      	str	r1, [r7, #4]
 800e878:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e87c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	2200      	movs	r2, #0
 800e884:	60bb      	str	r3, [r7, #8]
 800e886:	60fa      	str	r2, [r7, #12]
 800e888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e88c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e890:	f7f1 fd16 	bl	80002c0 <__aeabi_uldivmod>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e89c:	e00b      	b.n	800e8b6 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e89e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e8a2:	f04f 0200 	mov.w	r2, #0
 800e8a6:	f04f 0300 	mov.w	r3, #0
 800e8aa:	02cb      	lsls	r3, r1, #11
 800e8ac:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e8b0:	02c2      	lsls	r2, r0, #11
 800e8b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3758      	adds	r7, #88	; 0x58
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e8c6 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e8c6:	b480      	push	{r7}
 800e8c8:	b085      	sub	sp, #20
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e8d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8d6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e8d8:	e002      	b.n	800e8e0 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	089b      	lsrs	r3, r3, #2
 800e8de:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d8f8      	bhi.n	800e8da <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e8e8:	e017      	b.n	800e91a <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d30b      	bcc.n	800e90e <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	085b      	lsrs	r3, r3, #1
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	4413      	add	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	e002      	b.n	800e914 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	085b      	lsrs	r3, r3, #1
 800e912:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	089b      	lsrs	r3, r3, #2
 800e918:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e4      	bne.n	800e8ea <VL53L1_isqrt+0x24>
	}

	return res;
 800e920:	68fb      	ldr	r3, [r7, #12]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e944:	4618      	mov	r0, r3
 800e946:	f000 faa5 	bl	800ee94 <VL53L1_decode_vcsel_period>
 800e94a:	4603      	mov	r3, r0
	period = 2048 *
 800e94c:	02db      	lsls	r3, r3, #11
 800e94e:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e95a:	461a      	mov	r2, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4413      	add	r3, r2
 800e960:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e968:	02db      	lsls	r3, r3, #11
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	4413      	add	r3, r2
 800e96e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e976:	02db      	lsls	r3, r3, #11
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	fbb3 f2f2 	udiv	r2, r3, r2
 800e98c:	68b9      	ldr	r1, [r7, #8]
 800e98e:	fb01 f202 	mul.w	r2, r1, r2
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	60fb      	str	r3, [r7, #12]
 800e996:	e001      	b.n	800e99c <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b084      	sub	sp, #16
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e9c0:	6838      	ldr	r0, [r7, #0]
 800e9c2:	f000 fb90 	bl	800f0e6 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7ff ff7a 	bl	800e8c6 <VL53L1_isqrt>
 800e9d2:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e9d4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	fb02 f303 	mul.w	r3, r2, r3
 800e9de:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	3307      	adds	r3, #7
 800e9e4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	111b      	asrs	r3, r3, #4
 800e9ea:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]
 800ea0c:	e01e      	b.n	800ea4c <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800ea0e:	7bfa      	ldrb	r2, [r7, #15]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	3206      	adds	r2, #6
 800ea14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	dd13      	ble.n	800ea46 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ea24:	7bf9      	ldrb	r1, [r7, #15]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	3106      	adds	r1, #6
 800ea2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea2e:	441a      	add	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	73fb      	strb	r3, [r7, #15]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	7a9b      	ldrb	r3, [r3, #10]
 800ea50:	7bfa      	ldrb	r2, [r7, #15]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d3db      	bcc.n	800ea0e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d01c      	beq.n	800ea9a <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800ea78:	0852      	lsrs	r2, r2, #1
 800ea7a:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800ea7c:	441a      	add	r2, r3
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800ea90:	fb93 f2f2 	sdiv	r2, r3, r2
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800ea9a:	bf00      	nop
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b085      	sub	sp, #20
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800eab2:	2300      	movs	r3, #0
 800eab4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	7b1b      	ldrb	r3, [r3, #12]
 800eaba:	f003 0307 	and.w	r3, r3, #7
 800eabe:	2b07      	cmp	r3, #7
 800eac0:	d13a      	bne.n	800eb38 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eac6:	2300      	movs	r3, #0
 800eac8:	73bb      	strb	r3, [r7, #14]
 800eaca:	e01f      	b.n	800eb0c <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	4413      	add	r3, r2
 800ead2:	7b1b      	ldrb	r3, [r3, #12]
 800ead4:	f003 0307 	and.w	r3, r3, #7
 800ead8:	2b07      	cmp	r3, #7
 800eada:	d014      	beq.n	800eb06 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800eadc:	7bba      	ldrb	r2, [r7, #14]
 800eade:	7b7b      	ldrb	r3, [r7, #13]
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	440a      	add	r2, r1
 800eae4:	7b11      	ldrb	r1, [r2, #12]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4413      	add	r3, r2
 800eaea:	460a      	mov	r2, r1
 800eaec:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800eaee:	7bba      	ldrb	r2, [r7, #14]
 800eaf0:	7b7b      	ldrb	r3, [r7, #13]
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	440a      	add	r2, r1
 800eaf6:	7c91      	ldrb	r1, [r2, #18]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	4413      	add	r3, r2
 800eafc:	460a      	mov	r2, r1
 800eafe:	749a      	strb	r2, [r3, #18]
				i++;
 800eb00:	7b7b      	ldrb	r3, [r7, #13]
 800eb02:	3301      	adds	r3, #1
 800eb04:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb06:	7bbb      	ldrb	r3, [r7, #14]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	73bb      	strb	r3, [r7, #14]
 800eb0c:	7bbb      	ldrb	r3, [r7, #14]
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d9dc      	bls.n	800eacc <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb12:	7b7b      	ldrb	r3, [r7, #13]
 800eb14:	73bb      	strb	r3, [r7, #14]
 800eb16:	e00c      	b.n	800eb32 <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800eb18:	7bbb      	ldrb	r3, [r7, #14]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	2210      	movs	r2, #16
 800eb20:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800eb22:	7bbb      	ldrb	r3, [r7, #14]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	4413      	add	r3, r2
 800eb28:	2200      	movs	r2, #0
 800eb2a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	73bb      	strb	r3, [r7, #14]
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
 800eb34:	2b05      	cmp	r3, #5
 800eb36:	d9ef      	bls.n	800eb18 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	7adb      	ldrb	r3, [r3, #11]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d023      	beq.n	800eb88 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7adb      	ldrb	r3, [r3, #11]
 800eb44:	73fb      	strb	r3, [r7, #15]
 800eb46:	e00f      	b.n	800eb68 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800eb48:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eb4a:	7bfb      	ldrb	r3, [r7, #15]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	7ad2      	ldrb	r2, [r2, #11]
 800eb50:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3106      	adds	r1, #6
 800eb56:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	3206      	adds	r2, #6
 800eb5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	3301      	adds	r3, #1
 800eb66:	73fb      	strb	r3, [r7, #15]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800eb6c:	7bfa      	ldrb	r2, [r7, #15]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d3ea      	bcc.n	800eb48 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	72da      	strb	r2, [r3, #11]
	}
}
 800eb88:	bf00      	nop
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800eba6:	88fb      	ldrh	r3, [r7, #6]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7ff fd83 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 800ebae:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ebb4:	f249 2257 	movw	r2, #37463	; 0x9257
 800ebb8:	fb02 f303 	mul.w	r3, r2, r3
 800ebbc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ebc4:	0c1b      	lsrs	r3, r3, #16
 800ebc6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b087      	sub	sp, #28
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ebe0:	2307      	movs	r3, #7
 800ebe2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebee:	db03      	blt.n	800ebf8 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800ebf0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ebf4:	617b      	str	r3, [r7, #20]
 800ebf6:	e004      	b.n	800ec02 <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	dd01      	ble.n	800ec02 <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec08:	dd02      	ble.n	800ec10 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	e001      	b.n	800ec14 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800ec10:	2307      	movs	r3, #7
 800ec12:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d009      	beq.n	800ec2e <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	409a      	lsls	r2, r3
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	085b      	lsrs	r3, r3, #1
 800ec24:	441a      	add	r2, r3
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec2c:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec34:	dd02      	ble.n	800ec3c <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec42:	d302      	bcc.n	800ec4a <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ec44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec48:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ec4e:	89fb      	ldrh	r3, [r7, #14]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	371c      	adds	r7, #28
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ec70:	2300      	movs	r3, #0
 800ec72:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ec74:	88fb      	ldrh	r3, [r7, #6]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d010      	beq.n	800ec9c <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	021a      	lsls	r2, r3, #8
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	fa02 f303 	lsl.w	r3, r2, r3
 800ec84:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ec86:	88fb      	ldrh	r3, [r7, #6]
 800ec88:	085b      	lsrs	r3, r3, #1
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ec92:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ec94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec98:	617b      	str	r3, [r7, #20]
 800ec9a:	e004      	b.n	800eca6 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	fa02 f303 	lsl.w	r3, r2, r3
 800eca4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d901      	bls.n	800ecb2 <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ecb6:	8a7b      	ldrh	r3, [r7, #18]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	b093      	sub	sp, #76	; 0x4c
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	461e      	mov	r6, r3
 800ecce:	4603      	mov	r3, r0
 800ecd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ecda:	4633      	mov	r3, r6
 800ecdc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800ece4:	f04f 0200 	mov.w	r2, #0
 800ece8:	f04f 0300 	mov.w	r3, #0
 800ecec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ecf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff fcda 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 800ed00:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800ed02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed04:	2200      	movs	r2, #0
 800ed06:	623b      	str	r3, [r7, #32]
 800ed08:	627a      	str	r2, [r7, #36]	; 0x24
 800ed0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	61bb      	str	r3, [r7, #24]
 800ed10:	61fa      	str	r2, [r7, #28]
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ed18:	4602      	mov	r2, r0
 800ed1a:	1a9b      	subs	r3, r3, r2
 800ed1c:	613b      	str	r3, [r7, #16]
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	460a      	mov	r2, r1
 800ed22:	eb63 0302 	sbc.w	r3, r3, r2
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ed30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed32:	2200      	movs	r2, #0
 800ed34:	469a      	mov	sl, r3
 800ed36:	4693      	mov	fp, r2
 800ed38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3a:	fb0a f203 	mul.w	r2, sl, r3
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed40:	fb0b f303 	mul.w	r3, fp, r3
 800ed44:	4413      	add	r3, r2
 800ed46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed48:	fba2 890a 	umull	r8, r9, r2, sl
 800ed4c:	444b      	add	r3, r9
 800ed4e:	4699      	mov	r9, r3
 800ed50:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ed54:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ed58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	da08      	bge.n	800ed72 <VL53L1_range_maths+0xae>
 800ed60:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ed64:	1851      	adds	r1, r2, r1
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	f143 0300 	adc.w	r3, r3, #0
 800ed6c:	60fb      	str	r3, [r7, #12]
 800ed6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed72:	f04f 0000 	mov.w	r0, #0
 800ed76:	f04f 0100 	mov.w	r1, #0
 800ed7a:	0a50      	lsrs	r0, r2, #9
 800ed7c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ed80:	1259      	asrs	r1, r3, #9
 800ed82:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ed86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed88:	f249 2257 	movw	r2, #37463	; 0x9257
 800ed8c:	fb03 f202 	mul.w	r2, r3, r2
 800ed90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed92:	2100      	movs	r1, #0
 800ed94:	fb01 f303 	mul.w	r3, r1, r3
 800ed98:	4413      	add	r3, r2
 800ed9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed9c:	f249 2157 	movw	r1, #37463	; 0x9257
 800eda0:	fba2 4501 	umull	r4, r5, r2, r1
 800eda4:	442b      	add	r3, r5
 800eda6:	461d      	mov	r5, r3
 800eda8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800edac:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800edb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	da07      	bge.n	800edc8 <VL53L1_range_maths+0x104>
 800edb8:	4934      	ldr	r1, [pc, #208]	; (800ee8c <VL53L1_range_maths+0x1c8>)
 800edba:	1851      	adds	r1, r2, r1
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	f143 0300 	adc.w	r3, r3, #0
 800edc2:	607b      	str	r3, [r7, #4]
 800edc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edc8:	f04f 0000 	mov.w	r0, #0
 800edcc:	f04f 0100 	mov.w	r1, #0
 800edd0:	0d90      	lsrs	r0, r2, #22
 800edd2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800edd6:	1599      	asrs	r1, r3, #22
 800edd8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ede0:	4413      	add	r3, r2
 800ede2:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800ede4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ede6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ede8:	fb02 f303 	mul.w	r3, r2, r3
 800edec:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800edee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800edf4:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800edf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	da01      	bge.n	800ee00 <VL53L1_range_maths+0x13c>
 800edfc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ee00:	12db      	asrs	r3, r3, #11
 800ee02:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ee04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d130      	bne.n	800ee6e <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800ee0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee0e:	4613      	mov	r3, r2
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	4413      	add	r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ee18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	da00      	bge.n	800ee20 <VL53L1_range_maths+0x15c>
 800ee1e:	3303      	adds	r3, #3
 800ee20:	109b      	asrs	r3, r3, #2
 800ee22:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ee24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee26:	4b1a      	ldr	r3, [pc, #104]	; (800ee90 <VL53L1_range_maths+0x1cc>)
 800ee28:	fb83 2301 	smull	r2, r3, r3, r1
 800ee2c:	109a      	asrs	r2, r3, #2
 800ee2e:	17cb      	asrs	r3, r1, #31
 800ee30:	1ad2      	subs	r2, r2, r3
 800ee32:	4613      	mov	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	1aca      	subs	r2, r1, r3
 800ee3c:	2a04      	cmp	r2, #4
 800ee3e:	dc09      	bgt.n	800ee54 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ee40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee42:	4a13      	ldr	r2, [pc, #76]	; (800ee90 <VL53L1_range_maths+0x1cc>)
 800ee44:	fb82 1203 	smull	r1, r2, r2, r3
 800ee48:	1092      	asrs	r2, r2, #2
 800ee4a:	17db      	asrs	r3, r3, #31
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	b21b      	sxth	r3, r3
 800ee50:	647b      	str	r3, [r7, #68]	; 0x44
 800ee52:	e015      	b.n	800ee80 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ee54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee56:	4a0e      	ldr	r2, [pc, #56]	; (800ee90 <VL53L1_range_maths+0x1cc>)
 800ee58:	fb82 1203 	smull	r1, r2, r2, r3
 800ee5c:	1092      	asrs	r2, r2, #2
 800ee5e:	17db      	asrs	r3, r3, #31
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	3301      	adds	r3, #1
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	b21b      	sxth	r3, r3
 800ee6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ee6c:	e008      	b.n	800ee80 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800ee6e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d104      	bne.n	800ee80 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ee76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee78:	0fda      	lsrs	r2, r3, #31
 800ee7a:	4413      	add	r3, r2
 800ee7c:	105b      	asrs	r3, r3, #1
 800ee7e:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800ee80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	374c      	adds	r7, #76	; 0x4c
 800ee86:	46bd      	mov	sp, r7
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	003fffff 	.word	0x003fffff
 800ee90:	66666667 	.word	0x66666667

0800ee94 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	3301      	adds	r3, #1
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800eeba:	b480      	push	{r7}
 800eebc:	b083      	sub	sp, #12
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	781a      	ldrb	r2, [r3, #0]
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	7a5a      	ldrb	r2, [r3, #9]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	605a      	str	r2, [r3, #4]
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ef36:	b480      	push	{r7}
 800ef38:	b087      	sub	sp, #28
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	60f8      	str	r0, [r7, #12]
 800ef3e:	460b      	mov	r3, r1
 800ef40:	607a      	str	r2, [r7, #4]
 800ef42:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2203      	movs	r2, #3
 800ef4c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2203      	movs	r2, #3
 800ef52:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2218      	movs	r2, #24
 800ef6a:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ef6c:	897b      	ldrh	r3, [r7, #10]
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f00a:	2300      	movs	r3, #0
 800f00c:	82fb      	strh	r3, [r7, #22]
 800f00e:	e009      	b.n	800f024 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800f010:	8afb      	ldrh	r3, [r7, #22]
 800f012:	8afa      	ldrh	r2, [r7, #22]
 800f014:	b2d1      	uxtb	r1, r2
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	4413      	add	r3, r2
 800f01a:	460a      	mov	r2, r1
 800f01c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f01e:	8afb      	ldrh	r3, [r7, #22]
 800f020:	3301      	adds	r3, #1
 800f022:	82fb      	strh	r3, [r7, #22]
 800f024:	8afb      	ldrh	r3, [r7, #22]
 800f026:	2b05      	cmp	r3, #5
 800f028:	d9f2      	bls.n	800f010 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f02a:	2300      	movs	r3, #0
 800f02c:	82fb      	strh	r3, [r7, #22]
 800f02e:	e007      	b.n	800f040 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800f030:	8afb      	ldrh	r3, [r7, #22]
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	4413      	add	r3, r2
 800f036:	2201      	movs	r2, #1
 800f038:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f03a:	8afb      	ldrh	r3, [r7, #22]
 800f03c:	3301      	adds	r3, #1
 800f03e:	82fb      	strh	r3, [r7, #22]
 800f040:	8afb      	ldrh	r3, [r7, #22]
 800f042:	2b05      	cmp	r3, #5
 800f044:	d9f4      	bls.n	800f030 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800f046:	2300      	movs	r3, #0
 800f048:	82fb      	strh	r3, [r7, #22]
 800f04a:	e013      	b.n	800f074 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800f04c:	8afa      	ldrh	r2, [r7, #22]
 800f04e:	897b      	ldrh	r3, [r7, #10]
 800f050:	429a      	cmp	r2, r3
 800f052:	d206      	bcs.n	800f062 <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800f054:	8afa      	ldrh	r2, [r7, #22]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3206      	adds	r2, #6
 800f05a:	68f9      	ldr	r1, [r7, #12]
 800f05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f060:	e005      	b.n	800f06e <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800f062:	8afa      	ldrh	r2, [r7, #22]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3206      	adds	r2, #6
 800f068:	2100      	movs	r1, #0
 800f06a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800f06e:	8afb      	ldrh	r3, [r7, #22]
 800f070:	3301      	adds	r3, #1
 800f072:	82fb      	strh	r3, [r7, #22]
 800f074:	8afb      	ldrh	r3, [r7, #22]
 800f076:	2b17      	cmp	r3, #23
 800f078:	d9e8      	bls.n	800f04c <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	371c      	adds	r7, #28
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800f088:	b480      	push	{r7}
 800f08a:	b085      	sub	sp, #20
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	4603      	mov	r3, r0
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800f096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	da10      	bge.n	800f0c0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800f09e:	7bfb      	ldrb	r3, [r7, #15]
 800f0a0:	43db      	mvns	r3, r3
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	3b80      	subs	r3, #128	; 0x80
 800f0b6:	10db      	asrs	r3, r3, #3
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800f0be:	e00c      	b.n	800f0da <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	b2da      	uxtb	r2, r3
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f0d2:	10db      	asrs	r3, r3, #3
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	701a      	strb	r2, [r3, #0]
}
 800f0da:	bf00      	nop
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b085      	sub	sp, #20
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
 800f0f6:	e02c      	b.n	800f152 <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <VL53L1_hist_find_min_max_bin_values+0x2c>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f104:	7bf9      	ldrb	r1, [r7, #15]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	3106      	adds	r1, #6
 800f10a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f10e:	429a      	cmp	r2, r3
 800f110:	db07      	blt.n	800f122 <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800f112:	7bfa      	ldrb	r2, [r7, #15]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	3206      	adds	r2, #6
 800f118:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d009      	beq.n	800f13c <VL53L1_hist_find_min_max_bin_values+0x56>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f12e:	7bf9      	ldrb	r1, [r7, #15]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3106      	adds	r1, #6
 800f134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f138:	429a      	cmp	r2, r3
 800f13a:	dc07      	bgt.n	800f14c <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800f13c:	7bfa      	ldrb	r2, [r7, #15]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3206      	adds	r2, #6
 800f142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
 800f14e:	3301      	adds	r3, #1
 800f150:	73fb      	strb	r3, [r7, #15]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7a9b      	ldrb	r3, [r3, #10]
 800f156:	7bfa      	ldrb	r2, [r7, #15]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d3cd      	bcc.n	800f0f8 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800f15c:	bf00      	nop
 800f15e:	bf00      	nop
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr

0800f16a <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f16a:	b480      	push	{r7}
 800f16c:	b085      	sub	sp, #20
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7adb      	ldrb	r3, [r3, #11]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d03a      	beq.n	800f1f4 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f190:	2300      	movs	r3, #0
 800f192:	73fb      	strb	r3, [r7, #15]
 800f194:	e00e      	b.n	800f1b4 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f19c:	7bf9      	ldrb	r1, [r7, #15]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3106      	adds	r1, #6
 800f1a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1a6:	441a      	add	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f1ae:	7bfb      	ldrb	r3, [r7, #15]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	73fb      	strb	r3, [r7, #15]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7adb      	ldrb	r3, [r3, #11]
 800f1b8:	7bfa      	ldrb	r2, [r7, #15]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d3eb      	bcc.n	800f196 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	7ad2      	ldrb	r2, [r2, #11]
 800f1d4:	0852      	lsrs	r2, r2, #1
 800f1d6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f1d8:	441a      	add	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800f1ea:	fb93 f2f2 	sdiv	r2, r3, r2
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800f1f4:	bf00      	nop
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800f200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f204:	b0ca      	sub	sp, #296	; 0x128
 800f206:	af00      	add	r7, sp, #0
 800f208:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f20c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f210:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f214:	4603      	mov	r3, r0
 800f216:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f21a:	2300      	movs	r3, #0
 800f21c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800f232:	f04f 0200 	mov.w	r2, #0
 800f236:	f04f 0300 	mov.w	r3, #0
 800f23a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800f244:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f248:	2300      	movs	r3, #0
 800f24a:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800f24c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f250:	2300      	movs	r3, #0
 800f252:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800f254:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f258:	2300      	movs	r3, #0
 800f25a:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800f25c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f260:	2300      	movs	r3, #0
 800f262:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800f264:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f268:	2300      	movs	r3, #0
 800f26a:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800f26c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f270:	2300      	movs	r3, #0
 800f272:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800f274:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f278:	2300      	movs	r3, #0
 800f27a:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800f27c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f280:	2300      	movs	r3, #0
 800f282:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800f284:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f288:	2300      	movs	r3, #0
 800f28a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800f28c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f290:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 80e1 	beq.w	800f45c <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800f29a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 80da 	beq.w	800f45c <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800f2a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff f9ff 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 800f2b6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800f2ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800f2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f2cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2d0:	2110      	movs	r1, #16
 800f2d2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f2d6:	f7ff fa04 	bl	800e6e2 <VL53L1_duration_maths>
 800f2da:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800f2dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2e0:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800f2e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f2ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	f7ff fc6d 	bl	800ebd2 <VL53L1_rate_maths>
 800f2f8:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f2fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f2fe:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f304:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f30c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f310:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f7ff fa3c 	bl	800e794 <VL53L1_events_per_spad_maths>
 800f31c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f31e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f322:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f328:	8adb      	ldrh	r3, [r3, #22]
 800f32a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f32e:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f334:	8adb      	ldrh	r3, [r3, #22]
 800f336:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f33a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f33c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 808a 	beq.w	800f45c <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f34c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f34e:	b29b      	uxth	r3, r3
 800f350:	2200      	movs	r2, #0
 800f352:	461c      	mov	r4, r3
 800f354:	4615      	mov	r5, r2
 800f356:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f35a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f35e:	4622      	mov	r2, r4
 800f360:	462b      	mov	r3, r5
 800f362:	f04f 0000 	mov.w	r0, #0
 800f366:	f04f 0100 	mov.w	r1, #0
 800f36a:	0159      	lsls	r1, r3, #5
 800f36c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f370:	0150      	lsls	r0, r2, #5
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	ebb2 0804 	subs.w	r8, r2, r4
 800f37a:	eb63 0905 	sbc.w	r9, r3, r5
 800f37e:	f04f 0200 	mov.w	r2, #0
 800f382:	f04f 0300 	mov.w	r3, #0
 800f386:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f38a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f38e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f392:	4690      	mov	r8, r2
 800f394:	4699      	mov	r9, r3
 800f396:	eb18 0a04 	adds.w	sl, r8, r4
 800f39a:	eb49 0b05 	adc.w	fp, r9, r5
 800f39e:	f04f 0200 	mov.w	r2, #0
 800f3a2:	f04f 0300 	mov.w	r3, #0
 800f3a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f3aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f3ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3b2:	4692      	mov	sl, r2
 800f3b4:	469b      	mov	fp, r3
 800f3b6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f3ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3be:	f04f 0000 	mov.w	r0, #0
 800f3c2:	f04f 0100 	mov.w	r1, #0
 800f3c6:	0319      	lsls	r1, r3, #12
 800f3c8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f3cc:	0310      	lsls	r0, r2, #12
 800f3ce:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f3d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3d6:	695b      	ldr	r3, [r3, #20]
 800f3d8:	085b      	lsrs	r3, r3, #1
 800f3da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f3de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f3e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f3ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3f0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	1851      	adds	r1, r2, r1
 800f3f8:	65b9      	str	r1, [r7, #88]	; 0x58
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	eb43 0101 	adc.w	r1, r3, r1
 800f400:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f402:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f406:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f40a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f40e:	695b      	ldr	r3, [r3, #20]
 800f410:	2200      	movs	r2, #0
 800f412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f416:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f41a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f41e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f422:	f7f0 ff4d 	bl	80002c0 <__aeabi_uldivmod>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f432:	8adb      	ldrh	r3, [r3, #22]
 800f434:	b29b      	uxth	r3, r3
 800f436:	2200      	movs	r2, #0
 800f438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f43c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f440:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f444:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f448:	4621      	mov	r1, r4
 800f44a:	428a      	cmp	r2, r1
 800f44c:	4629      	mov	r1, r5
 800f44e:	418b      	sbcs	r3, r1
 800f450:	d204      	bcs.n	800f45c <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f452:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f456:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f45a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f45c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 82e9 	beq.w	800fa3a <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f46c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 82e2 	beq.w	800fa3a <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f476:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f47a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f000 82dc 	beq.w	800fa3a <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 82d5 	beq.w	800fa3a <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f490:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f494:	885b      	ldrh	r3, [r3, #2]
 800f496:	b29b      	uxth	r3, r3
 800f498:	2200      	movs	r2, #0
 800f49a:	653b      	str	r3, [r7, #80]	; 0x50
 800f49c:	657a      	str	r2, [r7, #84]	; 0x54
 800f49e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f4a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f4a6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	462b      	mov	r3, r5
 800f4ae:	f04f 0000 	mov.w	r0, #0
 800f4b2:	f04f 0100 	mov.w	r1, #0
 800f4b6:	0159      	lsls	r1, r3, #5
 800f4b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f4bc:	0150      	lsls	r0, r2, #5
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	1b11      	subs	r1, r2, r4
 800f4c4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f4c6:	eb63 0305 	sbc.w	r3, r3, r5
 800f4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4cc:	f04f 0200 	mov.w	r2, #0
 800f4d0:	f04f 0300 	mov.w	r3, #0
 800f4d4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f4d8:	4649      	mov	r1, r9
 800f4da:	008b      	lsls	r3, r1, #2
 800f4dc:	4641      	mov	r1, r8
 800f4de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f4e2:	4641      	mov	r1, r8
 800f4e4:	008a      	lsls	r2, r1, #2
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	191b      	adds	r3, r3, r4
 800f4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	eb45 0303 	adc.w	r3, r5, r3
 800f4f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4f8:	f04f 0200 	mov.w	r2, #0
 800f4fc:	f04f 0300 	mov.w	r3, #0
 800f500:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f504:	4629      	mov	r1, r5
 800f506:	02cb      	lsls	r3, r1, #11
 800f508:	4621      	mov	r1, r4
 800f50a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f50e:	4621      	mov	r1, r4
 800f510:	02ca      	lsls	r2, r1, #11
 800f512:	461c      	mov	r4, r3
 800f514:	4613      	mov	r3, r2
 800f516:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f51a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f51e:	881b      	ldrh	r3, [r3, #0]
 800f520:	085b      	lsrs	r3, r3, #1
 800f522:	b29b      	uxth	r3, r3
 800f524:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f528:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f52c:	2200      	movs	r2, #0
 800f52e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f532:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f536:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f53a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f53e:	4621      	mov	r1, r4
 800f540:	1851      	adds	r1, r2, r1
 800f542:	63b9      	str	r1, [r7, #56]	; 0x38
 800f544:	4629      	mov	r1, r5
 800f546:	eb43 0101 	adc.w	r1, r3, r1
 800f54a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f54c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f550:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	2200      	movs	r2, #0
 800f55e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f562:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f566:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f56a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f56e:	f7f0 fea7 	bl	80002c0 <__aeabi_uldivmod>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f57a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f57e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f582:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f584:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f588:	691b      	ldr	r3, [r3, #16]
 800f58a:	011a      	lsls	r2, r3, #4
 800f58c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f590:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f592:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2200      	movs	r2, #0
 800f59a:	633b      	str	r3, [r7, #48]	; 0x30
 800f59c:	637a      	str	r2, [r7, #52]	; 0x34
 800f59e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f5a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f5a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f5b2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f5b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f5ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f5be:	4622      	mov	r2, r4
 800f5c0:	fb02 f203 	mul.w	r2, r2, r3
 800f5c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	fb01 f303 	mul.w	r3, r1, r3
 800f5ce:	441a      	add	r2, r3
 800f5d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	fba3 1301 	umull	r1, r3, r3, r1
 800f5da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f5de:	460b      	mov	r3, r1
 800f5e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f5e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f5e8:	18d3      	adds	r3, r2, r3
 800f5ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f5ee:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f5f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f5f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f5fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5fe:	8b5b      	ldrh	r3, [r3, #26]
 800f600:	b29b      	uxth	r3, r3
 800f602:	2200      	movs	r2, #0
 800f604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f608:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f610:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f614:	4622      	mov	r2, r4
 800f616:	fb02 f203 	mul.w	r2, r2, r3
 800f61a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f61e:	4629      	mov	r1, r5
 800f620:	fb01 f303 	mul.w	r3, r1, r3
 800f624:	441a      	add	r2, r3
 800f626:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f62a:	4621      	mov	r1, r4
 800f62c:	fba3 1301 	umull	r1, r3, r3, r1
 800f630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f634:	460b      	mov	r3, r1
 800f636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f63e:	18d3      	adds	r3, r2, r3
 800f640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f644:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f648:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f64c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f650:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f654:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f658:	62b9      	str	r1, [r7, #40]	; 0x28
 800f65a:	f143 0300 	adc.w	r3, r3, #0
 800f65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f660:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f668:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f66c:	f04f 0000 	mov.w	r0, #0
 800f670:	f04f 0100 	mov.w	r1, #0
 800f674:	0cd0      	lsrs	r0, r2, #19
 800f676:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f67a:	0cd9      	lsrs	r1, r3, #19
 800f67c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f680:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f684:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f688:	6239      	str	r1, [r7, #32]
 800f68a:	f143 0300 	adc.w	r3, r3, #0
 800f68e:	627b      	str	r3, [r7, #36]	; 0x24
 800f690:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f694:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f698:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f69c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f6a0:	f04f 0300 	mov.w	r3, #0
 800f6a4:	f7f0 fe0c 	bl	80002c0 <__aeabi_uldivmod>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f6b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f6b4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f6b8:	f173 0300 	sbcs.w	r3, r3, #0
 800f6bc:	d305      	bcc.n	800f6ca <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f6be:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f6c2:	f04f 0300 	mov.w	r3, #0
 800f6c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f6ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f6ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6d2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f6d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	61bb      	str	r3, [r7, #24]
 800f6de:	61fa      	str	r2, [r7, #28]
 800f6e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f6e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f6e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f6f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f6f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f6fc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f700:	4622      	mov	r2, r4
 800f702:	fb02 f203 	mul.w	r2, r2, r3
 800f706:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f70a:	4629      	mov	r1, r5
 800f70c:	fb01 f303 	mul.w	r3, r1, r3
 800f710:	441a      	add	r2, r3
 800f712:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f716:	4621      	mov	r1, r4
 800f718:	fba3 1301 	umull	r1, r3, r3, r1
 800f71c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f720:	460b      	mov	r3, r1
 800f722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f72a:	18d3      	adds	r3, r2, r3
 800f72c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f730:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f734:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f738:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f73c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f740:	8b5b      	ldrh	r3, [r3, #26]
 800f742:	b29b      	uxth	r3, r3
 800f744:	2200      	movs	r2, #0
 800f746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f74a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f74e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f752:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f756:	4622      	mov	r2, r4
 800f758:	fb02 f203 	mul.w	r2, r2, r3
 800f75c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f760:	4629      	mov	r1, r5
 800f762:	fb01 f303 	mul.w	r3, r1, r3
 800f766:	441a      	add	r2, r3
 800f768:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f76c:	4621      	mov	r1, r4
 800f76e:	fba3 1301 	umull	r1, r3, r3, r1
 800f772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f776:	460b      	mov	r3, r1
 800f778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f77c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f780:	18d3      	adds	r3, r2, r3
 800f782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f786:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f78a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f78e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f792:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f796:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f79a:	6139      	str	r1, [r7, #16]
 800f79c:	f143 0300 	adc.w	r3, r3, #0
 800f7a0:	617b      	str	r3, [r7, #20]
 800f7a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f7a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f7aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f7ae:	f04f 0000 	mov.w	r0, #0
 800f7b2:	f04f 0100 	mov.w	r1, #0
 800f7b6:	0cd0      	lsrs	r0, r2, #19
 800f7b8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f7bc:	0cd9      	lsrs	r1, r3, #19
 800f7be:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f7c2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7ca:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f7cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7d0:	891b      	ldrh	r3, [r3, #8]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	673b      	str	r3, [r7, #112]	; 0x70
 800f7d8:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f7da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f7de:	462b      	mov	r3, r5
 800f7e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f7e4:	4642      	mov	r2, r8
 800f7e6:	fb02 f203 	mul.w	r2, r2, r3
 800f7ea:	464b      	mov	r3, r9
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	fb01 f303 	mul.w	r3, r1, r3
 800f7f2:	4413      	add	r3, r2
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	4641      	mov	r1, r8
 800f7f8:	fba2 1201 	umull	r1, r2, r2, r1
 800f7fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f800:	460a      	mov	r2, r1
 800f802:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f806:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f80a:	4413      	add	r3, r2
 800f80c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f810:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f814:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f818:	4622      	mov	r2, r4
 800f81a:	fb02 f203 	mul.w	r2, r2, r3
 800f81e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f822:	4629      	mov	r1, r5
 800f824:	fb01 f303 	mul.w	r3, r1, r3
 800f828:	4413      	add	r3, r2
 800f82a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f82e:	4621      	mov	r1, r4
 800f830:	fba2 1201 	umull	r1, r2, r2, r1
 800f834:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f838:	460a      	mov	r2, r1
 800f83a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f83e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f842:	4413      	add	r3, r2
 800f844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f848:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f84c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f850:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f854:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f858:	88db      	ldrh	r3, [r3, #6]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	2200      	movs	r2, #0
 800f85e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f860:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f862:	f04f 0200 	mov.w	r2, #0
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f86e:	4629      	mov	r1, r5
 800f870:	01cb      	lsls	r3, r1, #7
 800f872:	4621      	mov	r1, r4
 800f874:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f878:	4621      	mov	r1, r4
 800f87a:	01ca      	lsls	r2, r1, #7
 800f87c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f880:	1884      	adds	r4, r0, r2
 800f882:	60bc      	str	r4, [r7, #8]
 800f884:	eb41 0303 	adc.w	r3, r1, r3
 800f888:	60fb      	str	r3, [r7, #12]
 800f88a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f88e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f896:	88db      	ldrh	r3, [r3, #6]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	2200      	movs	r2, #0
 800f89c:	663b      	str	r3, [r7, #96]	; 0x60
 800f89e:	667a      	str	r2, [r7, #100]	; 0x64
 800f8a0:	f04f 0200 	mov.w	r2, #0
 800f8a4:	f04f 0300 	mov.w	r3, #0
 800f8a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	020b      	lsls	r3, r1, #8
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	020a      	lsls	r2, r1, #8
 800f8ba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f8be:	f7f0 fcff 	bl	80002c0 <__aeabi_uldivmod>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f8ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f8ce:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f8d2:	6039      	str	r1, [r7, #0]
 800f8d4:	f143 0300 	adc.w	r3, r3, #0
 800f8d8:	607b      	str	r3, [r7, #4]
 800f8da:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f8de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f8e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f8e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8ea:	f04f 0300 	mov.w	r3, #0
 800f8ee:	f7f0 fce7 	bl	80002c0 <__aeabi_uldivmod>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f8fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f8fe:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f902:	f173 0300 	sbcs.w	r3, r3, #0
 800f906:	d305      	bcc.n	800f914 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f908:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f90c:	f04f 0300 	mov.w	r3, #0
 800f910:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f914:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f918:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f91c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f91e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f922:	69db      	ldr	r3, [r3, #28]
 800f924:	021b      	lsls	r3, r3, #8
 800f926:	4618      	mov	r0, r3
 800f928:	f7fe ffcd 	bl	800e8c6 <VL53L1_isqrt>
 800f92c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f934:	785b      	ldrb	r3, [r3, #1]
 800f936:	461a      	mov	r2, r3
 800f938:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f93c:	fb02 f303 	mul.w	r3, r2, r3
 800f940:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f944:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f948:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f94a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f94e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f950:	4293      	cmp	r3, r2
 800f952:	d218      	bcs.n	800f986 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f95c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f960:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f968:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f972:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d203      	bcs.n	800f986 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f97e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f986:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f98a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f98c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f990:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f992:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f998:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f99a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f99e:	f000 f854 	bl	800fa4a <VL53L1_f_002>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f9a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f9aa:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f9ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f9b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9ba:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9c4:	fb02 f303 	mul.w	r3, r2, r3
 800f9c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f9cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f9d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9da:	091b      	lsrs	r3, r3, #4
 800f9dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f9e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f9e4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f9e6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f9e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f9ec:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f9ee:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f9f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f9f4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f9f6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f9fa:	f000 f826 	bl	800fa4a <VL53L1_f_002>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800fa02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa06:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800fa08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa0c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800fa10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa14:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	da07      	bge.n	800fa2c <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800fa1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa20:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800fa24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fa28:	801a      	strh	r2, [r3, #0]
 800fa2a:	e006      	b.n	800fa3a <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800fa2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa30:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800fa34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fa38:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800fa3a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fa44:	46bd      	mov	sp, r7
 800fa46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fa4a <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	60f8      	str	r0, [r7, #12]
 800fa52:	60b9      	str	r1, [r7, #8]
 800fa54:	607a      	str	r2, [r7, #4]
 800fa56:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	fb03 f303 	mul.w	r3, r3, r3
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4413      	add	r3, r2
 800fa70:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800fa72:	6938      	ldr	r0, [r7, #16]
 800fa74:	f7fe ff27 	bl	800e8c6 <VL53L1_isqrt>
 800fa78:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	4413      	add	r3, r2
 800fa80:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	011b      	lsls	r3, r3, #4
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fe ff1d 	bl	800e8c6 <VL53L1_isqrt>
 800fa8c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	fb02 f303 	mul.w	r3, r2, r3
 800fa96:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d009      	beq.n	800fab2 <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	4413      	add	r3, r2
 800faa4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	fbb2 f3f3 	udiv	r3, r2, r3
 800fab0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800fab2:	697b      	ldr	r3, [r7, #20]

}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2218      	movs	r2, #24
 800facc:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	73fb      	strb	r3, [r7, #15]
 800faf2:	e01f      	b.n	800fb34 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	4413      	add	r3, r2
 800fafa:	2200      	movs	r2, #0
 800fafc:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	4413      	add	r3, r2
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	4413      	add	r3, r2
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800fb16:	7bfa      	ldrb	r2, [r7, #15]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	322e      	adds	r2, #46	; 0x2e
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800fb22:	7bfa      	ldrb	r2, [r7, #15]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	3246      	adds	r2, #70	; 0x46
 800fb28:	2100      	movs	r1, #0
 800fb2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800fb2e:	7bfb      	ldrb	r3, [r7, #15]
 800fb30:	3301      	adds	r3, #1
 800fb32:	73fb      	strb	r3, [r7, #15]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	785b      	ldrb	r3, [r3, #1]
 800fb38:	7bfa      	ldrb	r2, [r7, #15]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d3da      	bcc.n	800faf4 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2208      	movs	r2, #8
 800fb4a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	2118      	movs	r1, #24
 800fb60:	2000      	movs	r0, #0
 800fb62:	f7ff f9e8 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	2118      	movs	r1, #24
 800fb70:	2000      	movs	r0, #0
 800fb72:	f7ff f9e0 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	2118      	movs	r1, #24
 800fb80:	2000      	movs	r0, #0
 800fb82:	f7ff f9d8 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	2118      	movs	r1, #24
 800fb90:	2000      	movs	r0, #0
 800fb92:	f7ff f9d0 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	2118      	movs	r1, #24
 800fba0:	2000      	movs	r0, #0
 800fba2:	f7ff f9c8 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800fba6:	bf00      	nop
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fbae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbb2:	b090      	sub	sp, #64	; 0x40
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	61b9      	str	r1, [r7, #24]
 800fbb8:	617a      	str	r2, [r7, #20]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	83fb      	strh	r3, [r7, #30]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800fbd6:	f04f 0200 	mov.w	r2, #0
 800fbda:	f04f 0300 	mov.w	r3, #0
 800fbde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800fbee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbf0:	7a5a      	ldrb	r2, [r3, #9]
 800fbf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbf4:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800fbf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbf8:	7a1a      	ldrb	r2, [r3, #8]
 800fbfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbfc:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800fbfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc00:	7a9a      	ldrb	r2, [r3, #10]
 800fc02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc04:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800fc06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc08:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fc0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc0e:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800fc10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff f93c 	bl	800ee94 <VL53L1_decode_vcsel_period>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800fc20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc22:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800fc24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc2a:	17da      	asrs	r2, r3, #31
 800fc2c:	60bb      	str	r3, [r7, #8]
 800fc2e:	60fa      	str	r2, [r7, #12]
 800fc30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fc34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800fc38:	8bfb      	ldrh	r3, [r7, #30]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	4698      	mov	r8, r3
 800fc3e:	4691      	mov	r9, r2
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	fb08 f203 	mul.w	r2, r8, r3
 800fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc48:	fb09 f303 	mul.w	r3, r9, r3
 800fc4c:	4413      	add	r3, r2
 800fc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc50:	fba2 4508 	umull	r4, r5, r2, r8
 800fc54:	442b      	add	r3, r5
 800fc56:	461d      	mov	r5, r3
 800fc58:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800fc5c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800fc60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc64:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800fc68:	f143 0b00 	adc.w	fp, r3, #0
 800fc6c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800fc70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	da08      	bge.n	800fc8a <VL53L1_f_018+0xdc>
 800fc78:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fc7c:	1851      	adds	r1, r2, r1
 800fc7e:	6039      	str	r1, [r7, #0]
 800fc80:	f143 0300 	adc.w	r3, r3, #0
 800fc84:	607b      	str	r3, [r7, #4]
 800fc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc8a:	f04f 0000 	mov.w	r0, #0
 800fc8e:	f04f 0100 	mov.w	r1, #0
 800fc92:	0b10      	lsrs	r0, r2, #12
 800fc94:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800fc98:	1319      	asrs	r1, r3, #12
 800fc9a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fca2:	2300      	movs	r3, #0
 800fca4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fca8:	e062      	b.n	800fd70 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800fcaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcae:	089b      	lsrs	r3, r3, #2
 800fcb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800fcb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcba:	4413      	add	r3, r2
 800fcbc:	7c9b      	ldrb	r3, [r3, #18]
 800fcbe:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	dd4f      	ble.n	800fd66 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800fcc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcc8:	7a9b      	ldrb	r3, [r3, #10]
 800fcca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d20f      	bcs.n	800fcf2 <VL53L1_f_018+0x144>
 800fcd2:	7f7b      	ldrb	r3, [r7, #29]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d00c      	beq.n	800fcf2 <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800fcd8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcde:	3206      	adds	r2, #6
 800fce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	441a      	add	r2, r3
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	fb02 f303 	mul.w	r3, r2, r3
 800fcee:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcf0:	e004      	b.n	800fcfc <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf6:	fb02 f303 	mul.w	r3, r2, r3
 800fcfa:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fe fde1 	bl	800e8c6 <VL53L1_isqrt>
 800fd04:	4603      	mov	r3, r0
 800fd06:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fd08:	6a3b      	ldr	r3, [r7, #32]
 800fd0a:	0fda      	lsrs	r2, r3, #31
 800fd0c:	4413      	add	r3, r2
 800fd0e:	105b      	asrs	r3, r3, #1
 800fd10:	461a      	mov	r2, r3
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	4413      	add	r3, r2
 800fd16:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd1a:	6a3b      	ldr	r3, [r7, #32]
 800fd1c:	fb92 f3f3 	sdiv	r3, r2, r3
 800fd20:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd24:	69ba      	ldr	r2, [r7, #24]
 800fd26:	fb02 f303 	mul.w	r3, r2, r3
 800fd2a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	3308      	adds	r3, #8
 800fd30:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	da00      	bge.n	800fd3a <VL53L1_f_018+0x18c>
 800fd38:	330f      	adds	r3, #15
 800fd3a:	111b      	asrs	r3, r3, #4
 800fd3c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fd3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	4413      	add	r3, r2
 800fd44:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	da01      	bge.n	800fd52 <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fd52:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd58:	3216      	adds	r2, #22
 800fd5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fd60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd64:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fd66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd72:	7a9b      	ldrb	r3, [r3, #10]
 800fd74:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d396      	bcc.n	800fcaa <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fd7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd7e:	2200      	movs	r2, #0
 800fd80:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fd82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd84:	7a1b      	ldrb	r3, [r3, #8]
 800fd86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd8a:	e033      	b.n	800fdf4 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fd8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd92:	3206      	adds	r2, #6
 800fd94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd98:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fd9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd9e:	3116      	adds	r1, #22
 800fda0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	dd13      	ble.n	800fdd0 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fda8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdae:	4413      	add	r3, r2
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fdb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdba:	4413      	add	r3, r2
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fdc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdc4:	791b      	ldrb	r3, [r3, #4]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	b2da      	uxtb	r2, r3
 800fdca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdcc:	711a      	strb	r2, [r3, #4]
 800fdce:	e00c      	b.n	800fdea <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fdd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdd6:	4413      	add	r3, r2
 800fdd8:	2200      	movs	r2, #0
 800fdda:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800fddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fde0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fde2:	4413      	add	r3, r2
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fdea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdee:	3301      	adds	r3, #1
 800fdf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fdf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdf6:	7a9b      	ldrb	r3, [r3, #10]
 800fdf8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d3c5      	bcc.n	800fd8c <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3740      	adds	r7, #64	; 0x40
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fe0e <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b085      	sub	sp, #20
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe16:	2300      	movs	r3, #0
 800fe18:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]
 800fe32:	e02d      	b.n	800fe90 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	3301      	adds	r3, #1
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	78d2      	ldrb	r2, [r2, #3]
 800fe3c:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe40:	fb01 f202 	mul.w	r2, r1, r2
 800fe44:	1a9b      	subs	r3, r3, r2
 800fe46:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	789b      	ldrb	r3, [r3, #2]
 800fe4c:	7bfa      	ldrb	r2, [r7, #15]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d21b      	bcs.n	800fe8a <VL53L1_f_019+0x7c>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	789b      	ldrb	r3, [r3, #2]
 800fe56:	7b3a      	ldrb	r2, [r7, #12]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d216      	bcs.n	800fe8a <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	4413      	add	r3, r2
 800fe62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10f      	bne.n	800fe8a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fe6a:	7b3b      	ldrb	r3, [r7, #12]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	4413      	add	r3, r2
 800fe70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d108      	bne.n	800fe8a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d105      	bne.n	800fe8a <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	7bfa      	ldrb	r2, [r7, #15]
 800fe82:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fe86:	2301      	movs	r3, #1
 800fe88:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	73fb      	strb	r3, [r7, #15]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	78db      	ldrb	r3, [r3, #3]
 800fe94:	7bfa      	ldrb	r2, [r7, #15]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d3cc      	bcc.n	800fe34 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr

0800feaa <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800feaa:	b480      	push	{r7}
 800feac:	b085      	sub	sp, #20
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800feb2:	2300      	movs	r3, #0
 800feb4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fec8:	73fb      	strb	r3, [r7, #15]
 800feca:	e05a      	b.n	800ff82 <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	78da      	ldrb	r2, [r3, #3]
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
 800fed2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fed6:	fb01 f202 	mul.w	r2, r1, r2
 800feda:	1a9b      	subs	r3, r3, r2
 800fedc:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fede:	7bfb      	ldrb	r3, [r7, #15]
 800fee0:	3301      	adds	r3, #1
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	78d2      	ldrb	r2, [r2, #3]
 800fee6:	fb93 f1f2 	sdiv	r1, r3, r2
 800feea:	fb01 f202 	mul.w	r2, r1, r2
 800feee:	1a9b      	subs	r3, r3, r2
 800fef0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	789b      	ldrb	r3, [r3, #2]
 800fef6:	7b7a      	ldrb	r2, [r7, #13]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d23f      	bcs.n	800ff7c <VL53L1_f_020+0xd2>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	789b      	ldrb	r3, [r3, #2]
 800ff00:	7b3a      	ldrb	r2, [r7, #12]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d23a      	bcs.n	800ff7c <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800ff06:	7b7b      	ldrb	r3, [r7, #13]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10e      	bne.n	800ff32 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800ff14:	7b3b      	ldrb	r3, [r7, #12]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	4413      	add	r3, r2
 800ff1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d107      	bne.n	800ff32 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ff28:	3301      	adds	r3, #1
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d905      	bls.n	800ff4e <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800ff4e:	7b7b      	ldrb	r3, [r7, #13]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	4413      	add	r3, r2
 800ff54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d009      	beq.n	800ff70 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800ff5c:	7b7b      	ldrb	r3, [r7, #13]
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	4413      	add	r3, r2
 800ff68:	460a      	mov	r2, r1
 800ff6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff6e:	e005      	b.n	800ff7c <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800ff70:	7b7b      	ldrb	r3, [r7, #13]
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	4413      	add	r3, r2
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800ff82:	7bfa      	ldrb	r2, [r7, #15]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ff8a:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800ff90:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800ff92:	429a      	cmp	r2, r3
 800ff94:	db9a      	blt.n	800fecc <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ff96:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b087      	sub	sp, #28
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	78db      	ldrb	r3, [r3, #3]
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800ffce:	7cbb      	ldrb	r3, [r7, #18]
 800ffd0:	085b      	lsrs	r3, r3, #1
 800ffd2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ffda:	75fb      	strb	r3, [r7, #23]
 800ffdc:	e0a2      	b.n	8010124 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	78da      	ldrb	r2, [r3, #3]
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffe8:	fb01 f202 	mul.w	r2, r1, r2
 800ffec:	1a9b      	subs	r3, r3, r2
 800ffee:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800fff0:	7dfb      	ldrb	r3, [r7, #23]
 800fff2:	3301      	adds	r3, #1
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	78d2      	ldrb	r2, [r2, #3]
 800fff8:	fb93 f1f2 	sdiv	r1, r3, r2
 800fffc:	fb01 f202 	mul.w	r2, r1, r2
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	789b      	ldrb	r3, [r3, #2]
 8010008:	7d7a      	ldrb	r2, [r7, #21]
 801000a:	429a      	cmp	r2, r3
 801000c:	f080 8087 	bcs.w	801011e <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8010014:	7d3a      	ldrb	r2, [r7, #20]
 8010016:	429a      	cmp	r2, r3
 8010018:	f080 8081 	bcs.w	801011e <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 801001c:	7d7b      	ldrb	r3, [r7, #21]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	4413      	add	r3, r2
 8010022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010026:	2b00      	cmp	r3, #0
 8010028:	d12f      	bne.n	801008a <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 801002a:	7d3b      	ldrb	r3, [r7, #20]
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	4413      	add	r3, r2
 8010030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8010034:	2b00      	cmp	r3, #0
 8010036:	d028      	beq.n	801008a <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8010038:	7d3b      	ldrb	r3, [r7, #20]
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	4413      	add	r3, r2
 801003e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010042:	3b01      	subs	r3, #1
 8010044:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801004c:	7cfa      	ldrb	r2, [r7, #19]
 801004e:	429a      	cmp	r2, r3
 8010050:	d21b      	bcs.n	801008a <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010052:	7cfa      	ldrb	r2, [r7, #19]
 8010054:	4613      	mov	r3, r2
 8010056:	00db      	lsls	r3, r3, #3
 8010058:	4413      	add	r3, r2
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	4413      	add	r3, r2
 8010064:	3304      	adds	r3, #4
 8010066:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	7dfa      	ldrb	r2, [r7, #23]
 801006c:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 801006e:	7dfb      	ldrb	r3, [r7, #23]
 8010070:	3301      	adds	r3, #1
 8010072:	b2da      	uxtb	r2, r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	22ff      	movs	r2, #255	; 0xff
 801007c:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2200      	movs	r2, #0
 8010082:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 801008a:	7d7b      	ldrb	r3, [r7, #21]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	4413      	add	r3, r2
 8010090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010094:	2b00      	cmp	r3, #0
 8010096:	d042      	beq.n	801011e <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 8010098:	7d3b      	ldrb	r3, [r7, #20]
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	4413      	add	r3, r2
 801009e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d13b      	bne.n	801011e <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 80100a6:	7d7b      	ldrb	r3, [r7, #21]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	4413      	add	r3, r2
 80100ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100b0:	3b01      	subs	r3, #1
 80100b2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80100ba:	7cfa      	ldrb	r2, [r7, #19]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d22e      	bcs.n	801011e <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80100c0:	7cfa      	ldrb	r2, [r7, #19]
 80100c2:	4613      	mov	r3, r2
 80100c4:	00db      	lsls	r3, r3, #3
 80100c6:	4413      	add	r3, r2
 80100c8:	009b      	lsls	r3, r3, #2
 80100ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	4413      	add	r3, r2
 80100d2:	3304      	adds	r3, #4
 80100d4:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	7dfa      	ldrb	r2, [r7, #23]
 80100da:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
 80100de:	3301      	adds	r3, #1
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	3301      	adds	r3, #1
 80100f4:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	b2db      	uxtb	r3, r3
 8010106:	3301      	adds	r3, #1
 8010108:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	799b      	ldrb	r3, [r3, #6]
 8010112:	7cba      	ldrb	r2, [r7, #18]
 8010114:	429a      	cmp	r2, r3
 8010116:	d202      	bcs.n	801011e <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	7cba      	ldrb	r2, [r7, #18]
 801011c:	719a      	strb	r2, [r3, #6]
		blb++) {
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	3301      	adds	r3, #1
 8010122:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8010124:	7dfa      	ldrb	r2, [r7, #23]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801012c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 8010132:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8010134:	429a      	cmp	r2, r3
 8010136:	f6ff af52 	blt.w	800ffde <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801013a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 801013e:	4618      	mov	r0, r3
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b090      	sub	sp, #64	; 0x40
 801014e:	af00      	add	r7, sp, #0
 8010150:	4603      	mov	r3, r0
 8010152:	6039      	str	r1, [r7, #0]
 8010154:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010156:	2300      	movs	r3, #0
 8010158:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 801015c:	f107 030c 	add.w	r3, r7, #12
 8010160:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8010168:	2301      	movs	r3, #1
 801016a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010174:	2b01      	cmp	r3, #1
 8010176:	d965      	bls.n	8010244 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8010178:	e05f      	b.n	801023a <VL53L1_f_028+0xf0>

		swapped = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010180:	2301      	movs	r3, #1
 8010182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010186:	e051      	b.n	801022c <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8010188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801018c:	1e5a      	subs	r2, r3, #1
 801018e:	4613      	mov	r3, r2
 8010190:	00db      	lsls	r3, r3, #3
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	4413      	add	r3, r2
 801019e:	3304      	adds	r3, #4
 80101a0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80101a2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80101a6:	4613      	mov	r3, r2
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	4413      	add	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	4413      	add	r3, r2
 80101b6:	3304      	adds	r3, #4
 80101b8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d118      	bne.n	80101f2 <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 80101c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c2:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 80101c8:	429a      	cmp	r2, r3
 80101ca:	da2a      	bge.n	8010222 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80101cc:	2224      	movs	r2, #36	; 0x24
 80101ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101d2:	f009 faed 	bl	80197b0 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80101d6:	2224      	movs	r2, #36	; 0x24
 80101d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101dc:	f009 fae8 	bl	80197b0 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80101e0:	2224      	movs	r2, #36	; 0x24
 80101e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80101e6:	f009 fae3 	bl	80197b0 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80101ea:	2301      	movs	r3, #1
 80101ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80101f0:	e017      	b.n	8010222 <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 80101f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f4:	699a      	ldr	r2, [r3, #24]
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d911      	bls.n	8010222 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80101fe:	2224      	movs	r2, #36	; 0x24
 8010200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010202:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010204:	f009 fad4 	bl	80197b0 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010208:	2224      	movs	r2, #36	; 0x24
 801020a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801020c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801020e:	f009 facf 	bl	80197b0 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8010212:	2224      	movs	r2, #36	; 0x24
 8010214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010216:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010218:	f009 faca 	bl	80197b0 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 801021c:	2301      	movs	r3, #1
 801021e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010222:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010226:	3301      	adds	r3, #1
 8010228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010232:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010236:	429a      	cmp	r2, r3
 8010238:	d3a6      	bcc.n	8010188 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 801023a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801023e:	2b00      	cmp	r3, #0
 8010240:	d19b      	bne.n	801017a <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 8010242:	e000      	b.n	8010246 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8010244:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8010246:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 801024a:	4618      	mov	r0, r3
 801024c:	3740      	adds	r7, #64	; 0x40
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010252:	b480      	push	{r7}
 8010254:	b087      	sub	sp, #28
 8010256:	af00      	add	r7, sp, #0
 8010258:	4603      	mov	r3, r0
 801025a:	60b9      	str	r1, [r7, #8]
 801025c:	607a      	str	r2, [r7, #4]
 801025e:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010260:	2300      	movs	r3, #0
 8010262:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801026c:	7bfa      	ldrb	r2, [r7, #15]
 801026e:	4613      	mov	r3, r2
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	4413      	add	r3, r2
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	4413      	add	r3, r2
 801027e:	3304      	adds	r3, #4
 8010280:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	2200      	movs	r2, #0
 8010286:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	2200      	movs	r2, #0
 801028c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	75fb      	strb	r3, [r7, #23]
 8010294:	e01c      	b.n	80102d0 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	78da      	ldrb	r2, [r3, #3]
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	fbb3 f1f2 	udiv	r1, r3, r2
 80102a0:	fb01 f202 	mul.w	r2, r1, r2
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	68da      	ldr	r2, [r3, #12]
 80102ac:	7d79      	ldrb	r1, [r7, #21]
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	3106      	adds	r1, #6
 80102b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102b6:	441a      	add	r2, r3
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	689a      	ldr	r2, [r3, #8]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	441a      	add	r2, r3
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
 80102cc:	3301      	adds	r3, #1
 80102ce:	75fb      	strb	r3, [r7, #23]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	791b      	ldrb	r3, [r3, #4]
 80102d4:	7dfa      	ldrb	r2, [r7, #23]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d9dd      	bls.n	8010296 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	68da      	ldr	r2, [r3, #12]
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 80102e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	371c      	adds	r7, #28
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80102f8:	b590      	push	{r4, r7, lr}
 80102fa:	b08d      	sub	sp, #52	; 0x34
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	60ba      	str	r2, [r7, #8]
 8010300:	607b      	str	r3, [r7, #4]
 8010302:	4603      	mov	r3, r0
 8010304:	73fb      	strb	r3, [r7, #15]
 8010306:	460b      	mov	r3, r1
 8010308:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801030a:	2300      	movs	r3, #0
 801030c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010326:	7bfa      	ldrb	r2, [r7, #15]
 8010328:	4613      	mov	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	4413      	add	r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	4413      	add	r3, r2
 8010338:	3304      	adds	r3, #4
 801033a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	789b      	ldrb	r3, [r3, #2]
 8010340:	2bff      	cmp	r3, #255	; 0xff
 8010342:	d102      	bne.n	801034a <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	2201      	movs	r2, #1
 8010348:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	789b      	ldrb	r3, [r3, #2]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	78d2      	ldrb	r2, [r2, #3]
 8010352:	fbb3 f1f2 	udiv	r1, r3, r2
 8010356:	fb01 f202 	mul.w	r2, r1, r2
 801035a:	1a9b      	subs	r3, r3, r2
 801035c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8010360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010364:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	b29a      	uxth	r2, r3
 801036c:	8c3b      	ldrh	r3, [r7, #32]
 801036e:	4413      	add	r3, r2
 8010370:	b29b      	uxth	r3, r3
 8010372:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8010374:	8c3a      	ldrh	r2, [r7, #32]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	789b      	ldrb	r3, [r3, #2]
 801037a:	b29b      	uxth	r3, r3
 801037c:	1ad3      	subs	r3, r2, r3
 801037e:	b29b      	uxth	r3, r3
 8010380:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 8010382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010386:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	791b      	ldrb	r3, [r3, #4]
 801038c:	b29a      	uxth	r2, r3
 801038e:	8bfb      	ldrh	r3, [r7, #30]
 8010390:	4413      	add	r3, r2
 8010392:	b29b      	uxth	r3, r3
 8010394:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 8010396:	8bfa      	ldrh	r2, [r7, #30]
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	789b      	ldrb	r3, [r3, #2]
 801039c:	b29b      	uxth	r3, r3
 801039e:	1ad3      	subs	r3, r2, r3
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80103a4:	8bfa      	ldrh	r2, [r7, #30]
 80103a6:	8c3b      	ldrh	r3, [r7, #32]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80103ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80103b2:	2b03      	cmp	r3, #3
 80103b4:	dd01      	ble.n	80103ba <VL53L1_f_027+0xc2>
		window_width = 3;
 80103b6:	2303      	movs	r3, #3
 80103b8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80103ba:	8c3a      	ldrh	r2, [r7, #32]
 80103bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103be:	4413      	add	r3, r2
 80103c0:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80103c2:	b219      	sxth	r1, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	78da      	ldrb	r2, [r3, #3]
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	3314      	adds	r3, #20
 80103cc:	7bbc      	ldrb	r4, [r7, #14]
 80103ce:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80103d2:	9301      	str	r3, [sp, #4]
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	4623      	mov	r3, r4
 80103da:	f000 f846 	bl	801046a <VL53L1_f_030>
 80103de:	4603      	mov	r3, r0
 80103e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 80103e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d114      	bne.n	8010416 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 80103ec:	8bfa      	ldrh	r2, [r7, #30]
 80103ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 80103f4:	b218      	sxth	r0, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	78da      	ldrb	r2, [r3, #3]
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	331c      	adds	r3, #28
 80103fe:	7bbc      	ldrb	r4, [r7, #14]
 8010400:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	4623      	mov	r3, r4
 801040c:	f000 f82d 	bl	801046a <VL53L1_f_030>
 8010410:	4603      	mov	r3, r0
 8010412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	695a      	ldr	r2, [r3, #20]
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	69db      	ldr	r3, [r3, #28]
 801041e:	429a      	cmp	r2, r3
 8010420:	d909      	bls.n	8010436 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	695b      	ldr	r3, [r3, #20]
 8010426:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	69da      	ldr	r2, [r3, #28]
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	69ba      	ldr	r2, [r7, #24]
 8010434:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	699a      	ldr	r2, [r3, #24]
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	429a      	cmp	r2, r3
 8010440:	d203      	bcs.n	801044a <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	699a      	ldr	r2, [r3, #24]
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	699a      	ldr	r2, [r3, #24]
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	69db      	ldr	r3, [r3, #28]
 8010452:	429a      	cmp	r2, r3
 8010454:	d903      	bls.n	801045e <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	699a      	ldr	r2, [r3, #24]
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 801045e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010462:	4618      	mov	r0, r3
 8010464:	372c      	adds	r7, #44	; 0x2c
 8010466:	46bd      	mov	sp, r7
 8010468:	bd90      	pop	{r4, r7, pc}

0801046a <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 801046a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046e:	b09d      	sub	sp, #116	; 0x74
 8010470:	af00      	add	r7, sp, #0
 8010472:	461c      	mov	r4, r3
 8010474:	4603      	mov	r3, r0
 8010476:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801047a:	460b      	mov	r3, r1
 801047c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010480:	4613      	mov	r3, r2
 8010482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010486:	4623      	mov	r3, r4
 8010488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801048c:	2300      	movs	r3, #0
 801048e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 801049e:	f04f 0200 	mov.w	r2, #0
 80104a2:	f04f 0300 	mov.w	r3, #0
 80104a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80104aa:	f04f 0200 	mov.w	r2, #0
 80104ae:	f04f 0300 	mov.w	r3, #0
 80104b2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	f04f 0300 	mov.w	r3, #0
 80104be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80104c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80104c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104ca:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80104cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f000 809c 	beq.w	801060e <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80104d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80104da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80104de:	e08f      	b.n	8010600 <VL53L1_f_030+0x196>

		if (lb < 0)
 80104e0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	da09      	bge.n	80104fc <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 80104e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80104f2:	4413      	add	r3, r2
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80104fa:	e00a      	b.n	8010512 <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 80104fc:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8010500:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8010504:	fb91 f3f2 	sdiv	r3, r1, r2
 8010508:	fb02 f303 	mul.w	r3, r2, r3
 801050c:	1acb      	subs	r3, r1, r3
 801050e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 8010512:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010516:	2b00      	cmp	r3, #0
 8010518:	db6b      	blt.n	80105f2 <VL53L1_f_030+0x188>
 801051a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801051e:	2b17      	cmp	r3, #23
 8010520:	dc67      	bgt.n	80105f2 <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 8010522:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010526:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801052a:	3306      	adds	r3, #6
 801052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010530:	17da      	asrs	r2, r3, #31
 8010532:	633b      	str	r3, [r7, #48]	; 0x30
 8010534:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8010536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801053a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801053e:	17da      	asrs	r2, r3, #31
 8010540:	62bb      	str	r3, [r7, #40]	; 0x28
 8010542:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8010544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010546:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801054a:	4602      	mov	r2, r0
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	623b      	str	r3, [r7, #32]
 8010550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010552:	460a      	mov	r2, r1
 8010554:	eb63 0302 	sbc.w	r3, r3, r2
 8010558:	627b      	str	r3, [r7, #36]	; 0x24
 801055a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801055e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 8010562:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010566:	2b00      	cmp	r3, #0
 8010568:	d009      	beq.n	801057e <VL53L1_f_030+0x114>
 801056a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801056e:	2b00      	cmp	r3, #0
 8010570:	da05      	bge.n	801057e <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 8010572:	f04f 0200 	mov.w	r2, #0
 8010576:	f04f 0300 	mov.w	r3, #0
 801057a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 801057e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010586:	1884      	adds	r4, r0, r2
 8010588:	61bc      	str	r4, [r7, #24]
 801058a:	eb41 0303 	adc.w	r3, r1, r3
 801058e:	61fb      	str	r3, [r7, #28]
 8010590:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010594:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8010598:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801059c:	17da      	asrs	r2, r3, #31
 801059e:	63bb      	str	r3, [r7, #56]	; 0x38
 80105a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80105a2:	f04f 0200 	mov.w	r2, #0
 80105a6:	f04f 0300 	mov.w	r3, #0
 80105aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105ac:	02cb      	lsls	r3, r1, #11
 80105ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105b0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80105b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105b6:	02ca      	lsls	r2, r1, #11
 80105b8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80105bc:	f143 0600 	adc.w	r6, r3, #0
 80105c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105c2:	fb06 f203 	mul.w	r2, r6, r3
 80105c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105c8:	fb05 f303 	mul.w	r3, r5, r3
 80105cc:	441a      	add	r2, r3
 80105ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105d0:	fba3 ab05 	umull	sl, fp, r3, r5
 80105d4:	eb02 030b 	add.w	r3, r2, fp
 80105d8:	469b      	mov	fp, r3
			weighted_sum +=
 80105da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80105de:	eb12 010a 	adds.w	r1, r2, sl
 80105e2:	6139      	str	r1, [r7, #16]
 80105e4:	eb43 030b 	adc.w	r3, r3, fp
 80105e8:	617b      	str	r3, [r7, #20]
 80105ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80105ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80105f2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	3301      	adds	r3, #1
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010600:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8010604:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010608:	429a      	cmp	r2, r3
 801060a:	f77f af69 	ble.w	80104e0 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 801060e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010612:	2a01      	cmp	r2, #1
 8010614:	f173 0300 	sbcs.w	r3, r3, #0
 8010618:	db3b      	blt.n	8010692 <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 801061a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801061e:	0fd9      	lsrs	r1, r3, #31
 8010620:	2000      	movs	r0, #0
 8010622:	60b9      	str	r1, [r7, #8]
 8010624:	60f8      	str	r0, [r7, #12]
 8010626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801062a:	4621      	mov	r1, r4
 801062c:	eb11 0802 	adds.w	r8, r1, r2
 8010630:	4629      	mov	r1, r5
 8010632:	eb41 0903 	adc.w	r9, r1, r3
 8010636:	f04f 0200 	mov.w	r2, #0
 801063a:	f04f 0300 	mov.w	r3, #0
 801063e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8010642:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8010646:	ea4f 0369 	mov.w	r3, r9, asr #1
 801064a:	4610      	mov	r0, r2
 801064c:	4619      	mov	r1, r3
 801064e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010652:	1814      	adds	r4, r2, r0
 8010654:	603c      	str	r4, [r7, #0]
 8010656:	414b      	adcs	r3, r1
 8010658:	607b      	str	r3, [r7, #4]
 801065a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801065e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8010662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801066a:	f7ef fdd9 	bl	8000220 <__aeabi_ldivmod>
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8010676:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801067a:	2b00      	cmp	r3, #0
 801067c:	da05      	bge.n	801068a <VL53L1_f_030+0x220>
			weighted_sum = 0;
 801067e:	f04f 0200 	mov.w	r2, #0
 8010682:	f04f 0300 	mov.w	r3, #0
 8010686:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 801068a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801068c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010690:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8010692:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8010696:	4618      	mov	r0, r3
 8010698:	3774      	adds	r7, #116	; 0x74
 801069a:	46bd      	mov	sp, r7
 801069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106a0 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b086      	sub	sp, #24
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	607a      	str	r2, [r7, #4]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	4603      	mov	r3, r0
 80106ae:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80106b0:	2300      	movs	r3, #0
 80106b2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80106bc:	7bfa      	ldrb	r2, [r7, #15]
 80106be:	4613      	mov	r3, r2
 80106c0:	00db      	lsls	r3, r3, #3
 80106c2:	4413      	add	r3, r2
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	3304      	adds	r3, #4
 80106d0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 80106d2:	22ac      	movs	r2, #172	; 0xac
 80106d4:	68b9      	ldr	r1, [r7, #8]
 80106d6:	6a38      	ldr	r0, [r7, #32]
 80106d8:	f009 f86a 	bl	80197b0 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80106e2:	75fb      	strb	r3, [r7, #23]
 80106e4:	e020      	b.n	8010728 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	7dfa      	ldrb	r2, [r7, #23]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d304      	bcc.n	80106fa <VL53L1_f_023+0x5a>
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	791b      	ldrb	r3, [r3, #4]
 80106f4:	7dfa      	ldrb	r2, [r7, #23]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d913      	bls.n	8010722 <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	78da      	ldrb	r2, [r3, #3]
 80106fe:	7dfb      	ldrb	r3, [r7, #23]
 8010700:	fbb3 f1f2 	udiv	r1, r3, r2
 8010704:	fb01 f202 	mul.w	r2, r1, r2
 8010708:	1a9b      	subs	r3, r3, r2
 801070a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	7a9b      	ldrb	r3, [r3, #10]
 8010710:	7d7a      	ldrb	r2, [r7, #21]
 8010712:	429a      	cmp	r2, r3
 8010714:	d205      	bcs.n	8010722 <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010716:	7d7a      	ldrb	r2, [r7, #21]
 8010718:	6a3b      	ldr	r3, [r7, #32]
 801071a:	3206      	adds	r2, #6
 801071c:	6839      	ldr	r1, [r7, #0]
 801071e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	3301      	adds	r3, #1
 8010726:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010728:	7dfa      	ldrb	r2, [r7, #23]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010730:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010736:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010738:	429a      	cmp	r2, r3
 801073a:	dbd4      	blt.n	80106e6 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801073c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074c:	b096      	sub	sp, #88	; 0x58
 801074e:	af08      	add	r7, sp, #32
 8010750:	4604      	mov	r4, r0
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	461a      	mov	r2, r3
 8010758:	4623      	mov	r3, r4
 801075a:	73fb      	strb	r3, [r7, #15]
 801075c:	4603      	mov	r3, r0
 801075e:	73bb      	strb	r3, [r7, #14]
 8010760:	460b      	mov	r3, r1
 8010762:	737b      	strb	r3, [r7, #13]
 8010764:	4613      	mov	r3, r2
 8010766:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010768:	2300      	movs	r3, #0
 801076a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801076e:	2300      	movs	r3, #0
 8010770:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 801077a:	2300      	movs	r3, #0
 801077c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 801077e:	2300      	movs	r3, #0
 8010780:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 8010782:	2300      	movs	r3, #0
 8010784:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8010786:	2300      	movs	r3, #0
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 801078a:	2300      	movs	r3, #0
 801078c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 801079a:	7b7b      	ldrb	r3, [r7, #13]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d106      	bne.n	80107ae <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80107a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107a6:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80107a8:	f06f 030e 	mvn.w	r3, #14
 80107ac:	e06f      	b.n	801088e <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80107ae:	7bfb      	ldrb	r3, [r7, #15]
 80107b0:	7b7a      	ldrb	r2, [r7, #13]
 80107b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80107b6:	fb01 f202 	mul.w	r2, r1, r2
 80107ba:	1a9b      	subs	r3, r3, r2
 80107bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80107c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80107c4:	7b39      	ldrb	r1, [r7, #12]
 80107c6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80107ca:	f107 0320 	add.w	r3, r7, #32
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	4613      	mov	r3, r2
 80107d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107da:	f000 fddb 	bl	8011394 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80107de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80107e2:	7b39      	ldrb	r1, [r7, #12]
 80107e4:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80107e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107ec:	9301      	str	r3, [sp, #4]
 80107ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	4613      	mov	r3, r2
 80107f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107f8:	f000 fdcc 	bl	8011394 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 80107fc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00e      	beq.n	8010822 <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010804:	f107 021c 	add.w	r2, r7, #28
 8010808:	7b39      	ldrb	r1, [r7, #12]
 801080a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801080e:	f107 0314 	add.w	r3, r7, #20
 8010812:	9301      	str	r3, [sp, #4]
 8010814:	f107 0318 	add.w	r3, r7, #24
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	4613      	mov	r3, r2
 801081c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801081e:	f000 fdb9 	bl	8011394 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	469c      	mov	ip, r3
 8010826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010828:	469e      	mov	lr, r3
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082c:	4698      	mov	r8, r3
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	4619      	mov	r1, r3
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	461c      	mov	r4, r3
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	461d      	mov	r5, r3
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	461e      	mov	r6, r3
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8010842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010848:	607b      	str	r3, [r7, #4]
 801084a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010850:	7bb8      	ldrb	r0, [r7, #14]
 8010852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010854:	9207      	str	r2, [sp, #28]
 8010856:	9306      	str	r3, [sp, #24]
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	9205      	str	r2, [sp, #20]
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	9603      	str	r6, [sp, #12]
 8010862:	9502      	str	r5, [sp, #8]
 8010864:	9401      	str	r4, [sp, #4]
 8010866:	9100      	str	r1, [sp, #0]
 8010868:	4643      	mov	r3, r8
 801086a:	4672      	mov	r2, lr
 801086c:	4661      	mov	r1, ip
 801086e:	f002 ff30 	bl	80136d2 <VL53L1_f_014>
 8010872:	4603      	mov	r3, r0
 8010874:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8010878:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 801087c:	f113 0f0f 	cmn.w	r3, #15
 8010880:	d103      	bne.n	801088a <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 8010882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010888:	801a      	strh	r2, [r3, #0]


	return status;
 801088a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801088e:	4618      	mov	r0, r3
 8010890:	3738      	adds	r7, #56	; 0x38
 8010892:	46bd      	mov	sp, r7
 8010894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010898 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8010898:	b490      	push	{r4, r7}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	4604      	mov	r4, r0
 80108a0:	4608      	mov	r0, r1
 80108a2:	4611      	mov	r1, r2
 80108a4:	461a      	mov	r2, r3
 80108a6:	4623      	mov	r3, r4
 80108a8:	71fb      	strb	r3, [r7, #7]
 80108aa:	4603      	mov	r3, r0
 80108ac:	71bb      	strb	r3, [r7, #6]
 80108ae:	460b      	mov	r3, r1
 80108b0:	717b      	strb	r3, [r7, #5]
 80108b2:	4613      	mov	r3, r2
 80108b4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80108be:	6a3b      	ldr	r3, [r7, #32]
 80108c0:	79fa      	ldrb	r2, [r7, #7]
 80108c2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2200      	movs	r2, #0
 80108c8:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	781a      	ldrb	r2, [r3, #0]
 80108ce:	6a3b      	ldr	r3, [r7, #32]
 80108d0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	785a      	ldrb	r2, [r3, #1]
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	789a      	ldrb	r2, [r3, #2]
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	78da      	ldrb	r2, [r3, #3]
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	791a      	ldrb	r2, [r3, #4]
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	795a      	ldrb	r2, [r3, #5]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	791a      	ldrb	r2, [r3, #4]
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	b2db      	uxtb	r3, r3
 8010906:	3301      	adds	r3, #1
 8010908:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 801090a:	6a3b      	ldr	r3, [r7, #32]
 801090c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010914:	6a3b      	ldr	r3, [r7, #32]
 8010916:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	8c1a      	ldrh	r2, [r3, #32]
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	695b      	ldr	r3, [r3, #20]
 8010924:	b29a      	uxth	r2, r3
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	b29a      	uxth	r2, r3
 8010930:	6a3b      	ldr	r3, [r7, #32]
 8010932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	69db      	ldr	r3, [r3, #28]
 801093a:	b29a      	uxth	r2, r3
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	461a      	mov	r2, r3
 8010948:	6a3b      	ldr	r3, [r7, #32]
 801094a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	691a      	ldr	r2, [r3, #16]
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	461a      	mov	r2, r3
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	2213      	movs	r2, #19
 801096c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8010970:	887b      	ldrh	r3, [r7, #2]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00a      	beq.n	801098c <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8010976:	69fb      	ldr	r3, [r7, #28]
 8010978:	8c1b      	ldrh	r3, [r3, #32]
 801097a:	461a      	mov	r2, r3
 801097c:	887b      	ldrh	r3, [r7, #2]
 801097e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8010980:	429a      	cmp	r2, r3
 8010982:	d903      	bls.n	801098c <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8010984:	6a3b      	ldr	r3, [r7, #32]
 8010986:	2206      	movs	r2, #6
 8010988:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 801098c:	79bb      	ldrb	r3, [r7, #6]
 801098e:	b29b      	uxth	r3, r3
 8010990:	021b      	lsls	r3, r3, #8
 8010992:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 8010994:	6a3b      	ldr	r3, [r7, #32]
 8010996:	8a9b      	ldrh	r3, [r3, #20]
 8010998:	89fa      	ldrh	r2, [r7, #14]
 801099a:	429a      	cmp	r2, r3
 801099c:	d205      	bcs.n	80109aa <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80109a2:	89fb      	ldrh	r3, [r7, #14]
 80109a4:	1ad3      	subs	r3, r2, r3
 80109a6:	81fb      	strh	r3, [r7, #14]
 80109a8:	e001      	b.n	80109ae <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80109ae:	797b      	ldrb	r3, [r7, #5]
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	021b      	lsls	r3, r3, #8
 80109b4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80109bc:	89bb      	ldrh	r3, [r7, #12]
 80109be:	4413      	add	r3, r2
 80109c0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80109c8:	89fa      	ldrh	r2, [r7, #14]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d805      	bhi.n	80109da <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80109d4:	89ba      	ldrh	r2, [r7, #12]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d203      	bcs.n	80109e2 <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	2205      	movs	r2, #5
 80109de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 80109e2:	bf00      	nop
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bc90      	pop	{r4, r7}
 80109ea:	4770      	bx	lr

080109ec <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 80109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ee:	b08f      	sub	sp, #60	; 0x3c
 80109f0:	af06      	add	r7, sp, #24
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80109fa:	2300      	movs	r3, #0
 80109fc:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8010a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a08:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010a0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a0c:	f7ff f856 	bl	800fabc <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8010a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010a16:	22ac      	movs	r2, #172	; 0xac
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f008 fec8 	bl	80197b0 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	781a      	ldrb	r2, [r3, #0]
 8010a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a26:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	785a      	ldrb	r2, [r3, #1]
 8010a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a2e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	789a      	ldrb	r2, [r3, #2]
 8010a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a36:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8010a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a40:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8010a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a44:	2200      	movs	r2, #0
 8010a46:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a4a:	2204      	movs	r2, #4
 8010a4c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8010a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a50:	2200      	movs	r2, #0
 8010a52:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010a54:	2300      	movs	r3, #0
 8010a56:	77bb      	strb	r3, [r7, #30]
 8010a58:	e008      	b.n	8010a6c <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8010a5a:	7fbb      	ldrb	r3, [r7, #30]
 8010a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	4413      	add	r3, r2
 8010a62:	2200      	movs	r2, #0
 8010a64:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010a66:	7fbb      	ldrb	r3, [r7, #30]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	77bb      	strb	r3, [r7, #30]
 8010a6c:	7fbb      	ldrb	r3, [r7, #30]
 8010a6e:	2b04      	cmp	r3, #4
 8010a70:	d9f3      	bls.n	8010a5a <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8010a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a74:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fd ff58 	bl	800e92e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8010a82:	461a      	mov	r2, r3
 8010a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f7fd ff8e 	bl	800e9ae <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8010a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fe fb66 	bl	800f16a <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8010a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aa0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7fd fffc 	bl	800eaa2 <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d009      	beq.n	8010ac8 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8010ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010abc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ac4:	f000 fdae 	bl	8011624 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	77bb      	strb	r3, [r7, #30]
 8010ad4:	e01e      	b.n	8010b14 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8010ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d117      	bne.n	8010b0e <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8010ade:	7fbb      	ldrb	r3, [r7, #30]
 8010ae0:	68ba      	ldr	r2, [r7, #8]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	4413      	add	r3, r2
 8010ae8:	8898      	ldrh	r0, [r3, #4]
 8010aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aec:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010af0:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010af6:	4413      	add	r3, r2
 8010af8:	3304      	adds	r3, #4
 8010afa:	9301      	str	r3, [sp, #4]
 8010afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	460b      	mov	r3, r1
 8010b02:	68ba      	ldr	r2, [r7, #8]
 8010b04:	68f9      	ldr	r1, [r7, #12]
 8010b06:	f7fe fb7b 	bl	800f200 <VL53L1_f_001>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010b0e:	7fbb      	ldrb	r3, [r7, #30]
 8010b10:	3301      	adds	r3, #1
 8010b12:	77bb      	strb	r3, [r7, #30]
 8010b14:	7fbb      	ldrb	r3, [r7, #30]
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	d9dd      	bls.n	8010ad6 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d11a      	bne.n	8010b58 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010b2a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b38:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b3e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8010b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b44:	9102      	str	r1, [sp, #8]
 8010b46:	9201      	str	r2, [sp, #4]
 8010b48:	9300      	str	r3, [sp, #0]
 8010b4a:	462b      	mov	r3, r5
 8010b4c:	4622      	mov	r2, r4
 8010b4e:	4631      	mov	r1, r6
 8010b50:	f7ff f82d 	bl	800fbae <VL53L1_f_018>
 8010b54:	4603      	mov	r3, r0
 8010b56:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d104      	bne.n	8010b6a <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8010b60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b62:	f7ff f954 	bl	800fe0e <VL53L1_f_019>
 8010b66:	4603      	mov	r3, r0
 8010b68:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010b6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d104      	bne.n	8010b7c <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8010b72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b74:	f7ff f999 	bl	800feaa <VL53L1_f_020>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d104      	bne.n	8010b8e <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010b84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b86:	f7ff fa0e 	bl	800ffa6 <VL53L1_f_021>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010b8e:	2300      	movs	r3, #0
 8010b90:	77bb      	strb	r3, [r7, #30]
 8010b92:	e0a6      	b.n	8010ce2 <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010b94:	7fba      	ldrb	r2, [r7, #30]
 8010b96:	4613      	mov	r3, r2
 8010b98:	00db      	lsls	r3, r3, #3
 8010b9a:	4413      	add	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ba4:	4413      	add	r3, r2
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8010baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d109      	bne.n	8010bc6 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8010bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010bb8:	7fbb      	ldrb	r3, [r7, #30]
 8010bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff fb48 	bl	8010252 <VL53L1_f_022>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8010bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d110      	bne.n	8010bf0 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8010bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bdc:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010be0:	7fb8      	ldrb	r0, [r7, #30]
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	4613      	mov	r3, r2
 8010be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010be8:	f7ff fd5a 	bl	80106a0 <VL53L1_f_023>
 8010bec:	4603      	mov	r3, r0
 8010bee:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10d      	bne.n	8010c14 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bfa:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c00:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010c04:	7fb8      	ldrb	r0, [r7, #30]
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	2300      	movs	r3, #0
 8010c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c0c:	f7ff fd48 	bl	80106a0 <VL53L1_f_023>
 8010c10:	4603      	mov	r3, r0
 8010c12:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10d      	bne.n	8010c38 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c1e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c24:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010c28:	7fb8      	ldrb	r0, [r7, #30]
 8010c2a:	9300      	str	r3, [sp, #0]
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c30:	f7ff fd36 	bl	80106a0 <VL53L1_f_023>
 8010c34:	4603      	mov	r3, r0
 8010c36:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010c38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c42:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010c46:	7fb8      	ldrb	r0, [r7, #30]
 8010c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c4c:	f000 f8dd 	bl	8010e0a <VL53L1_f_034>
 8010c50:	4603      	mov	r3, r0
 8010c52:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d108      	bne.n	8010c6e <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	8a19      	ldrh	r1, [r3, #16]
 8010c60:	7fb8      	ldrb	r0, [r7, #30]
 8010c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c66:	f000 f95c 	bl	8010f22 <VL53L1_f_035>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8010c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d124      	bne.n	8010cc0 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	789d      	ldrb	r5, [r3, #2]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	7e1e      	ldrb	r6, [r3, #24]
 8010c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c80:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c92:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c98:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010c9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c9e:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8010ca2:	697c      	ldr	r4, [r7, #20]
 8010ca4:	3420      	adds	r4, #32
 8010ca6:	9404      	str	r4, [sp, #16]
 8010ca8:	9003      	str	r0, [sp, #12]
 8010caa:	9102      	str	r1, [sp, #8]
 8010cac:	9201      	str	r2, [sp, #4]
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	4673      	mov	r3, lr
 8010cb2:	4662      	mov	r2, ip
 8010cb4:	4631      	mov	r1, r6
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	f7ff fd46 	bl	8010748 <VL53L1_f_026>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8010cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d109      	bne.n	8010cdc <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cca:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8010cce:	7fb8      	ldrb	r0, [r7, #30]
 8010cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd2:	2101      	movs	r1, #1
 8010cd4:	f7ff fb10 	bl	80102f8 <VL53L1_f_027>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010cdc:	7fbb      	ldrb	r3, [r7, #30]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	77bb      	strb	r3, [r7, #30]
 8010ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010ce8:	7fba      	ldrb	r2, [r7, #30]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	f4ff af52 	bcc.w	8010b94 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d107      	bne.n	8010d08 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	785b      	ldrb	r3, [r3, #1]
 8010cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7ff fa23 	bl	801014a <VL53L1_f_028>
 8010d04:	4603      	mov	r3, r0
 8010d06:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010d08:	2300      	movs	r3, #0
 8010d0a:	77bb      	strb	r3, [r7, #30]
 8010d0c:	e071      	b.n	8010df2 <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010d0e:	7fba      	ldrb	r2, [r7, #30]
 8010d10:	4613      	mov	r3, r2
 8010d12:	00db      	lsls	r3, r3, #3
 8010d14:	4413      	add	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d1e:	4413      	add	r3, r2
 8010d20:	3304      	adds	r3, #4
 8010d22:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d26:	7c9a      	ldrb	r2, [r3, #18]
 8010d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d2a:	7c5b      	ldrb	r3, [r3, #17]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d25c      	bcs.n	8010dea <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	dd57      	ble.n	8010dec <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010d40:	2bff      	cmp	r3, #255	; 0xff
 8010d42:	d053      	beq.n	8010dec <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d46:	7c9b      	ldrb	r3, [r3, #18]
 8010d48:	461a      	mov	r2, r3
			prange_data =
 8010d4a:	234c      	movs	r3, #76	; 0x4c
 8010d4c:	fb02 f303 	mul.w	r3, r2, r3
 8010d50:	3310      	adds	r3, #16
 8010d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d54:	4413      	add	r3, r2
 8010d56:	3304      	adds	r3, #4
 8010d58:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d115      	bne.n	8010d8e <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d64:	7c98      	ldrb	r0, [r3, #18]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8b5d      	ldrh	r5, [r3, #26]
 8010d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d78:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	9202      	str	r2, [sp, #8]
 8010d80:	697a      	ldr	r2, [r7, #20]
 8010d82:	9201      	str	r2, [sp, #4]
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	462b      	mov	r3, r5
 8010d88:	4622      	mov	r2, r4
 8010d8a:	f7ff fd85 	bl	8010898 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d115      	bne.n	8010dc2 <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010dae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010db2:	9301      	str	r3, [sp, #4]
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	4623      	mov	r3, r4
 8010dba:	f000 fb44 	bl	8011446 <VL53L1_f_011>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d108      	bne.n	8010ddc <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8bd8      	ldrh	r0, [r3, #30]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	f000 fbda 	bl	8011590 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dde:	7c9b      	ldrb	r3, [r3, #18]
 8010de0:	3301      	adds	r3, #1
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010de6:	749a      	strb	r2, [r3, #18]
 8010de8:	e000      	b.n	8010dec <VL53L1_f_033+0x400>
			continue;
 8010dea:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010dec:	7fbb      	ldrb	r3, [r7, #30]
 8010dee:	3301      	adds	r3, #1
 8010df0:	77bb      	strb	r3, [r7, #30]
 8010df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010df8:	7fba      	ldrb	r2, [r7, #30]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d387      	bcc.n	8010d0e <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010dfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3724      	adds	r7, #36	; 0x24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e0a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b08c      	sub	sp, #48	; 0x30
 8010e0e:	af02      	add	r7, sp, #8
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
 8010e16:	4603      	mov	r3, r0
 8010e18:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010e20:	7bfa      	ldrb	r2, [r7, #15]
 8010e22:	4613      	mov	r3, r2
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	4413      	add	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	4413      	add	r3, r2
 8010e32:	3304      	adds	r3, #4
 8010e34:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010e40:	2300      	movs	r3, #0
 8010e42:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	785a      	ldrb	r2, [r3, #1]
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	781a      	ldrb	r2, [r3, #0]
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	789a      	ldrb	r2, [r3, #2]
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e6c:	e04d      	b.n	8010f0a <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	78da      	ldrb	r2, [r3, #3]
 8010e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e76:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e7a:	fb01 f202 	mul.w	r2, r1, r2
 8010e7e:	1a9b      	subs	r3, r3, r2
 8010e80:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	7999      	ldrb	r1, [r3, #6]
 8010e86:	f107 0218 	add.w	r2, r7, #24
 8010e8a:	7ff8      	ldrb	r0, [r7, #31]
 8010e8c:	f107 0310 	add.w	r3, r7, #16
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	f107 0314 	add.w	r3, r7, #20
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	4613      	mov	r3, r2
 8010e9a:	68ba      	ldr	r2, [r7, #8]
 8010e9c:	f000 fa7a 	bl	8011394 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010ea0:	7ffb      	ldrb	r3, [r7, #31]
 8010ea2:	69ba      	ldr	r2, [r7, #24]
 8010ea4:	6839      	ldr	r1, [r7, #0]
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	440b      	add	r3, r1
 8010eaa:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010eac:	7ffb      	ldrb	r3, [r7, #31]
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	3318      	adds	r3, #24
 8010eb4:	009b      	lsls	r3, r3, #2
 8010eb6:	440b      	add	r3, r1
 8010eb8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010eba:	7ffb      	ldrb	r3, [r7, #31]
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	6839      	ldr	r1, [r7, #0]
 8010ec0:	3330      	adds	r3, #48	; 0x30
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	440b      	add	r3, r1
 8010ec6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	689a      	ldr	r2, [r3, #8]
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010ed6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010ed8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010eda:	6839      	ldr	r1, [r7, #0]
 8010edc:	3348      	adds	r3, #72	; 0x48
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	440b      	add	r3, r1
 8010ee2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	689a      	ldr	r2, [r3, #8]
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010ef2:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010ef4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	3360      	adds	r3, #96	; 0x60
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	440b      	add	r3, r1
 8010efe:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f04:	3301      	adds	r3, #1
 8010f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f0a:	6a3b      	ldr	r3, [r7, #32]
 8010f0c:	791b      	ldrb	r3, [r3, #4]
 8010f0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d9ab      	bls.n	8010e6e <VL53L1_f_034+0x64>
	}

	return status;
 8010f16:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3728      	adds	r7, #40	; 0x28
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f24:	b08f      	sub	sp, #60	; 0x3c
 8010f26:	af06      	add	r7, sp, #24
 8010f28:	60ba      	str	r2, [r7, #8]
 8010f2a:	607b      	str	r3, [r7, #4]
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]
 8010f30:	460b      	mov	r3, r1
 8010f32:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010f34:	2300      	movs	r3, #0
 8010f36:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010f3c:	7bfa      	ldrb	r2, [r7, #15]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	00db      	lsls	r3, r3, #3
 8010f42:	4413      	add	r3, r2
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	3304      	adds	r3, #4
 8010f50:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	77fb      	strb	r3, [r7, #31]
 8010f64:	e0b9      	b.n	80110da <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	78da      	ldrb	r2, [r3, #3]
 8010f6a:	7ffb      	ldrb	r3, [r7, #31]
 8010f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f70:	fb01 f202 	mul.w	r2, r1, r2
 8010f74:	1a9b      	subs	r3, r3, r2
 8010f76:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010f78:	7ffb      	ldrb	r3, [r7, #31]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	78d2      	ldrb	r2, [r2, #3]
 8010f80:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f84:	fb01 f202 	mul.w	r2, r1, r2
 8010f88:	1a9b      	subs	r3, r3, r2
 8010f8a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	789b      	ldrb	r3, [r3, #2]
 8010f90:	7dfa      	ldrb	r2, [r7, #23]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	f080 809e 	bcs.w	80110d4 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010f9c:	7dba      	ldrb	r2, [r7, #22]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	f080 8098 	bcs.w	80110d4 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	3348      	adds	r3, #72	; 0x48
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	4413      	add	r3, r2
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10e      	bne.n	8010fd2 <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	3360      	adds	r3, #96	; 0x60
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d106      	bne.n	8010fd2 <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010fc4:	7dfb      	ldrb	r3, [r7, #23]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	4413      	add	r3, r2
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010fd0:	e043      	b.n	801105a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010fd2:	7dfb      	ldrb	r3, [r7, #23]
 8010fd4:	68ba      	ldr	r2, [r7, #8]
 8010fd6:	3348      	adds	r3, #72	; 0x48
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	4413      	add	r3, r2
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	db0e      	blt.n	8011000 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	3360      	adds	r3, #96	; 0x60
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	4413      	add	r3, r2
 8010fec:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	db06      	blt.n	8011000 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010ffe:	e02c      	b.n	801105a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011000:	7dfb      	ldrb	r3, [r7, #23]
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	3348      	adds	r3, #72	; 0x48
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	4413      	add	r3, r2
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	da1e      	bge.n	801104e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011010:	7dfb      	ldrb	r3, [r7, #23]
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	3360      	adds	r3, #96	; 0x60
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801101c:	2b00      	cmp	r3, #0
 801101e:	db16      	blt.n	801104e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011020:	7dbb      	ldrb	r3, [r7, #22]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	3348      	adds	r3, #72	; 0x48
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	4413      	add	r3, r2
 801102a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801102c:	2b00      	cmp	r3, #0
 801102e:	db0e      	blt.n	801104e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8011030:	7dbb      	ldrb	r3, [r7, #22]
 8011032:	68ba      	ldr	r2, [r7, #8]
 8011034:	3360      	adds	r3, #96	; 0x60
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4413      	add	r3, r2
 801103a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801103c:	2b00      	cmp	r3, #0
 801103e:	da06      	bge.n	801104e <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8011040:	7dfb      	ldrb	r3, [r7, #23]
 8011042:	68ba      	ldr	r2, [r7, #8]
 8011044:	4413      	add	r3, r2
 8011046:	2201      	movs	r2, #1
 8011048:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801104c:	e005      	b.n	801105a <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801104e:	7dfb      	ldrb	r3, [r7, #23]
 8011050:	68ba      	ldr	r2, [r7, #8]
 8011052:	4413      	add	r3, r2
 8011054:	2200      	movs	r2, #0
 8011056:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	68ba      	ldr	r2, [r7, #8]
 801105e:	4413      	add	r3, r2
 8011060:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8011064:	2b00      	cmp	r3, #0
 8011066:	d035      	beq.n	80110d4 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	7ffa      	ldrb	r2, [r7, #31]
 801106c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 801106e:	7dfb      	ldrb	r3, [r7, #23]
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	685c      	ldr	r4, [r3, #4]
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	3318      	adds	r3, #24
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	4413      	add	r3, r2
 8011082:	685d      	ldr	r5, [r3, #4]
 8011084:	7dfb      	ldrb	r3, [r7, #23]
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	3330      	adds	r3, #48	; 0x30
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	685e      	ldr	r6, [r3, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	78d2      	ldrb	r2, [r2, #3]
 8011098:	69b9      	ldr	r1, [r7, #24]
 801109a:	3118      	adds	r1, #24
 801109c:	7ff8      	ldrb	r0, [r7, #31]
 801109e:	9105      	str	r1, [sp, #20]
 80110a0:	9204      	str	r2, [sp, #16]
 80110a2:	9303      	str	r3, [sp, #12]
 80110a4:	2300      	movs	r3, #0
 80110a6:	9302      	str	r3, [sp, #8]
 80110a8:	2300      	movs	r3, #0
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	2300      	movs	r3, #0
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	4633      	mov	r3, r6
 80110b2:	462a      	mov	r2, r5
 80110b4:	4621      	mov	r1, r4
 80110b6:	f000 f81c 	bl	80110f2 <VL53L1_f_036>
 80110ba:	4603      	mov	r3, r0
 80110bc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 80110be:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80110c2:	f113 0f0f 	cmn.w	r3, #15
 80110c6:	d105      	bne.n	80110d4 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	4413      	add	r3, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80110d4:	7ffb      	ldrb	r3, [r7, #31]
 80110d6:	3301      	adds	r3, #1
 80110d8:	77fb      	strb	r3, [r7, #31]
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	791b      	ldrb	r3, [r3, #4]
 80110de:	7ffa      	ldrb	r2, [r7, #31]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	f4ff af40 	bcc.w	8010f66 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 80110e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3724      	adds	r7, #36	; 0x24
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110f2 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 80110f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110f6:	b0b2      	sub	sp, #200	; 0xc8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80110fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011106:	4603      	mov	r3, r0
 8011108:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801110c:	23f1      	movs	r3, #241	; 0xf1
 801110e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8011112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011116:	f04f 0300 	mov.w	r3, #0
 801111a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 801111e:	f04f 0200 	mov.w	r2, #0
 8011122:	f04f 0300 	mov.w	r3, #0
 8011126:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 801112a:	f04f 0200 	mov.w	r2, #0
 801112e:	f04f 0300 	mov.w	r3, #0
 8011132:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801113a:	17da      	asrs	r2, r3, #31
 801113c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8011144:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011148:	17da      	asrs	r2, r3, #31
 801114a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801114e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801115a:	4602      	mov	r2, r0
 801115c:	ebb3 0802 	subs.w	r8, r3, r2
 8011160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011164:	460a      	mov	r2, r1
 8011166:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 801116a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801116e:	17da      	asrs	r2, r3, #31
 8011170:	67bb      	str	r3, [r7, #120]	; 0x78
 8011172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011174:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8011178:	460b      	mov	r3, r1
 801117a:	ebb8 0a03 	subs.w	sl, r8, r3
 801117e:	4613      	mov	r3, r2
 8011180:	eb69 0b03 	sbc.w	fp, r9, r3
 8011184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011188:	17da      	asrs	r2, r3, #31
 801118a:	673b      	str	r3, [r7, #112]	; 0x70
 801118c:	677a      	str	r2, [r7, #116]	; 0x74
 801118e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8011192:	460b      	mov	r3, r1
 8011194:	ebba 0403 	subs.w	r4, sl, r3
 8011198:	4613      	mov	r3, r2
 801119a:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801119e:	f04f 0200 	mov.w	r2, #0
 80111a2:	f04f 0300 	mov.w	r3, #0
 80111a6:	032b      	lsls	r3, r5, #12
 80111a8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80111ac:	0322      	lsls	r2, r4, #12
 80111ae:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80111b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111b6:	17da      	asrs	r2, r3, #31
 80111b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80111ba:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80111bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111c0:	17da      	asrs	r2, r3, #31
 80111c2:	663b      	str	r3, [r7, #96]	; 0x60
 80111c4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80111c6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80111ca:	4623      	mov	r3, r4
 80111cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80111d0:	4602      	mov	r2, r0
 80111d2:	1a9b      	subs	r3, r3, r2
 80111d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80111d6:	462b      	mov	r3, r5
 80111d8:	460a      	mov	r2, r1
 80111da:	eb63 0302 	sbc.w	r3, r3, r2
 80111de:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80111e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111e4:	17da      	asrs	r2, r3, #31
 80111e6:	653b      	str	r3, [r7, #80]	; 0x50
 80111e8:	657a      	str	r2, [r7, #84]	; 0x54
 80111ea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80111ee:	4623      	mov	r3, r4
 80111f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80111f4:	4602      	mov	r2, r0
 80111f6:	1a9b      	subs	r3, r3, r2
 80111f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80111fa:	462b      	mov	r3, r5
 80111fc:	460a      	mov	r2, r1
 80111fe:	eb63 0302 	sbc.w	r3, r3, r2
 8011202:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011204:	f04f 0200 	mov.w	r2, #0
 8011208:	f04f 0300 	mov.w	r3, #0
 801120c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011210:	4629      	mov	r1, r5
 8011212:	030b      	lsls	r3, r1, #12
 8011214:	4621      	mov	r1, r4
 8011216:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 801121a:	4621      	mov	r1, r4
 801121c:	030a      	lsls	r2, r1, #12
 801121e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8011222:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011226:	4313      	orrs	r3, r2
 8011228:	f000 80a8 	beq.w	801137c <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 801122c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011230:	f04f 0000 	mov.w	r0, #0
 8011234:	f04f 0100 	mov.w	r1, #0
 8011238:	0319      	lsls	r1, r3, #12
 801123a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 801123e:	0310      	lsls	r0, r2, #12
 8011240:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011244:	1814      	adds	r4, r2, r0
 8011246:	633c      	str	r4, [r7, #48]	; 0x30
 8011248:	414b      	adcs	r3, r1
 801124a:	637b      	str	r3, [r7, #52]	; 0x34
 801124c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011250:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8011254:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011258:	1891      	adds	r1, r2, r2
 801125a:	62b9      	str	r1, [r7, #40]	; 0x28
 801125c:	415b      	adcs	r3, r3
 801125e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011264:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011268:	f7ee ffda 	bl	8000220 <__aeabi_ldivmod>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8011274:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011278:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 801127c:	6239      	str	r1, [r7, #32]
 801127e:	f143 0300 	adc.w	r3, r3, #0
 8011282:	627b      	str	r3, [r7, #36]	; 0x24
 8011284:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011288:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 801128c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011290:	2200      	movs	r2, #0
 8011292:	643b      	str	r3, [r7, #64]	; 0x40
 8011294:	647a      	str	r2, [r7, #68]	; 0x44
 8011296:	f04f 0200 	mov.w	r2, #0
 801129a:	f04f 0300 	mov.w	r3, #0
 801129e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80112a2:	4629      	mov	r1, r5
 80112a4:	030b      	lsls	r3, r1, #12
 80112a6:	4621      	mov	r1, r4
 80112a8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80112ac:	4621      	mov	r1, r4
 80112ae:	030a      	lsls	r2, r1, #12
 80112b0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80112b4:	1884      	adds	r4, r0, r2
 80112b6:	61bc      	str	r4, [r7, #24]
 80112b8:	eb41 0303 	adc.w	r3, r1, r3
 80112bc:	61fb      	str	r3, [r7, #28]
 80112be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80112c2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 80112c6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80112ca:	1c51      	adds	r1, r2, #1
 80112cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80112ce:	f143 0300 	adc.w	r3, r3, #0
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80112d8:	460b      	mov	r3, r1
 80112da:	0fdb      	lsrs	r3, r3, #31
 80112dc:	2200      	movs	r2, #0
 80112de:	613b      	str	r3, [r7, #16]
 80112e0:	617a      	str	r2, [r7, #20]
 80112e2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80112e6:	4623      	mov	r3, r4
 80112e8:	4602      	mov	r2, r0
 80112ea:	189b      	adds	r3, r3, r2
 80112ec:	60bb      	str	r3, [r7, #8]
 80112ee:	460b      	mov	r3, r1
 80112f0:	462a      	mov	r2, r5
 80112f2:	eb42 0303 	adc.w	r3, r2, r3
 80112f6:	60fb      	str	r3, [r7, #12]
 80112f8:	f04f 0200 	mov.w	r2, #0
 80112fc:	f04f 0300 	mov.w	r3, #0
 8011300:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011304:	4621      	mov	r1, r4
 8011306:	084a      	lsrs	r2, r1, #1
 8011308:	4629      	mov	r1, r5
 801130a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801130e:	4629      	mov	r1, r5
 8011310:	104b      	asrs	r3, r1, #1
 8011312:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8011316:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801131a:	2b00      	cmp	r3, #0
 801131c:	da05      	bge.n	801132a <VL53L1_f_036+0x238>
			mean_phase = 0;
 801131e:	f04f 0200 	mov.w	r2, #0
 8011322:	f04f 0300 	mov.w	r3, #0
 8011326:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 801132a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801132e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011332:	f173 0300 	sbcs.w	r3, r3, #0
 8011336:	db05      	blt.n	8011344 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801133c:	f04f 0300 	mov.w	r3, #0
 8011340:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8011344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 801134c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8011350:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8011352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011356:	fb93 f1f2 	sdiv	r1, r3, r2
 801135a:	fb01 f202 	mul.w	r2, r1, r2
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8011364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011368:	17da      	asrs	r2, r3, #31
 801136a:	603b      	str	r3, [r7, #0]
 801136c:	607a      	str	r2, [r7, #4]
 801136e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011372:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8011376:	2300      	movs	r3, #0
 8011378:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 801137c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011384:	601a      	str	r2, [r3, #0]

	return status;
 8011386:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 801138a:	4618      	mov	r0, r3
 801138c:	37c8      	adds	r7, #200	; 0xc8
 801138e:	46bd      	mov	sp, r7
 8011390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011394 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8011394:	b480      	push	{r7}
 8011396:	b087      	sub	sp, #28
 8011398:	af00      	add	r7, sp, #0
 801139a:	60ba      	str	r2, [r7, #8]
 801139c:	607b      	str	r3, [r7, #4]
 801139e:	4603      	mov	r3, r0
 80113a0:	73fb      	strb	r3, [r7, #15]
 80113a2:	460b      	mov	r3, r1
 80113a4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80113a6:	2300      	movs	r3, #0
 80113a8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80113b4:	7bfa      	ldrb	r2, [r7, #15]
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	3206      	adds	r2, #6
 80113ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80113be:	6a3b      	ldr	r3, [r7, #32]
 80113c0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80113c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80113c8:	2300      	movs	r3, #0
 80113ca:	75fb      	strb	r3, [r7, #23]
 80113cc:	e02f      	b.n	801142e <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80113ce:	7bfa      	ldrb	r2, [r7, #15]
 80113d0:	7dfb      	ldrb	r3, [r7, #23]
 80113d2:	4413      	add	r3, r2
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	7a92      	ldrb	r2, [r2, #10]
 80113d8:	441a      	add	r2, r3
 80113da:	7bbb      	ldrb	r3, [r7, #14]
 80113dc:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	7a92      	ldrb	r2, [r2, #10]
 80113e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80113e6:	fb01 f202 	mul.w	r2, r1, r2
 80113ea:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80113ec:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 80113ee:	7dfa      	ldrb	r2, [r7, #23]
 80113f0:	7bbb      	ldrb	r3, [r7, #14]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d20a      	bcs.n	801140c <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	7db9      	ldrb	r1, [r7, #22]
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	3106      	adds	r1, #6
 8011400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011404:	441a      	add	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	e00d      	b.n	8011428 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 801140c:	7dfa      	ldrb	r2, [r7, #23]
 801140e:	7bbb      	ldrb	r3, [r7, #14]
 8011410:	429a      	cmp	r2, r3
 8011412:	d909      	bls.n	8011428 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	7db9      	ldrb	r1, [r7, #22]
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	3106      	adds	r1, #6
 801141e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011422:	441a      	add	r2, r3
 8011424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011426:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011428:	7dfb      	ldrb	r3, [r7, #23]
 801142a:	3301      	adds	r3, #1
 801142c:	75fb      	strb	r3, [r7, #23]
 801142e:	7bbb      	ldrb	r3, [r7, #14]
 8011430:	005a      	lsls	r2, r3, #1
 8011432:	7dfb      	ldrb	r3, [r7, #23]
 8011434:	429a      	cmp	r2, r3
 8011436:	daca      	bge.n	80113ce <VL53L1_f_013+0x3a>
	}
}
 8011438:	bf00      	nop
 801143a:	bf00      	nop
 801143c:	371c      	adds	r7, #28
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b088      	sub	sp, #32
 801144a:	af00      	add	r7, sp, #0
 801144c:	60ba      	str	r2, [r7, #8]
 801144e:	461a      	mov	r2, r3
 8011450:	4603      	mov	r3, r0
 8011452:	81fb      	strh	r3, [r7, #14]
 8011454:	460b      	mov	r3, r1
 8011456:	81bb      	strh	r3, [r7, #12]
 8011458:	4613      	mov	r3, r2
 801145a:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 801145c:	2300      	movs	r3, #0
 801145e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8011460:	2300      	movs	r3, #0
 8011462:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8011468:	2300      	movs	r3, #0
 801146a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	89fa      	ldrh	r2, [r7, #14]
 8011470:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8011472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011474:	89ba      	ldrh	r2, [r7, #12]
 8011476:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8011478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 801147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8011484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011486:	8a5b      	ldrh	r3, [r3, #18]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d101      	bne.n	8011490 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801148c:	23f1      	movs	r3, #241	; 0xf1
 801148e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8011490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011492:	699b      	ldr	r3, [r3, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d101      	bne.n	801149c <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011498:	23f1      	movs	r3, #241	; 0xf1
 801149a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 801149c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d16f      	bne.n	8011584 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80114a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a6:	8a5b      	ldrh	r3, [r3, #18]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fd f903 	bl	800e6b4 <VL53L1_calc_pll_period_us>
 80114ae:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	699b      	ldr	r3, [r3, #24]
 80114b4:	3301      	adds	r3, #1
 80114b6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80114bc:	4619      	mov	r1, r3
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114c4:	6978      	ldr	r0, [r7, #20]
 80114c6:	f7fd f90c 	bl	800e6e2 <VL53L1_duration_maths>
 80114ca:	4602      	mov	r2, r0
 80114cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ce:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 80114d4:	0119      	lsls	r1, r3, #4
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114dc:	6978      	ldr	r0, [r7, #20]
 80114de:	f7fd f900 	bl	800e6e2 <VL53L1_duration_maths>
 80114e2:	4602      	mov	r2, r0
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	69db      	ldr	r3, [r3, #28]
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7fd fb6d 	bl	800ebd2 <VL53L1_rate_maths>
 80114f8:	4603      	mov	r3, r0
 80114fa:	461a      	mov	r2, r3
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8011504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011506:	6a1b      	ldr	r3, [r3, #32]
 8011508:	4619      	mov	r1, r3
 801150a:	4610      	mov	r0, r2
 801150c:	f7fd fb61 	bl	800ebd2 <VL53L1_rate_maths>
 8011510:	4603      	mov	r3, r0
 8011512:	461a      	mov	r2, r3
 8011514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011516:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 801151c:	461a      	mov	r2, r3
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	4619      	mov	r1, r3
 8011524:	4610      	mov	r0, r2
 8011526:	f7fd fb54 	bl	800ebd2 <VL53L1_rate_maths>
 801152a:	4603      	mov	r3, r0
 801152c:	461a      	mov	r2, r3
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011536:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 801153c:	4413      	add	r3, r2
 801153e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8011540:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011544:	2b01      	cmp	r3, #1
 8011546:	d905      	bls.n	8011554 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8011548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801154c:	69ba      	ldr	r2, [r7, #24]
 801154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011552:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	8ada      	ldrh	r2, [r3, #22]
 8011558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801155c:	69b9      	ldr	r1, [r7, #24]
 801155e:	2006      	movs	r0, #6
 8011560:	f7fd fb7c 	bl	800ec5c <VL53L1_rate_per_spad_maths>
 8011564:	4603      	mov	r3, r0
 8011566:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	8ad9      	ldrh	r1, [r3, #22]
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	69db      	ldr	r3, [r3, #28]
 8011578:	461a      	mov	r2, r3
 801157a:	f7fd f90b 	bl	800e794 <VL53L1_events_per_spad_maths>
 801157e:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8011580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011582:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8011584:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3720      	adds	r7, #32
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b085      	sub	sp, #20
 8011594:	af02      	add	r7, sp, #8
 8011596:	4603      	mov	r3, r0
 8011598:	603a      	str	r2, [r7, #0]
 801159a:	80fb      	strh	r3, [r7, #6]
 801159c:	460b      	mov	r3, r1
 801159e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	8a58      	ldrh	r0, [r3, #18]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	8a9c      	ldrh	r4, [r3, #20]
 80115ac:	88fb      	ldrh	r3, [r7, #6]
 80115ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80115b2:	9201      	str	r2, [sp, #4]
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	2300      	movs	r3, #0
 80115b8:	4622      	mov	r2, r4
 80115ba:	f7fd fb83 	bl	800ecc4 <VL53L1_range_maths>
 80115be:	4603      	mov	r3, r0
 80115c0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	8a58      	ldrh	r0, [r3, #18]
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	8a9c      	ldrh	r4, [r3, #20]
 80115d6:	88fb      	ldrh	r3, [r7, #6]
 80115d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80115dc:	9201      	str	r2, [sp, #4]
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	2300      	movs	r3, #0
 80115e2:	4622      	mov	r2, r4
 80115e4:	f7fd fb6e 	bl	800ecc4 <VL53L1_range_maths>
 80115e8:	4603      	mov	r3, r0
 80115ea:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	8a58      	ldrh	r0, [r3, #18]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	8a9c      	ldrh	r4, [r3, #20]
 8011600:	88fb      	ldrh	r3, [r7, #6]
 8011602:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011606:	9201      	str	r2, [sp, #4]
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	2300      	movs	r3, #0
 801160c:	4622      	mov	r2, r4
 801160e:	f7fd fb59 	bl	800ecc4 <VL53L1_range_maths>
 8011612:	4603      	mov	r3, r0
 8011614:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	bd90      	pop	{r4, r7, pc}

08011624 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8011634:	2300      	movs	r3, #0
 8011636:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011638:	2300      	movs	r3, #0
 801163a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	757b      	strb	r3, [r7, #21]





	memcpy(
 8011640:	22ac      	movs	r2, #172	; 0xac
 8011642:	68b9      	ldr	r1, [r7, #8]
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f008 f8b3 	bl	80197b0 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801164a:	2300      	movs	r3, #0
 801164c:	75fb      	strb	r3, [r7, #23]
 801164e:	e008      	b.n	8011662 <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8011650:	7dfa      	ldrb	r2, [r7, #23]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	3206      	adds	r2, #6
 8011656:	2100      	movs	r1, #0
 8011658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801165c:	7dfb      	ldrb	r3, [r7, #23]
 801165e:	3301      	adds	r3, #1
 8011660:	75fb      	strb	r3, [r7, #23]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	7a5b      	ldrb	r3, [r3, #9]
 8011666:	7dfa      	ldrb	r2, [r7, #23]
 8011668:	429a      	cmp	r2, r3
 801166a:	d3f1      	bcc.n	8011650 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 801166c:	68f9      	ldr	r1, [r7, #12]
 801166e:	68b8      	ldr	r0, [r7, #8]
 8011670:	f000 f878 	bl	8011764 <VL53L1_f_038>
 8011674:	4603      	mov	r3, r0
 8011676:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	7a9a      	ldrb	r2, [r3, #10]
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	7a9b      	ldrb	r3, [r3, #10]
 8011680:	429a      	cmp	r2, r3
 8011682:	d203      	bcs.n	801168c <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	7a9b      	ldrb	r3, [r3, #10]
 8011688:	75bb      	strb	r3, [r7, #22]
 801168a:	e002      	b.n	8011692 <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	7a9b      	ldrb	r3, [r3, #10]
 8011690:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 8011692:	2300      	movs	r3, #0
 8011694:	75fb      	strb	r3, [r7, #23]
 8011696:	e05c      	b.n	8011752 <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8011698:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801169c:	2b00      	cmp	r3, #0
 801169e:	db0f      	blt.n	80116c0 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80116a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116a4:	461a      	mov	r2, r3
 80116a6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80116aa:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	7a92      	ldrb	r2, [r2, #10]
 80116b0:	b252      	sxtb	r2, r2
 80116b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80116b6:	fb01 f202 	mul.w	r2, r1, r2
 80116ba:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80116bc:	757b      	strb	r3, [r7, #21]
 80116be:	e013      	b.n	80116e8 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	7a9b      	ldrb	r3, [r3, #10]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80116c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116cc:	4619      	mov	r1, r3
 80116ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80116d2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116d4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	7a92      	ldrb	r2, [r2, #10]
 80116da:	b252      	sxtb	r2, r2
 80116dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80116e0:	fb01 f202 	mul.w	r2, r1, r2
 80116e4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116e6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80116e8:	7d7b      	ldrb	r3, [r7, #21]
 80116ea:	461a      	mov	r2, r3
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	3206      	adds	r2, #6
 80116f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 80116f4:	7df9      	ldrb	r1, [r7, #23]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3106      	adds	r1, #6
 80116fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80116fe:	429a      	cmp	r2, r3
 8011700:	dd12      	ble.n	8011728 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8011702:	7d7b      	ldrb	r3, [r7, #21]
 8011704:	461a      	mov	r2, r3
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	3206      	adds	r2, #6
 801170a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801170e:	7df9      	ldrb	r1, [r7, #23]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	3106      	adds	r1, #6
 8011714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011718:	7d79      	ldrb	r1, [r7, #21]
 801171a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 801171c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	1d82      	adds	r2, r0, #6
 8011722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011726:	e006      	b.n	8011736 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011728:	7d7b      	ldrb	r3, [r7, #21]
 801172a:	461a      	mov	r2, r3
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	3206      	adds	r2, #6
 8011730:	2100      	movs	r1, #0
 8011732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8011736:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011738:	7d7b      	ldrb	r3, [r7, #21]
 801173a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	3206      	adds	r2, #6
 8011740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	1d82      	adds	r2, r0, #6
 8011748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 801174c:	7dfb      	ldrb	r3, [r7, #23]
 801174e:	3301      	adds	r3, #1
 8011750:	75fb      	strb	r3, [r7, #23]
 8011752:	7dfa      	ldrb	r2, [r7, #23]
 8011754:	7dbb      	ldrb	r3, [r7, #22]
 8011756:	429a      	cmp	r2, r3
 8011758:	d39e      	bcc.n	8011698 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 801175a:	bf00      	nop
 801175c:	bf00      	nop
 801175e:	3718      	adds	r7, #24
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 8011772:	2300      	movs	r3, #0
 8011774:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 801177a:	2300      	movs	r3, #0
 801177c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011784:	4618      	mov	r0, r3
 8011786:	f7fd fb85 	bl	800ee94 <VL53L1_decode_vcsel_period>
 801178a:	4603      	mov	r3, r0
	period = 2048 *
 801178c:	02db      	lsls	r3, r3, #11
 801178e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00a      	beq.n	80117ac <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	fbb3 f2f2 	udiv	r2, r3, r2
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	fb01 f202 	mul.w	r2, r1, r2
 80117a8:	1a9b      	subs	r3, r3, r2
 80117aa:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80117b2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80117b4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	dd09      	ble.n	80117d4 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	da01      	bge.n	80117ce <VL53L1_f_038+0x6a>
 80117ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80117ce:	12db      	asrs	r3, r3, #11
 80117d0:	75fb      	strb	r3, [r7, #23]
 80117d2:	e008      	b.n	80117e6 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da01      	bge.n	80117e2 <VL53L1_f_038+0x7e>
 80117de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80117e2:	12db      	asrs	r3, r3, #11
 80117e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80117e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3718      	adds	r7, #24
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b08e      	sub	sp, #56	; 0x38
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80117fc:	2300      	movs	r3, #0
 80117fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 8011812:	2300      	movs	r3, #0
 8011814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8011824:	22ac      	movs	r2, #172	; 0xac
 8011826:	6879      	ldr	r1, [r7, #4]
 8011828:	6838      	ldr	r0, [r7, #0]
 801182a:	f007 ffc1 	bl	80197b0 <memcpy>


	podata->VL53L1_p_024 = 0;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	2200      	movs	r2, #0
 8011832:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011834:	2300      	movs	r3, #0
 8011836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801183a:	e00a      	b.n	8011852 <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 801183c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	4413      	add	r3, r2
 8011844:	2210      	movs	r2, #16
 8011846:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011848:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801184c:	3301      	adds	r3, #1
 801184e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011852:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011856:	2b05      	cmp	r3, #5
 8011858:	d9f0      	bls.n	801183c <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801185a:	2300      	movs	r3, #0
 801185c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011860:	e00b      	b.n	801187a <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 8011862:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	3206      	adds	r2, #6
 801186a:	2100      	movs	r1, #0
 801186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011870:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011874:	3301      	adds	r3, #1
 8011876:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	7a5b      	ldrb	r3, [r3, #9]
 801187e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011882:	429a      	cmp	r2, r3
 8011884:	d3ed      	bcc.n	8011862 <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011886:	2300      	movs	r3, #0
 8011888:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801188c:	e012      	b.n	80118b4 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 801188e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011892:	3338      	adds	r3, #56	; 0x38
 8011894:	443b      	add	r3, r7
 8011896:	2200      	movs	r2, #0
 8011898:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 801189c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118a0:	3338      	adds	r3, #56	; 0x38
 80118a2:	443b      	add	r3, r7
 80118a4:	2200      	movs	r2, #0
 80118a6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80118aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118ae:	3301      	adds	r3, #1
 80118b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118b8:	2b0f      	cmp	r3, #15
 80118ba:	d9e8      	bls.n	801188e <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80118bc:	2300      	movs	r3, #0
 80118be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80118c2:	2300      	movs	r3, #0
 80118c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118c8:	e068      	b.n	801199c <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80118ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	4413      	add	r3, r2
 80118d2:	7b1b      	ldrb	r3, [r3, #12]
 80118d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 80118d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80118dc:	3338      	adds	r3, #56	; 0x38
 80118de:	443b      	add	r3, r7
 80118e0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d115      	bne.n	8011914 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 80118e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80118ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118f0:	0092      	lsls	r2, r2, #2
 80118f2:	b2d2      	uxtb	r2, r2
 80118f4:	3338      	adds	r3, #56	; 0x38
 80118f6:	443b      	add	r3, r7
 80118f8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 80118fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	4413      	add	r3, r2
 8011904:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011908:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 801190a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801190e:	3301      	adds	r3, #1
 8011910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011918:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801191c:	443a      	add	r2, r7
 801191e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8011922:	3201      	adds	r2, #1
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	3338      	adds	r3, #56	; 0x38
 8011928:	443b      	add	r3, r7
 801192a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801192e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011932:	3338      	adds	r3, #56	; 0x38
 8011934:	443b      	add	r3, r7
 8011936:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801193a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801193e:	2300      	movs	r3, #0
 8011940:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011944:	e021      	b.n	801198a <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8011946:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801194a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801194e:	441a      	add	r2, r3
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	3206      	adds	r2, #6
 8011954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011958:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801195c:	009a      	lsls	r2, r3, #2
 801195e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011962:	441a      	add	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	3206      	adds	r2, #6
 8011968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 801196c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8011970:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011974:	4402      	add	r2, r0
 8011976:	4419      	add	r1, r3
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	3206      	adds	r2, #6
 801197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8011980:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011984:	3301      	adds	r3, #1
 8011986:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801198a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801198e:	2b03      	cmp	r3, #3
 8011990:	d9d9      	bls.n	8011946 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011992:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011996:	3301      	adds	r3, #1
 8011998:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801199c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119a0:	2b05      	cmp	r3, #5
 80119a2:	d992      	bls.n	80118ca <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80119a4:	2300      	movs	r3, #0
 80119a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80119aa:	e022      	b.n	80119f2 <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80119ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119b0:	683a      	ldr	r2, [r7, #0]
 80119b2:	4413      	add	r3, r2
 80119b4:	7b1b      	ldrb	r3, [r3, #12]
 80119b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80119ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80119be:	2b0f      	cmp	r3, #15
 80119c0:	d80c      	bhi.n	80119dc <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80119c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80119c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80119ca:	3238      	adds	r2, #56	; 0x38
 80119cc:	443a      	add	r2, r7
 80119ce:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80119d2:	683a      	ldr	r2, [r7, #0]
 80119d4:	4413      	add	r3, r2
 80119d6:	460a      	mov	r2, r1
 80119d8:	749a      	strb	r2, [r3, #18]
 80119da:	e005      	b.n	80119e8 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80119dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119e0:	683a      	ldr	r2, [r7, #0]
 80119e2:	4413      	add	r3, r2
 80119e4:	2200      	movs	r2, #0
 80119e6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80119e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119ec:	3301      	adds	r3, #1
 80119ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80119f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119f6:	2b05      	cmp	r3, #5
 80119f8:	d9d8      	bls.n	80119ac <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 80119fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	b2da      	uxtb	r2, r3
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011a06:	2300      	movs	r3, #0
 8011a08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011a0c:	e050      	b.n	8011ab0 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8011a0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a12:	3338      	adds	r3, #56	; 0x38
 8011a14:	443b      	add	r3, r7
 8011a16:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	dd41      	ble.n	8011aa6 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8011a22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a26:	3338      	adds	r3, #56	; 0x38
 8011a28:	443b      	add	r3, r7
 8011a2a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8011a32:	2300      	movs	r3, #0
 8011a34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011a38:	e031      	b.n	8011a9e <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011a3a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a42:	441a      	add	r2, r3
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	3206      	adds	r2, #6
 8011a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8011a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4e:	0fda      	lsrs	r2, r3, #31
 8011a50:	4413      	add	r3, r2
 8011a52:	105b      	asrs	r3, r3, #1
 8011a54:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8011a56:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a5e:	441a      	add	r2, r3
 8011a60:	4401      	add	r1, r0
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	3206      	adds	r2, #6
 8011a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8011a6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a72:	441a      	add	r2, r3
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	3206      	adds	r2, #6
 8011a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a7c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a80:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a84:	441a      	add	r2, r3
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	fb91 f1f3 	sdiv	r1, r1, r3
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	3206      	adds	r2, #6
 8011a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8011a94:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a98:	3301      	adds	r3, #1
 8011a9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011a9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011aa2:	2b03      	cmp	r3, #3
 8011aa4:	d9c9      	bls.n	8011a3a <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011aa6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011aaa:	3301      	adds	r3, #1
 8011aac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011ab0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ab4:	2b0f      	cmp	r3, #15
 8011ab6:	d9aa      	bls.n	8011a0e <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	2200      	movs	r2, #0
 8011abc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8011abe:	7bfb      	ldrb	r3, [r7, #15]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d102      	bne.n	8011aca <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8011ac4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d002      	beq.n	8011ad0 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2204      	movs	r2, #4
 8011ace:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8011ad0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3738      	adds	r7, #56	; 0x38
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ade:	b0cb      	sub	sp, #300	; 0x12c
 8011ae0:	af06      	add	r7, sp, #24
 8011ae2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011ae6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011aea:	6020      	str	r0, [r4, #0]
 8011aec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011af0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011af4:	6001      	str	r1, [r0, #0]
 8011af6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011afa:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8011afe:	600a      	str	r2, [r1, #0]
 8011b00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b04:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011b08:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8011b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011b1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8011b20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011b24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011b28:	f107 0318 	add.w	r3, r7, #24
 8011b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8011b30:	2300      	movs	r3, #0
 8011b32:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011b34:	2300      	movs	r3, #0
 8011b36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8011b40:	2300      	movs	r3, #0
 8011b42:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8011b52:	2300      	movs	r3, #0
 8011b54:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b60:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011b64:	6818      	ldr	r0, [r3, #0]
 8011b66:	f7ff fe44 	bl	80117f2 <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b6e:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8011b70:	b299      	uxth	r1, r3
 8011b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b76:	3348      	adds	r3, #72	; 0x48
 8011b78:	461a      	mov	r2, r3
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	f7fd f9db 	bl	800ef36 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8011b80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b88:	3348      	adds	r3, #72	; 0x48
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7fd f994 	bl	800eeba <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8011b92:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d142      	bne.n	8011c20 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d039      	beq.n	8011c20 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8011bac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011bb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8011bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011be2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011be6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011bea:	6812      	ldr	r2, [r2, #0]
 8011bec:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011bf0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011bf4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011bf8:	6809      	ldr	r1, [r1, #0]
 8011bfa:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8011bfe:	f107 0014 	add.w	r0, r7, #20
 8011c02:	9004      	str	r0, [sp, #16]
 8011c04:	9103      	str	r1, [sp, #12]
 8011c06:	9202      	str	r2, [sp, #8]
 8011c08:	9301      	str	r3, [sp, #4]
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	2300      	movs	r3, #0
 8011c10:	4632      	mov	r2, r6
 8011c12:	4629      	mov	r1, r5
 8011c14:	4620      	mov	r0, r4
 8011c16:	f002 f98c 	bl	8013f32 <VL53L1_f_040>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011c20:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d115      	bne.n	8011c54 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011c28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00c      	beq.n	8011c54 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011c3a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8011c3e:	697a      	ldr	r2, [r7, #20]
 8011c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011c44:	3348      	adds	r3, #72	; 0x48
 8011c46:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011c4a:	f002 fbe4 	bl	8014416 <VL53L1_f_041>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011c54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011c5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011c64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c68:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c70:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c78:	2200      	movs	r2, #0
 8011c7a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8011c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011c88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8011c92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c96:	2200      	movs	r2, #0
 8011c98:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d002      	beq.n	8011cba <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011cc0:	e108      	b.n	8011ed4 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8011cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011cd8:	3348      	adds	r3, #72	; 0x48
 8011cda:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011cde:	7814      	ldrb	r4, [r2, #0]
 8011ce0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011ce4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011ce8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011cec:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011cf0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011cf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011cf8:	9405      	str	r4, [sp, #20]
 8011cfa:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011cfe:	9404      	str	r4, [sp, #16]
 8011d00:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011d04:	9403      	str	r4, [sp, #12]
 8011d06:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011d0a:	9402      	str	r4, [sp, #8]
 8011d0c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011d10:	9401      	str	r4, [sp, #4]
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011d18:	6812      	ldr	r2, [r2, #0]
 8011d1a:	6809      	ldr	r1, [r1, #0]
 8011d1c:	6800      	ldr	r0, [r0, #0]
 8011d1e:	f7fe fe65 	bl	80109ec <VL53L1_f_033>
 8011d22:	4603      	mov	r3, r0
 8011d24:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011d28:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f040 80cb 	bne.w	8011ec8 <VL53L1_hist_process_data+0x3ec>
 8011d32:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f040 80c6 	bne.w	8011ec8 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d40:	7c9b      	ldrb	r3, [r3, #18]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d110      	bne.n	8011d68 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d4a:	3314      	adds	r3, #20
 8011d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d54:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d5a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d60:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d66:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011d74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011d78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d84:	fb02 f303 	mul.w	r3, r2, r3
 8011d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011d96:	2300      	movs	r3, #0
 8011d98:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011d9c:	e08b      	b.n	8011eb6 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011d9e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011da2:	224c      	movs	r2, #76	; 0x4c
 8011da4:	fb02 f303 	mul.w	r3, r2, r3
 8011da8:	3310      	adds	r3, #16
 8011daa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011dae:	4413      	add	r3, r2
 8011db0:	3304      	adds	r3, #4
 8011db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dba:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dc2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	dd0e      	ble.n	8011de8 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dce:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011dd2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011dd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dd8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011ddc:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011dde:	1ad3      	subs	r3, r2, r3
 8011de0:	b29b      	uxth	r3, r3
				delta_mm =
 8011de2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011de6:	e00d      	b.n	8011e04 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011de8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dec:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011df0:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011df2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011df6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011dfa:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	b29b      	uxth	r3, r3
				delta_mm =
 8011e00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011e10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011e14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e20:	fb02 f303 	mul.w	r3, r2, r3
 8011e24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e2c:	015b      	lsls	r3, r3, #5
 8011e2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011e32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	dd2f      	ble.n	8011eac <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011e4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e50:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011e54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011e62:	429a      	cmp	r2, r3
 8011e64:	da22      	bge.n	8011eac <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011e6c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d91b      	bls.n	8011eac <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e7a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011e7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d913      	bls.n	8011eac <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011e84:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011e88:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011e8c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011e90:	6812      	ldr	r2, [r2, #0]
 8011e92:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011e94:	4293      	cmp	r3, r2
 8011e96:	da09      	bge.n	8011eac <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011e9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011ea0:	224c      	movs	r2, #76	; 0x4c
 8011ea2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f007 fc82 	bl	80197b0 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011eac:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011eba:	7c9b      	ldrb	r3, [r3, #18]
 8011ebc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	f4ff af6c 	bcc.w	8011d9e <VL53L1_hist_process_data+0x2c2>
 8011ec6:	e000      	b.n	8011eca <VL53L1_hist_process_data+0x3ee>
			continue;
 8011ec8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011eca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011ece:	3301      	adds	r3, #1
 8011ed0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011ed4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011ed8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011edc:	429a      	cmp	r2, r3
 8011ede:	f67f aef0 	bls.w	8011cc2 <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ee6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011ef4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f02 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	60f8      	str	r0, [r7, #12]
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	607a      	str	r2, [r7, #4]
 8011f0e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011f10:	2300      	movs	r3, #0
 8011f12:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d104      	bne.n	8011f26 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f7f9 fb5a 	bl	800b5d6 <VL53L1_disable_firmware>
 8011f22:	4603      	mov	r3, r0
 8011f24:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d104      	bne.n	8011f38 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f7f9 fb82 	bl	800b638 <VL53L1_enable_powerforce>
 8011f34:	4603      	mov	r3, r0
 8011f36:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d105      	bne.n	8011f4c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011f40:	21fa      	movs	r1, #250	; 0xfa
 8011f42:	68f8      	ldr	r0, [r7, #12]
 8011f44:	f002 fdd0 	bl	8014ae8 <VL53L1_WaitUs>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d107      	bne.n	8011f64 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011f54:	2201      	movs	r2, #1
 8011f56:	f240 7181 	movw	r1, #1921	; 0x781
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f002 fcd0 	bl	8014900 <VL53L1_WrByte>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d107      	bne.n	8011f7c <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011f6c:	2205      	movs	r2, #5
 8011f6e:	f240 6183 	movw	r1, #1667	; 0x683
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f002 fcc4 	bl	8014900 <VL53L1_WrByte>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d105      	bne.n	8011f90 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011f84:	6879      	ldr	r1, [r7, #4]
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f002 fdae 	bl	8014ae8 <VL53L1_WaitUs>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d107      	bne.n	8011fa8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011f98:	2201      	movs	r2, #1
 8011f9a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f002 fcae 	bl	8014900 <VL53L1_WrByte>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d108      	bne.n	8011fc2 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011fb0:	897b      	ldrh	r3, [r7, #10]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f240 7184 	movw	r1, #1924	; 0x784
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f002 fccb 	bl	8014954 <VL53L1_WrWord>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3718      	adds	r7, #24
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b086      	sub	sp, #24
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	60f8      	str	r0, [r7, #12]
 8011fd6:	607b      	str	r3, [r7, #4]
 8011fd8:	460b      	mov	r3, r1
 8011fda:	72fb      	strb	r3, [r7, #11]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011fe8:	7afb      	ldrb	r3, [r7, #11]
 8011fea:	75bb      	strb	r3, [r7, #22]
 8011fec:	e041      	b.n	8012072 <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d108      	bne.n	8012008 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011ff6:	7dbb      	ldrb	r3, [r7, #22]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	f240 7194 	movw	r1, #1940	; 0x794
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f002 fc7e 	bl	8014900 <VL53L1_WrByte>
 8012004:	4603      	mov	r3, r0
 8012006:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8012008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d107      	bne.n	8012020 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8012010:	2200      	movs	r2, #0
 8012012:	f240 7183 	movw	r1, #1923	; 0x783
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f002 fc72 	bl	8014900 <VL53L1_WrByte>
 801201c:	4603      	mov	r3, r0
 801201e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8012020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d105      	bne.n	8012034 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8012028:	2105      	movs	r1, #5
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f002 fd5c 	bl	8014ae8 <VL53L1_WaitUs>
 8012030:	4603      	mov	r3, r0
 8012032:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8012034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d107      	bne.n	801204c <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 801203c:	2201      	movs	r2, #1
 801203e:	f240 7183 	movw	r1, #1923	; 0x783
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f002 fc5c 	bl	8014900 <VL53L1_WrByte>
 8012048:	4603      	mov	r3, r0
 801204a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 801204c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d108      	bne.n	8012066 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8012054:	2304      	movs	r3, #4
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f002 fc19 	bl	8014894 <VL53L1_ReadMulti>
 8012062:	4603      	mov	r3, r0
 8012064:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	3304      	adds	r3, #4
 801206a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 801206c:	7dbb      	ldrb	r3, [r7, #22]
 801206e:	3301      	adds	r3, #1
 8012070:	75bb      	strb	r3, [r7, #22]
 8012072:	7dba      	ldrb	r2, [r7, #22]
 8012074:	7af9      	ldrb	r1, [r7, #11]
 8012076:	7abb      	ldrb	r3, [r7, #10]
 8012078:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 801207a:	429a      	cmp	r2, r3
 801207c:	dbb7      	blt.n	8011fee <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 801207e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3718      	adds	r7, #24
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b084      	sub	sp, #16
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012092:	2300      	movs	r3, #0
 8012094:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d107      	bne.n	80120ae <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 801209e:	2201      	movs	r2, #1
 80120a0:	f240 7183 	movw	r1, #1923	; 0x783
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f002 fc2b 	bl	8014900 <VL53L1_WrByte>
 80120aa:	4603      	mov	r3, r0
 80120ac:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80120ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d107      	bne.n	80120c6 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80120b6:	2200      	movs	r2, #0
 80120b8:	f240 7181 	movw	r1, #1921	; 0x781
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f002 fc1f 	bl	8014900 <VL53L1_WrByte>
 80120c2:	4603      	mov	r3, r0
 80120c4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 80120c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d104      	bne.n	80120d8 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7f9 fac4 	bl	800b65c <VL53L1_disable_powerforce>
 80120d4:	4603      	mov	r3, r0
 80120d6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 80120d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d104      	bne.n	80120ea <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7f9 fa66 	bl	800b5b2 <VL53L1_enable_firmware>
 80120e6:	4603      	mov	r3, r0
 80120e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80120ea:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 80120f6:	b480      	push	{r7}
 80120f8:	b087      	sub	sp, #28
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	4603      	mov	r3, r0
 80120fe:	60b9      	str	r1, [r7, #8]
 8012100:	607a      	str	r2, [r7, #4]
 8012102:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012104:	2300      	movs	r3, #0
 8012106:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 801210c:	89fb      	ldrh	r3, [r7, #14]
 801210e:	2b03      	cmp	r3, #3
 8012110:	d802      	bhi.n	8012118 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012112:	f06f 0308 	mvn.w	r3, #8
 8012116:	e018      	b.n	801214a <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8012118:	f44f 7380 	mov.w	r3, #256	; 0x100
 801211c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	3302      	adds	r3, #2
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	b29b      	uxth	r3, r3
 8012126:	8afa      	ldrh	r2, [r7, #22]
 8012128:	1ad3      	subs	r3, r2, r3
 801212a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 801212c:	8afb      	ldrh	r3, [r7, #22]
 801212e:	2bff      	cmp	r3, #255	; 0xff
 8012130:	d901      	bls.n	8012136 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8012132:	2300      	movs	r3, #0
 8012134:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8012136:	8afb      	ldrh	r3, [r7, #22]
 8012138:	b2da      	uxtb	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	78da      	ldrb	r2, [r3, #3]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	705a      	strb	r2, [r3, #1]

	return status;
 8012146:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801214a:	4618      	mov	r0, r3
 801214c:	371c      	adds	r7, #28
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8012156:	b590      	push	{r4, r7, lr}
 8012158:	b087      	sub	sp, #28
 801215a:	af00      	add	r7, sp, #0
 801215c:	4603      	mov	r3, r0
 801215e:	60b9      	str	r1, [r7, #8]
 8012160:	607a      	str	r2, [r7, #4]
 8012162:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012164:	2300      	movs	r3, #0
 8012166:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8012168:	2300      	movs	r3, #0
 801216a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8012170:	89fb      	ldrh	r3, [r7, #14]
 8012172:	2b37      	cmp	r3, #55	; 0x37
 8012174:	d802      	bhi.n	801217c <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012176:	f06f 0308 	mvn.w	r3, #8
 801217a:	e03e      	b.n	80121fa <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801217c:	68b9      	ldr	r1, [r7, #8]
 801217e:	2002      	movs	r0, #2
 8012180:	f7f9 f8fd 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012184:	4603      	mov	r3, r0
 8012186:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	3302      	adds	r3, #2
 8012190:	4619      	mov	r1, r3
 8012192:	2002      	movs	r0, #2
 8012194:	f7f9 f8f3 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012198:	4603      	mov	r3, r0
 801219a:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80121a4:	099b      	lsrs	r3, r3, #6
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2219      	movs	r2, #25
 80121b0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2205      	movs	r2, #5
 80121b6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2205      	movs	r2, #5
 80121bc:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	3304      	adds	r3, #4
 80121c2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80121c4:	2300      	movs	r3, #0
 80121c6:	74fb      	strb	r3, [r7, #19]
 80121c8:	e012      	b.n	80121f0 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80121ca:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 80121cc:	6979      	ldr	r1, [r7, #20]
 80121ce:	2002      	movs	r0, #2
 80121d0:	f7f9 f8d5 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80121d4:	4603      	mov	r3, r0
 80121d6:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	1d23      	adds	r3, r4, #4
 80121dc:	005b      	lsls	r3, r3, #1
 80121de:	4413      	add	r3, r2
 80121e0:	460a      	mov	r2, r1
 80121e2:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	3302      	adds	r3, #2
 80121e8:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80121ea:	7cfb      	ldrb	r3, [r7, #19]
 80121ec:	3301      	adds	r3, #1
 80121ee:	74fb      	strb	r3, [r7, #19]
 80121f0:	7cfb      	ldrb	r3, [r7, #19]
 80121f2:	2b18      	cmp	r3, #24
 80121f4:	d9e9      	bls.n	80121ca <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 80121f6:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	371c      	adds	r7, #28
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd90      	pop	{r4, r7, pc}

08012202 <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b086      	sub	sp, #24
 8012206:	af00      	add	r7, sp, #0
 8012208:	4603      	mov	r3, r0
 801220a:	60b9      	str	r1, [r7, #8]
 801220c:	607a      	str	r2, [r7, #4]
 801220e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012210:	2300      	movs	r3, #0
 8012212:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8012214:	89fb      	ldrh	r3, [r7, #14]
 8012216:	2b07      	cmp	r3, #7
 8012218:	d802      	bhi.n	8012220 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801221a:	f06f 0308 	mvn.w	r3, #8
 801221e:	e027      	b.n	8012270 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012220:	68b9      	ldr	r1, [r7, #8]
 8012222:	2002      	movs	r0, #2
 8012224:	f7f9 f8ab 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012228:	4603      	mov	r3, r0
 801222a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	3302      	adds	r3, #2
 8012234:	4619      	mov	r1, r3
 8012236:	2002      	movs	r0, #2
 8012238:	f7f9 f8a1 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801223c:	4603      	mov	r3, r0
 801223e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	3304      	adds	r3, #4
 8012248:	4619      	mov	r1, r3
 801224a:	2002      	movs	r0, #2
 801224c:	f7f9 f897 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012250:	4603      	mov	r3, r0
 8012252:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	3306      	adds	r3, #6
 801225c:	4619      	mov	r1, r3
 801225e:	2002      	movs	r0, #2
 8012260:	f7f9 f88d 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012264:	4603      	mov	r3, r0
 8012266:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	80da      	strh	r2, [r3, #6]

	return status;
 801226c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3718      	adds	r7, #24
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b086      	sub	sp, #24
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
 8012284:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012286:	2300      	movs	r3, #0
 8012288:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 801228a:	89fb      	ldrh	r3, [r7, #14]
 801228c:	2b0f      	cmp	r3, #15
 801228e:	d802      	bhi.n	8012296 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012290:	f06f 0308 	mvn.w	r3, #8
 8012294:	e04d      	b.n	8012332 <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012296:	68b9      	ldr	r1, [r7, #8]
 8012298:	2002      	movs	r0, #2
 801229a:	f7f9 f870 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801229e:	4603      	mov	r3, r0
 80122a0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	789a      	ldrb	r2, [r3, #2]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	78da      	ldrb	r2, [r3, #3]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	3304      	adds	r3, #4
 80122ba:	4619      	mov	r1, r3
 80122bc:	2002      	movs	r0, #2
 80122be:	f7f9 f85e 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80122c2:	4603      	mov	r3, r0
 80122c4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	3306      	adds	r3, #6
 80122ce:	4619      	mov	r1, r3
 80122d0:	2002      	movs	r0, #2
 80122d2:	f7f9 f854 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80122d6:	4603      	mov	r3, r0
 80122d8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	3308      	adds	r3, #8
 80122e2:	4619      	mov	r1, r3
 80122e4:	2002      	movs	r0, #2
 80122e6:	f7f9 f84a 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80122ea:	4603      	mov	r3, r0
 80122ec:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	330a      	adds	r3, #10
 80122f6:	4619      	mov	r1, r3
 80122f8:	2002      	movs	r0, #2
 80122fa:	f7f9 f840 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80122fe:	4603      	mov	r3, r0
 8012300:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	330c      	adds	r3, #12
 801230a:	4619      	mov	r1, r3
 801230c:	2002      	movs	r0, #2
 801230e:	f7f9 f836 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012312:	4603      	mov	r3, r0
 8012314:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	330e      	adds	r3, #14
 801231e:	4619      	mov	r1, r3
 8012320:	2002      	movs	r0, #2
 8012322:	f7f9 f82c 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012326:	4603      	mov	r3, r0
 8012328:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	81da      	strh	r2, [r3, #14]

	return status;
 801232e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3718      	adds	r7, #24
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b086      	sub	sp, #24
 801233e:	af00      	add	r7, sp, #0
 8012340:	60f8      	str	r0, [r7, #12]
 8012342:	607b      	str	r3, [r7, #4]
 8012344:	460b      	mov	r3, r1
 8012346:	72fb      	strb	r3, [r7, #11]
 8012348:	4613      	mov	r3, r2
 801234a:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801234c:	2300      	movs	r3, #0
 801234e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8012350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d106      	bne.n	8012366 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8012358:	2232      	movs	r2, #50	; 0x32
 801235a:	2104      	movs	r1, #4
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f7ff fdd0 	bl	8011f02 <VL53L1_nvm_enable>
 8012362:	4603      	mov	r3, r0
 8012364:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8012366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d107      	bne.n	801237e <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 801236e:	7aba      	ldrb	r2, [r7, #10]
 8012370:	7af9      	ldrb	r1, [r7, #11]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7ff fe2a 	bl	8011fce <VL53L1_nvm_read>
 801237a:	4603      	mov	r3, r0
 801237c:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 801237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d104      	bne.n	8012390 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f7ff fe7f 	bl	801208a <VL53L1_nvm_disable>
 801238c:	4603      	mov	r3, r0
 801238e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8012390:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012394:	4618      	mov	r0, r3
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80123aa:	f107 0308 	add.w	r3, r7, #8
 80123ae:	2201      	movs	r2, #1
 80123b0:	212e      	movs	r1, #46	; 0x2e
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff ffc1 	bl	801233a <VL53L1_read_nvm_raw_data>
 80123b8:	4603      	mov	r3, r0
 80123ba:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80123bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d108      	bne.n	80123d6 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80123c4:	f107 0308 	add.w	r3, r7, #8
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	4619      	mov	r1, r3
 80123cc:	2004      	movs	r0, #4
 80123ce:	f7ff fe92 	bl	80120f6 <VL53L1_nvm_decode_optical_centre>
 80123d2:	4603      	mov	r3, r0
 80123d4:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80123d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b092      	sub	sp, #72	; 0x48
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80123f2:	f107 030c 	add.w	r3, r7, #12
 80123f6:	220e      	movs	r2, #14
 80123f8:	2157      	movs	r1, #87	; 0x57
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ff ff9d 	bl	801233a <VL53L1_read_nvm_raw_data>
 8012400:	4603      	mov	r3, r0
 8012402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012406:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801240a:	2b00      	cmp	r3, #0
 801240c:	d109      	bne.n	8012422 <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 801240e:	f107 030c 	add.w	r3, r7, #12
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	4619      	mov	r1, r3
 8012416:	2038      	movs	r0, #56	; 0x38
 8012418:	f7ff fe9d 	bl	8012156 <VL53L1_nvm_decode_cal_peak_rate_map>
 801241c:	4603      	mov	r3, r0
 801241e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012422:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012426:	4618      	mov	r0, r3
 8012428:	3748      	adds	r7, #72	; 0x48
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b086      	sub	sp, #24
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
 8012436:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012438:	2300      	movs	r3, #0
 801243a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801243c:	f107 030c 	add.w	r3, r7, #12
 8012440:	2202      	movs	r2, #2
 8012442:	2165      	movs	r1, #101	; 0x65
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff ff78 	bl	801233a <VL53L1_read_nvm_raw_data>
 801244a:	4603      	mov	r3, r0
 801244c:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801244e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d108      	bne.n	8012468 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8012456:	f107 030c 	add.w	r3, r7, #12
 801245a:	683a      	ldr	r2, [r7, #0]
 801245c:	4619      	mov	r1, r3
 801245e:	2008      	movs	r0, #8
 8012460:	f7ff fecf 	bl	8012202 <VL53L1_nvm_decode_additional_offset_cal_data>
 8012464:	4603      	mov	r3, r0
 8012466:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012468:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801246c:	4618      	mov	r0, r3
 801246e:	3718      	adds	r7, #24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b08a      	sub	sp, #40	; 0x28
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	460b      	mov	r3, r1
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012482:	2300      	movs	r3, #0
 8012484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8012488:	897b      	ldrh	r3, [r7, #10]
 801248a:	089b      	lsrs	r3, r3, #2
 801248c:	b29b      	uxth	r3, r3
 801248e:	b2d9      	uxtb	r1, r3
 8012490:	f107 0314 	add.w	r3, r7, #20
 8012494:	2204      	movs	r2, #4
 8012496:	68f8      	ldr	r0, [r7, #12]
 8012498:	f7ff ff4f 	bl	801233a <VL53L1_read_nvm_raw_data>
 801249c:	4603      	mov	r3, r0
 801249e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80124a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d109      	bne.n	80124be <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80124aa:	f107 0314 	add.w	r3, r7, #20
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	4619      	mov	r1, r3
 80124b2:	2010      	movs	r0, #16
 80124b4:	f7ff fee0 	bl	8012278 <VL53L1_nvm_decode_fmt_range_results_data>
 80124b8:	4603      	mov	r3, r0
 80124ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80124be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3728      	adds	r7, #40	; 0x28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b086      	sub	sp, #24
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	460b      	mov	r3, r1
 80124d4:	607a      	str	r2, [r7, #4]
 80124d6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124d8:	2300      	movs	r3, #0
 80124da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80124dc:	897b      	ldrh	r3, [r7, #10]
 80124de:	2b0a      	cmp	r3, #10
 80124e0:	d802      	bhi.n	80124e8 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124e2:	f06f 0309 	mvn.w	r3, #9
 80124e6:	e047      	b.n	8012578 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124f0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80124fe:	f002 020f 	and.w	r2, r2, #15
 8012502:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012504:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801250e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012512:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801251e:	f002 0203 	and.w	r2, r2, #3
 8012522:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801252e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012532:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012534:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	88d8      	ldrh	r0, [r3, #6]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3305      	adds	r3, #5
 801253e:	461a      	mov	r2, r3
 8012540:	2102      	movs	r1, #2
 8012542:	f7f8 fef1 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801254e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012558:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8012562:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012566:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012568:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8012572:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012578:	4618      	mov	r0, r3
 801257a:	3718      	adds	r7, #24
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b086      	sub	sp, #24
 8012584:	af00      	add	r7, sp, #0
 8012586:	4603      	mov	r3, r0
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
 801258c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801258e:	2300      	movs	r3, #0
 8012590:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8012592:	89fb      	ldrh	r3, [r7, #14]
 8012594:	2b0a      	cmp	r3, #10
 8012596:	d802      	bhi.n	801259e <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012598:	f06f 0309 	mvn.w	r3, #9
 801259c:	e046      	b.n	801262c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125a6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	3301      	adds	r3, #1
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	f003 030f 	and.w	r3, r3, #15
 80125b6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	3302      	adds	r3, #2
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	3303      	adds	r3, #3
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	f003 0303 	and.w	r3, r3, #3
 80125d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	3304      	adds	r3, #4
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	3305      	adds	r3, #5
 80125f0:	4619      	mov	r1, r3
 80125f2:	2002      	movs	r0, #2
 80125f4:	f7f8 fec3 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	79da      	ldrb	r2, [r3, #7]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	7a1a      	ldrb	r2, [r3, #8]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	3309      	adds	r3, #9
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801261a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	7a9a      	ldrb	r2, [r3, #10]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801262c:	4618      	mov	r0, r3
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801263e:	2300      	movs	r3, #0
 8012640:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d108      	bne.n	801265c <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801264a:	f107 020c 	add.w	r2, r7, #12
 801264e:	230b      	movs	r3, #11
 8012650:	2101      	movs	r1, #1
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f002 f91e 	bl	8014894 <VL53L1_ReadMulti>
 8012658:	4603      	mov	r3, r0
 801265a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 801265c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d108      	bne.n	8012676 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8012664:	f107 030c 	add.w	r3, r7, #12
 8012668:	683a      	ldr	r2, [r7, #0]
 801266a:	4619      	mov	r1, r3
 801266c:	200b      	movs	r0, #11
 801266e:	f7ff ff87 	bl	8012580 <VL53L1_i2c_decode_static_nvm_managed>
 8012672:	4603      	mov	r3, r0
 8012674:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3718      	adds	r7, #24
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b086      	sub	sp, #24
 8012686:	af00      	add	r7, sp, #0
 8012688:	60f8      	str	r0, [r7, #12]
 801268a:	460b      	mov	r3, r1
 801268c:	607a      	str	r2, [r7, #4]
 801268e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012690:	2300      	movs	r3, #0
 8012692:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8012694:	897b      	ldrh	r3, [r7, #10]
 8012696:	2b16      	cmp	r3, #22
 8012698:	d802      	bhi.n	80126a0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801269a:	f06f 0309 	mvn.w	r3, #9
 801269e:	e076      	b.n	801278e <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80126ac:	68fa      	ldr	r2, [r7, #12]
 80126ae:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80126b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80126b6:	68fa      	ldr	r2, [r7, #12]
 80126b8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80126ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80126c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80126ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80126d8:	f002 020f 	and.w	r2, r2, #15
 80126dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80126de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80126e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80126f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80126f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80126f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8012702:	f002 0203 	and.w	r2, r2, #3
 8012706:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012708:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	8958      	ldrh	r0, [r3, #10]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	3309      	adds	r3, #9
 8012712:	461a      	mov	r2, r3
 8012714:	2102      	movs	r1, #2
 8012716:	f7f8 fe07 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	330b      	adds	r3, #11
 8012724:	461a      	mov	r2, r3
 8012726:	2102      	movs	r1, #2
 8012728:	f7f8 fe49 	bl	800b3be <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	330d      	adds	r3, #13
 8012736:	461a      	mov	r2, r3
 8012738:	2102      	movs	r1, #2
 801273a:	f7f8 fe40 	bl	800b3be <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	8a18      	ldrh	r0, [r3, #16]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	330f      	adds	r3, #15
 8012746:	461a      	mov	r2, r3
 8012748:	2102      	movs	r1, #2
 801274a:	f7f8 fded 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8012754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012758:	b218      	sxth	r0, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	3311      	adds	r3, #17
 801275e:	461a      	mov	r2, r3
 8012760:	2102      	movs	r1, #2
 8012762:	f7f8 fe2c 	bl	800b3be <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3313      	adds	r3, #19
 8012770:	461a      	mov	r2, r3
 8012772:	2102      	movs	r1, #2
 8012774:	f7f8 fe23 	bl	800b3be <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	3315      	adds	r3, #21
 8012782:	461a      	mov	r2, r3
 8012784:	2102      	movs	r1, #2
 8012786:	f7f8 fe1a 	bl	800b3be <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 801278a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b086      	sub	sp, #24
 801279a:	af00      	add	r7, sp, #0
 801279c:	4603      	mov	r3, r0
 801279e:	60b9      	str	r1, [r7, #8]
 80127a0:	607a      	str	r2, [r7, #4]
 80127a2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127a4:	2300      	movs	r3, #0
 80127a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80127a8:	89fb      	ldrh	r3, [r7, #14]
 80127aa:	2b16      	cmp	r3, #22
 80127ac:	d802      	bhi.n	80127b4 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127ae:	f06f 0309 	mvn.w	r3, #9
 80127b2:	e079      	b.n	80128a8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	785a      	ldrb	r2, [r3, #1]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	789a      	ldrb	r2, [r3, #2]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	78da      	ldrb	r2, [r3, #3]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	791a      	ldrb	r2, [r3, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	3305      	adds	r3, #5
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f003 030f 	and.w	r3, r3, #15
 80127e6:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	799a      	ldrb	r2, [r3, #6]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	3307      	adds	r3, #7
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127fe:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	3308      	adds	r3, #8
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	f003 0303 	and.w	r3, r3, #3
 801280e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	3309      	adds	r3, #9
 8012818:	4619      	mov	r1, r3
 801281a:	2002      	movs	r0, #2
 801281c:	f7f8 fdaf 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012820:	4603      	mov	r3, r0
 8012822:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	330b      	adds	r3, #11
 801282c:	4619      	mov	r1, r3
 801282e:	2002      	movs	r0, #2
 8012830:	f7f8 fdf1 	bl	800b416 <VL53L1_i2c_decode_int16_t>
 8012834:	4603      	mov	r3, r0
 8012836:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	330d      	adds	r3, #13
 8012840:	4619      	mov	r1, r3
 8012842:	2002      	movs	r0, #2
 8012844:	f7f8 fde7 	bl	800b416 <VL53L1_i2c_decode_int16_t>
 8012848:	4603      	mov	r3, r0
 801284a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	330f      	adds	r3, #15
 8012854:	4619      	mov	r1, r3
 8012856:	2002      	movs	r0, #2
 8012858:	f7f8 fd91 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801285c:	4603      	mov	r3, r0
 801285e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	3311      	adds	r3, #17
 8012868:	4619      	mov	r1, r3
 801286a:	2002      	movs	r0, #2
 801286c:	f7f8 fdd3 	bl	800b416 <VL53L1_i2c_decode_int16_t>
 8012870:	4603      	mov	r3, r0
 8012872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012876:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	3313      	adds	r3, #19
 8012880:	4619      	mov	r1, r3
 8012882:	2002      	movs	r0, #2
 8012884:	f7f8 fdc7 	bl	800b416 <VL53L1_i2c_decode_int16_t>
 8012888:	4603      	mov	r3, r0
 801288a:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	3315      	adds	r3, #21
 8012894:	4619      	mov	r1, r3
 8012896:	2002      	movs	r0, #2
 8012898:	f7f8 fdbd 	bl	800b416 <VL53L1_i2c_decode_int16_t>
 801289c:	4603      	mov	r3, r0
 801289e:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80128a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3718      	adds	r7, #24
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b088      	sub	sp, #32
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80128ba:	2300      	movs	r3, #0
 80128bc:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80128be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d108      	bne.n	80128d8 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80128c6:	f107 0208 	add.w	r2, r7, #8
 80128ca:	2317      	movs	r3, #23
 80128cc:	210d      	movs	r1, #13
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f001 ffe0 	bl	8014894 <VL53L1_ReadMulti>
 80128d4:	4603      	mov	r3, r0
 80128d6:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80128d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d108      	bne.n	80128f2 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80128e0:	f107 0308 	add.w	r3, r7, #8
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	4619      	mov	r1, r3
 80128e8:	2017      	movs	r0, #23
 80128ea:	f7ff ff54 	bl	8012796 <VL53L1_i2c_decode_customer_nvm_managed>
 80128ee:	4603      	mov	r3, r0
 80128f0:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80128f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3720      	adds	r7, #32
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	b086      	sub	sp, #24
 8012902:	af00      	add	r7, sp, #0
 8012904:	60f8      	str	r0, [r7, #12]
 8012906:	460b      	mov	r3, r1
 8012908:	607a      	str	r2, [r7, #4]
 801290a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801290c:	2300      	movs	r3, #0
 801290e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8012910:	897b      	ldrh	r3, [r7, #10]
 8012912:	2b1f      	cmp	r3, #31
 8012914:	d802      	bhi.n	801291c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012916:	f06f 0309 	mvn.w	r3, #9
 801291a:	e0cf      	b.n	8012abc <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	2102      	movs	r1, #2
 8012924:	4618      	mov	r0, r3
 8012926:	f7f8 fcff 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8012932:	f002 0201 	and.w	r2, r2, #1
 8012936:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012938:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8012942:	f002 020f 	and.w	r2, r2, #15
 8012946:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012948:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8012952:	f002 020f 	and.w	r2, r2, #15
 8012956:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012958:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8012962:	f002 021f 	and.w	r2, r2, #31
 8012966:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012968:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012972:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012976:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012978:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8012982:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012986:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012988:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8012992:	f002 0201 	and.w	r2, r2, #1
 8012996:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012998:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 801299e:	68fa      	ldr	r2, [r7, #12]
 80129a0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80129a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80129ac:	f002 0201 	and.w	r2, r2, #1
 80129b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80129b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80129bc:	f002 0203 	and.w	r2, r2, #3
 80129c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80129c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80129cc:	f002 021f 	and.w	r2, r2, #31
 80129d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80129d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80129dc:	f002 0203 	and.w	r2, r2, #3
 80129e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80129e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80129ec:	f002 0203 	and.w	r2, r2, #3
 80129f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80129f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80129fc:	f002 0207 	and.w	r2, r2, #7
 8012a00:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8012a02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012a0c:	f002 021f 	and.w	r2, r2, #31
 8012a10:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8012a12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012a1c:	f002 0201 	and.w	r2, r2, #1
 8012a20:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012a22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012a2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012a36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012a40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012a4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8012a54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8012a5e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	8b18      	ldrh	r0, [r3, #24]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3318      	adds	r3, #24
 8012a68:	461a      	mov	r2, r3
 8012a6a:	2102      	movs	r1, #2
 8012a6c:	f7f8 fc5c 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012a78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8012a82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8012a8c:	f002 020f 	and.w	r2, r2, #15
 8012a90:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8012a92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8012a98:	68fa      	ldr	r2, [r7, #12]
 8012a9a:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8012a9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8012aa6:	f002 020f 	and.w	r2, r2, #15
 8012aaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8012aac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8012ab6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3718      	adds	r7, #24
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	460b      	mov	r3, r1
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8012ad6:	897b      	ldrh	r3, [r7, #10]
 8012ad8:	2b15      	cmp	r3, #21
 8012ada:	d802      	bhi.n	8012ae2 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012adc:	f06f 0309 	mvn.w	r3, #9
 8012ae0:	e070      	b.n	8012bc4 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012af2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012afc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012b06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b0a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012b0c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8012b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b16:	b298      	uxth	r0, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	3304      	adds	r3, #4
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	2102      	movs	r1, #2
 8012b20:	f7f8 fc02 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012b2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012b32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012b3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012b46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8012b50:	f002 0201 	and.w	r2, r2, #1
 8012b54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012b56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8012b60:	f002 0207 	and.w	r2, r2, #7
 8012b64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012b66:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	8998      	ldrh	r0, [r3, #12]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	330c      	adds	r3, #12
 8012b70:	461a      	mov	r2, r3
 8012b72:	2102      	movs	r1, #2
 8012b74:	f7f8 fbd8 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	89d8      	ldrh	r0, [r3, #14]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	330e      	adds	r3, #14
 8012b80:	461a      	mov	r2, r3
 8012b82:	2102      	movs	r1, #2
 8012b84:	f7f8 fbd0 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	8a18      	ldrh	r0, [r3, #16]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	3310      	adds	r3, #16
 8012b90:	461a      	mov	r2, r3
 8012b92:	2102      	movs	r1, #2
 8012b94:	f7f8 fbc8 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012ba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8012ba6:	68fa      	ldr	r2, [r7, #12]
 8012ba8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012baa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012bb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8012bba:	68fa      	ldr	r2, [r7, #12]
 8012bbc:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012bbe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3718      	adds	r7, #24
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b086      	sub	sp, #24
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	607a      	str	r2, [r7, #4]
 8012bd8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8012bde:	897b      	ldrh	r3, [r7, #10]
 8012be0:	2b16      	cmp	r3, #22
 8012be2:	d802      	bhi.n	8012bea <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012be4:	f06f 0309 	mvn.w	r3, #9
 8012be8:	e06e      	b.n	8012cc8 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	f003 030f 	and.w	r3, r3, #15
 8012bf2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012bfc:	68fa      	ldr	r2, [r7, #12]
 8012bfe:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012c00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012c0a:	f002 020f 	and.w	r2, r2, #15
 8012c0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012c10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012c1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012c24:	f002 020f 	and.w	r2, r2, #15
 8012c28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012c2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012c30:	68fa      	ldr	r2, [r7, #12]
 8012c32:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012c34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012c3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012c42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012c44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012c4e:	f002 020f 	and.w	r2, r2, #15
 8012c52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012c54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012c5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012c68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012c6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012c6e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	8958      	ldrh	r0, [r3, #10]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	330a      	adds	r3, #10
 8012c78:	461a      	mov	r2, r3
 8012c7a:	2102      	movs	r1, #2
 8012c7c:	f7f8 fb54 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	8998      	ldrh	r0, [r3, #12]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	330c      	adds	r3, #12
 8012c88:	461a      	mov	r2, r3
 8012c8a:	2102      	movs	r1, #2
 8012c8c:	f7f8 fb4c 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012c98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012ca2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	6918      	ldr	r0, [r3, #16]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	3312      	adds	r3, #18
 8012cac:	461a      	mov	r2, r3
 8012cae:	2104      	movs	r1, #4
 8012cb0:	f7f8 fbda 	bl	800b468 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012cbc:	f002 0201 	and.w	r2, r2, #1
 8012cc0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012cc2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3718      	adds	r7, #24
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	607a      	str	r2, [r7, #4]
 8012cdc:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8012ce2:	897b      	ldrh	r3, [r7, #10]
 8012ce4:	2b11      	cmp	r3, #17
 8012ce6:	d802      	bhi.n	8012cee <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012ce8:	f06f 0309 	mvn.w	r3, #9
 8012cec:	e071      	b.n	8012dd2 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	f003 0303 	and.w	r3, r3, #3
 8012cf6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	8858      	ldrh	r0, [r3, #2]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3301      	adds	r3, #1
 8012d04:	461a      	mov	r2, r3
 8012d06:	2102      	movs	r1, #2
 8012d08:	f7f8 fb0e 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	8898      	ldrh	r0, [r3, #4]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	3303      	adds	r3, #3
 8012d14:	461a      	mov	r2, r3
 8012d16:	2102      	movs	r1, #2
 8012d18:	f7f8 fb06 	bl	800b328 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012d24:	f002 0201 	and.w	r2, r2, #1
 8012d28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012d2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012d34:	f002 0207 	and.w	r2, r2, #7
 8012d38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012d3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012d40:	68fa      	ldr	r2, [r7, #12]
 8012d42:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012d44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012d4a:	68fa      	ldr	r2, [r7, #12]
 8012d4c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012d4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012d58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012d5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012d5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012d6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012d6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012d78:	f002 0203 	and.w	r2, r2, #3
 8012d7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012d7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012d88:	f002 0203 	and.w	r2, r2, #3
 8012d8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012d8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012d98:	f002 020f 	and.w	r2, r2, #15
 8012d9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012da8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012db2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012db8:	68fa      	ldr	r2, [r7, #12]
 8012dba:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012dbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012dc6:	f002 0203 	and.w	r2, r2, #3
 8012dca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012dcc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3718      	adds	r7, #24
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012dda:	b480      	push	{r7}
 8012ddc:	b087      	sub	sp, #28
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	60f8      	str	r0, [r7, #12]
 8012de2:	460b      	mov	r3, r1
 8012de4:	607a      	str	r2, [r7, #4]
 8012de6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012de8:	2300      	movs	r3, #0
 8012dea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012dec:	897b      	ldrh	r3, [r7, #10]
 8012dee:	2b04      	cmp	r3, #4
 8012df0:	d802      	bhi.n	8012df8 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012df2:	f06f 0309 	mvn.w	r3, #9
 8012df6:	e025      	b.n	8012e44 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 0301 	and.w	r3, r3, #1
 8012e00:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012e0e:	f002 0201 	and.w	r2, r2, #1
 8012e12:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012e14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012e1e:	f002 0201 	and.w	r2, r2, #1
 8012e22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012e24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012e2e:	f002 0203 	and.w	r2, r2, #3
 8012e32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012e34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012e3a:	68fa      	ldr	r2, [r7, #12]
 8012e3c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012e3e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	371c      	adds	r7, #28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d108      	bne.n	8012e78 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012e66:	f107 0308 	add.w	r3, r7, #8
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	2105      	movs	r1, #5
 8012e6e:	6838      	ldr	r0, [r7, #0]
 8012e70:	f7ff ffb3 	bl	8012dda <VL53L1_i2c_encode_system_control>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d108      	bne.n	8012e92 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012e80:	f107 0208 	add.w	r2, r7, #8
 8012e84:	2305      	movs	r3, #5
 8012e86:	2183      	movs	r1, #131	; 0x83
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f001 fccd 	bl	8014828 <VL53L1_WriteMulti>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b086      	sub	sp, #24
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
 8012eaa:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012eac:	2300      	movs	r3, #0
 8012eae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012eb0:	89fb      	ldrh	r3, [r7, #14]
 8012eb2:	2b2b      	cmp	r3, #43	; 0x2b
 8012eb4:	d802      	bhi.n	8012ebc <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012eb6:	f06f 0309 	mvn.w	r3, #9
 8012eba:	e0e2      	b.n	8013082 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ec4:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	785a      	ldrb	r2, [r3, #1]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	3302      	adds	r3, #2
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	f003 030f 	and.w	r3, r3, #15
 8012edc:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	78da      	ldrb	r2, [r3, #3]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3304      	adds	r3, #4
 8012eee:	4619      	mov	r1, r3
 8012ef0:	2002      	movs	r0, #2
 8012ef2:	f7f8 fa44 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	3306      	adds	r3, #6
 8012f02:	4619      	mov	r1, r3
 8012f04:	2002      	movs	r0, #2
 8012f06:	f7f8 fa3a 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	3308      	adds	r3, #8
 8012f16:	4619      	mov	r1, r3
 8012f18:	2002      	movs	r0, #2
 8012f1a:	f7f8 fa30 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	330a      	adds	r3, #10
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	2002      	movs	r0, #2
 8012f2e:	f7f8 fa26 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f32:	4603      	mov	r3, r0
 8012f34:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	330c      	adds	r3, #12
 8012f3e:	4619      	mov	r1, r3
 8012f40:	2002      	movs	r0, #2
 8012f42:	f7f8 fa1c 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f46:	4603      	mov	r3, r0
 8012f48:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	330e      	adds	r3, #14
 8012f52:	4619      	mov	r1, r3
 8012f54:	2002      	movs	r0, #2
 8012f56:	f7f8 fa12 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	3310      	adds	r3, #16
 8012f66:	4619      	mov	r1, r3
 8012f68:	2002      	movs	r0, #2
 8012f6a:	f7f8 fa08 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	3312      	adds	r3, #18
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	2002      	movs	r0, #2
 8012f7e:	f7f8 f9fe 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f82:	4603      	mov	r3, r0
 8012f84:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	3314      	adds	r3, #20
 8012f8e:	4619      	mov	r1, r3
 8012f90:	2002      	movs	r0, #2
 8012f92:	f7f8 f9f4 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012f96:	4603      	mov	r3, r0
 8012f98:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	3316      	adds	r3, #22
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	2002      	movs	r0, #2
 8012fa6:	f7f8 f9ea 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012faa:	4603      	mov	r3, r0
 8012fac:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	3318      	adds	r3, #24
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	2002      	movs	r0, #2
 8012fba:	f7f8 f9e0 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	331a      	adds	r3, #26
 8012fca:	4619      	mov	r1, r3
 8012fcc:	2002      	movs	r0, #2
 8012fce:	f7f8 f9d6 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	331c      	adds	r3, #28
 8012fde:	4619      	mov	r1, r3
 8012fe0:	2002      	movs	r0, #2
 8012fe2:	f7f8 f9cc 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	331e      	adds	r3, #30
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	2002      	movs	r0, #2
 8012ff6:	f7f8 f9c2 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3320      	adds	r3, #32
 8013006:	4619      	mov	r1, r3
 8013008:	2002      	movs	r0, #2
 801300a:	f7f8 f9b8 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801300e:	4603      	mov	r3, r0
 8013010:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	3322      	adds	r3, #34	; 0x22
 801301a:	4619      	mov	r1, r3
 801301c:	2002      	movs	r0, #2
 801301e:	f7f8 f9ae 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8013022:	4603      	mov	r3, r0
 8013024:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	3324      	adds	r3, #36	; 0x24
 801302e:	4619      	mov	r1, r3
 8013030:	2002      	movs	r0, #2
 8013032:	f7f8 f9a4 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8013036:	4603      	mov	r3, r0
 8013038:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	3326      	adds	r3, #38	; 0x26
 8013042:	4619      	mov	r1, r3
 8013044:	2002      	movs	r0, #2
 8013046:	f7f8 f99a 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801304a:	4603      	mov	r3, r0
 801304c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	3328      	adds	r3, #40	; 0x28
 8013056:	4619      	mov	r1, r3
 8013058:	2002      	movs	r0, #2
 801305a:	f7f8 f990 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801307e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3718      	adds	r7, #24
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 801308a:	b580      	push	{r7, lr}
 801308c:	b086      	sub	sp, #24
 801308e:	af00      	add	r7, sp, #0
 8013090:	4603      	mov	r3, r0
 8013092:	60b9      	str	r1, [r7, #8]
 8013094:	607a      	str	r2, [r7, #4]
 8013096:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013098:	2300      	movs	r3, #0
 801309a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 801309c:	89fb      	ldrh	r3, [r7, #14]
 801309e:	2b20      	cmp	r3, #32
 80130a0:	d802      	bhi.n	80130a8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80130a2:	f06f 0309 	mvn.w	r3, #9
 80130a6:	e04d      	b.n	8013144 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80130a8:	68b9      	ldr	r1, [r7, #8]
 80130aa:	2004      	movs	r0, #4
 80130ac:	f7f8 fa06 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80130b0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	3304      	adds	r3, #4
 80130ba:	4619      	mov	r1, r3
 80130bc:	2004      	movs	r0, #4
 80130be:	f7f8 f9fd 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80130c2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	3308      	adds	r3, #8
 80130cc:	4619      	mov	r1, r3
 80130ce:	2004      	movs	r0, #4
 80130d0:	f7f8 fa11 	bl	800b4f6 <VL53L1_i2c_decode_int32_t>
 80130d4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	330c      	adds	r3, #12
 80130de:	4619      	mov	r1, r3
 80130e0:	2004      	movs	r0, #4
 80130e2:	f7f8 f9eb 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80130e6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	3310      	adds	r3, #16
 80130f0:	4619      	mov	r1, r3
 80130f2:	2004      	movs	r0, #4
 80130f4:	f7f8 f9e2 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80130f8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	3314      	adds	r3, #20
 8013102:	4619      	mov	r1, r3
 8013104:	2004      	movs	r0, #4
 8013106:	f7f8 f9d9 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 801310a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	3318      	adds	r3, #24
 8013114:	4619      	mov	r1, r3
 8013116:	2004      	movs	r0, #4
 8013118:	f7f8 f9ed 	bl	800b4f6 <VL53L1_i2c_decode_int32_t>
 801311c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	331c      	adds	r3, #28
 8013126:	4619      	mov	r1, r3
 8013128:	2004      	movs	r0, #4
 801312a:	f7f8 f9c7 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 801312e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	f893 2020 	ldrb.w	r2, [r3, #32]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8013140:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013144:	4618      	mov	r0, r3
 8013146:	3718      	adds	r7, #24
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	4603      	mov	r3, r0
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	607a      	str	r2, [r7, #4]
 8013158:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801315a:	2300      	movs	r3, #0
 801315c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 801315e:	89fb      	ldrh	r3, [r7, #14]
 8013160:	2b37      	cmp	r3, #55	; 0x37
 8013162:	d802      	bhi.n	801316a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013164:	f06f 0309 	mvn.w	r3, #9
 8013168:	e15e      	b.n	8013428 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801316a:	68b9      	ldr	r1, [r7, #8]
 801316c:	2002      	movs	r0, #2
 801316e:	f7f8 f906 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	3302      	adds	r3, #2
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013184:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	3303      	adds	r3, #3
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013194:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	3304      	adds	r3, #4
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	f003 0303 	and.w	r3, r3, #3
 80131a4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	3305      	adds	r3, #5
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	f003 0301 	and.w	r3, r3, #1
 80131b4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	3306      	adds	r3, #6
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131c4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	3307      	adds	r3, #7
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131d4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	3308      	adds	r3, #8
 80131de:	4619      	mov	r1, r3
 80131e0:	2002      	movs	r0, #2
 80131e2:	f7f8 f8cc 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 80131e6:	4603      	mov	r3, r0
 80131e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80131ec:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	330a      	adds	r3, #10
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	f003 0303 	and.w	r3, r3, #3
 80131fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	330b      	adds	r3, #11
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	f003 0303 	and.w	r3, r3, #3
 801320c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	330c      	adds	r3, #12
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 030f 	and.w	r3, r3, #15
 801321c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	330d      	adds	r3, #13
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	330e      	adds	r3, #14
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	f003 0301 	and.w	r3, r3, #1
 801323c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	330f      	adds	r3, #15
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	f003 0303 	and.w	r3, r3, #3
 801324c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	7c1a      	ldrb	r2, [r3, #16]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	7c5a      	ldrb	r2, [r3, #17]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	3312      	adds	r3, #18
 8013266:	4619      	mov	r1, r3
 8013268:	2002      	movs	r0, #2
 801326a:	f7f8 f888 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801326e:	4603      	mov	r3, r0
 8013270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013274:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	3316      	adds	r3, #22
 801327e:	4619      	mov	r1, r3
 8013280:	2002      	movs	r0, #2
 8013282:	f7f8 f87c 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8013286:	4603      	mov	r3, r0
 8013288:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	3318      	adds	r3, #24
 8013292:	4619      	mov	r1, r3
 8013294:	2002      	movs	r0, #2
 8013296:	f7f8 f872 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 801329a:	4603      	mov	r3, r0
 801329c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	331a      	adds	r3, #26
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	331b      	adds	r3, #27
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	f003 0307 	and.w	r3, r3, #7
 80132bc:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	7f1a      	ldrb	r2, [r3, #28]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	7f5a      	ldrb	r2, [r3, #29]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	331e      	adds	r3, #30
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132dc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	331f      	adds	r3, #31
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132ec:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	3320      	adds	r3, #32
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	f003 0303 	and.w	r3, r3, #3
 80132fc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	3321      	adds	r3, #33	; 0x21
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 030f 	and.w	r3, r3, #15
 801330c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	3325      	adds	r3, #37	; 0x25
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	f003 0301 	and.w	r3, r3, #1
 8013340:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	3326      	adds	r3, #38	; 0x26
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	f003 0303 	and.w	r3, r3, #3
 8013352:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	3327      	adds	r3, #39	; 0x27
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	f003 031f 	and.w	r3, r3, #31
 8013364:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	3328      	adds	r3, #40	; 0x28
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	f003 031f 	and.w	r3, r3, #31
 8013376:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	3329      	adds	r3, #41	; 0x29
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	f003 031f 	and.w	r3, r3, #31
 8013388:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	332a      	adds	r3, #42	; 0x2a
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	f003 0301 	and.w	r3, r3, #1
 801339a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	332b      	adds	r3, #43	; 0x2b
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	f003 0301 	and.w	r3, r3, #1
 80133ac:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	332c      	adds	r3, #44	; 0x2c
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	f003 0303 	and.w	r3, r3, #3
 80133be:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	332d      	adds	r3, #45	; 0x2d
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133d0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	332e      	adds	r3, #46	; 0x2e
 80133dc:	4619      	mov	r1, r3
 80133de:	2004      	movs	r0, #4
 80133e0:	f7f8 f86c 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80133e4:	4603      	mov	r3, r0
 80133e6:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	3332      	adds	r3, #50	; 0x32
 80133f2:	4619      	mov	r1, r3
 80133f4:	2004      	movs	r0, #4
 80133f6:	f7f8 f861 	bl	800b4bc <VL53L1_i2c_decode_uint32_t>
 80133fa:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	3336      	adds	r3, #54	; 0x36
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	3337      	adds	r3, #55	; 0x37
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	f003 0301 	and.w	r3, r3, #1
 801341c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8013424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3718      	adds	r7, #24
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	4603      	mov	r3, r0
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	607a      	str	r2, [r7, #4]
 801343c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801343e:	2300      	movs	r3, #0
 8013440:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8013442:	89fb      	ldrh	r3, [r7, #14]
 8013444:	2b30      	cmp	r3, #48	; 0x30
 8013446:	d802      	bhi.n	801344e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013448:	f06f 0309 	mvn.w	r3, #9
 801344c:	e112      	b.n	8013674 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	785a      	ldrb	r2, [r3, #1]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	789a      	ldrb	r2, [r3, #2]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	3303      	adds	r3, #3
 801346a:	4619      	mov	r1, r3
 801346c:	2002      	movs	r0, #2
 801346e:	f7f7 ff86 	bl	800b37e <VL53L1_i2c_decode_uint16_t>
 8013472:	4603      	mov	r3, r0
 8013474:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	3305      	adds	r3, #5
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013484:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	3306      	adds	r3, #6
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	f003 0307 	and.w	r3, r3, #7
 8013494:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	3307      	adds	r3, #7
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	f003 0307 	and.w	r3, r3, #7
 80134a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	3308      	adds	r3, #8
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	3309      	adds	r3, #9
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	330a      	adds	r3, #10
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	330b      	adds	r3, #11
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134e4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	330c      	adds	r3, #12
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	f003 0301 	and.w	r3, r3, #1
 80134f4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	330d      	adds	r3, #13
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013504:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	330e      	adds	r3, #14
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013514:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	7bda      	ldrb	r2, [r3, #15]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	7c1a      	ldrb	r2, [r3, #16]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	7c5a      	ldrb	r2, [r3, #17]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	7c9a      	ldrb	r2, [r3, #18]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	7cda      	ldrb	r2, [r3, #19]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	7d1a      	ldrb	r2, [r3, #20]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	7d5a      	ldrb	r2, [r3, #21]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	7d9a      	ldrb	r2, [r3, #22]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	7dda      	ldrb	r2, [r3, #23]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	7e1a      	ldrb	r2, [r3, #24]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	7e5a      	ldrb	r2, [r3, #25]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	7e9a      	ldrb	r2, [r3, #26]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	7eda      	ldrb	r2, [r3, #27]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	7f1a      	ldrb	r2, [r3, #28]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	7f5a      	ldrb	r2, [r3, #29]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	7f9a      	ldrb	r2, [r3, #30]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	7fda      	ldrb	r2, [r3, #31]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8013670:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013674:	4618      	mov	r0, r3
 8013676:	3718      	adds	r7, #24
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b090      	sub	sp, #64	; 0x40
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013686:	2300      	movs	r3, #0
 8013688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801368c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013690:	2b00      	cmp	r3, #0
 8013692:	d10a      	bne.n	80136aa <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8013694:	f107 020c 	add.w	r2, r7, #12
 8013698:	2331      	movs	r3, #49	; 0x31
 801369a:	f240 110f 	movw	r1, #271	; 0x10f
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f001 f8f8 	bl	8014894 <VL53L1_ReadMulti>
 80136a4:	4603      	mov	r3, r0
 80136a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80136aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d109      	bne.n	80136c6 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80136b2:	f107 030c 	add.w	r3, r7, #12
 80136b6:	683a      	ldr	r2, [r7, #0]
 80136b8:	4619      	mov	r1, r3
 80136ba:	2031      	movs	r0, #49	; 0x31
 80136bc:	f7ff feb8 	bl	8013430 <VL53L1_i2c_decode_nvm_copy_data>
 80136c0:	4603      	mov	r3, r0
 80136c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80136c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3740      	adds	r7, #64	; 0x40
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80136d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80136d6:	b0d6      	sub	sp, #344	; 0x158
 80136d8:	af00      	add	r7, sp, #0
 80136da:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80136de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80136e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80136e6:	4603      	mov	r3, r0
 80136e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80136ec:	23f1      	movs	r3, #241	; 0xf1
 80136ee:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 80136f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 80136fa:	2300      	movs	r3, #0
 80136fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8013700:	f04f 0200 	mov.w	r2, #0
 8013704:	f04f 0300 	mov.w	r3, #0
 8013708:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 801370c:	f04f 0200 	mov.w	r2, #0
 8013710:	f04f 0300 	mov.w	r3, #0
 8013714:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013718:	f04f 0200 	mov.w	r2, #0
 801371c:	f04f 0300 	mov.w	r3, #0
 8013720:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8013724:	f04f 0200 	mov.w	r2, #0
 8013728:	f04f 0300 	mov.w	r3, #0
 801372c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8013730:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013738:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801373a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801373e:	2b00      	cmp	r3, #0
 8013740:	f000 8322 	beq.w	8013d88 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8013744:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013748:	4618      	mov	r0, r3
 801374a:	f7fb fa23 	bl	800eb94 <VL53L1_calc_pll_period_mm>
 801374e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 8013752:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8013756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801375a:	429a      	cmp	r2, r3
 801375c:	d91a      	bls.n	8013794 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801375e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8013762:	2200      	movs	r2, #0
 8013764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013768:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 801376c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013770:	2200      	movs	r2, #0
 8013772:	4698      	mov	r8, r3
 8013774:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8013776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801377a:	460b      	mov	r3, r1
 801377c:	ebb3 0308 	subs.w	r3, r3, r8
 8013780:	63bb      	str	r3, [r7, #56]	; 0x38
 8013782:	4613      	mov	r3, r2
 8013784:	eb63 0309 	sbc.w	r3, r3, r9
 8013788:	63fb      	str	r3, [r7, #60]	; 0x3c
 801378a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801378e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8013792:	e013      	b.n	80137bc <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8013794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013798:	2200      	movs	r2, #0
 801379a:	469a      	mov	sl, r3
 801379c:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 801379e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80137a2:	2200      	movs	r2, #0
 80137a4:	461c      	mov	r4, r3
 80137a6:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80137a8:	ebba 0304 	subs.w	r3, sl, r4
 80137ac:	633b      	str	r3, [r7, #48]	; 0x30
 80137ae:	eb6b 0305 	sbc.w	r3, fp, r5
 80137b2:	637b      	str	r3, [r7, #52]	; 0x34
 80137b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80137b8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80137bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80137c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d91f      	bls.n	8013808 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80137c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80137cc:	2200      	movs	r2, #0
 80137ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80137d2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 80137d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80137da:	2200      	movs	r2, #0
 80137dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80137e0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80137e4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80137e8:	4623      	mov	r3, r4
 80137ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80137ee:	4602      	mov	r2, r0
 80137f0:	1a9b      	subs	r3, r3, r2
 80137f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80137f4:	462b      	mov	r3, r5
 80137f6:	460a      	mov	r2, r1
 80137f8:	eb63 0302 	sbc.w	r3, r3, r2
 80137fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013802:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013806:	e01e      	b.n	8013846 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013808:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801380c:	2200      	movs	r2, #0
 801380e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013812:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013816:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801381a:	2200      	movs	r2, #0
 801381c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013820:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013824:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013828:	4623      	mov	r3, r4
 801382a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801382e:	4602      	mov	r2, r0
 8013830:	1a9b      	subs	r3, r3, r2
 8013832:	623b      	str	r3, [r7, #32]
 8013834:	462b      	mov	r3, r5
 8013836:	460a      	mov	r2, r1
 8013838:	eb63 0302 	sbc.w	r3, r3, r2
 801383c:	627b      	str	r3, [r7, #36]	; 0x24
 801383e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013842:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8013846:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801384a:	4313      	orrs	r3, r2
 801384c:	f000 829c 	beq.w	8013d88 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013854:	2200      	movs	r2, #0
 8013856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801385a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801385e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013862:	2200      	movs	r2, #0
 8013864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801386c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013870:	4623      	mov	r3, r4
 8013872:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8013876:	4602      	mov	r2, r0
 8013878:	189b      	adds	r3, r3, r2
 801387a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801387e:	460b      	mov	r3, r1
 8013880:	462a      	mov	r2, r5
 8013882:	eb42 0303 	adc.w	r3, r2, r3
 8013886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 801388a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801388e:	2200      	movs	r2, #0
 8013890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013894:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013898:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801389c:	4623      	mov	r3, r4
 801389e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80138a2:	4602      	mov	r2, r0
 80138a4:	189b      	adds	r3, r3, r2
 80138a6:	61bb      	str	r3, [r7, #24]
 80138a8:	460b      	mov	r3, r1
 80138aa:	462a      	mov	r2, r5
 80138ac:	eb42 0303 	adc.w	r3, r2, r3
 80138b0:	61fb      	str	r3, [r7, #28]
 80138b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80138b6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80138ba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138be:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80138c2:	f173 0300 	sbcs.w	r3, r3, #0
 80138c6:	d305      	bcc.n	80138d4 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80138c8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80138cc:	f04f 0300 	mov.w	r3, #0
 80138d0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 80138d4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80138d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138dc:	fb03 f102 	mul.w	r1, r3, r2
 80138e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80138e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138e8:	fb02 f303 	mul.w	r3, r2, r3
 80138ec:	18ca      	adds	r2, r1, r3
 80138ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138f2:	fba3 1303 	umull	r1, r3, r3, r3
 80138f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80138fa:	460b      	mov	r3, r1
 80138fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013904:	18d3      	adds	r3, r2, r3
 8013906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801390a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801390e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013912:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013916:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801391a:	f04f 0000 	mov.w	r0, #0
 801391e:	f04f 0100 	mov.w	r1, #0
 8013922:	0219      	lsls	r1, r3, #8
 8013924:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013928:	0210      	lsls	r0, r2, #8
 801392a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801392e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013936:	d305      	bcc.n	8013944 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013938:	f04f 32ff 	mov.w	r2, #4294967295
 801393c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013940:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013944:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013948:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801394c:	f7ec fcb8 	bl	80002c0 <__aeabi_uldivmod>
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013958:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801395c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013960:	f7ec fcae 	bl	80002c0 <__aeabi_uldivmod>
 8013964:	4602      	mov	r2, r0
 8013966:	460b      	mov	r3, r1
 8013968:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 801396c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013970:	2b80      	cmp	r3, #128	; 0x80
 8013972:	d305      	bcc.n	8013980 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8013974:	f04f 32ff 	mov.w	r2, #4294967295
 8013978:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801397c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8013980:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013984:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013988:	fb03 f102 	mul.w	r1, r3, r2
 801398c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8013990:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013994:	fb02 f303 	mul.w	r3, r2, r3
 8013998:	4419      	add	r1, r3
 801399a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801399e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139a2:	fba2 2303 	umull	r2, r3, r2, r3
 80139a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80139aa:	4613      	mov	r3, r2
 80139ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80139b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139b4:	18cb      	adds	r3, r1, r3
 80139b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80139ba:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80139be:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80139c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80139c6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80139ca:	2200      	movs	r2, #0
 80139cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80139d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80139d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80139d8:	2200      	movs	r2, #0
 80139da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80139de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80139e6:	4623      	mov	r3, r4
 80139e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80139ec:	4602      	mov	r2, r0
 80139ee:	189b      	adds	r3, r3, r2
 80139f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80139f4:	460b      	mov	r3, r1
 80139f6:	462a      	mov	r2, r5
 80139f8:	eb42 0303 	adc.w	r3, r2, r3
 80139fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013a00:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013a04:	2200      	movs	r2, #0
 8013a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8013a08:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013a0a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013a0e:	4623      	mov	r3, r4
 8013a10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013a14:	4602      	mov	r2, r0
 8013a16:	189b      	adds	r3, r3, r2
 8013a18:	673b      	str	r3, [r7, #112]	; 0x70
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	462a      	mov	r2, r5
 8013a1e:	eb42 0303 	adc.w	r3, r2, r3
 8013a22:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013a24:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013a28:	2200      	movs	r2, #0
 8013a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013a2c:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013a2e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8013a32:	4623      	mov	r3, r4
 8013a34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013a38:	4602      	mov	r2, r0
 8013a3a:	189b      	adds	r3, r3, r2
 8013a3c:	613b      	str	r3, [r7, #16]
 8013a3e:	460b      	mov	r3, r1
 8013a40:	462a      	mov	r2, r5
 8013a42:	eb42 0303 	adc.w	r3, r2, r3
 8013a46:	617b      	str	r3, [r7, #20]
 8013a48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013a4c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8013a50:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a54:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013a58:	f173 0300 	sbcs.w	r3, r3, #0
 8013a5c:	d305      	bcc.n	8013a6a <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8013a5e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013a62:	f04f 0300 	mov.w	r3, #0
 8013a66:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8013a6a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a6e:	f04f 0000 	mov.w	r0, #0
 8013a72:	f04f 0100 	mov.w	r1, #0
 8013a76:	0219      	lsls	r1, r3, #8
 8013a78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013a7c:	0210      	lsls	r0, r2, #8
 8013a7e:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8013a82:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a86:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a8a:	1884      	adds	r4, r0, r2
 8013a8c:	60bc      	str	r4, [r7, #8]
 8013a8e:	eb41 0303 	adc.w	r3, r1, r3
 8013a92:	60fb      	str	r3, [r7, #12]
 8013a94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013a98:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013a9c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	da05      	bge.n	8013ab0 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013aac:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013ab0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d331      	bcc.n	8013b1c <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013ab8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013abc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ac0:	f7ec fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8013ad4:	667a      	str	r2, [r7, #100]	; 0x64
 8013ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013ada:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013ade:	4622      	mov	r2, r4
 8013ae0:	fb02 f203 	mul.w	r2, r2, r3
 8013ae4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013ae8:	4629      	mov	r1, r5
 8013aea:	fb01 f303 	mul.w	r3, r1, r3
 8013aee:	441a      	add	r2, r3
 8013af0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013af4:	4621      	mov	r1, r4
 8013af6:	fba3 1301 	umull	r1, r3, r3, r1
 8013afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013afe:	460b      	mov	r3, r1
 8013b00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b08:	18d3      	adds	r3, r2, r3
 8013b0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013b0e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8013b12:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b16:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b1a:	e030      	b.n	8013b7e <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b20:	2200      	movs	r2, #0
 8013b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8013b24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013b2e:	4622      	mov	r2, r4
 8013b30:	fb02 f203 	mul.w	r2, r2, r3
 8013b34:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b38:	4629      	mov	r1, r5
 8013b3a:	fb01 f303 	mul.w	r3, r1, r3
 8013b3e:	441a      	add	r2, r3
 8013b40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b44:	4621      	mov	r1, r4
 8013b46:	fba3 1301 	umull	r1, r3, r3, r1
 8013b4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b4e:	460b      	mov	r3, r1
 8013b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b58:	18d3      	adds	r3, r2, r3
 8013b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b5e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8013b62:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b66:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013b6a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013b6e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b72:	f7ec fba5 	bl	80002c0 <__aeabi_uldivmod>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013b7e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	da05      	bge.n	8013b92 <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013b86:	f04f 32ff 	mov.w	r2, #4294967295
 8013b8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013b8e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013b92:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d33d      	bcc.n	8013c16 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013b9a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013b9e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ba2:	f7ec fb8d 	bl	80002c0 <__aeabi_uldivmod>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	460b      	mov	r3, r1
 8013baa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013bae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bb2:	f04f 0200 	mov.w	r2, #0
 8013bb6:	f04f 0300 	mov.w	r3, #0
 8013bba:	0882      	lsrs	r2, r0, #2
 8013bbc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013bc0:	088b      	lsrs	r3, r1, #2
 8013bc2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bca:	2200      	movs	r2, #0
 8013bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8013bce:	657a      	str	r2, [r7, #84]	; 0x54
 8013bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013bd4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013bd8:	4622      	mov	r2, r4
 8013bda:	fb02 f203 	mul.w	r2, r2, r3
 8013bde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013be2:	4629      	mov	r1, r5
 8013be4:	fb01 f303 	mul.w	r3, r1, r3
 8013be8:	4413      	add	r3, r2
 8013bea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013bee:	4621      	mov	r1, r4
 8013bf0:	fba2 1201 	umull	r1, r2, r2, r1
 8013bf4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013bf8:	460a      	mov	r2, r1
 8013bfa:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013bfe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013c02:	4413      	add	r3, r2
 8013c04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013c08:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013c0c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c10:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c14:	e03c      	b.n	8013c90 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013c24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013c28:	4622      	mov	r2, r4
 8013c2a:	fb02 f203 	mul.w	r2, r2, r3
 8013c2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013c32:	4629      	mov	r1, r5
 8013c34:	fb01 f303 	mul.w	r3, r1, r3
 8013c38:	4413      	add	r3, r2
 8013c3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013c3e:	4621      	mov	r1, r4
 8013c40:	fba2 1201 	umull	r1, r2, r2, r1
 8013c44:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013c48:	460a      	mov	r2, r1
 8013c4a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8013c4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013c52:	4413      	add	r3, r2
 8013c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013c58:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013c5c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c60:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013c64:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013c68:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c6c:	f7ec fb28 	bl	80002c0 <__aeabi_uldivmod>
 8013c70:	4602      	mov	r2, r0
 8013c72:	460b      	mov	r3, r1
 8013c74:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013c78:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c7c:	f04f 0200 	mov.w	r2, #0
 8013c80:	f04f 0300 	mov.w	r3, #0
 8013c84:	0882      	lsrs	r2, r0, #2
 8013c86:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013c8a:	088b      	lsrs	r3, r1, #2
 8013c8c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013c90:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	da05      	bge.n	8013ca4 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013c98:	f04f 32ff 	mov.w	r2, #4294967295
 8013c9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ca0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013ca4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ca8:	f04f 0200 	mov.w	r2, #0
 8013cac:	f04f 0300 	mov.w	r3, #0
 8013cb0:	0882      	lsrs	r2, r0, #2
 8013cb2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013cb6:	088b      	lsrs	r3, r1, #2
 8013cb8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013cbc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d305      	bcc.n	8013cd0 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc8:	f04f 0300 	mov.w	r3, #0
 8013ccc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8013cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8013cd8:	647a      	str	r2, [r7, #68]	; 0x44
 8013cda:	f04f 0200 	mov.w	r2, #0
 8013cde:	f04f 0300 	mov.w	r3, #0
 8013ce2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	01cb      	lsls	r3, r1, #7
 8013cea:	4621      	mov	r1, r4
 8013cec:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	01ca      	lsls	r2, r1, #7
 8013cf4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013cf8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013cfc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013d00:	fb03 f202 	mul.w	r2, r3, r2
 8013d04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013d08:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013d0c:	fb01 f303 	mul.w	r3, r1, r3
 8013d10:	441a      	add	r2, r3
 8013d12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013d16:	fba3 1303 	umull	r1, r3, r3, r3
 8013d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d1e:	460b      	mov	r3, r1
 8013d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d28:	18d3      	adds	r3, r2, r3
 8013d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d2e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013d32:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013d36:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013d3a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013d3e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013d42:	1884      	adds	r4, r0, r2
 8013d44:	603c      	str	r4, [r7, #0]
 8013d46:	eb41 0303 	adc.w	r3, r1, r3
 8013d4a:	607b      	str	r3, [r7, #4]
 8013d4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013d50:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013d54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d305      	bcc.n	8013d68 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d60:	f04f 0300 	mov.w	r3, #0
 8013d64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013d68:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fa fdaa 	bl	800e8c6 <VL53L1_isqrt>
 8013d72:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013d80:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013d82:	2300      	movs	r3, #0
 8013d84:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013d88:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013d92:	46bd      	mov	sp, r7
 8013d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013d98 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013da0:	2300      	movs	r3, #0
 8013da2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	3318      	adds	r3, #24
 8013da8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d107      	bne.n	8013dc6 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013db6:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 f88b 	bl	8013ed6 <VL53L1_poll_for_range_completion>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	75fb      	strb	r3, [r7, #23]
 8013dc4:	e01b      	b.n	8013dfe <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013dca:	e011      	b.n	8013df0 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013dcc:	f107 030f 	add.w	r3, r7, #15
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 f819 	bl	8013e0a <VL53L1_is_new_data_ready>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d105      	bne.n	8013df0 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013de4:	2101      	movs	r1, #1
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 fe6e 	bl	8014ac8 <VL53L1_WaitMs>
 8013dec:	4603      	mov	r3, r0
 8013dee:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013df0:	7bfb      	ldrb	r3, [r7, #15]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d103      	bne.n	8013dfe <VL53L1_wait_for_test_completion+0x66>
 8013df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0e6      	beq.n	8013dcc <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3718      	adds	r7, #24
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}

08013e0a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013e0a:	b580      	push	{r7, lr}
 8013e0c:	b086      	sub	sp, #24
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e14:	2300      	movs	r3, #0
 8013e16:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	3318      	adds	r3, #24
 8013e1c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013e30:	f003 0310 	and.w	r3, r3, #16
 8013e34:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013e36:	7bfb      	ldrb	r3, [r7, #15]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d102      	bne.n	8013e42 <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	75fb      	strb	r3, [r7, #23]
 8013e40:	e001      	b.n	8013e46 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013e42:	2300      	movs	r3, #0
 8013e44:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013e46:	f107 030e 	add.w	r3, r7, #14
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	2131      	movs	r1, #49	; 0x31
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f000 fdb2 	bl	80149b8 <VL53L1_RdByte>
 8013e54:	4603      	mov	r3, r0
 8013e56:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013e58:	7bbb      	ldrb	r3, [r7, #14]
 8013e5a:	f003 0201 	and.w	r2, r3, #1
 8013e5e:	7dfb      	ldrb	r3, [r7, #23]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d103      	bne.n	8013e6c <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	2201      	movs	r2, #1
 8013e68:	701a      	strb	r2, [r3, #0]
 8013e6a:	e002      	b.n	8013e72 <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013e72:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3718      	adds	r7, #24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}

08013e7e <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b086      	sub	sp, #24
 8013e82:	af02      	add	r7, sp, #8
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013e8c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f000 fe29 	bl	8014ae8 <VL53L1_WaitUs>
 8013e96:	4603      	mov	r3, r0
 8013e98:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10b      	bne.n	8013eba <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	9301      	str	r3, [sp, #4]
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	9300      	str	r3, [sp, #0]
 8013eaa:	2301      	movs	r3, #1
 8013eac:	22e5      	movs	r2, #229	; 0xe5
 8013eae:	6839      	ldr	r1, [r7, #0]
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 fe31 	bl	8014b18 <VL53L1_WaitValueMaskEx>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d103      	bne.n	8013eca <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013ec2:	2103      	movs	r1, #3
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7f6 fc38 	bl	800a73a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013ed6:	b580      	push	{r7, lr}
 8013ed8:	b088      	sub	sp, #32
 8013eda:	af02      	add	r7, sp, #8
 8013edc:	6078      	str	r0, [r7, #4]
 8013ede:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	3318      	adds	r3, #24
 8013ee8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013eea:	2300      	movs	r3, #0
 8013eec:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013ef8:	f003 0310 	and.w	r3, r3, #16
 8013efc:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013f04:	2301      	movs	r3, #1
 8013f06:	75fb      	strb	r3, [r7, #23]
 8013f08:	e001      	b.n	8013f0e <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013f0e:	7dfb      	ldrb	r3, [r7, #23]
 8013f10:	2201      	movs	r2, #1
 8013f12:	9201      	str	r2, [sp, #4]
 8013f14:	2201      	movs	r2, #1
 8013f16:	9200      	str	r2, [sp, #0]
 8013f18:	2231      	movs	r2, #49	; 0x31
 8013f1a:	6839      	ldr	r1, [r7, #0]
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 fdfb 	bl	8014b18 <VL53L1_WaitValueMaskEx>
 8013f22:	4603      	mov	r3, r0
 8013f24:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013f26:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3718      	adds	r7, #24
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}

08013f32 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013f32:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f36:	b0c0      	sub	sp, #256	; 0x100
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013f3e:	4618      	mov	r0, r3
 8013f40:	460b      	mov	r3, r1
 8013f42:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013f46:	4613      	mov	r3, r2
 8013f48:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013f52:	2300      	movs	r3, #0
 8013f54:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013f64:	2300      	movs	r3, #0
 8013f66:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013f7c:	f04f 0200 	mov.w	r2, #0
 8013f80:	f04f 0300 	mov.w	r3, #0
 8013f84:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013f88:	f04f 0200 	mov.w	r2, #0
 8013f8c:	f04f 0300 	mov.w	r3, #0
 8013f90:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013f94:	f04f 0200 	mov.w	r2, #0
 8013f98:	f04f 0300 	mov.w	r3, #0
 8013f9c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013fa0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d108      	bne.n	8013fba <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013fa8:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013fac:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013fb0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fb f867 	bl	800f088 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013fba:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d165      	bne.n	801408e <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013fc2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013fc6:	091b      	lsrs	r3, r3, #4
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	f003 0301 	and.w	r3, r3, #1
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00e      	beq.n	8013ff0 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013fd2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013fd6:	b29a      	uxth	r2, r3
 8013fd8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013fdc:	095b      	lsrs	r3, r3, #5
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	1ad3      	subs	r3, r2, r3
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013fee:	e00b      	b.n	8014008 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013ff0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ffa:	095b      	lsrs	r3, r3, #5
 8013ffc:	b2db      	uxtb	r3, r3
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	b29b      	uxth	r3, r3
 8014004:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8014008:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801400c:	b29a      	uxth	r2, r3
 801400e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014012:	095b      	lsrs	r3, r3, #5
 8014014:	b2db      	uxtb	r3, r3
 8014016:	b29b      	uxth	r3, r3
 8014018:	4413      	add	r3, r2
 801401a:	b29b      	uxth	r3, r3
 801401c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8014020:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014024:	f003 0301 	and.w	r3, r3, #1
 8014028:	2b00      	cmp	r3, #0
 801402a:	d011      	beq.n	8014050 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 801402c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014030:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8014032:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014036:	f003 020f 	and.w	r2, r3, #15
 801403a:	0fd3      	lsrs	r3, r2, #31
 801403c:	4413      	add	r3, r2
 801403e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8014040:	b29b      	uxth	r3, r3
 8014042:	1acb      	subs	r3, r1, r3
 8014044:	b29b      	uxth	r3, r3
 8014046:	3b01      	subs	r3, #1
 8014048:	b29b      	uxth	r3, r3
 801404a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801404e:	e00f      	b.n	8014070 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8014050:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014054:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8014056:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801405a:	f003 020f 	and.w	r2, r3, #15
 801405e:	0fd3      	lsrs	r3, r2, #31
 8014060:	4413      	add	r3, r2
 8014062:	105b      	asrs	r3, r3, #1
 8014064:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8014066:	b29b      	uxth	r3, r3
 8014068:	440b      	add	r3, r1
 801406a:	b29b      	uxth	r3, r3
 801406c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8014070:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014074:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8014076:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801407a:	f003 020f 	and.w	r2, r3, #15
 801407e:	0fd3      	lsrs	r3, r2, #31
 8014080:	4413      	add	r3, r2
 8014082:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8014084:	b29b      	uxth	r3, r3
 8014086:	440b      	add	r3, r1
 8014088:	b29b      	uxth	r3, r3
 801408a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801408e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014092:	2b00      	cmp	r3, #0
 8014094:	d133      	bne.n	80140fe <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8014096:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 801409a:	b29a      	uxth	r2, r3
 801409c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80140a0:	4413      	add	r3, r2
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	005b      	lsls	r3, r3, #1
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	3b0f      	subs	r3, #15
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80140b0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80140ba:	4413      	add	r3, r2
 80140bc:	b29b      	uxth	r3, r3
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	3b0f      	subs	r3, #15
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80140ca:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80140d4:	4413      	add	r3, r2
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	b29b      	uxth	r3, r3
 80140dc:	3b0f      	subs	r3, #15
 80140de:	b29b      	uxth	r3, r3
 80140e0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80140e4:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80140e8:	b29a      	uxth	r2, r3
 80140ea:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80140ee:	4413      	add	r3, r2
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	3b0f      	subs	r3, #15
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80140fe:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014102:	2b00      	cmp	r3, #0
 8014104:	f040 8135 	bne.w	8014372 <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014108:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 801410c:	17da      	asrs	r2, r3, #31
 801410e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014112:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014116:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801411a:	17da      	asrs	r2, r3, #31
 801411c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014120:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014124:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014128:	460b      	mov	r3, r1
 801412a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801412e:	fb02 f203 	mul.w	r2, r2, r3
 8014132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014136:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 801413a:	4601      	mov	r1, r0
 801413c:	fb01 f303 	mul.w	r3, r1, r3
 8014140:	4413      	add	r3, r2
 8014142:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014146:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801414a:	fba2 4501 	umull	r4, r5, r2, r1
 801414e:	442b      	add	r3, r5
 8014150:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014152:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8014156:	17da      	asrs	r2, r3, #31
 8014158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801415c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8014160:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8014164:	17da      	asrs	r2, r3, #31
 8014166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801416a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801416e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8014172:	460b      	mov	r3, r1
 8014174:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014178:	fb02 f203 	mul.w	r2, r2, r3
 801417c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014180:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8014184:	4601      	mov	r1, r0
 8014186:	fb01 f303 	mul.w	r3, r1, r3
 801418a:	4413      	add	r3, r2
 801418c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014190:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014194:	fba2 8901 	umull	r8, r9, r2, r1
 8014198:	444b      	add	r3, r9
 801419a:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 801419c:	eb14 0308 	adds.w	r3, r4, r8
 80141a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80141a2:	eb45 0309 	adc.w	r3, r5, r9
 80141a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141a8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80141ac:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80141b0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80141b4:	1c51      	adds	r1, r2, #1
 80141b6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80141ba:	f143 0300 	adc.w	r3, r3, #0
 80141be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80141c2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80141c6:	460b      	mov	r3, r1
 80141c8:	0fdb      	lsrs	r3, r3, #31
 80141ca:	2200      	movs	r2, #0
 80141cc:	643b      	str	r3, [r7, #64]	; 0x40
 80141ce:	647a      	str	r2, [r7, #68]	; 0x44
 80141d0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80141d4:	4623      	mov	r3, r4
 80141d6:	4602      	mov	r2, r0
 80141d8:	189b      	adds	r3, r3, r2
 80141da:	63bb      	str	r3, [r7, #56]	; 0x38
 80141dc:	460b      	mov	r3, r1
 80141de:	462a      	mov	r2, r5
 80141e0:	eb42 0303 	adc.w	r3, r2, r3
 80141e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80141e6:	f04f 0200 	mov.w	r2, #0
 80141ea:	f04f 0300 	mov.w	r3, #0
 80141ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80141f2:	4621      	mov	r1, r4
 80141f4:	084a      	lsrs	r2, r1, #1
 80141f6:	4629      	mov	r1, r5
 80141f8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80141fc:	4629      	mov	r1, r5
 80141fe:	104b      	asrs	r3, r1, #1
 8014200:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8014204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014208:	2200      	movs	r2, #0
 801420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801420e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014212:	f04f 0000 	mov.w	r0, #0
 8014216:	f04f 0100 	mov.w	r1, #0
 801421a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801421e:	462b      	mov	r3, r5
 8014220:	0099      	lsls	r1, r3, #2
 8014222:	4623      	mov	r3, r4
 8014224:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8014228:	4623      	mov	r3, r4
 801422a:	0098      	lsls	r0, r3, #2
 801422c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014230:	1814      	adds	r4, r2, r0
 8014232:	633c      	str	r4, [r7, #48]	; 0x30
 8014234:	414b      	adcs	r3, r1
 8014236:	637b      	str	r3, [r7, #52]	; 0x34
 8014238:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801423c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014240:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8014244:	17da      	asrs	r2, r3, #31
 8014246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801424a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801424e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8014252:	17da      	asrs	r2, r3, #31
 8014254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014258:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801425c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8014260:	462b      	mov	r3, r5
 8014262:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8014266:	4642      	mov	r2, r8
 8014268:	fb02 f203 	mul.w	r2, r2, r3
 801426c:	464b      	mov	r3, r9
 801426e:	4621      	mov	r1, r4
 8014270:	fb01 f303 	mul.w	r3, r1, r3
 8014274:	4413      	add	r3, r2
 8014276:	4622      	mov	r2, r4
 8014278:	4641      	mov	r1, r8
 801427a:	fba2 ab01 	umull	sl, fp, r2, r1
 801427e:	445b      	add	r3, fp
 8014280:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8014282:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8014286:	17da      	asrs	r2, r3, #31
 8014288:	67bb      	str	r3, [r7, #120]	; 0x78
 801428a:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 801428c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8014290:	17da      	asrs	r2, r3, #31
 8014292:	673b      	str	r3, [r7, #112]	; 0x70
 8014294:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8014296:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801429a:	462b      	mov	r3, r5
 801429c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80142a0:	4642      	mov	r2, r8
 80142a2:	fb02 f203 	mul.w	r2, r2, r3
 80142a6:	464b      	mov	r3, r9
 80142a8:	4621      	mov	r1, r4
 80142aa:	fb01 f303 	mul.w	r3, r1, r3
 80142ae:	4413      	add	r3, r2
 80142b0:	4622      	mov	r2, r4
 80142b2:	4641      	mov	r1, r8
 80142b4:	fba2 1201 	umull	r1, r2, r2, r1
 80142b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80142bc:	460a      	mov	r2, r1
 80142be:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80142c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80142c6:	4413      	add	r3, r2
 80142c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80142cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80142d0:	460b      	mov	r3, r1
 80142d2:	eb1a 0303 	adds.w	r3, sl, r3
 80142d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80142d8:	4613      	mov	r3, r2
 80142da:	eb4b 0303 	adc.w	r3, fp, r3
 80142de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80142e4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 80142e8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80142ec:	1c51      	adds	r1, r2, #1
 80142ee:	66b9      	str	r1, [r7, #104]	; 0x68
 80142f0:	f143 0300 	adc.w	r3, r3, #0
 80142f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80142f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80142fa:	460b      	mov	r3, r1
 80142fc:	0fdb      	lsrs	r3, r3, #31
 80142fe:	2200      	movs	r2, #0
 8014300:	623b      	str	r3, [r7, #32]
 8014302:	627a      	str	r2, [r7, #36]	; 0x24
 8014304:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014308:	4623      	mov	r3, r4
 801430a:	4602      	mov	r2, r0
 801430c:	189b      	adds	r3, r3, r2
 801430e:	61bb      	str	r3, [r7, #24]
 8014310:	460b      	mov	r3, r1
 8014312:	462a      	mov	r2, r5
 8014314:	eb42 0303 	adc.w	r3, r2, r3
 8014318:	61fb      	str	r3, [r7, #28]
 801431a:	f04f 0200 	mov.w	r2, #0
 801431e:	f04f 0300 	mov.w	r3, #0
 8014322:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014326:	4621      	mov	r1, r4
 8014328:	084a      	lsrs	r2, r1, #1
 801432a:	4629      	mov	r1, r5
 801432c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014330:	4629      	mov	r1, r5
 8014332:	104b      	asrs	r3, r1, #1
 8014334:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801433c:	2200      	movs	r2, #0
 801433e:	663b      	str	r3, [r7, #96]	; 0x60
 8014340:	667a      	str	r2, [r7, #100]	; 0x64
 8014342:	f04f 0200 	mov.w	r2, #0
 8014346:	f04f 0300 	mov.w	r3, #0
 801434a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801434e:	4629      	mov	r1, r5
 8014350:	008b      	lsls	r3, r1, #2
 8014352:	4621      	mov	r1, r4
 8014354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014358:	4621      	mov	r1, r4
 801435a:	008a      	lsls	r2, r1, #2
 801435c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8014360:	1884      	adds	r4, r0, r2
 8014362:	613c      	str	r4, [r7, #16]
 8014364:	eb41 0303 	adc.w	r3, r1, r3
 8014368:	617b      	str	r3, [r7, #20]
 801436a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801436e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8014372:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014376:	2b00      	cmp	r3, #0
 8014378:	d132      	bne.n	80143e0 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 801437a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 801437e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014382:	1884      	adds	r4, r0, r2
 8014384:	65bc      	str	r4, [r7, #88]	; 0x58
 8014386:	eb41 0303 	adc.w	r3, r1, r3
 801438a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801438c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8014390:	460b      	mov	r3, r1
 8014392:	3301      	adds	r3, #1
 8014394:	653b      	str	r3, [r7, #80]	; 0x50
 8014396:	4613      	mov	r3, r2
 8014398:	f143 0300 	adc.w	r3, r3, #0
 801439c:	657b      	str	r3, [r7, #84]	; 0x54
 801439e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80143a2:	460b      	mov	r3, r1
 80143a4:	0fdb      	lsrs	r3, r3, #31
 80143a6:	2200      	movs	r2, #0
 80143a8:	60bb      	str	r3, [r7, #8]
 80143aa:	60fa      	str	r2, [r7, #12]
 80143ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80143b0:	4623      	mov	r3, r4
 80143b2:	4602      	mov	r2, r0
 80143b4:	189b      	adds	r3, r3, r2
 80143b6:	603b      	str	r3, [r7, #0]
 80143b8:	460b      	mov	r3, r1
 80143ba:	462a      	mov	r2, r5
 80143bc:	eb42 0303 	adc.w	r3, r2, r3
 80143c0:	607b      	str	r3, [r7, #4]
 80143c2:	f04f 0200 	mov.w	r2, #0
 80143c6:	f04f 0300 	mov.w	r3, #0
 80143ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80143ce:	4621      	mov	r1, r4
 80143d0:	084a      	lsrs	r2, r1, #1
 80143d2:	4629      	mov	r1, r5
 80143d4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80143d8:	4629      	mov	r1, r5
 80143da:	104b      	asrs	r3, r1, #1
 80143dc:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 80143e0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 80143e8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	da05      	bge.n	80143fc <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 80143f0:	f04f 0200 	mov.w	r2, #0
 80143f4:	f04f 0300 	mov.w	r3, #0
 80143f8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 80143fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014400:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014404:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8014406:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 801440a:	4618      	mov	r0, r3
 801440c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014410:	46bd      	mov	sp, r7
 8014412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014416 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8014416:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801441a:	b09a      	sub	sp, #104	; 0x68
 801441c:	af00      	add	r7, sp, #0
 801441e:	6478      	str	r0, [r7, #68]	; 0x44
 8014420:	6439      	str	r1, [r7, #64]	; 0x40
 8014422:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014424:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8014426:	2300      	movs	r3, #0
 8014428:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801442c:	f04f 0200 	mov.w	r2, #0
 8014430:	f04f 0300 	mov.w	r3, #0
 8014434:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014438:	f04f 0200 	mov.w	r2, #0
 801443c:	f04f 0300 	mov.w	r3, #0
 8014440:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8014444:	f04f 0200 	mov.w	r2, #0
 8014448:	f04f 0300 	mov.w	r3, #0
 801444c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8014450:	2300      	movs	r3, #0
 8014452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8014456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014458:	2200      	movs	r2, #0
 801445a:	633b      	str	r3, [r7, #48]	; 0x30
 801445c:	637a      	str	r2, [r7, #52]	; 0x34
 801445e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014464:	2200      	movs	r2, #0
 8014466:	62bb      	str	r3, [r7, #40]	; 0x28
 8014468:	62fa      	str	r2, [r7, #44]	; 0x2c
 801446a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801446e:	460b      	mov	r3, r1
 8014470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014472:	fb02 f203 	mul.w	r2, r2, r3
 8014476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014478:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801447c:	4601      	mov	r1, r0
 801447e:	fb01 f303 	mul.w	r3, r1, r3
 8014482:	4413      	add	r3, r2
 8014484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014488:	fba2 4501 	umull	r4, r5, r2, r1
 801448c:	442b      	add	r3, r5
 801448e:	461d      	mov	r5, r3
 8014490:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8014494:	623b      	str	r3, [r7, #32]
 8014496:	f145 0300 	adc.w	r3, r5, #0
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
 801449c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144a0:	f04f 0300 	mov.w	r3, #0
 80144a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80144a8:	f7eb ff0a 	bl	80002c0 <__aeabi_uldivmod>
 80144ac:	4602      	mov	r2, r0
 80144ae:	460b      	mov	r3, r1
 80144b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80144b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144b6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	2200      	movs	r2, #0
 80144be:	61bb      	str	r3, [r7, #24]
 80144c0:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80144c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144c4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80144c8:	4622      	mov	r2, r4
 80144ca:	fb02 f203 	mul.w	r2, r2, r3
 80144ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d0:	4629      	mov	r1, r5
 80144d2:	fb01 f303 	mul.w	r3, r1, r3
 80144d6:	4413      	add	r3, r2
 80144d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144da:	4621      	mov	r1, r4
 80144dc:	fba2 ab01 	umull	sl, fp, r2, r1
 80144e0:	445b      	add	r3, fp
 80144e2:	469b      	mov	fp, r3
 80144e4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80144e8:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80144ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80144f0:	f04f 0200 	mov.w	r2, #0
 80144f4:	f04f 0300 	mov.w	r3, #0
 80144f8:	0a02      	lsrs	r2, r0, #8
 80144fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80144fe:	0a0b      	lsrs	r3, r1, #8
 8014500:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8014504:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014508:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 801450c:	6139      	str	r1, [r7, #16]
 801450e:	f143 0300 	adc.w	r3, r3, #0
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	f04f 0200 	mov.w	r2, #0
 8014518:	f04f 0300 	mov.w	r3, #0
 801451c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014520:	4621      	mov	r1, r4
 8014522:	0aca      	lsrs	r2, r1, #11
 8014524:	4629      	mov	r1, r5
 8014526:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 801452a:	4629      	mov	r1, r5
 801452c:	0acb      	lsrs	r3, r1, #11
 801452e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8014532:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014536:	2b01      	cmp	r3, #1
 8014538:	d305      	bcc.n	8014546 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 801453a:	f04f 32ff 	mov.w	r2, #4294967295
 801453e:	f04f 0300 	mov.w	r3, #0
 8014542:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014546:	2300      	movs	r3, #0
 8014548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801454c:	e041      	b.n	80145d2 <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801454e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014554:	3302      	adds	r3, #2
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	4413      	add	r3, r2
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	2200      	movs	r2, #0
 801455e:	60bb      	str	r3, [r7, #8]
 8014560:	60fa      	str	r2, [r7, #12]
 8014562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014564:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014568:	4622      	mov	r2, r4
 801456a:	fb02 f203 	mul.w	r2, r2, r3
 801456e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014570:	4629      	mov	r1, r5
 8014572:	fb01 f303 	mul.w	r3, r1, r3
 8014576:	4413      	add	r3, r2
 8014578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801457a:	4621      	mov	r1, r4
 801457c:	fba2 8901 	umull	r8, r9, r2, r1
 8014580:	444b      	add	r3, r9
 8014582:	4699      	mov	r9, r3
 8014584:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8014588:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 801458c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014590:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8014594:	6039      	str	r1, [r7, #0]
 8014596:	f143 0300 	adc.w	r3, r3, #0
 801459a:	607b      	str	r3, [r7, #4]
 801459c:	f04f 0200 	mov.w	r2, #0
 80145a0:	f04f 0300 	mov.w	r3, #0
 80145a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80145a8:	4621      	mov	r1, r4
 80145aa:	0a8a      	lsrs	r2, r1, #10
 80145ac:	4629      	mov	r1, r5
 80145ae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80145b2:	4629      	mov	r1, r5
 80145b4:	0a8b      	lsrs	r3, r1, #10
 80145b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80145ba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80145be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	3206      	adds	r2, #6
 80145c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80145c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145cc:	3301      	adds	r3, #1
 80145ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80145d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145d4:	7a9b      	ldrb	r3, [r3, #10]
 80145d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80145da:	429a      	cmp	r2, r3
 80145dc:	d3b7      	bcc.n	801454e <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80145de:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3768      	adds	r7, #104	; 0x68
 80145e6:	46bd      	mov	sp, r7
 80145e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080145ec <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b085      	sub	sp, #20
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	4604      	mov	r4, r0
 80145f4:	4608      	mov	r0, r1
 80145f6:	4611      	mov	r1, r2
 80145f8:	461a      	mov	r2, r3
 80145fa:	4623      	mov	r3, r4
 80145fc:	71fb      	strb	r3, [r7, #7]
 80145fe:	4603      	mov	r3, r0
 8014600:	71bb      	strb	r3, [r7, #6]
 8014602:	460b      	mov	r3, r1
 8014604:	717b      	strb	r3, [r7, #5]
 8014606:	4613      	mov	r3, r2
 8014608:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801460a:	2300      	movs	r3, #0
 801460c:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 801460e:	2300      	movs	r3, #0
 8014610:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8014612:	2300      	movs	r3, #0
 8014614:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 801461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461c:	2210      	movs	r2, #16
 801461e:	701a      	strb	r2, [r3, #0]

	i = 0;
 8014620:	2300      	movs	r3, #0
 8014622:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8014624:	2300      	movs	r3, #0
 8014626:	73fb      	strb	r3, [r7, #15]
 8014628:	e046      	b.n	80146b8 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 801462a:	2300      	movs	r3, #0
 801462c:	73bb      	strb	r3, [r7, #14]
 801462e:	e03b      	b.n	80146a8 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8014630:	89bb      	ldrh	r3, [r7, #12]
 8014632:	2b0f      	cmp	r3, #15
 8014634:	d832      	bhi.n	801469c <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8014636:	89bb      	ldrh	r3, [r7, #12]
 8014638:	b2da      	uxtb	r2, r3
 801463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463c:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 801463e:	89bb      	ldrh	r3, [r7, #12]
 8014640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014642:	3306      	adds	r3, #6
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	4413      	add	r3, r2
 8014648:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801464c:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 801464e:	89bb      	ldrh	r3, [r7, #12]
 8014650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014652:	3306      	adds	r3, #6
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4413      	add	r3, r2
 8014658:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801465c:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 801465e:	7bfa      	ldrb	r2, [r7, #15]
 8014660:	79bb      	ldrb	r3, [r7, #6]
 8014662:	fb12 f303 	smulbb	r3, r2, r3
 8014666:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8014668:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 801466a:	79fa      	ldrb	r2, [r7, #7]
 801466c:	440a      	add	r2, r1
 801466e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8014670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014672:	3306      	adds	r3, #6
 8014674:	009b      	lsls	r3, r3, #2
 8014676:	4413      	add	r3, r2
 8014678:	460a      	mov	r2, r1
 801467a:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 801467c:	7bba      	ldrb	r2, [r7, #14]
 801467e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014682:	fb12 f303 	smulbb	r3, r2, r3
 8014686:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8014688:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 801468a:	793a      	ldrb	r2, [r7, #4]
 801468c:	440a      	add	r2, r1
 801468e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8014690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014692:	3306      	adds	r3, #6
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	4413      	add	r3, r2
 8014698:	460a      	mov	r2, r1
 801469a:	715a      	strb	r2, [r3, #5]
			}

			i++;
 801469c:	89bb      	ldrh	r3, [r7, #12]
 801469e:	3301      	adds	r3, #1
 80146a0:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80146a2:	7bbb      	ldrb	r3, [r7, #14]
 80146a4:	3301      	adds	r3, #1
 80146a6:	73bb      	strb	r3, [r7, #14]
 80146a8:	7bba      	ldrb	r2, [r7, #14]
 80146aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d3be      	bcc.n	8014630 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80146b2:	7bfb      	ldrb	r3, [r7, #15]
 80146b4:	3301      	adds	r3, #1
 80146b6:	73fb      	strb	r3, [r7, #15]
 80146b8:	7bfa      	ldrb	r2, [r7, #15]
 80146ba:	797b      	ldrb	r3, [r7, #5]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d3b4      	bcc.n	801462a <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80146c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146c2:	f000 f86c 	bl	801479e <VL53L1_init_zone_config_histogram_bins>
 80146c6:	4603      	mov	r3, r0
 80146c8:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80146ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3714      	adds	r7, #20
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd90      	pop	{r4, r7, pc}

080146d6 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 80146d6:	b580      	push	{r7, lr}
 80146d8:	b084      	sub	sp, #16
 80146da:	af00      	add	r7, sp, #0
 80146dc:	6078      	str	r0, [r7, #4]
 80146de:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80146e0:	2300      	movs	r3, #0
 80146e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2205      	movs	r2, #5
 80146e8:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2204      	movs	r2, #4
 80146ee:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	220f      	movs	r2, #15
 80146f4:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	2207      	movs	r2, #7
 80146fa:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	2204      	movs	r2, #4
 8014700:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	2208      	movs	r2, #8
 8014706:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	220f      	movs	r2, #15
 801470c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	2207      	movs	r2, #7
 8014714:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	220c      	movs	r2, #12
 801471c:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	2208      	movs	r2, #8
 8014724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	2207      	movs	r2, #7
 801472c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	220f      	movs	r2, #15
 8014734:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	2208      	movs	r2, #8
 801473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	2204      	movs	r2, #4
 8014744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	2207      	movs	r2, #7
 801474c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	220f      	movs	r2, #15
 8014754:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	2208      	movs	r2, #8
 801475c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	220c      	movs	r2, #12
 8014764:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	220f      	movs	r2, #15
 801476c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	220f      	movs	r2, #15
 8014774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	2208      	movs	r2, #8
 801477c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	2208      	movs	r2, #8
 8014784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8014788:	6838      	ldr	r0, [r7, #0]
 801478a:	f000 f808 	bl	801479e <VL53L1_init_zone_config_histogram_bins>
 801478e:	4603      	mov	r3, r0
 8014790:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 8014792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014796:	4618      	mov	r0, r3
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}

0801479e <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 801479e:	b480      	push	{r7}
 80147a0:	b085      	sub	sp, #20
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80147a6:	2300      	movs	r3, #0
 80147a8:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80147aa:	2300      	movs	r3, #0
 80147ac:	73fb      	strb	r3, [r7, #15]
 80147ae:	e008      	b.n	80147c2 <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80147b0:	7bfb      	ldrb	r3, [r7, #15]
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	4413      	add	r3, r2
 80147b6:	2201      	movs	r2, #1
 80147b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80147bc:	7bfb      	ldrb	r3, [r7, #15]
 80147be:	3301      	adds	r3, #1
 80147c0:	73fb      	strb	r3, [r7, #15]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	7bfa      	ldrb	r2, [r7, #15]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d3f1      	bcc.n	80147b0 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80147cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3714      	adds	r7, #20
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	8910      	ldrh	r0, [r2, #8]
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	b292      	uxth	r2, r2
 80147f4:	68b9      	ldr	r1, [r7, #8]
 80147f6:	4798      	blx	r3
 80147f8:	4603      	mov	r3, r0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3710      	adds	r7, #16
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}

08014802 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014802:	b580      	push	{r7, lr}
 8014804:	b084      	sub	sp, #16
 8014806:	af00      	add	r7, sp, #0
 8014808:	60f8      	str	r0, [r7, #12]
 801480a:	60b9      	str	r1, [r7, #8]
 801480c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	8910      	ldrh	r0, [r2, #8]
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	b292      	uxth	r2, r2
 801481a:	68b9      	ldr	r1, [r7, #8]
 801481c:	4798      	blx	r3
 801481e:	4603      	mov	r3, r0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	607a      	str	r2, [r7, #4]
 8014832:	603b      	str	r3, [r7, #0]
 8014834:	460b      	mov	r3, r1
 8014836:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014838:	2300      	movs	r3, #0
 801483a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	2bff      	cmp	r3, #255	; 0xff
 8014840:	d902      	bls.n	8014848 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8014842:	f06f 0303 	mvn.w	r3, #3
 8014846:	e01d      	b.n	8014884 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014848:	897b      	ldrh	r3, [r7, #10]
 801484a:	0a1b      	lsrs	r3, r3, #8
 801484c:	b29b      	uxth	r3, r3
 801484e:	b2da      	uxtb	r2, r3
 8014850:	4b0e      	ldr	r3, [pc, #56]	; (801488c <VL53L1_WriteMulti+0x64>)
 8014852:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014854:	897b      	ldrh	r3, [r7, #10]
 8014856:	b2da      	uxtb	r2, r3
 8014858:	4b0c      	ldr	r3, [pc, #48]	; (801488c <VL53L1_WriteMulti+0x64>)
 801485a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 801485c:	683a      	ldr	r2, [r7, #0]
 801485e:	6879      	ldr	r1, [r7, #4]
 8014860:	480b      	ldr	r0, [pc, #44]	; (8014890 <VL53L1_WriteMulti+0x68>)
 8014862:	f004 ffa5 	bl	80197b0 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	3302      	adds	r3, #2
 801486a:	461a      	mov	r2, r3
 801486c:	4907      	ldr	r1, [pc, #28]	; (801488c <VL53L1_WriteMulti+0x64>)
 801486e:	68f8      	ldr	r0, [r7, #12]
 8014870:	f7ff ffb4 	bl	80147dc <_I2CWrite>
 8014874:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801487c:	23f3      	movs	r3, #243	; 0xf3
 801487e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3718      	adds	r7, #24
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	20008550 	.word	0x20008550
 8014890:	20008552 	.word	0x20008552

08014894 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014894:	b580      	push	{r7, lr}
 8014896:	b086      	sub	sp, #24
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	607a      	str	r2, [r7, #4]
 801489e:	603b      	str	r3, [r7, #0]
 80148a0:	460b      	mov	r3, r1
 80148a2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80148a4:	2300      	movs	r3, #0
 80148a6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80148a8:	897b      	ldrh	r3, [r7, #10]
 80148aa:	0a1b      	lsrs	r3, r3, #8
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	b2da      	uxtb	r2, r3
 80148b0:	4b12      	ldr	r3, [pc, #72]	; (80148fc <VL53L1_ReadMulti+0x68>)
 80148b2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80148b4:	897b      	ldrh	r3, [r7, #10]
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	4b10      	ldr	r3, [pc, #64]	; (80148fc <VL53L1_ReadMulti+0x68>)
 80148ba:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80148bc:	2202      	movs	r2, #2
 80148be:	490f      	ldr	r1, [pc, #60]	; (80148fc <VL53L1_ReadMulti+0x68>)
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff ff8b 	bl	80147dc <_I2CWrite>
 80148c6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d002      	beq.n	80148d4 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148ce:	23f3      	movs	r3, #243	; 0xf3
 80148d0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80148d2:	e00c      	b.n	80148ee <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80148d4:	683a      	ldr	r2, [r7, #0]
 80148d6:	6879      	ldr	r1, [r7, #4]
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f7ff ff92 	bl	8014802 <_I2CRead>
 80148de:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d002      	beq.n	80148ec <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148e6:	23f3      	movs	r3, #243	; 0xf3
 80148e8:	75fb      	strb	r3, [r7, #23]
 80148ea:	e000      	b.n	80148ee <VL53L1_ReadMulti+0x5a>
    }
done:
 80148ec:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80148ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3718      	adds	r7, #24
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	20008550 	.word	0x20008550

08014900 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	460b      	mov	r3, r1
 801490a:	807b      	strh	r3, [r7, #2]
 801490c:	4613      	mov	r3, r2
 801490e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014910:	2300      	movs	r3, #0
 8014912:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014914:	887b      	ldrh	r3, [r7, #2]
 8014916:	0a1b      	lsrs	r3, r3, #8
 8014918:	b29b      	uxth	r3, r3
 801491a:	b2da      	uxtb	r2, r3
 801491c:	4b0c      	ldr	r3, [pc, #48]	; (8014950 <VL53L1_WrByte+0x50>)
 801491e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014920:	887b      	ldrh	r3, [r7, #2]
 8014922:	b2da      	uxtb	r2, r3
 8014924:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <VL53L1_WrByte+0x50>)
 8014926:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014928:	4a09      	ldr	r2, [pc, #36]	; (8014950 <VL53L1_WrByte+0x50>)
 801492a:	787b      	ldrb	r3, [r7, #1]
 801492c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801492e:	2203      	movs	r2, #3
 8014930:	4907      	ldr	r1, [pc, #28]	; (8014950 <VL53L1_WrByte+0x50>)
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7ff ff52 	bl	80147dc <_I2CWrite>
 8014938:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d001      	beq.n	8014944 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014940:	23f3      	movs	r3, #243	; 0xf3
 8014942:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014948:	4618      	mov	r0, r3
 801494a:	3710      	adds	r7, #16
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	20008550 	.word	0x20008550

08014954 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8014954:	b580      	push	{r7, lr}
 8014956:	b084      	sub	sp, #16
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	460b      	mov	r3, r1
 801495e:	807b      	strh	r3, [r7, #2]
 8014960:	4613      	mov	r3, r2
 8014962:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014964:	2300      	movs	r3, #0
 8014966:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014968:	887b      	ldrh	r3, [r7, #2]
 801496a:	0a1b      	lsrs	r3, r3, #8
 801496c:	b29b      	uxth	r3, r3
 801496e:	b2da      	uxtb	r2, r3
 8014970:	4b10      	ldr	r3, [pc, #64]	; (80149b4 <VL53L1_WrWord+0x60>)
 8014972:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014974:	887b      	ldrh	r3, [r7, #2]
 8014976:	b2da      	uxtb	r2, r3
 8014978:	4b0e      	ldr	r3, [pc, #56]	; (80149b4 <VL53L1_WrWord+0x60>)
 801497a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 801497c:	883b      	ldrh	r3, [r7, #0]
 801497e:	0a1b      	lsrs	r3, r3, #8
 8014980:	b29b      	uxth	r3, r3
 8014982:	b2da      	uxtb	r2, r3
 8014984:	4b0b      	ldr	r3, [pc, #44]	; (80149b4 <VL53L1_WrWord+0x60>)
 8014986:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8014988:	883b      	ldrh	r3, [r7, #0]
 801498a:	b2da      	uxtb	r2, r3
 801498c:	4b09      	ldr	r3, [pc, #36]	; (80149b4 <VL53L1_WrWord+0x60>)
 801498e:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8014990:	2204      	movs	r2, #4
 8014992:	4908      	ldr	r1, [pc, #32]	; (80149b4 <VL53L1_WrWord+0x60>)
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7ff ff21 	bl	80147dc <_I2CWrite>
 801499a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d001      	beq.n	80149a6 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80149a2:	23f3      	movs	r3, #243	; 0xf3
 80149a4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80149a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	20008550 	.word	0x20008550

080149b8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b086      	sub	sp, #24
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	460b      	mov	r3, r1
 80149c2:	607a      	str	r2, [r7, #4]
 80149c4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80149c6:	2300      	movs	r3, #0
 80149c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80149ca:	897b      	ldrh	r3, [r7, #10]
 80149cc:	0a1b      	lsrs	r3, r3, #8
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	b2da      	uxtb	r2, r3
 80149d2:	4b12      	ldr	r3, [pc, #72]	; (8014a1c <VL53L1_RdByte+0x64>)
 80149d4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80149d6:	897b      	ldrh	r3, [r7, #10]
 80149d8:	b2da      	uxtb	r2, r3
 80149da:	4b10      	ldr	r3, [pc, #64]	; (8014a1c <VL53L1_RdByte+0x64>)
 80149dc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80149de:	2202      	movs	r2, #2
 80149e0:	490e      	ldr	r1, [pc, #56]	; (8014a1c <VL53L1_RdByte+0x64>)
 80149e2:	68f8      	ldr	r0, [r7, #12]
 80149e4:	f7ff fefa 	bl	80147dc <_I2CWrite>
 80149e8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80149f0:	23f3      	movs	r3, #243	; 0xf3
 80149f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80149f4:	e00c      	b.n	8014a10 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80149f6:	2201      	movs	r2, #1
 80149f8:	6879      	ldr	r1, [r7, #4]
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	f7ff ff01 	bl	8014802 <_I2CRead>
 8014a00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d002      	beq.n	8014a0e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a08:	23f3      	movs	r3, #243	; 0xf3
 8014a0a:	75fb      	strb	r3, [r7, #23]
 8014a0c:	e000      	b.n	8014a10 <VL53L1_RdByte+0x58>
    }
done:
 8014a0e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3718      	adds	r7, #24
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	20008550 	.word	0x20008550

08014a20 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b086      	sub	sp, #24
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	460b      	mov	r3, r1
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014a32:	897b      	ldrh	r3, [r7, #10]
 8014a34:	0a1b      	lsrs	r3, r3, #8
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	b2da      	uxtb	r2, r3
 8014a3a:	4b18      	ldr	r3, [pc, #96]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a3c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014a3e:	897b      	ldrh	r3, [r7, #10]
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	4b16      	ldr	r3, [pc, #88]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a44:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014a46:	2202      	movs	r2, #2
 8014a48:	4914      	ldr	r1, [pc, #80]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f7ff fec6 	bl	80147dc <_I2CWrite>
 8014a50:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a58:	23f3      	movs	r3, #243	; 0xf3
 8014a5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014a5c:	e017      	b.n	8014a8e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8014a5e:	2202      	movs	r2, #2
 8014a60:	490e      	ldr	r1, [pc, #56]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f7ff fecd 	bl	8014802 <_I2CRead>
 8014a68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a70:	23f3      	movs	r3, #243	; 0xf3
 8014a72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014a74:	e00b      	b.n	8014a8e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8014a76:	4b09      	ldr	r3, [pc, #36]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	021b      	lsls	r3, r3, #8
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	4b06      	ldr	r3, [pc, #24]	; (8014a9c <VL53L1_RdWord+0x7c>)
 8014a82:	785b      	ldrb	r3, [r3, #1]
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	4413      	add	r3, r2
 8014a88:	b29a      	uxth	r2, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8014a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20008550 	.word	0x20008550

08014aa0 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	695b      	ldr	r3, [r3, #20]
 8014ab2:	4798      	blx	r3
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8014abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3710      	adds	r7, #16
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f000 f8d2 	bl	8014c80 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
	...

08014ae8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	4a07      	ldr	r2, [pc, #28]	; (8014b14 <VL53L1_WaitUs+0x2c>)
 8014af6:	fb82 1203 	smull	r1, r2, r2, r3
 8014afa:	1192      	asrs	r2, r2, #6
 8014afc:	17db      	asrs	r3, r3, #31
 8014afe:	1ad3      	subs	r3, r2, r3
 8014b00:	4619      	mov	r1, r3
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 f8bc 	bl	8014c80 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014b08:	2300      	movs	r3, #0
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3708      	adds	r7, #8
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	10624dd3 	.word	0x10624dd3

08014b18 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014b18:	b590      	push	{r4, r7, lr}
 8014b1a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8014b1e:	af00      	add	r7, sp, #0
 8014b20:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014b24:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014b28:	6020      	str	r0, [r4, #0]
 8014b2a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8014b2e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8014b32:	6001      	str	r1, [r0, #0]
 8014b34:	4619      	mov	r1, r3
 8014b36:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b3a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014b3e:	801a      	strh	r2, [r3, #0]
 8014b40:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b44:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014b48:	460a      	mov	r2, r1
 8014b4a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8014b52:	2300      	movs	r3, #0
 8014b54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014b64:	2300      	movs	r3, #0
 8014b66:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8014b70:	f107 0310 	add.w	r3, r7, #16
 8014b74:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014b78:	4940      	ldr	r1, [pc, #256]	; (8014c7c <VL53L1_WaitValueMaskEx+0x164>)
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f004 fed2 	bl	8019924 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8014b80:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014b84:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b88:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	6818      	ldr	r0, [r3, #0]
 8014b90:	f7ff ff86 	bl	8014aa0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8014b94:	e04e      	b.n	8014c34 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8014b96:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d110      	bne.n	8014bc0 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8014b9e:	f207 2213 	addw	r2, r7, #531	; 0x213
 8014ba2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014ba6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014baa:	8819      	ldrh	r1, [r3, #0]
 8014bac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014bb0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014bb4:	6818      	ldr	r0, [r3, #0]
 8014bb6:	f7ff feff 	bl	80149b8 <VL53L1_RdByte>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8014bc0:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8014bc4:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014bc8:	4013      	ands	r3, r2
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8014bd0:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014bd4:	7812      	ldrb	r2, [r2, #0]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d102      	bne.n	8014be0 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014bda:	2301      	movs	r3, #1
 8014bdc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8014be0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d114      	bne.n	8014c12 <VL53L1_WaitValueMaskEx+0xfa>
 8014be8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d110      	bne.n	8014c12 <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014bf0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d00c      	beq.n	8014c12 <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014bf8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014bfc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c00:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014c04:	4611      	mov	r1, r2
 8014c06:	6818      	ldr	r0, [r3, #0]
 8014c08:	f7ff ff5e 	bl	8014ac8 <VL53L1_WaitMs>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014c12:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014c16:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c1a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014c1e:	4611      	mov	r1, r2
 8014c20:	6818      	ldr	r0, [r3, #0]
 8014c22:	f7ff ff3d 	bl	8014aa0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014c26:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014c2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014c2e:	1ad3      	subs	r3, r2, r3
 8014c30:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014c34:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d10c      	bne.n	8014c56 <VL53L1_WaitValueMaskEx+0x13e>
 8014c3c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c40:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014c44:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	d203      	bcs.n	8014c56 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8014c4e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d09f      	beq.n	8014b96 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014c56:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d106      	bne.n	8014c6c <VL53L1_WaitValueMaskEx+0x154>
 8014c5e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d102      	bne.n	8014c6c <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014c66:	23f9      	movs	r3, #249	; 0xf9
 8014c68:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014c6c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd90      	pop	{r4, r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	0801aae4 	.word	0x0801aae4

08014c80 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	695b      	ldr	r3, [r3, #20]
 8014c8e:	4798      	blx	r3
 8014c90:	4603      	mov	r3, r0
 8014c92:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014c94:	bf00      	nop
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	695b      	ldr	r3, [r3, #20]
 8014c9a:	4798      	blx	r3
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	683a      	ldr	r2, [r7, #0]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d8f5      	bhi.n	8014c96 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014caa:	2300      	movs	r3, #0
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b08c      	sub	sp, #48	; 0x30
 8014cb8:	af06      	add	r7, sp, #24
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
 8014cc0:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc8:	9304      	str	r3, [sp, #16]
 8014cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ccc:	9303      	str	r3, [sp, #12]
 8014cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd0:	9302      	str	r3, [sp, #8]
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	6a3b      	ldr	r3, [r7, #32]
 8014cdc:	683a      	ldr	r2, [r7, #0]
 8014cde:	6879      	ldr	r1, [r7, #4]
 8014ce0:	68b8      	ldr	r0, [r7, #8]
 8014ce2:	f7fc fefb 	bl	8011adc <VL53L1_hist_process_data>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}

08014cf6 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b084      	sub	sp, #16
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
 8014cfe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d103      	bne.n	8014d0e <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d06:	f06f 0301 	mvn.w	r3, #1
 8014d0a:	60fb      	str	r3, [r7, #12]
 8014d0c:	e023      	b.n	8014d56 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	681a      	ldr	r2, [r3, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	685a      	ldr	r2, [r3, #4]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	891a      	ldrh	r2, [r3, #8]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	68da      	ldr	r2, [r3, #12]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	691a      	ldr	r2, [r3, #16]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	695a      	ldr	r2, [r3, #20]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d004      	beq.n	8014d50 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4798      	blx	r3
 8014d4c:	60f8      	str	r0, [r7, #12]
 8014d4e:	e002      	b.n	8014d56 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014d50:	f04f 33ff 	mov.w	r3, #4294967295
 8014d54:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014d56:	68fb      	ldr	r3, [r7, #12]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d6e:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d003      	beq.n	8014d7e <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014d76:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7a:	60fb      	str	r3, [r7, #12]
 8014d7c:	e04d      	b.n	8014e1a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f7ed f8d1 	bl	8001f26 <VL53L1_WaitDeviceBooted>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e043      	b.n	8014e1a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f7ed f847 	bl	8001e26 <VL53L1_DataInit>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d003      	beq.n	8014da6 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	e039      	b.n	8014e1a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f7ed f892 	bl	8001ed0 <VL53L1_StaticInit>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d003      	beq.n	8014dba <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014db2:	f04f 33ff 	mov.w	r3, #4294967295
 8014db6:	60fb      	str	r3, [r7, #12]
 8014db8:	e02f      	b.n	8014e1a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7ee fe8a 	bl	8003ad4 <VL53L1_PerformRefSpadManagement>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d003      	beq.n	8014dce <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dca:	60fb      	str	r3, [r7, #12]
 8014dcc:	e025      	b.n	8014e1a <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014de0:	2200      	movs	r2, #0
 8014de2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e04:	2200      	movs	r2, #0
 8014e06:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e10:	2201      	movs	r2, #1
 8014e12:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e30:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e38:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d111      	bne.n	8014e64 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	4798      	blx	r3
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d003      	beq.n	8014e54 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	e007      	b.n	8014e64 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014e54:	2300      	movs	r3, #0
 8014e56:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014e64:	68fb      	ldr	r3, [r7, #12]
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3710      	adds	r7, #16
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b084      	sub	sp, #16
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
 8014e76:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d002      	beq.n	8014e84 <VL53L1CB_ReadID+0x16>
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d103      	bne.n	8014e8c <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e84:	f06f 0301 	mvn.w	r3, #1
 8014e88:	60fb      	str	r3, [r7, #12]
 8014e8a:	e00a      	b.n	8014ea2 <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	f240 110f 	movw	r1, #271	; 0x10f
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f7ff fdc1 	bl	8014a20 <VL53L1_RdWord>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3710      	adds	r7, #16
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b085      	sub	sp, #20
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d002      	beq.n	8014ec2 <VL53L1CB_GetCapabilities+0x16>
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d103      	bne.n	8014eca <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ec2:	f06f 0301 	mvn.w	r3, #1
 8014ec6:	60fb      	str	r3, [r7, #12]
 8014ec8:	e00d      	b.n	8014ee6 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	2201      	movs	r2, #1
 8014ece:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	2204      	movs	r2, #4
 8014ed4:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	2201      	movs	r2, #1
 8014eda:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3714      	adds	r7, #20
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d009      	beq.n	8014f18 <VL53L1CB_ConfigProfile+0x24>
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d006      	beq.n	8014f18 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014f10:	7afb      	ldrb	r3, [r7, #11]
 8014f12:	2b01      	cmp	r3, #1
 8014f14:	d103      	bne.n	8014f1e <VL53L1CB_ConfigProfile+0x2a>
 8014f16:	e00c      	b.n	8014f32 <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014f18:	f06f 0301 	mvn.w	r3, #1
 8014f1c:	e043      	b.n	8014fa6 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014f1e:	7afb      	ldrb	r3, [r7, #11]
 8014f20:	2b02      	cmp	r3, #2
 8014f22:	d006      	beq.n	8014f32 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014f24:	7afb      	ldrb	r3, [r7, #11]
 8014f26:	2b03      	cmp	r3, #3
 8014f28:	d003      	beq.n	8014f32 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f2a:	f06f 0301 	mvn.w	r3, #1
 8014f2e:	60fb      	str	r3, [r7, #12]
 8014f30:	e038      	b.n	8014fa4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014f32:	7afb      	ldrb	r3, [r7, #11]
 8014f34:	4619      	mov	r1, r3
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7ed f970 	bl	800221c <VL53L1_SetDistanceMode>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d003      	beq.n	8014f4a <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014f42:	f04f 33ff 	mov.w	r3, #4294967295
 8014f46:	60fb      	str	r3, [r7, #12]
 8014f48:	e02c      	b.n	8014fa4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014f52:	fb02 f303 	mul.w	r3, r2, r3
 8014f56:	4619      	mov	r1, r3
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f7ed f9ed 	bl	8002338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d003      	beq.n	8014f6c <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014f64:	f04f 33ff 	mov.w	r3, #4294967295
 8014f68:	60fb      	str	r3, [r7, #12]
 8014f6a:	e01b      	b.n	8014fa4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	bf14      	ite	ne
 8014f74:	2301      	movne	r3, #1
 8014f76:	2300      	moveq	r3, #0
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f82:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	691b      	ldr	r3, [r3, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	bf14      	ite	ne
 8014f8e:	2301      	movne	r3, #1
 8014f90:	2300      	moveq	r3, #0
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	461a      	mov	r2, r3
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f9c:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}

08014fae <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014fae:	b580      	push	{r7, lr}
 8014fb0:	b094      	sub	sp, #80	; 0x50
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	6078      	str	r0, [r7, #4]
 8014fb6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d002      	beq.n	8014fc4 <VL53L1CB_ConfigROI+0x16>
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d103      	bne.n	8014fcc <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014fc4:	f06f 0301 	mvn.w	r3, #1
 8014fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014fca:	e01c      	b.n	8015006 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	789b      	ldrb	r3, [r3, #2]
 8014fd4:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	78db      	ldrb	r3, [r3, #3]
 8014fda:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	785b      	ldrb	r3, [r3, #1]
 8014fe6:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014fe8:	f107 0308 	add.w	r3, r7, #8
 8014fec:	4619      	mov	r1, r3
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7ed fca6 	bl	8002940 <VL53L1_SetROI>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d003      	beq.n	8015002 <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8014ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015000:	e001      	b.n	8015006 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015002:	2300      	movs	r3, #0
 8015004:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8015006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015008:	4618      	mov	r0, r3
 801500a:	3750      	adds	r7, #80	; 0x50
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 801501a:	f06f 0303 	mvn.w	r3, #3
}
 801501e:	4618      	mov	r0, r3
 8015020:	370c      	adds	r7, #12
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr

0801502a <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b084      	sub	sp, #16
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
 8015032:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d002      	beq.n	8015040 <VL53L1CB_GetDistance+0x16>
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d103      	bne.n	8015048 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015040:	f06f 0301 	mvn.w	r3, #1
 8015044:	60fb      	str	r3, [r7, #12]
 8015046:	e03a      	b.n	80150be <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801504e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015052:	2b00      	cmp	r3, #0
 8015054:	d103      	bne.n	801505e <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8015056:	f04f 33ff 	mov.w	r3, #4294967295
 801505a:	60fb      	str	r3, [r7, #12]
 801505c:	e02f      	b.n	80150be <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015064:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8015068:	2b01      	cmp	r3, #1
 801506a:	d106      	bne.n	801507a <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 801506c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 f92b 	bl	80152cc <vl53l1cb_poll_for_measurement>
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	e004      	b.n	8015084 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 801507a:	2100      	movs	r1, #0
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f000 f925 	bl	80152cc <vl53l1cb_poll_for_measurement>
 8015082:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d119      	bne.n	80150be <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 801508a:	6839      	ldr	r1, [r7, #0]
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f000 f94b 	bl	8015328 <vl53l1cb_get_result>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d003      	beq.n	80150a0 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8015098:	f04f 33ff 	mov.w	r3, #4294967295
 801509c:	60fb      	str	r3, [r7, #12]
 801509e:	e00e      	b.n	80150be <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150a6:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d105      	bne.n	80150ba <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f7ed fdde 	bl	8002c70 <VL53L1_ClearInterruptAndStartMeasurement>
 80150b4:	4603      	mov	r3, r0
 80150b6:	60fb      	str	r3, [r7, #12]
 80150b8:	e001      	b.n	80150be <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 80150ba:	2300      	movs	r3, #0
 80150bc:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 80150be:	68fb      	ldr	r3, [r7, #12]
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3710      	adds	r7, #16
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b084      	sub	sp, #16
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d103      	bne.n	80150e0 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80150d8:	f06f 0301 	mvn.w	r3, #1
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	e068      	b.n	80151b2 <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150e6:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d103      	bne.n	80150f6 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 80150ee:	f04f 33ff 	mov.w	r3, #4294967295
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	e05d      	b.n	80151b2 <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f7ed fcf6 	bl	8002ae8 <VL53L1_StartMeasurement>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d154      	bne.n	80151ac <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015108:	2201      	movs	r2, #1
 801510a:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801510e:	2300      	movs	r3, #0
 8015110:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	3b01      	subs	r3, #1
 8015116:	2b03      	cmp	r3, #3
 8015118:	d83e      	bhi.n	8015198 <VL53L1CB_Start+0xd0>
 801511a:	a201      	add	r2, pc, #4	; (adr r2, 8015120 <VL53L1CB_Start+0x58>)
 801511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015120:	08015131 	.word	0x08015131
 8015124:	0801514b 	.word	0x0801514b
 8015128:	08015165 	.word	0x08015165
 801512c:	0801517f 	.word	0x0801517f
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015136:	2201      	movs	r2, #1
 8015138:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015142:	2201      	movs	r2, #1
 8015144:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015148:	e033      	b.n	80151b2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015150:	2200      	movs	r2, #0
 8015152:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801515c:	2201      	movs	r2, #1
 801515e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015162:	e026      	b.n	80151b2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801516a:	2201      	movs	r2, #1
 801516c:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015176:	2200      	movs	r2, #0
 8015178:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801517c:	e019      	b.n	80151b2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015184:	2200      	movs	r2, #0
 8015186:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015190:	2200      	movs	r2, #0
 8015192:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015196:	e00c      	b.n	80151b2 <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801519e:	2200      	movs	r2, #0
 80151a0:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 80151a4:	f06f 0301 	mvn.w	r3, #1
 80151a8:	60fb      	str	r3, [r7, #12]
      break;
 80151aa:	e002      	b.n	80151b2 <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80151ac:	f04f 33ff 	mov.w	r3, #4294967295
 80151b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80151b2:	68fb      	ldr	r3, [r7, #12]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d103      	bne.n	80151d2 <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80151ca:	f06f 0301 	mvn.w	r3, #1
 80151ce:	60fb      	str	r3, [r7, #12]
 80151d0:	e01c      	b.n	801520c <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151d8:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d103      	bne.n	80151e8 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 80151e0:	f04f 33ff 	mov.w	r3, #4294967295
 80151e4:	60fb      	str	r3, [r7, #12]
 80151e6:	e011      	b.n	801520c <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f7ed fd1d 	bl	8002c28 <VL53L1_StopMeasurement>
 80151ee:	4603      	mov	r3, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d108      	bne.n	8015206 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151fa:	2200      	movs	r2, #0
 80151fc:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015200:	2300      	movs	r3, #0
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	e002      	b.n	801520c <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015206:	f04f 33ff 	mov.w	r3, #4294967295
 801520a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801520c:	68fb      	ldr	r3, [r7, #12]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b084      	sub	sp, #16
 801521a:	af00      	add	r7, sp, #0
 801521c:	6078      	str	r0, [r7, #4]
 801521e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d103      	bne.n	801522e <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015226:	f06f 0301 	mvn.w	r3, #1
 801522a:	60fb      	str	r3, [r7, #12]
 801522c:	e012      	b.n	8015254 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	b2db      	uxtb	r3, r3
 8015232:	4619      	mov	r1, r3
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f7ec fdcf 	bl	8001dd8 <VL53L1_SetDeviceAddress>
 801523a:	4603      	mov	r3, r0
 801523c:	2b00      	cmp	r3, #0
 801523e:	d003      	beq.n	8015248 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8015240:	f04f 33ff 	mov.w	r3, #4294967295
 8015244:	60fb      	str	r3, [r7, #12]
 8015246:	e005      	b.n	8015254 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	b29a      	uxth	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8015250:	2300      	movs	r3, #0
 8015252:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015254:	68fb      	ldr	r3, [r7, #12]
}
 8015256:	4618      	mov	r0, r3
 8015258:	3710      	adds	r7, #16
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 801525e:	b480      	push	{r7}
 8015260:	b085      	sub	sp, #20
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
 8015266:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d002      	beq.n	8015274 <VL53L1CB_GetAddress+0x16>
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d103      	bne.n	801527c <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015274:	f06f 0301 	mvn.w	r3, #1
 8015278:	60fb      	str	r3, [r7, #12]
 801527a:	e006      	b.n	801528a <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	891b      	ldrh	r3, [r3, #8]
 8015280:	461a      	mov	r2, r3
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8015286:	2300      	movs	r3, #0
 8015288:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801528a:	68fb      	ldr	r3, [r7, #12]
}
 801528c:	4618      	mov	r0, r3
 801528e:	3714      	adds	r7, #20
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr

08015298 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8015298:	b480      	push	{r7}
 801529a:	b083      	sub	sp, #12
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80152a2:	f06f 0303 	mvn.w	r3, #3
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	370c      	adds	r7, #12
 80152aa:	46bd      	mov	sp, r7
 80152ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b0:	4770      	bx	lr

080152b2 <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 80152b2:	b480      	push	{r7}
 80152b4:	b083      	sub	sp, #12
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	6078      	str	r0, [r7, #4]
 80152ba:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80152bc:	f06f 0303 	mvn.w	r3, #3
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	370c      	adds	r7, #12
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr

080152cc <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80152d6:	2300      	movs	r3, #0
 80152d8:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d102      	bne.n	80152e6 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 80152e0:	f06f 0301 	mvn.w	r3, #1
 80152e4:	e01b      	b.n	801531e <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	695b      	ldr	r3, [r3, #20]
 80152ea:	4798      	blx	r3
 80152ec:	4603      	mov	r3, r0
 80152ee:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 80152f0:	f107 030b 	add.w	r3, r7, #11
 80152f4:	4619      	mov	r1, r3
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7ed fcd0 	bl	8002c9c <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80152fc:	7afb      	ldrb	r3, [r7, #11]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d101      	bne.n	8015306 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8015302:	2300      	movs	r3, #0
 8015304:	e00b      	b.n	801531e <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	4798      	blx	r3
 801530c:	4603      	mov	r3, r0
 801530e:	461a      	mov	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	1ad3      	subs	r3, r2, r3
 8015314:	683a      	ldr	r2, [r7, #0]
 8015316:	429a      	cmp	r2, r3
 8015318:	d8ea      	bhi.n	80152f0 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 801531a:	f06f 0302 	mvn.w	r3, #2
}
 801531e:	4618      	mov	r0, r3
 8015320:	3710      	adds	r7, #16
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
	...

08015328 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b0a9      	sub	sp, #164	; 0xa4
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <vl53l1cb_get_result+0x16>
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d104      	bne.n	8015348 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801533e:	f06f 0301 	mvn.w	r3, #1
 8015342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015346:	e120      	b.n	801558a <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8015348:	f107 030c 	add.w	r3, r7, #12
 801534c:	4619      	mov	r1, r3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ee fb82 	bl	8003a58 <VL53L1_GetMultiRangingData>
 8015354:	4603      	mov	r3, r0
 8015356:	2b00      	cmp	r3, #0
 8015358:	d004      	beq.n	8015364 <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 801535a:	f04f 33ff 	mov.w	r3, #4294967295
 801535e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015362:	e112      	b.n	801558a <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015364:	2300      	movs	r3, #0
 8015366:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801536a:	e106      	b.n	801557a <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801536c:	7cbb      	ldrb	r3, [r7, #18]
 801536e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015372:	4618      	mov	r0, r3
 8015374:	6839      	ldr	r1, [r7, #0]
 8015376:	4613      	mov	r3, r2
 8015378:	011b      	lsls	r3, r3, #4
 801537a:	4413      	add	r3, r2
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	440b      	add	r3, r1
 8015380:	3304      	adds	r3, #4
 8015382:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015384:	2300      	movs	r3, #0
 8015386:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801538a:	e0eb      	b.n	8015564 <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 801538c:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015390:	4613      	mov	r3, r2
 8015392:	00db      	lsls	r3, r3, #3
 8015394:	1a9b      	subs	r3, r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	33a0      	adds	r3, #160	; 0xa0
 801539a:	443b      	add	r3, r7
 801539c:	3b78      	subs	r3, #120	; 0x78
 801539e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	da0d      	bge.n	80153c2 <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80153a6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153aa:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153ae:	6839      	ldr	r1, [r7, #0]
 80153b0:	4613      	mov	r3, r2
 80153b2:	011b      	lsls	r3, r3, #4
 80153b4:	4413      	add	r3, r2
 80153b6:	4403      	add	r3, r0
 80153b8:	009b      	lsls	r3, r3, #2
 80153ba:	440b      	add	r3, r1
 80153bc:	2200      	movs	r2, #0
 80153be:	609a      	str	r2, [r3, #8]
 80153c0:	e017      	b.n	80153f2 <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80153c2:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80153c6:	4613      	mov	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	1a9b      	subs	r3, r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	33a0      	adds	r3, #160	; 0xa0
 80153d0:	443b      	add	r3, r7
 80153d2:	3b78      	subs	r3, #120	; 0x78
 80153d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153d8:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153dc:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153e0:	461c      	mov	r4, r3
 80153e2:	6839      	ldr	r1, [r7, #0]
 80153e4:	4613      	mov	r3, r2
 80153e6:	011b      	lsls	r3, r3, #4
 80153e8:	4413      	add	r3, r2
 80153ea:	4403      	add	r3, r0
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	440b      	add	r3, r1
 80153f0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80153f8:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80153fc:	2b01      	cmp	r3, #1
 80153fe:	d136      	bne.n	801546e <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015400:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015404:	4613      	mov	r3, r2
 8015406:	00db      	lsls	r3, r3, #3
 8015408:	1a9b      	subs	r3, r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	33a0      	adds	r3, #160	; 0xa0
 801540e:	443b      	add	r3, r7
 8015410:	3b80      	subs	r3, #128	; 0x80
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	ee07 3a90 	vmov	s15, r3
 8015418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801541c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8015598 <vl53l1cb_get_result+0x270>
 8015420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015424:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801559c <vl53l1cb_get_result+0x274>
 8015428:	ee67 7a87 	vmul.f32	s15, s15, s14
 801542c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015430:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015434:	0a1b      	lsrs	r3, r3, #8
 8015436:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 801543a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801543e:	ee07 3a90 	vmov	s15, r3
 8015442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015446:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801544a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801544e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8015452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015456:	6839      	ldr	r1, [r7, #0]
 8015458:	4613      	mov	r3, r2
 801545a:	011b      	lsls	r3, r3, #4
 801545c:	4413      	add	r3, r2
 801545e:	4403      	add	r3, r0
 8015460:	3308      	adds	r3, #8
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	440b      	add	r3, r1
 8015466:	3308      	adds	r3, #8
 8015468:	edc3 7a00 	vstr	s15, [r3]
 801546c:	e00f      	b.n	801548e <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 801546e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015472:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015476:	6839      	ldr	r1, [r7, #0]
 8015478:	4613      	mov	r3, r2
 801547a:	011b      	lsls	r3, r3, #4
 801547c:	4413      	add	r3, r2
 801547e:	4403      	add	r3, r0
 8015480:	3308      	adds	r3, #8
 8015482:	009b      	lsls	r3, r3, #2
 8015484:	440b      	add	r3, r1
 8015486:	3308      	adds	r3, #8
 8015488:	f04f 0200 	mov.w	r2, #0
 801548c:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015494:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8015498:	2b01      	cmp	r3, #1
 801549a:	d136      	bne.n	801550a <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801549c:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80154a0:	4613      	mov	r3, r2
 80154a2:	00db      	lsls	r3, r3, #3
 80154a4:	1a9b      	subs	r3, r3, r2
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	33a0      	adds	r3, #160	; 0xa0
 80154aa:	443b      	add	r3, r7
 80154ac:	3b84      	subs	r3, #132	; 0x84
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	ee07 3a90 	vmov	s15, r3
 80154b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154b8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015598 <vl53l1cb_get_result+0x270>
 80154bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80154c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801559c <vl53l1cb_get_result+0x274>
 80154c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154c8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80154cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80154d0:	0a1b      	lsrs	r3, r3, #8
 80154d2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80154d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80154da:	ee07 3a90 	vmov	s15, r3
 80154de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154e2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80154e6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80154ea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80154ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80154f2:	6839      	ldr	r1, [r7, #0]
 80154f4:	4613      	mov	r3, r2
 80154f6:	011b      	lsls	r3, r3, #4
 80154f8:	4413      	add	r3, r2
 80154fa:	4403      	add	r3, r0
 80154fc:	330c      	adds	r3, #12
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	440b      	add	r3, r1
 8015502:	3308      	adds	r3, #8
 8015504:	edc3 7a00 	vstr	s15, [r3]
 8015508:	e00f      	b.n	801552a <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 801550a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801550e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015512:	6839      	ldr	r1, [r7, #0]
 8015514:	4613      	mov	r3, r2
 8015516:	011b      	lsls	r3, r3, #4
 8015518:	4413      	add	r3, r2
 801551a:	4403      	add	r3, r0
 801551c:	330c      	adds	r3, #12
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	440b      	add	r3, r1
 8015522:	3308      	adds	r3, #8
 8015524:	f04f 0200 	mov.w	r2, #0
 8015528:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 801552a:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801552e:	4613      	mov	r3, r2
 8015530:	00db      	lsls	r3, r3, #3
 8015532:	1a9b      	subs	r3, r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	33a0      	adds	r3, #160	; 0xa0
 8015538:	443b      	add	r3, r7
 801553a:	3b75      	subs	r3, #117	; 0x75
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015542:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015546:	461c      	mov	r4, r3
 8015548:	6839      	ldr	r1, [r7, #0]
 801554a:	4613      	mov	r3, r2
 801554c:	011b      	lsls	r3, r3, #4
 801554e:	4413      	add	r3, r2
 8015550:	4403      	add	r3, r0
 8015552:	3304      	adds	r3, #4
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	440b      	add	r3, r1
 8015558:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801555a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 801555e:	3301      	adds	r3, #1
 8015560:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8015564:	7cbb      	ldrb	r3, [r7, #18]
 8015566:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801556a:	429a      	cmp	r2, r3
 801556c:	f4ff af0e 	bcc.w	801538c <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015570:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015574:	3301      	adds	r3, #1
 8015576:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801557a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801557e:	2b00      	cmp	r3, #0
 8015580:	f43f aef4 	beq.w	801536c <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 8015584:	2300      	movs	r3, #0
 8015586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 801558a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 801558e:	4618      	mov	r0, r3
 8015590:	37a4      	adds	r7, #164	; 0xa4
 8015592:	46bd      	mov	sp, r7
 8015594:	bd90      	pop	{r4, r7, pc}
 8015596:	bf00      	nop
 8015598:	47800000 	.word	0x47800000
 801559c:	447a0000 	.word	0x447a0000

080155a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80155a6:	2300      	movs	r3, #0
 80155a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80155aa:	4b0c      	ldr	r3, [pc, #48]	; (80155dc <HAL_Init+0x3c>)
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4a0b      	ldr	r2, [pc, #44]	; (80155dc <HAL_Init+0x3c>)
 80155b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80155b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80155b6:	2003      	movs	r0, #3
 80155b8:	f000 f90f 	bl	80157da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80155bc:	200f      	movs	r0, #15
 80155be:	f7eb fb93 	bl	8000ce8 <HAL_InitTick>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d002      	beq.n	80155ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80155c8:	2301      	movs	r3, #1
 80155ca:	71fb      	strb	r3, [r7, #7]
 80155cc:	e001      	b.n	80155d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80155ce:	f7eb fb6a 	bl	8000ca6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80155d2:	79fb      	ldrb	r3, [r7, #7]
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	58004000 	.word	0x58004000

080155e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80155e0:	b480      	push	{r7}
 80155e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80155e4:	4b06      	ldr	r3, [pc, #24]	; (8015600 <HAL_IncTick+0x20>)
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	461a      	mov	r2, r3
 80155ea:	4b06      	ldr	r3, [pc, #24]	; (8015604 <HAL_IncTick+0x24>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	4413      	add	r3, r2
 80155f0:	4a04      	ldr	r2, [pc, #16]	; (8015604 <HAL_IncTick+0x24>)
 80155f2:	6013      	str	r3, [r2, #0]
}
 80155f4:	bf00      	nop
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr
 80155fe:	bf00      	nop
 8015600:	20000074 	.word	0x20000074
 8015604:	20008650 	.word	0x20008650

08015608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015608:	b480      	push	{r7}
 801560a:	af00      	add	r7, sp, #0
  return uwTick;
 801560c:	4b03      	ldr	r3, [pc, #12]	; (801561c <HAL_GetTick+0x14>)
 801560e:	681b      	ldr	r3, [r3, #0]
}
 8015610:	4618      	mov	r0, r3
 8015612:	46bd      	mov	sp, r7
 8015614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	20008650 	.word	0x20008650

08015620 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8015620:	b480      	push	{r7}
 8015622:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8015624:	4b03      	ldr	r3, [pc, #12]	; (8015634 <HAL_GetTickPrio+0x14>)
 8015626:	681b      	ldr	r3, [r3, #0]
}
 8015628:	4618      	mov	r0, r3
 801562a:	46bd      	mov	sp, r7
 801562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	20000070 	.word	0x20000070

08015638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015640:	f7ff ffe2 	bl	8015608 <HAL_GetTick>
 8015644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015650:	d005      	beq.n	801565e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015652:	4b0a      	ldr	r3, [pc, #40]	; (801567c <HAL_Delay+0x44>)
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	461a      	mov	r2, r3
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	4413      	add	r3, r2
 801565c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801565e:	bf00      	nop
 8015660:	f7ff ffd2 	bl	8015608 <HAL_GetTick>
 8015664:	4602      	mov	r2, r0
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	429a      	cmp	r2, r3
 801566e:	d8f7      	bhi.n	8015660 <HAL_Delay+0x28>
  {
  }
}
 8015670:	bf00      	nop
 8015672:	bf00      	nop
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	20000074 	.word	0x20000074

08015680 <__NVIC_SetPriorityGrouping>:
{
 8015680:	b480      	push	{r7}
 8015682:	b085      	sub	sp, #20
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f003 0307 	and.w	r3, r3, #7
 801568e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015690:	4b0c      	ldr	r3, [pc, #48]	; (80156c4 <__NVIC_SetPriorityGrouping+0x44>)
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801569c:	4013      	ands	r3, r2
 801569e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80156a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80156ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80156b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80156b2:	4a04      	ldr	r2, [pc, #16]	; (80156c4 <__NVIC_SetPriorityGrouping+0x44>)
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	60d3      	str	r3, [r2, #12]
}
 80156b8:	bf00      	nop
 80156ba:	3714      	adds	r7, #20
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr
 80156c4:	e000ed00 	.word	0xe000ed00

080156c8 <__NVIC_GetPriorityGrouping>:
{
 80156c8:	b480      	push	{r7}
 80156ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80156cc:	4b04      	ldr	r3, [pc, #16]	; (80156e0 <__NVIC_GetPriorityGrouping+0x18>)
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	0a1b      	lsrs	r3, r3, #8
 80156d2:	f003 0307 	and.w	r3, r3, #7
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr
 80156e0:	e000ed00 	.word	0xe000ed00

080156e4 <__NVIC_EnableIRQ>:
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	4603      	mov	r3, r0
 80156ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	db0b      	blt.n	801570e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80156f6:	79fb      	ldrb	r3, [r7, #7]
 80156f8:	f003 021f 	and.w	r2, r3, #31
 80156fc:	4907      	ldr	r1, [pc, #28]	; (801571c <__NVIC_EnableIRQ+0x38>)
 80156fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015702:	095b      	lsrs	r3, r3, #5
 8015704:	2001      	movs	r0, #1
 8015706:	fa00 f202 	lsl.w	r2, r0, r2
 801570a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801570e:	bf00      	nop
 8015710:	370c      	adds	r7, #12
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr
 801571a:	bf00      	nop
 801571c:	e000e100 	.word	0xe000e100

08015720 <__NVIC_SetPriority>:
{
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	4603      	mov	r3, r0
 8015728:	6039      	str	r1, [r7, #0]
 801572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015730:	2b00      	cmp	r3, #0
 8015732:	db0a      	blt.n	801574a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	b2da      	uxtb	r2, r3
 8015738:	490c      	ldr	r1, [pc, #48]	; (801576c <__NVIC_SetPriority+0x4c>)
 801573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801573e:	0112      	lsls	r2, r2, #4
 8015740:	b2d2      	uxtb	r2, r2
 8015742:	440b      	add	r3, r1
 8015744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015748:	e00a      	b.n	8015760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	b2da      	uxtb	r2, r3
 801574e:	4908      	ldr	r1, [pc, #32]	; (8015770 <__NVIC_SetPriority+0x50>)
 8015750:	79fb      	ldrb	r3, [r7, #7]
 8015752:	f003 030f 	and.w	r3, r3, #15
 8015756:	3b04      	subs	r3, #4
 8015758:	0112      	lsls	r2, r2, #4
 801575a:	b2d2      	uxtb	r2, r2
 801575c:	440b      	add	r3, r1
 801575e:	761a      	strb	r2, [r3, #24]
}
 8015760:	bf00      	nop
 8015762:	370c      	adds	r7, #12
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr
 801576c:	e000e100 	.word	0xe000e100
 8015770:	e000ed00 	.word	0xe000ed00

08015774 <NVIC_EncodePriority>:
{
 8015774:	b480      	push	{r7}
 8015776:	b089      	sub	sp, #36	; 0x24
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f003 0307 	and.w	r3, r3, #7
 8015786:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	f1c3 0307 	rsb	r3, r3, #7
 801578e:	2b04      	cmp	r3, #4
 8015790:	bf28      	it	cs
 8015792:	2304      	movcs	r3, #4
 8015794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	3304      	adds	r3, #4
 801579a:	2b06      	cmp	r3, #6
 801579c:	d902      	bls.n	80157a4 <NVIC_EncodePriority+0x30>
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	3b03      	subs	r3, #3
 80157a2:	e000      	b.n	80157a6 <NVIC_EncodePriority+0x32>
 80157a4:	2300      	movs	r3, #0
 80157a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157a8:	f04f 32ff 	mov.w	r2, #4294967295
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	fa02 f303 	lsl.w	r3, r2, r3
 80157b2:	43da      	mvns	r2, r3
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	401a      	ands	r2, r3
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80157bc:	f04f 31ff 	mov.w	r1, #4294967295
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	fa01 f303 	lsl.w	r3, r1, r3
 80157c6:	43d9      	mvns	r1, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157cc:	4313      	orrs	r3, r2
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3724      	adds	r7, #36	; 0x24
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr

080157da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff ff4c 	bl	8015680 <__NVIC_SetPriorityGrouping>
}
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b086      	sub	sp, #24
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	4603      	mov	r3, r0
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
 80157fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80157fe:	f7ff ff63 	bl	80156c8 <__NVIC_GetPriorityGrouping>
 8015802:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	68b9      	ldr	r1, [r7, #8]
 8015808:	6978      	ldr	r0, [r7, #20]
 801580a:	f7ff ffb3 	bl	8015774 <NVIC_EncodePriority>
 801580e:	4602      	mov	r2, r0
 8015810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015814:	4611      	mov	r1, r2
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff ff82 	bl	8015720 <__NVIC_SetPriority>
}
 801581c:	bf00      	nop
 801581e:	3718      	adds	r7, #24
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015832:	4618      	mov	r0, r3
 8015834:	f7ff ff56 	bl	80156e4 <__NVIC_EnableIRQ>
}
 8015838:	bf00      	nop
 801583a:	3708      	adds	r7, #8
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015840:	b480      	push	{r7}
 8015842:	b087      	sub	sp, #28
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801584a:	2300      	movs	r3, #0
 801584c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801584e:	e14c      	b.n	8015aea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	681a      	ldr	r2, [r3, #0]
 8015854:	2101      	movs	r1, #1
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	fa01 f303 	lsl.w	r3, r1, r3
 801585c:	4013      	ands	r3, r2
 801585e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2b00      	cmp	r3, #0
 8015864:	f000 813e 	beq.w	8015ae4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	f003 0303 	and.w	r3, r3, #3
 8015870:	2b01      	cmp	r3, #1
 8015872:	d005      	beq.n	8015880 <HAL_GPIO_Init+0x40>
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	f003 0303 	and.w	r3, r3, #3
 801587c:	2b02      	cmp	r3, #2
 801587e:	d130      	bne.n	80158e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	689b      	ldr	r3, [r3, #8]
 8015884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	005b      	lsls	r3, r3, #1
 801588a:	2203      	movs	r2, #3
 801588c:	fa02 f303 	lsl.w	r3, r2, r3
 8015890:	43db      	mvns	r3, r3
 8015892:	693a      	ldr	r2, [r7, #16]
 8015894:	4013      	ands	r3, r2
 8015896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	68da      	ldr	r2, [r3, #12]
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	005b      	lsls	r3, r3, #1
 80158a0:	fa02 f303 	lsl.w	r3, r2, r3
 80158a4:	693a      	ldr	r2, [r7, #16]
 80158a6:	4313      	orrs	r3, r2
 80158a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	693a      	ldr	r2, [r7, #16]
 80158ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80158b6:	2201      	movs	r2, #1
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	fa02 f303 	lsl.w	r3, r2, r3
 80158be:	43db      	mvns	r3, r3
 80158c0:	693a      	ldr	r2, [r7, #16]
 80158c2:	4013      	ands	r3, r2
 80158c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	091b      	lsrs	r3, r3, #4
 80158cc:	f003 0201 	and.w	r2, r3, #1
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	fa02 f303 	lsl.w	r3, r2, r3
 80158d6:	693a      	ldr	r2, [r7, #16]
 80158d8:	4313      	orrs	r3, r2
 80158da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	693a      	ldr	r2, [r7, #16]
 80158e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	f003 0303 	and.w	r3, r3, #3
 80158ea:	2b03      	cmp	r3, #3
 80158ec:	d017      	beq.n	801591e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	68db      	ldr	r3, [r3, #12]
 80158f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	2203      	movs	r2, #3
 80158fa:	fa02 f303 	lsl.w	r3, r2, r3
 80158fe:	43db      	mvns	r3, r3
 8015900:	693a      	ldr	r2, [r7, #16]
 8015902:	4013      	ands	r3, r2
 8015904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	689a      	ldr	r2, [r3, #8]
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	fa02 f303 	lsl.w	r3, r2, r3
 8015912:	693a      	ldr	r2, [r7, #16]
 8015914:	4313      	orrs	r3, r2
 8015916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	693a      	ldr	r2, [r7, #16]
 801591c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	685b      	ldr	r3, [r3, #4]
 8015922:	f003 0303 	and.w	r3, r3, #3
 8015926:	2b02      	cmp	r3, #2
 8015928:	d123      	bne.n	8015972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	08da      	lsrs	r2, r3, #3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	3208      	adds	r2, #8
 8015932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f003 0307 	and.w	r3, r3, #7
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	220f      	movs	r2, #15
 8015942:	fa02 f303 	lsl.w	r3, r2, r3
 8015946:	43db      	mvns	r3, r3
 8015948:	693a      	ldr	r2, [r7, #16]
 801594a:	4013      	ands	r3, r2
 801594c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	691a      	ldr	r2, [r3, #16]
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	f003 0307 	and.w	r3, r3, #7
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	fa02 f303 	lsl.w	r3, r2, r3
 801595e:	693a      	ldr	r2, [r7, #16]
 8015960:	4313      	orrs	r3, r2
 8015962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	08da      	lsrs	r2, r3, #3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	3208      	adds	r2, #8
 801596c:	6939      	ldr	r1, [r7, #16]
 801596e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	005b      	lsls	r3, r3, #1
 801597c:	2203      	movs	r2, #3
 801597e:	fa02 f303 	lsl.w	r3, r2, r3
 8015982:	43db      	mvns	r3, r3
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	4013      	ands	r3, r2
 8015988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	f003 0203 	and.w	r2, r3, #3
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	fa02 f303 	lsl.w	r3, r2, r3
 801599a:	693a      	ldr	r2, [r7, #16]
 801599c:	4313      	orrs	r3, r2
 801599e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	693a      	ldr	r2, [r7, #16]
 80159a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	f000 8098 	beq.w	8015ae4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80159b4:	4a54      	ldr	r2, [pc, #336]	; (8015b08 <HAL_GPIO_Init+0x2c8>)
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	089b      	lsrs	r3, r3, #2
 80159ba:	3302      	adds	r3, #2
 80159bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	f003 0303 	and.w	r3, r3, #3
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	220f      	movs	r2, #15
 80159cc:	fa02 f303 	lsl.w	r3, r2, r3
 80159d0:	43db      	mvns	r3, r3
 80159d2:	693a      	ldr	r2, [r7, #16]
 80159d4:	4013      	ands	r3, r2
 80159d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80159de:	d019      	beq.n	8015a14 <HAL_GPIO_Init+0x1d4>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	4a4a      	ldr	r2, [pc, #296]	; (8015b0c <HAL_GPIO_Init+0x2cc>)
 80159e4:	4293      	cmp	r3, r2
 80159e6:	d013      	beq.n	8015a10 <HAL_GPIO_Init+0x1d0>
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	4a49      	ldr	r2, [pc, #292]	; (8015b10 <HAL_GPIO_Init+0x2d0>)
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d00d      	beq.n	8015a0c <HAL_GPIO_Init+0x1cc>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	4a48      	ldr	r2, [pc, #288]	; (8015b14 <HAL_GPIO_Init+0x2d4>)
 80159f4:	4293      	cmp	r3, r2
 80159f6:	d007      	beq.n	8015a08 <HAL_GPIO_Init+0x1c8>
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	4a47      	ldr	r2, [pc, #284]	; (8015b18 <HAL_GPIO_Init+0x2d8>)
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d101      	bne.n	8015a04 <HAL_GPIO_Init+0x1c4>
 8015a00:	2304      	movs	r3, #4
 8015a02:	e008      	b.n	8015a16 <HAL_GPIO_Init+0x1d6>
 8015a04:	2307      	movs	r3, #7
 8015a06:	e006      	b.n	8015a16 <HAL_GPIO_Init+0x1d6>
 8015a08:	2303      	movs	r3, #3
 8015a0a:	e004      	b.n	8015a16 <HAL_GPIO_Init+0x1d6>
 8015a0c:	2302      	movs	r3, #2
 8015a0e:	e002      	b.n	8015a16 <HAL_GPIO_Init+0x1d6>
 8015a10:	2301      	movs	r3, #1
 8015a12:	e000      	b.n	8015a16 <HAL_GPIO_Init+0x1d6>
 8015a14:	2300      	movs	r3, #0
 8015a16:	697a      	ldr	r2, [r7, #20]
 8015a18:	f002 0203 	and.w	r2, r2, #3
 8015a1c:	0092      	lsls	r2, r2, #2
 8015a1e:	4093      	lsls	r3, r2
 8015a20:	693a      	ldr	r2, [r7, #16]
 8015a22:	4313      	orrs	r3, r2
 8015a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8015a26:	4938      	ldr	r1, [pc, #224]	; (8015b08 <HAL_GPIO_Init+0x2c8>)
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	089b      	lsrs	r3, r3, #2
 8015a2c:	3302      	adds	r3, #2
 8015a2e:	693a      	ldr	r2, [r7, #16]
 8015a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015a34:	4b39      	ldr	r3, [pc, #228]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	43db      	mvns	r3, r3
 8015a3e:	693a      	ldr	r2, [r7, #16]
 8015a40:	4013      	ands	r3, r2
 8015a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d003      	beq.n	8015a58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015a50:	693a      	ldr	r2, [r7, #16]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	4313      	orrs	r3, r2
 8015a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015a58:	4a30      	ldr	r2, [pc, #192]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015a5a:	693b      	ldr	r3, [r7, #16]
 8015a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015a5e:	4b2f      	ldr	r3, [pc, #188]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	43db      	mvns	r3, r3
 8015a68:	693a      	ldr	r2, [r7, #16]
 8015a6a:	4013      	ands	r3, r2
 8015a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d003      	beq.n	8015a82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015a7a:	693a      	ldr	r2, [r7, #16]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015a82:	4a26      	ldr	r2, [pc, #152]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015a84:	693b      	ldr	r3, [r7, #16]
 8015a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015a88:	4b24      	ldr	r3, [pc, #144]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	43db      	mvns	r3, r3
 8015a94:	693a      	ldr	r2, [r7, #16]
 8015a96:	4013      	ands	r3, r2
 8015a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d003      	beq.n	8015aae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8015aa6:	693a      	ldr	r2, [r7, #16]
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	4313      	orrs	r3, r2
 8015aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015aae:	4a1b      	ldr	r2, [pc, #108]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8015ab6:	4b19      	ldr	r3, [pc, #100]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	43db      	mvns	r3, r3
 8015ac2:	693a      	ldr	r2, [r7, #16]
 8015ac4:	4013      	ands	r3, r2
 8015ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d003      	beq.n	8015adc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8015ad4:	693a      	ldr	r2, [r7, #16]
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	4313      	orrs	r3, r2
 8015ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015adc:	4a0f      	ldr	r2, [pc, #60]	; (8015b1c <HAL_GPIO_Init+0x2dc>)
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	681a      	ldr	r2, [r3, #0]
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	fa22 f303 	lsr.w	r3, r2, r3
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f47f aeab 	bne.w	8015850 <HAL_GPIO_Init+0x10>
  }
}
 8015afa:	bf00      	nop
 8015afc:	bf00      	nop
 8015afe:	371c      	adds	r7, #28
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr
 8015b08:	40010000 	.word	0x40010000
 8015b0c:	48000400 	.word	0x48000400
 8015b10:	48000800 	.word	0x48000800
 8015b14:	48000c00 	.word	0x48000c00
 8015b18:	48001000 	.word	0x48001000
 8015b1c:	58000800 	.word	0x58000800

08015b20 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015b20:	b480      	push	{r7}
 8015b22:	b087      	sub	sp, #28
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8015b2e:	e0bb      	b.n	8015ca8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8015b30:	2201      	movs	r2, #1
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	fa02 f303 	lsl.w	r3, r2, r3
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	4013      	ands	r3, r2
 8015b3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 80ae 	beq.w	8015ca2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8015b46:	4a5f      	ldr	r2, [pc, #380]	; (8015cc4 <HAL_GPIO_DeInit+0x1a4>)
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	089b      	lsrs	r3, r3, #2
 8015b4c:	3302      	adds	r3, #2
 8015b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	f003 0303 	and.w	r3, r3, #3
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	220f      	movs	r2, #15
 8015b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b62:	68fa      	ldr	r2, [r7, #12]
 8015b64:	4013      	ands	r3, r2
 8015b66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015b6e:	d019      	beq.n	8015ba4 <HAL_GPIO_DeInit+0x84>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	4a55      	ldr	r2, [pc, #340]	; (8015cc8 <HAL_GPIO_DeInit+0x1a8>)
 8015b74:	4293      	cmp	r3, r2
 8015b76:	d013      	beq.n	8015ba0 <HAL_GPIO_DeInit+0x80>
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	4a54      	ldr	r2, [pc, #336]	; (8015ccc <HAL_GPIO_DeInit+0x1ac>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d00d      	beq.n	8015b9c <HAL_GPIO_DeInit+0x7c>
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	4a53      	ldr	r2, [pc, #332]	; (8015cd0 <HAL_GPIO_DeInit+0x1b0>)
 8015b84:	4293      	cmp	r3, r2
 8015b86:	d007      	beq.n	8015b98 <HAL_GPIO_DeInit+0x78>
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4a52      	ldr	r2, [pc, #328]	; (8015cd4 <HAL_GPIO_DeInit+0x1b4>)
 8015b8c:	4293      	cmp	r3, r2
 8015b8e:	d101      	bne.n	8015b94 <HAL_GPIO_DeInit+0x74>
 8015b90:	2304      	movs	r3, #4
 8015b92:	e008      	b.n	8015ba6 <HAL_GPIO_DeInit+0x86>
 8015b94:	2307      	movs	r3, #7
 8015b96:	e006      	b.n	8015ba6 <HAL_GPIO_DeInit+0x86>
 8015b98:	2303      	movs	r3, #3
 8015b9a:	e004      	b.n	8015ba6 <HAL_GPIO_DeInit+0x86>
 8015b9c:	2302      	movs	r3, #2
 8015b9e:	e002      	b.n	8015ba6 <HAL_GPIO_DeInit+0x86>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	e000      	b.n	8015ba6 <HAL_GPIO_DeInit+0x86>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	697a      	ldr	r2, [r7, #20]
 8015ba8:	f002 0203 	and.w	r2, r2, #3
 8015bac:	0092      	lsls	r2, r2, #2
 8015bae:	4093      	lsls	r3, r2
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	d136      	bne.n	8015c24 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8015bb6:	4b48      	ldr	r3, [pc, #288]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	43db      	mvns	r3, r3
 8015bc0:	4945      	ldr	r1, [pc, #276]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bc2:	4013      	ands	r3, r2
 8015bc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015bc8:	4b43      	ldr	r3, [pc, #268]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	43db      	mvns	r3, r3
 8015bd2:	4941      	ldr	r1, [pc, #260]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bd4:	4013      	ands	r3, r2
 8015bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015bda:	4b3f      	ldr	r3, [pc, #252]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	43db      	mvns	r3, r3
 8015be2:	493d      	ldr	r1, [pc, #244]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015be4:	4013      	ands	r3, r2
 8015be6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015be8:	4b3b      	ldr	r3, [pc, #236]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bea:	685a      	ldr	r2, [r3, #4]
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	43db      	mvns	r3, r3
 8015bf0:	4939      	ldr	r1, [pc, #228]	; (8015cd8 <HAL_GPIO_DeInit+0x1b8>)
 8015bf2:	4013      	ands	r3, r2
 8015bf4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	f003 0303 	and.w	r3, r3, #3
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	220f      	movs	r2, #15
 8015c00:	fa02 f303 	lsl.w	r3, r2, r3
 8015c04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015c06:	4a2f      	ldr	r2, [pc, #188]	; (8015cc4 <HAL_GPIO_DeInit+0x1a4>)
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	089b      	lsrs	r3, r3, #2
 8015c0c:	3302      	adds	r3, #2
 8015c0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	43da      	mvns	r2, r3
 8015c16:	482b      	ldr	r0, [pc, #172]	; (8015cc4 <HAL_GPIO_DeInit+0x1a4>)
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	089b      	lsrs	r3, r3, #2
 8015c1c:	400a      	ands	r2, r1
 8015c1e:	3302      	adds	r3, #2
 8015c20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681a      	ldr	r2, [r3, #0]
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	2103      	movs	r1, #3
 8015c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8015c32:	431a      	orrs	r2, r3
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	08da      	lsrs	r2, r3, #3
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	3208      	adds	r2, #8
 8015c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	f003 0307 	and.w	r3, r3, #7
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	220f      	movs	r2, #15
 8015c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c52:	43db      	mvns	r3, r3
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	08d2      	lsrs	r2, r2, #3
 8015c58:	4019      	ands	r1, r3
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	3208      	adds	r2, #8
 8015c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	68da      	ldr	r2, [r3, #12]
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	2103      	movs	r1, #3
 8015c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8015c70:	43db      	mvns	r3, r3
 8015c72:	401a      	ands	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	685a      	ldr	r2, [r3, #4]
 8015c7c:	2101      	movs	r1, #1
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	fa01 f303 	lsl.w	r3, r1, r3
 8015c84:	43db      	mvns	r3, r3
 8015c86:	401a      	ands	r2, r3
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	689a      	ldr	r2, [r3, #8]
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	005b      	lsls	r3, r3, #1
 8015c94:	2103      	movs	r1, #3
 8015c96:	fa01 f303 	lsl.w	r3, r1, r3
 8015c9a:	43db      	mvns	r3, r3
 8015c9c:	401a      	ands	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015ca8:	683a      	ldr	r2, [r7, #0]
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	fa22 f303 	lsr.w	r3, r2, r3
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	f47f af3d 	bne.w	8015b30 <HAL_GPIO_DeInit+0x10>
  }
}
 8015cb6:	bf00      	nop
 8015cb8:	bf00      	nop
 8015cba:	371c      	adds	r7, #28
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	40010000 	.word	0x40010000
 8015cc8:	48000400 	.word	0x48000400
 8015ccc:	48000800 	.word	0x48000800
 8015cd0:	48000c00 	.word	0x48000c00
 8015cd4:	48001000 	.word	0x48001000
 8015cd8:	58000800 	.word	0x58000800

08015cdc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b085      	sub	sp, #20
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	691a      	ldr	r2, [r3, #16]
 8015cec:	887b      	ldrh	r3, [r7, #2]
 8015cee:	4013      	ands	r3, r2
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d002      	beq.n	8015cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	73fb      	strb	r3, [r7, #15]
 8015cf8:	e001      	b.n	8015cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3714      	adds	r7, #20
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b083      	sub	sp, #12
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	460b      	mov	r3, r1
 8015d16:	807b      	strh	r3, [r7, #2]
 8015d18:	4613      	mov	r3, r2
 8015d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015d1c:	787b      	ldrb	r3, [r7, #1]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015d22:	887a      	ldrh	r2, [r7, #2]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015d28:	e002      	b.n	8015d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015d2a:	887a      	ldrh	r2, [r7, #2]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015d30:	bf00      	nop
 8015d32:	370c      	adds	r7, #12
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d101      	bne.n	8015d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e081      	b.n	8015e52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d106      	bne.n	8015d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 f8a8 	bl	8015eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2224      	movs	r2, #36	; 0x24
 8015d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f022 0201 	bic.w	r2, r2, #1
 8015d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015d8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	689a      	ldr	r2, [r3, #8]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015d9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d107      	bne.n	8015db6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	689a      	ldr	r2, [r3, #8]
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015db2:	609a      	str	r2, [r3, #8]
 8015db4:	e006      	b.n	8015dc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	689a      	ldr	r2, [r3, #8]
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015dc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d104      	bne.n	8015dd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	6812      	ldr	r2, [r2, #0]
 8015de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	68da      	ldr	r2, [r3, #12]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	691a      	ldr	r2, [r3, #16]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	695b      	ldr	r3, [r3, #20]
 8015e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	699b      	ldr	r3, [r3, #24]
 8015e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	430a      	orrs	r2, r1
 8015e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	69d9      	ldr	r1, [r3, #28]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6a1a      	ldr	r2, [r3, #32]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	430a      	orrs	r2, r1
 8015e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	f042 0201 	orr.w	r2, r2, #1
 8015e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2200      	movs	r2, #0
 8015e38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2220      	movs	r2, #32
 8015e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2200      	movs	r2, #0
 8015e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015e50:	2300      	movs	r3, #0
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3708      	adds	r7, #8
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}

08015e5a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015e5a:	b580      	push	{r7, lr}
 8015e5c:	b082      	sub	sp, #8
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d101      	bne.n	8015e6c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	e021      	b.n	8015eb0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2224      	movs	r2, #36	; 0x24
 8015e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f022 0201 	bic.w	r2, r2, #1
 8015e82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 f821 	bl	8015ecc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015eae:	2300      	movs	r3, #0
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3708      	adds	r7, #8
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015ec0:	bf00      	nop
 8015ec2:	370c      	adds	r7, #12
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr

08015ecc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015ed4:	bf00      	nop
 8015ed6:	370c      	adds	r7, #12
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr

08015ee0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b088      	sub	sp, #32
 8015ee4:	af02      	add	r7, sp, #8
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	607a      	str	r2, [r7, #4]
 8015eea:	461a      	mov	r2, r3
 8015eec:	460b      	mov	r3, r1
 8015eee:	817b      	strh	r3, [r7, #10]
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015efa:	b2db      	uxtb	r3, r3
 8015efc:	2b20      	cmp	r3, #32
 8015efe:	f040 80da 	bne.w	80160b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015f08:	2b01      	cmp	r3, #1
 8015f0a:	d101      	bne.n	8015f10 <HAL_I2C_Master_Transmit+0x30>
 8015f0c:	2302      	movs	r3, #2
 8015f0e:	e0d3      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2201      	movs	r2, #1
 8015f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f18:	f7ff fb76 	bl	8015608 <HAL_GetTick>
 8015f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	2319      	movs	r3, #25
 8015f24:	2201      	movs	r2, #1
 8015f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015f2a:	68f8      	ldr	r0, [r7, #12]
 8015f2c:	f000 fa00 	bl	8016330 <I2C_WaitOnFlagUntilTimeout>
 8015f30:	4603      	mov	r3, r0
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d001      	beq.n	8015f3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015f36:	2301      	movs	r3, #1
 8015f38:	e0be      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2221      	movs	r2, #33	; 0x21
 8015f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2210      	movs	r2, #16
 8015f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	893a      	ldrh	r2, [r7, #8]
 8015f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	2bff      	cmp	r3, #255	; 0xff
 8015f6a:	d90e      	bls.n	8015f8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	22ff      	movs	r2, #255	; 0xff
 8015f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	8979      	ldrh	r1, [r7, #10]
 8015f7a:	4b51      	ldr	r3, [pc, #324]	; (80160c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015f82:	68f8      	ldr	r0, [r7, #12]
 8015f84:	f000 fbf6 	bl	8016774 <I2C_TransferConfig>
 8015f88:	e06c      	b.n	8016064 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f8e:	b29a      	uxth	r2, r3
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f98:	b2da      	uxtb	r2, r3
 8015f9a:	8979      	ldrh	r1, [r7, #10]
 8015f9c:	4b48      	ldr	r3, [pc, #288]	; (80160c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015f9e:	9300      	str	r3, [sp, #0]
 8015fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015fa4:	68f8      	ldr	r0, [r7, #12]
 8015fa6:	f000 fbe5 	bl	8016774 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015faa:	e05b      	b.n	8016064 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015fac:	697a      	ldr	r2, [r7, #20]
 8015fae:	6a39      	ldr	r1, [r7, #32]
 8015fb0:	68f8      	ldr	r0, [r7, #12]
 8015fb2:	f000 f9fd 	bl	80163b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d001      	beq.n	8015fc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	e07b      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc4:	781a      	ldrb	r2, [r3, #0]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fd0:	1c5a      	adds	r2, r3, #1
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	3b01      	subs	r3, #1
 8015fde:	b29a      	uxth	r2, r3
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	b29a      	uxth	r2, r3
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d034      	beq.n	8016064 <HAL_I2C_Master_Transmit+0x184>
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d130      	bne.n	8016064 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	9300      	str	r3, [sp, #0]
 8016006:	6a3b      	ldr	r3, [r7, #32]
 8016008:	2200      	movs	r2, #0
 801600a:	2180      	movs	r1, #128	; 0x80
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f000 f98f 	bl	8016330 <I2C_WaitOnFlagUntilTimeout>
 8016012:	4603      	mov	r3, r0
 8016014:	2b00      	cmp	r3, #0
 8016016:	d001      	beq.n	801601c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016018:	2301      	movs	r3, #1
 801601a:	e04d      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016020:	b29b      	uxth	r3, r3
 8016022:	2bff      	cmp	r3, #255	; 0xff
 8016024:	d90e      	bls.n	8016044 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	22ff      	movs	r2, #255	; 0xff
 801602a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016030:	b2da      	uxtb	r2, r3
 8016032:	8979      	ldrh	r1, [r7, #10]
 8016034:	2300      	movs	r3, #0
 8016036:	9300      	str	r3, [sp, #0]
 8016038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f000 fb99 	bl	8016774 <I2C_TransferConfig>
 8016042:	e00f      	b.n	8016064 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016048:	b29a      	uxth	r2, r3
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016052:	b2da      	uxtb	r2, r3
 8016054:	8979      	ldrh	r1, [r7, #10]
 8016056:	2300      	movs	r3, #0
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f000 fb88 	bl	8016774 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016068:	b29b      	uxth	r3, r3
 801606a:	2b00      	cmp	r3, #0
 801606c:	d19e      	bne.n	8015fac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801606e:	697a      	ldr	r2, [r7, #20]
 8016070:	6a39      	ldr	r1, [r7, #32]
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f000 f9dc 	bl	8016430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016078:	4603      	mov	r3, r0
 801607a:	2b00      	cmp	r3, #0
 801607c:	d001      	beq.n	8016082 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801607e:	2301      	movs	r3, #1
 8016080:	e01a      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2220      	movs	r2, #32
 8016088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	6859      	ldr	r1, [r3, #4]
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	4b0b      	ldr	r3, [pc, #44]	; (80160c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8016096:	400b      	ands	r3, r1
 8016098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2220      	movs	r2, #32
 801609e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2200      	movs	r2, #0
 80160a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80160b2:	2300      	movs	r3, #0
 80160b4:	e000      	b.n	80160b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80160b6:	2302      	movs	r3, #2
  }
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3718      	adds	r7, #24
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	80002000 	.word	0x80002000
 80160c4:	fe00e800 	.word	0xfe00e800

080160c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b088      	sub	sp, #32
 80160cc:	af02      	add	r7, sp, #8
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	607a      	str	r2, [r7, #4]
 80160d2:	461a      	mov	r2, r3
 80160d4:	460b      	mov	r3, r1
 80160d6:	817b      	strh	r3, [r7, #10]
 80160d8:	4613      	mov	r3, r2
 80160da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	2b20      	cmp	r3, #32
 80160e6:	f040 80db 	bne.w	80162a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d101      	bne.n	80160f8 <HAL_I2C_Master_Receive+0x30>
 80160f4:	2302      	movs	r3, #2
 80160f6:	e0d4      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2201      	movs	r2, #1
 80160fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016100:	f7ff fa82 	bl	8015608 <HAL_GetTick>
 8016104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	9300      	str	r3, [sp, #0]
 801610a:	2319      	movs	r3, #25
 801610c:	2201      	movs	r2, #1
 801610e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	f000 f90c 	bl	8016330 <I2C_WaitOnFlagUntilTimeout>
 8016118:	4603      	mov	r3, r0
 801611a:	2b00      	cmp	r3, #0
 801611c:	d001      	beq.n	8016122 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801611e:	2301      	movs	r3, #1
 8016120:	e0bf      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2222      	movs	r2, #34	; 0x22
 8016126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2210      	movs	r2, #16
 801612e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	2200      	movs	r2, #0
 8016136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	893a      	ldrh	r2, [r7, #8]
 8016142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2200      	movs	r2, #0
 8016148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801614e:	b29b      	uxth	r3, r3
 8016150:	2bff      	cmp	r3, #255	; 0xff
 8016152:	d90e      	bls.n	8016172 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	22ff      	movs	r2, #255	; 0xff
 8016158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801615e:	b2da      	uxtb	r2, r3
 8016160:	8979      	ldrh	r1, [r7, #10]
 8016162:	4b52      	ldr	r3, [pc, #328]	; (80162ac <HAL_I2C_Master_Receive+0x1e4>)
 8016164:	9300      	str	r3, [sp, #0]
 8016166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801616a:	68f8      	ldr	r0, [r7, #12]
 801616c:	f000 fb02 	bl	8016774 <I2C_TransferConfig>
 8016170:	e06d      	b.n	801624e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016176:	b29a      	uxth	r2, r3
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016180:	b2da      	uxtb	r2, r3
 8016182:	8979      	ldrh	r1, [r7, #10]
 8016184:	4b49      	ldr	r3, [pc, #292]	; (80162ac <HAL_I2C_Master_Receive+0x1e4>)
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 faf1 	bl	8016774 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016192:	e05c      	b.n	801624e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016194:	697a      	ldr	r2, [r7, #20]
 8016196:	6a39      	ldr	r1, [r7, #32]
 8016198:	68f8      	ldr	r0, [r7, #12]
 801619a:	f000 f985 	bl	80164a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d001      	beq.n	80161a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80161a4:	2301      	movs	r3, #1
 80161a6:	e07c      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b2:	b2d2      	uxtb	r2, r2
 80161b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161c4:	3b01      	subs	r3, #1
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	3b01      	subs	r3, #1
 80161d4:	b29a      	uxth	r2, r3
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161de:	b29b      	uxth	r3, r3
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d034      	beq.n	801624e <HAL_I2C_Master_Receive+0x186>
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d130      	bne.n	801624e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	9300      	str	r3, [sp, #0]
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	2200      	movs	r2, #0
 80161f4:	2180      	movs	r1, #128	; 0x80
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f000 f89a 	bl	8016330 <I2C_WaitOnFlagUntilTimeout>
 80161fc:	4603      	mov	r3, r0
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d001      	beq.n	8016206 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8016202:	2301      	movs	r3, #1
 8016204:	e04d      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801620a:	b29b      	uxth	r3, r3
 801620c:	2bff      	cmp	r3, #255	; 0xff
 801620e:	d90e      	bls.n	801622e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	22ff      	movs	r2, #255	; 0xff
 8016214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801621a:	b2da      	uxtb	r2, r3
 801621c:	8979      	ldrh	r1, [r7, #10]
 801621e:	2300      	movs	r3, #0
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016226:	68f8      	ldr	r0, [r7, #12]
 8016228:	f000 faa4 	bl	8016774 <I2C_TransferConfig>
 801622c:	e00f      	b.n	801624e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016232:	b29a      	uxth	r2, r3
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801623c:	b2da      	uxtb	r2, r3
 801623e:	8979      	ldrh	r1, [r7, #10]
 8016240:	2300      	movs	r3, #0
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	f000 fa93 	bl	8016774 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016252:	b29b      	uxth	r3, r3
 8016254:	2b00      	cmp	r3, #0
 8016256:	d19d      	bne.n	8016194 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016258:	697a      	ldr	r2, [r7, #20]
 801625a:	6a39      	ldr	r1, [r7, #32]
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f000 f8e7 	bl	8016430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016262:	4603      	mov	r3, r0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d001      	beq.n	801626c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016268:	2301      	movs	r3, #1
 801626a:	e01a      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2220      	movs	r2, #32
 8016272:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	6859      	ldr	r1, [r3, #4]
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	4b0c      	ldr	r3, [pc, #48]	; (80162b0 <HAL_I2C_Master_Receive+0x1e8>)
 8016280:	400b      	ands	r3, r1
 8016282:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2220      	movs	r2, #32
 8016288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2200      	movs	r2, #0
 8016290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	2200      	movs	r2, #0
 8016298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801629c:	2300      	movs	r3, #0
 801629e:	e000      	b.n	80162a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80162a0:	2302      	movs	r3, #2
  }
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3718      	adds	r7, #24
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	80002400 	.word	0x80002400
 80162b0:	fe00e800 	.word	0xfe00e800

080162b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80162c2:	b2db      	uxtb	r3, r3
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	370c      	adds	r7, #12
 80162c8:	46bd      	mov	sp, r7
 80162ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ce:	4770      	bx	lr

080162d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80162dc:	4618      	mov	r0, r3
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b083      	sub	sp, #12
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	699b      	ldr	r3, [r3, #24]
 80162f6:	f003 0302 	and.w	r3, r3, #2
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d103      	bne.n	8016306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2200      	movs	r2, #0
 8016304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	699b      	ldr	r3, [r3, #24]
 801630c:	f003 0301 	and.w	r3, r3, #1
 8016310:	2b01      	cmp	r3, #1
 8016312:	d007      	beq.n	8016324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	699a      	ldr	r2, [r3, #24]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	f042 0201 	orr.w	r2, r2, #1
 8016322:	619a      	str	r2, [r3, #24]
  }
}
 8016324:	bf00      	nop
 8016326:	370c      	adds	r7, #12
 8016328:	46bd      	mov	sp, r7
 801632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632e:	4770      	bx	lr

08016330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b084      	sub	sp, #16
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	603b      	str	r3, [r7, #0]
 801633c:	4613      	mov	r3, r2
 801633e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016340:	e022      	b.n	8016388 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016348:	d01e      	beq.n	8016388 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801634a:	f7ff f95d 	bl	8015608 <HAL_GetTick>
 801634e:	4602      	mov	r2, r0
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	1ad3      	subs	r3, r2, r3
 8016354:	683a      	ldr	r2, [r7, #0]
 8016356:	429a      	cmp	r2, r3
 8016358:	d302      	bcc.n	8016360 <I2C_WaitOnFlagUntilTimeout+0x30>
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d113      	bne.n	8016388 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016364:	f043 0220 	orr.w	r2, r3, #32
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	2220      	movs	r2, #32
 8016370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2200      	movs	r2, #0
 8016378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	2200      	movs	r2, #0
 8016380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8016384:	2301      	movs	r3, #1
 8016386:	e00f      	b.n	80163a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	699a      	ldr	r2, [r3, #24]
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	4013      	ands	r3, r2
 8016392:	68ba      	ldr	r2, [r7, #8]
 8016394:	429a      	cmp	r2, r3
 8016396:	bf0c      	ite	eq
 8016398:	2301      	moveq	r3, #1
 801639a:	2300      	movne	r3, #0
 801639c:	b2db      	uxtb	r3, r3
 801639e:	461a      	mov	r2, r3
 80163a0:	79fb      	ldrb	r3, [r7, #7]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d0cd      	beq.n	8016342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80163bc:	e02c      	b.n	8016418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	68b9      	ldr	r1, [r7, #8]
 80163c2:	68f8      	ldr	r0, [r7, #12]
 80163c4:	f000 f8ea 	bl	801659c <I2C_IsErrorOccurred>
 80163c8:	4603      	mov	r3, r0
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d001      	beq.n	80163d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80163ce:	2301      	movs	r3, #1
 80163d0:	e02a      	b.n	8016428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163d8:	d01e      	beq.n	8016418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163da:	f7ff f915 	bl	8015608 <HAL_GetTick>
 80163de:	4602      	mov	r2, r0
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	1ad3      	subs	r3, r2, r3
 80163e4:	68ba      	ldr	r2, [r7, #8]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d302      	bcc.n	80163f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d113      	bne.n	8016418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163f4:	f043 0220 	orr.w	r2, r3, #32
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2220      	movs	r2, #32
 8016400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2200      	movs	r2, #0
 8016408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016414:	2301      	movs	r3, #1
 8016416:	e007      	b.n	8016428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	699b      	ldr	r3, [r3, #24]
 801641e:	f003 0302 	and.w	r3, r3, #2
 8016422:	2b02      	cmp	r3, #2
 8016424:	d1cb      	bne.n	80163be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3710      	adds	r7, #16
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}

08016430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	60f8      	str	r0, [r7, #12]
 8016438:	60b9      	str	r1, [r7, #8]
 801643a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801643c:	e028      	b.n	8016490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	68b9      	ldr	r1, [r7, #8]
 8016442:	68f8      	ldr	r0, [r7, #12]
 8016444:	f000 f8aa 	bl	801659c <I2C_IsErrorOccurred>
 8016448:	4603      	mov	r3, r0
 801644a:	2b00      	cmp	r3, #0
 801644c:	d001      	beq.n	8016452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801644e:	2301      	movs	r3, #1
 8016450:	e026      	b.n	80164a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016452:	f7ff f8d9 	bl	8015608 <HAL_GetTick>
 8016456:	4602      	mov	r2, r0
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	1ad3      	subs	r3, r2, r3
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	429a      	cmp	r2, r3
 8016460:	d302      	bcc.n	8016468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d113      	bne.n	8016490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801646c:	f043 0220 	orr.w	r2, r3, #32
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2220      	movs	r2, #32
 8016478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2200      	movs	r2, #0
 8016480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	2200      	movs	r2, #0
 8016488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801648c:	2301      	movs	r3, #1
 801648e:	e007      	b.n	80164a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	699b      	ldr	r3, [r3, #24]
 8016496:	f003 0320 	and.w	r3, r3, #32
 801649a:	2b20      	cmp	r3, #32
 801649c:	d1cf      	bne.n	801643e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801649e:	2300      	movs	r3, #0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3710      	adds	r7, #16
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80164b4:	e064      	b.n	8016580 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	68b9      	ldr	r1, [r7, #8]
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	f000 f86e 	bl	801659c <I2C_IsErrorOccurred>
 80164c0:	4603      	mov	r3, r0
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d001      	beq.n	80164ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80164c6:	2301      	movs	r3, #1
 80164c8:	e062      	b.n	8016590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	699b      	ldr	r3, [r3, #24]
 80164d0:	f003 0320 	and.w	r3, r3, #32
 80164d4:	2b20      	cmp	r3, #32
 80164d6:	d138      	bne.n	801654a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	699b      	ldr	r3, [r3, #24]
 80164de:	f003 0304 	and.w	r3, r3, #4
 80164e2:	2b04      	cmp	r3, #4
 80164e4:	d105      	bne.n	80164f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d001      	beq.n	80164f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80164ee:	2300      	movs	r3, #0
 80164f0:	e04e      	b.n	8016590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	699b      	ldr	r3, [r3, #24]
 80164f8:	f003 0310 	and.w	r3, r3, #16
 80164fc:	2b10      	cmp	r3, #16
 80164fe:	d107      	bne.n	8016510 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2210      	movs	r2, #16
 8016506:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2204      	movs	r2, #4
 801650c:	645a      	str	r2, [r3, #68]	; 0x44
 801650e:	e002      	b.n	8016516 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2200      	movs	r2, #0
 8016514:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2220      	movs	r2, #32
 801651c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	6859      	ldr	r1, [r3, #4]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	681a      	ldr	r2, [r3, #0]
 8016528:	4b1b      	ldr	r3, [pc, #108]	; (8016598 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 801652a:	400b      	ands	r3, r1
 801652c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	2220      	movs	r2, #32
 8016532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2200      	movs	r2, #0
 801653a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2200      	movs	r2, #0
 8016542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016546:	2301      	movs	r3, #1
 8016548:	e022      	b.n	8016590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801654a:	f7ff f85d 	bl	8015608 <HAL_GetTick>
 801654e:	4602      	mov	r2, r0
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	1ad3      	subs	r3, r2, r3
 8016554:	68ba      	ldr	r2, [r7, #8]
 8016556:	429a      	cmp	r2, r3
 8016558:	d302      	bcc.n	8016560 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d10f      	bne.n	8016580 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016564:	f043 0220 	orr.w	r2, r3, #32
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2220      	movs	r2, #32
 8016570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2200      	movs	r2, #0
 8016578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801657c:	2301      	movs	r3, #1
 801657e:	e007      	b.n	8016590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	699b      	ldr	r3, [r3, #24]
 8016586:	f003 0304 	and.w	r3, r3, #4
 801658a:	2b04      	cmp	r3, #4
 801658c:	d193      	bne.n	80164b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801658e:	2300      	movs	r3, #0
}
 8016590:	4618      	mov	r0, r3
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}
 8016598:	fe00e800 	.word	0xfe00e800

0801659c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b08a      	sub	sp, #40	; 0x28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80165a8:	2300      	movs	r3, #0
 80165aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	699b      	ldr	r3, [r3, #24]
 80165b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	f003 0310 	and.w	r3, r3, #16
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d075      	beq.n	80166b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2210      	movs	r2, #16
 80165ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80165d0:	e056      	b.n	8016680 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165d8:	d052      	beq.n	8016680 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80165da:	f7ff f815 	bl	8015608 <HAL_GetTick>
 80165de:	4602      	mov	r2, r0
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	1ad3      	subs	r3, r2, r3
 80165e4:	68ba      	ldr	r2, [r7, #8]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d302      	bcc.n	80165f0 <I2C_IsErrorOccurred+0x54>
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d147      	bne.n	8016680 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80165fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	699b      	ldr	r3, [r3, #24]
 801660a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801660e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016612:	d12e      	bne.n	8016672 <I2C_IsErrorOccurred+0xd6>
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801661a:	d02a      	beq.n	8016672 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 801661c:	7cfb      	ldrb	r3, [r7, #19]
 801661e:	2b20      	cmp	r3, #32
 8016620:	d027      	beq.n	8016672 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	685a      	ldr	r2, [r3, #4]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016632:	f7fe ffe9 	bl	8015608 <HAL_GetTick>
 8016636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016638:	e01b      	b.n	8016672 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801663a:	f7fe ffe5 	bl	8015608 <HAL_GetTick>
 801663e:	4602      	mov	r2, r0
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	1ad3      	subs	r3, r2, r3
 8016644:	2b19      	cmp	r3, #25
 8016646:	d914      	bls.n	8016672 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801664c:	f043 0220 	orr.w	r2, r3, #32
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2220      	movs	r2, #32
 8016658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2200      	movs	r2, #0
 8016660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	2200      	movs	r2, #0
 8016668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 801666c:	2301      	movs	r3, #1
 801666e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	699b      	ldr	r3, [r3, #24]
 8016678:	f003 0320 	and.w	r3, r3, #32
 801667c:	2b20      	cmp	r3, #32
 801667e:	d1dc      	bne.n	801663a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	699b      	ldr	r3, [r3, #24]
 8016686:	f003 0320 	and.w	r3, r3, #32
 801668a:	2b20      	cmp	r3, #32
 801668c:	d003      	beq.n	8016696 <I2C_IsErrorOccurred+0xfa>
 801668e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016692:	2b00      	cmp	r3, #0
 8016694:	d09d      	beq.n	80165d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801669a:	2b00      	cmp	r3, #0
 801669c:	d103      	bne.n	80166a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	2220      	movs	r2, #32
 80166a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80166a6:	6a3b      	ldr	r3, [r7, #32]
 80166a8:	f043 0304 	orr.w	r3, r3, #4
 80166ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80166ae:	2301      	movs	r3, #1
 80166b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	699b      	ldr	r3, [r3, #24]
 80166ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00b      	beq.n	80166de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80166c6:	6a3b      	ldr	r3, [r7, #32]
 80166c8:	f043 0301 	orr.w	r3, r3, #1
 80166cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80166d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80166d8:	2301      	movs	r3, #1
 80166da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d00b      	beq.n	8016700 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80166e8:	6a3b      	ldr	r3, [r7, #32]
 80166ea:	f043 0308 	orr.w	r3, r3, #8
 80166ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80166f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80166fa:	2301      	movs	r3, #1
 80166fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016706:	2b00      	cmp	r3, #0
 8016708:	d00b      	beq.n	8016722 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	f043 0302 	orr.w	r3, r3, #2
 8016710:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f44f 7200 	mov.w	r2, #512	; 0x200
 801671a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801671c:	2301      	movs	r3, #1
 801671e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016726:	2b00      	cmp	r3, #0
 8016728:	d01c      	beq.n	8016764 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801672a:	68f8      	ldr	r0, [r7, #12]
 801672c:	f7ff fddc 	bl	80162e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	6859      	ldr	r1, [r3, #4]
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	4b0d      	ldr	r3, [pc, #52]	; (8016770 <I2C_IsErrorOccurred+0x1d4>)
 801673c:	400b      	ands	r3, r1
 801673e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016744:	6a3b      	ldr	r3, [r7, #32]
 8016746:	431a      	orrs	r2, r3
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	2220      	movs	r2, #32
 8016750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2200      	movs	r2, #0
 8016758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016768:	4618      	mov	r0, r3
 801676a:	3728      	adds	r7, #40	; 0x28
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	fe00e800 	.word	0xfe00e800

08016774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016774:	b480      	push	{r7}
 8016776:	b087      	sub	sp, #28
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	607b      	str	r3, [r7, #4]
 801677e:	460b      	mov	r3, r1
 8016780:	817b      	strh	r3, [r7, #10]
 8016782:	4613      	mov	r3, r2
 8016784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016786:	897b      	ldrh	r3, [r7, #10]
 8016788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801678c:	7a7b      	ldrb	r3, [r7, #9]
 801678e:	041b      	lsls	r3, r3, #16
 8016790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801679a:	6a3b      	ldr	r3, [r7, #32]
 801679c:	4313      	orrs	r3, r2
 801679e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	685a      	ldr	r2, [r3, #4]
 80167aa:	6a3b      	ldr	r3, [r7, #32]
 80167ac:	0d5b      	lsrs	r3, r3, #21
 80167ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80167b2:	4b08      	ldr	r3, [pc, #32]	; (80167d4 <I2C_TransferConfig+0x60>)
 80167b4:	430b      	orrs	r3, r1
 80167b6:	43db      	mvns	r3, r3
 80167b8:	ea02 0103 	and.w	r1, r2, r3
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	697a      	ldr	r2, [r7, #20]
 80167c2:	430a      	orrs	r2, r1
 80167c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80167c6:	bf00      	nop
 80167c8:	371c      	adds	r7, #28
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop
 80167d4:	03ff63ff 	.word	0x03ff63ff

080167d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	2b20      	cmp	r3, #32
 80167ec:	d138      	bne.n	8016860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d101      	bne.n	80167fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80167f8:	2302      	movs	r3, #2
 80167fa:	e032      	b.n	8016862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2201      	movs	r2, #1
 8016800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2224      	movs	r2, #36	; 0x24
 8016808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f022 0201 	bic.w	r2, r2, #1
 801681a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801682a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	6819      	ldr	r1, [r3, #0]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	683a      	ldr	r2, [r7, #0]
 8016838:	430a      	orrs	r2, r1
 801683a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	681a      	ldr	r2, [r3, #0]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	f042 0201 	orr.w	r2, r2, #1
 801684a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2220      	movs	r2, #32
 8016850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2200      	movs	r2, #0
 8016858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801685c:	2300      	movs	r3, #0
 801685e:	e000      	b.n	8016862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016860:	2302      	movs	r3, #2
  }
}
 8016862:	4618      	mov	r0, r3
 8016864:	370c      	adds	r7, #12
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr

0801686e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801686e:	b480      	push	{r7}
 8016870:	b085      	sub	sp, #20
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
 8016876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801687e:	b2db      	uxtb	r3, r3
 8016880:	2b20      	cmp	r3, #32
 8016882:	d139      	bne.n	80168f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801688a:	2b01      	cmp	r3, #1
 801688c:	d101      	bne.n	8016892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801688e:	2302      	movs	r3, #2
 8016890:	e033      	b.n	80168fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2201      	movs	r2, #1
 8016896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2224      	movs	r2, #36	; 0x24
 801689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	f022 0201 	bic.w	r2, r2, #1
 80168b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80168c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	021b      	lsls	r3, r3, #8
 80168c6:	68fa      	ldr	r2, [r7, #12]
 80168c8:	4313      	orrs	r3, r2
 80168ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	68fa      	ldr	r2, [r7, #12]
 80168d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f042 0201 	orr.w	r2, r2, #1
 80168e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2220      	movs	r2, #32
 80168e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2200      	movs	r2, #0
 80168f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80168f4:	2300      	movs	r3, #0
 80168f6:	e000      	b.n	80168fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80168f8:	2302      	movs	r3, #2
  }
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	3714      	adds	r7, #20
 80168fe:	46bd      	mov	sp, r7
 8016900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016904:	4770      	bx	lr

08016906 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016906:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016908:	b08b      	sub	sp, #44	; 0x2c
 801690a:	af06      	add	r7, sp, #24
 801690c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d101      	bne.n	8016918 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016914:	2301      	movs	r3, #1
 8016916:	e0cb      	b.n	8016ab0 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801691e:	b2db      	uxtb	r3, r3
 8016920:	2b00      	cmp	r3, #0
 8016922:	d106      	bne.n	8016932 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7ea fdff 	bl	8001530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2203      	movs	r2, #3
 8016936:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4618      	mov	r0, r3
 8016940:	f002 fed0 	bl	80196e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016944:	2300      	movs	r3, #0
 8016946:	73fb      	strb	r3, [r7, #15]
 8016948:	e040      	b.n	80169cc <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801694a:	7bfb      	ldrb	r3, [r7, #15]
 801694c:	6879      	ldr	r1, [r7, #4]
 801694e:	1c5a      	adds	r2, r3, #1
 8016950:	4613      	mov	r3, r2
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	440b      	add	r3, r1
 801695a:	3301      	adds	r3, #1
 801695c:	2201      	movs	r2, #1
 801695e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016960:	7bfb      	ldrb	r3, [r7, #15]
 8016962:	6879      	ldr	r1, [r7, #4]
 8016964:	1c5a      	adds	r2, r3, #1
 8016966:	4613      	mov	r3, r2
 8016968:	009b      	lsls	r3, r3, #2
 801696a:	4413      	add	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	440b      	add	r3, r1
 8016970:	7bfa      	ldrb	r2, [r7, #15]
 8016972:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016974:	7bfb      	ldrb	r3, [r7, #15]
 8016976:	6879      	ldr	r1, [r7, #4]
 8016978:	1c5a      	adds	r2, r3, #1
 801697a:	4613      	mov	r3, r2
 801697c:	009b      	lsls	r3, r3, #2
 801697e:	4413      	add	r3, r2
 8016980:	00db      	lsls	r3, r3, #3
 8016982:	440b      	add	r3, r1
 8016984:	3303      	adds	r3, #3
 8016986:	2200      	movs	r2, #0
 8016988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801698a:	7bfa      	ldrb	r2, [r7, #15]
 801698c:	6879      	ldr	r1, [r7, #4]
 801698e:	4613      	mov	r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	440b      	add	r3, r1
 8016998:	3338      	adds	r3, #56	; 0x38
 801699a:	2200      	movs	r2, #0
 801699c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801699e:	7bfa      	ldrb	r2, [r7, #15]
 80169a0:	6879      	ldr	r1, [r7, #4]
 80169a2:	4613      	mov	r3, r2
 80169a4:	009b      	lsls	r3, r3, #2
 80169a6:	4413      	add	r3, r2
 80169a8:	00db      	lsls	r3, r3, #3
 80169aa:	440b      	add	r3, r1
 80169ac:	333c      	adds	r3, #60	; 0x3c
 80169ae:	2200      	movs	r2, #0
 80169b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80169b2:	7bfa      	ldrb	r2, [r7, #15]
 80169b4:	6879      	ldr	r1, [r7, #4]
 80169b6:	4613      	mov	r3, r2
 80169b8:	009b      	lsls	r3, r3, #2
 80169ba:	4413      	add	r3, r2
 80169bc:	00db      	lsls	r3, r3, #3
 80169be:	440b      	add	r3, r1
 80169c0:	3340      	adds	r3, #64	; 0x40
 80169c2:	2200      	movs	r2, #0
 80169c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80169c6:	7bfb      	ldrb	r3, [r7, #15]
 80169c8:	3301      	adds	r3, #1
 80169ca:	73fb      	strb	r3, [r7, #15]
 80169cc:	7bfa      	ldrb	r2, [r7, #15]
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d3b9      	bcc.n	801694a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80169d6:	2300      	movs	r3, #0
 80169d8:	73fb      	strb	r3, [r7, #15]
 80169da:	e044      	b.n	8016a66 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80169dc:	7bfa      	ldrb	r2, [r7, #15]
 80169de:	6879      	ldr	r1, [r7, #4]
 80169e0:	4613      	mov	r3, r2
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	4413      	add	r3, r2
 80169e6:	00db      	lsls	r3, r3, #3
 80169e8:	440b      	add	r3, r1
 80169ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80169ee:	2200      	movs	r2, #0
 80169f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80169f2:	7bfa      	ldrb	r2, [r7, #15]
 80169f4:	6879      	ldr	r1, [r7, #4]
 80169f6:	4613      	mov	r3, r2
 80169f8:	009b      	lsls	r3, r3, #2
 80169fa:	4413      	add	r3, r2
 80169fc:	00db      	lsls	r3, r3, #3
 80169fe:	440b      	add	r3, r1
 8016a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016a04:	7bfa      	ldrb	r2, [r7, #15]
 8016a06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016a08:	7bfa      	ldrb	r2, [r7, #15]
 8016a0a:	6879      	ldr	r1, [r7, #4]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	009b      	lsls	r3, r3, #2
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016a1e:	7bfa      	ldrb	r2, [r7, #15]
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	4613      	mov	r3, r2
 8016a24:	009b      	lsls	r3, r3, #2
 8016a26:	4413      	add	r3, r2
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	440b      	add	r3, r1
 8016a2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016a30:	2200      	movs	r2, #0
 8016a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016a34:	7bfa      	ldrb	r2, [r7, #15]
 8016a36:	6879      	ldr	r1, [r7, #4]
 8016a38:	4613      	mov	r3, r2
 8016a3a:	009b      	lsls	r3, r3, #2
 8016a3c:	4413      	add	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	440b      	add	r3, r1
 8016a42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016a46:	2200      	movs	r2, #0
 8016a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016a4a:	7bfa      	ldrb	r2, [r7, #15]
 8016a4c:	6879      	ldr	r1, [r7, #4]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	4413      	add	r3, r2
 8016a54:	00db      	lsls	r3, r3, #3
 8016a56:	440b      	add	r3, r1
 8016a58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016a60:	7bfb      	ldrb	r3, [r7, #15]
 8016a62:	3301      	adds	r3, #1
 8016a64:	73fb      	strb	r3, [r7, #15]
 8016a66:	7bfa      	ldrb	r2, [r7, #15]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d3b5      	bcc.n	80169dc <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	603b      	str	r3, [r7, #0]
 8016a76:	687e      	ldr	r6, [r7, #4]
 8016a78:	466d      	mov	r5, sp
 8016a7a:	f106 0410 	add.w	r4, r6, #16
 8016a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a82:	6823      	ldr	r3, [r4, #0]
 8016a84:	602b      	str	r3, [r5, #0]
 8016a86:	1d33      	adds	r3, r6, #4
 8016a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016a8a:	6838      	ldr	r0, [r7, #0]
 8016a8c:	f002 fe45 	bl	801971a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2200      	movs	r2, #0
 8016a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	69db      	ldr	r3, [r3, #28]
 8016aa4:	2b01      	cmp	r3, #1
 8016aa6:	d102      	bne.n	8016aae <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f000 f805 	bl	8016ab8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016aae:	2300      	movs	r3, #0
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3714      	adds	r7, #20
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b085      	sub	sp, #20
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	2201      	movs	r2, #1
 8016aca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	f043 0301 	orr.w	r3, r3, #1
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	f043 0302 	orr.w	r3, r3, #2
 8016af6:	b29a      	uxth	r2, r3
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8016afe:	2300      	movs	r3, #0
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	3714      	adds	r7, #20
 8016b04:	46bd      	mov	sp, r7
 8016b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0a:	4770      	bx	lr

08016b0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016b10:	4b05      	ldr	r3, [pc, #20]	; (8016b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	4a04      	ldr	r2, [pc, #16]	; (8016b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016b1a:	6013      	str	r3, [r2, #0]
}
 8016b1c:	bf00      	nop
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr
 8016b26:	bf00      	nop
 8016b28:	58000400 	.word	0x58000400

08016b2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8016b30:	4b04      	ldr	r3, [pc, #16]	; (8016b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	58000400 	.word	0x58000400

08016b48 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016b48:	b480      	push	{r7}
 8016b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016b5a:	d101      	bne.n	8016b60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	e000      	b.n	8016b62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8016b60:	2300      	movs	r3, #0
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	46bd      	mov	sp, r7
 8016b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6a:	4770      	bx	lr

08016b6c <LL_RCC_HSE_Enable>:
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016b7e:	6013      	str	r3, [r2, #0]
}
 8016b80:	bf00      	nop
 8016b82:	46bd      	mov	sp, r7
 8016b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b88:	4770      	bx	lr

08016b8a <LL_RCC_HSE_Disable>:
{
 8016b8a:	b480      	push	{r7}
 8016b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8016b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016b9c:	6013      	str	r3, [r2, #0]
}
 8016b9e:	bf00      	nop
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr

08016ba8 <LL_RCC_HSE_IsReady>:
{
 8016ba8:	b480      	push	{r7}
 8016baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016bba:	d101      	bne.n	8016bc0 <LL_RCC_HSE_IsReady+0x18>
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	e000      	b.n	8016bc2 <LL_RCC_HSE_IsReady+0x1a>
 8016bc0:	2300      	movs	r3, #0
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr

08016bcc <LL_RCC_HSI_Enable>:
{
 8016bcc:	b480      	push	{r7}
 8016bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016bde:	6013      	str	r3, [r2, #0]
}
 8016be0:	bf00      	nop
 8016be2:	46bd      	mov	sp, r7
 8016be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be8:	4770      	bx	lr

08016bea <LL_RCC_HSI_Disable>:
{
 8016bea:	b480      	push	{r7}
 8016bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8016bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016bfc:	6013      	str	r3, [r2, #0]
}
 8016bfe:	bf00      	nop
 8016c00:	46bd      	mov	sp, r7
 8016c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c06:	4770      	bx	lr

08016c08 <LL_RCC_HSI_IsReady>:
{
 8016c08:	b480      	push	{r7}
 8016c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c1a:	d101      	bne.n	8016c20 <LL_RCC_HSI_IsReady+0x18>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	e000      	b.n	8016c22 <LL_RCC_HSI_IsReady+0x1a>
 8016c20:	2300      	movs	r3, #0
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	46bd      	mov	sp, r7
 8016c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2a:	4770      	bx	lr

08016c2c <LL_RCC_HSI_SetCalibTrimming>:
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b083      	sub	sp, #12
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	061b      	lsls	r3, r3, #24
 8016c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c46:	4313      	orrs	r3, r2
 8016c48:	604b      	str	r3, [r1, #4]
}
 8016c4a:	bf00      	nop
 8016c4c:	370c      	adds	r7, #12
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c54:	4770      	bx	lr

08016c56 <LL_RCC_HSI48_Enable>:
{
 8016c56:	b480      	push	{r7}
 8016c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c66:	f043 0301 	orr.w	r3, r3, #1
 8016c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016c6e:	bf00      	nop
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr

08016c78 <LL_RCC_HSI48_Disable>:
{
 8016c78:	b480      	push	{r7}
 8016c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c88:	f023 0301 	bic.w	r3, r3, #1
 8016c8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016c90:	bf00      	nop
 8016c92:	46bd      	mov	sp, r7
 8016c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c98:	4770      	bx	lr

08016c9a <LL_RCC_HSI48_IsReady>:
{
 8016c9a:	b480      	push	{r7}
 8016c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016ca6:	f003 0302 	and.w	r3, r3, #2
 8016caa:	2b02      	cmp	r3, #2
 8016cac:	d101      	bne.n	8016cb2 <LL_RCC_HSI48_IsReady+0x18>
 8016cae:	2301      	movs	r3, #1
 8016cb0:	e000      	b.n	8016cb4 <LL_RCC_HSI48_IsReady+0x1a>
 8016cb2:	2300      	movs	r3, #0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr

08016cbe <LL_RCC_LSE_Enable>:
{
 8016cbe:	b480      	push	{r7}
 8016cc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cce:	f043 0301 	orr.w	r3, r3, #1
 8016cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016cd6:	bf00      	nop
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <LL_RCC_LSE_Disable>:
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cf0:	f023 0301 	bic.w	r3, r3, #1
 8016cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016cf8:	bf00      	nop
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d00:	4770      	bx	lr

08016d02 <LL_RCC_LSE_EnableBypass>:
{
 8016d02:	b480      	push	{r7}
 8016d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d12:	f043 0304 	orr.w	r3, r3, #4
 8016d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016d1a:	bf00      	nop
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr

08016d24 <LL_RCC_LSE_DisableBypass>:
{
 8016d24:	b480      	push	{r7}
 8016d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d34:	f023 0304 	bic.w	r3, r3, #4
 8016d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016d3c:	bf00      	nop
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr

08016d46 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016d46:	b480      	push	{r7}
 8016d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d52:	f003 0302 	and.w	r3, r3, #2
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	d101      	bne.n	8016d5e <LL_RCC_LSE_IsReady+0x18>
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e000      	b.n	8016d60 <LL_RCC_LSE_IsReady+0x1a>
 8016d5e:	2300      	movs	r3, #0
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr

08016d6a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016d6a:	b480      	push	{r7}
 8016d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d7a:	f043 0301 	orr.w	r3, r3, #1
 8016d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016d82:	bf00      	nop
 8016d84:	46bd      	mov	sp, r7
 8016d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8a:	4770      	bx	lr

08016d8c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016d8c:	b480      	push	{r7}
 8016d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d9c:	f023 0301 	bic.w	r3, r3, #1
 8016da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016da4:	bf00      	nop
 8016da6:	46bd      	mov	sp, r7
 8016da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dac:	4770      	bx	lr

08016dae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016dae:	b480      	push	{r7}
 8016db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dba:	f003 0302 	and.w	r3, r3, #2
 8016dbe:	2b02      	cmp	r3, #2
 8016dc0:	d101      	bne.n	8016dc6 <LL_RCC_LSI1_IsReady+0x18>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	e000      	b.n	8016dc8 <LL_RCC_LSI1_IsReady+0x1a>
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr

08016dd2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016dd2:	b480      	push	{r7}
 8016dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016de2:	f043 0304 	orr.w	r3, r3, #4
 8016de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016dea:	bf00      	nop
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr

08016df4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016df4:	b480      	push	{r7}
 8016df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e04:	f023 0304 	bic.w	r3, r3, #4
 8016e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016e0c:	bf00      	nop
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e14:	4770      	bx	lr

08016e16 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016e16:	b480      	push	{r7}
 8016e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e22:	f003 0308 	and.w	r3, r3, #8
 8016e26:	2b08      	cmp	r3, #8
 8016e28:	d101      	bne.n	8016e2e <LL_RCC_LSI2_IsReady+0x18>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e000      	b.n	8016e30 <LL_RCC_LSI2_IsReady+0x1a>
 8016e2e:	2300      	movs	r3, #0
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	46bd      	mov	sp, r7
 8016e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e38:	4770      	bx	lr

08016e3a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016e3a:	b480      	push	{r7}
 8016e3c:	b083      	sub	sp, #12
 8016e3e:	af00      	add	r7, sp, #0
 8016e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	021b      	lsls	r3, r3, #8
 8016e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e56:	4313      	orrs	r3, r2
 8016e58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016e5c:	bf00      	nop
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e76:	f043 0301 	orr.w	r3, r3, #1
 8016e7a:	6013      	str	r3, [r2, #0]
}
 8016e7c:	bf00      	nop
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e84:	4770      	bx	lr

08016e86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016e86:	b480      	push	{r7}
 8016e88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e94:	f023 0301 	bic.w	r3, r3, #1
 8016e98:	6013      	str	r3, [r2, #0]
}
 8016e9a:	bf00      	nop
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr

08016ea4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	f003 0302 	and.w	r3, r3, #2
 8016eb2:	2b02      	cmp	r3, #2
 8016eb4:	d101      	bne.n	8016eba <LL_RCC_MSI_IsReady+0x16>
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e000      	b.n	8016ebc <LL_RCC_MSI_IsReady+0x18>
 8016eba:	2300      	movs	r3, #0
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec4:	4770      	bx	lr

08016ec6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016ec6:	b480      	push	{r7}
 8016ec8:	b083      	sub	sp, #12
 8016eca:	af00      	add	r7, sp, #0
 8016ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	4313      	orrs	r3, r2
 8016ee0:	600b      	str	r3, [r1, #0]
}
 8016ee2:	bf00      	nop
 8016ee4:	370c      	adds	r7, #12
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eec:	4770      	bx	lr

08016eee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016eee:	b480      	push	{r7}
 8016ef0:	b083      	sub	sp, #12
 8016ef2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016efe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2bb0      	cmp	r3, #176	; 0xb0
 8016f04:	d901      	bls.n	8016f0a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016f06:	23b0      	movs	r3, #176	; 0xb0
 8016f08:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016f0a:	687b      	ldr	r3, [r7, #4]
}
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	370c      	adds	r7, #12
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b083      	sub	sp, #12
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	021b      	lsls	r3, r3, #8
 8016f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016f32:	4313      	orrs	r3, r2
 8016f34:	604b      	str	r3, [r1, #4]
}
 8016f36:	bf00      	nop
 8016f38:	370c      	adds	r7, #12
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr

08016f42 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016f42:	b480      	push	{r7}
 8016f44:	b083      	sub	sp, #12
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f4e:	689b      	ldr	r3, [r3, #8]
 8016f50:	f023 0203 	bic.w	r2, r3, #3
 8016f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	4313      	orrs	r3, r2
 8016f5c:	608b      	str	r3, [r1, #8]
}
 8016f5e:	bf00      	nop
 8016f60:	370c      	adds	r7, #12
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr

08016f6a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016f6a:	b480      	push	{r7}
 8016f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f72:	689b      	ldr	r3, [r3, #8]
 8016f74:	f003 030c 	and.w	r3, r3, #12
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f80:	4770      	bx	lr

08016f82 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016f82:	b480      	push	{r7}
 8016f84:	b083      	sub	sp, #12
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f8e:	689b      	ldr	r3, [r3, #8]
 8016f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	4313      	orrs	r3, r2
 8016f9c:	608b      	str	r3, [r1, #8]
}
 8016f9e:	bf00      	nop
 8016fa0:	370c      	adds	r7, #12
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa8:	4770      	bx	lr

08016faa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016faa:	b480      	push	{r7}
 8016fac:	b083      	sub	sp, #12
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	4313      	orrs	r3, r2
 8016fc6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016fca:	bf00      	nop
 8016fcc:	370c      	adds	r7, #12
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd4:	4770      	bx	lr

08016fd6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016fd6:	b480      	push	{r7}
 8016fd8:	b083      	sub	sp, #12
 8016fda:	af00      	add	r7, sp, #0
 8016fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016fe6:	f023 020f 	bic.w	r2, r3, #15
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	091b      	lsrs	r3, r3, #4
 8016fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ff2:	4313      	orrs	r3, r2
 8016ff4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016ff8:	bf00      	nop
 8016ffa:	370c      	adds	r7, #12
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8017004:	b480      	push	{r7}
 8017006:	b083      	sub	sp, #12
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801700c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017010:	689b      	ldr	r3, [r3, #8]
 8017012:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8017016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	4313      	orrs	r3, r2
 801701e:	608b      	str	r3, [r1, #8]
}
 8017020:	bf00      	nop
 8017022:	370c      	adds	r7, #12
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 801702c:	b480      	push	{r7}
 801702e:	b083      	sub	sp, #12
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8017034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017038:	689b      	ldr	r3, [r3, #8]
 801703a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801703e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	4313      	orrs	r3, r2
 8017046:	608b      	str	r3, [r1, #8]
}
 8017048:	bf00      	nop
 801704a:	370c      	adds	r7, #12
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr

08017054 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8017054:	b480      	push	{r7}
 8017056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8017058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801705c:	689b      	ldr	r3, [r3, #8]
 801705e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8017062:	4618      	mov	r0, r3
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 801706c:	b480      	push	{r7}
 801706e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8017070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017074:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801707c:	4618      	mov	r0, r3
 801707e:	46bd      	mov	sp, r7
 8017080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017084:	4770      	bx	lr

08017086 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8017086:	b480      	push	{r7}
 8017088:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801708a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801708e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017092:	011b      	lsls	r3, r3, #4
 8017094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8017098:	4618      	mov	r0, r3
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr

080170a2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80170a2:	b480      	push	{r7}
 80170a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80170a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170aa:	689b      	ldr	r3, [r3, #8]
 80170ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr

080170ba <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80170ba:	b480      	push	{r7}
 80170bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80170be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170c2:	689b      	ldr	r3, [r3, #8]
 80170c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	46bd      	mov	sp, r7
 80170cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d0:	4770      	bx	lr

080170d2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80170d2:	b480      	push	{r7}
 80170d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80170d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80170e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80170e4:	6013      	str	r3, [r2, #0]
}
 80170e6:	bf00      	nop
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80170f0:	b480      	push	{r7}
 80170f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80170f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80170fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017102:	6013      	str	r3, [r2, #0]
}
 8017104:	bf00      	nop
 8017106:	46bd      	mov	sp, r7
 8017108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710c:	4770      	bx	lr

0801710e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801710e:	b480      	push	{r7}
 8017110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8017112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801711c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017120:	d101      	bne.n	8017126 <LL_RCC_PLL_IsReady+0x18>
 8017122:	2301      	movs	r3, #1
 8017124:	e000      	b.n	8017128 <LL_RCC_PLL_IsReady+0x1a>
 8017126:	2300      	movs	r3, #0
}
 8017128:	4618      	mov	r0, r3
 801712a:	46bd      	mov	sp, r7
 801712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017130:	4770      	bx	lr

08017132 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8017132:	b480      	push	{r7}
 8017134:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8017136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801713a:	68db      	ldr	r3, [r3, #12]
 801713c:	0a1b      	lsrs	r3, r3, #8
 801713e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8017142:	4618      	mov	r0, r3
 8017144:	46bd      	mov	sp, r7
 8017146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714a:	4770      	bx	lr

0801714c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801714c:	b480      	push	{r7}
 801714e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8017150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801715a:	4618      	mov	r0, r3
 801715c:	46bd      	mov	sp, r7
 801715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017162:	4770      	bx	lr

08017164 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8017164:	b480      	push	{r7}
 8017166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8017168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8017172:	4618      	mov	r0, r3
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr

0801717c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801717c:	b480      	push	{r7}
 801717e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8017180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017184:	68db      	ldr	r3, [r3, #12]
 8017186:	f003 0303 	and.w	r3, r3, #3
}
 801718a:	4618      	mov	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr

08017194 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8017194:	b480      	push	{r7}
 8017196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8017198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801719c:	689b      	ldr	r3, [r3, #8]
 801719e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80171a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171a6:	d101      	bne.n	80171ac <LL_RCC_IsActiveFlag_HPRE+0x18>
 80171a8:	2301      	movs	r3, #1
 80171aa:	e000      	b.n	80171ae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80171ac:	2300      	movs	r3, #0
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	46bd      	mov	sp, r7
 80171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b6:	4770      	bx	lr

080171b8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80171b8:	b480      	push	{r7}
 80171ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80171bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80171c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80171c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80171cc:	d101      	bne.n	80171d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80171ce:	2301      	movs	r3, #1
 80171d0:	e000      	b.n	80171d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80171d2:	2300      	movs	r3, #0
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	46bd      	mov	sp, r7
 80171d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171dc:	4770      	bx	lr

080171de <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80171de:	b480      	push	{r7}
 80171e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80171e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80171ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80171ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171f2:	d101      	bne.n	80171f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80171f4:	2301      	movs	r3, #1
 80171f6:	e000      	b.n	80171fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80171f8:	2300      	movs	r3, #0
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8017204:	b480      	push	{r7}
 8017206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8017208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801720c:	689b      	ldr	r3, [r3, #8]
 801720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017216:	d101      	bne.n	801721c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8017218:	2301      	movs	r3, #1
 801721a:	e000      	b.n	801721e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	46bd      	mov	sp, r7
 8017222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017226:	4770      	bx	lr

08017228 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8017228:	b480      	push	{r7}
 801722a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801722c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017230:	689b      	ldr	r3, [r3, #8]
 8017232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801723a:	d101      	bne.n	8017240 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801723c:	2301      	movs	r3, #1
 801723e:	e000      	b.n	8017242 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8017240:	2300      	movs	r3, #0
}
 8017242:	4618      	mov	r0, r3
 8017244:	46bd      	mov	sp, r7
 8017246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724a:	4770      	bx	lr

0801724c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801724c:	b590      	push	{r4, r7, lr}
 801724e:	b08d      	sub	sp, #52	; 0x34
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d101      	bne.n	801725e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801725a:	2301      	movs	r3, #1
 801725c:	e363      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	f003 0320 	and.w	r3, r3, #32
 8017266:	2b00      	cmp	r3, #0
 8017268:	f000 808d 	beq.w	8017386 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801726c:	f7ff fe7d 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017270:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017272:	f7ff ff83 	bl	801717c <LL_RCC_PLL_GetMainSource>
 8017276:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727a:	2b00      	cmp	r3, #0
 801727c:	d005      	beq.n	801728a <HAL_RCC_OscConfig+0x3e>
 801727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017280:	2b0c      	cmp	r3, #12
 8017282:	d147      	bne.n	8017314 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8017284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017286:	2b01      	cmp	r3, #1
 8017288:	d144      	bne.n	8017314 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	69db      	ldr	r3, [r3, #28]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d101      	bne.n	8017296 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8017292:	2301      	movs	r3, #1
 8017294:	e347      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801729a:	f7ff fe28 	bl	8016eee <LL_RCC_MSI_GetRange>
 801729e:	4603      	mov	r3, r0
 80172a0:	429c      	cmp	r4, r3
 80172a2:	d914      	bls.n	80172ce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172a8:	4618      	mov	r0, r3
 80172aa:	f000 fd61 	bl	8017d70 <RCC_SetFlashLatencyFromMSIRange>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d001      	beq.n	80172b8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80172b4:	2301      	movs	r3, #1
 80172b6:	e336      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172bc:	4618      	mov	r0, r3
 80172be:	f7ff fe02 	bl	8016ec6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	6a1b      	ldr	r3, [r3, #32]
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7ff fe26 	bl	8016f18 <LL_RCC_MSI_SetCalibTrimming>
 80172cc:	e013      	b.n	80172f6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7ff fdf7 	bl	8016ec6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	6a1b      	ldr	r3, [r3, #32]
 80172dc:	4618      	mov	r0, r3
 80172de:	f7ff fe1b 	bl	8016f18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172e6:	4618      	mov	r0, r3
 80172e8:	f000 fd42 	bl	8017d70 <RCC_SetFlashLatencyFromMSIRange>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80172f2:	2301      	movs	r3, #1
 80172f4:	e317      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80172f6:	f000 fcc9 	bl	8017c8c <HAL_RCC_GetHCLKFreq>
 80172fa:	4603      	mov	r3, r0
 80172fc:	4aa4      	ldr	r2, [pc, #656]	; (8017590 <HAL_RCC_OscConfig+0x344>)
 80172fe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8017300:	4ba4      	ldr	r3, [pc, #656]	; (8017594 <HAL_RCC_OscConfig+0x348>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4618      	mov	r0, r3
 8017306:	f7e9 fcef 	bl	8000ce8 <HAL_InitTick>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d039      	beq.n	8017384 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8017310:	2301      	movs	r3, #1
 8017312:	e308      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	69db      	ldr	r3, [r3, #28]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d01e      	beq.n	801735a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801731c:	f7ff fda4 	bl	8016e68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017320:	f7fe f972 	bl	8015608 <HAL_GetTick>
 8017324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8017326:	e008      	b.n	801733a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017328:	f7fe f96e 	bl	8015608 <HAL_GetTick>
 801732c:	4602      	mov	r2, r0
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	1ad3      	subs	r3, r2, r3
 8017332:	2b02      	cmp	r3, #2
 8017334:	d901      	bls.n	801733a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8017336:	2303      	movs	r3, #3
 8017338:	e2f5      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 801733a:	f7ff fdb3 	bl	8016ea4 <LL_RCC_MSI_IsReady>
 801733e:	4603      	mov	r3, r0
 8017340:	2b00      	cmp	r3, #0
 8017342:	d0f1      	beq.n	8017328 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017348:	4618      	mov	r0, r3
 801734a:	f7ff fdbc 	bl	8016ec6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6a1b      	ldr	r3, [r3, #32]
 8017352:	4618      	mov	r0, r3
 8017354:	f7ff fde0 	bl	8016f18 <LL_RCC_MSI_SetCalibTrimming>
 8017358:	e015      	b.n	8017386 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801735a:	f7ff fd94 	bl	8016e86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801735e:	f7fe f953 	bl	8015608 <HAL_GetTick>
 8017362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8017364:	e008      	b.n	8017378 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017366:	f7fe f94f 	bl	8015608 <HAL_GetTick>
 801736a:	4602      	mov	r2, r0
 801736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736e:	1ad3      	subs	r3, r2, r3
 8017370:	2b02      	cmp	r3, #2
 8017372:	d901      	bls.n	8017378 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8017374:	2303      	movs	r3, #3
 8017376:	e2d6      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017378:	f7ff fd94 	bl	8016ea4 <LL_RCC_MSI_IsReady>
 801737c:	4603      	mov	r3, r0
 801737e:	2b00      	cmp	r3, #0
 8017380:	d1f1      	bne.n	8017366 <HAL_RCC_OscConfig+0x11a>
 8017382:	e000      	b.n	8017386 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8017384:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f003 0301 	and.w	r3, r3, #1
 801738e:	2b00      	cmp	r3, #0
 8017390:	d047      	beq.n	8017422 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017392:	f7ff fdea 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017396:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017398:	f7ff fef0 	bl	801717c <LL_RCC_PLL_GetMainSource>
 801739c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801739e:	6a3b      	ldr	r3, [r7, #32]
 80173a0:	2b08      	cmp	r3, #8
 80173a2:	d005      	beq.n	80173b0 <HAL_RCC_OscConfig+0x164>
 80173a4:	6a3b      	ldr	r3, [r7, #32]
 80173a6:	2b0c      	cmp	r3, #12
 80173a8:	d108      	bne.n	80173bc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80173aa:	69fb      	ldr	r3, [r7, #28]
 80173ac:	2b03      	cmp	r3, #3
 80173ae:	d105      	bne.n	80173bc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d134      	bne.n	8017422 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80173b8:	2301      	movs	r3, #1
 80173ba:	e2b4      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173c4:	d102      	bne.n	80173cc <HAL_RCC_OscConfig+0x180>
 80173c6:	f7ff fbd1 	bl	8016b6c <LL_RCC_HSE_Enable>
 80173ca:	e001      	b.n	80173d0 <HAL_RCC_OscConfig+0x184>
 80173cc:	f7ff fbdd 	bl	8016b8a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d012      	beq.n	80173fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173d8:	f7fe f916 	bl	8015608 <HAL_GetTick>
 80173dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80173de:	e008      	b.n	80173f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80173e0:	f7fe f912 	bl	8015608 <HAL_GetTick>
 80173e4:	4602      	mov	r2, r0
 80173e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e8:	1ad3      	subs	r3, r2, r3
 80173ea:	2b64      	cmp	r3, #100	; 0x64
 80173ec:	d901      	bls.n	80173f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80173ee:	2303      	movs	r3, #3
 80173f0:	e299      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80173f2:	f7ff fbd9 	bl	8016ba8 <LL_RCC_HSE_IsReady>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d0f1      	beq.n	80173e0 <HAL_RCC_OscConfig+0x194>
 80173fc:	e011      	b.n	8017422 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173fe:	f7fe f903 	bl	8015608 <HAL_GetTick>
 8017402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8017404:	e008      	b.n	8017418 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017406:	f7fe f8ff 	bl	8015608 <HAL_GetTick>
 801740a:	4602      	mov	r2, r0
 801740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801740e:	1ad3      	subs	r3, r2, r3
 8017410:	2b64      	cmp	r3, #100	; 0x64
 8017412:	d901      	bls.n	8017418 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8017414:	2303      	movs	r3, #3
 8017416:	e286      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017418:	f7ff fbc6 	bl	8016ba8 <LL_RCC_HSE_IsReady>
 801741c:	4603      	mov	r3, r0
 801741e:	2b00      	cmp	r3, #0
 8017420:	d1f1      	bne.n	8017406 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	f003 0302 	and.w	r3, r3, #2
 801742a:	2b00      	cmp	r3, #0
 801742c:	d04c      	beq.n	80174c8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801742e:	f7ff fd9c 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017432:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017434:	f7ff fea2 	bl	801717c <LL_RCC_PLL_GetMainSource>
 8017438:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801743a:	69bb      	ldr	r3, [r7, #24]
 801743c:	2b04      	cmp	r3, #4
 801743e:	d005      	beq.n	801744c <HAL_RCC_OscConfig+0x200>
 8017440:	69bb      	ldr	r3, [r7, #24]
 8017442:	2b0c      	cmp	r3, #12
 8017444:	d10e      	bne.n	8017464 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	2b02      	cmp	r3, #2
 801744a:	d10b      	bne.n	8017464 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d101      	bne.n	8017458 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8017454:	2301      	movs	r3, #1
 8017456:	e266      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	691b      	ldr	r3, [r3, #16]
 801745c:	4618      	mov	r0, r3
 801745e:	f7ff fbe5 	bl	8016c2c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017462:	e031      	b.n	80174c8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	68db      	ldr	r3, [r3, #12]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d019      	beq.n	80174a0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801746c:	f7ff fbae 	bl	8016bcc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017470:	f7fe f8ca 	bl	8015608 <HAL_GetTick>
 8017474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8017476:	e008      	b.n	801748a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017478:	f7fe f8c6 	bl	8015608 <HAL_GetTick>
 801747c:	4602      	mov	r2, r0
 801747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	2b02      	cmp	r3, #2
 8017484:	d901      	bls.n	801748a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8017486:	2303      	movs	r3, #3
 8017488:	e24d      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801748a:	f7ff fbbd 	bl	8016c08 <LL_RCC_HSI_IsReady>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d0f1      	beq.n	8017478 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	691b      	ldr	r3, [r3, #16]
 8017498:	4618      	mov	r0, r3
 801749a:	f7ff fbc7 	bl	8016c2c <LL_RCC_HSI_SetCalibTrimming>
 801749e:	e013      	b.n	80174c8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80174a0:	f7ff fba3 	bl	8016bea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174a4:	f7fe f8b0 	bl	8015608 <HAL_GetTick>
 80174a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80174aa:	e008      	b.n	80174be <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80174ac:	f7fe f8ac 	bl	8015608 <HAL_GetTick>
 80174b0:	4602      	mov	r2, r0
 80174b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b4:	1ad3      	subs	r3, r2, r3
 80174b6:	2b02      	cmp	r3, #2
 80174b8:	d901      	bls.n	80174be <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80174ba:	2303      	movs	r3, #3
 80174bc:	e233      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80174be:	f7ff fba3 	bl	8016c08 <LL_RCC_HSI_IsReady>
 80174c2:	4603      	mov	r3, r0
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d1f1      	bne.n	80174ac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	f003 0308 	and.w	r3, r3, #8
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d106      	bne.n	80174e2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80174dc:	2b00      	cmp	r3, #0
 80174de:	f000 80a3 	beq.w	8017628 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	695b      	ldr	r3, [r3, #20]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d076      	beq.n	80175d8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	f003 0310 	and.w	r3, r3, #16
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d046      	beq.n	8017584 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80174f6:	f7ff fc5a 	bl	8016dae <LL_RCC_LSI1_IsReady>
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d113      	bne.n	8017528 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8017500:	f7ff fc33 	bl	8016d6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017504:	f7fe f880 	bl	8015608 <HAL_GetTick>
 8017508:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801750a:	e008      	b.n	801751e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801750c:	f7fe f87c 	bl	8015608 <HAL_GetTick>
 8017510:	4602      	mov	r2, r0
 8017512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017514:	1ad3      	subs	r3, r2, r3
 8017516:	2b02      	cmp	r3, #2
 8017518:	d901      	bls.n	801751e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801751a:	2303      	movs	r3, #3
 801751c:	e203      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801751e:	f7ff fc46 	bl	8016dae <LL_RCC_LSI1_IsReady>
 8017522:	4603      	mov	r3, r0
 8017524:	2b00      	cmp	r3, #0
 8017526:	d0f1      	beq.n	801750c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017528:	f7ff fc53 	bl	8016dd2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801752c:	f7fe f86c 	bl	8015608 <HAL_GetTick>
 8017530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017532:	e008      	b.n	8017546 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017534:	f7fe f868 	bl	8015608 <HAL_GetTick>
 8017538:	4602      	mov	r2, r0
 801753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753c:	1ad3      	subs	r3, r2, r3
 801753e:	2b03      	cmp	r3, #3
 8017540:	d901      	bls.n	8017546 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8017542:	2303      	movs	r3, #3
 8017544:	e1ef      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017546:	f7ff fc66 	bl	8016e16 <LL_RCC_LSI2_IsReady>
 801754a:	4603      	mov	r3, r0
 801754c:	2b00      	cmp	r3, #0
 801754e:	d0f1      	beq.n	8017534 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	699b      	ldr	r3, [r3, #24]
 8017554:	4618      	mov	r0, r3
 8017556:	f7ff fc70 	bl	8016e3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801755a:	f7ff fc17 	bl	8016d8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801755e:	f7fe f853 	bl	8015608 <HAL_GetTick>
 8017562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017564:	e008      	b.n	8017578 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017566:	f7fe f84f 	bl	8015608 <HAL_GetTick>
 801756a:	4602      	mov	r2, r0
 801756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756e:	1ad3      	subs	r3, r2, r3
 8017570:	2b02      	cmp	r3, #2
 8017572:	d901      	bls.n	8017578 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8017574:	2303      	movs	r3, #3
 8017576:	e1d6      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017578:	f7ff fc19 	bl	8016dae <LL_RCC_LSI1_IsReady>
 801757c:	4603      	mov	r3, r0
 801757e:	2b00      	cmp	r3, #0
 8017580:	d1f1      	bne.n	8017566 <HAL_RCC_OscConfig+0x31a>
 8017582:	e051      	b.n	8017628 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8017584:	f7ff fbf1 	bl	8016d6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017588:	f7fe f83e 	bl	8015608 <HAL_GetTick>
 801758c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801758e:	e00c      	b.n	80175aa <HAL_RCC_OscConfig+0x35e>
 8017590:	20000008 	.word	0x20000008
 8017594:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017598:	f7fe f836 	bl	8015608 <HAL_GetTick>
 801759c:	4602      	mov	r2, r0
 801759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a0:	1ad3      	subs	r3, r2, r3
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d901      	bls.n	80175aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80175a6:	2303      	movs	r3, #3
 80175a8:	e1bd      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80175aa:	f7ff fc00 	bl	8016dae <LL_RCC_LSI1_IsReady>
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d0f1      	beq.n	8017598 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80175b4:	f7ff fc1e 	bl	8016df4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80175b8:	e008      	b.n	80175cc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80175ba:	f7fe f825 	bl	8015608 <HAL_GetTick>
 80175be:	4602      	mov	r2, r0
 80175c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c2:	1ad3      	subs	r3, r2, r3
 80175c4:	2b03      	cmp	r3, #3
 80175c6:	d901      	bls.n	80175cc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80175c8:	2303      	movs	r3, #3
 80175ca:	e1ac      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80175cc:	f7ff fc23 	bl	8016e16 <LL_RCC_LSI2_IsReady>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d1f1      	bne.n	80175ba <HAL_RCC_OscConfig+0x36e>
 80175d6:	e027      	b.n	8017628 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80175d8:	f7ff fc0c 	bl	8016df4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80175dc:	f7fe f814 	bl	8015608 <HAL_GetTick>
 80175e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80175e2:	e008      	b.n	80175f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80175e4:	f7fe f810 	bl	8015608 <HAL_GetTick>
 80175e8:	4602      	mov	r2, r0
 80175ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	2b03      	cmp	r3, #3
 80175f0:	d901      	bls.n	80175f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80175f2:	2303      	movs	r3, #3
 80175f4:	e197      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80175f6:	f7ff fc0e 	bl	8016e16 <LL_RCC_LSI2_IsReady>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d1f1      	bne.n	80175e4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8017600:	f7ff fbc4 	bl	8016d8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017604:	f7fe f800 	bl	8015608 <HAL_GetTick>
 8017608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801760a:	e008      	b.n	801761e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801760c:	f7fd fffc 	bl	8015608 <HAL_GetTick>
 8017610:	4602      	mov	r2, r0
 8017612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017614:	1ad3      	subs	r3, r2, r3
 8017616:	2b02      	cmp	r3, #2
 8017618:	d901      	bls.n	801761e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801761a:	2303      	movs	r3, #3
 801761c:	e183      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801761e:	f7ff fbc6 	bl	8016dae <LL_RCC_LSI1_IsReady>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	d1f1      	bne.n	801760c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	f003 0304 	and.w	r3, r3, #4
 8017630:	2b00      	cmp	r3, #0
 8017632:	d05b      	beq.n	80176ec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017634:	4ba7      	ldr	r3, [pc, #668]	; (80178d4 <HAL_RCC_OscConfig+0x688>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801763c:	2b00      	cmp	r3, #0
 801763e:	d114      	bne.n	801766a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017640:	f7ff fa64 	bl	8016b0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017644:	f7fd ffe0 	bl	8015608 <HAL_GetTick>
 8017648:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801764a:	e008      	b.n	801765e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801764c:	f7fd ffdc 	bl	8015608 <HAL_GetTick>
 8017650:	4602      	mov	r2, r0
 8017652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	2b02      	cmp	r3, #2
 8017658:	d901      	bls.n	801765e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801765a:	2303      	movs	r3, #3
 801765c:	e163      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801765e:	4b9d      	ldr	r3, [pc, #628]	; (80178d4 <HAL_RCC_OscConfig+0x688>)
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017666:	2b00      	cmp	r3, #0
 8017668:	d0f0      	beq.n	801764c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	689b      	ldr	r3, [r3, #8]
 801766e:	2b01      	cmp	r3, #1
 8017670:	d102      	bne.n	8017678 <HAL_RCC_OscConfig+0x42c>
 8017672:	f7ff fb24 	bl	8016cbe <LL_RCC_LSE_Enable>
 8017676:	e00c      	b.n	8017692 <HAL_RCC_OscConfig+0x446>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	2b05      	cmp	r3, #5
 801767e:	d104      	bne.n	801768a <HAL_RCC_OscConfig+0x43e>
 8017680:	f7ff fb3f 	bl	8016d02 <LL_RCC_LSE_EnableBypass>
 8017684:	f7ff fb1b 	bl	8016cbe <LL_RCC_LSE_Enable>
 8017688:	e003      	b.n	8017692 <HAL_RCC_OscConfig+0x446>
 801768a:	f7ff fb29 	bl	8016ce0 <LL_RCC_LSE_Disable>
 801768e:	f7ff fb49 	bl	8016d24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	689b      	ldr	r3, [r3, #8]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d014      	beq.n	80176c4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801769a:	f7fd ffb5 	bl	8015608 <HAL_GetTick>
 801769e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80176a0:	e00a      	b.n	80176b8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80176a2:	f7fd ffb1 	bl	8015608 <HAL_GetTick>
 80176a6:	4602      	mov	r2, r0
 80176a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176aa:	1ad3      	subs	r3, r2, r3
 80176ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80176b0:	4293      	cmp	r3, r2
 80176b2:	d901      	bls.n	80176b8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80176b4:	2303      	movs	r3, #3
 80176b6:	e136      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80176b8:	f7ff fb45 	bl	8016d46 <LL_RCC_LSE_IsReady>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d0ef      	beq.n	80176a2 <HAL_RCC_OscConfig+0x456>
 80176c2:	e013      	b.n	80176ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80176c4:	f7fd ffa0 	bl	8015608 <HAL_GetTick>
 80176c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80176ca:	e00a      	b.n	80176e2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80176cc:	f7fd ff9c 	bl	8015608 <HAL_GetTick>
 80176d0:	4602      	mov	r2, r0
 80176d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d4:	1ad3      	subs	r3, r2, r3
 80176d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80176da:	4293      	cmp	r3, r2
 80176dc:	d901      	bls.n	80176e2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80176de:	2303      	movs	r3, #3
 80176e0:	e121      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80176e2:	f7ff fb30 	bl	8016d46 <LL_RCC_LSE_IsReady>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d1ef      	bne.n	80176cc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d02c      	beq.n	8017752 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d014      	beq.n	801772a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017700:	f7ff faa9 	bl	8016c56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017704:	f7fd ff80 	bl	8015608 <HAL_GetTick>
 8017708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801770a:	e008      	b.n	801771e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801770c:	f7fd ff7c 	bl	8015608 <HAL_GetTick>
 8017710:	4602      	mov	r2, r0
 8017712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017714:	1ad3      	subs	r3, r2, r3
 8017716:	2b02      	cmp	r3, #2
 8017718:	d901      	bls.n	801771e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801771a:	2303      	movs	r3, #3
 801771c:	e103      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801771e:	f7ff fabc 	bl	8016c9a <LL_RCC_HSI48_IsReady>
 8017722:	4603      	mov	r3, r0
 8017724:	2b00      	cmp	r3, #0
 8017726:	d0f1      	beq.n	801770c <HAL_RCC_OscConfig+0x4c0>
 8017728:	e013      	b.n	8017752 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801772a:	f7ff faa5 	bl	8016c78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801772e:	f7fd ff6b 	bl	8015608 <HAL_GetTick>
 8017732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017734:	e008      	b.n	8017748 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017736:	f7fd ff67 	bl	8015608 <HAL_GetTick>
 801773a:	4602      	mov	r2, r0
 801773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801773e:	1ad3      	subs	r3, r2, r3
 8017740:	2b02      	cmp	r3, #2
 8017742:	d901      	bls.n	8017748 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8017744:	2303      	movs	r3, #3
 8017746:	e0ee      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017748:	f7ff faa7 	bl	8016c9a <LL_RCC_HSI48_IsReady>
 801774c:	4603      	mov	r3, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	d1f1      	bne.n	8017736 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 80e4 	beq.w	8017924 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801775c:	f7ff fc05 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017760:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8017762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776e:	2b02      	cmp	r3, #2
 8017770:	f040 80b4 	bne.w	80178dc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	f003 0203 	and.w	r2, r3, #3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801777e:	429a      	cmp	r2, r3
 8017780:	d123      	bne.n	80177ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801778c:	429a      	cmp	r2, r3
 801778e:	d11c      	bne.n	80177ca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	0a1b      	lsrs	r3, r3, #8
 8017794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801779c:	429a      	cmp	r2, r3
 801779e:	d114      	bne.n	80177ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d10d      	bne.n	80177ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d106      	bne.n	80177ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d05d      	beq.n	8017886 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	2b0c      	cmp	r3, #12
 80177ce:	d058      	beq.n	8017882 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80177d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d001      	beq.n	80177e2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80177de:	2301      	movs	r3, #1
 80177e0:	e0a1      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80177e2:	f7ff fc85 	bl	80170f0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80177e6:	f7fd ff0f 	bl	8015608 <HAL_GetTick>
 80177ea:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80177ec:	e008      	b.n	8017800 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80177ee:	f7fd ff0b 	bl	8015608 <HAL_GetTick>
 80177f2:	4602      	mov	r2, r0
 80177f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f6:	1ad3      	subs	r3, r2, r3
 80177f8:	2b02      	cmp	r3, #2
 80177fa:	d901      	bls.n	8017800 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80177fc:	2303      	movs	r3, #3
 80177fe:	e092      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801780a:	2b00      	cmp	r3, #0
 801780c:	d1ef      	bne.n	80177ee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801780e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017812:	68da      	ldr	r2, [r3, #12]
 8017814:	4b30      	ldr	r3, [pc, #192]	; (80178d8 <HAL_RCC_OscConfig+0x68c>)
 8017816:	4013      	ands	r3, r2
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017820:	4311      	orrs	r1, r2
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017826:	0212      	lsls	r2, r2, #8
 8017828:	4311      	orrs	r1, r2
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801782e:	4311      	orrs	r1, r2
 8017830:	687a      	ldr	r2, [r7, #4]
 8017832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017834:	4311      	orrs	r1, r2
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801783a:	430a      	orrs	r2, r1
 801783c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017840:	4313      	orrs	r3, r2
 8017842:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017844:	f7ff fc45 	bl	80170d2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801784c:	68db      	ldr	r3, [r3, #12]
 801784e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017858:	f7fd fed6 	bl	8015608 <HAL_GetTick>
 801785c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801785e:	e008      	b.n	8017872 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017860:	f7fd fed2 	bl	8015608 <HAL_GetTick>
 8017864:	4602      	mov	r2, r0
 8017866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017868:	1ad3      	subs	r3, r2, r3
 801786a:	2b02      	cmp	r3, #2
 801786c:	d901      	bls.n	8017872 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801786e:	2303      	movs	r3, #3
 8017870:	e059      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801787c:	2b00      	cmp	r3, #0
 801787e:	d0ef      	beq.n	8017860 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017880:	e050      	b.n	8017924 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8017882:	2301      	movs	r3, #1
 8017884:	e04f      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017890:	2b00      	cmp	r3, #0
 8017892:	d147      	bne.n	8017924 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8017894:	f7ff fc1d 	bl	80170d2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80178a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80178a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80178a8:	f7fd feae 	bl	8015608 <HAL_GetTick>
 80178ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80178ae:	e008      	b.n	80178c2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178b0:	f7fd feaa 	bl	8015608 <HAL_GetTick>
 80178b4:	4602      	mov	r2, r0
 80178b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b8:	1ad3      	subs	r3, r2, r3
 80178ba:	2b02      	cmp	r3, #2
 80178bc:	d901      	bls.n	80178c2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80178be:	2303      	movs	r3, #3
 80178c0:	e031      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80178c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d0ef      	beq.n	80178b0 <HAL_RCC_OscConfig+0x664>
 80178d0:	e028      	b.n	8017924 <HAL_RCC_OscConfig+0x6d8>
 80178d2:	bf00      	nop
 80178d4:	58000400 	.word	0x58000400
 80178d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	2b0c      	cmp	r3, #12
 80178e0:	d01e      	beq.n	8017920 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80178e2:	f7ff fc05 	bl	80170f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80178e6:	f7fd fe8f 	bl	8015608 <HAL_GetTick>
 80178ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80178ec:	e008      	b.n	8017900 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178ee:	f7fd fe8b 	bl	8015608 <HAL_GetTick>
 80178f2:	4602      	mov	r2, r0
 80178f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	2b02      	cmp	r3, #2
 80178fa:	d901      	bls.n	8017900 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80178fc:	2303      	movs	r3, #3
 80178fe:	e012      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801790a:	2b00      	cmp	r3, #0
 801790c:	d1ef      	bne.n	80178ee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801790e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017912:	68da      	ldr	r2, [r3, #12]
 8017914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017918:	4b05      	ldr	r3, [pc, #20]	; (8017930 <HAL_RCC_OscConfig+0x6e4>)
 801791a:	4013      	ands	r3, r2
 801791c:	60cb      	str	r3, [r1, #12]
 801791e:	e001      	b.n	8017924 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8017920:	2301      	movs	r3, #1
 8017922:	e000      	b.n	8017926 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8017924:	2300      	movs	r3, #0
}
 8017926:	4618      	mov	r0, r3
 8017928:	3734      	adds	r7, #52	; 0x34
 801792a:	46bd      	mov	sp, r7
 801792c:	bd90      	pop	{r4, r7, pc}
 801792e:	bf00      	nop
 8017930:	eefefffc 	.word	0xeefefffc

08017934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b084      	sub	sp, #16
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d101      	bne.n	8017948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017944:	2301      	movs	r3, #1
 8017946:	e12d      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017948:	4b98      	ldr	r3, [pc, #608]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	f003 0307 	and.w	r3, r3, #7
 8017950:	683a      	ldr	r2, [r7, #0]
 8017952:	429a      	cmp	r2, r3
 8017954:	d91b      	bls.n	801798e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017956:	4b95      	ldr	r3, [pc, #596]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	f023 0207 	bic.w	r2, r3, #7
 801795e:	4993      	ldr	r1, [pc, #588]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	4313      	orrs	r3, r2
 8017964:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017966:	f7fd fe4f 	bl	8015608 <HAL_GetTick>
 801796a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801796c:	e008      	b.n	8017980 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801796e:	f7fd fe4b 	bl	8015608 <HAL_GetTick>
 8017972:	4602      	mov	r2, r0
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	1ad3      	subs	r3, r2, r3
 8017978:	2b02      	cmp	r3, #2
 801797a:	d901      	bls.n	8017980 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801797c:	2303      	movs	r3, #3
 801797e:	e111      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017980:	4b8a      	ldr	r3, [pc, #552]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	f003 0307 	and.w	r3, r3, #7
 8017988:	683a      	ldr	r2, [r7, #0]
 801798a:	429a      	cmp	r2, r3
 801798c:	d1ef      	bne.n	801796e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	f003 0302 	and.w	r3, r3, #2
 8017996:	2b00      	cmp	r3, #0
 8017998:	d016      	beq.n	80179c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	689b      	ldr	r3, [r3, #8]
 801799e:	4618      	mov	r0, r3
 80179a0:	f7ff faef 	bl	8016f82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80179a4:	f7fd fe30 	bl	8015608 <HAL_GetTick>
 80179a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80179aa:	e008      	b.n	80179be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80179ac:	f7fd fe2c 	bl	8015608 <HAL_GetTick>
 80179b0:	4602      	mov	r2, r0
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	1ad3      	subs	r3, r2, r3
 80179b6:	2b02      	cmp	r3, #2
 80179b8:	d901      	bls.n	80179be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80179ba:	2303      	movs	r3, #3
 80179bc:	e0f2      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80179be:	f7ff fbe9 	bl	8017194 <LL_RCC_IsActiveFlag_HPRE>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d0f1      	beq.n	80179ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	f003 0320 	and.w	r3, r3, #32
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d016      	beq.n	8017a02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	695b      	ldr	r3, [r3, #20]
 80179d8:	4618      	mov	r0, r3
 80179da:	f7ff fae6 	bl	8016faa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80179de:	f7fd fe13 	bl	8015608 <HAL_GetTick>
 80179e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80179e4:	e008      	b.n	80179f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80179e6:	f7fd fe0f 	bl	8015608 <HAL_GetTick>
 80179ea:	4602      	mov	r2, r0
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	1ad3      	subs	r3, r2, r3
 80179f0:	2b02      	cmp	r3, #2
 80179f2:	d901      	bls.n	80179f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80179f4:	2303      	movs	r3, #3
 80179f6:	e0d5      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80179f8:	f7ff fbde 	bl	80171b8 <LL_RCC_IsActiveFlag_C2HPRE>
 80179fc:	4603      	mov	r3, r0
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d0f1      	beq.n	80179e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d016      	beq.n	8017a3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	699b      	ldr	r3, [r3, #24]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7ff fadf 	bl	8016fd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017a18:	f7fd fdf6 	bl	8015608 <HAL_GetTick>
 8017a1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017a1e:	e008      	b.n	8017a32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017a20:	f7fd fdf2 	bl	8015608 <HAL_GetTick>
 8017a24:	4602      	mov	r2, r0
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	2b02      	cmp	r3, #2
 8017a2c:	d901      	bls.n	8017a32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8017a2e:	2303      	movs	r3, #3
 8017a30:	e0b8      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017a32:	f7ff fbd4 	bl	80171de <LL_RCC_IsActiveFlag_SHDHPRE>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d0f1      	beq.n	8017a20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	f003 0304 	and.w	r3, r3, #4
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d016      	beq.n	8017a76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	68db      	ldr	r3, [r3, #12]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7ff fad9 	bl	8017004 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017a52:	f7fd fdd9 	bl	8015608 <HAL_GetTick>
 8017a56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017a58:	e008      	b.n	8017a6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017a5a:	f7fd fdd5 	bl	8015608 <HAL_GetTick>
 8017a5e:	4602      	mov	r2, r0
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	1ad3      	subs	r3, r2, r3
 8017a64:	2b02      	cmp	r3, #2
 8017a66:	d901      	bls.n	8017a6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017a68:	2303      	movs	r3, #3
 8017a6a:	e09b      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017a6c:	f7ff fbca 	bl	8017204 <LL_RCC_IsActiveFlag_PPRE1>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d0f1      	beq.n	8017a5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f003 0308 	and.w	r3, r3, #8
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d017      	beq.n	8017ab2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	691b      	ldr	r3, [r3, #16]
 8017a86:	00db      	lsls	r3, r3, #3
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7ff facf 	bl	801702c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017a8e:	f7fd fdbb 	bl	8015608 <HAL_GetTick>
 8017a92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017a94:	e008      	b.n	8017aa8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017a96:	f7fd fdb7 	bl	8015608 <HAL_GetTick>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	1ad3      	subs	r3, r2, r3
 8017aa0:	2b02      	cmp	r3, #2
 8017aa2:	d901      	bls.n	8017aa8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017aa4:	2303      	movs	r3, #3
 8017aa6:	e07d      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017aa8:	f7ff fbbe 	bl	8017228 <LL_RCC_IsActiveFlag_PPRE2>
 8017aac:	4603      	mov	r3, r0
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d0f1      	beq.n	8017a96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f003 0301 	and.w	r3, r3, #1
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d043      	beq.n	8017b46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	2b02      	cmp	r3, #2
 8017ac4:	d106      	bne.n	8017ad4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8017ac6:	f7ff f86f 	bl	8016ba8 <LL_RCC_HSE_IsReady>
 8017aca:	4603      	mov	r3, r0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d11e      	bne.n	8017b0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	e067      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	685b      	ldr	r3, [r3, #4]
 8017ad8:	2b03      	cmp	r3, #3
 8017ada:	d106      	bne.n	8017aea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017adc:	f7ff fb17 	bl	801710e <LL_RCC_PLL_IsReady>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d113      	bne.n	8017b0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	e05c      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	685b      	ldr	r3, [r3, #4]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d106      	bne.n	8017b00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8017af2:	f7ff f9d7 	bl	8016ea4 <LL_RCC_MSI_IsReady>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d108      	bne.n	8017b0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017afc:	2301      	movs	r3, #1
 8017afe:	e051      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8017b00:	f7ff f882 	bl	8016c08 <LL_RCC_HSI_IsReady>
 8017b04:	4603      	mov	r3, r0
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d101      	bne.n	8017b0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	e04a      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	685b      	ldr	r3, [r3, #4]
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7ff fa15 	bl	8016f42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017b18:	f7fd fd76 	bl	8015608 <HAL_GetTick>
 8017b1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b1e:	e00a      	b.n	8017b36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017b20:	f7fd fd72 	bl	8015608 <HAL_GetTick>
 8017b24:	4602      	mov	r2, r0
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	1ad3      	subs	r3, r2, r3
 8017b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	d901      	bls.n	8017b36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8017b32:	2303      	movs	r3, #3
 8017b34:	e036      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b36:	f7ff fa18 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	685b      	ldr	r3, [r3, #4]
 8017b40:	009b      	lsls	r3, r3, #2
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d1ec      	bne.n	8017b20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017b46:	4b19      	ldr	r3, [pc, #100]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	f003 0307 	and.w	r3, r3, #7
 8017b4e:	683a      	ldr	r2, [r7, #0]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d21b      	bcs.n	8017b8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b54:	4b15      	ldr	r3, [pc, #84]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	f023 0207 	bic.w	r2, r3, #7
 8017b5c:	4913      	ldr	r1, [pc, #76]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	4313      	orrs	r3, r2
 8017b62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017b64:	f7fd fd50 	bl	8015608 <HAL_GetTick>
 8017b68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b6a:	e008      	b.n	8017b7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017b6c:	f7fd fd4c 	bl	8015608 <HAL_GetTick>
 8017b70:	4602      	mov	r2, r0
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	1ad3      	subs	r3, r2, r3
 8017b76:	2b02      	cmp	r3, #2
 8017b78:	d901      	bls.n	8017b7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017b7a:	2303      	movs	r3, #3
 8017b7c:	e012      	b.n	8017ba4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b7e:	4b0b      	ldr	r3, [pc, #44]	; (8017bac <HAL_RCC_ClockConfig+0x278>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f003 0307 	and.w	r3, r3, #7
 8017b86:	683a      	ldr	r2, [r7, #0]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d1ef      	bne.n	8017b6c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017b8c:	f000 f87e 	bl	8017c8c <HAL_RCC_GetHCLKFreq>
 8017b90:	4603      	mov	r3, r0
 8017b92:	4a07      	ldr	r2, [pc, #28]	; (8017bb0 <HAL_RCC_ClockConfig+0x27c>)
 8017b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8017b96:	f7fd fd43 	bl	8015620 <HAL_GetTickPrio>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7e9 f8a3 	bl	8000ce8 <HAL_InitTick>
 8017ba2:	4603      	mov	r3, r0
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	58004000 	.word	0x58004000
 8017bb0:	20000008 	.word	0x20000008

08017bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017bb4:	b590      	push	{r4, r7, lr}
 8017bb6:	b085      	sub	sp, #20
 8017bb8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017bba:	f7ff f9d6 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017bbe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d10a      	bne.n	8017bdc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017bc6:	f7ff f992 	bl	8016eee <LL_RCC_MSI_GetRange>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	091b      	lsrs	r3, r3, #4
 8017bce:	f003 030f 	and.w	r3, r3, #15
 8017bd2:	4a2b      	ldr	r2, [pc, #172]	; (8017c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bd8:	60fb      	str	r3, [r7, #12]
 8017bda:	e04b      	b.n	8017c74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2b04      	cmp	r3, #4
 8017be0:	d102      	bne.n	8017be8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017be2:	4b28      	ldr	r3, [pc, #160]	; (8017c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017be4:	60fb      	str	r3, [r7, #12]
 8017be6:	e045      	b.n	8017c74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2b08      	cmp	r3, #8
 8017bec:	d10a      	bne.n	8017c04 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017bee:	f7fe ffab 	bl	8016b48 <LL_RCC_HSE_IsEnabledDiv2>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b01      	cmp	r3, #1
 8017bf6:	d102      	bne.n	8017bfe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017bf8:	4b22      	ldr	r3, [pc, #136]	; (8017c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	e03a      	b.n	8017c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8017bfe:	4b22      	ldr	r3, [pc, #136]	; (8017c88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017c00:	60fb      	str	r3, [r7, #12]
 8017c02:	e037      	b.n	8017c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017c04:	f7ff faba 	bl	801717c <LL_RCC_PLL_GetMainSource>
 8017c08:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	2b02      	cmp	r3, #2
 8017c0e:	d003      	beq.n	8017c18 <HAL_RCC_GetSysClockFreq+0x64>
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	2b03      	cmp	r3, #3
 8017c14:	d003      	beq.n	8017c1e <HAL_RCC_GetSysClockFreq+0x6a>
 8017c16:	e00d      	b.n	8017c34 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017c18:	4b1a      	ldr	r3, [pc, #104]	; (8017c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017c1a:	60bb      	str	r3, [r7, #8]
        break;
 8017c1c:	e015      	b.n	8017c4a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017c1e:	f7fe ff93 	bl	8016b48 <LL_RCC_HSE_IsEnabledDiv2>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	d102      	bne.n	8017c2e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017c28:	4b16      	ldr	r3, [pc, #88]	; (8017c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017c2a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017c2c:	e00d      	b.n	8017c4a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017c2e:	4b16      	ldr	r3, [pc, #88]	; (8017c88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017c30:	60bb      	str	r3, [r7, #8]
        break;
 8017c32:	e00a      	b.n	8017c4a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017c34:	f7ff f95b 	bl	8016eee <LL_RCC_MSI_GetRange>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	091b      	lsrs	r3, r3, #4
 8017c3c:	f003 030f 	and.w	r3, r3, #15
 8017c40:	4a0f      	ldr	r2, [pc, #60]	; (8017c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c46:	60bb      	str	r3, [r7, #8]
        break;
 8017c48:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017c4a:	f7ff fa72 	bl	8017132 <LL_RCC_PLL_GetN>
 8017c4e:	4602      	mov	r2, r0
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	fb03 f402 	mul.w	r4, r3, r2
 8017c56:	f7ff fa85 	bl	8017164 <LL_RCC_PLL_GetDivider>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	091b      	lsrs	r3, r3, #4
 8017c5e:	3301      	adds	r3, #1
 8017c60:	fbb4 f4f3 	udiv	r4, r4, r3
 8017c64:	f7ff fa72 	bl	801714c <LL_RCC_PLL_GetR>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	0f5b      	lsrs	r3, r3, #29
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	fbb4 f3f3 	udiv	r3, r4, r3
 8017c72:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017c74:	68fb      	ldr	r3, [r7, #12]
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3714      	adds	r7, #20
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd90      	pop	{r4, r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	0801ab74 	.word	0x0801ab74
 8017c84:	00f42400 	.word	0x00f42400
 8017c88:	01e84800 	.word	0x01e84800

08017c8c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017c8c:	b598      	push	{r3, r4, r7, lr}
 8017c8e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017c90:	f7ff ff90 	bl	8017bb4 <HAL_RCC_GetSysClockFreq>
 8017c94:	4604      	mov	r4, r0
 8017c96:	f7ff f9dd 	bl	8017054 <LL_RCC_GetAHBPrescaler>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	091b      	lsrs	r3, r3, #4
 8017c9e:	f003 030f 	and.w	r3, r3, #15
 8017ca2:	4a03      	ldr	r2, [pc, #12]	; (8017cb0 <HAL_RCC_GetHCLKFreq+0x24>)
 8017ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ca8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	bd98      	pop	{r3, r4, r7, pc}
 8017cb0:	0801ab14 	.word	0x0801ab14

08017cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017cb4:	b598      	push	{r3, r4, r7, lr}
 8017cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017cb8:	f7ff ffe8 	bl	8017c8c <HAL_RCC_GetHCLKFreq>
 8017cbc:	4604      	mov	r4, r0
 8017cbe:	f7ff f9f0 	bl	80170a2 <LL_RCC_GetAPB1Prescaler>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	0a1b      	lsrs	r3, r3, #8
 8017cc6:	f003 0307 	and.w	r3, r3, #7
 8017cca:	4a04      	ldr	r2, [pc, #16]	; (8017cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8017ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cd0:	f003 031f 	and.w	r3, r3, #31
 8017cd4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017cd8:	4618      	mov	r0, r3
 8017cda:	bd98      	pop	{r3, r4, r7, pc}
 8017cdc:	0801ab54 	.word	0x0801ab54

08017ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017ce0:	b598      	push	{r3, r4, r7, lr}
 8017ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017ce4:	f7ff ffd2 	bl	8017c8c <HAL_RCC_GetHCLKFreq>
 8017ce8:	4604      	mov	r4, r0
 8017cea:	f7ff f9e6 	bl	80170ba <LL_RCC_GetAPB2Prescaler>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	0adb      	lsrs	r3, r3, #11
 8017cf2:	f003 0307 	and.w	r3, r3, #7
 8017cf6:	4a04      	ldr	r2, [pc, #16]	; (8017d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cfc:	f003 031f 	and.w	r3, r3, #31
 8017d00:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	bd98      	pop	{r3, r4, r7, pc}
 8017d08:	0801ab54 	.word	0x0801ab54

08017d0c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	226f      	movs	r2, #111	; 0x6f
 8017d1a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017d1c:	f7ff f925 	bl	8016f6a <LL_RCC_GetSysClkSource>
 8017d20:	4602      	mov	r2, r0
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017d26:	f7ff f995 	bl	8017054 <LL_RCC_GetAHBPrescaler>
 8017d2a:	4602      	mov	r2, r0
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017d30:	f7ff f9b7 	bl	80170a2 <LL_RCC_GetAPB1Prescaler>
 8017d34:	4602      	mov	r2, r0
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017d3a:	f7ff f9be 	bl	80170ba <LL_RCC_GetAPB2Prescaler>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017d44:	f7ff f992 	bl	801706c <LL_C2_RCC_GetAHBPrescaler>
 8017d48:	4602      	mov	r2, r0
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017d4e:	f7ff f99a 	bl	8017086 <LL_RCC_GetAHB4Prescaler>
 8017d52:	4602      	mov	r2, r0
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017d58:	4b04      	ldr	r3, [pc, #16]	; (8017d6c <HAL_RCC_GetClockConfig+0x60>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	f003 0207 	and.w	r2, r3, #7
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	601a      	str	r2, [r3, #0]
}
 8017d64:	bf00      	nop
 8017d66:	3708      	adds	r7, #8
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	58004000 	.word	0x58004000

08017d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017d70:	b590      	push	{r4, r7, lr}
 8017d72:	b085      	sub	sp, #20
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2bb0      	cmp	r3, #176	; 0xb0
 8017d7c:	d903      	bls.n	8017d86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017d7e:	4b15      	ldr	r3, [pc, #84]	; (8017dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d82:	60fb      	str	r3, [r7, #12]
 8017d84:	e007      	b.n	8017d96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	091b      	lsrs	r3, r3, #4
 8017d8a:	f003 030f 	and.w	r3, r3, #15
 8017d8e:	4a11      	ldr	r2, [pc, #68]	; (8017dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017d96:	f7ff f976 	bl	8017086 <LL_RCC_GetAHB4Prescaler>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	091b      	lsrs	r3, r3, #4
 8017d9e:	f003 030f 	and.w	r3, r3, #15
 8017da2:	4a0d      	ldr	r2, [pc, #52]	; (8017dd8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017da8:	68fa      	ldr	r2, [r7, #12]
 8017daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8017dae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	4a0a      	ldr	r2, [pc, #40]	; (8017ddc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017db4:	fba2 2303 	umull	r2, r3, r2, r3
 8017db8:	0c9c      	lsrs	r4, r3, #18
 8017dba:	f7fe feb7 	bl	8016b2c <HAL_PWREx_GetVoltageRange>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	f000 f80c 	bl	8017de0 <RCC_SetFlashLatency>
 8017dc8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3714      	adds	r7, #20
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd90      	pop	{r4, r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	0801ab74 	.word	0x0801ab74
 8017dd8:	0801ab14 	.word	0x0801ab14
 8017ddc:	431bde83 	.word	0x431bde83

08017de0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017de0:	b590      	push	{r4, r7, lr}
 8017de2:	b093      	sub	sp, #76	; 0x4c
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
 8017de8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017dea:	4b37      	ldr	r3, [pc, #220]	; (8017ec8 <RCC_SetFlashLatency+0xe8>)
 8017dec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017df6:	4a35      	ldr	r2, [pc, #212]	; (8017ecc <RCC_SetFlashLatency+0xec>)
 8017df8:	f107 031c 	add.w	r3, r7, #28
 8017dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017e02:	4b33      	ldr	r3, [pc, #204]	; (8017ed0 <RCC_SetFlashLatency+0xf0>)
 8017e04:	f107 040c 	add.w	r4, r7, #12
 8017e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017e0e:	2300      	movs	r3, #0
 8017e10:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e18:	d11a      	bne.n	8017e50 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8017e1e:	e013      	b.n	8017e48 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	3348      	adds	r3, #72	; 0x48
 8017e26:	443b      	add	r3, r7
 8017e28:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d807      	bhi.n	8017e42 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e34:	009b      	lsls	r3, r3, #2
 8017e36:	3348      	adds	r3, #72	; 0x48
 8017e38:	443b      	add	r3, r7
 8017e3a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017e3e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017e40:	e020      	b.n	8017e84 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e44:	3301      	adds	r3, #1
 8017e46:	643b      	str	r3, [r7, #64]	; 0x40
 8017e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	d9e8      	bls.n	8017e20 <RCC_SetFlashLatency+0x40>
 8017e4e:	e019      	b.n	8017e84 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017e50:	2300      	movs	r3, #0
 8017e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e54:	e013      	b.n	8017e7e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	3348      	adds	r3, #72	; 0x48
 8017e5c:	443b      	add	r3, r7
 8017e5e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017e62:	687a      	ldr	r2, [r7, #4]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d807      	bhi.n	8017e78 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	3348      	adds	r3, #72	; 0x48
 8017e6e:	443b      	add	r3, r7
 8017e70:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017e74:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017e76:	e005      	b.n	8017e84 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e80:	2b02      	cmp	r3, #2
 8017e82:	d9e8      	bls.n	8017e56 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017e84:	4b13      	ldr	r3, [pc, #76]	; (8017ed4 <RCC_SetFlashLatency+0xf4>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	f023 0207 	bic.w	r2, r3, #7
 8017e8c:	4911      	ldr	r1, [pc, #68]	; (8017ed4 <RCC_SetFlashLatency+0xf4>)
 8017e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e90:	4313      	orrs	r3, r2
 8017e92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017e94:	f7fd fbb8 	bl	8015608 <HAL_GetTick>
 8017e98:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017e9a:	e008      	b.n	8017eae <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017e9c:	f7fd fbb4 	bl	8015608 <HAL_GetTick>
 8017ea0:	4602      	mov	r2, r0
 8017ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea4:	1ad3      	subs	r3, r2, r3
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d901      	bls.n	8017eae <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017eaa:	2303      	movs	r3, #3
 8017eac:	e007      	b.n	8017ebe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017eae:	4b09      	ldr	r3, [pc, #36]	; (8017ed4 <RCC_SetFlashLatency+0xf4>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	f003 0307 	and.w	r3, r3, #7
 8017eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d1ef      	bne.n	8017e9c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017ebc:	2300      	movs	r3, #0
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	374c      	adds	r7, #76	; 0x4c
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bd90      	pop	{r4, r7, pc}
 8017ec6:	bf00      	nop
 8017ec8:	0801aae8 	.word	0x0801aae8
 8017ecc:	0801aaf8 	.word	0x0801aaf8
 8017ed0:	0801ab04 	.word	0x0801ab04
 8017ed4:	58004000 	.word	0x58004000

08017ed8 <LL_RCC_LSE_IsEnabled>:
{
 8017ed8:	b480      	push	{r7}
 8017eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ee4:	f003 0301 	and.w	r3, r3, #1
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d101      	bne.n	8017ef0 <LL_RCC_LSE_IsEnabled+0x18>
 8017eec:	2301      	movs	r3, #1
 8017eee:	e000      	b.n	8017ef2 <LL_RCC_LSE_IsEnabled+0x1a>
 8017ef0:	2300      	movs	r3, #0
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efa:	4770      	bx	lr

08017efc <LL_RCC_LSE_IsReady>:
{
 8017efc:	b480      	push	{r7}
 8017efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f08:	f003 0302 	and.w	r3, r3, #2
 8017f0c:	2b02      	cmp	r3, #2
 8017f0e:	d101      	bne.n	8017f14 <LL_RCC_LSE_IsReady+0x18>
 8017f10:	2301      	movs	r3, #1
 8017f12:	e000      	b.n	8017f16 <LL_RCC_LSE_IsReady+0x1a>
 8017f14:	2300      	movs	r3, #0
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr

08017f20 <LL_RCC_MSI_EnablePLLMode>:
{
 8017f20:	b480      	push	{r7}
 8017f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f2e:	f043 0304 	orr.w	r3, r3, #4
 8017f32:	6013      	str	r3, [r2, #0]
}
 8017f34:	bf00      	nop
 8017f36:	46bd      	mov	sp, r7
 8017f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3c:	4770      	bx	lr

08017f3e <LL_RCC_SetRFWKPClockSource>:
{
 8017f3e:	b480      	push	{r7}
 8017f40:	b083      	sub	sp, #12
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	4313      	orrs	r3, r2
 8017f5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017f5e:	bf00      	nop
 8017f60:	370c      	adds	r7, #12
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr

08017f6a <LL_RCC_SetSMPSClockSource>:
{
 8017f6a:	b480      	push	{r7}
 8017f6c:	b083      	sub	sp, #12
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f78:	f023 0203 	bic.w	r2, r3, #3
 8017f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	4313      	orrs	r3, r2
 8017f84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017f86:	bf00      	nop
 8017f88:	370c      	adds	r7, #12
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f90:	4770      	bx	lr

08017f92 <LL_RCC_SetSMPSPrescaler>:
{
 8017f92:	b480      	push	{r7}
 8017f94:	b083      	sub	sp, #12
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	4313      	orrs	r3, r2
 8017fac:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017fae:	bf00      	nop
 8017fb0:	370c      	adds	r7, #12
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr

08017fba <LL_RCC_SetUSARTClockSource>:
{
 8017fba:	b480      	push	{r7}
 8017fbc:	b083      	sub	sp, #12
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fca:	f023 0203 	bic.w	r2, r3, #3
 8017fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	4313      	orrs	r3, r2
 8017fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017fda:	bf00      	nop
 8017fdc:	370c      	adds	r7, #12
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr

08017fe6 <LL_RCC_SetLPUARTClockSource>:
{
 8017fe6:	b480      	push	{r7}
 8017fe8:	b083      	sub	sp, #12
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	4313      	orrs	r3, r2
 8018002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018006:	bf00      	nop
 8018008:	370c      	adds	r7, #12
 801800a:	46bd      	mov	sp, r7
 801800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018010:	4770      	bx	lr

08018012 <LL_RCC_SetI2CClockSource>:
{
 8018012:	b480      	push	{r7}
 8018014:	b083      	sub	sp, #12
 8018016:	af00      	add	r7, sp, #0
 8018018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801801a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801801e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	091b      	lsrs	r3, r3, #4
 8018026:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801802a:	43db      	mvns	r3, r3
 801802c:	401a      	ands	r2, r3
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	011b      	lsls	r3, r3, #4
 8018032:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8018036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801803a:	4313      	orrs	r3, r2
 801803c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018040:	bf00      	nop
 8018042:	370c      	adds	r7, #12
 8018044:	46bd      	mov	sp, r7
 8018046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804a:	4770      	bx	lr

0801804c <LL_RCC_SetLPTIMClockSource>:
{
 801804c:	b480      	push	{r7}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8018054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018058:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	0c1b      	lsrs	r3, r3, #16
 8018060:	041b      	lsls	r3, r3, #16
 8018062:	43db      	mvns	r3, r3
 8018064:	401a      	ands	r2, r3
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	041b      	lsls	r3, r3, #16
 801806a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801806e:	4313      	orrs	r3, r2
 8018070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018074:	bf00      	nop
 8018076:	370c      	adds	r7, #12
 8018078:	46bd      	mov	sp, r7
 801807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807e:	4770      	bx	lr

08018080 <LL_RCC_SetSAIClockSource>:
{
 8018080:	b480      	push	{r7}
 8018082:	b083      	sub	sp, #12
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8018088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8018094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	4313      	orrs	r3, r2
 801809c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80180a0:	bf00      	nop
 80180a2:	370c      	adds	r7, #12
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <LL_RCC_SetRNGClockSource>:
{
 80180ac:	b480      	push	{r7}
 80180ae:	b083      	sub	sp, #12
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80180b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80180c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	4313      	orrs	r3, r2
 80180c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80180cc:	bf00      	nop
 80180ce:	370c      	adds	r7, #12
 80180d0:	46bd      	mov	sp, r7
 80180d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d6:	4770      	bx	lr

080180d8 <LL_RCC_SetCLK48ClockSource>:
{
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80180e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80180ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	4313      	orrs	r3, r2
 80180f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80180f8:	bf00      	nop
 80180fa:	370c      	adds	r7, #12
 80180fc:	46bd      	mov	sp, r7
 80180fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018102:	4770      	bx	lr

08018104 <LL_RCC_SetUSBClockSource>:
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f7ff ffe3 	bl	80180d8 <LL_RCC_SetCLK48ClockSource>
}
 8018112:	bf00      	nop
 8018114:	3708      	adds	r7, #8
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}

0801811a <LL_RCC_SetADCClockSource>:
{
 801811a:	b480      	push	{r7}
 801811c:	b083      	sub	sp, #12
 801811e:	af00      	add	r7, sp, #0
 8018120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8018122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801812a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801812e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	4313      	orrs	r3, r2
 8018136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801813a:	bf00      	nop
 801813c:	370c      	adds	r7, #12
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr

08018146 <LL_RCC_SetRTCClockSource>:
{
 8018146:	b480      	push	{r7}
 8018148:	b083      	sub	sp, #12
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801814e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801815a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	4313      	orrs	r3, r2
 8018162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8018166:	bf00      	nop
 8018168:	370c      	adds	r7, #12
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr

08018172 <LL_RCC_GetRTCClockSource>:
{
 8018172:	b480      	push	{r7}
 8018174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8018176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8018182:	4618      	mov	r0, r3
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr

0801818c <LL_RCC_ForceBackupDomainReset>:
{
 801818c:	b480      	push	{r7}
 801818e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8018190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801819c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80181a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80181a4:	bf00      	nop
 80181a6:	46bd      	mov	sp, r7
 80181a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ac:	4770      	bx	lr

080181ae <LL_RCC_ReleaseBackupDomainReset>:
{
 80181ae:	b480      	push	{r7}
 80181b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80181b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80181c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80181c6:	bf00      	nop
 80181c8:	46bd      	mov	sp, r7
 80181ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ce:	4770      	bx	lr

080181d0 <LL_RCC_PLLSAI1_Enable>:
{
 80181d0:	b480      	push	{r7}
 80181d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80181d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80181e2:	6013      	str	r3, [r2, #0]
}
 80181e4:	bf00      	nop
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr

080181ee <LL_RCC_PLLSAI1_Disable>:
{
 80181ee:	b480      	push	{r7}
 80181f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80181f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018200:	6013      	str	r3, [r2, #0]
}
 8018202:	bf00      	nop
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <LL_RCC_PLLSAI1_IsReady>:
{
 801820c:	b480      	push	{r7}
 801820e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8018210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801821a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801821e:	d101      	bne.n	8018224 <LL_RCC_PLLSAI1_IsReady+0x18>
 8018220:	2301      	movs	r3, #1
 8018222:	e000      	b.n	8018226 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8018224:	2300      	movs	r3, #0
}
 8018226:	4618      	mov	r0, r3
 8018228:	46bd      	mov	sp, r7
 801822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822e:	4770      	bx	lr

08018230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b088      	sub	sp, #32
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8018238:	2300      	movs	r3, #0
 801823a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801823c:	2300      	movs	r3, #0
 801823e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018248:	2b00      	cmp	r3, #0
 801824a:	d034      	beq.n	80182b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8018254:	d021      	beq.n	801829a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8018256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801825a:	d81b      	bhi.n	8018294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801825c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018260:	d01d      	beq.n	801829e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8018262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018266:	d815      	bhi.n	8018294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018268:	2b00      	cmp	r3, #0
 801826a:	d00b      	beq.n	8018284 <HAL_RCCEx_PeriphCLKConfig+0x54>
 801826c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018270:	d110      	bne.n	8018294 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8018272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018276:	68db      	ldr	r3, [r3, #12]
 8018278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801827c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018280:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8018282:	e00d      	b.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	3304      	adds	r3, #4
 8018288:	4618      	mov	r0, r3
 801828a:	f000 f94d 	bl	8018528 <RCCEx_PLLSAI1_ConfigNP>
 801828e:	4603      	mov	r3, r0
 8018290:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8018292:	e005      	b.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8018294:	2301      	movs	r3, #1
 8018296:	77fb      	strb	r3, [r7, #31]
        break;
 8018298:	e002      	b.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801829a:	bf00      	nop
 801829c:	e000      	b.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801829e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80182a0:	7ffb      	ldrb	r3, [r7, #31]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d105      	bne.n	80182b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7ff fee8 	bl	8018080 <LL_RCC_SetSAIClockSource>
 80182b0:	e001      	b.n	80182b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80182b2:	7ffb      	ldrb	r3, [r7, #31]
 80182b4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d046      	beq.n	8018350 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80182c2:	f7ff ff56 	bl	8018172 <LL_RCC_GetRTCClockSource>
 80182c6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182cc:	69ba      	ldr	r2, [r7, #24]
 80182ce:	429a      	cmp	r2, r3
 80182d0:	d03c      	beq.n	801834c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80182d2:	f7fe fc1b 	bl	8016b0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d105      	bne.n	80182e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7ff ff30 	bl	8018146 <LL_RCC_SetRTCClockSource>
 80182e6:	e02e      	b.n	8018346 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80182e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80182f0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80182f2:	f7ff ff4b 	bl	801818c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80182f6:	f7ff ff5a 	bl	80181ae <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018304:	4313      	orrs	r3, r2
 8018306:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8018308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8018312:	f7ff fde1 	bl	8017ed8 <LL_RCC_LSE_IsEnabled>
 8018316:	4603      	mov	r3, r0
 8018318:	2b01      	cmp	r3, #1
 801831a:	d114      	bne.n	8018346 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801831c:	f7fd f974 	bl	8015608 <HAL_GetTick>
 8018320:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8018322:	e00b      	b.n	801833c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018324:	f7fd f970 	bl	8015608 <HAL_GetTick>
 8018328:	4602      	mov	r2, r0
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	1ad3      	subs	r3, r2, r3
 801832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018332:	4293      	cmp	r3, r2
 8018334:	d902      	bls.n	801833c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8018336:	2303      	movs	r3, #3
 8018338:	77fb      	strb	r3, [r7, #31]
              break;
 801833a:	e004      	b.n	8018346 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801833c:	f7ff fdde 	bl	8017efc <LL_RCC_LSE_IsReady>
 8018340:	4603      	mov	r3, r0
 8018342:	2b01      	cmp	r3, #1
 8018344:	d1ee      	bne.n	8018324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8018346:	7ffb      	ldrb	r3, [r7, #31]
 8018348:	77bb      	strb	r3, [r7, #30]
 801834a:	e001      	b.n	8018350 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801834c:	7ffb      	ldrb	r3, [r7, #31]
 801834e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	f003 0301 	and.w	r3, r3, #1
 8018358:	2b00      	cmp	r3, #0
 801835a:	d004      	beq.n	8018366 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	699b      	ldr	r3, [r3, #24]
 8018360:	4618      	mov	r0, r3
 8018362:	f7ff fe2a 	bl	8017fba <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	f003 0302 	and.w	r3, r3, #2
 801836e:	2b00      	cmp	r3, #0
 8018370:	d004      	beq.n	801837c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	69db      	ldr	r3, [r3, #28]
 8018376:	4618      	mov	r0, r3
 8018378:	f7ff fe35 	bl	8017fe6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f003 0310 	and.w	r3, r3, #16
 8018384:	2b00      	cmp	r3, #0
 8018386:	d004      	beq.n	8018392 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801838c:	4618      	mov	r0, r3
 801838e:	f7ff fe5d 	bl	801804c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	f003 0320 	and.w	r3, r3, #32
 801839a:	2b00      	cmp	r3, #0
 801839c:	d004      	beq.n	80183a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7ff fe52 	bl	801804c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	f003 0304 	and.w	r3, r3, #4
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d004      	beq.n	80183be <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6a1b      	ldr	r3, [r3, #32]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7ff fe2a 	bl	8018012 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f003 0308 	and.w	r3, r3, #8
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d004      	beq.n	80183d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ff fe1f 	bl	8018012 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d022      	beq.n	8018426 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7ff fe8d 	bl	8018104 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80183f2:	d107      	bne.n	8018404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80183f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80183fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018402:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801840c:	d10b      	bne.n	8018426 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	3304      	adds	r3, #4
 8018412:	4618      	mov	r0, r3
 8018414:	f000 f8e3 	bl	80185de <RCCEx_PLLSAI1_ConfigNQ>
 8018418:	4603      	mov	r3, r0
 801841a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801841c:	7ffb      	ldrb	r3, [r7, #31]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d001      	beq.n	8018426 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8018422:	7ffb      	ldrb	r3, [r7, #31]
 8018424:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801842e:	2b00      	cmp	r3, #0
 8018430:	d02b      	beq.n	801848a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801843a:	d008      	beq.n	801844e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018444:	d003      	beq.n	801844e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801844a:	2b00      	cmp	r3, #0
 801844c:	d105      	bne.n	801845a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018452:	4618      	mov	r0, r3
 8018454:	f7ff fe2a 	bl	80180ac <LL_RCC_SetRNGClockSource>
 8018458:	e00a      	b.n	8018470 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801845e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018462:	60fb      	str	r3, [r7, #12]
 8018464:	2000      	movs	r0, #0
 8018466:	f7ff fe21 	bl	80180ac <LL_RCC_SetRNGClockSource>
 801846a:	68f8      	ldr	r0, [r7, #12]
 801846c:	f7ff fe34 	bl	80180d8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018474:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018478:	d107      	bne.n	801848a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801847a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801847e:	68db      	ldr	r3, [r3, #12]
 8018480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018488:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018492:	2b00      	cmp	r3, #0
 8018494:	d022      	beq.n	80184dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801849a:	4618      	mov	r0, r3
 801849c:	f7ff fe3d 	bl	801811a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80184a8:	d107      	bne.n	80184ba <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80184aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80184b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80184b8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80184c2:	d10b      	bne.n	80184dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	3304      	adds	r3, #4
 80184c8:	4618      	mov	r0, r3
 80184ca:	f000 f8e3 	bl	8018694 <RCCEx_PLLSAI1_ConfigNR>
 80184ce:	4603      	mov	r3, r0
 80184d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80184d2:	7ffb      	ldrb	r3, [r7, #31]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d001      	beq.n	80184dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80184d8:	7ffb      	ldrb	r3, [r7, #31]
 80184da:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d004      	beq.n	80184f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7ff fd26 	bl	8017f3e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d009      	beq.n	8018512 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018502:	4618      	mov	r0, r3
 8018504:	f7ff fd45 	bl	8017f92 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801850c:	4618      	mov	r0, r3
 801850e:	f7ff fd2c 	bl	8017f6a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8018512:	7fbb      	ldrb	r3, [r7, #30]
}
 8018514:	4618      	mov	r0, r3
 8018516:	3720      	adds	r7, #32
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}

0801851c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018520:	f7ff fcfe 	bl	8017f20 <LL_RCC_MSI_EnablePLLMode>
}
 8018524:	bf00      	nop
 8018526:	bd80      	pop	{r7, pc}

08018528 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018530:	2300      	movs	r3, #0
 8018532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018534:	f7ff fe5b 	bl	80181ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018538:	f7fd f866 	bl	8015608 <HAL_GetTick>
 801853c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801853e:	e009      	b.n	8018554 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018540:	f7fd f862 	bl	8015608 <HAL_GetTick>
 8018544:	4602      	mov	r2, r0
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	1ad3      	subs	r3, r2, r3
 801854a:	2b02      	cmp	r3, #2
 801854c:	d902      	bls.n	8018554 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801854e:	2303      	movs	r3, #3
 8018550:	73fb      	strb	r3, [r7, #15]
      break;
 8018552:	e004      	b.n	801855e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018554:	f7ff fe5a 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 8018558:	4603      	mov	r3, r0
 801855a:	2b00      	cmp	r3, #0
 801855c:	d1f0      	bne.n	8018540 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801855e:	7bfb      	ldrb	r3, [r7, #15]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d137      	bne.n	80185d4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018568:	691b      	ldr	r3, [r3, #16]
 801856a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	021b      	lsls	r3, r3, #8
 8018574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018578:	4313      	orrs	r3, r2
 801857a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018580:	691b      	ldr	r3, [r3, #16]
 8018582:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801858e:	4313      	orrs	r3, r2
 8018590:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018592:	f7ff fe1d 	bl	80181d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018596:	f7fd f837 	bl	8015608 <HAL_GetTick>
 801859a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801859c:	e009      	b.n	80185b2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801859e:	f7fd f833 	bl	8015608 <HAL_GetTick>
 80185a2:	4602      	mov	r2, r0
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	1ad3      	subs	r3, r2, r3
 80185a8:	2b02      	cmp	r3, #2
 80185aa:	d902      	bls.n	80185b2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80185ac:	2303      	movs	r3, #3
 80185ae:	73fb      	strb	r3, [r7, #15]
        break;
 80185b0:	e004      	b.n	80185bc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80185b2:	f7ff fe2b 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 80185b6:	4603      	mov	r3, r0
 80185b8:	2b01      	cmp	r3, #1
 80185ba:	d1f0      	bne.n	801859e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80185bc:	7bfb      	ldrb	r3, [r7, #15]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d108      	bne.n	80185d4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80185c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185c6:	691a      	ldr	r2, [r3, #16]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	691b      	ldr	r3, [r3, #16]
 80185cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80185d0:	4313      	orrs	r3, r2
 80185d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80185d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3710      	adds	r7, #16
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}

080185de <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80185de:	b580      	push	{r7, lr}
 80185e0:	b084      	sub	sp, #16
 80185e2:	af00      	add	r7, sp, #0
 80185e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80185e6:	2300      	movs	r3, #0
 80185e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80185ea:	f7ff fe00 	bl	80181ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80185ee:	f7fd f80b 	bl	8015608 <HAL_GetTick>
 80185f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80185f4:	e009      	b.n	801860a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80185f6:	f7fd f807 	bl	8015608 <HAL_GetTick>
 80185fa:	4602      	mov	r2, r0
 80185fc:	68bb      	ldr	r3, [r7, #8]
 80185fe:	1ad3      	subs	r3, r2, r3
 8018600:	2b02      	cmp	r3, #2
 8018602:	d902      	bls.n	801860a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8018604:	2303      	movs	r3, #3
 8018606:	73fb      	strb	r3, [r7, #15]
      break;
 8018608:	e004      	b.n	8018614 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801860a:	f7ff fdff 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 801860e:	4603      	mov	r3, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	d1f0      	bne.n	80185f6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8018614:	7bfb      	ldrb	r3, [r7, #15]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d137      	bne.n	801868a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801861a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801861e:	691b      	ldr	r3, [r3, #16]
 8018620:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	021b      	lsls	r3, r3, #8
 801862a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801862e:	4313      	orrs	r3, r2
 8018630:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8018632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018636:	691b      	ldr	r3, [r3, #16]
 8018638:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	689b      	ldr	r3, [r3, #8]
 8018640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018644:	4313      	orrs	r3, r2
 8018646:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018648:	f7ff fdc2 	bl	80181d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801864c:	f7fc ffdc 	bl	8015608 <HAL_GetTick>
 8018650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018652:	e009      	b.n	8018668 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018654:	f7fc ffd8 	bl	8015608 <HAL_GetTick>
 8018658:	4602      	mov	r2, r0
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	2b02      	cmp	r3, #2
 8018660:	d902      	bls.n	8018668 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8018662:	2303      	movs	r3, #3
 8018664:	73fb      	strb	r3, [r7, #15]
        break;
 8018666:	e004      	b.n	8018672 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018668:	f7ff fdd0 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 801866c:	4603      	mov	r3, r0
 801866e:	2b01      	cmp	r3, #1
 8018670:	d1f0      	bne.n	8018654 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8018672:	7bfb      	ldrb	r3, [r7, #15]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d108      	bne.n	801868a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801867c:	691a      	ldr	r2, [r3, #16]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	691b      	ldr	r3, [r3, #16]
 8018682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018686:	4313      	orrs	r3, r2
 8018688:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801868a:	7bfb      	ldrb	r3, [r7, #15]
}
 801868c:	4618      	mov	r0, r3
 801868e:	3710      	adds	r7, #16
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}

08018694 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801869c:	2300      	movs	r3, #0
 801869e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80186a0:	f7ff fda5 	bl	80181ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80186a4:	f7fc ffb0 	bl	8015608 <HAL_GetTick>
 80186a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80186aa:	e009      	b.n	80186c0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80186ac:	f7fc ffac 	bl	8015608 <HAL_GetTick>
 80186b0:	4602      	mov	r2, r0
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	1ad3      	subs	r3, r2, r3
 80186b6:	2b02      	cmp	r3, #2
 80186b8:	d902      	bls.n	80186c0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80186ba:	2303      	movs	r3, #3
 80186bc:	73fb      	strb	r3, [r7, #15]
      break;
 80186be:	e004      	b.n	80186ca <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80186c0:	f7ff fda4 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 80186c4:	4603      	mov	r3, r0
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d1f0      	bne.n	80186ac <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80186ca:	7bfb      	ldrb	r3, [r7, #15]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d137      	bne.n	8018740 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80186d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80186d4:	691b      	ldr	r3, [r3, #16]
 80186d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	021b      	lsls	r3, r3, #8
 80186e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80186e4:	4313      	orrs	r3, r2
 80186e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80186e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80186ec:	691b      	ldr	r3, [r3, #16]
 80186ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	68db      	ldr	r3, [r3, #12]
 80186f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80186fa:	4313      	orrs	r3, r2
 80186fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80186fe:	f7ff fd67 	bl	80181d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018702:	f7fc ff81 	bl	8015608 <HAL_GetTick>
 8018706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018708:	e009      	b.n	801871e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801870a:	f7fc ff7d 	bl	8015608 <HAL_GetTick>
 801870e:	4602      	mov	r2, r0
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	1ad3      	subs	r3, r2, r3
 8018714:	2b02      	cmp	r3, #2
 8018716:	d902      	bls.n	801871e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018718:	2303      	movs	r3, #3
 801871a:	73fb      	strb	r3, [r7, #15]
        break;
 801871c:	e004      	b.n	8018728 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801871e:	f7ff fd75 	bl	801820c <LL_RCC_PLLSAI1_IsReady>
 8018722:	4603      	mov	r3, r0
 8018724:	2b01      	cmp	r3, #1
 8018726:	d1f0      	bne.n	801870a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018728:	7bfb      	ldrb	r3, [r7, #15]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d108      	bne.n	8018740 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801872e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018732:	691a      	ldr	r2, [r3, #16]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	691b      	ldr	r3, [r3, #16]
 8018738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801873c:	4313      	orrs	r3, r2
 801873e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018740:	7bfb      	ldrb	r3, [r7, #15]
}
 8018742:	4618      	mov	r0, r3
 8018744:	3710      	adds	r7, #16
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}

0801874a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801874a:	b580      	push	{r7, lr}
 801874c:	b082      	sub	sp, #8
 801874e:	af00      	add	r7, sp, #0
 8018750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d101      	bne.n	801875c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018758:	2301      	movs	r3, #1
 801875a:	e049      	b.n	80187f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018762:	b2db      	uxtb	r3, r3
 8018764:	2b00      	cmp	r3, #0
 8018766:	d106      	bne.n	8018776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2200      	movs	r2, #0
 801876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f000 f841 	bl	80187f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2202      	movs	r2, #2
 801877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681a      	ldr	r2, [r3, #0]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	3304      	adds	r3, #4
 8018786:	4619      	mov	r1, r3
 8018788:	4610      	mov	r0, r2
 801878a:	f000 f9d5 	bl	8018b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2201      	movs	r2, #1
 8018792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2201      	movs	r2, #1
 801879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2201      	movs	r2, #1
 80187a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	2201      	movs	r2, #1
 80187aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2201      	movs	r2, #1
 80187b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2201      	movs	r2, #1
 80187ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2201      	movs	r2, #1
 80187c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2201      	movs	r2, #1
 80187ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2201      	movs	r2, #1
 80187d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2201      	movs	r2, #1
 80187da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2201      	movs	r2, #1
 80187e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2201      	movs	r2, #1
 80187ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80187ee:	2300      	movs	r3, #0
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	3708      	adds	r7, #8
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80187f8:	b480      	push	{r7}
 80187fa:	b083      	sub	sp, #12
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018800:	bf00      	nop
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801880c:	b480      	push	{r7}
 801880e:	b085      	sub	sp, #20
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801881a:	b2db      	uxtb	r3, r3
 801881c:	2b01      	cmp	r3, #1
 801881e:	d001      	beq.n	8018824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018820:	2301      	movs	r3, #1
 8018822:	e036      	b.n	8018892 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2202      	movs	r2, #2
 8018828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	68da      	ldr	r2, [r3, #12]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f042 0201 	orr.w	r2, r2, #1
 801883a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	4a17      	ldr	r2, [pc, #92]	; (80188a0 <HAL_TIM_Base_Start_IT+0x94>)
 8018842:	4293      	cmp	r3, r2
 8018844:	d004      	beq.n	8018850 <HAL_TIM_Base_Start_IT+0x44>
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801884e:	d115      	bne.n	801887c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	689a      	ldr	r2, [r3, #8]
 8018856:	4b13      	ldr	r3, [pc, #76]	; (80188a4 <HAL_TIM_Base_Start_IT+0x98>)
 8018858:	4013      	ands	r3, r2
 801885a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2b06      	cmp	r3, #6
 8018860:	d015      	beq.n	801888e <HAL_TIM_Base_Start_IT+0x82>
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018868:	d011      	beq.n	801888e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	681a      	ldr	r2, [r3, #0]
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	f042 0201 	orr.w	r2, r2, #1
 8018878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801887a:	e008      	b.n	801888e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	681a      	ldr	r2, [r3, #0]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	f042 0201 	orr.w	r2, r2, #1
 801888a:	601a      	str	r2, [r3, #0]
 801888c:	e000      	b.n	8018890 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801888e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8018890:	2300      	movs	r3, #0
}
 8018892:	4618      	mov	r0, r3
 8018894:	3714      	adds	r7, #20
 8018896:	46bd      	mov	sp, r7
 8018898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889c:	4770      	bx	lr
 801889e:	bf00      	nop
 80188a0:	40012c00 	.word	0x40012c00
 80188a4:	00010007 	.word	0x00010007

080188a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	691b      	ldr	r3, [r3, #16]
 80188b6:	f003 0302 	and.w	r3, r3, #2
 80188ba:	2b02      	cmp	r3, #2
 80188bc:	d122      	bne.n	8018904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	f003 0302 	and.w	r3, r3, #2
 80188c8:	2b02      	cmp	r3, #2
 80188ca:	d11b      	bne.n	8018904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	f06f 0202 	mvn.w	r2, #2
 80188d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2201      	movs	r2, #1
 80188da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	699b      	ldr	r3, [r3, #24]
 80188e2:	f003 0303 	and.w	r3, r3, #3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d003      	beq.n	80188f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80188ea:	6878      	ldr	r0, [r7, #4]
 80188ec:	f000 f905 	bl	8018afa <HAL_TIM_IC_CaptureCallback>
 80188f0:	e005      	b.n	80188fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80188f2:	6878      	ldr	r0, [r7, #4]
 80188f4:	f000 f8f7 	bl	8018ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f000 f908 	bl	8018b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2200      	movs	r2, #0
 8018902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	691b      	ldr	r3, [r3, #16]
 801890a:	f003 0304 	and.w	r3, r3, #4
 801890e:	2b04      	cmp	r3, #4
 8018910:	d122      	bne.n	8018958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	f003 0304 	and.w	r3, r3, #4
 801891c:	2b04      	cmp	r3, #4
 801891e:	d11b      	bne.n	8018958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	f06f 0204 	mvn.w	r2, #4
 8018928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2202      	movs	r2, #2
 801892e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	699b      	ldr	r3, [r3, #24]
 8018936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801893a:	2b00      	cmp	r3, #0
 801893c:	d003      	beq.n	8018946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f000 f8db 	bl	8018afa <HAL_TIM_IC_CaptureCallback>
 8018944:	e005      	b.n	8018952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018946:	6878      	ldr	r0, [r7, #4]
 8018948:	f000 f8cd 	bl	8018ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f000 f8de 	bl	8018b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	2200      	movs	r2, #0
 8018956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	691b      	ldr	r3, [r3, #16]
 801895e:	f003 0308 	and.w	r3, r3, #8
 8018962:	2b08      	cmp	r3, #8
 8018964:	d122      	bne.n	80189ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	f003 0308 	and.w	r3, r3, #8
 8018970:	2b08      	cmp	r3, #8
 8018972:	d11b      	bne.n	80189ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	f06f 0208 	mvn.w	r2, #8
 801897c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2204      	movs	r2, #4
 8018982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	69db      	ldr	r3, [r3, #28]
 801898a:	f003 0303 	and.w	r3, r3, #3
 801898e:	2b00      	cmp	r3, #0
 8018990:	d003      	beq.n	801899a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f000 f8b1 	bl	8018afa <HAL_TIM_IC_CaptureCallback>
 8018998:	e005      	b.n	80189a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801899a:	6878      	ldr	r0, [r7, #4]
 801899c:	f000 f8a3 	bl	8018ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f000 f8b4 	bl	8018b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	691b      	ldr	r3, [r3, #16]
 80189b2:	f003 0310 	and.w	r3, r3, #16
 80189b6:	2b10      	cmp	r3, #16
 80189b8:	d122      	bne.n	8018a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	68db      	ldr	r3, [r3, #12]
 80189c0:	f003 0310 	and.w	r3, r3, #16
 80189c4:	2b10      	cmp	r3, #16
 80189c6:	d11b      	bne.n	8018a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f06f 0210 	mvn.w	r2, #16
 80189d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2208      	movs	r2, #8
 80189d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	69db      	ldr	r3, [r3, #28]
 80189de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d003      	beq.n	80189ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 f887 	bl	8018afa <HAL_TIM_IC_CaptureCallback>
 80189ec:	e005      	b.n	80189fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f000 f879 	bl	8018ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f000 f88a 	bl	8018b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2200      	movs	r2, #0
 80189fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	691b      	ldr	r3, [r3, #16]
 8018a06:	f003 0301 	and.w	r3, r3, #1
 8018a0a:	2b01      	cmp	r3, #1
 8018a0c:	d10e      	bne.n	8018a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	f003 0301 	and.w	r3, r3, #1
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	d107      	bne.n	8018a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	f06f 0201 	mvn.w	r2, #1
 8018a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018a26:	6878      	ldr	r0, [r7, #4]
 8018a28:	f7e8 f926 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	691b      	ldr	r3, [r3, #16]
 8018a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a36:	2b80      	cmp	r3, #128	; 0x80
 8018a38:	d10e      	bne.n	8018a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a44:	2b80      	cmp	r3, #128	; 0x80
 8018a46:	d107      	bne.n	8018a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f000 f8de 	bl	8018c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	691b      	ldr	r3, [r3, #16]
 8018a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a66:	d10e      	bne.n	8018a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	68db      	ldr	r3, [r3, #12]
 8018a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a72:	2b80      	cmp	r3, #128	; 0x80
 8018a74:	d107      	bne.n	8018a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018a80:	6878      	ldr	r0, [r7, #4]
 8018a82:	f000 f8d1 	bl	8018c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	691b      	ldr	r3, [r3, #16]
 8018a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a90:	2b40      	cmp	r3, #64	; 0x40
 8018a92:	d10e      	bne.n	8018ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a9e:	2b40      	cmp	r3, #64	; 0x40
 8018aa0:	d107      	bne.n	8018ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f000 f838 	bl	8018b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	691b      	ldr	r3, [r3, #16]
 8018ab8:	f003 0320 	and.w	r3, r3, #32
 8018abc:	2b20      	cmp	r3, #32
 8018abe:	d10e      	bne.n	8018ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	f003 0320 	and.w	r3, r3, #32
 8018aca:	2b20      	cmp	r3, #32
 8018acc:	d107      	bne.n	8018ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	f06f 0220 	mvn.w	r2, #32
 8018ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018ad8:	6878      	ldr	r0, [r7, #4]
 8018ada:	f000 f891 	bl	8018c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018ade:	bf00      	nop
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}

08018ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018ae6:	b480      	push	{r7}
 8018ae8:	b083      	sub	sp, #12
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018aee:	bf00      	nop
 8018af0:	370c      	adds	r7, #12
 8018af2:	46bd      	mov	sp, r7
 8018af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af8:	4770      	bx	lr

08018afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018afa:	b480      	push	{r7}
 8018afc:	b083      	sub	sp, #12
 8018afe:	af00      	add	r7, sp, #0
 8018b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018b02:	bf00      	nop
 8018b04:	370c      	adds	r7, #12
 8018b06:	46bd      	mov	sp, r7
 8018b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0c:	4770      	bx	lr

08018b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018b0e:	b480      	push	{r7}
 8018b10:	b083      	sub	sp, #12
 8018b12:	af00      	add	r7, sp, #0
 8018b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018b16:	bf00      	nop
 8018b18:	370c      	adds	r7, #12
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr

08018b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018b22:	b480      	push	{r7}
 8018b24:	b083      	sub	sp, #12
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018b2a:	bf00      	nop
 8018b2c:	370c      	adds	r7, #12
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr
	...

08018b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018b38:	b480      	push	{r7}
 8018b3a:	b085      	sub	sp, #20
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
 8018b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	4a2a      	ldr	r2, [pc, #168]	; (8018bf4 <TIM_Base_SetConfig+0xbc>)
 8018b4c:	4293      	cmp	r3, r2
 8018b4e:	d003      	beq.n	8018b58 <TIM_Base_SetConfig+0x20>
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b56:	d108      	bne.n	8018b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	68fa      	ldr	r2, [r7, #12]
 8018b66:	4313      	orrs	r3, r2
 8018b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	4a21      	ldr	r2, [pc, #132]	; (8018bf4 <TIM_Base_SetConfig+0xbc>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d00b      	beq.n	8018b8a <TIM_Base_SetConfig+0x52>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b78:	d007      	beq.n	8018b8a <TIM_Base_SetConfig+0x52>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	4a1e      	ldr	r2, [pc, #120]	; (8018bf8 <TIM_Base_SetConfig+0xc0>)
 8018b7e:	4293      	cmp	r3, r2
 8018b80:	d003      	beq.n	8018b8a <TIM_Base_SetConfig+0x52>
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4a1d      	ldr	r2, [pc, #116]	; (8018bfc <TIM_Base_SetConfig+0xc4>)
 8018b86:	4293      	cmp	r3, r2
 8018b88:	d108      	bne.n	8018b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	68db      	ldr	r3, [r3, #12]
 8018b96:	68fa      	ldr	r2, [r7, #12]
 8018b98:	4313      	orrs	r3, r2
 8018b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	695b      	ldr	r3, [r3, #20]
 8018ba6:	4313      	orrs	r3, r2
 8018ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	68fa      	ldr	r2, [r7, #12]
 8018bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	689a      	ldr	r2, [r3, #8]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	4a0c      	ldr	r2, [pc, #48]	; (8018bf4 <TIM_Base_SetConfig+0xbc>)
 8018bc4:	4293      	cmp	r3, r2
 8018bc6:	d007      	beq.n	8018bd8 <TIM_Base_SetConfig+0xa0>
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	4a0b      	ldr	r2, [pc, #44]	; (8018bf8 <TIM_Base_SetConfig+0xc0>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d003      	beq.n	8018bd8 <TIM_Base_SetConfig+0xa0>
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	4a0a      	ldr	r2, [pc, #40]	; (8018bfc <TIM_Base_SetConfig+0xc4>)
 8018bd4:	4293      	cmp	r3, r2
 8018bd6:	d103      	bne.n	8018be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	691a      	ldr	r2, [r3, #16]
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2201      	movs	r2, #1
 8018be4:	615a      	str	r2, [r3, #20]
}
 8018be6:	bf00      	nop
 8018be8:	3714      	adds	r7, #20
 8018bea:	46bd      	mov	sp, r7
 8018bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf0:	4770      	bx	lr
 8018bf2:	bf00      	nop
 8018bf4:	40012c00 	.word	0x40012c00
 8018bf8:	40014400 	.word	0x40014400
 8018bfc:	40014800 	.word	0x40014800

08018c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018c00:	b480      	push	{r7}
 8018c02:	b083      	sub	sp, #12
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018c08:	bf00      	nop
 8018c0a:	370c      	adds	r7, #12
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c12:	4770      	bx	lr

08018c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018c14:	b480      	push	{r7}
 8018c16:	b083      	sub	sp, #12
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018c1c:	bf00      	nop
 8018c1e:	370c      	adds	r7, #12
 8018c20:	46bd      	mov	sp, r7
 8018c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c26:	4770      	bx	lr

08018c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018c28:	b480      	push	{r7}
 8018c2a:	b083      	sub	sp, #12
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018c30:	bf00      	nop
 8018c32:	370c      	adds	r7, #12
 8018c34:	46bd      	mov	sp, r7
 8018c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3a:	4770      	bx	lr

08018c3c <LL_RCC_GetUSARTClockSource>:
{
 8018c3c:	b480      	push	{r7}
 8018c3e:	b083      	sub	sp, #12
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	4013      	ands	r3, r2
}
 8018c50:	4618      	mov	r0, r3
 8018c52:	370c      	adds	r7, #12
 8018c54:	46bd      	mov	sp, r7
 8018c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5a:	4770      	bx	lr

08018c5c <LL_RCC_GetLPUARTClockSource>:
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	b083      	sub	sp, #12
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	4013      	ands	r3, r2
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	370c      	adds	r7, #12
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d101      	bne.n	8018c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018c8a:	2301      	movs	r3, #1
 8018c8c:	e042      	b.n	8018d14 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d106      	bne.n	8018ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018ca0:	6878      	ldr	r0, [r7, #4]
 8018ca2:	f7e8 fba5 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2224      	movs	r2, #36	; 0x24
 8018caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	681a      	ldr	r2, [r3, #0]
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	f022 0201 	bic.w	r2, r2, #1
 8018cbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	f000 f82c 	bl	8018d1c <UART_SetConfig>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d101      	bne.n	8018cce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018cca:	2301      	movs	r3, #1
 8018ccc:	e022      	b.n	8018d14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d002      	beq.n	8018cdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f000 fa48 	bl	801916c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	685a      	ldr	r2, [r3, #4]
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	689a      	ldr	r2, [r3, #8]
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	681a      	ldr	r2, [r3, #0]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	f042 0201 	orr.w	r2, r2, #1
 8018d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f000 facf 	bl	80192b0 <UART_CheckIdleState>
 8018d12:	4603      	mov	r3, r0
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	3708      	adds	r7, #8
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	bd80      	pop	{r7, pc}

08018d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018d20:	b08c      	sub	sp, #48	; 0x30
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018d26:	2300      	movs	r3, #0
 8018d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	689a      	ldr	r2, [r3, #8]
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	691b      	ldr	r3, [r3, #16]
 8018d34:	431a      	orrs	r2, r3
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	695b      	ldr	r3, [r3, #20]
 8018d3a:	431a      	orrs	r2, r3
 8018d3c:	697b      	ldr	r3, [r7, #20]
 8018d3e:	69db      	ldr	r3, [r3, #28]
 8018d40:	4313      	orrs	r3, r2
 8018d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	4baf      	ldr	r3, [pc, #700]	; (8019008 <UART_SetConfig+0x2ec>)
 8018d4c:	4013      	ands	r3, r2
 8018d4e:	697a      	ldr	r2, [r7, #20]
 8018d50:	6812      	ldr	r2, [r2, #0]
 8018d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d54:	430b      	orrs	r3, r1
 8018d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	68da      	ldr	r2, [r3, #12]
 8018d66:	697b      	ldr	r3, [r7, #20]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	430a      	orrs	r2, r1
 8018d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	699b      	ldr	r3, [r3, #24]
 8018d72:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	4aa4      	ldr	r2, [pc, #656]	; (801900c <UART_SetConfig+0x2f0>)
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	d004      	beq.n	8018d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	6a1b      	ldr	r3, [r3, #32]
 8018d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d84:	4313      	orrs	r3, r2
 8018d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	689b      	ldr	r3, [r3, #8]
 8018d8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018d92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018d96:	697a      	ldr	r2, [r7, #20]
 8018d98:	6812      	ldr	r2, [r2, #0]
 8018d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d9c:	430b      	orrs	r3, r1
 8018d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018da6:	f023 010f 	bic.w	r1, r3, #15
 8018daa:	697b      	ldr	r3, [r7, #20]
 8018dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	430a      	orrs	r2, r1
 8018db4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	4a95      	ldr	r2, [pc, #596]	; (8019010 <UART_SetConfig+0x2f4>)
 8018dbc:	4293      	cmp	r3, r2
 8018dbe:	d125      	bne.n	8018e0c <UART_SetConfig+0xf0>
 8018dc0:	2003      	movs	r0, #3
 8018dc2:	f7ff ff3b 	bl	8018c3c <LL_RCC_GetUSARTClockSource>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b03      	cmp	r3, #3
 8018dca:	d81b      	bhi.n	8018e04 <UART_SetConfig+0xe8>
 8018dcc:	a201      	add	r2, pc, #4	; (adr r2, 8018dd4 <UART_SetConfig+0xb8>)
 8018dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dd2:	bf00      	nop
 8018dd4:	08018de5 	.word	0x08018de5
 8018dd8:	08018df5 	.word	0x08018df5
 8018ddc:	08018ded 	.word	0x08018ded
 8018de0:	08018dfd 	.word	0x08018dfd
 8018de4:	2301      	movs	r3, #1
 8018de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dea:	e042      	b.n	8018e72 <UART_SetConfig+0x156>
 8018dec:	2302      	movs	r3, #2
 8018dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018df2:	e03e      	b.n	8018e72 <UART_SetConfig+0x156>
 8018df4:	2304      	movs	r3, #4
 8018df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dfa:	e03a      	b.n	8018e72 <UART_SetConfig+0x156>
 8018dfc:	2308      	movs	r3, #8
 8018dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e02:	e036      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e04:	2310      	movs	r3, #16
 8018e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e0a:	e032      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4a7e      	ldr	r2, [pc, #504]	; (801900c <UART_SetConfig+0x2f0>)
 8018e12:	4293      	cmp	r3, r2
 8018e14:	d12a      	bne.n	8018e6c <UART_SetConfig+0x150>
 8018e16:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018e1a:	f7ff ff1f 	bl	8018c5c <LL_RCC_GetLPUARTClockSource>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018e24:	d01a      	beq.n	8018e5c <UART_SetConfig+0x140>
 8018e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018e2a:	d81b      	bhi.n	8018e64 <UART_SetConfig+0x148>
 8018e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e30:	d00c      	beq.n	8018e4c <UART_SetConfig+0x130>
 8018e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e36:	d815      	bhi.n	8018e64 <UART_SetConfig+0x148>
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d003      	beq.n	8018e44 <UART_SetConfig+0x128>
 8018e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018e40:	d008      	beq.n	8018e54 <UART_SetConfig+0x138>
 8018e42:	e00f      	b.n	8018e64 <UART_SetConfig+0x148>
 8018e44:	2300      	movs	r3, #0
 8018e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e4a:	e012      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e4c:	2302      	movs	r3, #2
 8018e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e52:	e00e      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e54:	2304      	movs	r3, #4
 8018e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e5a:	e00a      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e5c:	2308      	movs	r3, #8
 8018e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e62:	e006      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e64:	2310      	movs	r3, #16
 8018e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e6a:	e002      	b.n	8018e72 <UART_SetConfig+0x156>
 8018e6c:	2310      	movs	r3, #16
 8018e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018e72:	697b      	ldr	r3, [r7, #20]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	4a65      	ldr	r2, [pc, #404]	; (801900c <UART_SetConfig+0x2f0>)
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	f040 8097 	bne.w	8018fac <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e82:	2b08      	cmp	r3, #8
 8018e84:	d823      	bhi.n	8018ece <UART_SetConfig+0x1b2>
 8018e86:	a201      	add	r2, pc, #4	; (adr r2, 8018e8c <UART_SetConfig+0x170>)
 8018e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e8c:	08018eb1 	.word	0x08018eb1
 8018e90:	08018ecf 	.word	0x08018ecf
 8018e94:	08018eb9 	.word	0x08018eb9
 8018e98:	08018ecf 	.word	0x08018ecf
 8018e9c:	08018ebf 	.word	0x08018ebf
 8018ea0:	08018ecf 	.word	0x08018ecf
 8018ea4:	08018ecf 	.word	0x08018ecf
 8018ea8:	08018ecf 	.word	0x08018ecf
 8018eac:	08018ec7 	.word	0x08018ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018eb0:	f7fe ff00 	bl	8017cb4 <HAL_RCC_GetPCLK1Freq>
 8018eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018eb6:	e010      	b.n	8018eda <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018eb8:	4b56      	ldr	r3, [pc, #344]	; (8019014 <UART_SetConfig+0x2f8>)
 8018eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018ebc:	e00d      	b.n	8018eda <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018ebe:	f7fe fe79 	bl	8017bb4 <HAL_RCC_GetSysClockFreq>
 8018ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018ec4:	e009      	b.n	8018eda <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018ecc:	e005      	b.n	8018eda <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018ece:	2300      	movs	r3, #0
 8018ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 812b 	beq.w	8019138 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee6:	4a4c      	ldr	r2, [pc, #304]	; (8019018 <UART_SetConfig+0x2fc>)
 8018ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018eec:	461a      	mov	r2, r3
 8018eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ef4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	685a      	ldr	r2, [r3, #4]
 8018efa:	4613      	mov	r3, r2
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	4413      	add	r3, r2
 8018f00:	69ba      	ldr	r2, [r7, #24]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d305      	bcc.n	8018f12 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	685b      	ldr	r3, [r3, #4]
 8018f0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f0c:	69ba      	ldr	r2, [r7, #24]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d903      	bls.n	8018f1a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018f12:	2301      	movs	r3, #1
 8018f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018f18:	e10e      	b.n	8019138 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	60bb      	str	r3, [r7, #8]
 8018f20:	60fa      	str	r2, [r7, #12]
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f26:	4a3c      	ldr	r2, [pc, #240]	; (8019018 <UART_SetConfig+0x2fc>)
 8018f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	2200      	movs	r2, #0
 8018f30:	603b      	str	r3, [r7, #0]
 8018f32:	607a      	str	r2, [r7, #4]
 8018f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018f3c:	f7e7 f9c0 	bl	80002c0 <__aeabi_uldivmod>
 8018f40:	4602      	mov	r2, r0
 8018f42:	460b      	mov	r3, r1
 8018f44:	4610      	mov	r0, r2
 8018f46:	4619      	mov	r1, r3
 8018f48:	f04f 0200 	mov.w	r2, #0
 8018f4c:	f04f 0300 	mov.w	r3, #0
 8018f50:	020b      	lsls	r3, r1, #8
 8018f52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018f56:	0202      	lsls	r2, r0, #8
 8018f58:	6979      	ldr	r1, [r7, #20]
 8018f5a:	6849      	ldr	r1, [r1, #4]
 8018f5c:	0849      	lsrs	r1, r1, #1
 8018f5e:	2000      	movs	r0, #0
 8018f60:	460c      	mov	r4, r1
 8018f62:	4605      	mov	r5, r0
 8018f64:	eb12 0804 	adds.w	r8, r2, r4
 8018f68:	eb43 0905 	adc.w	r9, r3, r5
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	685b      	ldr	r3, [r3, #4]
 8018f70:	2200      	movs	r2, #0
 8018f72:	469a      	mov	sl, r3
 8018f74:	4693      	mov	fp, r2
 8018f76:	4652      	mov	r2, sl
 8018f78:	465b      	mov	r3, fp
 8018f7a:	4640      	mov	r0, r8
 8018f7c:	4649      	mov	r1, r9
 8018f7e:	f7e7 f99f 	bl	80002c0 <__aeabi_uldivmod>
 8018f82:	4602      	mov	r2, r0
 8018f84:	460b      	mov	r3, r1
 8018f86:	4613      	mov	r3, r2
 8018f88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018f8a:	6a3b      	ldr	r3, [r7, #32]
 8018f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018f90:	d308      	bcc.n	8018fa4 <UART_SetConfig+0x288>
 8018f92:	6a3b      	ldr	r3, [r7, #32]
 8018f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018f98:	d204      	bcs.n	8018fa4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018f9a:	697b      	ldr	r3, [r7, #20]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	6a3a      	ldr	r2, [r7, #32]
 8018fa0:	60da      	str	r2, [r3, #12]
 8018fa2:	e0c9      	b.n	8019138 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018faa:	e0c5      	b.n	8019138 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	69db      	ldr	r3, [r3, #28]
 8018fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018fb4:	d16d      	bne.n	8019092 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018fba:	3b01      	subs	r3, #1
 8018fbc:	2b07      	cmp	r3, #7
 8018fbe:	d82d      	bhi.n	801901c <UART_SetConfig+0x300>
 8018fc0:	a201      	add	r2, pc, #4	; (adr r2, 8018fc8 <UART_SetConfig+0x2ac>)
 8018fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fc6:	bf00      	nop
 8018fc8:	08018fe9 	.word	0x08018fe9
 8018fcc:	08018ff1 	.word	0x08018ff1
 8018fd0:	0801901d 	.word	0x0801901d
 8018fd4:	08018ff7 	.word	0x08018ff7
 8018fd8:	0801901d 	.word	0x0801901d
 8018fdc:	0801901d 	.word	0x0801901d
 8018fe0:	0801901d 	.word	0x0801901d
 8018fe4:	08018fff 	.word	0x08018fff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018fe8:	f7fe fe7a 	bl	8017ce0 <HAL_RCC_GetPCLK2Freq>
 8018fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018fee:	e01b      	b.n	8019028 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018ff0:	4b08      	ldr	r3, [pc, #32]	; (8019014 <UART_SetConfig+0x2f8>)
 8018ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018ff4:	e018      	b.n	8019028 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018ff6:	f7fe fddd 	bl	8017bb4 <HAL_RCC_GetSysClockFreq>
 8018ffa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018ffc:	e014      	b.n	8019028 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019004:	e010      	b.n	8019028 <UART_SetConfig+0x30c>
 8019006:	bf00      	nop
 8019008:	cfff69f3 	.word	0xcfff69f3
 801900c:	40008000 	.word	0x40008000
 8019010:	40013800 	.word	0x40013800
 8019014:	00f42400 	.word	0x00f42400
 8019018:	0801abb4 	.word	0x0801abb4
      default:
        pclk = 0U;
 801901c:	2300      	movs	r3, #0
 801901e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8019020:	2301      	movs	r3, #1
 8019022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8019026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902a:	2b00      	cmp	r3, #0
 801902c:	f000 8084 	beq.w	8019138 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019034:	4a4b      	ldr	r2, [pc, #300]	; (8019164 <UART_SetConfig+0x448>)
 8019036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801903a:	461a      	mov	r2, r3
 801903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801903e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019042:	005a      	lsls	r2, r3, #1
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	685b      	ldr	r3, [r3, #4]
 8019048:	085b      	lsrs	r3, r3, #1
 801904a:	441a      	add	r2, r3
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	685b      	ldr	r3, [r3, #4]
 8019050:	fbb2 f3f3 	udiv	r3, r2, r3
 8019054:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019056:	6a3b      	ldr	r3, [r7, #32]
 8019058:	2b0f      	cmp	r3, #15
 801905a:	d916      	bls.n	801908a <UART_SetConfig+0x36e>
 801905c:	6a3b      	ldr	r3, [r7, #32]
 801905e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019062:	d212      	bcs.n	801908a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019064:	6a3b      	ldr	r3, [r7, #32]
 8019066:	b29b      	uxth	r3, r3
 8019068:	f023 030f 	bic.w	r3, r3, #15
 801906c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801906e:	6a3b      	ldr	r3, [r7, #32]
 8019070:	085b      	lsrs	r3, r3, #1
 8019072:	b29b      	uxth	r3, r3
 8019074:	f003 0307 	and.w	r3, r3, #7
 8019078:	b29a      	uxth	r2, r3
 801907a:	8bfb      	ldrh	r3, [r7, #30]
 801907c:	4313      	orrs	r3, r2
 801907e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	8bfa      	ldrh	r2, [r7, #30]
 8019086:	60da      	str	r2, [r3, #12]
 8019088:	e056      	b.n	8019138 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801908a:	2301      	movs	r3, #1
 801908c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8019090:	e052      	b.n	8019138 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019096:	3b01      	subs	r3, #1
 8019098:	2b07      	cmp	r3, #7
 801909a:	d822      	bhi.n	80190e2 <UART_SetConfig+0x3c6>
 801909c:	a201      	add	r2, pc, #4	; (adr r2, 80190a4 <UART_SetConfig+0x388>)
 801909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190a2:	bf00      	nop
 80190a4:	080190c5 	.word	0x080190c5
 80190a8:	080190cd 	.word	0x080190cd
 80190ac:	080190e3 	.word	0x080190e3
 80190b0:	080190d3 	.word	0x080190d3
 80190b4:	080190e3 	.word	0x080190e3
 80190b8:	080190e3 	.word	0x080190e3
 80190bc:	080190e3 	.word	0x080190e3
 80190c0:	080190db 	.word	0x080190db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80190c4:	f7fe fe0c 	bl	8017ce0 <HAL_RCC_GetPCLK2Freq>
 80190c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80190ca:	e010      	b.n	80190ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80190cc:	4b26      	ldr	r3, [pc, #152]	; (8019168 <UART_SetConfig+0x44c>)
 80190ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190d0:	e00d      	b.n	80190ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80190d2:	f7fe fd6f 	bl	8017bb4 <HAL_RCC_GetSysClockFreq>
 80190d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80190d8:	e009      	b.n	80190ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80190da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190e0:	e005      	b.n	80190ee <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80190e2:	2300      	movs	r3, #0
 80190e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80190e6:	2301      	movs	r3, #1
 80190e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80190ec:	bf00      	nop
    }

    if (pclk != 0U)
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d021      	beq.n	8019138 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190f8:	4a1a      	ldr	r2, [pc, #104]	; (8019164 <UART_SetConfig+0x448>)
 80190fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80190fe:	461a      	mov	r2, r3
 8019100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019102:	fbb3 f2f2 	udiv	r2, r3, r2
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	685b      	ldr	r3, [r3, #4]
 801910a:	085b      	lsrs	r3, r3, #1
 801910c:	441a      	add	r2, r3
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	fbb2 f3f3 	udiv	r3, r2, r3
 8019116:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019118:	6a3b      	ldr	r3, [r7, #32]
 801911a:	2b0f      	cmp	r3, #15
 801911c:	d909      	bls.n	8019132 <UART_SetConfig+0x416>
 801911e:	6a3b      	ldr	r3, [r7, #32]
 8019120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019124:	d205      	bcs.n	8019132 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019126:	6a3b      	ldr	r3, [r7, #32]
 8019128:	b29a      	uxth	r2, r3
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	60da      	str	r2, [r3, #12]
 8019130:	e002      	b.n	8019138 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8019132:	2301      	movs	r3, #1
 8019134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	2201      	movs	r2, #1
 801913c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	2201      	movs	r2, #1
 8019144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	2200      	movs	r2, #0
 801914c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	2200      	movs	r2, #0
 8019152:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8019154:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8019158:	4618      	mov	r0, r3
 801915a:	3730      	adds	r7, #48	; 0x30
 801915c:	46bd      	mov	sp, r7
 801915e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019162:	bf00      	nop
 8019164:	0801abb4 	.word	0x0801abb4
 8019168:	00f42400 	.word	0x00f42400

0801916c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801916c:	b480      	push	{r7}
 801916e:	b083      	sub	sp, #12
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019178:	f003 0301 	and.w	r3, r3, #1
 801917c:	2b00      	cmp	r3, #0
 801917e:	d00a      	beq.n	8019196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	430a      	orrs	r2, r1
 8019194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919a:	f003 0302 	and.w	r3, r3, #2
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d00a      	beq.n	80191b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	685b      	ldr	r3, [r3, #4]
 80191a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	430a      	orrs	r2, r1
 80191b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191bc:	f003 0304 	and.w	r3, r3, #4
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d00a      	beq.n	80191da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	430a      	orrs	r2, r1
 80191d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191de:	f003 0308 	and.w	r3, r3, #8
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d00a      	beq.n	80191fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	685b      	ldr	r3, [r3, #4]
 80191ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	430a      	orrs	r2, r1
 80191fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019200:	f003 0310 	and.w	r3, r3, #16
 8019204:	2b00      	cmp	r3, #0
 8019206:	d00a      	beq.n	801921e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	689b      	ldr	r3, [r3, #8]
 801920e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	430a      	orrs	r2, r1
 801921c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019222:	f003 0320 	and.w	r3, r3, #32
 8019226:	2b00      	cmp	r3, #0
 8019228:	d00a      	beq.n	8019240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	689b      	ldr	r3, [r3, #8]
 8019230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	430a      	orrs	r2, r1
 801923e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019248:	2b00      	cmp	r3, #0
 801924a:	d01a      	beq.n	8019282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	685b      	ldr	r3, [r3, #4]
 8019252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	430a      	orrs	r2, r1
 8019260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801926a:	d10a      	bne.n	8019282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	430a      	orrs	r2, r1
 8019280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801928a:	2b00      	cmp	r3, #0
 801928c:	d00a      	beq.n	80192a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	685b      	ldr	r3, [r3, #4]
 8019294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	430a      	orrs	r2, r1
 80192a2:	605a      	str	r2, [r3, #4]
  }
}
 80192a4:	bf00      	nop
 80192a6:	370c      	adds	r7, #12
 80192a8:	46bd      	mov	sp, r7
 80192aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ae:	4770      	bx	lr

080192b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b086      	sub	sp, #24
 80192b4:	af02      	add	r7, sp, #8
 80192b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2200      	movs	r2, #0
 80192bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80192c0:	f7fc f9a2 	bl	8015608 <HAL_GetTick>
 80192c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f003 0308 	and.w	r3, r3, #8
 80192d0:	2b08      	cmp	r3, #8
 80192d2:	d10e      	bne.n	80192f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80192d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80192d8:	9300      	str	r3, [sp, #0]
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	2200      	movs	r2, #0
 80192de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	f000 f832 	bl	801934c <UART_WaitOnFlagUntilTimeout>
 80192e8:	4603      	mov	r3, r0
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d001      	beq.n	80192f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80192ee:	2303      	movs	r3, #3
 80192f0:	e028      	b.n	8019344 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	f003 0304 	and.w	r3, r3, #4
 80192fc:	2b04      	cmp	r3, #4
 80192fe:	d10e      	bne.n	801931e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	2200      	movs	r2, #0
 801930a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f000 f81c 	bl	801934c <UART_WaitOnFlagUntilTimeout>
 8019314:	4603      	mov	r3, r0
 8019316:	2b00      	cmp	r3, #0
 8019318:	d001      	beq.n	801931e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801931a:	2303      	movs	r3, #3
 801931c:	e012      	b.n	8019344 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	2220      	movs	r2, #32
 8019322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2220      	movs	r2, #32
 801932a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	2200      	movs	r2, #0
 8019332:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	2200      	movs	r2, #0
 8019338:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2200      	movs	r2, #0
 801933e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019342:	2300      	movs	r3, #0
}
 8019344:	4618      	mov	r0, r3
 8019346:	3710      	adds	r7, #16
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}

0801934c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b09c      	sub	sp, #112	; 0x70
 8019350:	af00      	add	r7, sp, #0
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	60b9      	str	r1, [r7, #8]
 8019356:	603b      	str	r3, [r7, #0]
 8019358:	4613      	mov	r3, r2
 801935a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801935c:	e0a9      	b.n	80194b2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801935e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019364:	f000 80a5 	beq.w	80194b2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019368:	f7fc f94e 	bl	8015608 <HAL_GetTick>
 801936c:	4602      	mov	r2, r0
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019374:	429a      	cmp	r2, r3
 8019376:	d302      	bcc.n	801937e <UART_WaitOnFlagUntilTimeout+0x32>
 8019378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801937a:	2b00      	cmp	r3, #0
 801937c:	d140      	bne.n	8019400 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019386:	e853 3f00 	ldrex	r3, [r3]
 801938a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801938e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019392:	667b      	str	r3, [r7, #100]	; 0x64
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	461a      	mov	r2, r3
 801939a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801939c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801939e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80193a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80193a4:	e841 2300 	strex	r3, r2, [r1]
 80193a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80193aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d1e6      	bne.n	801937e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	3308      	adds	r3, #8
 80193b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193ba:	e853 3f00 	ldrex	r3, [r3]
 80193be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80193c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193c2:	f023 0301 	bic.w	r3, r3, #1
 80193c6:	663b      	str	r3, [r7, #96]	; 0x60
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	3308      	adds	r3, #8
 80193ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80193d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80193d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80193d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80193d8:	e841 2300 	strex	r3, r2, [r1]
 80193dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80193de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d1e5      	bne.n	80193b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	2220      	movs	r2, #32
 80193e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	2220      	movs	r2, #32
 80193f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2200      	movs	r2, #0
 80193f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80193fc:	2303      	movs	r3, #3
 80193fe:	e069      	b.n	80194d4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	f003 0304 	and.w	r3, r3, #4
 801940a:	2b00      	cmp	r3, #0
 801940c:	d051      	beq.n	80194b2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	69db      	ldr	r3, [r3, #28]
 8019414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801941c:	d149      	bne.n	80194b2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019426:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019430:	e853 3f00 	ldrex	r3, [r3]
 8019434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801943c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	461a      	mov	r2, r3
 8019444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019446:	637b      	str	r3, [r7, #52]	; 0x34
 8019448:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801944a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801944c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801944e:	e841 2300 	strex	r3, r2, [r1]
 8019452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8019454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019456:	2b00      	cmp	r3, #0
 8019458:	d1e6      	bne.n	8019428 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	3308      	adds	r3, #8
 8019460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019462:	697b      	ldr	r3, [r7, #20]
 8019464:	e853 3f00 	ldrex	r3, [r3]
 8019468:	613b      	str	r3, [r7, #16]
   return(result);
 801946a:	693b      	ldr	r3, [r7, #16]
 801946c:	f023 0301 	bic.w	r3, r3, #1
 8019470:	66bb      	str	r3, [r7, #104]	; 0x68
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	3308      	adds	r3, #8
 8019478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801947a:	623a      	str	r2, [r7, #32]
 801947c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801947e:	69f9      	ldr	r1, [r7, #28]
 8019480:	6a3a      	ldr	r2, [r7, #32]
 8019482:	e841 2300 	strex	r3, r2, [r1]
 8019486:	61bb      	str	r3, [r7, #24]
   return(result);
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d1e5      	bne.n	801945a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	2220      	movs	r2, #32
 8019492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	2220      	movs	r2, #32
 801949a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	2220      	movs	r2, #32
 80194a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	2200      	movs	r2, #0
 80194aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80194ae:	2303      	movs	r3, #3
 80194b0:	e010      	b.n	80194d4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	69da      	ldr	r2, [r3, #28]
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	4013      	ands	r3, r2
 80194bc:	68ba      	ldr	r2, [r7, #8]
 80194be:	429a      	cmp	r2, r3
 80194c0:	bf0c      	ite	eq
 80194c2:	2301      	moveq	r3, #1
 80194c4:	2300      	movne	r3, #0
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	461a      	mov	r2, r3
 80194ca:	79fb      	ldrb	r3, [r7, #7]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	f43f af46 	beq.w	801935e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80194d2:	2300      	movs	r3, #0
}
 80194d4:	4618      	mov	r0, r3
 80194d6:	3770      	adds	r7, #112	; 0x70
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd80      	pop	{r7, pc}

080194dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80194dc:	b480      	push	{r7}
 80194de:	b085      	sub	sp, #20
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	d101      	bne.n	80194f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80194ee:	2302      	movs	r3, #2
 80194f0:	e027      	b.n	8019542 <HAL_UARTEx_DisableFifoMode+0x66>
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2201      	movs	r2, #1
 80194f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	2224      	movs	r2, #36	; 0x24
 80194fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	681a      	ldr	r2, [r3, #0]
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f022 0201 	bic.w	r2, r2, #1
 8019518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8019520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2200      	movs	r2, #0
 8019526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	68fa      	ldr	r2, [r7, #12]
 801952e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	2220      	movs	r2, #32
 8019534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2200      	movs	r2, #0
 801953c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019540:	2300      	movs	r3, #0
}
 8019542:	4618      	mov	r0, r3
 8019544:	3714      	adds	r7, #20
 8019546:	46bd      	mov	sp, r7
 8019548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954c:	4770      	bx	lr

0801954e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801954e:	b580      	push	{r7, lr}
 8019550:	b084      	sub	sp, #16
 8019552:	af00      	add	r7, sp, #0
 8019554:	6078      	str	r0, [r7, #4]
 8019556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801955e:	2b01      	cmp	r3, #1
 8019560:	d101      	bne.n	8019566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8019562:	2302      	movs	r3, #2
 8019564:	e02d      	b.n	80195c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2201      	movs	r2, #1
 801956a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	2224      	movs	r2, #36	; 0x24
 8019572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	f022 0201 	bic.w	r2, r2, #1
 801958c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	689b      	ldr	r3, [r3, #8]
 8019594:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	683a      	ldr	r2, [r7, #0]
 801959e:	430a      	orrs	r2, r1
 80195a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80195a2:	6878      	ldr	r0, [r7, #4]
 80195a4:	f000 f850 	bl	8019648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	68fa      	ldr	r2, [r7, #12]
 80195ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2220      	movs	r2, #32
 80195b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2200      	movs	r2, #0
 80195bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80195c0:	2300      	movs	r3, #0
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	3710      	adds	r7, #16
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}

080195ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80195ca:	b580      	push	{r7, lr}
 80195cc:	b084      	sub	sp, #16
 80195ce:	af00      	add	r7, sp, #0
 80195d0:	6078      	str	r0, [r7, #4]
 80195d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80195da:	2b01      	cmp	r3, #1
 80195dc:	d101      	bne.n	80195e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80195de:	2302      	movs	r3, #2
 80195e0:	e02d      	b.n	801963e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	2201      	movs	r2, #1
 80195e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	2224      	movs	r2, #36	; 0x24
 80195ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	681a      	ldr	r2, [r3, #0]
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	f022 0201 	bic.w	r2, r2, #1
 8019608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	689b      	ldr	r3, [r3, #8]
 8019610:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	683a      	ldr	r2, [r7, #0]
 801961a:	430a      	orrs	r2, r1
 801961c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801961e:	6878      	ldr	r0, [r7, #4]
 8019620:	f000 f812 	bl	8019648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	68fa      	ldr	r2, [r7, #12]
 801962a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	2220      	movs	r2, #32
 8019630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2200      	movs	r2, #0
 8019638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801963c:	2300      	movs	r3, #0
}
 801963e:	4618      	mov	r0, r3
 8019640:	3710      	adds	r7, #16
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}
	...

08019648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019648:	b480      	push	{r7}
 801964a:	b085      	sub	sp, #20
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019654:	2b00      	cmp	r3, #0
 8019656:	d108      	bne.n	801966a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2201      	movs	r2, #1
 801965c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2201      	movs	r2, #1
 8019664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019668:	e031      	b.n	80196ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801966a:	2308      	movs	r3, #8
 801966c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801966e:	2308      	movs	r3, #8
 8019670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	0e5b      	lsrs	r3, r3, #25
 801967a:	b2db      	uxtb	r3, r3
 801967c:	f003 0307 	and.w	r3, r3, #7
 8019680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	689b      	ldr	r3, [r3, #8]
 8019688:	0f5b      	lsrs	r3, r3, #29
 801968a:	b2db      	uxtb	r3, r3
 801968c:	f003 0307 	and.w	r3, r3, #7
 8019690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8019692:	7bbb      	ldrb	r3, [r7, #14]
 8019694:	7b3a      	ldrb	r2, [r7, #12]
 8019696:	4911      	ldr	r1, [pc, #68]	; (80196dc <UARTEx_SetNbDataToProcess+0x94>)
 8019698:	5c8a      	ldrb	r2, [r1, r2]
 801969a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801969e:	7b3a      	ldrb	r2, [r7, #12]
 80196a0:	490f      	ldr	r1, [pc, #60]	; (80196e0 <UARTEx_SetNbDataToProcess+0x98>)
 80196a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80196a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80196b0:	7bfb      	ldrb	r3, [r7, #15]
 80196b2:	7b7a      	ldrb	r2, [r7, #13]
 80196b4:	4909      	ldr	r1, [pc, #36]	; (80196dc <UARTEx_SetNbDataToProcess+0x94>)
 80196b6:	5c8a      	ldrb	r2, [r1, r2]
 80196b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80196bc:	7b7a      	ldrb	r2, [r7, #13]
 80196be:	4908      	ldr	r1, [pc, #32]	; (80196e0 <UARTEx_SetNbDataToProcess+0x98>)
 80196c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80196c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80196c6:	b29a      	uxth	r2, r3
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80196ce:	bf00      	nop
 80196d0:	3714      	adds	r7, #20
 80196d2:	46bd      	mov	sp, r7
 80196d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d8:	4770      	bx	lr
 80196da:	bf00      	nop
 80196dc:	0801abcc 	.word	0x0801abcc
 80196e0:	0801abd4 	.word	0x0801abd4

080196e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80196ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80196f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80196f8:	b29a      	uxth	r2, r3
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	43db      	mvns	r3, r3
 8019700:	b29b      	uxth	r3, r3
 8019702:	4013      	ands	r3, r2
 8019704:	b29a      	uxth	r2, r3
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801970c:	2300      	movs	r3, #0
}
 801970e:	4618      	mov	r0, r3
 8019710:	3714      	adds	r7, #20
 8019712:	46bd      	mov	sp, r7
 8019714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019718:	4770      	bx	lr

0801971a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801971a:	b084      	sub	sp, #16
 801971c:	b480      	push	{r7}
 801971e:	b083      	sub	sp, #12
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	f107 0014 	add.w	r0, r7, #20
 8019728:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	2201      	movs	r2, #1
 8019730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	2200      	movs	r2, #0
 8019738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2200      	movs	r2, #0
 8019740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2200      	movs	r2, #0
 8019748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801974c:	2300      	movs	r3, #0
}
 801974e:	4618      	mov	r0, r3
 8019750:	370c      	adds	r7, #12
 8019752:	46bd      	mov	sp, r7
 8019754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019758:	b004      	add	sp, #16
 801975a:	4770      	bx	lr

0801975c <__errno>:
 801975c:	4b01      	ldr	r3, [pc, #4]	; (8019764 <__errno+0x8>)
 801975e:	6818      	ldr	r0, [r3, #0]
 8019760:	4770      	bx	lr
 8019762:	bf00      	nop
 8019764:	20000078 	.word	0x20000078

08019768 <__libc_init_array>:
 8019768:	b570      	push	{r4, r5, r6, lr}
 801976a:	4d0d      	ldr	r5, [pc, #52]	; (80197a0 <__libc_init_array+0x38>)
 801976c:	4c0d      	ldr	r4, [pc, #52]	; (80197a4 <__libc_init_array+0x3c>)
 801976e:	1b64      	subs	r4, r4, r5
 8019770:	10a4      	asrs	r4, r4, #2
 8019772:	2600      	movs	r6, #0
 8019774:	42a6      	cmp	r6, r4
 8019776:	d109      	bne.n	801978c <__libc_init_array+0x24>
 8019778:	4d0b      	ldr	r5, [pc, #44]	; (80197a8 <__libc_init_array+0x40>)
 801977a:	4c0c      	ldr	r4, [pc, #48]	; (80197ac <__libc_init_array+0x44>)
 801977c:	f001 f8a4 	bl	801a8c8 <_init>
 8019780:	1b64      	subs	r4, r4, r5
 8019782:	10a4      	asrs	r4, r4, #2
 8019784:	2600      	movs	r6, #0
 8019786:	42a6      	cmp	r6, r4
 8019788:	d105      	bne.n	8019796 <__libc_init_array+0x2e>
 801978a:	bd70      	pop	{r4, r5, r6, pc}
 801978c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019790:	4798      	blx	r3
 8019792:	3601      	adds	r6, #1
 8019794:	e7ee      	b.n	8019774 <__libc_init_array+0xc>
 8019796:	f855 3b04 	ldr.w	r3, [r5], #4
 801979a:	4798      	blx	r3
 801979c:	3601      	adds	r6, #1
 801979e:	e7f2      	b.n	8019786 <__libc_init_array+0x1e>
 80197a0:	0801ac7c 	.word	0x0801ac7c
 80197a4:	0801ac7c 	.word	0x0801ac7c
 80197a8:	0801ac7c 	.word	0x0801ac7c
 80197ac:	0801ac80 	.word	0x0801ac80

080197b0 <memcpy>:
 80197b0:	440a      	add	r2, r1
 80197b2:	4291      	cmp	r1, r2
 80197b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80197b8:	d100      	bne.n	80197bc <memcpy+0xc>
 80197ba:	4770      	bx	lr
 80197bc:	b510      	push	{r4, lr}
 80197be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197c6:	4291      	cmp	r1, r2
 80197c8:	d1f9      	bne.n	80197be <memcpy+0xe>
 80197ca:	bd10      	pop	{r4, pc}

080197cc <memset>:
 80197cc:	4402      	add	r2, r0
 80197ce:	4603      	mov	r3, r0
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d100      	bne.n	80197d6 <memset+0xa>
 80197d4:	4770      	bx	lr
 80197d6:	f803 1b01 	strb.w	r1, [r3], #1
 80197da:	e7f9      	b.n	80197d0 <memset+0x4>

080197dc <iprintf>:
 80197dc:	b40f      	push	{r0, r1, r2, r3}
 80197de:	4b0a      	ldr	r3, [pc, #40]	; (8019808 <iprintf+0x2c>)
 80197e0:	b513      	push	{r0, r1, r4, lr}
 80197e2:	681c      	ldr	r4, [r3, #0]
 80197e4:	b124      	cbz	r4, 80197f0 <iprintf+0x14>
 80197e6:	69a3      	ldr	r3, [r4, #24]
 80197e8:	b913      	cbnz	r3, 80197f0 <iprintf+0x14>
 80197ea:	4620      	mov	r0, r4
 80197ec:	f000 fa88 	bl	8019d00 <__sinit>
 80197f0:	ab05      	add	r3, sp, #20
 80197f2:	9a04      	ldr	r2, [sp, #16]
 80197f4:	68a1      	ldr	r1, [r4, #8]
 80197f6:	9301      	str	r3, [sp, #4]
 80197f8:	4620      	mov	r0, r4
 80197fa:	f000 fc91 	bl	801a120 <_vfiprintf_r>
 80197fe:	b002      	add	sp, #8
 8019800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019804:	b004      	add	sp, #16
 8019806:	4770      	bx	lr
 8019808:	20000078 	.word	0x20000078

0801980c <putchar>:
 801980c:	4b09      	ldr	r3, [pc, #36]	; (8019834 <putchar+0x28>)
 801980e:	b513      	push	{r0, r1, r4, lr}
 8019810:	681c      	ldr	r4, [r3, #0]
 8019812:	4601      	mov	r1, r0
 8019814:	b134      	cbz	r4, 8019824 <putchar+0x18>
 8019816:	69a3      	ldr	r3, [r4, #24]
 8019818:	b923      	cbnz	r3, 8019824 <putchar+0x18>
 801981a:	9001      	str	r0, [sp, #4]
 801981c:	4620      	mov	r0, r4
 801981e:	f000 fa6f 	bl	8019d00 <__sinit>
 8019822:	9901      	ldr	r1, [sp, #4]
 8019824:	68a2      	ldr	r2, [r4, #8]
 8019826:	4620      	mov	r0, r4
 8019828:	b002      	add	sp, #8
 801982a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801982e:	f000 bf3b 	b.w	801a6a8 <_putc_r>
 8019832:	bf00      	nop
 8019834:	20000078 	.word	0x20000078

08019838 <_puts_r>:
 8019838:	b570      	push	{r4, r5, r6, lr}
 801983a:	460e      	mov	r6, r1
 801983c:	4605      	mov	r5, r0
 801983e:	b118      	cbz	r0, 8019848 <_puts_r+0x10>
 8019840:	6983      	ldr	r3, [r0, #24]
 8019842:	b90b      	cbnz	r3, 8019848 <_puts_r+0x10>
 8019844:	f000 fa5c 	bl	8019d00 <__sinit>
 8019848:	69ab      	ldr	r3, [r5, #24]
 801984a:	68ac      	ldr	r4, [r5, #8]
 801984c:	b913      	cbnz	r3, 8019854 <_puts_r+0x1c>
 801984e:	4628      	mov	r0, r5
 8019850:	f000 fa56 	bl	8019d00 <__sinit>
 8019854:	4b2c      	ldr	r3, [pc, #176]	; (8019908 <_puts_r+0xd0>)
 8019856:	429c      	cmp	r4, r3
 8019858:	d120      	bne.n	801989c <_puts_r+0x64>
 801985a:	686c      	ldr	r4, [r5, #4]
 801985c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801985e:	07db      	lsls	r3, r3, #31
 8019860:	d405      	bmi.n	801986e <_puts_r+0x36>
 8019862:	89a3      	ldrh	r3, [r4, #12]
 8019864:	0598      	lsls	r0, r3, #22
 8019866:	d402      	bmi.n	801986e <_puts_r+0x36>
 8019868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801986a:	f000 fae7 	bl	8019e3c <__retarget_lock_acquire_recursive>
 801986e:	89a3      	ldrh	r3, [r4, #12]
 8019870:	0719      	lsls	r1, r3, #28
 8019872:	d51d      	bpl.n	80198b0 <_puts_r+0x78>
 8019874:	6923      	ldr	r3, [r4, #16]
 8019876:	b1db      	cbz	r3, 80198b0 <_puts_r+0x78>
 8019878:	3e01      	subs	r6, #1
 801987a:	68a3      	ldr	r3, [r4, #8]
 801987c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019880:	3b01      	subs	r3, #1
 8019882:	60a3      	str	r3, [r4, #8]
 8019884:	bb39      	cbnz	r1, 80198d6 <_puts_r+0x9e>
 8019886:	2b00      	cmp	r3, #0
 8019888:	da38      	bge.n	80198fc <_puts_r+0xc4>
 801988a:	4622      	mov	r2, r4
 801988c:	210a      	movs	r1, #10
 801988e:	4628      	mov	r0, r5
 8019890:	f000 f85c 	bl	801994c <__swbuf_r>
 8019894:	3001      	adds	r0, #1
 8019896:	d011      	beq.n	80198bc <_puts_r+0x84>
 8019898:	250a      	movs	r5, #10
 801989a:	e011      	b.n	80198c0 <_puts_r+0x88>
 801989c:	4b1b      	ldr	r3, [pc, #108]	; (801990c <_puts_r+0xd4>)
 801989e:	429c      	cmp	r4, r3
 80198a0:	d101      	bne.n	80198a6 <_puts_r+0x6e>
 80198a2:	68ac      	ldr	r4, [r5, #8]
 80198a4:	e7da      	b.n	801985c <_puts_r+0x24>
 80198a6:	4b1a      	ldr	r3, [pc, #104]	; (8019910 <_puts_r+0xd8>)
 80198a8:	429c      	cmp	r4, r3
 80198aa:	bf08      	it	eq
 80198ac:	68ec      	ldreq	r4, [r5, #12]
 80198ae:	e7d5      	b.n	801985c <_puts_r+0x24>
 80198b0:	4621      	mov	r1, r4
 80198b2:	4628      	mov	r0, r5
 80198b4:	f000 f89c 	bl	80199f0 <__swsetup_r>
 80198b8:	2800      	cmp	r0, #0
 80198ba:	d0dd      	beq.n	8019878 <_puts_r+0x40>
 80198bc:	f04f 35ff 	mov.w	r5, #4294967295
 80198c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198c2:	07da      	lsls	r2, r3, #31
 80198c4:	d405      	bmi.n	80198d2 <_puts_r+0x9a>
 80198c6:	89a3      	ldrh	r3, [r4, #12]
 80198c8:	059b      	lsls	r3, r3, #22
 80198ca:	d402      	bmi.n	80198d2 <_puts_r+0x9a>
 80198cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198ce:	f000 fab6 	bl	8019e3e <__retarget_lock_release_recursive>
 80198d2:	4628      	mov	r0, r5
 80198d4:	bd70      	pop	{r4, r5, r6, pc}
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	da04      	bge.n	80198e4 <_puts_r+0xac>
 80198da:	69a2      	ldr	r2, [r4, #24]
 80198dc:	429a      	cmp	r2, r3
 80198de:	dc06      	bgt.n	80198ee <_puts_r+0xb6>
 80198e0:	290a      	cmp	r1, #10
 80198e2:	d004      	beq.n	80198ee <_puts_r+0xb6>
 80198e4:	6823      	ldr	r3, [r4, #0]
 80198e6:	1c5a      	adds	r2, r3, #1
 80198e8:	6022      	str	r2, [r4, #0]
 80198ea:	7019      	strb	r1, [r3, #0]
 80198ec:	e7c5      	b.n	801987a <_puts_r+0x42>
 80198ee:	4622      	mov	r2, r4
 80198f0:	4628      	mov	r0, r5
 80198f2:	f000 f82b 	bl	801994c <__swbuf_r>
 80198f6:	3001      	adds	r0, #1
 80198f8:	d1bf      	bne.n	801987a <_puts_r+0x42>
 80198fa:	e7df      	b.n	80198bc <_puts_r+0x84>
 80198fc:	6823      	ldr	r3, [r4, #0]
 80198fe:	250a      	movs	r5, #10
 8019900:	1c5a      	adds	r2, r3, #1
 8019902:	6022      	str	r2, [r4, #0]
 8019904:	701d      	strb	r5, [r3, #0]
 8019906:	e7db      	b.n	80198c0 <_puts_r+0x88>
 8019908:	0801ac00 	.word	0x0801ac00
 801990c:	0801ac20 	.word	0x0801ac20
 8019910:	0801abe0 	.word	0x0801abe0

08019914 <puts>:
 8019914:	4b02      	ldr	r3, [pc, #8]	; (8019920 <puts+0xc>)
 8019916:	4601      	mov	r1, r0
 8019918:	6818      	ldr	r0, [r3, #0]
 801991a:	f7ff bf8d 	b.w	8019838 <_puts_r>
 801991e:	bf00      	nop
 8019920:	20000078 	.word	0x20000078

08019924 <strncpy>:
 8019924:	b510      	push	{r4, lr}
 8019926:	3901      	subs	r1, #1
 8019928:	4603      	mov	r3, r0
 801992a:	b132      	cbz	r2, 801993a <strncpy+0x16>
 801992c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019930:	f803 4b01 	strb.w	r4, [r3], #1
 8019934:	3a01      	subs	r2, #1
 8019936:	2c00      	cmp	r4, #0
 8019938:	d1f7      	bne.n	801992a <strncpy+0x6>
 801993a:	441a      	add	r2, r3
 801993c:	2100      	movs	r1, #0
 801993e:	4293      	cmp	r3, r2
 8019940:	d100      	bne.n	8019944 <strncpy+0x20>
 8019942:	bd10      	pop	{r4, pc}
 8019944:	f803 1b01 	strb.w	r1, [r3], #1
 8019948:	e7f9      	b.n	801993e <strncpy+0x1a>
	...

0801994c <__swbuf_r>:
 801994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801994e:	460e      	mov	r6, r1
 8019950:	4614      	mov	r4, r2
 8019952:	4605      	mov	r5, r0
 8019954:	b118      	cbz	r0, 801995e <__swbuf_r+0x12>
 8019956:	6983      	ldr	r3, [r0, #24]
 8019958:	b90b      	cbnz	r3, 801995e <__swbuf_r+0x12>
 801995a:	f000 f9d1 	bl	8019d00 <__sinit>
 801995e:	4b21      	ldr	r3, [pc, #132]	; (80199e4 <__swbuf_r+0x98>)
 8019960:	429c      	cmp	r4, r3
 8019962:	d12b      	bne.n	80199bc <__swbuf_r+0x70>
 8019964:	686c      	ldr	r4, [r5, #4]
 8019966:	69a3      	ldr	r3, [r4, #24]
 8019968:	60a3      	str	r3, [r4, #8]
 801996a:	89a3      	ldrh	r3, [r4, #12]
 801996c:	071a      	lsls	r2, r3, #28
 801996e:	d52f      	bpl.n	80199d0 <__swbuf_r+0x84>
 8019970:	6923      	ldr	r3, [r4, #16]
 8019972:	b36b      	cbz	r3, 80199d0 <__swbuf_r+0x84>
 8019974:	6923      	ldr	r3, [r4, #16]
 8019976:	6820      	ldr	r0, [r4, #0]
 8019978:	1ac0      	subs	r0, r0, r3
 801997a:	6963      	ldr	r3, [r4, #20]
 801997c:	b2f6      	uxtb	r6, r6
 801997e:	4283      	cmp	r3, r0
 8019980:	4637      	mov	r7, r6
 8019982:	dc04      	bgt.n	801998e <__swbuf_r+0x42>
 8019984:	4621      	mov	r1, r4
 8019986:	4628      	mov	r0, r5
 8019988:	f000 f926 	bl	8019bd8 <_fflush_r>
 801998c:	bb30      	cbnz	r0, 80199dc <__swbuf_r+0x90>
 801998e:	68a3      	ldr	r3, [r4, #8]
 8019990:	3b01      	subs	r3, #1
 8019992:	60a3      	str	r3, [r4, #8]
 8019994:	6823      	ldr	r3, [r4, #0]
 8019996:	1c5a      	adds	r2, r3, #1
 8019998:	6022      	str	r2, [r4, #0]
 801999a:	701e      	strb	r6, [r3, #0]
 801999c:	6963      	ldr	r3, [r4, #20]
 801999e:	3001      	adds	r0, #1
 80199a0:	4283      	cmp	r3, r0
 80199a2:	d004      	beq.n	80199ae <__swbuf_r+0x62>
 80199a4:	89a3      	ldrh	r3, [r4, #12]
 80199a6:	07db      	lsls	r3, r3, #31
 80199a8:	d506      	bpl.n	80199b8 <__swbuf_r+0x6c>
 80199aa:	2e0a      	cmp	r6, #10
 80199ac:	d104      	bne.n	80199b8 <__swbuf_r+0x6c>
 80199ae:	4621      	mov	r1, r4
 80199b0:	4628      	mov	r0, r5
 80199b2:	f000 f911 	bl	8019bd8 <_fflush_r>
 80199b6:	b988      	cbnz	r0, 80199dc <__swbuf_r+0x90>
 80199b8:	4638      	mov	r0, r7
 80199ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199bc:	4b0a      	ldr	r3, [pc, #40]	; (80199e8 <__swbuf_r+0x9c>)
 80199be:	429c      	cmp	r4, r3
 80199c0:	d101      	bne.n	80199c6 <__swbuf_r+0x7a>
 80199c2:	68ac      	ldr	r4, [r5, #8]
 80199c4:	e7cf      	b.n	8019966 <__swbuf_r+0x1a>
 80199c6:	4b09      	ldr	r3, [pc, #36]	; (80199ec <__swbuf_r+0xa0>)
 80199c8:	429c      	cmp	r4, r3
 80199ca:	bf08      	it	eq
 80199cc:	68ec      	ldreq	r4, [r5, #12]
 80199ce:	e7ca      	b.n	8019966 <__swbuf_r+0x1a>
 80199d0:	4621      	mov	r1, r4
 80199d2:	4628      	mov	r0, r5
 80199d4:	f000 f80c 	bl	80199f0 <__swsetup_r>
 80199d8:	2800      	cmp	r0, #0
 80199da:	d0cb      	beq.n	8019974 <__swbuf_r+0x28>
 80199dc:	f04f 37ff 	mov.w	r7, #4294967295
 80199e0:	e7ea      	b.n	80199b8 <__swbuf_r+0x6c>
 80199e2:	bf00      	nop
 80199e4:	0801ac00 	.word	0x0801ac00
 80199e8:	0801ac20 	.word	0x0801ac20
 80199ec:	0801abe0 	.word	0x0801abe0

080199f0 <__swsetup_r>:
 80199f0:	4b32      	ldr	r3, [pc, #200]	; (8019abc <__swsetup_r+0xcc>)
 80199f2:	b570      	push	{r4, r5, r6, lr}
 80199f4:	681d      	ldr	r5, [r3, #0]
 80199f6:	4606      	mov	r6, r0
 80199f8:	460c      	mov	r4, r1
 80199fa:	b125      	cbz	r5, 8019a06 <__swsetup_r+0x16>
 80199fc:	69ab      	ldr	r3, [r5, #24]
 80199fe:	b913      	cbnz	r3, 8019a06 <__swsetup_r+0x16>
 8019a00:	4628      	mov	r0, r5
 8019a02:	f000 f97d 	bl	8019d00 <__sinit>
 8019a06:	4b2e      	ldr	r3, [pc, #184]	; (8019ac0 <__swsetup_r+0xd0>)
 8019a08:	429c      	cmp	r4, r3
 8019a0a:	d10f      	bne.n	8019a2c <__swsetup_r+0x3c>
 8019a0c:	686c      	ldr	r4, [r5, #4]
 8019a0e:	89a3      	ldrh	r3, [r4, #12]
 8019a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a14:	0719      	lsls	r1, r3, #28
 8019a16:	d42c      	bmi.n	8019a72 <__swsetup_r+0x82>
 8019a18:	06dd      	lsls	r5, r3, #27
 8019a1a:	d411      	bmi.n	8019a40 <__swsetup_r+0x50>
 8019a1c:	2309      	movs	r3, #9
 8019a1e:	6033      	str	r3, [r6, #0]
 8019a20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a24:	81a3      	strh	r3, [r4, #12]
 8019a26:	f04f 30ff 	mov.w	r0, #4294967295
 8019a2a:	e03e      	b.n	8019aaa <__swsetup_r+0xba>
 8019a2c:	4b25      	ldr	r3, [pc, #148]	; (8019ac4 <__swsetup_r+0xd4>)
 8019a2e:	429c      	cmp	r4, r3
 8019a30:	d101      	bne.n	8019a36 <__swsetup_r+0x46>
 8019a32:	68ac      	ldr	r4, [r5, #8]
 8019a34:	e7eb      	b.n	8019a0e <__swsetup_r+0x1e>
 8019a36:	4b24      	ldr	r3, [pc, #144]	; (8019ac8 <__swsetup_r+0xd8>)
 8019a38:	429c      	cmp	r4, r3
 8019a3a:	bf08      	it	eq
 8019a3c:	68ec      	ldreq	r4, [r5, #12]
 8019a3e:	e7e6      	b.n	8019a0e <__swsetup_r+0x1e>
 8019a40:	0758      	lsls	r0, r3, #29
 8019a42:	d512      	bpl.n	8019a6a <__swsetup_r+0x7a>
 8019a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a46:	b141      	cbz	r1, 8019a5a <__swsetup_r+0x6a>
 8019a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a4c:	4299      	cmp	r1, r3
 8019a4e:	d002      	beq.n	8019a56 <__swsetup_r+0x66>
 8019a50:	4630      	mov	r0, r6
 8019a52:	f000 fa5b 	bl	8019f0c <_free_r>
 8019a56:	2300      	movs	r3, #0
 8019a58:	6363      	str	r3, [r4, #52]	; 0x34
 8019a5a:	89a3      	ldrh	r3, [r4, #12]
 8019a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019a60:	81a3      	strh	r3, [r4, #12]
 8019a62:	2300      	movs	r3, #0
 8019a64:	6063      	str	r3, [r4, #4]
 8019a66:	6923      	ldr	r3, [r4, #16]
 8019a68:	6023      	str	r3, [r4, #0]
 8019a6a:	89a3      	ldrh	r3, [r4, #12]
 8019a6c:	f043 0308 	orr.w	r3, r3, #8
 8019a70:	81a3      	strh	r3, [r4, #12]
 8019a72:	6923      	ldr	r3, [r4, #16]
 8019a74:	b94b      	cbnz	r3, 8019a8a <__swsetup_r+0x9a>
 8019a76:	89a3      	ldrh	r3, [r4, #12]
 8019a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a80:	d003      	beq.n	8019a8a <__swsetup_r+0x9a>
 8019a82:	4621      	mov	r1, r4
 8019a84:	4630      	mov	r0, r6
 8019a86:	f000 fa01 	bl	8019e8c <__smakebuf_r>
 8019a8a:	89a0      	ldrh	r0, [r4, #12]
 8019a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a90:	f010 0301 	ands.w	r3, r0, #1
 8019a94:	d00a      	beq.n	8019aac <__swsetup_r+0xbc>
 8019a96:	2300      	movs	r3, #0
 8019a98:	60a3      	str	r3, [r4, #8]
 8019a9a:	6963      	ldr	r3, [r4, #20]
 8019a9c:	425b      	negs	r3, r3
 8019a9e:	61a3      	str	r3, [r4, #24]
 8019aa0:	6923      	ldr	r3, [r4, #16]
 8019aa2:	b943      	cbnz	r3, 8019ab6 <__swsetup_r+0xc6>
 8019aa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019aa8:	d1ba      	bne.n	8019a20 <__swsetup_r+0x30>
 8019aaa:	bd70      	pop	{r4, r5, r6, pc}
 8019aac:	0781      	lsls	r1, r0, #30
 8019aae:	bf58      	it	pl
 8019ab0:	6963      	ldrpl	r3, [r4, #20]
 8019ab2:	60a3      	str	r3, [r4, #8]
 8019ab4:	e7f4      	b.n	8019aa0 <__swsetup_r+0xb0>
 8019ab6:	2000      	movs	r0, #0
 8019ab8:	e7f7      	b.n	8019aaa <__swsetup_r+0xba>
 8019aba:	bf00      	nop
 8019abc:	20000078 	.word	0x20000078
 8019ac0:	0801ac00 	.word	0x0801ac00
 8019ac4:	0801ac20 	.word	0x0801ac20
 8019ac8:	0801abe0 	.word	0x0801abe0

08019acc <__sflush_r>:
 8019acc:	898a      	ldrh	r2, [r1, #12]
 8019ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ad2:	4605      	mov	r5, r0
 8019ad4:	0710      	lsls	r0, r2, #28
 8019ad6:	460c      	mov	r4, r1
 8019ad8:	d458      	bmi.n	8019b8c <__sflush_r+0xc0>
 8019ada:	684b      	ldr	r3, [r1, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	dc05      	bgt.n	8019aec <__sflush_r+0x20>
 8019ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	dc02      	bgt.n	8019aec <__sflush_r+0x20>
 8019ae6:	2000      	movs	r0, #0
 8019ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019aee:	2e00      	cmp	r6, #0
 8019af0:	d0f9      	beq.n	8019ae6 <__sflush_r+0x1a>
 8019af2:	2300      	movs	r3, #0
 8019af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019af8:	682f      	ldr	r7, [r5, #0]
 8019afa:	602b      	str	r3, [r5, #0]
 8019afc:	d032      	beq.n	8019b64 <__sflush_r+0x98>
 8019afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019b00:	89a3      	ldrh	r3, [r4, #12]
 8019b02:	075a      	lsls	r2, r3, #29
 8019b04:	d505      	bpl.n	8019b12 <__sflush_r+0x46>
 8019b06:	6863      	ldr	r3, [r4, #4]
 8019b08:	1ac0      	subs	r0, r0, r3
 8019b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b0c:	b10b      	cbz	r3, 8019b12 <__sflush_r+0x46>
 8019b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019b10:	1ac0      	subs	r0, r0, r3
 8019b12:	2300      	movs	r3, #0
 8019b14:	4602      	mov	r2, r0
 8019b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b18:	6a21      	ldr	r1, [r4, #32]
 8019b1a:	4628      	mov	r0, r5
 8019b1c:	47b0      	blx	r6
 8019b1e:	1c43      	adds	r3, r0, #1
 8019b20:	89a3      	ldrh	r3, [r4, #12]
 8019b22:	d106      	bne.n	8019b32 <__sflush_r+0x66>
 8019b24:	6829      	ldr	r1, [r5, #0]
 8019b26:	291d      	cmp	r1, #29
 8019b28:	d82c      	bhi.n	8019b84 <__sflush_r+0xb8>
 8019b2a:	4a2a      	ldr	r2, [pc, #168]	; (8019bd4 <__sflush_r+0x108>)
 8019b2c:	40ca      	lsrs	r2, r1
 8019b2e:	07d6      	lsls	r6, r2, #31
 8019b30:	d528      	bpl.n	8019b84 <__sflush_r+0xb8>
 8019b32:	2200      	movs	r2, #0
 8019b34:	6062      	str	r2, [r4, #4]
 8019b36:	04d9      	lsls	r1, r3, #19
 8019b38:	6922      	ldr	r2, [r4, #16]
 8019b3a:	6022      	str	r2, [r4, #0]
 8019b3c:	d504      	bpl.n	8019b48 <__sflush_r+0x7c>
 8019b3e:	1c42      	adds	r2, r0, #1
 8019b40:	d101      	bne.n	8019b46 <__sflush_r+0x7a>
 8019b42:	682b      	ldr	r3, [r5, #0]
 8019b44:	b903      	cbnz	r3, 8019b48 <__sflush_r+0x7c>
 8019b46:	6560      	str	r0, [r4, #84]	; 0x54
 8019b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b4a:	602f      	str	r7, [r5, #0]
 8019b4c:	2900      	cmp	r1, #0
 8019b4e:	d0ca      	beq.n	8019ae6 <__sflush_r+0x1a>
 8019b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b54:	4299      	cmp	r1, r3
 8019b56:	d002      	beq.n	8019b5e <__sflush_r+0x92>
 8019b58:	4628      	mov	r0, r5
 8019b5a:	f000 f9d7 	bl	8019f0c <_free_r>
 8019b5e:	2000      	movs	r0, #0
 8019b60:	6360      	str	r0, [r4, #52]	; 0x34
 8019b62:	e7c1      	b.n	8019ae8 <__sflush_r+0x1c>
 8019b64:	6a21      	ldr	r1, [r4, #32]
 8019b66:	2301      	movs	r3, #1
 8019b68:	4628      	mov	r0, r5
 8019b6a:	47b0      	blx	r6
 8019b6c:	1c41      	adds	r1, r0, #1
 8019b6e:	d1c7      	bne.n	8019b00 <__sflush_r+0x34>
 8019b70:	682b      	ldr	r3, [r5, #0]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d0c4      	beq.n	8019b00 <__sflush_r+0x34>
 8019b76:	2b1d      	cmp	r3, #29
 8019b78:	d001      	beq.n	8019b7e <__sflush_r+0xb2>
 8019b7a:	2b16      	cmp	r3, #22
 8019b7c:	d101      	bne.n	8019b82 <__sflush_r+0xb6>
 8019b7e:	602f      	str	r7, [r5, #0]
 8019b80:	e7b1      	b.n	8019ae6 <__sflush_r+0x1a>
 8019b82:	89a3      	ldrh	r3, [r4, #12]
 8019b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b88:	81a3      	strh	r3, [r4, #12]
 8019b8a:	e7ad      	b.n	8019ae8 <__sflush_r+0x1c>
 8019b8c:	690f      	ldr	r7, [r1, #16]
 8019b8e:	2f00      	cmp	r7, #0
 8019b90:	d0a9      	beq.n	8019ae6 <__sflush_r+0x1a>
 8019b92:	0793      	lsls	r3, r2, #30
 8019b94:	680e      	ldr	r6, [r1, #0]
 8019b96:	bf08      	it	eq
 8019b98:	694b      	ldreq	r3, [r1, #20]
 8019b9a:	600f      	str	r7, [r1, #0]
 8019b9c:	bf18      	it	ne
 8019b9e:	2300      	movne	r3, #0
 8019ba0:	eba6 0807 	sub.w	r8, r6, r7
 8019ba4:	608b      	str	r3, [r1, #8]
 8019ba6:	f1b8 0f00 	cmp.w	r8, #0
 8019baa:	dd9c      	ble.n	8019ae6 <__sflush_r+0x1a>
 8019bac:	6a21      	ldr	r1, [r4, #32]
 8019bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019bb0:	4643      	mov	r3, r8
 8019bb2:	463a      	mov	r2, r7
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	47b0      	blx	r6
 8019bb8:	2800      	cmp	r0, #0
 8019bba:	dc06      	bgt.n	8019bca <__sflush_r+0xfe>
 8019bbc:	89a3      	ldrh	r3, [r4, #12]
 8019bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bc2:	81a3      	strh	r3, [r4, #12]
 8019bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8019bc8:	e78e      	b.n	8019ae8 <__sflush_r+0x1c>
 8019bca:	4407      	add	r7, r0
 8019bcc:	eba8 0800 	sub.w	r8, r8, r0
 8019bd0:	e7e9      	b.n	8019ba6 <__sflush_r+0xda>
 8019bd2:	bf00      	nop
 8019bd4:	20400001 	.word	0x20400001

08019bd8 <_fflush_r>:
 8019bd8:	b538      	push	{r3, r4, r5, lr}
 8019bda:	690b      	ldr	r3, [r1, #16]
 8019bdc:	4605      	mov	r5, r0
 8019bde:	460c      	mov	r4, r1
 8019be0:	b913      	cbnz	r3, 8019be8 <_fflush_r+0x10>
 8019be2:	2500      	movs	r5, #0
 8019be4:	4628      	mov	r0, r5
 8019be6:	bd38      	pop	{r3, r4, r5, pc}
 8019be8:	b118      	cbz	r0, 8019bf2 <_fflush_r+0x1a>
 8019bea:	6983      	ldr	r3, [r0, #24]
 8019bec:	b90b      	cbnz	r3, 8019bf2 <_fflush_r+0x1a>
 8019bee:	f000 f887 	bl	8019d00 <__sinit>
 8019bf2:	4b14      	ldr	r3, [pc, #80]	; (8019c44 <_fflush_r+0x6c>)
 8019bf4:	429c      	cmp	r4, r3
 8019bf6:	d11b      	bne.n	8019c30 <_fflush_r+0x58>
 8019bf8:	686c      	ldr	r4, [r5, #4]
 8019bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d0ef      	beq.n	8019be2 <_fflush_r+0xa>
 8019c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019c04:	07d0      	lsls	r0, r2, #31
 8019c06:	d404      	bmi.n	8019c12 <_fflush_r+0x3a>
 8019c08:	0599      	lsls	r1, r3, #22
 8019c0a:	d402      	bmi.n	8019c12 <_fflush_r+0x3a>
 8019c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c0e:	f000 f915 	bl	8019e3c <__retarget_lock_acquire_recursive>
 8019c12:	4628      	mov	r0, r5
 8019c14:	4621      	mov	r1, r4
 8019c16:	f7ff ff59 	bl	8019acc <__sflush_r>
 8019c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c1c:	07da      	lsls	r2, r3, #31
 8019c1e:	4605      	mov	r5, r0
 8019c20:	d4e0      	bmi.n	8019be4 <_fflush_r+0xc>
 8019c22:	89a3      	ldrh	r3, [r4, #12]
 8019c24:	059b      	lsls	r3, r3, #22
 8019c26:	d4dd      	bmi.n	8019be4 <_fflush_r+0xc>
 8019c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c2a:	f000 f908 	bl	8019e3e <__retarget_lock_release_recursive>
 8019c2e:	e7d9      	b.n	8019be4 <_fflush_r+0xc>
 8019c30:	4b05      	ldr	r3, [pc, #20]	; (8019c48 <_fflush_r+0x70>)
 8019c32:	429c      	cmp	r4, r3
 8019c34:	d101      	bne.n	8019c3a <_fflush_r+0x62>
 8019c36:	68ac      	ldr	r4, [r5, #8]
 8019c38:	e7df      	b.n	8019bfa <_fflush_r+0x22>
 8019c3a:	4b04      	ldr	r3, [pc, #16]	; (8019c4c <_fflush_r+0x74>)
 8019c3c:	429c      	cmp	r4, r3
 8019c3e:	bf08      	it	eq
 8019c40:	68ec      	ldreq	r4, [r5, #12]
 8019c42:	e7da      	b.n	8019bfa <_fflush_r+0x22>
 8019c44:	0801ac00 	.word	0x0801ac00
 8019c48:	0801ac20 	.word	0x0801ac20
 8019c4c:	0801abe0 	.word	0x0801abe0

08019c50 <std>:
 8019c50:	2300      	movs	r3, #0
 8019c52:	b510      	push	{r4, lr}
 8019c54:	4604      	mov	r4, r0
 8019c56:	e9c0 3300 	strd	r3, r3, [r0]
 8019c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019c5e:	6083      	str	r3, [r0, #8]
 8019c60:	8181      	strh	r1, [r0, #12]
 8019c62:	6643      	str	r3, [r0, #100]	; 0x64
 8019c64:	81c2      	strh	r2, [r0, #14]
 8019c66:	6183      	str	r3, [r0, #24]
 8019c68:	4619      	mov	r1, r3
 8019c6a:	2208      	movs	r2, #8
 8019c6c:	305c      	adds	r0, #92	; 0x5c
 8019c6e:	f7ff fdad 	bl	80197cc <memset>
 8019c72:	4b05      	ldr	r3, [pc, #20]	; (8019c88 <std+0x38>)
 8019c74:	6263      	str	r3, [r4, #36]	; 0x24
 8019c76:	4b05      	ldr	r3, [pc, #20]	; (8019c8c <std+0x3c>)
 8019c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8019c7a:	4b05      	ldr	r3, [pc, #20]	; (8019c90 <std+0x40>)
 8019c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019c7e:	4b05      	ldr	r3, [pc, #20]	; (8019c94 <std+0x44>)
 8019c80:	6224      	str	r4, [r4, #32]
 8019c82:	6323      	str	r3, [r4, #48]	; 0x30
 8019c84:	bd10      	pop	{r4, pc}
 8019c86:	bf00      	nop
 8019c88:	0801a759 	.word	0x0801a759
 8019c8c:	0801a77b 	.word	0x0801a77b
 8019c90:	0801a7b3 	.word	0x0801a7b3
 8019c94:	0801a7d7 	.word	0x0801a7d7

08019c98 <_cleanup_r>:
 8019c98:	4901      	ldr	r1, [pc, #4]	; (8019ca0 <_cleanup_r+0x8>)
 8019c9a:	f000 b8af 	b.w	8019dfc <_fwalk_reent>
 8019c9e:	bf00      	nop
 8019ca0:	08019bd9 	.word	0x08019bd9

08019ca4 <__sfmoreglue>:
 8019ca4:	b570      	push	{r4, r5, r6, lr}
 8019ca6:	2268      	movs	r2, #104	; 0x68
 8019ca8:	1e4d      	subs	r5, r1, #1
 8019caa:	4355      	muls	r5, r2
 8019cac:	460e      	mov	r6, r1
 8019cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019cb2:	f000 f997 	bl	8019fe4 <_malloc_r>
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	b140      	cbz	r0, 8019ccc <__sfmoreglue+0x28>
 8019cba:	2100      	movs	r1, #0
 8019cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8019cc0:	300c      	adds	r0, #12
 8019cc2:	60a0      	str	r0, [r4, #8]
 8019cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019cc8:	f7ff fd80 	bl	80197cc <memset>
 8019ccc:	4620      	mov	r0, r4
 8019cce:	bd70      	pop	{r4, r5, r6, pc}

08019cd0 <__sfp_lock_acquire>:
 8019cd0:	4801      	ldr	r0, [pc, #4]	; (8019cd8 <__sfp_lock_acquire+0x8>)
 8019cd2:	f000 b8b3 	b.w	8019e3c <__retarget_lock_acquire_recursive>
 8019cd6:	bf00      	nop
 8019cd8:	20008655 	.word	0x20008655

08019cdc <__sfp_lock_release>:
 8019cdc:	4801      	ldr	r0, [pc, #4]	; (8019ce4 <__sfp_lock_release+0x8>)
 8019cde:	f000 b8ae 	b.w	8019e3e <__retarget_lock_release_recursive>
 8019ce2:	bf00      	nop
 8019ce4:	20008655 	.word	0x20008655

08019ce8 <__sinit_lock_acquire>:
 8019ce8:	4801      	ldr	r0, [pc, #4]	; (8019cf0 <__sinit_lock_acquire+0x8>)
 8019cea:	f000 b8a7 	b.w	8019e3c <__retarget_lock_acquire_recursive>
 8019cee:	bf00      	nop
 8019cf0:	20008656 	.word	0x20008656

08019cf4 <__sinit_lock_release>:
 8019cf4:	4801      	ldr	r0, [pc, #4]	; (8019cfc <__sinit_lock_release+0x8>)
 8019cf6:	f000 b8a2 	b.w	8019e3e <__retarget_lock_release_recursive>
 8019cfa:	bf00      	nop
 8019cfc:	20008656 	.word	0x20008656

08019d00 <__sinit>:
 8019d00:	b510      	push	{r4, lr}
 8019d02:	4604      	mov	r4, r0
 8019d04:	f7ff fff0 	bl	8019ce8 <__sinit_lock_acquire>
 8019d08:	69a3      	ldr	r3, [r4, #24]
 8019d0a:	b11b      	cbz	r3, 8019d14 <__sinit+0x14>
 8019d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d10:	f7ff bff0 	b.w	8019cf4 <__sinit_lock_release>
 8019d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d18:	6523      	str	r3, [r4, #80]	; 0x50
 8019d1a:	4b13      	ldr	r3, [pc, #76]	; (8019d68 <__sinit+0x68>)
 8019d1c:	4a13      	ldr	r2, [pc, #76]	; (8019d6c <__sinit+0x6c>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d22:	42a3      	cmp	r3, r4
 8019d24:	bf04      	itt	eq
 8019d26:	2301      	moveq	r3, #1
 8019d28:	61a3      	streq	r3, [r4, #24]
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	f000 f820 	bl	8019d70 <__sfp>
 8019d30:	6060      	str	r0, [r4, #4]
 8019d32:	4620      	mov	r0, r4
 8019d34:	f000 f81c 	bl	8019d70 <__sfp>
 8019d38:	60a0      	str	r0, [r4, #8]
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f000 f818 	bl	8019d70 <__sfp>
 8019d40:	2200      	movs	r2, #0
 8019d42:	60e0      	str	r0, [r4, #12]
 8019d44:	2104      	movs	r1, #4
 8019d46:	6860      	ldr	r0, [r4, #4]
 8019d48:	f7ff ff82 	bl	8019c50 <std>
 8019d4c:	68a0      	ldr	r0, [r4, #8]
 8019d4e:	2201      	movs	r2, #1
 8019d50:	2109      	movs	r1, #9
 8019d52:	f7ff ff7d 	bl	8019c50 <std>
 8019d56:	68e0      	ldr	r0, [r4, #12]
 8019d58:	2202      	movs	r2, #2
 8019d5a:	2112      	movs	r1, #18
 8019d5c:	f7ff ff78 	bl	8019c50 <std>
 8019d60:	2301      	movs	r3, #1
 8019d62:	61a3      	str	r3, [r4, #24]
 8019d64:	e7d2      	b.n	8019d0c <__sinit+0xc>
 8019d66:	bf00      	nop
 8019d68:	0801abdc 	.word	0x0801abdc
 8019d6c:	08019c99 	.word	0x08019c99

08019d70 <__sfp>:
 8019d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d72:	4607      	mov	r7, r0
 8019d74:	f7ff ffac 	bl	8019cd0 <__sfp_lock_acquire>
 8019d78:	4b1e      	ldr	r3, [pc, #120]	; (8019df4 <__sfp+0x84>)
 8019d7a:	681e      	ldr	r6, [r3, #0]
 8019d7c:	69b3      	ldr	r3, [r6, #24]
 8019d7e:	b913      	cbnz	r3, 8019d86 <__sfp+0x16>
 8019d80:	4630      	mov	r0, r6
 8019d82:	f7ff ffbd 	bl	8019d00 <__sinit>
 8019d86:	3648      	adds	r6, #72	; 0x48
 8019d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019d8c:	3b01      	subs	r3, #1
 8019d8e:	d503      	bpl.n	8019d98 <__sfp+0x28>
 8019d90:	6833      	ldr	r3, [r6, #0]
 8019d92:	b30b      	cbz	r3, 8019dd8 <__sfp+0x68>
 8019d94:	6836      	ldr	r6, [r6, #0]
 8019d96:	e7f7      	b.n	8019d88 <__sfp+0x18>
 8019d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019d9c:	b9d5      	cbnz	r5, 8019dd4 <__sfp+0x64>
 8019d9e:	4b16      	ldr	r3, [pc, #88]	; (8019df8 <__sfp+0x88>)
 8019da0:	60e3      	str	r3, [r4, #12]
 8019da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019da6:	6665      	str	r5, [r4, #100]	; 0x64
 8019da8:	f000 f847 	bl	8019e3a <__retarget_lock_init_recursive>
 8019dac:	f7ff ff96 	bl	8019cdc <__sfp_lock_release>
 8019db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019db8:	6025      	str	r5, [r4, #0]
 8019dba:	61a5      	str	r5, [r4, #24]
 8019dbc:	2208      	movs	r2, #8
 8019dbe:	4629      	mov	r1, r5
 8019dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019dc4:	f7ff fd02 	bl	80197cc <memset>
 8019dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019dd0:	4620      	mov	r0, r4
 8019dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dd4:	3468      	adds	r4, #104	; 0x68
 8019dd6:	e7d9      	b.n	8019d8c <__sfp+0x1c>
 8019dd8:	2104      	movs	r1, #4
 8019dda:	4638      	mov	r0, r7
 8019ddc:	f7ff ff62 	bl	8019ca4 <__sfmoreglue>
 8019de0:	4604      	mov	r4, r0
 8019de2:	6030      	str	r0, [r6, #0]
 8019de4:	2800      	cmp	r0, #0
 8019de6:	d1d5      	bne.n	8019d94 <__sfp+0x24>
 8019de8:	f7ff ff78 	bl	8019cdc <__sfp_lock_release>
 8019dec:	230c      	movs	r3, #12
 8019dee:	603b      	str	r3, [r7, #0]
 8019df0:	e7ee      	b.n	8019dd0 <__sfp+0x60>
 8019df2:	bf00      	nop
 8019df4:	0801abdc 	.word	0x0801abdc
 8019df8:	ffff0001 	.word	0xffff0001

08019dfc <_fwalk_reent>:
 8019dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e00:	4606      	mov	r6, r0
 8019e02:	4688      	mov	r8, r1
 8019e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e08:	2700      	movs	r7, #0
 8019e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8019e12:	d505      	bpl.n	8019e20 <_fwalk_reent+0x24>
 8019e14:	6824      	ldr	r4, [r4, #0]
 8019e16:	2c00      	cmp	r4, #0
 8019e18:	d1f7      	bne.n	8019e0a <_fwalk_reent+0xe>
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e20:	89ab      	ldrh	r3, [r5, #12]
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d907      	bls.n	8019e36 <_fwalk_reent+0x3a>
 8019e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e2a:	3301      	adds	r3, #1
 8019e2c:	d003      	beq.n	8019e36 <_fwalk_reent+0x3a>
 8019e2e:	4629      	mov	r1, r5
 8019e30:	4630      	mov	r0, r6
 8019e32:	47c0      	blx	r8
 8019e34:	4307      	orrs	r7, r0
 8019e36:	3568      	adds	r5, #104	; 0x68
 8019e38:	e7e9      	b.n	8019e0e <_fwalk_reent+0x12>

08019e3a <__retarget_lock_init_recursive>:
 8019e3a:	4770      	bx	lr

08019e3c <__retarget_lock_acquire_recursive>:
 8019e3c:	4770      	bx	lr

08019e3e <__retarget_lock_release_recursive>:
 8019e3e:	4770      	bx	lr

08019e40 <__swhatbuf_r>:
 8019e40:	b570      	push	{r4, r5, r6, lr}
 8019e42:	460e      	mov	r6, r1
 8019e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e48:	2900      	cmp	r1, #0
 8019e4a:	b096      	sub	sp, #88	; 0x58
 8019e4c:	4614      	mov	r4, r2
 8019e4e:	461d      	mov	r5, r3
 8019e50:	da08      	bge.n	8019e64 <__swhatbuf_r+0x24>
 8019e52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019e56:	2200      	movs	r2, #0
 8019e58:	602a      	str	r2, [r5, #0]
 8019e5a:	061a      	lsls	r2, r3, #24
 8019e5c:	d410      	bmi.n	8019e80 <__swhatbuf_r+0x40>
 8019e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e62:	e00e      	b.n	8019e82 <__swhatbuf_r+0x42>
 8019e64:	466a      	mov	r2, sp
 8019e66:	f000 fcdd 	bl	801a824 <_fstat_r>
 8019e6a:	2800      	cmp	r0, #0
 8019e6c:	dbf1      	blt.n	8019e52 <__swhatbuf_r+0x12>
 8019e6e:	9a01      	ldr	r2, [sp, #4]
 8019e70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019e74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019e78:	425a      	negs	r2, r3
 8019e7a:	415a      	adcs	r2, r3
 8019e7c:	602a      	str	r2, [r5, #0]
 8019e7e:	e7ee      	b.n	8019e5e <__swhatbuf_r+0x1e>
 8019e80:	2340      	movs	r3, #64	; 0x40
 8019e82:	2000      	movs	r0, #0
 8019e84:	6023      	str	r3, [r4, #0]
 8019e86:	b016      	add	sp, #88	; 0x58
 8019e88:	bd70      	pop	{r4, r5, r6, pc}
	...

08019e8c <__smakebuf_r>:
 8019e8c:	898b      	ldrh	r3, [r1, #12]
 8019e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019e90:	079d      	lsls	r5, r3, #30
 8019e92:	4606      	mov	r6, r0
 8019e94:	460c      	mov	r4, r1
 8019e96:	d507      	bpl.n	8019ea8 <__smakebuf_r+0x1c>
 8019e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019e9c:	6023      	str	r3, [r4, #0]
 8019e9e:	6123      	str	r3, [r4, #16]
 8019ea0:	2301      	movs	r3, #1
 8019ea2:	6163      	str	r3, [r4, #20]
 8019ea4:	b002      	add	sp, #8
 8019ea6:	bd70      	pop	{r4, r5, r6, pc}
 8019ea8:	ab01      	add	r3, sp, #4
 8019eaa:	466a      	mov	r2, sp
 8019eac:	f7ff ffc8 	bl	8019e40 <__swhatbuf_r>
 8019eb0:	9900      	ldr	r1, [sp, #0]
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f000 f895 	bl	8019fe4 <_malloc_r>
 8019eba:	b948      	cbnz	r0, 8019ed0 <__smakebuf_r+0x44>
 8019ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ec0:	059a      	lsls	r2, r3, #22
 8019ec2:	d4ef      	bmi.n	8019ea4 <__smakebuf_r+0x18>
 8019ec4:	f023 0303 	bic.w	r3, r3, #3
 8019ec8:	f043 0302 	orr.w	r3, r3, #2
 8019ecc:	81a3      	strh	r3, [r4, #12]
 8019ece:	e7e3      	b.n	8019e98 <__smakebuf_r+0xc>
 8019ed0:	4b0d      	ldr	r3, [pc, #52]	; (8019f08 <__smakebuf_r+0x7c>)
 8019ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019ed4:	89a3      	ldrh	r3, [r4, #12]
 8019ed6:	6020      	str	r0, [r4, #0]
 8019ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019edc:	81a3      	strh	r3, [r4, #12]
 8019ede:	9b00      	ldr	r3, [sp, #0]
 8019ee0:	6163      	str	r3, [r4, #20]
 8019ee2:	9b01      	ldr	r3, [sp, #4]
 8019ee4:	6120      	str	r0, [r4, #16]
 8019ee6:	b15b      	cbz	r3, 8019f00 <__smakebuf_r+0x74>
 8019ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019eec:	4630      	mov	r0, r6
 8019eee:	f000 fcab 	bl	801a848 <_isatty_r>
 8019ef2:	b128      	cbz	r0, 8019f00 <__smakebuf_r+0x74>
 8019ef4:	89a3      	ldrh	r3, [r4, #12]
 8019ef6:	f023 0303 	bic.w	r3, r3, #3
 8019efa:	f043 0301 	orr.w	r3, r3, #1
 8019efe:	81a3      	strh	r3, [r4, #12]
 8019f00:	89a0      	ldrh	r0, [r4, #12]
 8019f02:	4305      	orrs	r5, r0
 8019f04:	81a5      	strh	r5, [r4, #12]
 8019f06:	e7cd      	b.n	8019ea4 <__smakebuf_r+0x18>
 8019f08:	08019c99 	.word	0x08019c99

08019f0c <_free_r>:
 8019f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f0e:	2900      	cmp	r1, #0
 8019f10:	d044      	beq.n	8019f9c <_free_r+0x90>
 8019f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f16:	9001      	str	r0, [sp, #4]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8019f1e:	bfb8      	it	lt
 8019f20:	18e4      	addlt	r4, r4, r3
 8019f22:	f000 fcb3 	bl	801a88c <__malloc_lock>
 8019f26:	4a1e      	ldr	r2, [pc, #120]	; (8019fa0 <_free_r+0x94>)
 8019f28:	9801      	ldr	r0, [sp, #4]
 8019f2a:	6813      	ldr	r3, [r2, #0]
 8019f2c:	b933      	cbnz	r3, 8019f3c <_free_r+0x30>
 8019f2e:	6063      	str	r3, [r4, #4]
 8019f30:	6014      	str	r4, [r2, #0]
 8019f32:	b003      	add	sp, #12
 8019f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f38:	f000 bcae 	b.w	801a898 <__malloc_unlock>
 8019f3c:	42a3      	cmp	r3, r4
 8019f3e:	d908      	bls.n	8019f52 <_free_r+0x46>
 8019f40:	6825      	ldr	r5, [r4, #0]
 8019f42:	1961      	adds	r1, r4, r5
 8019f44:	428b      	cmp	r3, r1
 8019f46:	bf01      	itttt	eq
 8019f48:	6819      	ldreq	r1, [r3, #0]
 8019f4a:	685b      	ldreq	r3, [r3, #4]
 8019f4c:	1949      	addeq	r1, r1, r5
 8019f4e:	6021      	streq	r1, [r4, #0]
 8019f50:	e7ed      	b.n	8019f2e <_free_r+0x22>
 8019f52:	461a      	mov	r2, r3
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	b10b      	cbz	r3, 8019f5c <_free_r+0x50>
 8019f58:	42a3      	cmp	r3, r4
 8019f5a:	d9fa      	bls.n	8019f52 <_free_r+0x46>
 8019f5c:	6811      	ldr	r1, [r2, #0]
 8019f5e:	1855      	adds	r5, r2, r1
 8019f60:	42a5      	cmp	r5, r4
 8019f62:	d10b      	bne.n	8019f7c <_free_r+0x70>
 8019f64:	6824      	ldr	r4, [r4, #0]
 8019f66:	4421      	add	r1, r4
 8019f68:	1854      	adds	r4, r2, r1
 8019f6a:	42a3      	cmp	r3, r4
 8019f6c:	6011      	str	r1, [r2, #0]
 8019f6e:	d1e0      	bne.n	8019f32 <_free_r+0x26>
 8019f70:	681c      	ldr	r4, [r3, #0]
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	6053      	str	r3, [r2, #4]
 8019f76:	4421      	add	r1, r4
 8019f78:	6011      	str	r1, [r2, #0]
 8019f7a:	e7da      	b.n	8019f32 <_free_r+0x26>
 8019f7c:	d902      	bls.n	8019f84 <_free_r+0x78>
 8019f7e:	230c      	movs	r3, #12
 8019f80:	6003      	str	r3, [r0, #0]
 8019f82:	e7d6      	b.n	8019f32 <_free_r+0x26>
 8019f84:	6825      	ldr	r5, [r4, #0]
 8019f86:	1961      	adds	r1, r4, r5
 8019f88:	428b      	cmp	r3, r1
 8019f8a:	bf04      	itt	eq
 8019f8c:	6819      	ldreq	r1, [r3, #0]
 8019f8e:	685b      	ldreq	r3, [r3, #4]
 8019f90:	6063      	str	r3, [r4, #4]
 8019f92:	bf04      	itt	eq
 8019f94:	1949      	addeq	r1, r1, r5
 8019f96:	6021      	streq	r1, [r4, #0]
 8019f98:	6054      	str	r4, [r2, #4]
 8019f9a:	e7ca      	b.n	8019f32 <_free_r+0x26>
 8019f9c:	b003      	add	sp, #12
 8019f9e:	bd30      	pop	{r4, r5, pc}
 8019fa0:	20008658 	.word	0x20008658

08019fa4 <sbrk_aligned>:
 8019fa4:	b570      	push	{r4, r5, r6, lr}
 8019fa6:	4e0e      	ldr	r6, [pc, #56]	; (8019fe0 <sbrk_aligned+0x3c>)
 8019fa8:	460c      	mov	r4, r1
 8019faa:	6831      	ldr	r1, [r6, #0]
 8019fac:	4605      	mov	r5, r0
 8019fae:	b911      	cbnz	r1, 8019fb6 <sbrk_aligned+0x12>
 8019fb0:	f000 fbc2 	bl	801a738 <_sbrk_r>
 8019fb4:	6030      	str	r0, [r6, #0]
 8019fb6:	4621      	mov	r1, r4
 8019fb8:	4628      	mov	r0, r5
 8019fba:	f000 fbbd 	bl	801a738 <_sbrk_r>
 8019fbe:	1c43      	adds	r3, r0, #1
 8019fc0:	d00a      	beq.n	8019fd8 <sbrk_aligned+0x34>
 8019fc2:	1cc4      	adds	r4, r0, #3
 8019fc4:	f024 0403 	bic.w	r4, r4, #3
 8019fc8:	42a0      	cmp	r0, r4
 8019fca:	d007      	beq.n	8019fdc <sbrk_aligned+0x38>
 8019fcc:	1a21      	subs	r1, r4, r0
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f000 fbb2 	bl	801a738 <_sbrk_r>
 8019fd4:	3001      	adds	r0, #1
 8019fd6:	d101      	bne.n	8019fdc <sbrk_aligned+0x38>
 8019fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8019fdc:	4620      	mov	r0, r4
 8019fde:	bd70      	pop	{r4, r5, r6, pc}
 8019fe0:	2000865c 	.word	0x2000865c

08019fe4 <_malloc_r>:
 8019fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe8:	1ccd      	adds	r5, r1, #3
 8019fea:	f025 0503 	bic.w	r5, r5, #3
 8019fee:	3508      	adds	r5, #8
 8019ff0:	2d0c      	cmp	r5, #12
 8019ff2:	bf38      	it	cc
 8019ff4:	250c      	movcc	r5, #12
 8019ff6:	2d00      	cmp	r5, #0
 8019ff8:	4607      	mov	r7, r0
 8019ffa:	db01      	blt.n	801a000 <_malloc_r+0x1c>
 8019ffc:	42a9      	cmp	r1, r5
 8019ffe:	d905      	bls.n	801a00c <_malloc_r+0x28>
 801a000:	230c      	movs	r3, #12
 801a002:	603b      	str	r3, [r7, #0]
 801a004:	2600      	movs	r6, #0
 801a006:	4630      	mov	r0, r6
 801a008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a00c:	4e2e      	ldr	r6, [pc, #184]	; (801a0c8 <_malloc_r+0xe4>)
 801a00e:	f000 fc3d 	bl	801a88c <__malloc_lock>
 801a012:	6833      	ldr	r3, [r6, #0]
 801a014:	461c      	mov	r4, r3
 801a016:	bb34      	cbnz	r4, 801a066 <_malloc_r+0x82>
 801a018:	4629      	mov	r1, r5
 801a01a:	4638      	mov	r0, r7
 801a01c:	f7ff ffc2 	bl	8019fa4 <sbrk_aligned>
 801a020:	1c43      	adds	r3, r0, #1
 801a022:	4604      	mov	r4, r0
 801a024:	d14d      	bne.n	801a0c2 <_malloc_r+0xde>
 801a026:	6834      	ldr	r4, [r6, #0]
 801a028:	4626      	mov	r6, r4
 801a02a:	2e00      	cmp	r6, #0
 801a02c:	d140      	bne.n	801a0b0 <_malloc_r+0xcc>
 801a02e:	6823      	ldr	r3, [r4, #0]
 801a030:	4631      	mov	r1, r6
 801a032:	4638      	mov	r0, r7
 801a034:	eb04 0803 	add.w	r8, r4, r3
 801a038:	f000 fb7e 	bl	801a738 <_sbrk_r>
 801a03c:	4580      	cmp	r8, r0
 801a03e:	d13a      	bne.n	801a0b6 <_malloc_r+0xd2>
 801a040:	6821      	ldr	r1, [r4, #0]
 801a042:	3503      	adds	r5, #3
 801a044:	1a6d      	subs	r5, r5, r1
 801a046:	f025 0503 	bic.w	r5, r5, #3
 801a04a:	3508      	adds	r5, #8
 801a04c:	2d0c      	cmp	r5, #12
 801a04e:	bf38      	it	cc
 801a050:	250c      	movcc	r5, #12
 801a052:	4629      	mov	r1, r5
 801a054:	4638      	mov	r0, r7
 801a056:	f7ff ffa5 	bl	8019fa4 <sbrk_aligned>
 801a05a:	3001      	adds	r0, #1
 801a05c:	d02b      	beq.n	801a0b6 <_malloc_r+0xd2>
 801a05e:	6823      	ldr	r3, [r4, #0]
 801a060:	442b      	add	r3, r5
 801a062:	6023      	str	r3, [r4, #0]
 801a064:	e00e      	b.n	801a084 <_malloc_r+0xa0>
 801a066:	6822      	ldr	r2, [r4, #0]
 801a068:	1b52      	subs	r2, r2, r5
 801a06a:	d41e      	bmi.n	801a0aa <_malloc_r+0xc6>
 801a06c:	2a0b      	cmp	r2, #11
 801a06e:	d916      	bls.n	801a09e <_malloc_r+0xba>
 801a070:	1961      	adds	r1, r4, r5
 801a072:	42a3      	cmp	r3, r4
 801a074:	6025      	str	r5, [r4, #0]
 801a076:	bf18      	it	ne
 801a078:	6059      	strne	r1, [r3, #4]
 801a07a:	6863      	ldr	r3, [r4, #4]
 801a07c:	bf08      	it	eq
 801a07e:	6031      	streq	r1, [r6, #0]
 801a080:	5162      	str	r2, [r4, r5]
 801a082:	604b      	str	r3, [r1, #4]
 801a084:	4638      	mov	r0, r7
 801a086:	f104 060b 	add.w	r6, r4, #11
 801a08a:	f000 fc05 	bl	801a898 <__malloc_unlock>
 801a08e:	f026 0607 	bic.w	r6, r6, #7
 801a092:	1d23      	adds	r3, r4, #4
 801a094:	1af2      	subs	r2, r6, r3
 801a096:	d0b6      	beq.n	801a006 <_malloc_r+0x22>
 801a098:	1b9b      	subs	r3, r3, r6
 801a09a:	50a3      	str	r3, [r4, r2]
 801a09c:	e7b3      	b.n	801a006 <_malloc_r+0x22>
 801a09e:	6862      	ldr	r2, [r4, #4]
 801a0a0:	42a3      	cmp	r3, r4
 801a0a2:	bf0c      	ite	eq
 801a0a4:	6032      	streq	r2, [r6, #0]
 801a0a6:	605a      	strne	r2, [r3, #4]
 801a0a8:	e7ec      	b.n	801a084 <_malloc_r+0xa0>
 801a0aa:	4623      	mov	r3, r4
 801a0ac:	6864      	ldr	r4, [r4, #4]
 801a0ae:	e7b2      	b.n	801a016 <_malloc_r+0x32>
 801a0b0:	4634      	mov	r4, r6
 801a0b2:	6876      	ldr	r6, [r6, #4]
 801a0b4:	e7b9      	b.n	801a02a <_malloc_r+0x46>
 801a0b6:	230c      	movs	r3, #12
 801a0b8:	603b      	str	r3, [r7, #0]
 801a0ba:	4638      	mov	r0, r7
 801a0bc:	f000 fbec 	bl	801a898 <__malloc_unlock>
 801a0c0:	e7a1      	b.n	801a006 <_malloc_r+0x22>
 801a0c2:	6025      	str	r5, [r4, #0]
 801a0c4:	e7de      	b.n	801a084 <_malloc_r+0xa0>
 801a0c6:	bf00      	nop
 801a0c8:	20008658 	.word	0x20008658

0801a0cc <__sfputc_r>:
 801a0cc:	6893      	ldr	r3, [r2, #8]
 801a0ce:	3b01      	subs	r3, #1
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	b410      	push	{r4}
 801a0d4:	6093      	str	r3, [r2, #8]
 801a0d6:	da08      	bge.n	801a0ea <__sfputc_r+0x1e>
 801a0d8:	6994      	ldr	r4, [r2, #24]
 801a0da:	42a3      	cmp	r3, r4
 801a0dc:	db01      	blt.n	801a0e2 <__sfputc_r+0x16>
 801a0de:	290a      	cmp	r1, #10
 801a0e0:	d103      	bne.n	801a0ea <__sfputc_r+0x1e>
 801a0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0e6:	f7ff bc31 	b.w	801994c <__swbuf_r>
 801a0ea:	6813      	ldr	r3, [r2, #0]
 801a0ec:	1c58      	adds	r0, r3, #1
 801a0ee:	6010      	str	r0, [r2, #0]
 801a0f0:	7019      	strb	r1, [r3, #0]
 801a0f2:	4608      	mov	r0, r1
 801a0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0f8:	4770      	bx	lr

0801a0fa <__sfputs_r>:
 801a0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fc:	4606      	mov	r6, r0
 801a0fe:	460f      	mov	r7, r1
 801a100:	4614      	mov	r4, r2
 801a102:	18d5      	adds	r5, r2, r3
 801a104:	42ac      	cmp	r4, r5
 801a106:	d101      	bne.n	801a10c <__sfputs_r+0x12>
 801a108:	2000      	movs	r0, #0
 801a10a:	e007      	b.n	801a11c <__sfputs_r+0x22>
 801a10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a110:	463a      	mov	r2, r7
 801a112:	4630      	mov	r0, r6
 801a114:	f7ff ffda 	bl	801a0cc <__sfputc_r>
 801a118:	1c43      	adds	r3, r0, #1
 801a11a:	d1f3      	bne.n	801a104 <__sfputs_r+0xa>
 801a11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a120 <_vfiprintf_r>:
 801a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a124:	460d      	mov	r5, r1
 801a126:	b09d      	sub	sp, #116	; 0x74
 801a128:	4614      	mov	r4, r2
 801a12a:	4698      	mov	r8, r3
 801a12c:	4606      	mov	r6, r0
 801a12e:	b118      	cbz	r0, 801a138 <_vfiprintf_r+0x18>
 801a130:	6983      	ldr	r3, [r0, #24]
 801a132:	b90b      	cbnz	r3, 801a138 <_vfiprintf_r+0x18>
 801a134:	f7ff fde4 	bl	8019d00 <__sinit>
 801a138:	4b89      	ldr	r3, [pc, #548]	; (801a360 <_vfiprintf_r+0x240>)
 801a13a:	429d      	cmp	r5, r3
 801a13c:	d11b      	bne.n	801a176 <_vfiprintf_r+0x56>
 801a13e:	6875      	ldr	r5, [r6, #4]
 801a140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a142:	07d9      	lsls	r1, r3, #31
 801a144:	d405      	bmi.n	801a152 <_vfiprintf_r+0x32>
 801a146:	89ab      	ldrh	r3, [r5, #12]
 801a148:	059a      	lsls	r2, r3, #22
 801a14a:	d402      	bmi.n	801a152 <_vfiprintf_r+0x32>
 801a14c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a14e:	f7ff fe75 	bl	8019e3c <__retarget_lock_acquire_recursive>
 801a152:	89ab      	ldrh	r3, [r5, #12]
 801a154:	071b      	lsls	r3, r3, #28
 801a156:	d501      	bpl.n	801a15c <_vfiprintf_r+0x3c>
 801a158:	692b      	ldr	r3, [r5, #16]
 801a15a:	b9eb      	cbnz	r3, 801a198 <_vfiprintf_r+0x78>
 801a15c:	4629      	mov	r1, r5
 801a15e:	4630      	mov	r0, r6
 801a160:	f7ff fc46 	bl	80199f0 <__swsetup_r>
 801a164:	b1c0      	cbz	r0, 801a198 <_vfiprintf_r+0x78>
 801a166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a168:	07dc      	lsls	r4, r3, #31
 801a16a:	d50e      	bpl.n	801a18a <_vfiprintf_r+0x6a>
 801a16c:	f04f 30ff 	mov.w	r0, #4294967295
 801a170:	b01d      	add	sp, #116	; 0x74
 801a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a176:	4b7b      	ldr	r3, [pc, #492]	; (801a364 <_vfiprintf_r+0x244>)
 801a178:	429d      	cmp	r5, r3
 801a17a:	d101      	bne.n	801a180 <_vfiprintf_r+0x60>
 801a17c:	68b5      	ldr	r5, [r6, #8]
 801a17e:	e7df      	b.n	801a140 <_vfiprintf_r+0x20>
 801a180:	4b79      	ldr	r3, [pc, #484]	; (801a368 <_vfiprintf_r+0x248>)
 801a182:	429d      	cmp	r5, r3
 801a184:	bf08      	it	eq
 801a186:	68f5      	ldreq	r5, [r6, #12]
 801a188:	e7da      	b.n	801a140 <_vfiprintf_r+0x20>
 801a18a:	89ab      	ldrh	r3, [r5, #12]
 801a18c:	0598      	lsls	r0, r3, #22
 801a18e:	d4ed      	bmi.n	801a16c <_vfiprintf_r+0x4c>
 801a190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a192:	f7ff fe54 	bl	8019e3e <__retarget_lock_release_recursive>
 801a196:	e7e9      	b.n	801a16c <_vfiprintf_r+0x4c>
 801a198:	2300      	movs	r3, #0
 801a19a:	9309      	str	r3, [sp, #36]	; 0x24
 801a19c:	2320      	movs	r3, #32
 801a19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1a6:	2330      	movs	r3, #48	; 0x30
 801a1a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a36c <_vfiprintf_r+0x24c>
 801a1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1b0:	f04f 0901 	mov.w	r9, #1
 801a1b4:	4623      	mov	r3, r4
 801a1b6:	469a      	mov	sl, r3
 801a1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1bc:	b10a      	cbz	r2, 801a1c2 <_vfiprintf_r+0xa2>
 801a1be:	2a25      	cmp	r2, #37	; 0x25
 801a1c0:	d1f9      	bne.n	801a1b6 <_vfiprintf_r+0x96>
 801a1c2:	ebba 0b04 	subs.w	fp, sl, r4
 801a1c6:	d00b      	beq.n	801a1e0 <_vfiprintf_r+0xc0>
 801a1c8:	465b      	mov	r3, fp
 801a1ca:	4622      	mov	r2, r4
 801a1cc:	4629      	mov	r1, r5
 801a1ce:	4630      	mov	r0, r6
 801a1d0:	f7ff ff93 	bl	801a0fa <__sfputs_r>
 801a1d4:	3001      	adds	r0, #1
 801a1d6:	f000 80aa 	beq.w	801a32e <_vfiprintf_r+0x20e>
 801a1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1dc:	445a      	add	r2, fp
 801a1de:	9209      	str	r2, [sp, #36]	; 0x24
 801a1e0:	f89a 3000 	ldrb.w	r3, [sl]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	f000 80a2 	beq.w	801a32e <_vfiprintf_r+0x20e>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 801a1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1f4:	f10a 0a01 	add.w	sl, sl, #1
 801a1f8:	9304      	str	r3, [sp, #16]
 801a1fa:	9307      	str	r3, [sp, #28]
 801a1fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a200:	931a      	str	r3, [sp, #104]	; 0x68
 801a202:	4654      	mov	r4, sl
 801a204:	2205      	movs	r2, #5
 801a206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a20a:	4858      	ldr	r0, [pc, #352]	; (801a36c <_vfiprintf_r+0x24c>)
 801a20c:	f7e5 ffb8 	bl	8000180 <memchr>
 801a210:	9a04      	ldr	r2, [sp, #16]
 801a212:	b9d8      	cbnz	r0, 801a24c <_vfiprintf_r+0x12c>
 801a214:	06d1      	lsls	r1, r2, #27
 801a216:	bf44      	itt	mi
 801a218:	2320      	movmi	r3, #32
 801a21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a21e:	0713      	lsls	r3, r2, #28
 801a220:	bf44      	itt	mi
 801a222:	232b      	movmi	r3, #43	; 0x2b
 801a224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a228:	f89a 3000 	ldrb.w	r3, [sl]
 801a22c:	2b2a      	cmp	r3, #42	; 0x2a
 801a22e:	d015      	beq.n	801a25c <_vfiprintf_r+0x13c>
 801a230:	9a07      	ldr	r2, [sp, #28]
 801a232:	4654      	mov	r4, sl
 801a234:	2000      	movs	r0, #0
 801a236:	f04f 0c0a 	mov.w	ip, #10
 801a23a:	4621      	mov	r1, r4
 801a23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a240:	3b30      	subs	r3, #48	; 0x30
 801a242:	2b09      	cmp	r3, #9
 801a244:	d94e      	bls.n	801a2e4 <_vfiprintf_r+0x1c4>
 801a246:	b1b0      	cbz	r0, 801a276 <_vfiprintf_r+0x156>
 801a248:	9207      	str	r2, [sp, #28]
 801a24a:	e014      	b.n	801a276 <_vfiprintf_r+0x156>
 801a24c:	eba0 0308 	sub.w	r3, r0, r8
 801a250:	fa09 f303 	lsl.w	r3, r9, r3
 801a254:	4313      	orrs	r3, r2
 801a256:	9304      	str	r3, [sp, #16]
 801a258:	46a2      	mov	sl, r4
 801a25a:	e7d2      	b.n	801a202 <_vfiprintf_r+0xe2>
 801a25c:	9b03      	ldr	r3, [sp, #12]
 801a25e:	1d19      	adds	r1, r3, #4
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	9103      	str	r1, [sp, #12]
 801a264:	2b00      	cmp	r3, #0
 801a266:	bfbb      	ittet	lt
 801a268:	425b      	neglt	r3, r3
 801a26a:	f042 0202 	orrlt.w	r2, r2, #2
 801a26e:	9307      	strge	r3, [sp, #28]
 801a270:	9307      	strlt	r3, [sp, #28]
 801a272:	bfb8      	it	lt
 801a274:	9204      	strlt	r2, [sp, #16]
 801a276:	7823      	ldrb	r3, [r4, #0]
 801a278:	2b2e      	cmp	r3, #46	; 0x2e
 801a27a:	d10c      	bne.n	801a296 <_vfiprintf_r+0x176>
 801a27c:	7863      	ldrb	r3, [r4, #1]
 801a27e:	2b2a      	cmp	r3, #42	; 0x2a
 801a280:	d135      	bne.n	801a2ee <_vfiprintf_r+0x1ce>
 801a282:	9b03      	ldr	r3, [sp, #12]
 801a284:	1d1a      	adds	r2, r3, #4
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	9203      	str	r2, [sp, #12]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	bfb8      	it	lt
 801a28e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a292:	3402      	adds	r4, #2
 801a294:	9305      	str	r3, [sp, #20]
 801a296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a37c <_vfiprintf_r+0x25c>
 801a29a:	7821      	ldrb	r1, [r4, #0]
 801a29c:	2203      	movs	r2, #3
 801a29e:	4650      	mov	r0, sl
 801a2a0:	f7e5 ff6e 	bl	8000180 <memchr>
 801a2a4:	b140      	cbz	r0, 801a2b8 <_vfiprintf_r+0x198>
 801a2a6:	2340      	movs	r3, #64	; 0x40
 801a2a8:	eba0 000a 	sub.w	r0, r0, sl
 801a2ac:	fa03 f000 	lsl.w	r0, r3, r0
 801a2b0:	9b04      	ldr	r3, [sp, #16]
 801a2b2:	4303      	orrs	r3, r0
 801a2b4:	3401      	adds	r4, #1
 801a2b6:	9304      	str	r3, [sp, #16]
 801a2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2bc:	482c      	ldr	r0, [pc, #176]	; (801a370 <_vfiprintf_r+0x250>)
 801a2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2c2:	2206      	movs	r2, #6
 801a2c4:	f7e5 ff5c 	bl	8000180 <memchr>
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d03f      	beq.n	801a34c <_vfiprintf_r+0x22c>
 801a2cc:	4b29      	ldr	r3, [pc, #164]	; (801a374 <_vfiprintf_r+0x254>)
 801a2ce:	bb1b      	cbnz	r3, 801a318 <_vfiprintf_r+0x1f8>
 801a2d0:	9b03      	ldr	r3, [sp, #12]
 801a2d2:	3307      	adds	r3, #7
 801a2d4:	f023 0307 	bic.w	r3, r3, #7
 801a2d8:	3308      	adds	r3, #8
 801a2da:	9303      	str	r3, [sp, #12]
 801a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2de:	443b      	add	r3, r7
 801a2e0:	9309      	str	r3, [sp, #36]	; 0x24
 801a2e2:	e767      	b.n	801a1b4 <_vfiprintf_r+0x94>
 801a2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2e8:	460c      	mov	r4, r1
 801a2ea:	2001      	movs	r0, #1
 801a2ec:	e7a5      	b.n	801a23a <_vfiprintf_r+0x11a>
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	3401      	adds	r4, #1
 801a2f2:	9305      	str	r3, [sp, #20]
 801a2f4:	4619      	mov	r1, r3
 801a2f6:	f04f 0c0a 	mov.w	ip, #10
 801a2fa:	4620      	mov	r0, r4
 801a2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a300:	3a30      	subs	r2, #48	; 0x30
 801a302:	2a09      	cmp	r2, #9
 801a304:	d903      	bls.n	801a30e <_vfiprintf_r+0x1ee>
 801a306:	2b00      	cmp	r3, #0
 801a308:	d0c5      	beq.n	801a296 <_vfiprintf_r+0x176>
 801a30a:	9105      	str	r1, [sp, #20]
 801a30c:	e7c3      	b.n	801a296 <_vfiprintf_r+0x176>
 801a30e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a312:	4604      	mov	r4, r0
 801a314:	2301      	movs	r3, #1
 801a316:	e7f0      	b.n	801a2fa <_vfiprintf_r+0x1da>
 801a318:	ab03      	add	r3, sp, #12
 801a31a:	9300      	str	r3, [sp, #0]
 801a31c:	462a      	mov	r2, r5
 801a31e:	4b16      	ldr	r3, [pc, #88]	; (801a378 <_vfiprintf_r+0x258>)
 801a320:	a904      	add	r1, sp, #16
 801a322:	4630      	mov	r0, r6
 801a324:	f3af 8000 	nop.w
 801a328:	4607      	mov	r7, r0
 801a32a:	1c78      	adds	r0, r7, #1
 801a32c:	d1d6      	bne.n	801a2dc <_vfiprintf_r+0x1bc>
 801a32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a330:	07d9      	lsls	r1, r3, #31
 801a332:	d405      	bmi.n	801a340 <_vfiprintf_r+0x220>
 801a334:	89ab      	ldrh	r3, [r5, #12]
 801a336:	059a      	lsls	r2, r3, #22
 801a338:	d402      	bmi.n	801a340 <_vfiprintf_r+0x220>
 801a33a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a33c:	f7ff fd7f 	bl	8019e3e <__retarget_lock_release_recursive>
 801a340:	89ab      	ldrh	r3, [r5, #12]
 801a342:	065b      	lsls	r3, r3, #25
 801a344:	f53f af12 	bmi.w	801a16c <_vfiprintf_r+0x4c>
 801a348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a34a:	e711      	b.n	801a170 <_vfiprintf_r+0x50>
 801a34c:	ab03      	add	r3, sp, #12
 801a34e:	9300      	str	r3, [sp, #0]
 801a350:	462a      	mov	r2, r5
 801a352:	4b09      	ldr	r3, [pc, #36]	; (801a378 <_vfiprintf_r+0x258>)
 801a354:	a904      	add	r1, sp, #16
 801a356:	4630      	mov	r0, r6
 801a358:	f000 f880 	bl	801a45c <_printf_i>
 801a35c:	e7e4      	b.n	801a328 <_vfiprintf_r+0x208>
 801a35e:	bf00      	nop
 801a360:	0801ac00 	.word	0x0801ac00
 801a364:	0801ac20 	.word	0x0801ac20
 801a368:	0801abe0 	.word	0x0801abe0
 801a36c:	0801ac40 	.word	0x0801ac40
 801a370:	0801ac4a 	.word	0x0801ac4a
 801a374:	00000000 	.word	0x00000000
 801a378:	0801a0fb 	.word	0x0801a0fb
 801a37c:	0801ac46 	.word	0x0801ac46

0801a380 <_printf_common>:
 801a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a384:	4616      	mov	r6, r2
 801a386:	4699      	mov	r9, r3
 801a388:	688a      	ldr	r2, [r1, #8]
 801a38a:	690b      	ldr	r3, [r1, #16]
 801a38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a390:	4293      	cmp	r3, r2
 801a392:	bfb8      	it	lt
 801a394:	4613      	movlt	r3, r2
 801a396:	6033      	str	r3, [r6, #0]
 801a398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a39c:	4607      	mov	r7, r0
 801a39e:	460c      	mov	r4, r1
 801a3a0:	b10a      	cbz	r2, 801a3a6 <_printf_common+0x26>
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	6033      	str	r3, [r6, #0]
 801a3a6:	6823      	ldr	r3, [r4, #0]
 801a3a8:	0699      	lsls	r1, r3, #26
 801a3aa:	bf42      	ittt	mi
 801a3ac:	6833      	ldrmi	r3, [r6, #0]
 801a3ae:	3302      	addmi	r3, #2
 801a3b0:	6033      	strmi	r3, [r6, #0]
 801a3b2:	6825      	ldr	r5, [r4, #0]
 801a3b4:	f015 0506 	ands.w	r5, r5, #6
 801a3b8:	d106      	bne.n	801a3c8 <_printf_common+0x48>
 801a3ba:	f104 0a19 	add.w	sl, r4, #25
 801a3be:	68e3      	ldr	r3, [r4, #12]
 801a3c0:	6832      	ldr	r2, [r6, #0]
 801a3c2:	1a9b      	subs	r3, r3, r2
 801a3c4:	42ab      	cmp	r3, r5
 801a3c6:	dc26      	bgt.n	801a416 <_printf_common+0x96>
 801a3c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a3cc:	1e13      	subs	r3, r2, #0
 801a3ce:	6822      	ldr	r2, [r4, #0]
 801a3d0:	bf18      	it	ne
 801a3d2:	2301      	movne	r3, #1
 801a3d4:	0692      	lsls	r2, r2, #26
 801a3d6:	d42b      	bmi.n	801a430 <_printf_common+0xb0>
 801a3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3dc:	4649      	mov	r1, r9
 801a3de:	4638      	mov	r0, r7
 801a3e0:	47c0      	blx	r8
 801a3e2:	3001      	adds	r0, #1
 801a3e4:	d01e      	beq.n	801a424 <_printf_common+0xa4>
 801a3e6:	6823      	ldr	r3, [r4, #0]
 801a3e8:	68e5      	ldr	r5, [r4, #12]
 801a3ea:	6832      	ldr	r2, [r6, #0]
 801a3ec:	f003 0306 	and.w	r3, r3, #6
 801a3f0:	2b04      	cmp	r3, #4
 801a3f2:	bf08      	it	eq
 801a3f4:	1aad      	subeq	r5, r5, r2
 801a3f6:	68a3      	ldr	r3, [r4, #8]
 801a3f8:	6922      	ldr	r2, [r4, #16]
 801a3fa:	bf0c      	ite	eq
 801a3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a400:	2500      	movne	r5, #0
 801a402:	4293      	cmp	r3, r2
 801a404:	bfc4      	itt	gt
 801a406:	1a9b      	subgt	r3, r3, r2
 801a408:	18ed      	addgt	r5, r5, r3
 801a40a:	2600      	movs	r6, #0
 801a40c:	341a      	adds	r4, #26
 801a40e:	42b5      	cmp	r5, r6
 801a410:	d11a      	bne.n	801a448 <_printf_common+0xc8>
 801a412:	2000      	movs	r0, #0
 801a414:	e008      	b.n	801a428 <_printf_common+0xa8>
 801a416:	2301      	movs	r3, #1
 801a418:	4652      	mov	r2, sl
 801a41a:	4649      	mov	r1, r9
 801a41c:	4638      	mov	r0, r7
 801a41e:	47c0      	blx	r8
 801a420:	3001      	adds	r0, #1
 801a422:	d103      	bne.n	801a42c <_printf_common+0xac>
 801a424:	f04f 30ff 	mov.w	r0, #4294967295
 801a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a42c:	3501      	adds	r5, #1
 801a42e:	e7c6      	b.n	801a3be <_printf_common+0x3e>
 801a430:	18e1      	adds	r1, r4, r3
 801a432:	1c5a      	adds	r2, r3, #1
 801a434:	2030      	movs	r0, #48	; 0x30
 801a436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a43a:	4422      	add	r2, r4
 801a43c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a444:	3302      	adds	r3, #2
 801a446:	e7c7      	b.n	801a3d8 <_printf_common+0x58>
 801a448:	2301      	movs	r3, #1
 801a44a:	4622      	mov	r2, r4
 801a44c:	4649      	mov	r1, r9
 801a44e:	4638      	mov	r0, r7
 801a450:	47c0      	blx	r8
 801a452:	3001      	adds	r0, #1
 801a454:	d0e6      	beq.n	801a424 <_printf_common+0xa4>
 801a456:	3601      	adds	r6, #1
 801a458:	e7d9      	b.n	801a40e <_printf_common+0x8e>
	...

0801a45c <_printf_i>:
 801a45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a460:	7e0f      	ldrb	r7, [r1, #24]
 801a462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a464:	2f78      	cmp	r7, #120	; 0x78
 801a466:	4691      	mov	r9, r2
 801a468:	4680      	mov	r8, r0
 801a46a:	460c      	mov	r4, r1
 801a46c:	469a      	mov	sl, r3
 801a46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a472:	d807      	bhi.n	801a484 <_printf_i+0x28>
 801a474:	2f62      	cmp	r7, #98	; 0x62
 801a476:	d80a      	bhi.n	801a48e <_printf_i+0x32>
 801a478:	2f00      	cmp	r7, #0
 801a47a:	f000 80d8 	beq.w	801a62e <_printf_i+0x1d2>
 801a47e:	2f58      	cmp	r7, #88	; 0x58
 801a480:	f000 80a3 	beq.w	801a5ca <_printf_i+0x16e>
 801a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a48c:	e03a      	b.n	801a504 <_printf_i+0xa8>
 801a48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a492:	2b15      	cmp	r3, #21
 801a494:	d8f6      	bhi.n	801a484 <_printf_i+0x28>
 801a496:	a101      	add	r1, pc, #4	; (adr r1, 801a49c <_printf_i+0x40>)
 801a498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a49c:	0801a4f5 	.word	0x0801a4f5
 801a4a0:	0801a509 	.word	0x0801a509
 801a4a4:	0801a485 	.word	0x0801a485
 801a4a8:	0801a485 	.word	0x0801a485
 801a4ac:	0801a485 	.word	0x0801a485
 801a4b0:	0801a485 	.word	0x0801a485
 801a4b4:	0801a509 	.word	0x0801a509
 801a4b8:	0801a485 	.word	0x0801a485
 801a4bc:	0801a485 	.word	0x0801a485
 801a4c0:	0801a485 	.word	0x0801a485
 801a4c4:	0801a485 	.word	0x0801a485
 801a4c8:	0801a615 	.word	0x0801a615
 801a4cc:	0801a539 	.word	0x0801a539
 801a4d0:	0801a5f7 	.word	0x0801a5f7
 801a4d4:	0801a485 	.word	0x0801a485
 801a4d8:	0801a485 	.word	0x0801a485
 801a4dc:	0801a637 	.word	0x0801a637
 801a4e0:	0801a485 	.word	0x0801a485
 801a4e4:	0801a539 	.word	0x0801a539
 801a4e8:	0801a485 	.word	0x0801a485
 801a4ec:	0801a485 	.word	0x0801a485
 801a4f0:	0801a5ff 	.word	0x0801a5ff
 801a4f4:	682b      	ldr	r3, [r5, #0]
 801a4f6:	1d1a      	adds	r2, r3, #4
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	602a      	str	r2, [r5, #0]
 801a4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a504:	2301      	movs	r3, #1
 801a506:	e0a3      	b.n	801a650 <_printf_i+0x1f4>
 801a508:	6820      	ldr	r0, [r4, #0]
 801a50a:	6829      	ldr	r1, [r5, #0]
 801a50c:	0606      	lsls	r6, r0, #24
 801a50e:	f101 0304 	add.w	r3, r1, #4
 801a512:	d50a      	bpl.n	801a52a <_printf_i+0xce>
 801a514:	680e      	ldr	r6, [r1, #0]
 801a516:	602b      	str	r3, [r5, #0]
 801a518:	2e00      	cmp	r6, #0
 801a51a:	da03      	bge.n	801a524 <_printf_i+0xc8>
 801a51c:	232d      	movs	r3, #45	; 0x2d
 801a51e:	4276      	negs	r6, r6
 801a520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a524:	485e      	ldr	r0, [pc, #376]	; (801a6a0 <_printf_i+0x244>)
 801a526:	230a      	movs	r3, #10
 801a528:	e019      	b.n	801a55e <_printf_i+0x102>
 801a52a:	680e      	ldr	r6, [r1, #0]
 801a52c:	602b      	str	r3, [r5, #0]
 801a52e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a532:	bf18      	it	ne
 801a534:	b236      	sxthne	r6, r6
 801a536:	e7ef      	b.n	801a518 <_printf_i+0xbc>
 801a538:	682b      	ldr	r3, [r5, #0]
 801a53a:	6820      	ldr	r0, [r4, #0]
 801a53c:	1d19      	adds	r1, r3, #4
 801a53e:	6029      	str	r1, [r5, #0]
 801a540:	0601      	lsls	r1, r0, #24
 801a542:	d501      	bpl.n	801a548 <_printf_i+0xec>
 801a544:	681e      	ldr	r6, [r3, #0]
 801a546:	e002      	b.n	801a54e <_printf_i+0xf2>
 801a548:	0646      	lsls	r6, r0, #25
 801a54a:	d5fb      	bpl.n	801a544 <_printf_i+0xe8>
 801a54c:	881e      	ldrh	r6, [r3, #0]
 801a54e:	4854      	ldr	r0, [pc, #336]	; (801a6a0 <_printf_i+0x244>)
 801a550:	2f6f      	cmp	r7, #111	; 0x6f
 801a552:	bf0c      	ite	eq
 801a554:	2308      	moveq	r3, #8
 801a556:	230a      	movne	r3, #10
 801a558:	2100      	movs	r1, #0
 801a55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a55e:	6865      	ldr	r5, [r4, #4]
 801a560:	60a5      	str	r5, [r4, #8]
 801a562:	2d00      	cmp	r5, #0
 801a564:	bfa2      	ittt	ge
 801a566:	6821      	ldrge	r1, [r4, #0]
 801a568:	f021 0104 	bicge.w	r1, r1, #4
 801a56c:	6021      	strge	r1, [r4, #0]
 801a56e:	b90e      	cbnz	r6, 801a574 <_printf_i+0x118>
 801a570:	2d00      	cmp	r5, #0
 801a572:	d04d      	beq.n	801a610 <_printf_i+0x1b4>
 801a574:	4615      	mov	r5, r2
 801a576:	fbb6 f1f3 	udiv	r1, r6, r3
 801a57a:	fb03 6711 	mls	r7, r3, r1, r6
 801a57e:	5dc7      	ldrb	r7, [r0, r7]
 801a580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a584:	4637      	mov	r7, r6
 801a586:	42bb      	cmp	r3, r7
 801a588:	460e      	mov	r6, r1
 801a58a:	d9f4      	bls.n	801a576 <_printf_i+0x11a>
 801a58c:	2b08      	cmp	r3, #8
 801a58e:	d10b      	bne.n	801a5a8 <_printf_i+0x14c>
 801a590:	6823      	ldr	r3, [r4, #0]
 801a592:	07de      	lsls	r6, r3, #31
 801a594:	d508      	bpl.n	801a5a8 <_printf_i+0x14c>
 801a596:	6923      	ldr	r3, [r4, #16]
 801a598:	6861      	ldr	r1, [r4, #4]
 801a59a:	4299      	cmp	r1, r3
 801a59c:	bfde      	ittt	le
 801a59e:	2330      	movle	r3, #48	; 0x30
 801a5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a5a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a5a8:	1b52      	subs	r2, r2, r5
 801a5aa:	6122      	str	r2, [r4, #16]
 801a5ac:	f8cd a000 	str.w	sl, [sp]
 801a5b0:	464b      	mov	r3, r9
 801a5b2:	aa03      	add	r2, sp, #12
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	f7ff fee2 	bl	801a380 <_printf_common>
 801a5bc:	3001      	adds	r0, #1
 801a5be:	d14c      	bne.n	801a65a <_printf_i+0x1fe>
 801a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a5c4:	b004      	add	sp, #16
 801a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5ca:	4835      	ldr	r0, [pc, #212]	; (801a6a0 <_printf_i+0x244>)
 801a5cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a5d0:	6829      	ldr	r1, [r5, #0]
 801a5d2:	6823      	ldr	r3, [r4, #0]
 801a5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a5d8:	6029      	str	r1, [r5, #0]
 801a5da:	061d      	lsls	r5, r3, #24
 801a5dc:	d514      	bpl.n	801a608 <_printf_i+0x1ac>
 801a5de:	07df      	lsls	r7, r3, #31
 801a5e0:	bf44      	itt	mi
 801a5e2:	f043 0320 	orrmi.w	r3, r3, #32
 801a5e6:	6023      	strmi	r3, [r4, #0]
 801a5e8:	b91e      	cbnz	r6, 801a5f2 <_printf_i+0x196>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	f023 0320 	bic.w	r3, r3, #32
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	2310      	movs	r3, #16
 801a5f4:	e7b0      	b.n	801a558 <_printf_i+0xfc>
 801a5f6:	6823      	ldr	r3, [r4, #0]
 801a5f8:	f043 0320 	orr.w	r3, r3, #32
 801a5fc:	6023      	str	r3, [r4, #0]
 801a5fe:	2378      	movs	r3, #120	; 0x78
 801a600:	4828      	ldr	r0, [pc, #160]	; (801a6a4 <_printf_i+0x248>)
 801a602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a606:	e7e3      	b.n	801a5d0 <_printf_i+0x174>
 801a608:	0659      	lsls	r1, r3, #25
 801a60a:	bf48      	it	mi
 801a60c:	b2b6      	uxthmi	r6, r6
 801a60e:	e7e6      	b.n	801a5de <_printf_i+0x182>
 801a610:	4615      	mov	r5, r2
 801a612:	e7bb      	b.n	801a58c <_printf_i+0x130>
 801a614:	682b      	ldr	r3, [r5, #0]
 801a616:	6826      	ldr	r6, [r4, #0]
 801a618:	6961      	ldr	r1, [r4, #20]
 801a61a:	1d18      	adds	r0, r3, #4
 801a61c:	6028      	str	r0, [r5, #0]
 801a61e:	0635      	lsls	r5, r6, #24
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	d501      	bpl.n	801a628 <_printf_i+0x1cc>
 801a624:	6019      	str	r1, [r3, #0]
 801a626:	e002      	b.n	801a62e <_printf_i+0x1d2>
 801a628:	0670      	lsls	r0, r6, #25
 801a62a:	d5fb      	bpl.n	801a624 <_printf_i+0x1c8>
 801a62c:	8019      	strh	r1, [r3, #0]
 801a62e:	2300      	movs	r3, #0
 801a630:	6123      	str	r3, [r4, #16]
 801a632:	4615      	mov	r5, r2
 801a634:	e7ba      	b.n	801a5ac <_printf_i+0x150>
 801a636:	682b      	ldr	r3, [r5, #0]
 801a638:	1d1a      	adds	r2, r3, #4
 801a63a:	602a      	str	r2, [r5, #0]
 801a63c:	681d      	ldr	r5, [r3, #0]
 801a63e:	6862      	ldr	r2, [r4, #4]
 801a640:	2100      	movs	r1, #0
 801a642:	4628      	mov	r0, r5
 801a644:	f7e5 fd9c 	bl	8000180 <memchr>
 801a648:	b108      	cbz	r0, 801a64e <_printf_i+0x1f2>
 801a64a:	1b40      	subs	r0, r0, r5
 801a64c:	6060      	str	r0, [r4, #4]
 801a64e:	6863      	ldr	r3, [r4, #4]
 801a650:	6123      	str	r3, [r4, #16]
 801a652:	2300      	movs	r3, #0
 801a654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a658:	e7a8      	b.n	801a5ac <_printf_i+0x150>
 801a65a:	6923      	ldr	r3, [r4, #16]
 801a65c:	462a      	mov	r2, r5
 801a65e:	4649      	mov	r1, r9
 801a660:	4640      	mov	r0, r8
 801a662:	47d0      	blx	sl
 801a664:	3001      	adds	r0, #1
 801a666:	d0ab      	beq.n	801a5c0 <_printf_i+0x164>
 801a668:	6823      	ldr	r3, [r4, #0]
 801a66a:	079b      	lsls	r3, r3, #30
 801a66c:	d413      	bmi.n	801a696 <_printf_i+0x23a>
 801a66e:	68e0      	ldr	r0, [r4, #12]
 801a670:	9b03      	ldr	r3, [sp, #12]
 801a672:	4298      	cmp	r0, r3
 801a674:	bfb8      	it	lt
 801a676:	4618      	movlt	r0, r3
 801a678:	e7a4      	b.n	801a5c4 <_printf_i+0x168>
 801a67a:	2301      	movs	r3, #1
 801a67c:	4632      	mov	r2, r6
 801a67e:	4649      	mov	r1, r9
 801a680:	4640      	mov	r0, r8
 801a682:	47d0      	blx	sl
 801a684:	3001      	adds	r0, #1
 801a686:	d09b      	beq.n	801a5c0 <_printf_i+0x164>
 801a688:	3501      	adds	r5, #1
 801a68a:	68e3      	ldr	r3, [r4, #12]
 801a68c:	9903      	ldr	r1, [sp, #12]
 801a68e:	1a5b      	subs	r3, r3, r1
 801a690:	42ab      	cmp	r3, r5
 801a692:	dcf2      	bgt.n	801a67a <_printf_i+0x21e>
 801a694:	e7eb      	b.n	801a66e <_printf_i+0x212>
 801a696:	2500      	movs	r5, #0
 801a698:	f104 0619 	add.w	r6, r4, #25
 801a69c:	e7f5      	b.n	801a68a <_printf_i+0x22e>
 801a69e:	bf00      	nop
 801a6a0:	0801ac51 	.word	0x0801ac51
 801a6a4:	0801ac62 	.word	0x0801ac62

0801a6a8 <_putc_r>:
 801a6a8:	b570      	push	{r4, r5, r6, lr}
 801a6aa:	460d      	mov	r5, r1
 801a6ac:	4614      	mov	r4, r2
 801a6ae:	4606      	mov	r6, r0
 801a6b0:	b118      	cbz	r0, 801a6ba <_putc_r+0x12>
 801a6b2:	6983      	ldr	r3, [r0, #24]
 801a6b4:	b90b      	cbnz	r3, 801a6ba <_putc_r+0x12>
 801a6b6:	f7ff fb23 	bl	8019d00 <__sinit>
 801a6ba:	4b1c      	ldr	r3, [pc, #112]	; (801a72c <_putc_r+0x84>)
 801a6bc:	429c      	cmp	r4, r3
 801a6be:	d124      	bne.n	801a70a <_putc_r+0x62>
 801a6c0:	6874      	ldr	r4, [r6, #4]
 801a6c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6c4:	07d8      	lsls	r0, r3, #31
 801a6c6:	d405      	bmi.n	801a6d4 <_putc_r+0x2c>
 801a6c8:	89a3      	ldrh	r3, [r4, #12]
 801a6ca:	0599      	lsls	r1, r3, #22
 801a6cc:	d402      	bmi.n	801a6d4 <_putc_r+0x2c>
 801a6ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6d0:	f7ff fbb4 	bl	8019e3c <__retarget_lock_acquire_recursive>
 801a6d4:	68a3      	ldr	r3, [r4, #8]
 801a6d6:	3b01      	subs	r3, #1
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	60a3      	str	r3, [r4, #8]
 801a6dc:	da05      	bge.n	801a6ea <_putc_r+0x42>
 801a6de:	69a2      	ldr	r2, [r4, #24]
 801a6e0:	4293      	cmp	r3, r2
 801a6e2:	db1c      	blt.n	801a71e <_putc_r+0x76>
 801a6e4:	b2eb      	uxtb	r3, r5
 801a6e6:	2b0a      	cmp	r3, #10
 801a6e8:	d019      	beq.n	801a71e <_putc_r+0x76>
 801a6ea:	6823      	ldr	r3, [r4, #0]
 801a6ec:	1c5a      	adds	r2, r3, #1
 801a6ee:	6022      	str	r2, [r4, #0]
 801a6f0:	701d      	strb	r5, [r3, #0]
 801a6f2:	b2ed      	uxtb	r5, r5
 801a6f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6f6:	07da      	lsls	r2, r3, #31
 801a6f8:	d405      	bmi.n	801a706 <_putc_r+0x5e>
 801a6fa:	89a3      	ldrh	r3, [r4, #12]
 801a6fc:	059b      	lsls	r3, r3, #22
 801a6fe:	d402      	bmi.n	801a706 <_putc_r+0x5e>
 801a700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a702:	f7ff fb9c 	bl	8019e3e <__retarget_lock_release_recursive>
 801a706:	4628      	mov	r0, r5
 801a708:	bd70      	pop	{r4, r5, r6, pc}
 801a70a:	4b09      	ldr	r3, [pc, #36]	; (801a730 <_putc_r+0x88>)
 801a70c:	429c      	cmp	r4, r3
 801a70e:	d101      	bne.n	801a714 <_putc_r+0x6c>
 801a710:	68b4      	ldr	r4, [r6, #8]
 801a712:	e7d6      	b.n	801a6c2 <_putc_r+0x1a>
 801a714:	4b07      	ldr	r3, [pc, #28]	; (801a734 <_putc_r+0x8c>)
 801a716:	429c      	cmp	r4, r3
 801a718:	bf08      	it	eq
 801a71a:	68f4      	ldreq	r4, [r6, #12]
 801a71c:	e7d1      	b.n	801a6c2 <_putc_r+0x1a>
 801a71e:	4629      	mov	r1, r5
 801a720:	4622      	mov	r2, r4
 801a722:	4630      	mov	r0, r6
 801a724:	f7ff f912 	bl	801994c <__swbuf_r>
 801a728:	4605      	mov	r5, r0
 801a72a:	e7e3      	b.n	801a6f4 <_putc_r+0x4c>
 801a72c:	0801ac00 	.word	0x0801ac00
 801a730:	0801ac20 	.word	0x0801ac20
 801a734:	0801abe0 	.word	0x0801abe0

0801a738 <_sbrk_r>:
 801a738:	b538      	push	{r3, r4, r5, lr}
 801a73a:	4d06      	ldr	r5, [pc, #24]	; (801a754 <_sbrk_r+0x1c>)
 801a73c:	2300      	movs	r3, #0
 801a73e:	4604      	mov	r4, r0
 801a740:	4608      	mov	r0, r1
 801a742:	602b      	str	r3, [r5, #0]
 801a744:	f7e6 fd4c 	bl	80011e0 <_sbrk>
 801a748:	1c43      	adds	r3, r0, #1
 801a74a:	d102      	bne.n	801a752 <_sbrk_r+0x1a>
 801a74c:	682b      	ldr	r3, [r5, #0]
 801a74e:	b103      	cbz	r3, 801a752 <_sbrk_r+0x1a>
 801a750:	6023      	str	r3, [r4, #0]
 801a752:	bd38      	pop	{r3, r4, r5, pc}
 801a754:	20008660 	.word	0x20008660

0801a758 <__sread>:
 801a758:	b510      	push	{r4, lr}
 801a75a:	460c      	mov	r4, r1
 801a75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a760:	f000 f8a0 	bl	801a8a4 <_read_r>
 801a764:	2800      	cmp	r0, #0
 801a766:	bfab      	itete	ge
 801a768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a76a:	89a3      	ldrhlt	r3, [r4, #12]
 801a76c:	181b      	addge	r3, r3, r0
 801a76e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a772:	bfac      	ite	ge
 801a774:	6563      	strge	r3, [r4, #84]	; 0x54
 801a776:	81a3      	strhlt	r3, [r4, #12]
 801a778:	bd10      	pop	{r4, pc}

0801a77a <__swrite>:
 801a77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a77e:	461f      	mov	r7, r3
 801a780:	898b      	ldrh	r3, [r1, #12]
 801a782:	05db      	lsls	r3, r3, #23
 801a784:	4605      	mov	r5, r0
 801a786:	460c      	mov	r4, r1
 801a788:	4616      	mov	r6, r2
 801a78a:	d505      	bpl.n	801a798 <__swrite+0x1e>
 801a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a790:	2302      	movs	r3, #2
 801a792:	2200      	movs	r2, #0
 801a794:	f000 f868 	bl	801a868 <_lseek_r>
 801a798:	89a3      	ldrh	r3, [r4, #12]
 801a79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a79e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a7a2:	81a3      	strh	r3, [r4, #12]
 801a7a4:	4632      	mov	r2, r6
 801a7a6:	463b      	mov	r3, r7
 801a7a8:	4628      	mov	r0, r5
 801a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ae:	f000 b817 	b.w	801a7e0 <_write_r>

0801a7b2 <__sseek>:
 801a7b2:	b510      	push	{r4, lr}
 801a7b4:	460c      	mov	r4, r1
 801a7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7ba:	f000 f855 	bl	801a868 <_lseek_r>
 801a7be:	1c43      	adds	r3, r0, #1
 801a7c0:	89a3      	ldrh	r3, [r4, #12]
 801a7c2:	bf15      	itete	ne
 801a7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a7ce:	81a3      	strheq	r3, [r4, #12]
 801a7d0:	bf18      	it	ne
 801a7d2:	81a3      	strhne	r3, [r4, #12]
 801a7d4:	bd10      	pop	{r4, pc}

0801a7d6 <__sclose>:
 801a7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7da:	f000 b813 	b.w	801a804 <_close_r>
	...

0801a7e0 <_write_r>:
 801a7e0:	b538      	push	{r3, r4, r5, lr}
 801a7e2:	4d07      	ldr	r5, [pc, #28]	; (801a800 <_write_r+0x20>)
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	4608      	mov	r0, r1
 801a7e8:	4611      	mov	r1, r2
 801a7ea:	2200      	movs	r2, #0
 801a7ec:	602a      	str	r2, [r5, #0]
 801a7ee:	461a      	mov	r2, r3
 801a7f0:	f7e6 f96f 	bl	8000ad2 <_write>
 801a7f4:	1c43      	adds	r3, r0, #1
 801a7f6:	d102      	bne.n	801a7fe <_write_r+0x1e>
 801a7f8:	682b      	ldr	r3, [r5, #0]
 801a7fa:	b103      	cbz	r3, 801a7fe <_write_r+0x1e>
 801a7fc:	6023      	str	r3, [r4, #0]
 801a7fe:	bd38      	pop	{r3, r4, r5, pc}
 801a800:	20008660 	.word	0x20008660

0801a804 <_close_r>:
 801a804:	b538      	push	{r3, r4, r5, lr}
 801a806:	4d06      	ldr	r5, [pc, #24]	; (801a820 <_close_r+0x1c>)
 801a808:	2300      	movs	r3, #0
 801a80a:	4604      	mov	r4, r0
 801a80c:	4608      	mov	r0, r1
 801a80e:	602b      	str	r3, [r5, #0]
 801a810:	f7e6 fcb1 	bl	8001176 <_close>
 801a814:	1c43      	adds	r3, r0, #1
 801a816:	d102      	bne.n	801a81e <_close_r+0x1a>
 801a818:	682b      	ldr	r3, [r5, #0]
 801a81a:	b103      	cbz	r3, 801a81e <_close_r+0x1a>
 801a81c:	6023      	str	r3, [r4, #0]
 801a81e:	bd38      	pop	{r3, r4, r5, pc}
 801a820:	20008660 	.word	0x20008660

0801a824 <_fstat_r>:
 801a824:	b538      	push	{r3, r4, r5, lr}
 801a826:	4d07      	ldr	r5, [pc, #28]	; (801a844 <_fstat_r+0x20>)
 801a828:	2300      	movs	r3, #0
 801a82a:	4604      	mov	r4, r0
 801a82c:	4608      	mov	r0, r1
 801a82e:	4611      	mov	r1, r2
 801a830:	602b      	str	r3, [r5, #0]
 801a832:	f7e6 fcac 	bl	800118e <_fstat>
 801a836:	1c43      	adds	r3, r0, #1
 801a838:	d102      	bne.n	801a840 <_fstat_r+0x1c>
 801a83a:	682b      	ldr	r3, [r5, #0]
 801a83c:	b103      	cbz	r3, 801a840 <_fstat_r+0x1c>
 801a83e:	6023      	str	r3, [r4, #0]
 801a840:	bd38      	pop	{r3, r4, r5, pc}
 801a842:	bf00      	nop
 801a844:	20008660 	.word	0x20008660

0801a848 <_isatty_r>:
 801a848:	b538      	push	{r3, r4, r5, lr}
 801a84a:	4d06      	ldr	r5, [pc, #24]	; (801a864 <_isatty_r+0x1c>)
 801a84c:	2300      	movs	r3, #0
 801a84e:	4604      	mov	r4, r0
 801a850:	4608      	mov	r0, r1
 801a852:	602b      	str	r3, [r5, #0]
 801a854:	f7e6 fcab 	bl	80011ae <_isatty>
 801a858:	1c43      	adds	r3, r0, #1
 801a85a:	d102      	bne.n	801a862 <_isatty_r+0x1a>
 801a85c:	682b      	ldr	r3, [r5, #0]
 801a85e:	b103      	cbz	r3, 801a862 <_isatty_r+0x1a>
 801a860:	6023      	str	r3, [r4, #0]
 801a862:	bd38      	pop	{r3, r4, r5, pc}
 801a864:	20008660 	.word	0x20008660

0801a868 <_lseek_r>:
 801a868:	b538      	push	{r3, r4, r5, lr}
 801a86a:	4d07      	ldr	r5, [pc, #28]	; (801a888 <_lseek_r+0x20>)
 801a86c:	4604      	mov	r4, r0
 801a86e:	4608      	mov	r0, r1
 801a870:	4611      	mov	r1, r2
 801a872:	2200      	movs	r2, #0
 801a874:	602a      	str	r2, [r5, #0]
 801a876:	461a      	mov	r2, r3
 801a878:	f7e6 fca4 	bl	80011c4 <_lseek>
 801a87c:	1c43      	adds	r3, r0, #1
 801a87e:	d102      	bne.n	801a886 <_lseek_r+0x1e>
 801a880:	682b      	ldr	r3, [r5, #0]
 801a882:	b103      	cbz	r3, 801a886 <_lseek_r+0x1e>
 801a884:	6023      	str	r3, [r4, #0]
 801a886:	bd38      	pop	{r3, r4, r5, pc}
 801a888:	20008660 	.word	0x20008660

0801a88c <__malloc_lock>:
 801a88c:	4801      	ldr	r0, [pc, #4]	; (801a894 <__malloc_lock+0x8>)
 801a88e:	f7ff bad5 	b.w	8019e3c <__retarget_lock_acquire_recursive>
 801a892:	bf00      	nop
 801a894:	20008654 	.word	0x20008654

0801a898 <__malloc_unlock>:
 801a898:	4801      	ldr	r0, [pc, #4]	; (801a8a0 <__malloc_unlock+0x8>)
 801a89a:	f7ff bad0 	b.w	8019e3e <__retarget_lock_release_recursive>
 801a89e:	bf00      	nop
 801a8a0:	20008654 	.word	0x20008654

0801a8a4 <_read_r>:
 801a8a4:	b538      	push	{r3, r4, r5, lr}
 801a8a6:	4d07      	ldr	r5, [pc, #28]	; (801a8c4 <_read_r+0x20>)
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	4608      	mov	r0, r1
 801a8ac:	4611      	mov	r1, r2
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	602a      	str	r2, [r5, #0]
 801a8b2:	461a      	mov	r2, r3
 801a8b4:	f7e6 fc42 	bl	800113c <_read>
 801a8b8:	1c43      	adds	r3, r0, #1
 801a8ba:	d102      	bne.n	801a8c2 <_read_r+0x1e>
 801a8bc:	682b      	ldr	r3, [r5, #0]
 801a8be:	b103      	cbz	r3, 801a8c2 <_read_r+0x1e>
 801a8c0:	6023      	str	r3, [r4, #0]
 801a8c2:	bd38      	pop	{r3, r4, r5, pc}
 801a8c4:	20008660 	.word	0x20008660

0801a8c8 <_init>:
 801a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ca:	bf00      	nop
 801a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8ce:	bc08      	pop	{r3}
 801a8d0:	469e      	mov	lr, r3
 801a8d2:	4770      	bx	lr

0801a8d4 <_fini>:
 801a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8d6:	bf00      	nop
 801a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8da:	bc08      	pop	{r3}
 801a8dc:	469e      	mov	lr, r3
 801a8de:	4770      	bx	lr
