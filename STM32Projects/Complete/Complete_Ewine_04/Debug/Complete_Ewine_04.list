
Complete_Ewine_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027f64  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002784  080280a8  080280a8  000380a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802a82c  0802a82c  0003a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802a834  0802a834  0003a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802a838  0802a838  0003a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000280  20000008  0802a83c  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000288  0802aabc  00040288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000b0c  0802b33f  00040b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000b44  0802b374  00040b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00009f00  20000b58  0802b385  00040b58  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000aa58  0802b385  0004aa58  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040b55  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00050000  2**2
                  ALLOC
 15 .debug_info   0008752b  00000000  00000000  00040b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000bed3  00000000  00000000  000c80b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004a68  00000000  00000000  000d3f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004540  00000000  00000000  000d89f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003e297  00000000  00000000  000dcf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005ffef  00000000  00000000  0011b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00137828  00000000  00000000  0017b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  002b29de  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00014dc8  00000000  00000000  002b2a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b58 	.word	0x20000b58
 800015c:	00000000 	.word	0x00000000
 8000160:	0802808c 	.word	0x0802808c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b5c 	.word	0x20000b5c
 800017c:	0802808c 	.word	0x0802808c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <APPD_EnableCPU2+0x34>)
 8000f04:	1d3c      	adds	r4, r7, #4
 8000f06:	461d      	mov	r5, r3
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	c403      	stmia	r4!, {r0, r1}
 8000f12:	8022      	strh	r2, [r4, #0]
 8000f14:	3402      	adds	r4, #2
 8000f16:	0c13      	lsrs	r3, r2, #16
 8000f18:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f1a:	f021 fca7 	bl	802286c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f020 ff42 	bl	8021daa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	080280a8 	.word	0x080280a8

08000f34 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f42:	f023 0207 	bic.w	r2, r3, #7
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58000400 	.word	0x58000400

08000f60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	58000800 	.word	0x58000800

08000f88 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fa2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	cafecafe 	.word	0xcafecafe

08000fc4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001044:	d101      	bne.n	800104a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800106a:	d101      	bne.n	8001070 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LL_DBGMCU_GetDeviceID+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e0042000 	.word	0xe0042000

080010cc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <LL_DBGMCU_GetRevisionID+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	b29b      	uxth	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e0042000 	.word	0xe0042000

080010e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	615a      	str	r2, [r3, #20]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <LL_LPM_EnableSleep+0x1c>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <LL_LPM_EnableSleep+0x1c>)
 80011b6:	f023 0304 	bic.w	r3, r3, #4
 80011ba:	6113      	str	r3, [r2, #16]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	22ff      	movs	r2, #255	; 0xff
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	22ca      	movs	r2, #202	; 0xca
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2253      	movs	r2, #83	; 0x53
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 0207 	bic.w	r2, r3, #7
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <MX_APPE_Config+0x18>)
 8001232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001236:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001238:	f000 f824 	bl	8001284 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800123c:	f000 f864 	bl	8001308 <Config_HSE>

  return;
 8001240:	bf00      	nop
}
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58004000 	.word	0x58004000

08001248 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800124c:	f000 f870 	bl	8001330 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001250:	f000 f888 	bl	8001364 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001254:	4903      	ldr	r1, [pc, #12]	; (8001264 <MX_APPE_Init+0x1c>)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 fff4 	bl	8002244 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800125c:	f000 f890 	bl	8001380 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001260:	bf00      	nop
}
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000cc8 	.word	0x20000cc8

08001268 <Init_Smps>:

void Init_Smps(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800126c:	bf00      	nop
}
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <Init_Exti>:

void Init_Exti(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800127a:	2050      	movs	r0, #80	; 0x50
 800127c:	f7ff fe70 	bl	8000f60 <LL_EXTI_EnableIT_32_63>

  return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}

08001284 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001288:	f000 f804 	bl	8001294 <Reset_BackupDomain>

  Reset_IPCC();
 800128c:	f000 f81a 	bl	80012c4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001290:	bf00      	nop
}
 8001292:	bd80      	pop	{r7, pc}

08001294 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001298:	f7ff feca 	bl	8001030 <LL_RCC_IsActiveFlag_PINRST>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00d      	beq.n	80012be <Reset_BackupDomain+0x2a>
 80012a2:	f7ff fed8 	bl	8001056 <LL_RCC_IsActiveFlag_SFTRST>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80012ac:	f01a fcc2 	bl	801bc34 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80012b0:	f01a fcc0 	bl	801bc34 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80012b4:	f7ff fe9a 	bl	8000fec <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80012b8:	f7ff fea9 	bl	800100e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
}
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80012c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012cc:	f7ff fed6 	bl	800107c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80012d0:	213f      	movs	r1, #63	; 0x3f
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <Reset_IPCC+0x40>)
 80012d4:	f7ff ff4e 	bl	8001174 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80012d8:	213f      	movs	r1, #63	; 0x3f
 80012da:	480a      	ldr	r0, [pc, #40]	; (8001304 <Reset_IPCC+0x40>)
 80012dc:	f7ff ff58 	bl	8001190 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80012e0:	213f      	movs	r1, #63	; 0x3f
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <Reset_IPCC+0x40>)
 80012e4:	f7ff ff00 	bl	80010e8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80012e8:	213f      	movs	r1, #63	; 0x3f
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <Reset_IPCC+0x40>)
 80012ec:	f7ff ff1f 	bl	800112e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80012f0:	213f      	movs	r1, #63	; 0x3f
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <Reset_IPCC+0x40>)
 80012f4:	f7ff ff0a 	bl	800110c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80012f8:	213f      	movs	r1, #63	; 0x3f
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <Reset_IPCC+0x40>)
 80012fc:	f7ff ff29 	bl	8001152 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001300:	bf00      	nop
}
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58000c00 	.word	0x58000c00

08001308 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f021 fb60 	bl	80229d4 <OTP_Read>
 8001314:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe31 	bl	8000f88 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001326:	bf00      	nop
 8001328:	bf00      	nop
}
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <System_Init>:

static void System_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  Init_Smps();
 8001334:	f7ff ff98 	bl	8001268 <Init_Smps>

  Init_Exti();
 8001338:	f7ff ff9d 	bl	8001276 <Init_Exti>

  Init_Rtc();
 800133c:	f000 f802 	bl	8001344 <Init_Rtc>

  return;
 8001340:	bf00      	nop
}
 8001342:	bd80      	pop	{r7, pc}

08001344 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <Init_Rtc+0x1c>)
 800134a:	f7ff ff4c 	bl	80011e6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800134e:	2100      	movs	r1, #0
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <Init_Rtc+0x1c>)
 8001352:	f7ff ff58 	bl	8001206 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001356:	4802      	ldr	r0, [pc, #8]	; (8001360 <Init_Rtc+0x1c>)
 8001358:	f7ff ff38 	bl	80011cc <LL_RTC_EnableWriteProtection>

  return;
 800135c:	bf00      	nop
}
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40002800 	.word	0x40002800

08001364 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001368:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800136c:	f7ff fe2a 	bl	8000fc4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001370:	f023 fb86 	bl	8024a80 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fddd 	bl	8000f34 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800137a:	bf00      	nop
}
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001386:	f021 f8bb 	bl	8022500 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <appe_Tl_Init+0x50>)
 800138c:	2100      	movs	r1, #0
 800138e:	2008      	movs	r0, #8
 8001390:	f023 fcb4 	bl	8024cfc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <appe_Tl_Init+0x54>)
 8001396:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <appe_Tl_Init+0x58>)
 800139a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <appe_Tl_Init+0x5c>)
 80013a2:	f020 ff73 	bl	802228c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <appe_Tl_Init+0x60>)
 80013a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <appe_Tl_Init+0x64>)
 80013ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <appe_Tl_Init+0x68>)
 80013b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80013b2:	f240 533c 	movw	r3, #1340	; 0x53c
 80013b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f021 f9e1 	bl	8022784 <TL_MM_Init>

  TL_Enable();
 80013c2:	f021 f897 	bl	80224f4 <TL_Enable>

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080222c5 	.word	0x080222c5
 80013d4:	200007d8 	.word	0x200007d8
 80013d8:	080013ed 	.word	0x080013ed
 80013dc:	08001405 	.word	0x08001405
 80013e0:	200009f0 	.word	0x200009f0
 80013e4:	200008e4 	.word	0x200008e4
 80013e8:	2000029c 	.word	0x2000029c

080013ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013f6:	bf00      	nop
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	330b      	adds	r3, #11
 8001412:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800141e:	2b07      	cmp	r3, #7
 8001420:	f200 80d0 	bhi.w	80015c4 <APPE_SysUserEvtRx+0x1c0>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <APPE_SysUserEvtRx+0x28>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800144d 	.word	0x0800144d
 8001430:	080014df 	.word	0x080014df
 8001434:	08001501 	.word	0x08001501
 8001438:	080015c5 	.word	0x080015c5
 800143c:	08001545 	.word	0x08001545
 8001440:	08001569 	.word	0x08001569
 8001444:	08001585 	.word	0x08001585
 8001448:	080015a9 	.word	0x080015a9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4618      	mov	r0, r3
 8001452:	f020 fcd7 	bl	8021e04 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001456:	485e      	ldr	r0, [pc, #376]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001458:	f021 fa94 	bl	8022984 <DbgTraceGetFileName>
 800145c:	4601      	mov	r1, r0
 800145e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001462:	4a5c      	ldr	r2, [pc, #368]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001464:	485c      	ldr	r0, [pc, #368]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001466:	f024 fd5f 	bl	8025f28 <iprintf>
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	4619      	mov	r1, r3
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	461a      	mov	r2, r3
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	4859      	ldr	r0, [pc, #356]	; (80015dc <APPE_SysUserEvtRx+0x1d8>)
 8001476:	f024 fd57 	bl	8025f28 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800147a:	4855      	ldr	r0, [pc, #340]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800147c:	f021 fa82 	bl	8022984 <DbgTraceGetFileName>
 8001480:	4601      	mov	r1, r0
 8001482:	f240 1369 	movw	r3, #361	; 0x169
 8001486:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001488:	4853      	ldr	r0, [pc, #332]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 800148a:	f024 fd4d 	bl	8025f28 <iprintf>
 800148e:	7c3b      	ldrb	r3, [r7, #16]
 8001490:	4619      	mov	r1, r3
 8001492:	4853      	ldr	r0, [pc, #332]	; (80015e0 <APPE_SysUserEvtRx+0x1dc>)
 8001494:	f024 fd48 	bl	8025f28 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001498:	484d      	ldr	r0, [pc, #308]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800149a:	f021 fa73 	bl	8022984 <DbgTraceGetFileName>
 800149e:	4601      	mov	r1, r0
 80014a0:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80014a4:	4a4b      	ldr	r2, [pc, #300]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014a6:	484c      	ldr	r0, [pc, #304]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014a8:	f024 fd3e 	bl	8025f28 <iprintf>
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	4619      	mov	r1, r3
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	461a      	mov	r2, r3
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	484b      	ldr	r0, [pc, #300]	; (80015e4 <APPE_SysUserEvtRx+0x1e0>)
 80014b8:	f024 fd36 	bl	8025f28 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80014bc:	4844      	ldr	r0, [pc, #272]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80014be:	f021 fa61 	bl	8022984 <DbgTraceGetFileName>
 80014c2:	4601      	mov	r1, r0
 80014c4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014ca:	4843      	ldr	r0, [pc, #268]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014cc:	f024 fd2c 	bl	8025f28 <iprintf>
 80014d0:	4845      	ldr	r0, [pc, #276]	; (80015e8 <APPE_SysUserEvtRx+0x1e4>)
 80014d2:	f024 fd29 	bl	8025f28 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8e0 	bl	800169c <APPE_SysEvtReadyProcessing>
    break;
 80014dc:	e073      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80014de:	483c      	ldr	r0, [pc, #240]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80014e0:	f021 fa50 	bl	8022984 <DbgTraceGetFileName>
 80014e4:	4601      	mov	r1, r0
 80014e6:	f240 1371 	movw	r3, #369	; 0x171
 80014ea:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014ec:	483a      	ldr	r0, [pc, #232]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014ee:	f024 fd1b 	bl	8025f28 <iprintf>
 80014f2:	483e      	ldr	r0, [pc, #248]	; (80015ec <APPE_SysUserEvtRx+0x1e8>)
 80014f4:	f024 fd18 	bl	8025f28 <iprintf>
    APPE_SysEvtError(pPayload);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f885 	bl	8001608 <APPE_SysEvtError>
    break;
 80014fe:	e062      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001500:	4833      	ldr	r0, [pc, #204]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001502:	f021 fa3f 	bl	8022984 <DbgTraceGetFileName>
 8001506:	4601      	mov	r1, r0
 8001508:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 800150e:	4832      	ldr	r0, [pc, #200]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001510:	f024 fd0a 	bl	8025f28 <iprintf>
 8001514:	4836      	ldr	r0, [pc, #216]	; (80015f0 <APPE_SysUserEvtRx+0x1ec>)
 8001516:	f024 fda3 	bl	8026060 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800151a:	482d      	ldr	r0, [pc, #180]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800151c:	f021 fa32 	bl	8022984 <DbgTraceGetFileName>
 8001520:	4601      	mov	r1, r0
 8001522:	f240 1377 	movw	r3, #375	; 0x177
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001528:	482b      	ldr	r0, [pc, #172]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 800152a:	f024 fcfd 	bl	8025f28 <iprintf>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3302      	adds	r3, #2
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3302      	adds	r3, #2
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	482d      	ldr	r0, [pc, #180]	; (80015f4 <APPE_SysUserEvtRx+0x1f0>)
 800153e:	f024 fcf3 	bl	8025f28 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001542:	e040      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001546:	f021 fa1d 	bl	8022984 <DbgTraceGetFileName>
 800154a:	4601      	mov	r1, r0
 800154c:	f240 137d 	movw	r3, #381	; 0x17d
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001554:	f024 fce8 	bl	8025f28 <iprintf>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3302      	adds	r3, #2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <APPE_SysUserEvtRx+0x1f4>)
 8001562:	f024 fce1 	bl	8025f28 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001566:	e02e      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800156a:	f021 fa0b 	bl	8022984 <DbgTraceGetFileName>
 800156e:	4601      	mov	r1, r0
 8001570:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001578:	f024 fcd6 	bl	8025f28 <iprintf>
 800157c:	481f      	ldr	r0, [pc, #124]	; (80015fc <APPE_SysUserEvtRx+0x1f8>)
 800157e:	f024 fcd3 	bl	8025f28 <iprintf>
    break;
 8001582:	e020      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001586:	f021 f9fd 	bl	8022984 <DbgTraceGetFileName>
 800158a:	4601      	mov	r1, r0
 800158c:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001590:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001594:	f024 fcc8 	bl	8025f28 <iprintf>
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3302      	adds	r3, #2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <APPE_SysUserEvtRx+0x1fc>)
 80015a2:	f024 fcc1 	bl	8025f28 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80015a6:	e00e      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80015aa:	f021 f9eb 	bl	8022984 <DbgTraceGetFileName>
 80015ae:	4601      	mov	r1, r0
 80015b0:	f240 138b 	movw	r3, #395	; 0x18b
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80015b8:	f024 fcb6 	bl	8025f28 <iprintf>
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <APPE_SysUserEvtRx+0x200>)
 80015be:	f024 fcb3 	bl	8025f28 <iprintf>
    break;
 80015c2:	e000      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80015c4:	bf00      	nop
  }

  return;
 80015c6:	bf00      	nop
}
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	080280c4 	.word	0x080280c4
 80015d4:	0802a258 	.word	0x0802a258
 80015d8:	080280dc 	.word	0x080280dc
 80015dc:	080280f0 	.word	0x080280f0
 80015e0:	08028114 	.word	0x08028114
 80015e4:	08028130 	.word	0x08028130
 80015e8:	08028148 	.word	0x08028148
 80015ec:	08028168 	.word	0x08028168
 80015f0:	0802818c 	.word	0x0802818c
 80015f4:	080281dc 	.word	0x080281dc
 80015f8:	08028204 	.word	0x08028204
 80015fc:	08028240 	.word	0x08028240
 8001600:	08028264 	.word	0x08028264
 8001604:	080282a0 	.word	0x080282a0

08001608 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	330b      	adds	r3, #11
 8001616:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3302      	adds	r3, #2
 800161c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001620:	f021 f9b0 	bl	8022984 <DbgTraceGetFileName>
 8001624:	4601      	mov	r1, r0
 8001626:	f240 13a3 	movw	r3, #419	; 0x1a3
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <APPE_SysEvtError+0x80>)
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <APPE_SysEvtError+0x84>)
 800162e:	f024 fc7b 	bl	8025f28 <iprintf>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <APPE_SysEvtError+0x88>)
 800163a:	f024 fc75 	bl	8025f28 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001648:	f021 f99c 	bl	8022984 <DbgTraceGetFileName>
 800164c:	4601      	mov	r1, r0
 800164e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <APPE_SysEvtError+0x80>)
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <APPE_SysEvtError+0x84>)
 8001656:	f024 fc67 	bl	8025f28 <iprintf>
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <APPE_SysEvtError+0x8c>)
 800165c:	f024 fd00 	bl	8026060 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001660:	e00d      	b.n	800167e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001664:	f021 f98e 	bl	8022984 <DbgTraceGetFileName>
 8001668:	4601      	mov	r1, r0
 800166a:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <APPE_SysEvtError+0x80>)
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <APPE_SysEvtError+0x84>)
 8001672:	f024 fc59 	bl	8025f28 <iprintf>
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <APPE_SysEvtError+0x90>)
 8001678:	f024 fcf2 	bl	8026060 <puts>
  return;
 800167c:	bf00      	nop
}
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	080280c4 	.word	0x080280c4
 8001688:	0802a26c 	.word	0x0802a26c
 800168c:	080280dc 	.word	0x080280dc
 8001690:	080282c4 	.word	0x080282c4
 8001694:	080282f4 	.word	0x080282f4
 8001698:	08028330 	.word	0x08028330

0800169c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	330b      	adds	r3, #11
 80016c0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3302      	adds	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d146      	bne.n	800175e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80016d0:	4836      	ldr	r0, [pc, #216]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 80016d2:	f021 f957 	bl	8022984 <DbgTraceGetFileName>
 80016d6:	4601      	mov	r1, r0
 80016d8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 80016de:	4835      	ldr	r0, [pc, #212]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 80016e0:	f024 fc22 	bl	8025f28 <iprintf>
 80016e4:	4834      	ldr	r0, [pc, #208]	; (80017b8 <APPE_SysEvtReadyProcessing+0x11c>)
 80016e6:	f024 fcbb 	bl	8026060 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016ea:	f7ff fc07 	bl	8000efc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016ee:	230f      	movs	r3, #15
 80016f0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016f2:	237f      	movs	r3, #127	; 0x7f
 80016f4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016f6:	f7ff fce9 	bl	80010cc <LL_DBGMCU_GetRevisionID>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80016fc:	482b      	ldr	r0, [pc, #172]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 80016fe:	f021 f941 	bl	8022984 <DbgTraceGetFileName>
 8001702:	4601      	mov	r1, r0
 8001704:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 8001708:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 800170a:	482a      	ldr	r0, [pc, #168]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 800170c:	f024 fc0c 	bl	8025f28 <iprintf>
 8001710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001712:	482a      	ldr	r0, [pc, #168]	; (80017bc <APPE_SysEvtReadyProcessing+0x120>)
 8001714:	f024 fc08 	bl	8025f28 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	b29b      	uxth	r3, r3
 800171c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800171e:	f7ff fcc7 	bl	80010b0 <LL_DBGMCU_GetDeviceID>
 8001722:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 8001726:	f021 f92d 	bl	8022984 <DbgTraceGetFileName>
 800172a:	4601      	mov	r1, r0
 800172c:	f240 13df 	movw	r3, #479	; 0x1df
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001734:	f024 fbf8 	bl	8025f28 <iprintf>
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <APPE_SysEvtReadyProcessing+0x124>)
 800173c:	f024 fbf4 	bl	8025f28 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	b29b      	uxth	r3, r3
 8001744:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f020 fb44 	bl	8021dd8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001750:	f021 fa4a 	bl	8022be8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001754:	2100      	movs	r1, #0
 8001756:	2001      	movs	r0, #1
 8001758:	f023 f9a4 	bl	8024aa4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800175c:	e022      	b.n	80017a4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d110      	bne.n	8001788 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 8001768:	f021 f90c 	bl	8022984 <DbgTraceGetFileName>
 800176c:	4601      	mov	r1, r0
 800176e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001774:	480f      	ldr	r0, [pc, #60]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001776:	f024 fbd7 	bl	8025f28 <iprintf>
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <APPE_SysEvtReadyProcessing+0x128>)
 800177c:	f024 fbd4 	bl	8025f28 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  return;
 8001786:	e00d      	b.n	80017a4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 800178a:	f021 f8fb 	bl	8022984 <DbgTraceGetFileName>
 800178e:	4601      	mov	r1, r0
 8001790:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001798:	f024 fbc6 	bl	8025f28 <iprintf>
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <APPE_SysEvtReadyProcessing+0x12c>)
 800179e:	f024 fbc3 	bl	8025f28 <iprintf>
  return;
 80017a2:	bf00      	nop
}
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	080280c4 	.word	0x080280c4
 80017b0:	0802a280 	.word	0x0802a280
 80017b4:	080280dc 	.word	0x080280dc
 80017b8:	08028368 	.word	0x08028368
 80017bc:	08028384 	.word	0x08028384
 80017c0:	080283a8 	.word	0x080283a8
 80017c4:	080283c8 	.word	0x080283c8
 80017c8:	080283fc 	.word	0x080283fc

080017cc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f018 f872 	bl	80198bc <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d00a      	beq.n	80017fc <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80017e6:	f018 f881 	bl	80198ec <HAL_GetTickFreq>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f4:	e002      	b.n	80017fc <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80017f6:	f7ff fcd9 	bl	80011ac <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80017fa:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80017fc:	f018 f85e 	bl	80198bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f4      	bhi.n	80017f6 <HAL_Delay+0x2a>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800181a:	f04f 30ff 	mov.w	r0, #4294967295
 800181e:	f023 f971 	bl	8024b04 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800182a:	bf00      	nop
}
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f023 f95f 	bl	8024b04 <UTIL_SEQ_Run>

  return;
 8001846:	bf00      	nop
}
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001856:	2100      	movs	r1, #0
 8001858:	2008      	movs	r0, #8
 800185a:	f023 fa71 	bl	8024d40 <UTIL_SEQ_SetTask>
  return;
 800185e:	bf00      	nop
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800186e:	2002      	movs	r0, #2
 8001870:	f023 fad2 	bl	8024e18 <UTIL_SEQ_SetEvt>
  return;
 8001874:	bf00      	nop
}
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001884:	2002      	movs	r0, #2
 8001886:	f023 fae7 	bl	8024e58 <UTIL_SEQ_WaitEvt>
  return;
 800188a:	bf00      	nop
}
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <LL_AHB1_GRP1_EnableClock>:
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018c8:	2004      	movs	r0, #4
 80018ca:	f7ff ffe2 	bl	8001892 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff ffdf 	bl	8001892 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff ffdc 	bl	8001892 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	200b      	movs	r0, #11
 80018e0:	f018 f94b 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e4:	200b      	movs	r0, #11
 80018e6:	f018 f962 	bl	8019bae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	203a      	movs	r0, #58	; 0x3a
 80018f0:	f018 f943 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80018f4:	203a      	movs	r0, #58	; 0x3a
 80018f6:	f018 f95a 	bl	8019bae <HAL_NVIC_EnableIRQ>

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}

080018fe <LL_AHB2_GRP1_EnableClock>:
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800190c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4313      	orrs	r3, r2
 8001914:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001944:	2004      	movs	r0, #4
 8001946:	f7ff ffda 	bl	80018fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2002      	movs	r0, #2
 800194c:	f7ff ffd7 	bl	80018fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff ffd4 	bl	80018fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2008      	movs	r0, #8
 8001958:	f7ff ffd1 	bl	80018fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2108      	movs	r1, #8
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f018 ff00 	bl	801a768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2123      	movs	r1, #35	; 0x23
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <MX_GPIO_Init+0xe0>)
 800196e:	f018 fefb 	bl	801a768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8001972:	2308      	movs	r3, #8
 8001974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f018 fc87 	bl	801a29c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800198e:	2310      	movs	r3, #16
 8001990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001998:	2301      	movs	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	481c      	ldr	r0, [pc, #112]	; (8001a14 <MX_GPIO_Init+0xe4>)
 80019a2:	f018 fc7b 	bl	801a29c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80019a6:	2323      	movs	r3, #35	; 0x23
 80019a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <MX_GPIO_Init+0xe0>)
 80019bc:	f018 fc6e 	bl	801a29c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80019c0:	2303      	movs	r3, #3
 80019c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_GPIO_Init+0xe8>)
 80019d4:	f018 fc62 	bl	801a29c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2006      	movs	r0, #6
 80019de:	f018 f8cc 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019e2:	2006      	movs	r0, #6
 80019e4:	f018 f8e3 	bl	8019bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2007      	movs	r0, #7
 80019ee:	f018 f8c4 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019f2:	2007      	movs	r0, #7
 80019f4:	f018 f8db 	bl	8019bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	200a      	movs	r0, #10
 80019fe:	f018 f8bc 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a02:	200a      	movs	r0, #10
 8001a04:	f018 f8d3 	bl	8019bae <HAL_NVIC_EnableIRQ>

}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00

08001a1c <LL_EXTI_EnableIT_0_31>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a2a:	4905      	ldr	r1, [pc, #20]	; (8001a40 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	58000800 	.word	0x58000800

08001a44 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4904      	ldr	r1, [pc, #16]	; (8001a64 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]

}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	58000800 	.word	0x58000800

08001a68 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <ReadRtcSsrValue+0x3c>)
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <ReadRtcSsrValue+0x3c>)
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001a7e:	e005      	b.n	8001a8c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <ReadRtcSsrValue+0x3c>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1f5      	bne.n	8001a80 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001a94:	683b      	ldr	r3, [r7, #0]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40002800 	.word	0x40002800

08001aa8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	491d      	ldr	r1, [pc, #116]	; (8001b30 <LinkTimerAfter+0x88>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3315      	adds	r3, #21
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d009      	beq.n	8001ae6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <LinkTimerAfter+0x88>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3314      	adds	r3, #20
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4911      	ldr	r1, [pc, #68]	; (8001b30 <LinkTimerAfter+0x88>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3315      	adds	r3, #21
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <LinkTimerAfter+0x88>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3314      	adds	r3, #20
 8001b0a:	79ba      	ldrb	r2, [r7, #6]
 8001b0c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b0e:	79ba      	ldrb	r2, [r7, #6]
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <LinkTimerAfter+0x88>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3315      	adds	r3, #21
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	701a      	strb	r2, [r3, #0]

  return;
 8001b22:	bf00      	nop
}
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000b74 	.word	0x20000b74

08001b34 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <LinkTimerBefore+0xb8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	79ba      	ldrb	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d032      	beq.n	8001bb6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b50:	79ba      	ldrb	r2, [r7, #6]
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3314      	adds	r3, #20
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3315      	adds	r3, #21
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	491d      	ldr	r1, [pc, #116]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3315      	adds	r3, #21
 8001b88:	79ba      	ldrb	r2, [r7, #6]
 8001b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3314      	adds	r3, #20
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ba0:	79ba      	ldrb	r2, [r7, #6]
 8001ba2:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3314      	adds	r3, #20
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001bb4:	e014      	b.n	8001be0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bb6:	79fa      	ldrb	r2, [r7, #7]
 8001bb8:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3315      	adds	r3, #21
 8001bc6:	79ba      	ldrb	r2, [r7, #6]
 8001bc8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001bca:	79ba      	ldrb	r2, [r7, #6]
 8001bcc:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <LinkTimerBefore+0xbc>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3314      	adds	r3, #20
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	701a      	strb	r2, [r3, #0]
  return;
 8001bde:	bf00      	nop
}
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000c04 	.word	0x20000c04
 8001bf0:	20000b74 	.word	0x20000b74

08001bf4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <linkTimer+0x144>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d118      	bne.n	8001c3a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <linkTimer+0x144>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <linkTimer+0x148>)
 8001c10:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c12:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <linkTimer+0x144>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	4949      	ldr	r1, [pc, #292]	; (8001d40 <linkTimer+0x14c>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	3315      	adds	r3, #21
 8001c28:	2206      	movs	r2, #6
 8001c2a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c2c:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <linkTimer+0x150>)
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	81fb      	strh	r3, [r7, #14]
 8001c38:	e078      	b.n	8001d2c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c3a:	f000 f909 	bl	8001e50 <ReturnTimeElapsed>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	493e      	ldr	r1, [pc, #248]	; (8001d40 <linkTimer+0x14c>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3308      	adds	r3, #8
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	89fb      	ldrh	r3, [r7, #14]
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	4419      	add	r1, r3
 8001c5a:	4839      	ldr	r0, [pc, #228]	; (8001d40 <linkTimer+0x14c>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4403      	add	r3, r0
 8001c66:	3308      	adds	r3, #8
 8001c68:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	4934      	ldr	r1, [pc, #208]	; (8001d40 <linkTimer+0x14c>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	3308      	adds	r3, #8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <linkTimer+0x144>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	4a2e      	ldr	r2, [pc, #184]	; (8001d40 <linkTimer+0x14c>)
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	3308      	adds	r3, #8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d337      	bcc.n	8001d0c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <linkTimer+0x144>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ca2:	7b7a      	ldrb	r2, [r7, #13]
 8001ca4:	4926      	ldr	r1, [pc, #152]	; (8001d40 <linkTimer+0x14c>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3315      	adds	r3, #21
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001cb6:	e013      	b.n	8001ce0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001cb8:	7b7a      	ldrb	r2, [r7, #13]
 8001cba:	4921      	ldr	r1, [pc, #132]	; (8001d40 <linkTimer+0x14c>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3315      	adds	r3, #21
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001ccc:	7b7a      	ldrb	r2, [r7, #13]
 8001cce:	491c      	ldr	r1, [pc, #112]	; (8001d40 <linkTimer+0x14c>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3315      	adds	r3, #21
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ce0:	7b3b      	ldrb	r3, [r7, #12]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d00b      	beq.n	8001cfe <linkTimer+0x10a>
 8001ce6:	7b3a      	ldrb	r2, [r7, #12]
 8001ce8:	4915      	ldr	r1, [pc, #84]	; (8001d40 <linkTimer+0x14c>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d2dc      	bcs.n	8001cb8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001cfe:	7b7a      	ldrb	r2, [r7, #13]
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fecf 	bl	8001aa8 <LinkTimerAfter>
 8001d0a:	e00f      	b.n	8001d2c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <linkTimer+0x144>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff0c 	bl	8001b34 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <linkTimer+0x144>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <linkTimer+0x148>)
 8001d24:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <linkTimer+0x144>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000c04 	.word	0x20000c04
 8001d3c:	20000c05 	.word	0x20000c05
 8001d40:	20000b74 	.word	0x20000b74
 8001d44:	20000c08 	.word	0x20000c08

08001d48 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <UnlinkTimer+0xf8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d111      	bne.n	8001d88 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <UnlinkTimer+0xf8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <UnlinkTimer+0xfc>)
 8001d6c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <UnlinkTimer+0x100>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <UnlinkTimer+0xf8>)
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e03e      	b.n	8001e06 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	492f      	ldr	r1, [pc, #188]	; (8001e48 <UnlinkTimer+0x100>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3314      	adds	r3, #20
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	492a      	ldr	r1, [pc, #168]	; (8001e48 <UnlinkTimer+0x100>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3315      	adds	r3, #21
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001db0:	79f9      	ldrb	r1, [r7, #7]
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	4824      	ldr	r0, [pc, #144]	; (8001e48 <UnlinkTimer+0x100>)
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4403      	add	r3, r0
 8001dc0:	3315      	adds	r3, #21
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2d8      	uxtb	r0, r3
 8001dc6:	4920      	ldr	r1, [pc, #128]	; (8001e48 <UnlinkTimer+0x100>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3315      	adds	r3, #21
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d013      	beq.n	8001e06 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	7bba      	ldrb	r2, [r7, #14]
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <UnlinkTimer+0x100>)
 8001de4:	460b      	mov	r3, r1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	440b      	add	r3, r1
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4403      	add	r3, r0
 8001dee:	3314      	adds	r3, #20
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b2d8      	uxtb	r0, r3
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <UnlinkTimer+0x100>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3314      	adds	r3, #20
 8001e02:	4602      	mov	r2, r0
 8001e04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	490f      	ldr	r1, [pc, #60]	; (8001e48 <UnlinkTimer+0x100>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	330c      	adds	r3, #12
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <UnlinkTimer+0xf8>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d107      	bne.n	8001e34 <UnlinkTimer+0xec>
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <UnlinkTimer+0x104>)
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
}
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20000c04 	.word	0x20000c04
 8001e44:	20000c05 	.word	0x20000c05
 8001e48:	20000b74 	.word	0x20000b74
 8001e4c:	20000c08 	.word	0x20000c08

08001e50 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <ReturnTimeElapsed+0x70>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d026      	beq.n	8001eae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001e60:	f7ff fe02 	bl	8001a68 <ReadRtcSsrValue>
 8001e64:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <ReturnTimeElapsed+0x70>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d805      	bhi.n	8001e7c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <ReturnTimeElapsed+0x70>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e00a      	b.n	8001e92 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <ReturnTimeElapsed+0x74>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <ReturnTimeElapsed+0x70>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <ReturnTimeElapsed+0x78>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <ReturnTimeElapsed+0x7c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	40d3      	lsrs	r3, r2
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b29b      	uxth	r3, r3
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000c08 	.word	0x20000c08
 8001ec4:	20000c10 	.word	0x20000c10
 8001ec8:	20000c0e 	.word	0x20000c0e
 8001ecc:	20000c0d 	.word	0x20000c0d

08001ed0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d108      	bne.n	8001ef2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ee0:	f7ff fdc2 	bl	8001a68 <ReadRtcSsrValue>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <RestartWakeupCounter+0x9c>)
 8001ee8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001eea:	2003      	movs	r0, #3
 8001eec:	f017 fe87 	bl	8019bfe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001ef0:	e039      	b.n	8001f66 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d803      	bhi.n	8001f00 <RestartWakeupCounter+0x30>
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <RestartWakeupCounter+0xa0>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d002      	beq.n	8001f06 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f06:	bf00      	nop
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <RestartWakeupCounter+0xa4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f8      	beq.n	8001f08 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <RestartWakeupCounter+0xa4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <RestartWakeupCounter+0xa4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f26:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <RestartWakeupCounter+0xa8>)
 8001f2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f2e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f30:	2003      	movs	r0, #3
 8001f32:	f017 fe72 	bl	8019c1a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <RestartWakeupCounter+0xac>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <RestartWakeupCounter+0xac>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f46:	f7ff fd8f 	bl	8001a68 <ReadRtcSsrValue>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <RestartWakeupCounter+0x9c>)
 8001f4e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <RestartWakeupCounter+0xa4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <RestartWakeupCounter+0xa4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f5e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001f60:	f3af 8000 	nop.w
  return ;
 8001f64:	bf00      	nop
}
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000c08 	.word	0x20000c08
 8001f70:	20000c0d 	.word	0x20000c0d
 8001f74:	20000cc8 	.word	0x20000cc8
 8001f78:	58000800 	.word	0x58000800
 8001f7c:	40002800 	.word	0x40002800

08001f80 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001f86:	4b45      	ldr	r3, [pc, #276]	; (800209c <RescheduleTimerList+0x11c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d107      	bne.n	8001fa4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001f94:	bf00      	nop
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <RescheduleTimerList+0x120>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f8      	bne.n	8001f96 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fa4:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <RescheduleTimerList+0x120>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <RescheduleTimerList+0x120>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <RescheduleTimerList+0x124>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	493a      	ldr	r1, [pc, #232]	; (80020a8 <RescheduleTimerList+0x128>)
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3308      	adds	r3, #8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001fce:	f7ff ff3f 	bl	8001e50 <ReturnTimeElapsed>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d205      	bcs.n	8001fea <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <RescheduleTimerList+0x12c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e04d      	b.n	8002086 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <RescheduleTimerList+0x130>)
 8001fee:	8812      	ldrh	r2, [r2, #0]
 8001ff0:	b292      	uxth	r2, r2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d906      	bls.n	800200a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <RescheduleTimerList+0x130>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <RescheduleTimerList+0x12c>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e03d      	b.n	8002086 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	b29a      	uxth	r2, r3
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <RescheduleTimerList+0x12c>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800201a:	e034      	b.n	8002086 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	4922      	ldr	r1, [pc, #136]	; (80020a8 <RescheduleTimerList+0x128>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	3308      	adds	r3, #8
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	429a      	cmp	r2, r3
 8002032:	d20a      	bcs.n	800204a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	491c      	ldr	r1, [pc, #112]	; (80020a8 <RescheduleTimerList+0x128>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3308      	adds	r3, #8
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e013      	b.n	8002072 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <RescheduleTimerList+0x128>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3308      	adds	r3, #8
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	1ac9      	subs	r1, r1, r3
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <RescheduleTimerList+0x128>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4403      	add	r3, r0
 800206e:	3308      	adds	r3, #8
 8002070:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <RescheduleTimerList+0x128>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3315      	adds	r3, #21
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d1c7      	bne.n	800201c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff1e 	bl	8001ed0 <RestartWakeupCounter>

  return ;
 8002094:	bf00      	nop
}
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40002800 	.word	0x40002800
 80020a0:	20000cc8 	.word	0x20000cc8
 80020a4:	20000c04 	.word	0x20000c04
 80020a8:	20000b74 	.word	0x20000b74
 80020ac:	20000c0c 	.word	0x20000c0c
 80020b0:	20000c12 	.word	0x20000c12

080020b4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ba:	f3ef 8310 	mrs	r3, PRIMASK
 80020be:	617b      	str	r3, [r7, #20]
  return(result);
 80020c0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020c8:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	22ca      	movs	r2, #202	; 0xca
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2253      	movs	r2, #83	; 0x53
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80020e8:	4b52      	ldr	r3, [pc, #328]	; (8002234 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80020f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80020f4:	4950      	ldr	r1, [pc, #320]	; (8002238 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	330c      	adds	r3, #12
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d16e      	bne.n	80021e8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800210a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800210e:	494a      	ldr	r1, [pc, #296]	; (8002238 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800211e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002122:	4945      	ldr	r1, [pc, #276]	; (8002238 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3310      	adds	r3, #16
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04c      	beq.n	80021d8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800213e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002142:	493d      	ldr	r1, [pc, #244]	; (8002238 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	330d      	adds	r3, #13
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d124      	bne.n	80021a2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fdf2 	bl	8001d48 <UnlinkTimer>
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002170:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002174:	4930      	ldr	r1, [pc, #192]	; (8002238 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f9b8 	bl	8002500 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	22ca      	movs	r2, #202	; 0xca
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2253      	movs	r2, #83	; 0x53
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
 80021a0:	e012      	b.n	80021c8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f383 8810 	msr	PRIMASK, r3
}
 80021ac:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f920 	bl	80023f8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	22ca      	movs	r2, #202	; 0xca
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2253      	movs	r2, #83	; 0x53
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	4619      	mov	r1, r3
 80021d0:	69b8      	ldr	r0, [r7, #24]
 80021d2:	f000 fa1b 	bl	800260c <HW_TS_RTC_Int_AppNot>
 80021d6:	e022      	b.n	800221e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80021d8:	f7ff fed2 	bl	8001f80 <RescheduleTimerList>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f383 8810 	msr	PRIMASK, r3
}
 80021e6:	e01a      	b.n	800221e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021e8:	bf00      	nop
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f8      	beq.n	80021ea <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002208:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800220c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002226:	bf00      	nop
}
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000cc8 	.word	0x20000cc8
 8002234:	20000c04 	.word	0x20000c04
 8002238:	20000b74 	.word	0x20000b74
 800223c:	20000c0c 	.word	0x20000c0c
 8002240:	58000800 	.word	0x58000800

08002244 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002250:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <HW_TS_Init+0x188>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	22ca      	movs	r2, #202	; 0xca
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <HW_TS_Init+0x188>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2253      	movs	r2, #83	; 0x53
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002260:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <HW_TS_Init+0x18c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a5a      	ldr	r2, [pc, #360]	; (80023d0 <HW_TS_Init+0x18c>)
 8002266:	f043 0320 	orr.w	r3, r3, #32
 800226a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HW_TS_Init+0x18c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f1c3 0304 	rsb	r3, r3, #4
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HW_TS_Init+0x190>)
 8002280:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HW_TS_Init+0x18c>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800228a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800228e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d101      	bne.n	80022a6 <HW_TS_Init+0x62>
  {
    return 32U;
 80022a2:	2220      	movs	r2, #32
 80022a4:	e003      	b.n	80022ae <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	fab2 f282 	clz	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	40d3      	lsrs	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HW_TS_Init+0x194>)
 80022b8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80022ba:	4b45      	ldr	r3, [pc, #276]	; (80023d0 <HW_TS_Init+0x18c>)
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b44      	ldr	r3, [pc, #272]	; (80023dc <HW_TS_Init+0x198>)
 80022cc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HW_TS_Init+0x198>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <HW_TS_Init+0x194>)
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022e0:	4a3c      	ldr	r2, [pc, #240]	; (80023d4 <HW_TS_Init+0x190>)
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	40d3      	lsrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d904      	bls.n	80022fc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HW_TS_Init+0x19c>)
 80022f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e003      	b.n	8002304 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HW_TS_Init+0x19c>)
 8002302:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002304:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002308:	f7ff fb9c 	bl	8001a44 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800230c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002310:	f7ff fb84 	bl	8001a1c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d13d      	bne.n	8002396 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800231a:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HW_TS_Init+0x1a0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HW_TS_Init+0x1a4>)
 8002322:	f04f 32ff 	mov.w	r2, #4294967295
 8002326:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
 800232c:	e00c      	b.n	8002348 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800232e:	7ffa      	ldrb	r2, [r7, #31]
 8002330:	492e      	ldr	r1, [pc, #184]	; (80023ec <HW_TS_Init+0x1a8>)
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	330c      	adds	r3, #12
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	3301      	adds	r3, #1
 8002346:	77fb      	strb	r3, [r7, #31]
 8002348:	7ffb      	ldrb	r3, [r7, #31]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d9ef      	bls.n	800232e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HW_TS_Init+0x1ac>)
 8002350:	2206      	movs	r2, #6
 8002352:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HW_TS_Init+0x188>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HW_TS_Init+0x188>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002362:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HW_TS_Init+0x188>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HW_TS_Init+0x188>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002374:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HW_TS_Init+0x1b0>)
 8002378:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800237c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800237e:	2003      	movs	r0, #3
 8002380:	f017 fc4b 	bl	8019c1a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HW_TS_Init+0x188>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HW_TS_Init+0x188>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e009      	b.n	80023aa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HW_TS_Init+0x188>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f017 fc2a 	bl	8019bfe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HW_TS_Init+0x188>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80023b2:	2200      	movs	r2, #0
 80023b4:	2103      	movs	r1, #3
 80023b6:	2003      	movs	r0, #3
 80023b8:	f017 fbdf 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023bc:	2003      	movs	r0, #3
 80023be:	f017 fbf6 	bl	8019bae <HAL_NVIC_EnableIRQ>

  return;
 80023c2:	bf00      	nop
}
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000cc8 	.word	0x20000cc8
 80023d0:	40002800 	.word	0x40002800
 80023d4:	20000c0d 	.word	0x20000c0d
 80023d8:	20000c0e 	.word	0x20000c0e
 80023dc:	20000c10 	.word	0x20000c10
 80023e0:	20000c12 	.word	0x20000c12
 80023e4:	20000c0c 	.word	0x20000c0c
 80023e8:	20000c08 	.word	0x20000c08
 80023ec:	20000b74 	.word	0x20000b74
 80023f0:	20000c04 	.word	0x20000c04
 80023f4:	58000800 	.word	0x58000800

080023f8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002402:	f3ef 8310 	mrs	r3, PRIMASK
 8002406:	60fb      	str	r3, [r7, #12]
  return(result);
 8002408:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800240a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002410:	2003      	movs	r0, #3
 8002412:	f017 fbda 	bl	8019bca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	22ca      	movs	r2, #202	; 0xca
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2253      	movs	r2, #83	; 0x53
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	4930      	ldr	r1, [pc, #192]	; (80024ec <HW_TS_Stop+0xf4>)
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	330c      	adds	r3, #12
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d142      	bne.n	80024c4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fc80 	bl	8001d48 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HW_TS_Stop+0xf8>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d12f      	bne.n	80024b4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HW_TS_Stop+0xfc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002460:	d107      	bne.n	8002472 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002462:	bf00      	nop
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f8      	bne.n	8002464 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HW_TS_Stop+0xf0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002480:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002482:	bf00      	nop
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f8      	beq.n	8002484 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HW_TS_Stop+0xf0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HW_TS_Stop+0xf0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024a2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HW_TS_Stop+0x100>)
 80024a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024aa:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024ac:	2003      	movs	r0, #3
 80024ae:	f017 fbb4 	bl	8019c1a <HAL_NVIC_ClearPendingIRQ>
 80024b2:	e007      	b.n	80024c4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HW_TS_Stop+0x104>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	7cfa      	ldrb	r2, [r7, #19]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80024c0:	f7ff fd5e 	bl	8001f80 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HW_TS_Stop+0xf0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024cc:	2003      	movs	r0, #3
 80024ce:	f017 fb6e 	bl	8019bae <HAL_NVIC_EnableIRQ>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f383 8810 	msr	PRIMASK, r3
}
 80024dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024de:	bf00      	nop
}
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000cc8 	.word	0x20000cc8
 80024ec:	20000b74 	.word	0x20000b74
 80024f0:	20000c04 	.word	0x20000c04
 80024f4:	40002800 	.word	0x40002800
 80024f8:	58000800 	.word	0x58000800
 80024fc:	20000c05 	.word	0x20000c05

08002500 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	493b      	ldr	r1, [pc, #236]	; (80025fc <HW_TS_Start+0xfc>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	330c      	adds	r3, #12
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d103      	bne.n	800252c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff66 	bl	80023f8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252c:	f3ef 8310 	mrs	r3, PRIMASK
 8002530:	60fb      	str	r3, [r7, #12]
  return(result);
 8002532:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002536:	b672      	cpsid	i
}
 8002538:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800253a:	2003      	movs	r0, #3
 800253c:	f017 fb45 	bl	8019bca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HW_TS_Start+0x100>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22ca      	movs	r2, #202	; 0xca
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HW_TS_Start+0x100>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2253      	movs	r2, #83	; 0x53
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	492a      	ldr	r1, [pc, #168]	; (80025fc <HW_TS_Start+0xfc>)
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	330c      	adds	r3, #12
 8002560:	2202      	movs	r2, #2
 8002562:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002564:	79fa      	ldrb	r2, [r7, #7]
 8002566:	4925      	ldr	r1, [pc, #148]	; (80025fc <HW_TS_Start+0xfc>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3308      	adds	r3, #8
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	4920      	ldr	r1, [pc, #128]	; (80025fc <HW_TS_Start+0xfc>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3304      	adds	r3, #4
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb30 	bl	8001bf4 <linkTimer>
 8002594:	4603      	mov	r3, r0
 8002596:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HW_TS_Start+0x104>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HW_TS_Start+0x108>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	7c7a      	ldrb	r2, [r7, #17]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d002      	beq.n	80025b0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80025aa:	f7ff fce9 	bl	8001f80 <RescheduleTimerList>
 80025ae:	e013      	b.n	80025d8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	4912      	ldr	r1, [pc, #72]	; (80025fc <HW_TS_Start+0xfc>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	3308      	adds	r3, #8
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	8a7b      	ldrh	r3, [r7, #18]
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	1ac9      	subs	r1, r1, r3
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <HW_TS_Start+0xfc>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4403      	add	r3, r0
 80025d4:	3308      	adds	r3, #8
 80025d6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HW_TS_Start+0x100>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80025e0:	2003      	movs	r0, #3
 80025e2:	f017 fae4 	bl	8019bae <HAL_NVIC_EnableIRQ>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80025f2:	bf00      	nop
}
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000b74 	.word	0x20000b74
 8002600:	20000cc8 	.word	0x20000cc8
 8002604:	20000c04 	.word	0x20000c04
 8002608:	20000c05 	.word	0x20000c05

0800260c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	460b      	mov	r3, r1
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4798      	blx	r3

  return;
 800261e:	bf00      	nop
}
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_UART_RxCpltCallback+0x34>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d107      	bne.n	800264c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_UART_RxCpltCallback+0x38>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_UART_RxCpltCallback+0x38>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4798      	blx	r3
            }
            break;
 800264a:	e001      	b.n	8002650 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002650:	bf00      	nop
    }

    return;
 8002652:	bf00      	nop
}
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40013800 	.word	0x40013800
 8002660:	20000c14 	.word	0x20000c14

08002664 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_UART_TxCpltCallback+0x34>)
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_UART_TxCpltCallback+0x38>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_UART_TxCpltCallback+0x38>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4798      	blx	r3
            }
            break;
 8002686:	e001      	b.n	800268c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800268c:	bf00      	nop
    }

    return;
 800268e:	bf00      	nop
}
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40013800 	.word	0x40013800
 800269c:	20000c18 	.word	0x20000c18

080026a0 <LL_AHB2_GRP1_EnableClock>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4013      	ands	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	43db      	mvns	r3, r3
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271a:	4013      	ands	r3, r2
 800271c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <MX_I2C3_Init+0x78>)
 8002734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <MX_I2C3_Init+0x7c>)
 800273a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_I2C3_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002744:	2201      	movs	r2, #1
 8002746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_I2C3_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_I2C3_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002766:	480e      	ldr	r0, [pc, #56]	; (80027a0 <MX_I2C3_Init+0x74>)
 8002768:	f018 f878 	bl	801a85c <HAL_I2C_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002772:	f000 fa1b 	bl	8002bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002776:	2100      	movs	r1, #0
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <MX_I2C3_Init+0x74>)
 800277a:	f019 f839 	bl	801b7f0 <HAL_I2CEx_ConfigAnalogFilter>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002784:	f000 fa12 	bl	8002bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002788:	2100      	movs	r1, #0
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_I2C3_Init+0x74>)
 800278c:	f019 f87b 	bl	801b886 <HAL_I2CEx_ConfigDigitalFilter>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002796:	f000 fa09 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000c1c 	.word	0x20000c1c
 80027a4:	40005c00 	.word	0x40005c00
 80027a8:	00707cbb 	.word	0x00707cbb

080027ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b09c      	sub	sp, #112	; 0x70
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	2250      	movs	r2, #80	; 0x50
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f022 fe59 	bl	8025484 <memset>
  if(i2cHandle->Instance==I2C3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <HAL_I2C_MspInit+0xb0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d13a      	bne.n	8002852 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80027dc:	2308      	movs	r3, #8
 80027de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80027e0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4618      	mov	r0, r3
 80027ec:	f01a fd76 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027f6:	f000 f9d9 	bl	8002bac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff ff50 	bl	80026a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	2002      	movs	r0, #2
 8002802:	f7ff ff4d 	bl	80026a0 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280a:	2312      	movs	r3, #18
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002816:	2304      	movs	r3, #4
 8002818:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f017 fd3a 	bl	801a29c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282e:	2312      	movs	r3, #18
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800283a:	2304      	movs	r3, #4
 800283c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002842:	4619      	mov	r1, r3
 8002844:	4806      	ldr	r0, [pc, #24]	; (8002860 <HAL_I2C_MspInit+0xb4>)
 8002846:	f017 fd29 	bl	801a29c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800284a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800284e:	f7ff ff40 	bl	80026d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002852:	bf00      	nop
 8002854:	3770      	adds	r7, #112	; 0x70
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40005c00 	.word	0x40005c00
 8002860:	48000400 	.word	0x48000400

08002864 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_I2C_MspDeInit+0x38>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002876:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800287a:	f7ff ff43 	bl	8002704 <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f017 fe7a 	bl	801a57c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800288c:	4804      	ldr	r0, [pc, #16]	; (80028a0 <HAL_I2C_MspDeInit+0x3c>)
 800288e:	f017 fe75 	bl	801a57c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40005c00 	.word	0x40005c00
 80028a0:	48000400 	.word	0x48000400

080028a4 <LL_AHB3_GRP1_EnableClock>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_IPCC_Init+0x20>)
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <MX_IPCC_Init+0x24>)
 80028e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_IPCC_Init+0x20>)
 80028e4:	f019 f81c 	bl	801b920 <HAL_IPCC_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80028ee:	f000 f95d 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000c70 	.word	0x20000c70
 80028fc:	58000c00 	.word	0x58000c00

08002900 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_IPCC_MspInit+0x44>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002916:	f7ff ffc5 	bl	80028a4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	202c      	movs	r0, #44	; 0x2c
 8002920:	f017 f92b 	bl	8019b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002924:	202c      	movs	r0, #44	; 0x2c
 8002926:	f017 f942 	bl	8019bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	202d      	movs	r0, #45	; 0x2d
 8002930:	f017 f923 	bl	8019b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002934:	202d      	movs	r0, #45	; 0x2d
 8002936:	f017 f93a 	bl	8019bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	58000c00 	.word	0x58000c00

08002948 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002950:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002954:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002960:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002964:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002968:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002970:	e000      	b.n	8002974 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002972:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002974:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f9      	beq.n	8002972 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800297e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_RCC_LSE_SetDriveCapability>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f023 0218 	bic.w	r2, r3, #24
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e009      	b.n	80029e8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	60ba      	str	r2, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ffb3 	bl	8002948 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	dbf1      	blt.n	80029d4 <_write+0x12>
	}
	return len;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a00:	f016 feee 	bl	80197e0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a04:	f7fe fc12 	bl	800122c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a08:	f000 f838 	bl	8002a7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a0c:	f000 f8ae 	bl	8002b6c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a10:	f7ff ff62 	bl	80028d8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a14:	f7fe ff8c 	bl	8001930 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a18:	f7fe ff54 	bl	80018c4 <MX_DMA_Init>
  MX_RTC_Init();
 8002a1c:	f002 f81c 	bl	8004a58 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8002a20:	f002 fd4e 	bl	80054c0 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8002a24:	f002 fc44 	bl	80052b0 <MX_LPUART1_UART_Init>
  MX_I2C3_Init();
 8002a28:	f7ff fe80 	bl	800272c <MX_I2C3_Init>
  MX_RF_Init();
 8002a2c:	f001 ffe3 	bl	80049f6 <MX_RF_Init>
  MX_TOF_Init();
 8002a30:	f021 feb6 	bl	80247a0 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2102      	movs	r1, #2
 8002a38:	480e      	ldr	r0, [pc, #56]	; (8002a74 <main+0x78>)
 8002a3a:	f017 fe95 	bl	801a768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	480c      	ldr	r0, [pc, #48]	; (8002a74 <main+0x78>)
 8002a44:	f017 fe90 	bl	801a768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	4809      	ldr	r0, [pc, #36]	; (8002a74 <main+0x78>)
 8002a4e:	f017 fe8b 	bl	801a768 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002a52:	f7fe fbf9 	bl	8001248 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  IR_Init();
 8002a56:	f01d fd59 	bl	802050c <IR_Init>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002a5a:	f7fe fedc 	bl	8001816 <MX_APPE_Process>

  MX_TOF_Process();
 8002a5e:	f021 fea5 	bl	80247ac <MX_TOF_Process>
    /* USER CODE BEGIN 3 */
  IR_Process();
 8002a62:	f01d fd81 	bl	8020568 <IR_Process>
  if(wifi_state == _ONLINE)
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <main+0x7c>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d1f5      	bne.n	8002a5a <main+0x5e>
	  wifi_process();
 8002a6e:	f01c fd7d 	bl	801f56c <wifi_process>
    MX_APPE_Process();
 8002a72:	e7f2      	b.n	8002a5a <main+0x5e>
 8002a74:	48000400 	.word	0x48000400
 8002a78:	20000089 	.word	0x20000089

08002a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b09a      	sub	sp, #104	; 0x68
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2248      	movs	r2, #72	; 0x48
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f022 fcfa 	bl	8025484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	615a      	str	r2, [r3, #20]
 8002aa0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f023 0303 	bic.w	r3, r3, #3
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ac6:	f019 f8b5 	bl	801bc34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002aca:	2010      	movs	r0, #16
 8002acc:	f7ff ff63 	bl	8002996 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <SystemClock_Config+0xec>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad8:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <SystemClock_Config+0xec>)
 8002ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <SystemClock_Config+0xec>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002aec:	232f      	movs	r3, #47	; 0x2f
 8002aee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002af6:	2301      	movs	r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b00:	2301      	movs	r3, #1
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b0c:	2360      	movs	r3, #96	; 0x60
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b10:	2305      	movs	r3, #5
 8002b12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b18:	f107 0320 	add.w	r3, r7, #32
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f019 fc1d 	bl	801c35c <HAL_RCC_OscConfig>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b28:	f000 f840 	bl	8002bac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002b2c:	236f      	movs	r3, #111	; 0x6f
 8002b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002b30:	2302      	movs	r3, #2
 8002b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f019 ff79 	bl	801ca44 <HAL_RCC_ClockConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002b58:	f000 f828 	bl	8002bac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002b5c:	f01a fd34 	bl	801d5c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002b60:	bf00      	nop
 8002b62:	3768      	adds	r7, #104	; 0x68
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	58000400 	.word	0x58000400

08002b6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b094      	sub	sp, #80	; 0x50
 8002b70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b72:	463b      	mov	r3, r7
 8002b74:	2250      	movs	r2, #80	; 0x50
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f022 fc83 	bl	8025484 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002b7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b82:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002b84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b92:	463b      	mov	r3, r7
 8002b94:	4618      	mov	r0, r3
 8002b96:	f01a fba1 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002ba0:	f000 f804 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002ba4:	bf00      	nop
 8002ba6:	3750      	adds	r7, #80	; 0x50
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb0:	b672      	cpsid	i
}
 8002bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <Error_Handler+0x8>
	...

08002bb8 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bc2:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <serialize_int+0x18>
		return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e00a      	b.n	8002be6 <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8002bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bd4:	f7fd ff98 	bl	8000b08 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4904      	ldr	r1, [pc, #16]	; (8002bf0 <serialize_int+0x38>)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f023 fa56 	bl	8026090 <siprintf>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08028430 	.word	0x08028430

08002bf4 <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <parson_strndup+0x40>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	3201      	adds	r2, #1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4798      	blx	r3
 8002c0a:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <parson_strndup+0x22>
        return NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e00a      	b.n	8002c2c <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f022 fc05 	bl	8025434 <memcpy>
    return output_string;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000008 	.word	0x20000008

08002c38 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fd fa9d 	bl	8000180 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffd2 	bl	8002bf4 <parson_strndup>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <hash_string>:
        }
    }
    return PARSON_TRUE;
}

static unsigned long hash_string(const char *string, size_t n) {
 8002c5a:	b480      	push	{r7}
 8002c5c:	b087      	sub	sp, #28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8002c64:	f241 5305 	movw	r3, #5381	; 0x1505
 8002c68:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e011      	b.n	8002c98 <hash_string+0x3e>
        c = string[i];
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	441a      	add	r2, r3
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	4413      	add	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3301      	adds	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3e9      	bcc.n	8002c74 <hash_string+0x1a>
 8002ca0:	e000      	b.n	8002ca4 <hash_string+0x4a>
            break;
 8002ca2:	bf00      	nop
    }
    return hash;
 8002ca4:	697b      	ldr	r3, [r7, #20]
#endif
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <json_object_make+0x50>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2024      	movs	r0, #36	; 0x24
 8002cc8:	4798      	blx	r3
 8002cca:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <json_object_make+0x22>
        return NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e011      	b.n	8002cfa <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f000 f814 	bl	8002d0c <json_object_init>
 8002ce4:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <json_object_make+0x44>
        parson_free(new_obj);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <json_object_make+0x54>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b8      	ldr	r0, [r7, #8]
 8002cf2:	4798      	blx	r3
        return NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <json_object_make+0x46>
    }
    return new_obj;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008
 8002d08:	2000000c 	.word	0x2000000c

08002d0c <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002e6c <json_object_init+0x160>
 8002d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5a:	ee17 2a90 	vmov	r2, s15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <json_object_init+0x60>
        return JSONSuccess;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e07b      	b.n	8002e64 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <json_object_init+0x164>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6a12      	ldr	r2, [r2, #32]
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	4610      	mov	r0, r2
 8002d78:	4798      	blx	r3
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 8002d80:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <json_object_init+0x164>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	69d2      	ldr	r2, [r2, #28]
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <json_object_init+0x164>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	69d2      	ldr	r2, [r2, #28]
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4798      	blx	r3
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <json_object_init+0x164>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	69d2      	ldr	r2, [r2, #28]
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4610      	mov	r0, r2
 8002db4:	4798      	blx	r3
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <json_object_init+0x164>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	69d2      	ldr	r2, [r2, #28]
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4798      	blx	r3
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <json_object_init+0x116>
        || object->names == NULL
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <json_object_init+0x116>
        || object->values == NULL
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01c      	beq.n	8002e22 <json_object_init+0x116>
        || object->cell_ixs == NULL
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d018      	beq.n	8002e22 <json_object_init+0x116>
        || object->hashes == NULL) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e00a      	b.n	8002e14 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3301      	adds	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3ef      	bcc.n	8002dfe <json_object_init+0xf2>
    }
    return JSONSuccess;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e020      	b.n	8002e64 <json_object_init+0x158>
        goto error;
 8002e22:	bf00      	nop
error:
    parson_free(object->cells);
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <json_object_init+0x168>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6852      	ldr	r2, [r2, #4]
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
    parson_free(object->names);
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <json_object_init+0x168>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68d2      	ldr	r2, [r2, #12]
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4798      	blx	r3
    parson_free(object->values);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <json_object_init+0x168>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6912      	ldr	r2, [r2, #16]
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <json_object_init+0x168>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6952      	ldr	r2, [r2, #20]
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
    parson_free(object->hashes);
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <json_object_init+0x168>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4798      	blx	r3
    return JSONFailure;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	3f333333 	.word	0x3f333333
 8002e70:	20000008 	.word	0x20000008
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e01b      	b.n	8002ec6 <json_object_deinit+0x4e>
        if (free_keys) {
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <json_object_deinit+0xcc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	68d1      	ldr	r1, [r2, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	440a      	add	r2, r1
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4798      	blx	r3
        }
        if (free_values) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fb92 	bl	80045e4 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3de      	bcc.n	8002e8e <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <json_object_deinit+0xcc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	6852      	ldr	r2, [r2, #4]
 8002eea:	4610      	mov	r0, r2
 8002eec:	4798      	blx	r3
    parson_free(object->names);
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <json_object_deinit+0xcc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4798      	blx	r3
    parson_free(object->values);
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <json_object_deinit+0xcc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6912      	ldr	r2, [r2, #16]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <json_object_deinit+0xcc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	6952      	ldr	r2, [r2, #20]
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4798      	blx	r3
    parson_free(object->hashes);
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <json_object_deinit+0xcc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6892      	ldr	r2, [r2, #8]
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4798      	blx	r3

    object->cells = NULL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b092      	sub	sp, #72	; 0x48
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	bf38      	it	cc
 8002f6a:	2310      	movcc	r3, #16
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fec9 	bl	8002d0c <json_object_init>
 8002f7a:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e046      	b.n	8003016 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 fa52 	bl	8004432 <json_object_get_wrapping_value>
 8002f8e:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 8002f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f92:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
 8002f98:	e028      	b.n	8002fec <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f897 	bl	80030f2 <json_object_add>
 8002fc4:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff4f 	bl	8002e78 <json_object_deinit>
            return JSONFailure;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e01a      	b.n	8003016 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	3301      	adds	r3, #1
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d3d1      	bcc.n	8002f9a <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff3c 	bl	8002e78 <json_object_deinit>
    *object = new_object;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	461d      	mov	r5, r3
 8003004:	f107 040c 	add.w	r4, r7, #12
 8003008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3748      	adds	r7, #72	; 0x48
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}

0800301e <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 800301e:	b580      	push	{r7, lr}
 8003020:	b08c      	sub	sp, #48	; 0x30
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	3b01      	subs	r3, #1
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	4013      	ands	r3, r2
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305a:	e03f      	b.n	80030dc <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 800305c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	3b01      	subs	r3, #1
 8003068:	4013      	ands	r3, r2
 800306a:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d101      	bne.n	8003086 <json_object_get_cell_ix+0x68>
            return ix;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	e031      	b.n	80030ea <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	d11b      	bne.n	80030d4 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80030aa:	69b8      	ldr	r0, [r7, #24]
 80030ac:	f7fd f868 	bl	8000180 <strlen>
 80030b0:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d10d      	bne.n	80030d6 <json_object_get_cell_ix+0xb8>
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	68b8      	ldr	r0, [r7, #8]
 80030c0:	f023 f856 	bl	8026170 <strncmp>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
            return ix;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	e00a      	b.n	80030ea <json_object_get_cell_ix+0xcc>
            continue;
 80030d4:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	3301      	adds	r3, #1
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3ba      	bcc.n	800305c <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	; 0x28
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <json_object_add+0x30>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <json_object_add+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <json_object_add+0x36>
        return JSONFailure;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e06e      	b.n	8003206 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8003128:	68b8      	ldr	r0, [r7, #8]
 800312a:	f7fd f829 	bl	8000180 <strlen>
 800312e:	4603      	mov	r3, r0
 8003130:	4619      	mov	r1, r3
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	f7ff fd91 	bl	8002c5a <hash_string>
 8003138:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	f7fd f81e 	bl	8000180 <strlen>
 8003144:	4602      	mov	r2, r0
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff ff64 	bl	800301e <json_object_get_cell_ix>
 8003156:	61f8      	str	r0, [r7, #28]
    if (found) {
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <json_object_add+0x72>
        return JSONFailure;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	e050      	b.n	8003206 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	429a      	cmp	r2, r3
 800316e:	d316      	bcc.n	800319e <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fee9 	bl	8002f48 <json_object_grow_and_rehash>
 8003176:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <json_object_add+0x92>
            return JSONFailure;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e040      	b.n	8003206 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8003184:	68b8      	ldr	r0, [r7, #8]
 8003186:	f7fc fffb 	bl	8000180 <strlen>
 800318a:	4602      	mov	r2, r0
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff ff41 	bl	800301e <json_object_get_cell_ix>
 800319c:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	6992      	ldr	r2, [r2, #24]
 80031bc:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	601a      	str	r2, [r3, #0]
    object->count++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f001 f91a 	bl	8004432 <json_object_get_wrapping_value>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8003218:	2201      	movs	r2, #1
 800321a:	2101      	movs	r1, #1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fe2b 	bl	8002e78 <json_object_deinit>
    parson_free(object);
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <json_object_free+0x24>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	2000000c 	.word	0x2000000c

08003238 <json_array_free>:
    array->items = new_items;
    array->capacity = new_capacity;
    return JSONSuccess;
}

static void json_array_free(JSON_Array *array) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e00b      	b.n	800325e <json_array_free+0x26>
        json_value_free(array->items[i]);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f9c6 	bl	80045e4 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d3ee      	bcc.n	8003246 <json_array_free+0xe>
    }
    parson_free(array->items);
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <json_array_free+0x4c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6852      	ldr	r2, [r2, #4]
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
    parson_free(array);
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <json_array_free+0x4c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000000c 	.word	0x2000000c

08003288 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b098      	sub	sp, #96	; 0x60
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	63bb      	str	r3, [r7, #56]	; 0x38
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	653b      	str	r3, [r7, #80]	; 0x50
 80032c4:	2300      	movs	r3, #0
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f001 f8ed 	bl	80044ac <json_value_get_type>
 80032d2:	4603      	mov	r3, r0
 80032d4:	3301      	adds	r3, #1
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	f200 8355 	bhi.w	8003986 <json_serialize_to_buffer_r+0x6fe>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <json_serialize_to_buffer_r+0x5c>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003981 	.word	0x08003981
 80032e8:	08003987 	.word	0x08003987
 80032ec:	0800394d 	.word	0x0800394d
 80032f0:	08003813 	.word	0x08003813
 80032f4:	080038d3 	.word	0x080038d3
 80032f8:	08003531 	.word	0x08003531
 80032fc:	08003305 	.word	0x08003305
 8003300:	08003861 	.word	0x08003861
        case JSONArray:
            array = json_value_get_array(value);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f001 f8f5 	bl	80044f4 <json_value_get_array>
 800330a:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 800330c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800330e:	f001 f8bc 	bl	800448a <json_array_get_count>
 8003312:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 8003314:	2301      	movs	r3, #1
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <json_serialize_to_buffer_r+0xb4>
 800331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003320:	461a      	mov	r2, r3
 8003322:	497e      	ldr	r1, [pc, #504]	; (800351c <json_serialize_to_buffer_r+0x294>)
 8003324:	68b8      	ldr	r0, [r7, #8]
 8003326:	f022 f885 	bl	8025434 <memcpy>
 800332a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4413      	add	r3, r2
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4413      	add	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	4413      	add	r3, r2
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <json_serialize_to_buffer_r+0xf8>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 8003350:	2301      	movs	r3, #1
 8003352:	653b      	str	r3, [r7, #80]	; 0x50
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <json_serialize_to_buffer_r+0xf0>
 800335a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335c:	461a      	mov	r2, r3
 800335e:	4970      	ldr	r1, [pc, #448]	; (8003520 <json_serialize_to_buffer_r+0x298>)
 8003360:	68b8      	ldr	r0, [r7, #8]
 8003362:	f022 f867 	bl	8025434 <memcpy>
 8003366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4413      	add	r3, r2
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337c:	4413      	add	r3, r2
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8003380:	2300      	movs	r3, #0
 8003382:	657b      	str	r3, [r7, #84]	; 0x54
 8003384:	e081      	b.n	800348a <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d023      	beq.n	80033d4 <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 800338c:	2300      	movs	r3, #0
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003390:	2300      	movs	r3, #0
 8003392:	64bb      	str	r3, [r7, #72]	; 0x48
 8003394:	e01a      	b.n	80033cc <json_serialize_to_buffer_r+0x144>
 8003396:	2304      	movs	r3, #4
 8003398:	653b      	str	r3, [r7, #80]	; 0x50
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <json_serialize_to_buffer_r+0x136>
 80033a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a2:	461a      	mov	r2, r3
 80033a4:	495f      	ldr	r1, [pc, #380]	; (8003524 <json_serialize_to_buffer_r+0x29c>)
 80033a6:	68b8      	ldr	r0, [r7, #8]
 80033a8:	f022 f844 	bl	8025434 <memcpy>
 80033ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4413      	add	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	4413      	add	r3, r2
 80033c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	3301      	adds	r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dae0      	bge.n	8003396 <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 80033d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d8:	f001 f83c 	bl	8004454 <json_array_get_value>
 80033dc:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ec:	f7ff ff4c 	bl	8003288 <json_serialize_to_buffer_r>
 80033f0:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80033f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da02      	bge.n	80033fe <json_serialize_to_buffer_r+0x176>
                    return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	e2c5      	b.n	800398a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8003404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 800340c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800340e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003410:	4413      	add	r3, r2
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800341a:	429a      	cmp	r2, r3
 800341c:	d217      	bcs.n	800344e <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 800341e:	2301      	movs	r3, #1
 8003420:	653b      	str	r3, [r7, #80]	; 0x50
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <json_serialize_to_buffer_r+0x1be>
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	461a      	mov	r2, r3
 800342c:	493e      	ldr	r1, [pc, #248]	; (8003528 <json_serialize_to_buffer_r+0x2a0>)
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f022 f800 	bl	8025434 <memcpy>
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4413      	add	r3, r2
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4413      	add	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344a:	4413      	add	r3, r2
 800344c:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d017      	beq.n	8003484 <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 8003454:	2301      	movs	r3, #1
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00e      	beq.n	800347c <json_serialize_to_buffer_r+0x1f4>
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	461a      	mov	r2, r3
 8003462:	492f      	ldr	r1, [pc, #188]	; (8003520 <json_serialize_to_buffer_r+0x298>)
 8003464:	68b8      	ldr	r0, [r7, #8]
 8003466:	f021 ffe5 	bl	8025434 <memcpy>
 800346a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4413      	add	r3, r2
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800347e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003480:	4413      	add	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	3301      	adds	r3, #1
 8003488:	657b      	str	r3, [r7, #84]	; 0x54
 800348a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	429a      	cmp	r2, r3
 8003490:	f4ff af79 	bcc.w	8003386 <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d026      	beq.n	80034e8 <json_serialize_to_buffer_r+0x260>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 80034a0:	2300      	movs	r3, #0
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
 80034a8:	e01a      	b.n	80034e0 <json_serialize_to_buffer_r+0x258>
 80034aa:	2304      	movs	r3, #4
 80034ac:	653b      	str	r3, [r7, #80]	; 0x50
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <json_serialize_to_buffer_r+0x24a>
 80034b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b6:	461a      	mov	r2, r3
 80034b8:	491a      	ldr	r1, [pc, #104]	; (8003524 <json_serialize_to_buffer_r+0x29c>)
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f021 ffba 	bl	8025434 <memcpy>
 80034c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	4413      	add	r3, r2
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d6:	4413      	add	r3, r2
 80034d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034dc:	3301      	adds	r3, #1
 80034de:	647b      	str	r3, [r7, #68]	; 0x44
 80034e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	dbe0      	blt.n	80034aa <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 80034e8:	2301      	movs	r3, #1
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <json_serialize_to_buffer_r+0x288>
 80034f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f4:	461a      	mov	r2, r3
 80034f6:	490d      	ldr	r1, [pc, #52]	; (800352c <json_serialize_to_buffer_r+0x2a4>)
 80034f8:	68b8      	ldr	r0, [r7, #8]
 80034fa:	f021 ff9b 	bl	8025434 <memcpy>
 80034fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	4413      	add	r3, r2
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003514:	4413      	add	r3, r2
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	e236      	b.n	800398a <json_serialize_to_buffer_r+0x702>
 800351c:	08028458 	.word	0x08028458
 8003520:	0802845c 	.word	0x0802845c
 8003524:	08028460 	.word	0x08028460
 8003528:	08028468 	.word	0x08028468
 800352c:	0802846c 	.word	0x0802846c
        case JSONObject:
            object = json_value_get_object(value);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 ffcd 	bl	80044d0 <json_value_get_object>
 8003536:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 8003538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353a:	f000 ff33 	bl	80043a4 <json_object_get_count>
 800353e:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 8003540:	2301      	movs	r3, #1
 8003542:	653b      	str	r3, [r7, #80]	; 0x50
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <json_serialize_to_buffer_r+0x2e0>
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	461a      	mov	r2, r3
 800354e:	498e      	ldr	r1, [pc, #568]	; (8003788 <json_serialize_to_buffer_r+0x500>)
 8003550:	68b8      	ldr	r0, [r7, #8]
 8003552:	f021 ff6f 	bl	8025434 <memcpy>
 8003556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	4413      	add	r3, r2
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4413      	add	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	4413      	add	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <json_serialize_to_buffer_r+0x324>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 800357c:	2301      	movs	r3, #1
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <json_serialize_to_buffer_r+0x31c>
 8003586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003588:	461a      	mov	r2, r3
 800358a:	4980      	ldr	r1, [pc, #512]	; (800378c <json_serialize_to_buffer_r+0x504>)
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f021 ff51 	bl	8025434 <memcpy>
 8003592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4413      	add	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4413      	add	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	4413      	add	r3, r2
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
 80035b0:	e0da      	b.n	8003768 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 80035b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b6:	f000 ff06 	bl	80043c6 <json_object_get_name>
 80035ba:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <json_serialize_to_buffer_r+0x340>
                    return -1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e1e0      	b.n	800398a <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d023      	beq.n	8003616 <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 80035ce:	2300      	movs	r3, #0
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	2300      	movs	r3, #0
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
 80035d6:	e01a      	b.n	800360e <json_serialize_to_buffer_r+0x386>
 80035d8:	2304      	movs	r3, #4
 80035da:	653b      	str	r3, [r7, #80]	; 0x50
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <json_serialize_to_buffer_r+0x378>
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	461a      	mov	r2, r3
 80035e6:	496a      	ldr	r1, [pc, #424]	; (8003790 <json_serialize_to_buffer_r+0x508>)
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f021 ff23 	bl	8025434 <memcpy>
 80035ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4413      	add	r3, r2
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003604:	4413      	add	r3, r2
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360a:	3301      	adds	r3, #1
 800360c:	643b      	str	r3, [r7, #64]	; 0x40
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003612:	429a      	cmp	r2, r3
 8003614:	dae0      	bge.n	80035d8 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8003616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003618:	f7fc fdb2 	bl	8000180 <strlen>
 800361c:	4603      	mov	r3, r0
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4619      	mov	r1, r3
 8003622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003624:	f000 f9c6 	bl	80039b4 <json_serialize_string>
 8003628:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	da02      	bge.n	8003636 <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	e1a9      	b.n	800398a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 800363c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4413      	add	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8003644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	4413      	add	r3, r2
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 800364c:	2301      	movs	r3, #1
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <json_serialize_to_buffer_r+0x3ec>
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	461a      	mov	r2, r3
 800365a:	494e      	ldr	r1, [pc, #312]	; (8003794 <json_serialize_to_buffer_r+0x50c>)
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	f021 fee9 	bl	8025434 <memcpy>
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003678:	4413      	add	r3, r2
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 8003682:	2301      	movs	r3, #1
 8003684:	653b      	str	r3, [r7, #80]	; 0x50
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <json_serialize_to_buffer_r+0x422>
 800368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368e:	461a      	mov	r2, r3
 8003690:	4941      	ldr	r1, [pc, #260]	; (8003798 <json_serialize_to_buffer_r+0x510>)
 8003692:	68b8      	ldr	r0, [r7, #8]
 8003694:	f021 fece 	bl	8025434 <memcpy>
 8003698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4413      	add	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ae:	4413      	add	r3, r2
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 80036b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036b6:	f000 fea1 	bl	80043fc <json_object_get_value_at>
 80036ba:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ca:	f7ff fddd 	bl	8003288 <json_serialize_to_buffer_r>
 80036ce:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80036d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da02      	bge.n	80036dc <json_serialize_to_buffer_r+0x454>
                    return -1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e156      	b.n	800398a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <json_serialize_to_buffer_r+0x462>
                    buf += written;
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4413      	add	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80036ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ee:	4413      	add	r3, r2
 80036f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	3b01      	subs	r3, #1
 80036f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d217      	bcs.n	800372c <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 80036fc:	2301      	movs	r3, #1
 80036fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <json_serialize_to_buffer_r+0x49c>
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	461a      	mov	r2, r3
 800370a:	4924      	ldr	r1, [pc, #144]	; (800379c <json_serialize_to_buffer_r+0x514>)
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f021 fe91 	bl	8025434 <memcpy>
 8003712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4413      	add	r3, r2
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	4413      	add	r3, r2
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 8003732:	2301      	movs	r3, #1
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <json_serialize_to_buffer_r+0x4d2>
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	461a      	mov	r2, r3
 8003740:	4912      	ldr	r1, [pc, #72]	; (800378c <json_serialize_to_buffer_r+0x504>)
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	f021 fe76 	bl	8025434 <memcpy>
 8003748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4413      	add	r3, r2
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375e:	4413      	add	r3, r2
 8003760:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8003762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003764:	3301      	adds	r3, #1
 8003766:	657b      	str	r3, [r7, #84]	; 0x54
 8003768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	429a      	cmp	r2, r3
 800376e:	f4ff af20 	bcc.w	80035b2 <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	d032      	beq.n	80037de <json_serialize_to_buffer_r+0x556>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02f      	beq.n	80037de <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 800377e:	2300      	movs	r3, #0
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003782:	2300      	movs	r3, #0
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	e026      	b.n	80037d6 <json_serialize_to_buffer_r+0x54e>
 8003788:	08028470 	.word	0x08028470
 800378c:	0802845c 	.word	0x0802845c
 8003790:	08028460 	.word	0x08028460
 8003794:	08028474 	.word	0x08028474
 8003798:	08028478 	.word	0x08028478
 800379c:	08028468 	.word	0x08028468
 80037a0:	2304      	movs	r3, #4
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <json_serialize_to_buffer_r+0x540>
 80037aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ac:	461a      	mov	r2, r3
 80037ae:	4979      	ldr	r1, [pc, #484]	; (8003994 <json_serialize_to_buffer_r+0x70c>)
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f021 fe3f 	bl	8025434 <memcpy>
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	4413      	add	r3, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	4413      	add	r3, r2
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	3301      	adds	r3, #1
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	dbe0      	blt.n	80037a0 <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 80037de:	2301      	movs	r3, #1
 80037e0:	653b      	str	r3, [r7, #80]	; 0x50
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <json_serialize_to_buffer_r+0x57e>
 80037e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ea:	461a      	mov	r2, r3
 80037ec:	496a      	ldr	r1, [pc, #424]	; (8003998 <json_serialize_to_buffer_r+0x710>)
 80037ee:	68b8      	ldr	r0, [r7, #8]
 80037f0:	f021 fe20 	bl	8025434 <memcpy>
 80037f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	4413      	add	r3, r2
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380a:	4413      	add	r3, r2
 800380c:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800380e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003810:	e0bb      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fe92 	bl	800453c <json_value_get_string>
 8003818:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 800381a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <json_serialize_to_buffer_r+0x59e>
                return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e0b1      	b.n	800398a <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fe9b 	bl	8004562 <json_value_get_string_len>
 800382c:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003834:	f000 f8be 	bl	80039b4 <json_serialize_string>
 8003838:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	2b00      	cmp	r3, #0
 800383e:	da02      	bge.n	8003846 <json_serialize_to_buffer_r+0x5be>
                return -1;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e0a1      	b.n	800398a <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4413      	add	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8003854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	4413      	add	r3, r2
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	e094      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 feac 	bl	80045be <json_value_get_boolean>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d018      	beq.n	800389e <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 800386c:	2304      	movs	r3, #4
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <json_serialize_to_buffer_r+0x60c>
 8003876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003878:	461a      	mov	r2, r3
 800387a:	4948      	ldr	r1, [pc, #288]	; (800399c <json_serialize_to_buffer_r+0x714>)
 800387c:	68b8      	ldr	r0, [r7, #8]
 800387e:	f021 fdd9 	bl	8025434 <memcpy>
 8003882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4413      	add	r3, r2
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4413      	add	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	4413      	add	r3, r2
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389c:	e017      	b.n	80038ce <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 800389e:	2305      	movs	r3, #5
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <json_serialize_to_buffer_r+0x63e>
 80038a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038aa:	461a      	mov	r2, r3
 80038ac:	493c      	ldr	r1, [pc, #240]	; (80039a0 <json_serialize_to_buffer_r+0x718>)
 80038ae:	68b8      	ldr	r0, [r7, #8]
 80038b0:	f021 fdc0 	bl	8025434 <memcpy>
 80038b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4413      	add	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4413      	add	r3, r2
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ca:	4413      	add	r3, r2
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	e05b      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fe58 	bl	8004588 <json_value_get_number>
 80038d8:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <json_serialize_to_buffer_r+0x71c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <json_serialize_to_buffer_r+0x71c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80038f4:	ed97 0b06 	vldr	d0, [r7, #24]
 80038f8:	4798      	blx	r3
 80038fa:	6538      	str	r0, [r7, #80]	; 0x50
 80038fc:	e013      	b.n	8003926 <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <json_serialize_to_buffer_r+0x720>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <json_serialize_to_buffer_r+0x720>)
 8003908:	6819      	ldr	r1, [r3, #0]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003910:	f022 fbbe 	bl	8026090 <siprintf>
 8003914:	6538      	str	r0, [r7, #80]	; 0x50
 8003916:	e006      	b.n	8003926 <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8003918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391c:	4923      	ldr	r1, [pc, #140]	; (80039ac <json_serialize_to_buffer_r+0x724>)
 800391e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003920:	f022 fbb6 	bl	8026090 <siprintf>
 8003924:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 8003926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	da02      	bge.n	8003932 <json_serialize_to_buffer_r+0x6aa>
                return -1;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	e02b      	b.n	800398a <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4413      	add	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8003940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003944:	4413      	add	r3, r2
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	e01e      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 800394c:	2304      	movs	r3, #4
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <json_serialize_to_buffer_r+0x6ec>
 8003956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003958:	461a      	mov	r2, r3
 800395a:	4915      	ldr	r1, [pc, #84]	; (80039b0 <json_serialize_to_buffer_r+0x728>)
 800395c:	68b8      	ldr	r0, [r7, #8]
 800395e:	f021 fd69 	bl	8025434 <memcpy>
 8003962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4413      	add	r3, r2
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003978:	4413      	add	r3, r2
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	e004      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	e001      	b.n	800398a <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3758      	adds	r7, #88	; 0x58
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08028460 	.word	0x08028460
 8003998:	0802847c 	.word	0x0802847c
 800399c:	08028440 	.word	0x08028440
 80039a0:	08028448 	.word	0x08028448
 80039a4:	20000014 	.word	0x20000014
 80039a8:	20000cc4 	.word	0x20000cc4
 80039ac:	08028480 	.word	0x08028480
 80039b0:	08028450 	.word	0x08028450

080039b4 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 80039c4:	2300      	movs	r3, #0
 80039c6:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 80039d2:	2302      	movs	r3, #2
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <json_serialize_string+0x46>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	461a      	mov	r2, r3
 80039e0:	49b8      	ldr	r1, [pc, #736]	; (8003cc4 <json_serialize_string+0x310>)
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f021 fd26 	bl	8025434 <memcpy>
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	f000 bc9b 	b.w	8004340 <json_serialize_string+0x98c>
        c = string[i];
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b5c      	cmp	r3, #92	; 0x5c
 8003a18:	f200 8482 	bhi.w	8004320 <json_serialize_string+0x96c>
 8003a1c:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <json_serialize_string+0x70>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003d0f 	.word	0x08003d0f
 8003a28:	08003d41 	.word	0x08003d41
 8003a2c:	08003d73 	.word	0x08003d73
 8003a30:	08003da5 	.word	0x08003da5
 8003a34:	08003dd7 	.word	0x08003dd7
 8003a38:	08003e09 	.word	0x08003e09
 8003a3c:	08003e3b 	.word	0x08003e3b
 8003a40:	08003e6d 	.word	0x08003e6d
 8003a44:	08003bfd 	.word	0x08003bfd
 8003a48:	08003cdd 	.word	0x08003cdd
 8003a4c:	08003c61 	.word	0x08003c61
 8003a50:	08003e9f 	.word	0x08003e9f
 8003a54:	08003c2f 	.word	0x08003c2f
 8003a58:	08003c93 	.word	0x08003c93
 8003a5c:	08003ed1 	.word	0x08003ed1
 8003a60:	08003f03 	.word	0x08003f03
 8003a64:	08003f65 	.word	0x08003f65
 8003a68:	08003f97 	.word	0x08003f97
 8003a6c:	08003fc9 	.word	0x08003fc9
 8003a70:	08003ffb 	.word	0x08003ffb
 8003a74:	0800402d 	.word	0x0800402d
 8003a78:	0800405f 	.word	0x0800405f
 8003a7c:	08004091 	.word	0x08004091
 8003a80:	080040c3 	.word	0x080040c3
 8003a84:	080040f5 	.word	0x080040f5
 8003a88:	08004127 	.word	0x08004127
 8003a8c:	08004159 	.word	0x08004159
 8003a90:	0800418b 	.word	0x0800418b
 8003a94:	080041ed 	.word	0x080041ed
 8003a98:	0800421f 	.word	0x0800421f
 8003a9c:	08004251 	.word	0x08004251
 8003aa0:	08004283 	.word	0x08004283
 8003aa4:	08004321 	.word	0x08004321
 8003aa8:	08004321 	.word	0x08004321
 8003aac:	08003b99 	.word	0x08003b99
 8003ab0:	08004321 	.word	0x08004321
 8003ab4:	08004321 	.word	0x08004321
 8003ab8:	08004321 	.word	0x08004321
 8003abc:	08004321 	.word	0x08004321
 8003ac0:	08004321 	.word	0x08004321
 8003ac4:	08004321 	.word	0x08004321
 8003ac8:	08004321 	.word	0x08004321
 8003acc:	08004321 	.word	0x08004321
 8003ad0:	08004321 	.word	0x08004321
 8003ad4:	08004321 	.word	0x08004321
 8003ad8:	08004321 	.word	0x08004321
 8003adc:	08004321 	.word	0x08004321
 8003ae0:	080042b5 	.word	0x080042b5
 8003ae4:	08004321 	.word	0x08004321
 8003ae8:	08004321 	.word	0x08004321
 8003aec:	08004321 	.word	0x08004321
 8003af0:	08004321 	.word	0x08004321
 8003af4:	08004321 	.word	0x08004321
 8003af8:	08004321 	.word	0x08004321
 8003afc:	08004321 	.word	0x08004321
 8003b00:	08004321 	.word	0x08004321
 8003b04:	08004321 	.word	0x08004321
 8003b08:	08004321 	.word	0x08004321
 8003b0c:	08004321 	.word	0x08004321
 8003b10:	08004321 	.word	0x08004321
 8003b14:	08004321 	.word	0x08004321
 8003b18:	08004321 	.word	0x08004321
 8003b1c:	08004321 	.word	0x08004321
 8003b20:	08004321 	.word	0x08004321
 8003b24:	08004321 	.word	0x08004321
 8003b28:	08004321 	.word	0x08004321
 8003b2c:	08004321 	.word	0x08004321
 8003b30:	08004321 	.word	0x08004321
 8003b34:	08004321 	.word	0x08004321
 8003b38:	08004321 	.word	0x08004321
 8003b3c:	08004321 	.word	0x08004321
 8003b40:	08004321 	.word	0x08004321
 8003b44:	08004321 	.word	0x08004321
 8003b48:	08004321 	.word	0x08004321
 8003b4c:	08004321 	.word	0x08004321
 8003b50:	08004321 	.word	0x08004321
 8003b54:	08004321 	.word	0x08004321
 8003b58:	08004321 	.word	0x08004321
 8003b5c:	08004321 	.word	0x08004321
 8003b60:	08004321 	.word	0x08004321
 8003b64:	08004321 	.word	0x08004321
 8003b68:	08004321 	.word	0x08004321
 8003b6c:	08004321 	.word	0x08004321
 8003b70:	08004321 	.word	0x08004321
 8003b74:	08004321 	.word	0x08004321
 8003b78:	08004321 	.word	0x08004321
 8003b7c:	08004321 	.word	0x08004321
 8003b80:	08004321 	.word	0x08004321
 8003b84:	08004321 	.word	0x08004321
 8003b88:	08004321 	.word	0x08004321
 8003b8c:	08004321 	.word	0x08004321
 8003b90:	08004321 	.word	0x08004321
 8003b94:	08003bcb 	.word	0x08003bcb
        	case '\"': APPEND_STRING("\\\""); break;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <json_serialize_string+0x20c>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4947      	ldr	r1, [pc, #284]	; (8003cc4 <json_serialize_string+0x310>)
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f021 fc43 	bl	8025434 <memcpy>
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e3b7      	b.n	800433a <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <json_serialize_string+0x23e>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	493b      	ldr	r1, [pc, #236]	; (8003cc8 <json_serialize_string+0x314>)
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f021 fc2a 	bl	8025434 <memcpy>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e39e      	b.n	800433a <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <json_serialize_string+0x270>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4930      	ldr	r1, [pc, #192]	; (8003ccc <json_serialize_string+0x318>)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f021 fc11 	bl	8025434 <memcpy>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e385      	b.n	800433a <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <json_serialize_string+0x2a2>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4924      	ldr	r1, [pc, #144]	; (8003cd0 <json_serialize_string+0x31c>)
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f021 fbf8 	bl	8025434 <memcpy>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e36c      	b.n	800433a <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 8003c60:	2302      	movs	r3, #2
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <json_serialize_string+0x2d4>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4919      	ldr	r1, [pc, #100]	; (8003cd4 <json_serialize_string+0x320>)
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f021 fbdf 	bl	8025434 <memcpy>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e353      	b.n	800433a <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 8003c92:	2302      	movs	r3, #2
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <json_serialize_string+0x306>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	490d      	ldr	r1, [pc, #52]	; (8003cd8 <json_serialize_string+0x324>)
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f021 fbc6 	bl	8025434 <memcpy>
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e33a      	b.n	800433a <json_serialize_string+0x986>
 8003cc4:	08028488 	.word	0x08028488
 8003cc8:	0802848c 	.word	0x0802848c
 8003ccc:	08028490 	.word	0x08028490
 8003cd0:	08028494 	.word	0x08028494
 8003cd4:	08028498 	.word	0x08028498
 8003cd8:	0802849c 	.word	0x0802849c
            case '\t': APPEND_STRING("\\t"); break;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <json_serialize_string+0x350>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4992      	ldr	r1, [pc, #584]	; (8003f34 <json_serialize_string+0x580>)
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f021 fba1 	bl	8025434 <memcpy>
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e315      	b.n	800433a <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8003d0e:	2306      	movs	r3, #6
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <json_serialize_string+0x382>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4986      	ldr	r1, [pc, #536]	; (8003f38 <json_serialize_string+0x584>)
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f021 fb88 	bl	8025434 <memcpy>
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e2fc      	b.n	800433a <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8003d40:	2306      	movs	r3, #6
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <json_serialize_string+0x3b4>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	497b      	ldr	r1, [pc, #492]	; (8003f3c <json_serialize_string+0x588>)
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f021 fb6f 	bl	8025434 <memcpy>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e2e3      	b.n	800433a <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8003d72:	2306      	movs	r3, #6
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <json_serialize_string+0x3e6>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	496f      	ldr	r1, [pc, #444]	; (8003f40 <json_serialize_string+0x58c>)
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f021 fb56 	bl	8025434 <memcpy>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e2ca      	b.n	800433a <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 8003da4:	2306      	movs	r3, #6
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <json_serialize_string+0x418>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4964      	ldr	r1, [pc, #400]	; (8003f44 <json_serialize_string+0x590>)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f021 fb3d 	bl	8025434 <memcpy>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e2b1      	b.n	800433a <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <json_serialize_string+0x44a>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	461a      	mov	r2, r3
 8003de4:	4958      	ldr	r1, [pc, #352]	; (8003f48 <json_serialize_string+0x594>)
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f021 fb24 	bl	8025434 <memcpy>
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e298      	b.n	800433a <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8003e08:	2306      	movs	r3, #6
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00e      	beq.n	8003e30 <json_serialize_string+0x47c>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	461a      	mov	r2, r3
 8003e16:	494d      	ldr	r1, [pc, #308]	; (8003f4c <json_serialize_string+0x598>)
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f021 fb0b 	bl	8025434 <memcpy>
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e27f      	b.n	800433a <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8003e3a:	2306      	movs	r3, #6
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <json_serialize_string+0x4ae>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4941      	ldr	r1, [pc, #260]	; (8003f50 <json_serialize_string+0x59c>)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f021 faf2 	bl	8025434 <memcpy>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e266      	b.n	800433a <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8003e6c:	2306      	movs	r3, #6
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00e      	beq.n	8003e94 <json_serialize_string+0x4e0>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4936      	ldr	r1, [pc, #216]	; (8003f54 <json_serialize_string+0x5a0>)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f021 fad9 	bl	8025434 <memcpy>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e24d      	b.n	800433a <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8003e9e:	2306      	movs	r3, #6
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <json_serialize_string+0x512>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	492a      	ldr	r1, [pc, #168]	; (8003f58 <json_serialize_string+0x5a4>)
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f021 fac0 	bl	8025434 <memcpy>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e234      	b.n	800433a <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 8003ed0:	2306      	movs	r3, #6
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <json_serialize_string+0x544>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	461a      	mov	r2, r3
 8003ede:	491f      	ldr	r1, [pc, #124]	; (8003f5c <json_serialize_string+0x5a8>)
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f021 faa7 	bl	8025434 <memcpy>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	e21b      	b.n	800433a <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 8003f02:	2306      	movs	r3, #6
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <json_serialize_string+0x576>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4913      	ldr	r1, [pc, #76]	; (8003f60 <json_serialize_string+0x5ac>)
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f021 fa8e 	bl	8025434 <memcpy>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e202      	b.n	800433a <json_serialize_string+0x986>
 8003f34:	080284a0 	.word	0x080284a0
 8003f38:	080284a4 	.word	0x080284a4
 8003f3c:	080284ac 	.word	0x080284ac
 8003f40:	080284b4 	.word	0x080284b4
 8003f44:	080284bc 	.word	0x080284bc
 8003f48:	080284c4 	.word	0x080284c4
 8003f4c:	080284cc 	.word	0x080284cc
 8003f50:	080284d4 	.word	0x080284d4
 8003f54:	080284dc 	.word	0x080284dc
 8003f58:	080284e4 	.word	0x080284e4
 8003f5c:	080284ec 	.word	0x080284ec
 8003f60:	080284f4 	.word	0x080284f4
            case '\x10': APPEND_STRING("\\u0010"); break;
 8003f64:	2306      	movs	r3, #6
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00e      	beq.n	8003f8c <json_serialize_string+0x5d8>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4992      	ldr	r1, [pc, #584]	; (80041bc <json_serialize_string+0x808>)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f021 fa5d 	bl	8025434 <memcpy>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e1d1      	b.n	800433a <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 8003f96:	2306      	movs	r3, #6
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <json_serialize_string+0x60a>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4986      	ldr	r1, [pc, #536]	; (80041c0 <json_serialize_string+0x80c>)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f021 fa44 	bl	8025434 <memcpy>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4413      	add	r3, r2
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e1b8      	b.n	800433a <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8003fc8:	2306      	movs	r3, #6
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <json_serialize_string+0x63c>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	497b      	ldr	r1, [pc, #492]	; (80041c4 <json_serialize_string+0x810>)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f021 fa2b 	bl	8025434 <memcpy>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e19f      	b.n	800433a <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8003ffa:	2306      	movs	r3, #6
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <json_serialize_string+0x66e>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	461a      	mov	r2, r3
 8004008:	496f      	ldr	r1, [pc, #444]	; (80041c8 <json_serialize_string+0x814>)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f021 fa12 	bl	8025434 <memcpy>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e186      	b.n	800433a <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 800402c:	2306      	movs	r3, #6
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <json_serialize_string+0x6a0>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	461a      	mov	r2, r3
 800403a:	4964      	ldr	r1, [pc, #400]	; (80041cc <json_serialize_string+0x818>)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f021 f9f9 	bl	8025434 <memcpy>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e16d      	b.n	800433a <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 800405e:	2306      	movs	r3, #6
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <json_serialize_string+0x6d2>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	461a      	mov	r2, r3
 800406c:	4958      	ldr	r1, [pc, #352]	; (80041d0 <json_serialize_string+0x81c>)
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f021 f9e0 	bl	8025434 <memcpy>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e154      	b.n	800433a <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8004090:	2306      	movs	r3, #6
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <json_serialize_string+0x704>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	461a      	mov	r2, r3
 800409e:	494d      	ldr	r1, [pc, #308]	; (80041d4 <json_serialize_string+0x820>)
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f021 f9c7 	bl	8025434 <memcpy>
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e13b      	b.n	800433a <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 80040c2:	2306      	movs	r3, #6
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <json_serialize_string+0x736>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	461a      	mov	r2, r3
 80040d0:	4941      	ldr	r1, [pc, #260]	; (80041d8 <json_serialize_string+0x824>)
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f021 f9ae 	bl	8025434 <memcpy>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e122      	b.n	800433a <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 80040f4:	2306      	movs	r3, #6
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <json_serialize_string+0x768>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	461a      	mov	r2, r3
 8004102:	4936      	ldr	r1, [pc, #216]	; (80041dc <json_serialize_string+0x828>)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f021 f995 	bl	8025434 <memcpy>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e109      	b.n	800433a <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8004126:	2306      	movs	r3, #6
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <json_serialize_string+0x79a>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	461a      	mov	r2, r3
 8004134:	492a      	ldr	r1, [pc, #168]	; (80041e0 <json_serialize_string+0x82c>)
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f021 f97c 	bl	8025434 <memcpy>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e0f0      	b.n	800433a <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8004158:	2306      	movs	r3, #6
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00e      	beq.n	8004180 <json_serialize_string+0x7cc>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	461a      	mov	r2, r3
 8004166:	491f      	ldr	r1, [pc, #124]	; (80041e4 <json_serialize_string+0x830>)
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f021 f963 	bl	8025434 <memcpy>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e0d7      	b.n	800433a <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 800418a:	2306      	movs	r3, #6
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <json_serialize_string+0x7fe>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	461a      	mov	r2, r3
 8004198:	4913      	ldr	r1, [pc, #76]	; (80041e8 <json_serialize_string+0x834>)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f021 f94a 	bl	8025434 <memcpy>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e0be      	b.n	800433a <json_serialize_string+0x986>
 80041bc:	080284fc 	.word	0x080284fc
 80041c0:	08028504 	.word	0x08028504
 80041c4:	0802850c 	.word	0x0802850c
 80041c8:	08028514 	.word	0x08028514
 80041cc:	0802851c 	.word	0x0802851c
 80041d0:	08028524 	.word	0x08028524
 80041d4:	0802852c 	.word	0x0802852c
 80041d8:	08028534 	.word	0x08028534
 80041dc:	0802853c 	.word	0x0802853c
 80041e0:	08028544 	.word	0x08028544
 80041e4:	0802854c 	.word	0x0802854c
 80041e8:	08028554 	.word	0x08028554
            case '\x1c': APPEND_STRING("\\u001c"); break;
 80041ec:	2306      	movs	r3, #6
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <json_serialize_string+0x860>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4962      	ldr	r1, [pc, #392]	; (8004384 <json_serialize_string+0x9d0>)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f021 f919 	bl	8025434 <memcpy>
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e08d      	b.n	800433a <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 800421e:	2306      	movs	r3, #6
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <json_serialize_string+0x892>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	461a      	mov	r2, r3
 800422c:	4956      	ldr	r1, [pc, #344]	; (8004388 <json_serialize_string+0x9d4>)
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f021 f900 	bl	8025434 <memcpy>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e074      	b.n	800433a <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8004250:	2306      	movs	r3, #6
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <json_serialize_string+0x8c4>
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	461a      	mov	r2, r3
 800425e:	494b      	ldr	r1, [pc, #300]	; (800438c <json_serialize_string+0x9d8>)
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f021 f8e7 	bl	8025434 <memcpy>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e05b      	b.n	800433a <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8004282:	2306      	movs	r3, #6
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <json_serialize_string+0x8f6>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	461a      	mov	r2, r3
 8004290:	493f      	ldr	r1, [pc, #252]	; (8004390 <json_serialize_string+0x9dc>)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f021 f8ce 	bl	8025434 <memcpy>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e042      	b.n	800433a <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 80042b4:	4b37      	ldr	r3, [pc, #220]	; (8004394 <json_serialize_string+0x9e0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 80042bc:	2302      	movs	r3, #2
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <json_serialize_string+0x930>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4933      	ldr	r1, [pc, #204]	; (8004398 <json_serialize_string+0x9e4>)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f021 f8b1 	bl	8025434 <memcpy>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 80042ec:	e025      	b.n	800433a <json_serialize_string+0x986>
                    APPEND_STRING("/");
 80042ee:	2301      	movs	r3, #1
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <json_serialize_string+0x962>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	461a      	mov	r2, r3
 80042fc:	4927      	ldr	r1, [pc, #156]	; (800439c <json_serialize_string+0x9e8>)
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f021 f898 	bl	8025434 <memcpy>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
                break;
 800431e:	e00c      	b.n	800433a <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <json_serialize_string+0x97e>
                    buf[0] = c;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7dfa      	ldrb	r2, [r7, #23]
 800432a:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3301      	adds	r3, #1
 8004330:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3301      	adds	r3, #1
 8004336:	61bb      	str	r3, [r7, #24]
                break;
 8004338:	bf00      	nop
    for (i = 0; i < len; i++) {
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	f4ff ab60 	bcc.w	8003a0a <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 800434a:	2302      	movs	r3, #2
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <json_serialize_string+0x9be>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	461a      	mov	r2, r3
 8004358:	4911      	ldr	r1, [pc, #68]	; (80043a0 <json_serialize_string+0x9ec>)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f021 f86a 	bl	8025434 <memcpy>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
    return written_total;
 800437a:	69bb      	ldr	r3, [r7, #24]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0802855c 	.word	0x0802855c
 8004388:	08028564 	.word	0x08028564
 800438c:	0802856c 	.word	0x0802856c
 8004390:	08028574 	.word	0x08028574
 8004394:	20000010 	.word	0x20000010
 8004398:	0802857c 	.word	0x0802857c
 800439c:	08028580 	.word	0x08028580
 80043a0:	08028488 	.word	0x08028488

080043a4 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <json_object_get_count+0x14>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	e000      	b.n	80043ba <json_object_get_count+0x16>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <json_object_get_name+0x1e>
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ffe4 	bl	80043a4 <json_object_get_count>
 80043dc:	4602      	mov	r2, r0
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d301      	bcc.n	80043e8 <json_object_get_name+0x22>
        return NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e005      	b.n	80043f4 <json_object_get_name+0x2e>
    }
    return object->names[index];
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <json_object_get_value_at+0x1e>
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ffc9 	bl	80043a4 <json_object_get_count>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4293      	cmp	r3, r2
 8004418:	d301      	bcc.n	800441e <json_object_get_value_at+0x22>
        return NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	e005      	b.n	800442a <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
    if (!object) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <json_object_get_wrapping_value+0x12>
        return NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	e001      	b.n	8004448 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d006      	beq.n	8004472 <json_array_get_value+0x1e>
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f810 	bl	800448a <json_array_get_count>
 800446a:	4602      	mov	r2, r0
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4293      	cmp	r3, r2
 8004470:	d301      	bcc.n	8004476 <json_array_get_value+0x22>
        return NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	e005      	b.n	8004482 <json_array_get_value+0x2e>
    }
    return array->items[index];
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	681b      	ldr	r3, [r3, #0]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <json_array_get_count+0x14>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	e000      	b.n	80044a0 <json_array_get_count+0x16>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <json_value_get_type>:
    }
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <json_value_get_type+0x14>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	e001      	b.n	80044c4 <json_value_get_type+0x18>
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ffe7 	bl	80044ac <json_value_get_type>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d102      	bne.n	80044ea <json_value_get_object+0x1a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	e000      	b.n	80044ec <json_value_get_object+0x1c>
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ffd5 	bl	80044ac <json_value_get_type>
 8004502:	4603      	mov	r3, r0
 8004504:	2b05      	cmp	r3, #5
 8004506:	d102      	bne.n	800450e <json_value_get_array+0x1a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	e000      	b.n	8004510 <json_value_get_array+0x1c>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ffc3 	bl	80044ac <json_value_get_type>
 8004526:	4603      	mov	r3, r0
 8004528:	2b02      	cmp	r3, #2
 800452a:	d102      	bne.n	8004532 <json_value_get_string_desc+0x1a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3308      	adds	r3, #8
 8004530:	e000      	b.n	8004534 <json_value_get_string_desc+0x1c>
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ffe7 	bl	8004518 <json_value_get_string_desc>
 800454a:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <json_value_get_string+0x1c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	e000      	b.n	800455a <json_value_get_string+0x1e>
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ffd4 	bl	8004518 <json_value_get_string_desc>
 8004570:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <json_value_get_string_len+0x1c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	e000      	b.n	8004580 <json_value_get_string_len+0x1e>
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff8b 	bl	80044ac <json_value_get_type>
 8004596:	4603      	mov	r3, r0
 8004598:	2b03      	cmp	r3, #3
 800459a:	d103      	bne.n	80045a4 <json_value_get_number+0x1c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045a2:	e003      	b.n	80045ac <json_value_get_number+0x24>
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80045b0:	eeb0 0a47 	vmov.f32	s0, s14
 80045b4:	eef0 0a67 	vmov.f32	s1, s15
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ff70 	bl	80044ac <json_value_get_type>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d102      	bne.n	80045d8 <json_value_get_boolean+0x1a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	e001      	b.n	80045dc <json_value_get_boolean+0x1e>
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff5d 	bl	80044ac <json_value_get_type>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d012      	beq.n	800461e <json_value_free+0x3a>
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	dc16      	bgt.n	800462a <json_value_free+0x46>
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d007      	beq.n	8004610 <json_value_free+0x2c>
 8004600:	2b04      	cmp	r3, #4
 8004602:	d112      	bne.n	800462a <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fe01 	bl	8003210 <json_object_free>
            break;
 800460e:	e00d      	b.n	800462c <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <json_value_free+0x58>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6892      	ldr	r2, [r2, #8]
 8004618:	4610      	mov	r0, r2
 800461a:	4798      	blx	r3
            break;
 800461c:	e006      	b.n	800462c <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fe08 	bl	8003238 <json_array_free>
            break;
 8004628:	e000      	b.n	800462c <json_value_free+0x48>
        default:
            break;
 800462a:	bf00      	nop
    }
    parson_free(value);
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <json_value_free+0x58>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2000000c 	.word	0x2000000c

08004640 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <json_value_init_object+0x50>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2010      	movs	r0, #16
 800464c:	4798      	blx	r3
 800464e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <json_value_init_object+0x1a>
        return NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	e016      	b.n	8004688 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2204      	movs	r2, #4
 8004664:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe fb24 	bl	8002cb4 <json_object_make>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <json_value_init_object+0x46>
        parson_free(new_value);
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <json_value_init_object+0x54>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
        return NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <json_value_init_object+0x48>
    }
    return new_value;
 8004686:	687b      	ldr	r3, [r7, #4]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000008 	.word	0x20000008
 8004694:	2000000c 	.word	0x2000000c

08004698 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8004698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 80046a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ae:	f7fc fa15 	bl	8000adc <__aeabi_dcmpun>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d121      	bne.n	80046fc <json_value_init_number+0x64>
 80046b8:	683c      	ldr	r4, [r7, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80046c0:	2301      	movs	r3, #1
 80046c2:	461e      	mov	r6, r3
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <json_value_init_number+0x9c>)
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fc fa05 	bl	8000adc <__aeabi_dcmpun>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <json_value_init_number+0x58>
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <json_value_init_number+0x9c>)
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7fc f9dd 	bl	8000aa0 <__aeabi_dcmple>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <json_value_init_number+0x58>
 80046ec:	2300      	movs	r3, #0
 80046ee:	461e      	mov	r6, r3
 80046f0:	b2f3      	uxtb	r3, r6
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <json_value_init_number+0x68>
        return NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e015      	b.n	800472c <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <json_value_init_number+0xa0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2010      	movs	r0, #16
 8004706:	4798      	blx	r3
 8004708:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <json_value_init_number+0x7c>
        return NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	e00b      	b.n	800472c <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2203      	movs	r2, #3
 800471e:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004726:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004734:	7fefffff 	.word	0x7fefffff
 8004738:	20000008 	.word	0x20000008

0800473c <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b096      	sub	sp, #88	; 0x58
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2300      	movs	r3, #0
 800474c:	2200      	movs	r2, #0
 800474e:	2100      	movs	r1, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fe fd99 	bl	8003288 <json_serialize_to_buffer_r>
 8004756:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	2b00      	cmp	r3, #0
 800475c:	db02      	blt.n	8004764 <json_serialization_size+0x28>
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	3301      	adds	r3, #1
 8004762:	e000      	b.n	8004766 <json_serialization_size+0x2a>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3750      	adds	r7, #80	; 0x50
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 800476e:	b580      	push	{r7, lr}
 8004770:	b088      	sub	sp, #32
 8004772:	af02      	add	r7, sp, #8
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
    int written = -1;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff ffdb 	bl	800473c <json_serialization_size>
 8004786:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <json_serialize_to_buffer+0x28>
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d202      	bcs.n	800479c <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	e00f      	b.n	80047bc <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 800479c:	2300      	movs	r3, #0
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	2200      	movs	r2, #0
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7fe fd6e 	bl	8003288 <json_serialize_to_buffer_r>
 80047ac:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da02      	bge.n	80047ba <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	e000      	b.n	80047bc <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffb2 	bl	800473c <json_serialization_size>
 80047d8:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <json_serialize_to_string+0x24>
        return NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e018      	b.n	800481a <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <json_serialize_to_string+0x60>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	4798      	blx	r3
 80047f0:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <json_serialize_to_string+0x38>
        return NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e00e      	b.n	800481a <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ffb4 	bl	800476e <json_serialize_to_buffer>
 8004806:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f80a 	bl	8004828 <json_free_serialized_string>
        return NULL;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <json_serialize_to_string+0x56>
    }
    return buf;
 8004818:	68fb      	ldr	r3, [r7, #12]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000008 	.word	0x20000008

08004828 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <json_free_serialized_string+0x18>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	2000000c 	.word	0x2000000c

08004844 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b08e      	sub	sp, #56	; 0x38
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <json_object_set_value+0x3e>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <json_object_set_value+0x3e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <json_object_set_value+0x3e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <json_object_set_value+0x44>
        return JSONFailure;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e095      	b.n	80049b4 <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 8004888:	68b8      	ldr	r0, [r7, #8]
 800488a:	f7fb fc79 	bl	8000180 <strlen>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7fe f9e1 	bl	8002c5a <hash_string>
 8004898:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f7fb fc6e 	bl	8000180 <strlen>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f107 0314 	add.w	r3, r7, #20
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7fe fbb4 	bl	800301e <json_object_get_cell_ix>
 80048b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01f      	beq.n	80048fe <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 80048da:	6a38      	ldr	r0, [r7, #32]
 80048dc:	f7ff fe82 	bl	80045e4 <json_value_free>
        object->values[item_ix] = value;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fd9f 	bl	8004432 <json_object_get_wrapping_value>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e05a      	b.n	80049b4 <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	429a      	cmp	r2, r3
 8004908:	d316      	bcc.n	8004938 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7fe fb1c 	bl	8002f48 <json_object_grow_and_rehash>
 8004910:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <json_object_set_value+0xda>
            return JSONFailure;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	e04a      	b.n	80049b4 <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f7fb fc2e 	bl	8000180 <strlen>
 8004924:	4602      	mov	r2, r0
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7fe fb74 	bl	800301e <json_object_get_cell_ix>
 8004936:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f7fe f97d 	bl	8002c38 <parson_strdup>
 800493e:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <json_object_set_value+0x108>
        return JSONFailure;
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	e033      	b.n	80049b4 <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	6992      	ldr	r2, [r2, #24]
 800496a:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498a:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499a:	601a      	str	r2, [r3, #0]
    object->count++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fd43 	bl	8004432 <json_object_get_wrapping_value>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3730      	adds	r7, #48	; 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 80049ca:	ed97 0b00 	vldr	d0, [r7]
 80049ce:	f7ff fe63 	bl	8004698 <json_value_init_number>
 80049d2:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff ff33 	bl	8004844 <json_object_set_value>
 80049de:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <json_object_set_number+0x30>
        json_value_free(value);
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7ff fdfc 	bl	80045e4 <json_value_free>
    }
    return status;
 80049ec:	693b      	ldr	r3, [r7, #16]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_RCC_EnableRTC>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_APB1_GRP1_EnableClock>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <MX_RTC_Init+0x64>)
 8004a60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004a74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004a8e:	480a      	ldr	r0, [pc, #40]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004a90:	f018 feb2 	bl	801d7f8 <HAL_RTC_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8004a9a:	f7fe f887 	bl	8002bac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <MX_RTC_Init+0x60>)
 8004aa4:	f018 ffa8 	bl	801d9f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8004aae:	f7fe f87d 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000cc8 	.word	0x20000cc8
 8004abc:	40002800 	.word	0x40002800

08004ac0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b096      	sub	sp, #88	; 0x58
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ac8:	f107 0308 	add.w	r3, r7, #8
 8004acc:	2250      	movs	r2, #80	; 0x50
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f020 fcd7 	bl	8025484 <memset>
  if(rtcHandle->Instance==RTC)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <HAL_RTC_MspInit+0x64>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d11d      	bne.n	8004b1c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f018 fbf3 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004afc:	f7fe f856 	bl	8002bac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b00:	f7ff ff80 	bl	8004a04 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004b04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b08:	f7ff ff8d 	bl	8004a26 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2003      	movs	r0, #3
 8004b12:	f015 f832 	bl	8019b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004b16:	2003      	movs	r0, #3
 8004b18:	f015 f849 	bl	8019bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3758      	adds	r7, #88	; 0x58
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40002800 	.word	0x40002800

08004b28 <LL_AHB3_GRP1_EnableClock>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004b5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b62:	f7ff ffe1 	bl	8004b28 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	202e      	movs	r0, #46	; 0x2e
 8004b6c:	f015 f805 	bl	8019b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004b70:	202e      	movs	r0, #46	; 0x2e
 8004b72:	f015 f81c 	bl	8019bae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b7e:	e7fe      	b.n	8004b7e <NMI_Handler+0x4>

08004b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b84:	e7fe      	b.n	8004b84 <HardFault_Handler+0x4>

08004b86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b86:	b480      	push	{r7}
 8004b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b8a:	e7fe      	b.n	8004b8a <MemManage_Handler+0x4>

08004b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <BusFault_Handler+0x4>

08004b92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b96:	e7fe      	b.n	8004b96 <UsageFault_Handler+0x4>

08004b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bc6:	f014 fe65 	bl	8019894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004bd2:	f7fd fa6f 	bl	80020b4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004bde:	2001      	movs	r0, #1
 8004be0:	f015 fdf4 	bl	801a7cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004bec:	2002      	movs	r0, #2
 8004bee:	f015 fded 	bl	801a7cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004bfa:	2010      	movs	r0, #16
 8004bfc:	f015 fde6 	bl	801a7cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004c08:	4802      	ldr	r0, [pc, #8]	; (8004c14 <DMA1_Channel1_IRQHandler+0x10>)
 8004c0a:	f015 f9f6 	bl	8019ffa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000ddc 	.word	0x20000ddc

08004c18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 8004c22:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d039      	beq.n	8004cb2 <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2210      	movs	r2, #16
 8004c44:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c86:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <LPUART1_IRQHandler+0xac>)
 8004caa:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <LPUART1_IRQHandler+0xb0>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004cb2:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <LPUART1_IRQHandler+0xa8>)
 8004cb4:	f019 f8a6 	bl	801de04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000d48 	.word	0x20000d48
 8004cc4:	2000a3cc 	.word	0x2000a3cc
 8004cc8:	2000a3cd 	.word	0x2000a3cd

08004ccc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004cd0:	f01f fc22 	bl	8024518 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004cd4:	bf00      	nop
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004cdc:	f01f fc54 	bl	8024588 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004ce8:	f015 fd94 	bl	801a814 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <DMA2_Channel4_IRQHandler+0x10>)
 8004cf6:	f015 f980 	bl	8019ffa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20009324 	.word	0x20009324

08004d04 <LL_AHB2_GRP1_EnableClock>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_APB1_GRP1_EnableClock>:
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_APB1_GRP1_DisableClock>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7e:	4013      	ands	r3, r2
 8004d80:	658b      	str	r3, [r1, #88]	; 0x58
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8004d9a:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <BSP_I2C1_Init+0x70>)
 8004d9c:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <BSP_I2C1_Init+0x74>)
 8004d9e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <BSP_I2C1_Init+0x78>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	4918      	ldr	r1, [pc, #96]	; (8004e08 <BSP_I2C1_Init+0x78>)
 8004da8:	600a      	str	r2, [r1, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d122      	bne.n	8004df4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8004dae:	4814      	ldr	r0, [pc, #80]	; (8004e00 <BSP_I2C1_Init+0x70>)
 8004db0:	f016 fa1d 	bl	801b1ee <HAL_I2C_GetState>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11c      	bne.n	8004df4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004dba:	4811      	ldr	r0, [pc, #68]	; (8004e00 <BSP_I2C1_Init+0x70>)
 8004dbc:	f000 f8ee 	bl	8004f9c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8004dc6:	480e      	ldr	r0, [pc, #56]	; (8004e00 <BSP_I2C1_Init+0x70>)
 8004dc8:	f000 f8a4 	bl	8004f14 <MX_I2C1_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004dd2:	f06f 0307 	mvn.w	r3, #7
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	e00c      	b.n	8004df4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4808      	ldr	r0, [pc, #32]	; (8004e00 <BSP_I2C1_Init+0x70>)
 8004dde:	f016 fd07 	bl	801b7f0 <HAL_I2CEx_ConfigAnalogFilter>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004de8:	f06f 0307 	mvn.w	r3, #7
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e001      	b.n	8004df4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004df4:	687b      	ldr	r3, [r7, #4]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000cec 	.word	0x20000cec
 8004e04:	40005400 	.word	0x40005400
 8004e08:	20000d40 	.word	0x20000d40

08004e0c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <BSP_I2C1_DeInit+0x48>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d014      	beq.n	8004e48 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <BSP_I2C1_DeInit+0x48>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <BSP_I2C1_DeInit+0x48>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <BSP_I2C1_DeInit+0x48>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <BSP_I2C1_DeInit+0x4c>)
 8004e32:	f000 f8f7 	bl	8005024 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004e36:	4808      	ldr	r0, [pc, #32]	; (8004e58 <BSP_I2C1_DeInit+0x4c>)
 8004e38:	f015 fd9f 	bl	801a97a <HAL_I2C_DeInit>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004e42:	f06f 0307 	mvn.w	r3, #7
 8004e46:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004e48:	687b      	ldr	r3, [r7, #4]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000d40 	.word	0x20000d40
 8004e58:	20000cec 	.word	0x20000cec

08004e5c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	4603      	mov	r3, r0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	80fb      	strh	r3, [r7, #6]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004e70:	88bb      	ldrh	r3, [r7, #4]
 8004e72:	88f9      	ldrh	r1, [r7, #6]
 8004e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e78:	9200      	str	r2, [sp, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	480b      	ldr	r0, [pc, #44]	; (8004eac <BSP_I2C1_Send+0x50>)
 8004e7e:	f015 fdab 	bl	801a9d8 <HAL_I2C_Master_Transmit>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00c      	beq.n	8004ea2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8004e88:	4808      	ldr	r0, [pc, #32]	; (8004eac <BSP_I2C1_Send+0x50>)
 8004e8a:	f016 f9be 	bl	801b20a <HAL_I2C_GetError>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d003      	beq.n	8004e9c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004e94:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e002      	b.n	8004ea2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004e9c:	f06f 0303 	mvn.w	r3, #3
 8004ea0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000cec 	.word	0x20000cec

08004eb0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	80fb      	strh	r3, [r7, #6]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004ec4:	88bb      	ldrh	r3, [r7, #4]
 8004ec6:	88f9      	ldrh	r1, [r7, #6]
 8004ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ecc:	9200      	str	r2, [sp, #0]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <BSP_I2C1_Recv+0x50>)
 8004ed2:	f015 fe75 	bl	801abc0 <HAL_I2C_Master_Receive>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8004edc:	4808      	ldr	r0, [pc, #32]	; (8004f00 <BSP_I2C1_Recv+0x50>)
 8004ede:	f016 f994 	bl	801b20a <HAL_I2C_GetError>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d003      	beq.n	8004ef0 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004ee8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e002      	b.n	8004ef6 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004ef0:	f06f 0303 	mvn.w	r3, #3
 8004ef4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000cec 	.word	0x20000cec

08004f04 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f08:	f014 fcd8 	bl	80198bc <HAL_GetTick>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <MX_I2C1_Init+0x80>)
 8004f24:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <MX_I2C1_Init+0x84>)
 8004f2a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f015 fc80 	bl	801a85c <HAL_I2C_Init>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f66:	2100      	movs	r1, #0
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f016 fc41 	bl	801b7f0 <HAL_I2CEx_ConfigAnalogFilter>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f016 fc83 	bl	801b886 <HAL_I2CEx_ConfigDigitalFilter>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40005400 	.word	0x40005400
 8004f98:	00707cbb 	.word	0x00707cbb

08004f9c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b09c      	sub	sp, #112	; 0x70
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fa4:	f107 030c 	add.w	r3, r7, #12
 8004fa8:	2250      	movs	r2, #80	; 0x50
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f020 fa69 	bl	8025484 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004fb6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f018 f98b 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f7ff fe9c 	bl	8004d04 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fd2:	2312      	movs	r3, #18
 8004fd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004fde:	2304      	movs	r3, #4
 8004fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004fe2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	480d      	ldr	r0, [pc, #52]	; (8005020 <I2C1_MspInit+0x84>)
 8004fea:	f015 f957 	bl	801a29c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ff4:	2312      	movs	r3, #18
 8004ff6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005000:	2304      	movs	r3, #4
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005004:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005008:	4619      	mov	r1, r3
 800500a:	4805      	ldr	r0, [pc, #20]	; (8005020 <I2C1_MspInit+0x84>)
 800500c:	f015 f946 	bl	801a29c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005010:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005014:	f7ff fe8f 	bl	8004d36 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005018:	bf00      	nop
 800501a:	3770      	adds	r7, #112	; 0x70
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	48000400 	.word	0x48000400

08005024 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800502c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005030:	f7ff fe9a 	bl	8004d68 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8005034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005038:	4805      	ldr	r0, [pc, #20]	; (8005050 <I2C1_MspDeInit+0x2c>)
 800503a:	f015 fa9f 	bl	801a57c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800503e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005042:	4803      	ldr	r0, [pc, #12]	; (8005050 <I2C1_MspDeInit+0x2c>)
 8005044:	f015 fa9a 	bl	801a57c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	48000400 	.word	0x48000400

08005054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return 1;
 8005058:	2301      	movs	r3, #1
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_kill>:

int _kill(int pid, int sig)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800506e:	f01f ff87 	bl	8024f80 <__errno>
 8005072:	4603      	mov	r3, r0
 8005074:	2216      	movs	r2, #22
 8005076:	601a      	str	r2, [r3, #0]
  return -1;
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_exit>:

void _exit (int status)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800508c:	f04f 31ff 	mov.w	r1, #4294967295
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ffe7 	bl	8005064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005096:	e7fe      	b.n	8005096 <_exit+0x12>

08005098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e00a      	b.n	80050c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050aa:	f3af 8000 	nop.w
 80050ae:	4601      	mov	r1, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	60ba      	str	r2, [r7, #8]
 80050b6:	b2ca      	uxtb	r2, r1
 80050b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3301      	adds	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	dbf0      	blt.n	80050aa <_read+0x12>
  }

  return len;
 80050c8:	687b      	ldr	r3, [r7, #4]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050fa:	605a      	str	r2, [r3, #4]
  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <_isatty>:

int _isatty(int file)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005112:	2301      	movs	r3, #1
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <_sbrk+0x5c>)
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <_sbrk+0x60>)
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005150:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <_sbrk+0x64>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <_sbrk+0x64>)
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <_sbrk+0x68>)
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <_sbrk+0x64>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d207      	bcs.n	800517c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800516c:	f01f ff08 	bl	8024f80 <__errno>
 8005170:	4603      	mov	r3, r0
 8005172:	220c      	movs	r2, #12
 8005174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	e009      	b.n	8005190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800517c:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <_sbrk+0x64>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <_sbrk+0x64>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	4a05      	ldr	r2, [pc, #20]	; (80051a0 <_sbrk+0x64>)
 800518c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20030000 	.word	0x20030000
 800519c:	00000400 	.word	0x00000400
 80051a0:	20000d44 	.word	0x20000d44
 80051a4:	2000aa58 	.word	0x2000aa58

080051a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <SystemInit+0x98>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	4a23      	ldr	r2, [pc, #140]	; (8005240 <SystemInit+0x98>)
 80051b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80051d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80051d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <SystemInit+0x9c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f2:	f023 0305 	bic.w	r3, r3, #5
 80051f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <SystemInit+0xa0>)
 8005214:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <SystemInit+0xa0>)
 800521c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	2200      	movs	r2, #0
 8005234:	619a      	str	r2, [r3, #24]
}
 8005236:	bf00      	nop
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	faf6fefb 	.word	0xfaf6fefb
 8005248:	22041000 	.word	0x22041000

0800524c <LL_AHB2_GRP1_EnableClock>:
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800525a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4313      	orrs	r3, r2
 8005262:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4013      	ands	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_APB1_GRP2_EnableClock>:
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800528c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4313      	orrs	r3, r2
 8005294:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4013      	ands	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80052b4:	4b29      	ldr	r3, [pc, #164]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <MX_LPUART1_UART_Init+0xb0>)
 80052b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80052ba:	4b28      	ldr	r3, [pc, #160]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052c2:	4b26      	ldr	r3, [pc, #152]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80052ce:	4b23      	ldr	r3, [pc, #140]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80052d4:	4b21      	ldr	r3, [pc, #132]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052d6:	220c      	movs	r2, #12
 80052d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80052f8:	4818      	ldr	r0, [pc, #96]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 80052fa:	f018 fc59 	bl	801dbb0 <HAL_UART_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8005304:	f7fd fc52 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005308:	2100      	movs	r1, #0
 800530a:	4814      	ldr	r0, [pc, #80]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 800530c:	f019 ff74 	bl	801f1f8 <HAL_UARTEx_SetTxFifoThreshold>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005316:	f7fd fc49 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531a:	2100      	movs	r1, #0
 800531c:	480f      	ldr	r0, [pc, #60]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 800531e:	f019 ffa9 	bl	801f274 <HAL_UARTEx_SetRxFifoThreshold>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005328:	f7fd fc40 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800532c:	480b      	ldr	r0, [pc, #44]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 800532e:	f019 ff2a 	bl	801f186 <HAL_UARTEx_DisableFifoMode>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005338:	f7fd fc38 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0210 	orr.w	r2, r2, #16
 800534a:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 800534c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005350:	4904      	ldr	r1, [pc, #16]	; (8005364 <MX_LPUART1_UART_Init+0xb4>)
 8005352:	4802      	ldr	r0, [pc, #8]	; (800535c <MX_LPUART1_UART_Init+0xac>)
 8005354:	f018 fd0a 	bl	801dd6c <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20000d48 	.word	0x20000d48
 8005360:	40008000 	.word	0x40008000
 8005364:	20009bcc 	.word	0x20009bcc

08005368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b09c      	sub	sp, #112	; 0x70
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	2250      	movs	r2, #80	; 0x50
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f020 f87b 	bl	8025484 <memset>
  if(uartHandle->Instance==LPUART1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2e      	ldr	r2, [pc, #184]	; (800544c <HAL_UART_MspInit+0xe4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d155      	bne.n	8005444 <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005398:	2302      	movs	r3, #2
 800539a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800539c:	2300      	movs	r3, #0
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053a0:	f107 030c 	add.w	r3, r7, #12
 80053a4:	4618      	mov	r0, r3
 80053a6:	f017 ff99 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80053b0:	f7fd fbfc 	bl	8002bac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7ff ff62 	bl	800527e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ba:	2004      	movs	r0, #4
 80053bc:	f7ff ff46 	bl	800524c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 80053c0:	2303      	movs	r3, #3
 80053c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	2302      	movs	r3, #2
 80053c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	2300      	movs	r3, #0
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80053d0:	2308      	movs	r3, #8
 80053d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053d8:	4619      	mov	r1, r3
 80053da:	481d      	ldr	r0, [pc, #116]	; (8005450 <HAL_UART_MspInit+0xe8>)
 80053dc:	f014 ff5e 	bl	801a29c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80053e0:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <HAL_UART_MspInit+0xec>)
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_UART_MspInit+0xf0>)
 80053e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <HAL_UART_MspInit+0xec>)
 80053e8:	2210      	movs	r2, #16
 80053ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_UART_MspInit+0xec>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053f2:	4b18      	ldr	r3, [pc, #96]	; (8005454 <HAL_UART_MspInit+0xec>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_UART_MspInit+0xec>)
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <HAL_UART_MspInit+0xec>)
 8005400:	2200      	movs	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_UART_MspInit+0xec>)
 8005406:	2200      	movs	r2, #0
 8005408:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_UART_MspInit+0xec>)
 800540c:	2200      	movs	r2, #0
 800540e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_UART_MspInit+0xec>)
 8005412:	2200      	movs	r2, #0
 8005414:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005416:	480f      	ldr	r0, [pc, #60]	; (8005454 <HAL_UART_MspInit+0xec>)
 8005418:	f014 fc0e 	bl	8019c38 <HAL_DMA_Init>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8005422:	f7fd fbc3 	bl	8002bac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <HAL_UART_MspInit+0xec>)
 800542a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_UART_MspInit+0xec>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	2025      	movs	r0, #37	; 0x25
 800543a:	f014 fb9e 	bl	8019b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800543e:	2025      	movs	r0, #37	; 0x25
 8005440:	f014 fbb5 	bl	8019bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8005444:	bf00      	nop
 8005446:	3770      	adds	r7, #112	; 0x70
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40008000 	.word	0x40008000
 8005450:	48000800 	.word	0x48000800
 8005454:	20000ddc 	.word	0x20000ddc
 8005458:	40020008 	.word	0x40020008

0800545c <LL_AHB2_GRP1_EnableClock>:
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4313      	orrs	r3, r2
 8005472:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_APB1_GRP1_EnableClock>:
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800549c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4013      	ands	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054c6:	4a11      	ldr	r2, [pc, #68]	; (800550c <MX_USB_PCD_Init+0x4c>)
 80054c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054cc:	2208      	movs	r2, #8
 80054ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054d2:	2202      	movs	r2, #2
 80054d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054d8:	2202      	movs	r2, #2
 80054da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054de:	2200      	movs	r2, #0
 80054e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80054f4:	4804      	ldr	r0, [pc, #16]	; (8005508 <MX_USB_PCD_Init+0x48>)
 80054f6:	f016 fa99 	bl	801ba2c <HAL_PCD_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8005500:	f7fd fb54 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000e3c 	.word	0x20000e3c
 800550c:	40006800 	.word	0x40006800

08005510 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b09c      	sub	sp, #112	; 0x70
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005528:	f107 030c 	add.w	r3, r7, #12
 800552c:	2250      	movs	r2, #80	; 0x50
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f01f ffa7 	bl	8025484 <memset>
  if(pcdHandle->Instance==USB)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <HAL_PCD_MspInit+0xa8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d136      	bne.n	80055ae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005544:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8005546:	2318      	movs	r3, #24
 8005548:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800554a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800554e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8005550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005554:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8005556:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800555a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800555c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005560:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	4618      	mov	r0, r3
 800556e:	f017 feb5 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8005578:	f7fd fb18 	bl	8002bac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557c:	2001      	movs	r0, #1
 800557e:	f7ff ff6d 	bl	800545c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005582:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005586:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005588:	2302      	movs	r3, #2
 800558a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558c:	2300      	movs	r3, #0
 800558e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005590:	2300      	movs	r3, #0
 8005592:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005594:	230a      	movs	r3, #10
 8005596:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800559c:	4619      	mov	r1, r3
 800559e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055a2:	f014 fe7b 	bl	801a29c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80055a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80055aa:	f7ff ff70 	bl	800548e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80055ae:	bf00      	nop
 80055b0:	3770      	adds	r7, #112	; 0x70
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40006800 	.word	0x40006800

080055bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80055bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055c0:	3304      	adds	r3, #4

080055c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80055c6:	d3f9      	bcc.n	80055bc <CopyDataInit>
  bx lr
 80055c8:	4770      	bx	lr

080055ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80055ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80055cc:	3004      	adds	r0, #4

080055ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80055ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80055d0:	d3fb      	bcc.n	80055ca <FillZerobss>
  bx lr
 80055d2:	4770      	bx	lr

080055d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055d4:	480c      	ldr	r0, [pc, #48]	; (8005608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80055d8:	f7ff fde6 	bl	80051a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80055dc:	480b      	ldr	r0, [pc, #44]	; (800560c <LoopForever+0x6>)
 80055de:	490c      	ldr	r1, [pc, #48]	; (8005610 <LoopForever+0xa>)
 80055e0:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <LoopForever+0xe>)
 80055e2:	2300      	movs	r3, #0
 80055e4:	f7ff ffed 	bl	80055c2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <LoopForever+0x12>)
 80055ea:	490c      	ldr	r1, [pc, #48]	; (800561c <LoopForever+0x16>)
 80055ec:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <LoopForever+0x1a>)
 80055ee:	2300      	movs	r3, #0
 80055f0:	f7ff ffe7 	bl	80055c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80055f4:	480b      	ldr	r0, [pc, #44]	; (8005624 <LoopForever+0x1e>)
 80055f6:	490c      	ldr	r1, [pc, #48]	; (8005628 <LoopForever+0x22>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	f7ff ffe8 	bl	80055ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055fe:	f01f fe7d 	bl	80252fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005602:	f7fd f9fb 	bl	80029fc <main>

08005606 <LoopForever>:

LoopForever:
  b LoopForever
 8005606:	e7fe      	b.n	8005606 <LoopForever>
  ldr   r0, =_estack
 8005608:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800560c:	20000008 	.word	0x20000008
 8005610:	20000288 	.word	0x20000288
 8005614:	0802a83c 	.word	0x0802a83c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005618:	200301e3 	.word	0x200301e3
 800561c:	200301e3 	.word	0x200301e3
 8005620:	0802b385 	.word	0x0802b385
  INIT_BSS _sbss, _ebss
 8005624:	20000b58 	.word	0x20000b58
 8005628:	2000aa58 	.word	0x2000aa58

0800562c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800562c:	e7fe      	b.n	800562c <ADC1_IRQHandler>

0800562e <LL_AHB2_GRP1_EnableClock>:
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800563c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4313      	orrs	r3, r2
 8005644:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005652:	68fb      	ldr	r3, [r7, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <VL53L1A2_Init+0xe4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	4934      	ldr	r1, [pc, #208]	; (8005744 <VL53L1A2_Init+0xe4>)
 8005672:	600a      	str	r2, [r1, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d154      	bne.n	8005722 <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8005678:	f000 f8d4 	bl	8005824 <_I2cFailRecover>
 800567c:	4602      	mov	r2, r0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4313      	orrs	r3, r2
 8005682:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8005684:	f7ff fb84 	bl	8004d90 <BSP_I2C1_Init>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4313      	orrs	r3, r2
 800568e:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d147      	bne.n	8005726 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8005696:	463a      	mov	r2, r7
 8005698:	2302      	movs	r3, #2
 800569a:	2100      	movs	r1, #0
 800569c:	2086      	movs	r0, #134	; 0x86
 800569e:	f000 f953 	bl	8005948 <_ExpanderRd>
 80056a2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d13f      	bne.n	800572a <VL53L1A2_Init+0xca>
 80056aa:	783b      	ldrb	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13c      	bne.n	800572a <VL53L1A2_Init+0xca>
 80056b0:	787b      	ldrb	r3, [r7, #1]
 80056b2:	2b16      	cmp	r3, #22
 80056b4:	d139      	bne.n	800572a <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80056b6:	463a      	mov	r2, r7
 80056b8:	2302      	movs	r3, #2
 80056ba:	2100      	movs	r1, #0
 80056bc:	2084      	movs	r0, #132	; 0x84
 80056be:	f000 f943 	bl	8005948 <_ExpanderRd>
 80056c2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d131      	bne.n	800572e <VL53L1A2_Init+0xce>
 80056ca:	783b      	ldrb	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d12e      	bne.n	800572e <VL53L1A2_Init+0xce>
 80056d0:	787b      	ldrb	r3, [r7, #1]
 80056d2:	2b16      	cmp	r3, #22
 80056d4:	d12b      	bne.n	800572e <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <VL53L1A2_Init+0xe8>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80056dc:	23ff      	movs	r3, #255	; 0xff
 80056de:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80056e0:	23ff      	movs	r3, #255	; 0xff
 80056e2:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 80056e4:	463a      	mov	r2, r7
 80056e6:	2302      	movs	r3, #2
 80056e8:	2114      	movs	r1, #20
 80056ea:	2086      	movs	r0, #134	; 0x86
 80056ec:	f000 f95e 	bl	80059ac <_ExpanderWR>
 80056f0:	6078      	str	r0, [r7, #4]

	  if (status)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11c      	bne.n	8005732 <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80056f8:	23ff      	movs	r3, #255	; 0xff
 80056fa:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80056fc:	23bf      	movs	r3, #191	; 0xbf
 80056fe:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8005700:	463a      	mov	r2, r7
 8005702:	2302      	movs	r3, #2
 8005704:	2114      	movs	r1, #20
 8005706:	2084      	movs	r0, #132	; 0x84
 8005708:	f000 f950 	bl	80059ac <_ExpanderWR>
 800570c:	6078      	str	r0, [r7, #4]

	  if (status)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <VL53L1A2_Init+0xe8>)
 8005716:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800571a:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 800571c:	f000 f8f4 	bl	8005908 <_ExpandersSetAllIO>
 8005720:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8005722:	bf00      	nop
 8005724:	e008      	b.n	8005738 <VL53L1A2_Init+0xd8>
      goto done_err;
 8005726:	bf00      	nop
 8005728:	e006      	b.n	8005738 <VL53L1A2_Init+0xd8>
      goto done_err;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <VL53L1A2_Init+0xd8>
		  goto done_err;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <VL53L1A2_Init+0xd8>
		goto done_err;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <VL53L1A2_Init+0xd8>
		goto done_err;
 8005736:	bf00      	nop
  return status;
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20001130 	.word	0x20001130
 8005748:	20001134 	.word	0x20001134

0800574c <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	460a      	mov	r2, r1
 8005756:	71fb      	strb	r3, [r7, #7]
 8005758:	4613      	mov	r3, r2
 800575a:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d037      	beq.n	80057d2 <VL53L1A2_ResetId+0x86>
 8005762:	2b02      	cmp	r3, #2
 8005764:	dc4e      	bgt.n	8005804 <VL53L1A2_ResetId+0xb8>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01a      	beq.n	80057a0 <VL53L1A2_ResetId+0x54>
 800576a:	2b01      	cmp	r3, #1
 800576c:	d14a      	bne.n	8005804 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 8005770:	78db      	ldrb	r3, [r3, #3]
 8005772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005776:	b2da      	uxtb	r2, r3
 8005778:	4b27      	ldr	r3, [pc, #156]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 800577a:	70da      	strb	r2, [r3, #3]

      if (state)
 800577c:	79bb      	ldrb	r3, [r7, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8005782:	4b25      	ldr	r3, [pc, #148]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578a:	b2da      	uxtb	r2, r3
 800578c:	4b22      	ldr	r3, [pc, #136]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 800578e:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8005790:	2301      	movs	r3, #1
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <VL53L1A2_ResetId+0xd0>)
 8005794:	2113      	movs	r1, #19
 8005796:	2084      	movs	r0, #132	; 0x84
 8005798:	f000 f908 	bl	80059ac <_ExpanderWR>
 800579c:	60f8      	str	r0, [r7, #12]
      break;
 800579e:	e035      	b.n	800580c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057ac:	705a      	strb	r2, [r3, #1]

      if (state)
 80057ae:	79bb      	ldrb	r3, [r7, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80057b4:	4b18      	ldr	r3, [pc, #96]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b16      	ldr	r3, [pc, #88]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057c0:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80057c2:	2301      	movs	r3, #1
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <VL53L1A2_ResetId+0xd4>)
 80057c6:	2113      	movs	r1, #19
 80057c8:	2086      	movs	r0, #134	; 0x86
 80057ca:	f000 f8ef 	bl	80059ac <_ExpanderWR>
 80057ce:	60f8      	str	r0, [r7, #12]
      break;
 80057d0:	e01c      	b.n	800580c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057de:	705a      	strb	r2, [r3, #1]

      if (state)
 80057e0:	79bb      	ldrb	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d006      	beq.n	80057f4 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <VL53L1A2_ResetId+0xcc>)
 80057f2:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80057f4:	2301      	movs	r3, #1
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <VL53L1A2_ResetId+0xd4>)
 80057f8:	2113      	movs	r1, #19
 80057fa:	2086      	movs	r0, #134	; 0x86
 80057fc:	f000 f8d6 	bl	80059ac <_ExpanderWR>
 8005800:	60f8      	str	r0, [r7, #12]
      break;
 8005802:	e003      	b.n	800580c <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8005804:	f04f 33ff 	mov.w	r3, #4294967295
 8005808:	60fb      	str	r3, [r7, #12]
      goto done;
 800580a:	e000      	b.n	800580e <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 800580c:	bf00      	nop
  return status;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20001134 	.word	0x20001134
 800581c:	20001137 	.word	0x20001137
 8005820:	20001135 	.word	0x20001135

08005824 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800582e:	4b34      	ldr	r3, [pc, #208]	; (8005900 <_I2cFailRecover+0xdc>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	e05e      	b.n	80058f8 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800583a:	2002      	movs	r0, #2
 800583c:	f7ff fef7 	bl	800562e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8005840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005844:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005846:	2311      	movs	r3, #17
 8005848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800584a:	2301      	movs	r3, #1
 800584c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800584e:	463b      	mov	r3, r7
 8005850:	4619      	mov	r1, r3
 8005852:	482c      	ldr	r0, [pc, #176]	; (8005904 <_I2cFailRecover+0xe0>)
 8005854:	f014 fd22 	bl	801a29c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8005858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800585c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800585e:	2311      	movs	r3, #17
 8005860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005862:	2301      	movs	r3, #1
 8005864:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005866:	463b      	mov	r3, r7
 8005868:	4619      	mov	r1, r3
 800586a:	4826      	ldr	r0, [pc, #152]	; (8005904 <_I2cFailRecover+0xe0>)
 800586c:	f014 fd16 	bl	801a29c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8005870:	2201      	movs	r2, #1
 8005872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005876:	4823      	ldr	r0, [pc, #140]	; (8005904 <_I2cFailRecover+0xe0>)
 8005878:	f014 ff76 	bl	801a768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005882:	4820      	ldr	r0, [pc, #128]	; (8005904 <_I2cFailRecover+0xe0>)
 8005884:	f014 ff70 	bl	801a768 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8005888:	2300      	movs	r3, #0
 800588a:	75fb      	strb	r3, [r7, #23]
 800588c:	e014      	b.n	80058b8 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005894:	481b      	ldr	r0, [pc, #108]	; (8005904 <_I2cFailRecover+0xe0>)
 8005896:	f014 ff67 	bl	801a768 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800589a:	2001      	movs	r0, #1
 800589c:	f7fb ff96 	bl	80017cc <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80058a0:	2201      	movs	r2, #1
 80058a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058a6:	4817      	ldr	r0, [pc, #92]	; (8005904 <_I2cFailRecover+0xe0>)
 80058a8:	f014 ff5e 	bl	801a768 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fb ff8d 	bl	80017cc <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	3301      	adds	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b09      	cmp	r3, #9
 80058bc:	d9e7      	bls.n	800588e <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80058be:	7dbb      	ldrb	r3, [r7, #22]
 80058c0:	3301      	adds	r3, #1
 80058c2:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80058c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058c8:	480e      	ldr	r0, [pc, #56]	; (8005904 <_I2cFailRecover+0xe0>)
 80058ca:	f014 ff35 	bl	801a738 <HAL_GPIO_ReadPin>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <_I2cFailRecover+0xb6>
 80058d4:	7dbb      	ldrb	r3, [r7, #22]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d9d6      	bls.n	8005888 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80058da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058de:	4809      	ldr	r0, [pc, #36]	; (8005904 <_I2cFailRecover+0xe0>)
 80058e0:	f014 ff2a 	bl	801a738 <HAL_GPIO_ReadPin>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80058ea:	f06f 0304 	mvn.w	r3, #4
 80058ee:	e003      	b.n	80058f8 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <_I2cFailRecover+0xdc>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20001138 	.word	0x20001138
 8005904:	48000400 	.word	0x48000400

08005908 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800590e:	2302      	movs	r3, #2
 8005910:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <_ExpandersSetAllIO+0x38>)
 8005912:	2112      	movs	r1, #18
 8005914:	2086      	movs	r0, #134	; 0x86
 8005916:	f000 f849 	bl	80059ac <_ExpanderWR>
 800591a:	6078      	str	r0, [r7, #4]

  if (status)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8005922:	2302      	movs	r3, #2
 8005924:	4a07      	ldr	r2, [pc, #28]	; (8005944 <_ExpandersSetAllIO+0x3c>)
 8005926:	2112      	movs	r1, #18
 8005928:	2084      	movs	r0, #132	; 0x84
 800592a:	f000 f83f 	bl	80059ac <_ExpanderWR>
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	e000      	b.n	8005934 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8005932:	bf00      	nop

done_err:
  return status;
 8005934:	687b      	ldr	r3, [r7, #4]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20001134 	.word	0x20001134
 8005944:	20001136 	.word	0x20001136

08005948 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	b299      	uxth	r1, r3
 8005960:	f107 0213 	add.w	r2, r7, #19
 8005964:	2364      	movs	r3, #100	; 0x64
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2301      	movs	r3, #1
 800596a:	480f      	ldr	r0, [pc, #60]	; (80059a8 <_ExpanderRd+0x60>)
 800596c:	f015 f834 	bl	801a9d8 <HAL_I2C_Master_Transmit>
 8005970:	4603      	mov	r3, r0
 8005972:	617b      	str	r3, [r7, #20]

    if (status)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d110      	bne.n	800599c <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	b299      	uxth	r1, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	b29a      	uxth	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2064      	movs	r0, #100	; 0x64
 8005986:	fb00 f303 	mul.w	r3, r0, r3
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	4805      	ldr	r0, [pc, #20]	; (80059a8 <_ExpanderRd+0x60>)
 8005992:	f015 f915 	bl	801abc0 <HAL_I2C_Master_Receive>
 8005996:	4603      	mov	r3, r0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e000      	b.n	800599e <_ExpanderRd+0x56>
      break;
 800599c:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 800599e:	697b      	ldr	r3, [r7, #20]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000cec 	.word	0x20000cec

080059ac <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08c      	sub	sp, #48	; 0x30
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	3301      	adds	r3, #1
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f01f fd32 	bl	8025434 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	b299      	uxth	r1, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f107 0214 	add.w	r2, r7, #20
 80059e0:	2064      	movs	r0, #100	; 0x64
 80059e2:	9000      	str	r0, [sp, #0]
 80059e4:	4804      	ldr	r0, [pc, #16]	; (80059f8 <_ExpanderWR+0x4c>)
 80059e6:	f014 fff7 	bl	801a9d8 <HAL_I2C_Master_Transmit>
 80059ea:	4603      	mov	r3, r0
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	; 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20000cec 	.word	0x20000cec

080059fc <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d903      	bls.n	8005a12 <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a0a:	f06f 0301 	mvn.w	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e014      	b.n	8005a3c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 8005a12:	f7ff fe25 	bl	8005660 <VL53L1A2_Init>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8005a1c:	f06f 0303 	mvn.w	r3, #3
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e00b      	b.n	8005a3c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8005a24:	2101      	movs	r1, #1
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8fc 	bl	8005c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8f8 	bl	8005c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f935 	bl	8005ca4 <VL53L1CB_Probe>
 8005a3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d903      	bls.n	8005a60 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a58:	f06f 0301 	mvn.w	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e012      	b.n	8005a86 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	490b      	ldr	r1, [pc, #44]	; (8005a94 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da03      	bge.n	8005a82 <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a7a:	f06f 0304 	mvn.w	r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e001      	b.n	8005a86 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20001148 	.word	0x20001148
 8005a94:	2000113c 	.word	0x2000113c

08005a98 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d903      	bls.n	8005ab0 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005aa8:	f06f 0301 	mvn.w	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e012      	b.n	8005ad6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da03      	bge.n	8005ad2 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aca:	f06f 0304 	mvn.w	r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e001      	b.n	8005ad6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20001148 	.word	0x20001148
 8005ae4:	2000113c 	.word	0x2000113c

08005ae8 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d903      	bls.n	8005b00 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005af8:	f06f 0301 	mvn.w	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e012      	b.n	8005b26 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	490b      	ldr	r1, [pc, #44]	; (8005b34 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da03      	bge.n	8005b22 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b1a:	f06f 0304 	mvn.w	r3, #4
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e001      	b.n	8005b26 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20001148 	.word	0x20001148
 8005b34:	2000113c 	.word	0x2000113c

08005b38 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d903      	bls.n	8005b50 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b48:	f06f 0301 	mvn.w	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e012      	b.n	8005b76 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	490b      	ldr	r1, [pc, #44]	; (8005b84 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da03      	bge.n	8005b72 <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b6a:	f06f 0304 	mvn.w	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e001      	b.n	8005b76 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20001148 	.word	0x20001148
 8005b84:	2000113c 	.word	0x2000113c

08005b88 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d903      	bls.n	8005b9e <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b96:	f06f 0301 	mvn.w	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e011      	b.n	8005bc2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da03      	bge.n	8005bbe <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bb6:	f06f 0304 	mvn.w	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e001      	b.n	8005bc2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20001148 	.word	0x20001148
 8005bd0:	2000113c 	.word	0x2000113c

08005bd4 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d903      	bls.n	8005bec <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005be4:	f06f 0301 	mvn.w	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e012      	b.n	8005c12 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	490b      	ldr	r1, [pc, #44]	; (8005c20 <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4798      	blx	r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da03      	bge.n	8005c0e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c06:	f06f 0304 	mvn.w	r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e001      	b.n	8005c12 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c12:	68fb      	ldr	r3, [r7, #12]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20001148 	.word	0x20001148
 8005c20:	2000113c 	.word	0x2000113c

08005c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d903      	bls.n	8005c3c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c34:	f06f 0301 	mvn.w	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e02e      	b.n	8005c9a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d112      	bne.n	8005c68 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fd7f 	bl	800574c <VL53L1A2_ResetId>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da03      	bge.n	8005c5c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c54:	f06f 0303 	mvn.w	r3, #3
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e01e      	b.n	8005c9a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f7fb fdb5 	bl	80017cc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e018      	b.n	8005c9a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d112      	bne.n	8005c94 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fd69 	bl	800574c <VL53L1A2_ResetId>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da03      	bge.n	8005c88 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c80:	f06f 0303 	mvn.w	r3, #3
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e008      	b.n	8005c9a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8005c88:	2002      	movs	r0, #2
 8005c8a:	f7fb fd9f 	bl	80017cc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e002      	b.n	8005c9a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c94:	f06f 0301 	mvn.w	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8005cac:	2352      	movs	r3, #82	; 0x52
 8005cae:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8005cb0:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <VL53L1CB_Probe+0xf0>)
 8005cb2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8005cb4:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <VL53L1CB_Probe+0xf4>)
 8005cb6:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8005cb8:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <VL53L1CB_Probe+0xf8>)
 8005cba:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <VL53L1CB_Probe+0xfc>)
 8005cbe:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <VL53L1CB_Probe+0x100>)
 8005cc2:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	4a36      	ldr	r2, [pc, #216]	; (8005da8 <VL53L1CB_Probe+0x104>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f107 020c 	add.w	r2, r7, #12
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f013 f824 	bl	8018d26 <VL53L1CB_RegisterBusIO>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ce4:	f06f 0304 	mvn.w	r3, #4
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cea:	e04d      	b.n	8005d88 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f642 2290 	movw	r2, #10896	; 0x2a90
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	4a2c      	ldr	r2, [pc, #176]	; (8005da8 <VL53L1CB_Probe+0x104>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f107 0208 	add.w	r2, r7, #8
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f013 f8cc 	bl	8018e9e <VL53L1CB_ReadID>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d0c:	f06f 0304 	mvn.w	r3, #4
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e039      	b.n	8005d88 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d1e:	f06f 0306 	mvn.w	r3, #6
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	e030      	b.n	8005d88 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <VL53L1CB_Probe+0x108>)
 8005d28:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <VL53L1CB_Probe+0x10c>)
 8005d2a:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <VL53L1CB_Probe+0x104>)
 8005d38:	441a      	add	r2, r3
 8005d3a:	491e      	ldr	r1, [pc, #120]	; (8005db4 <VL53L1CB_Probe+0x110>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <VL53L1CB_Probe+0x108>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	491a      	ldr	r1, [pc, #104]	; (8005db4 <VL53L1CB_Probe+0x110>)
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d5a:	f06f 0304 	mvn.w	r3, #4
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	e012      	b.n	8005d88 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <VL53L1CB_Probe+0x108>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4912      	ldr	r1, [pc, #72]	; (8005db4 <VL53L1CB_Probe+0x110>)
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d70:	4911      	ldr	r1, [pc, #68]	; (8005db8 <VL53L1CB_Probe+0x114>)
 8005d72:	4610      	mov	r0, r2
 8005d74:	4798      	blx	r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d7c:	f06f 0304 	mvn.w	r3, #4
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	e001      	b.n	8005d88 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3728      	adds	r7, #40	; 0x28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	08004d91 	.word	0x08004d91
 8005d98:	08004e0d 	.word	0x08004e0d
 8005d9c:	08004e5d 	.word	0x08004e5d
 8005da0:	08004eb1 	.word	0x08004eb1
 8005da4:	08004f05 	.word	0x08004f05
 8005da8:	20001160 	.word	0x20001160
 8005dac:	20001148 	.word	0x20001148
 8005db0:	20000048 	.word	0x20000048
 8005db4:	2000113c 	.word	0x2000113c
 8005db8:	2000114c 	.word	0x2000114c

08005dbc <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8005dc8:	793b      	ldrb	r3, [r7, #4]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d808      	bhi.n	8005de0 <CheckValidRectRoi+0x24>
 8005dce:	797b      	ldrb	r3, [r7, #5]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d805      	bhi.n	8005de0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8005dd4:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d802      	bhi.n	8005de0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d901      	bls.n	8005de4 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005de0:	23fc      	movs	r3, #252	; 0xfc
 8005de2:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8005de4:	793a      	ldrb	r2, [r7, #4]
 8005de6:	79bb      	ldrb	r3, [r7, #6]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d803      	bhi.n	8005df4 <CheckValidRectRoi+0x38>
 8005dec:	797a      	ldrb	r2, [r7, #5]
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d201      	bcs.n	8005df8 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005df4:	23fc      	movs	r3, #252	; 0xfc
 8005df6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3318      	adds	r3, #24
 8005e1c:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005e24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f012 fd7d 	bl	8018930 <VL53L1_WrByte>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8005e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f002 fc56 	bl	800871e <VL53L1_data_init>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8005e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3318      	adds	r3, #24
 8005e82:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	220c      	movs	r2, #12
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f01f faf7 	bl	8025484 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8005e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d105      	bne.n	8005eaa <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73bb      	strb	r3, [r7, #14]
 8005eae:	e012      	b.n	8005ed6 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8005eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d112      	bne.n	8005ede <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fc90 	bl	80067e6 <VL53L1_SetLimitCheckEnable>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	73bb      	strb	r3, [r7, #14]
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d9e9      	bls.n	8005eb0 <VL53L1_DataInit+0x5a>
 8005edc:	e000      	b.n	8005ee0 <VL53L1_DataInit+0x8a>
		else
			break;
 8005ede:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8005ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8005ee8:	2102      	movs	r1, #2
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f005 faef 	bl	800b4ce <VL53L1_set_dmax_mode>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f12:	2203      	movs	r2, #3
 8005f14:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7bba      	ldrb	r2, [r7, #14]
 8005f20:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f947 	bl	80061b8 <VL53L1_SetPresetMode>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8005f2e:	2102      	movs	r1, #2
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f98b 	bl	800624c <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fe69 	bl	8007c1c <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8005f62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f011 ffa1 	bl	8017eae <VL53L1_poll_for_boot_completion>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	603a      	str	r2, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8005f90:	4a48      	ldr	r2, [pc, #288]	; (80060b4 <ComputeDevicePresetMode+0x138>)
 8005f92:	f107 0318 	add.w	r3, r7, #24
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	8019      	strh	r1, [r3, #0]
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	0c12      	lsrs	r2, r2, #16
 8005fa0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8005fa2:	4a45      	ldr	r2, [pc, #276]	; (80060b8 <ComputeDevicePresetMode+0x13c>)
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	4611      	mov	r1, r2
 8005fac:	8019      	strh	r1, [r3, #0]
 8005fae:	3302      	adds	r3, #2
 8005fb0:	0c12      	lsrs	r2, r2, #16
 8005fb2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8005fb4:	4a41      	ldr	r2, [pc, #260]	; (80060bc <ComputeDevicePresetMode+0x140>)
 8005fb6:	f107 0310 	add.w	r3, r7, #16
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	8019      	strh	r1, [r3, #0]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	0c12      	lsrs	r2, r2, #16
 8005fc4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8005fc6:	4a3e      	ldr	r2, [pc, #248]	; (80060c0 <ComputeDevicePresetMode+0x144>)
 8005fc8:	f107 030c 	add.w	r3, r7, #12
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	8019      	strh	r1, [r3, #0]
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	0c12      	lsrs	r2, r2, #16
 8005fd6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8005fd8:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <ComputeDevicePresetMode+0x148>)
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	8019      	strh	r1, [r3, #0]
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	0c12      	lsrs	r2, r2, #16
 8005fe8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8005ff0:	79bb      	ldrb	r3, [r7, #6]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d002      	beq.n	8005ffc <ComputeDevicePresetMode+0x80>
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d003      	beq.n	8006002 <ComputeDevicePresetMode+0x86>
 8005ffa:	e005      	b.n	8006008 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	77bb      	strb	r3, [r7, #30]
		break;
 8006000:	e004      	b.n	800600c <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8006002:	2301      	movs	r3, #1
 8006004:	77bb      	strb	r3, [r7, #30]
		break;
 8006006:	e001      	b.n	800600c <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8006008:	2302      	movs	r3, #2
 800600a:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	3b01      	subs	r3, #1
 8006010:	2b08      	cmp	r3, #8
 8006012:	d845      	bhi.n	80060a0 <ComputeDevicePresetMode+0x124>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <ComputeDevicePresetMode+0xa0>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006051 	.word	0x08006051
 8006020:	08006061 	.word	0x08006061
 8006024:	08006071 	.word	0x08006071
 8006028:	08006041 	.word	0x08006041
 800602c:	080060a1 	.word	0x080060a1
 8006030:	080060a1 	.word	0x080060a1
 8006034:	08006091 	.word	0x08006091
 8006038:	08006081 	.word	0x08006081
 800603c:	08006099 	.word	0x08006099
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8006040:	7fbb      	ldrb	r3, [r7, #30]
 8006042:	3320      	adds	r3, #32
 8006044:	443b      	add	r3, r7
 8006046:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	701a      	strb	r2, [r3, #0]
		break;
 800604e:	e029      	b.n	80060a4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8006050:	7fbb      	ldrb	r3, [r7, #30]
 8006052:	3320      	adds	r3, #32
 8006054:	443b      	add	r3, r7
 8006056:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	701a      	strb	r2, [r3, #0]
		break;
 800605e:	e021      	b.n	80060a4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8006060:	7fbb      	ldrb	r3, [r7, #30]
 8006062:	3320      	adds	r3, #32
 8006064:	443b      	add	r3, r7
 8006066:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	701a      	strb	r2, [r3, #0]
		break;
 800606e:	e019      	b.n	80060a4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8006070:	7fbb      	ldrb	r3, [r7, #30]
 8006072:	3320      	adds	r3, #32
 8006074:	443b      	add	r3, r7
 8006076:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	701a      	strb	r2, [r3, #0]
		break;
 800607e:	e011      	b.n	80060a4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8006080:	7fbb      	ldrb	r3, [r7, #30]
 8006082:	3320      	adds	r3, #32
 8006084:	443b      	add	r3, r7
 8006086:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	701a      	strb	r2, [r3, #0]
		break;
 800608e:	e009      	b.n	80060a4 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2211      	movs	r2, #17
 8006094:	701a      	strb	r2, [r3, #0]
		break;
 8006096:	e005      	b.n	80060a4 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2227      	movs	r2, #39	; 0x27
 800609c:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 800609e:	e001      	b.n	80060a4 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80060a0:	23f8      	movs	r3, #248	; 0xf8
 80060a2:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 80060a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3724      	adds	r7, #36	; 0x24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	080285c0 	.word	0x080285c0
 80060b8:	080285c4 	.word	0x080285c4
 80060bc:	080285c8 	.word	0x080285c8
 80060c0:	080285cc 	.word	0x080285cc
 80060c4:	080285d0 	.word	0x080285d0

080060c8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b08e      	sub	sp, #56	; 0x38
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	72fb      	strb	r3, [r7, #11]
 80060d6:	4613      	mov	r3, r2
 80060d8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d002      	beq.n	80060fc <SetPresetMode+0x34>
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d103      	bne.n	8006104 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006102:	e002      	b.n	800610a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800610a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800610e:	7ab9      	ldrb	r1, [r7, #10]
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff ff32 	bl	8005f7c <ComputeDevicePresetMode>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800611e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006122:	2b00      	cmp	r3, #0
 8006124:	d112      	bne.n	800614c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8006126:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800612a:	f107 001c 	add.w	r0, r7, #28
 800612e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	f107 0318 	add.w	r3, r7, #24
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4603      	mov	r3, r0
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f002 ffaf 	bl	80090a4 <VL53L1_get_preset_mode_timing_cfg>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800614c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006150:	2b00      	cmp	r3, #0
 8006152:	d112      	bne.n	800617a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8006154:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8006158:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800615a:	69fd      	ldr	r5, [r7, #28]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	9102      	str	r1, [sp, #8]
 8006164:	9201      	str	r2, [sp, #4]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	462b      	mov	r3, r5
 800616a:	4622      	mov	r2, r4
 800616c:	4601      	mov	r1, r0
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f003 f8ee 	bl	8009350 <VL53L1_set_preset_mode>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800617a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006188:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800618a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006198:	461a      	mov	r2, r3
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 80061ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bdb0      	pop	{r4, r5, r7, pc}

080061b8 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f00c f94a 	bl	8012466 <VL53L1_low_power_auto_data_init>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	2b09      	cmp	r3, #9
 80061da:	d101      	bne.n	80061e0 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80061dc:	2301      	movs	r3, #1
 80061de:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 80061e0:	7bba      	ldrb	r2, [r7, #14]
 80061e2:	78f9      	ldrb	r1, [r7, #3]
 80061e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff6d 	bl	80060c8 <SetPresetMode>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80061f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d117      	bne.n	800622a <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d005      	beq.n	800620c <VL53L1_SetPresetMode+0x54>
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d002      	beq.n	800620c <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d107      	bne.n	800621c <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800620c:	f24a 0128 	movw	r1, #41000	; 0xa028
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f8a9 	bl	8006368 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	e006      	b.n	800622a <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800621c:	f248 2135 	movw	r1, #33333	; 0x8235
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8a1 	bl	8006368 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8006226:	4603      	mov	r3, r0
 8006228:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800622a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8006232:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa68 	bl	800670c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b0a2      	sub	sp, #136	; 0x88
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006270:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8006274:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8006278:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800627c:	2b09      	cmp	r3, #9
 800627e:	d105      	bne.n	800628c <VL53L1_SetDistanceMode+0x40>
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d002      	beq.n	800628c <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8006286:	f06f 0303 	mvn.w	r3, #3
 800628a:	e069      	b.n	8006360 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d008      	beq.n	80062a4 <VL53L1_SetDistanceMode+0x58>
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d005      	beq.n	80062a4 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d002      	beq.n	80062a4 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800629e:	f06f 0303 	mvn.w	r3, #3
 80062a2:	e05d      	b.n	8006360 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 80062a4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 80062ac:	f107 0308 	add.w	r3, r7, #8
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 fede 	bl	8009074 <VL53L1_get_zone_config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80062c6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80062ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80062d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80062d6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f002 fd8a 	bl	8008df4 <VL53L1_get_timeouts_us>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80062e6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80062f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff fee5 	bl	80060c8 <SetPresetMode>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8006304:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006312:	461a      	mov	r2, r3
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800631a:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8006322:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 fd2a 	bl	8008d82 <VL53L1_set_timeouts_us>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8006334:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800633c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8006342:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8006346:	2b00      	cmp	r3, #0
 8006348:	d108      	bne.n	800635c <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 800634a:	f107 0308 	add.w	r3, r7, #8
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fe4c 	bl	8008fee <VL53L1_set_zone_config>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 800635c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8006360:	4618      	mov	r0, r3
 8006362:	3788      	adds	r7, #136	; 0x88
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006372:	2300      	movs	r3, #0
 8006374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800638c:	4b75      	ldr	r3, [pc, #468]	; (8006564 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800638e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4a75      	ldr	r2, [pc, #468]	; (8006568 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d902      	bls.n	800639e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8006398:	23fc      	movs	r3, #252	; 0xfc
 800639a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800639e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80063a6:	f107 031a 	add.w	r3, r7, #26
 80063aa:	461a      	mov	r2, r3
 80063ac:	2105      	movs	r1, #5
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb9a 	bl	8006ae8 <VL53L1_GetSequenceStepEnable>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80063ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80063c2:	f107 0319 	add.w	r3, r7, #25
 80063c6:	461a      	mov	r2, r3
 80063c8:	2106      	movs	r1, #6
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fb8c 	bl	8006ae8 <VL53L1_GetSequenceStepEnable>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80063d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80063de:	f107 0314 	add.w	r3, r7, #20
 80063e2:	f107 0210 	add.w	r2, r7, #16
 80063e6:	f107 010c 	add.w	r1, r7, #12
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 fd02 	bl	8008df4 <VL53L1_get_timeouts_us>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80063f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 80a0 	bne.w	8006540 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006406:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800640a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8006414:	7efb      	ldrb	r3, [r7, #27]
 8006416:	3b01      	subs	r3, #1
 8006418:	2b08      	cmp	r3, #8
 800641a:	d861      	bhi.n	80064e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	080064c9 	.word	0x080064c9
 8006428:	080064c9 	.word	0x080064c9
 800642c:	08006465 	.word	0x08006465
 8006430:	08006449 	.word	0x08006449
 8006434:	080064e1 	.word	0x080064e1
 8006438:	080064e1 	.word	0x080064e1
 800643c:	080064d5 	.word	0x080064d5
 8006440:	0800648b 	.word	0x0800648b
 8006444:	080064c9 	.word	0x080064c9
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8006448:	7ebb      	ldrb	r3, [r7, #26]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d002      	beq.n	8006454 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 800644e:	7e7b      	ldrb	r3, [r7, #25]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d103      	bne.n	800645c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8006454:	f241 3388 	movw	r3, #5000	; 0x1388
 8006458:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800645a:	e044      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 800645c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8006462:	e040      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800646a:	7ebb      	ldrb	r3, [r7, #26]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d002      	beq.n	8006476 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8006470:	7e7b      	ldrb	r3, [r7, #25]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d103      	bne.n	800647e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8006476:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
 800647c:	e002      	b.n	8006484 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 800647e:	f245 4360 	movw	r3, #21600	; 0x5460
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8006484:	2302      	movs	r3, #2
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8006488:	e02d      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8006490:	23f5      	movs	r3, #245	; 0xf5
 8006492:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	461a      	mov	r2, r3
 800649a:	f248 0188 	movw	r1, #32904	; 0x8088
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f005 f88c 	bl	800b5bc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dd07      	ble.n	80064ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	22f5      	movs	r2, #245	; 0xf5
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	4413      	add	r3, r2
 80064b8:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80064c2:	2302      	movs	r3, #2
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80064c6:	e00e      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80064c8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80064ce:	2306      	movs	r3, #6
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80064d2:	e008      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064da:	3308      	adds	r3, #8
 80064dc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80064de:	e002      	b.n	80064e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80064e0:	23f8      	movs	r3, #248	; 0xf8
 80064e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d803      	bhi.n	80064f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80064ee:	23fc      	movs	r3, #252	; 0xfc
 80064f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80064f4:	e003      	b.n	80064fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80064fc:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80064fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d11c      	bne.n	8006540 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	429a      	cmp	r2, r3
 800650c:	d203      	bcs.n	8006516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800650e:	23fc      	movs	r3, #252	; 0xfc
 8006510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006514:	e00d      	b.n	8006532 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8006520:	68f9      	ldr	r1, [r7, #12]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f002 fc2b 	bl	8008d82 <VL53L1_set_timeouts_us>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8006532:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8006540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800654e:	461a      	mov	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006556:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800655a:	4618      	mov	r0, r3
 800655c:	3730      	adds	r7, #48	; 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	00086470 	.word	0x00086470
 8006568:	00989680 	.word	0x00989680

0800656c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	; 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800659a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80065a2:	f107 031b 	add.w	r3, r7, #27
 80065a6:	461a      	mov	r2, r3
 80065a8:	2105      	movs	r1, #5
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa9c 	bl	8006ae8 <VL53L1_GetSequenceStepEnable>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80065b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80065be:	f107 031a 	add.w	r3, r7, #26
 80065c2:	461a      	mov	r2, r3
 80065c4:	2106      	movs	r1, #6
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa8e 	bl	8006ae8 <VL53L1_GetSequenceStepEnable>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80065d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80065da:	f107 0310 	add.w	r3, r7, #16
 80065de:	f107 0214 	add.w	r2, r7, #20
 80065e2:	f107 010c 	add.w	r1, r7, #12
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f002 fc04 	bl	8008df4 <VL53L1_get_timeouts_us>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80065f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d179      	bne.n	80066ee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006600:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8006608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800660c:	3b01      	subs	r3, #1
 800660e:	2b08      	cmp	r3, #8
 8006610:	d869      	bhi.n	80066e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	080066c5 	.word	0x080066c5
 800661c:	080066c5 	.word	0x080066c5
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800663d 	.word	0x0800663d
 8006628:	080066e7 	.word	0x080066e7
 800662c:	080066e7 	.word	0x080066e7
 8006630:	080066d7 	.word	0x080066d7
 8006634:	08006687 	.word	0x08006687
 8006638:	080066c5 	.word	0x080066c5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800663c:	7efb      	ldrb	r3, [r7, #27]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d002      	beq.n	8006648 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8006642:	7ebb      	ldrb	r3, [r7, #26]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800664e:	3308      	adds	r3, #8
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8006652:	e04d      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800665c:	e048      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800665e:	7efb      	ldrb	r3, [r7, #27]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d002      	beq.n	800666a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8006664:	7ebb      	ldrb	r3, [r7, #26]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d106      	bne.n	8006678 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8006670:	3334      	adds	r3, #52	; 0x34
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8006676:	e03b      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800667e:	3330      	adds	r3, #48	; 0x30
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8006684:	e034      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8006686:	23f5      	movs	r3, #245	; 0xf5
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	461a      	mov	r2, r3
 8006690:	f248 0188 	movw	r1, #32904	; 0x8088
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f004 ff91 	bl	800b5bc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd07      	ble.n	80066b0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	22f5      	movs	r2, #245	; 0xf5
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	4413      	add	r3, r2
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80066b6:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80066c2:	e015      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4613      	mov	r3, r2
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	4413      	add	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80066d4:	e00c      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80066e0:	3308      	adds	r3, #8
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80066e4:	e004      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80066e6:	23f8      	movs	r3, #248	; 0xf8
 80066e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066ec:	e000      	b.n	80066f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80066ee:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80066f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066fc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80066fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006702:	4618      	mov	r0, r3
 8006704:	3730      	adds	r7, #48	; 0x30
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop

0800670c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	4a09      	ldr	r2, [pc, #36]	; (8006748 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	099b      	lsrs	r3, r3, #6
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 facc 	bl	8008cd0 <VL53L1_set_inter_measurement_period_ms>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800673c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	10624dd3 	.word	0x10624dd3

0800674c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 fae3 	bl	8008d2c <VL53L1_get_inter_measurement_period_ms>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	019b      	lsls	r3, r3, #6
 8006770:	4907      	ldr	r1, [pc, #28]	; (8006790 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8006772:	fba1 1303 	umull	r1, r3, r1, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 8006782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	10624dd3 	.word	0x10624dd3

08006794 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	460b      	mov	r3, r1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80067a6:	897b      	ldrh	r3, [r7, #10]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SetLimitValue+0x1e>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d009      	beq.n	80067c4 <SetLimitValue+0x30>
 80067b0:	e011      	b.n	80067d6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0b9b      	lsrs	r3, r3, #14
 80067b6:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80067b8:	8abb      	ldrh	r3, [r7, #20]
 80067ba:	4619      	mov	r1, r3
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f003 f988 	bl	8009ad2 <VL53L1_set_lite_sigma_threshold>
		break;
 80067c2:	e00a      	b.n	80067da <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0a5b      	lsrs	r3, r3, #9
 80067c8:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80067ca:	8abb      	ldrh	r3, [r7, #20]
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f003 f9ad 	bl	8009b2e <VL53L1_set_lite_min_count_rate>
		break;
 80067d4:	e001      	b.n	80067da <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80067d6:	23fc      	movs	r3, #252	; 0xfc
 80067d8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	807b      	strh	r3, [r7, #2]
 80067f2:	4613      	mov	r3, r2
 80067f4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d902      	bls.n	800680a <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8006804:	23fc      	movs	r3, #252	; 0xfc
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e015      	b.n	8006836 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 800680a:	787b      	ldrb	r3, [r7, #1]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	e007      	b.n	8006826 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006816:	887b      	ldrh	r3, [r7, #2]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ffb1 	bl	8006794 <SetLimitValue>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8006836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10e      	bne.n	800685c <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800683e:	787b      	ldrb	r3, [r7, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2da      	uxtb	r2, r3
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	4611      	mov	r1, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8006856:	3334      	adds	r3, #52	; 0x34
 8006858:	460a      	mov	r2, r1
 800685a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800685c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	460b      	mov	r3, r1
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d905      	bls.n	800688c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8006880:	23fc      	movs	r3, #252	; 0xfc
 8006882:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e00a      	b.n	80068a2 <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800688c:	897b      	ldrh	r3, [r7, #10]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8006896:	3334      	adds	r3, #52	; 0x34
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7dba      	ldrb	r2, [r7, #22]
 80068a0:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80068a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b088      	sub	sp, #32
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	460b      	mov	r3, r1
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80068c8:	897b      	ldrh	r3, [r7, #10]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <VL53L1_GetLimitCheckValue+0x22>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00c      	beq.n	80068ec <VL53L1_GetLimitCheckValue+0x3a>
 80068d2:	e017      	b.n	8006904 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80068d4:	f107 0314 	add.w	r3, r7, #20
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f003 f8e2 	bl	8009aa4 <VL53L1_get_lite_sigma_threshold>
 80068e0:	4603      	mov	r3, r0
 80068e2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80068e4:	8abb      	ldrh	r3, [r7, #20]
 80068e6:	039b      	lsls	r3, r3, #14
 80068e8:	61bb      	str	r3, [r7, #24]
		break;
 80068ea:	e00d      	b.n	8006908 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80068ec:	f107 0316 	add.w	r3, r7, #22
 80068f0:	4619      	mov	r1, r3
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f003 f904 	bl	8009b00 <VL53L1_get_lite_min_count_rate>
 80068f8:	4603      	mov	r3, r0
 80068fa:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	61bb      	str	r3, [r7, #24]
		break;
 8006902:	e001      	b.n	8006908 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8006904:	23fc      	movs	r3, #252	; 0xfc
 8006906:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8006908:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d129      	bne.n	8006964 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d113      	bne.n	800693e <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8006916:	897b      	ldrh	r3, [r7, #10]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800692c:	897b      	ldrh	r3, [r7, #10]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8006936:	3334      	adds	r3, #52	; 0x34
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	e012      	b.n	8006964 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8006944:	897b      	ldrh	r3, [r7, #10]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8006954:	897b      	ldrh	r3, [r7, #10]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800695e:	3334      	adds	r3, #52	; 0x34
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8006964:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b0a0      	sub	sp, #128	; 0x80
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800697a:	2300      	movs	r3, #0
 800697c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800698c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8006990:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8006994:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8006998:	2b02      	cmp	r3, #2
 800699a:	d102      	bne.n	80069a2 <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 800699c:	2310      	movs	r3, #16
 800699e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d303      	bcc.n	80069b6 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80069b6:	23fc      	movs	r3, #252	; 0xfc
 80069b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80069bc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d17e      	bne.n	8006ac2 <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80069c4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80069c8:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80069da:	e06a      	b.n	8006ab2 <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80069dc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	f107 0208 	add.w	r2, r7, #8
 80069ea:	3301      	adds	r3, #1
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80069f0:	68b8      	ldr	r0, [r7, #8]
 80069f2:	f7ff f9e3 	bl	8005dbc <CheckValidRectRoi>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80069fc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d15d      	bne.n	8006ac0 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8006a04:	7abb      	ldrb	r3, [r7, #10]
 8006a06:	461a      	mov	r2, r3
 8006a08:	7a3b      	ldrb	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3301      	adds	r3, #1
					/ 2;
 8006a0e:	0fda      	lsrs	r2, r3, #31
 8006a10:	4413      	add	r3, r2
 8006a12:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8006a14:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8006a18:	7a7b      	ldrb	r3, [r7, #9]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	4413      	add	r3, r2
 8006a20:	3301      	adds	r3, #1
					/ 2;
 8006a22:	0fda      	lsrs	r2, r3, #31
 8006a24:	4413      	add	r3, r2
 8006a26:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8006a28:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8006a2c:	7aba      	ldrb	r2, [r7, #10]
 8006a2e:	7a3b      	ldrb	r3, [r7, #8]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8006a36:	7a7a      	ldrb	r2, [r7, #9]
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8006a40:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d903      	bls.n	8006a50 <VL53L1_SetROI+0xe0>
 8006a48:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d803      	bhi.n	8006a58 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8006a50:	23fc      	movs	r3, #252	; 0xfc
 8006a52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8006a56:	e034      	b.n	8006ac2 <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8006a58:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006a5c:	3306      	adds	r3, #6
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	3380      	adds	r3, #128	; 0x80
 8006a62:	443b      	add	r3, r7
 8006a64:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8006a68:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8006a6c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006a70:	3306      	adds	r3, #6
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	3380      	adds	r3, #128	; 0x80
 8006a76:	443b      	add	r3, r7
 8006a78:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8006a7c:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8006a80:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006a84:	3306      	adds	r3, #6
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	3380      	adds	r3, #128	; 0x80
 8006a8a:	443b      	add	r3, r7
 8006a8c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8006a90:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8006a94:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006a98:	3306      	adds	r3, #6
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	3380      	adds	r3, #128	; 0x80
 8006a9e:	443b      	add	r3, r7
 8006aa0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8006aa4:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8006aa8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006aac:	3301      	adds	r3, #1
 8006aae:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d38e      	bcc.n	80069dc <VL53L1_SetROI+0x6c>
 8006abe:	e000      	b.n	8006ac2 <VL53L1_SetROI+0x152>
				break;
 8006ac0:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8006ac2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8006aca:	f107 030c 	add.w	r3, r7, #12
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f002 fa8c 	bl	8008fee <VL53L1_set_zone_config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8006adc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3780      	adds	r7, #128	; 0x80
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	460b      	mov	r3, r1
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f002 f9e3 	bl	8008ecc <VL53L1_get_sequence_config_bit>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3318      	adds	r3, #24
 8006b28:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7edb      	ldrb	r3, [r3, #27]
 8006b2e:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d002      	beq.n	8006b3c <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fc8e 	bl	8008458 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	77bb      	strb	r3, [r7, #30]
 8006b40:	e01a      	b.n	8006b78 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8006b42:	7fbb      	ldrb	r3, [r7, #30]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8006b52:	7fbb      	ldrb	r3, [r7, #30]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006b5c:	3320      	adds	r3, #32
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8006b62:	7fbb      	ldrb	r3, [r7, #30]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006b6c:	3324      	adds	r3, #36	; 0x24
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006b72:	7fbb      	ldrb	r3, [r7, #30]
 8006b74:	3301      	adds	r3, #1
 8006b76:	77bb      	strb	r3, [r7, #30]
 8006b78:	7fbb      	ldrb	r3, [r7, #30]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d9e1      	bls.n	8006b42 <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b9c:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8006ba0:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8006ba2:	7dbb      	ldrb	r3, [r7, #22]
 8006ba4:	2b63      	cmp	r3, #99	; 0x63
 8006ba6:	dc12      	bgt.n	8006bce <VL53L1_StartMeasurement+0xb6>
 8006ba8:	2b62      	cmp	r3, #98	; 0x62
 8006baa:	da0d      	bge.n	8006bc8 <VL53L1_StartMeasurement+0xb0>
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	dc0e      	bgt.n	8006bce <VL53L1_StartMeasurement+0xb6>
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	da09      	bge.n	8006bc8 <VL53L1_StartMeasurement+0xb0>
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	dc02      	bgt.n	8006bbe <VL53L1_StartMeasurement+0xa6>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da05      	bge.n	8006bc8 <VL53L1_StartMeasurement+0xb0>
 8006bbc:	e007      	b.n	8006bce <VL53L1_StartMeasurement+0xb6>
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d105      	bne.n	8006bce <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	77fb      	strb	r3, [r7, #31]
		break;
 8006bc6:	e004      	b.n	8006bd2 <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8006bc8:	23f2      	movs	r3, #242	; 0xf2
 8006bca:	77fb      	strb	r3, [r7, #31]
		break;
 8006bcc:	e001      	b.n	8006bd2 <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8006bce:	23fd      	movs	r3, #253	; 0xfd
 8006bd0:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8006bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11f      	bne.n	8006c1a <VL53L1_StartMeasurement+0x102>
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d11c      	bne.n	8006c1a <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006be0:	f107 0310 	add.w	r3, r7, #16
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff fcc0 	bl	800656c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8006bec:	4603      	mov	r3, r0
 8006bee:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <VL53L1_StartMeasurement+0x13c>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	099b      	lsrs	r3, r3, #6
 8006bfa:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006bfc:	f107 030c 	add.w	r3, r7, #12
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fda2 	bl	800674c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d901      	bls.n	8006c1a <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8006c16:	23fc      	movs	r3, #252	; 0xfc
 8006c18:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8006c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d107      	bne.n	8006c32 <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2206      	movs	r2, #6
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 ff97 	bl	8009b5c <VL53L1_init_and_start_range>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8006c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d105      	bne.n	8006c46 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c40:	2204      	movs	r2, #4
 8006c42:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8006c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	10624dd3 	.word	0x10624dd3

08006c58 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f003 fa47 	bl	800a0f8 <VL53L1_stop_range>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	7edb      	ldrb	r3, [r3, #27]
 8006c72:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d002      	beq.n	8006c80 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fd1a 	bl	80086b4 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8006c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c8e:	2203      	movs	r2, #3
 8006c90:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8006c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7edb      	ldrb	r3, [r3, #27]
 8006cb0:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 ff4b 	bl	800ab52 <VL53L1_clear_interrupt_and_enable_next_range>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8006cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f011 f8ac 	bl	8017e3a <VL53L1_is_new_data_ready>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	603a      	str	r2, [r7, #0]
 8006cfc:	80fb      	strh	r3, [r7, #6]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8006d02:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d06:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8006d08:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8006d0c:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8006d0e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8006d12:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8006d14:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8006d18:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8006d1a:	797b      	ldrb	r3, [r7, #5]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d002      	beq.n	8006d26 <GenNewPresetMode+0x34>
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d012      	beq.n	8006d4a <GenNewPresetMode+0x58>
 8006d24:	e023      	b.n	8006d6e <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8006d26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d2a:	893b      	ldrh	r3, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	dd03      	ble.n	8006d38 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2203      	movs	r2, #3
 8006d34:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8006d36:	e02c      	b.n	8006d92 <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8006d38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d3c:	89bb      	ldrh	r3, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	dd27      	ble.n	8006d92 <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2202      	movs	r2, #2
 8006d46:	701a      	strb	r2, [r3, #0]
		break;
 8006d48:	e023      	b.n	8006d92 <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8006d4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d4e:	893b      	ldrh	r3, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	dd03      	ble.n	8006d5c <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2203      	movs	r2, #3
 8006d58:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8006d5a:	e01c      	b.n	8006d96 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8006d5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d60:	89fb      	ldrh	r3, [r7, #14]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	da17      	bge.n	8006d96 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
		break;
 8006d6c:	e013      	b.n	8006d96 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8006d6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d72:	89fb      	ldrh	r3, [r7, #14]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	da03      	bge.n	8006d80 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8006d7e:	e00c      	b.n	8006d9a <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8006d80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d84:	897b      	ldrh	r3, [r7, #10]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	da07      	bge.n	8006d9a <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	701a      	strb	r2, [r3, #0]
		break;
 8006d90:	e003      	b.n	8006d9a <GenNewPresetMode+0xa8>
		break;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <GenNewPresetMode+0xaa>
		break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <GenNewPresetMode+0xaa>
		break;
 8006d9a:	bf00      	nop
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	7ddb      	ldrb	r3, [r3, #23]
 8006dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <CheckAndChangeDistanceMode+0xbc>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3318      	adds	r3, #24
 8006dca:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8006dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd0:	2bff      	cmp	r3, #255	; 0xff
 8006dd2:	d042      	beq.n	8006e5a <CheckAndChangeDistanceMode+0xb2>
 8006dd4:	2bff      	cmp	r3, #255	; 0xff
 8006dd6:	dc07      	bgt.n	8006de8 <CheckAndChangeDistanceMode+0x40>
 8006dd8:	2b07      	cmp	r3, #7
 8006dda:	dc02      	bgt.n	8006de2 <CheckAndChangeDistanceMode+0x3a>
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	da3c      	bge.n	8006e5a <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8006de0:	e002      	b.n	8006de8 <CheckAndChangeDistanceMode+0x40>
 8006de2:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d938      	bls.n	8006e5a <CheckAndChangeDistanceMode+0xb2>
		break;
 8006de8:	bf00      	nop
	}

	DmaxValid = 1;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8006df6:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	db03      	blt.n	8006e08 <CheckAndChangeDistanceMode+0x60>
 8006e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e14:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8006e18:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	7dfa      	ldrb	r2, [r7, #23]
 8006e1e:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8006e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d108      	bne.n	8006e3a <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006e2e:	7df9      	ldrb	r1, [r7, #23]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff ff5d 	bl	8006cf2 <GenNewPresetMode>
 8006e38:	e010      	b.n	8006e5c <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8006e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8006e42:	7df9      	ldrb	r1, [r7, #23]
 8006e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff ff51 	bl	8006cf2 <GenNewPresetMode>
 8006e50:	e004      	b.n	8006e5c <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2203      	movs	r2, #3
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e000      	b.n	8006e5c <CheckAndChangeDistanceMode+0xb4>
		return;
 8006e5a:	bf00      	nop
	}
}
 8006e5c:	3728      	adds	r7, #40	; 0x28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	2000001c 	.word	0x2000001c

08006e68 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b08d      	sub	sp, #52	; 0x34
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	603a      	str	r2, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
 8006e74:	460b      	mov	r3, r1
 8006e76:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8006e78:	2396      	movs	r3, #150	; 0x96
 8006e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8006e7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006e80:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8006e82:	231e      	movs	r3, #30
 8006e84:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <ComputeRQL+0x104>)
 8006e88:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8006e8a:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <ComputeRQL+0x108>)
 8006e8c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8006e8e:	f641 139a 	movw	r3, #6554	; 0x199a
 8006e92:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <ComputeRQL+0x3a>
		returnvalue = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ea0:	e05b      	b.n	8006f5a <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8006ea8:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8006eb0:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8006eb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	da02      	bge.n	8006ec0 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8006eba:	79bb      	ldrb	r3, [r7, #6]
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d103      	bne.n	8006ec8 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8006ec0:	2332      	movs	r3, #50	; 0x32
 8006ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ec6:	e048      	b.n	8006f5a <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8006ece:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	dd03      	ble.n	8006ede <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8006ed6:	8c3b      	ldrh	r3, [r7, #32]
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006edc:	e007      	b.n	8006eee <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006ef8:	461a      	mov	r2, r3
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d804      	bhi.n	8006f2e <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2c:	e006      	b.n	8006f3c <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8006f2e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f34:	e002      	b.n	8006f3c <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8006f36:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b32      	cmp	r3, #50	; 0x32
 8006f46:	d905      	bls.n	8006f54 <ComputeRQL+0xec>
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b64      	cmp	r3, #100	; 0x64
 8006f4c:	bf28      	it	cs
 8006f4e:	2364      	movcs	r3, #100	; 0x64
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e000      	b.n	8006f56 <ComputeRQL+0xee>
 8006f54:	2332      	movs	r3, #50	; 0x32
 8006f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8006f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3734      	adds	r7, #52	; 0x34
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	0075b333 	.word	0x0075b333
 8006f70:	0030cccd 	.word	0x0030cccd

08006f74 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	d83d      	bhi.n	8007002 <ConvertStatusLite+0x8e>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <ConvertStatusLite+0x18>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fdf 	.word	0x08006fdf
 8006f90:	08006fd9 	.word	0x08006fd9
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	08006feb 	.word	0x08006feb
 8006f9c:	08006ff7 	.word	0x08006ff7
 8006fa0:	08006ffd 	.word	0x08006ffd
 8006fa4:	08007003 	.word	0x08007003
 8006fa8:	08007003 	.word	0x08007003
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08007003 	.word	0x08007003
 8006fb4:	08007003 	.word	0x08007003
 8006fb8:	08007003 	.word	0x08007003
 8006fbc:	08007003 	.word	0x08007003
 8006fc0:	08007003 	.word	0x08007003
 8006fc4:	08006fcd 	.word	0x08006fcd
 8006fc8:	08006fd3 	.word	0x08006fd3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8006fcc:	230a      	movs	r3, #10
 8006fce:	73fb      	strb	r3, [r7, #15]
		break;
 8006fd0:	e019      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8006fd2:	2306      	movs	r3, #6
 8006fd4:	73fb      	strb	r3, [r7, #15]
		break;
 8006fd6:	e016      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8006fd8:	2304      	movs	r3, #4
 8006fda:	73fb      	strb	r3, [r7, #15]
		break;
 8006fdc:	e013      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]
		break;
 8006fe2:	e010      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
		break;
 8006fe8:	e00d      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8006fea:	2307      	movs	r3, #7
 8006fec:	73fb      	strb	r3, [r7, #15]
		break;
 8006fee:	e00a      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8006ff0:	2309      	movs	r3, #9
 8006ff2:	73fb      	strb	r3, [r7, #15]
		break;
 8006ff4:	e007      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	73fb      	strb	r3, [r7, #15]
		break;
 8006ffa:	e004      	b.n	8007006 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
		break;
 8007000:	e001      	b.n	8007006 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8007002:	23ff      	movs	r3, #255	; 0xff
 8007004:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	3b05      	subs	r3, #5
 8007022:	2b12      	cmp	r3, #18
 8007024:	d840      	bhi.n	80070a8 <ConvertStatusHisto+0x94>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <ConvertStatusHisto+0x18>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007079 	.word	0x08007079
 8007030:	0800707f 	.word	0x0800707f
 8007034:	0800708b 	.word	0x0800708b
 8007038:	080070a9 	.word	0x080070a9
 800703c:	080070a3 	.word	0x080070a3
 8007040:	080070a9 	.word	0x080070a9
 8007044:	080070a9 	.word	0x080070a9
 8007048:	080070a9 	.word	0x080070a9
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070a9 	.word	0x080070a9
 8007058:	080070a9 	.word	0x080070a9
 800705c:	080070a9 	.word	0x080070a9
 8007060:	080070a9 	.word	0x080070a9
 8007064:	08007085 	.word	0x08007085
 8007068:	08007097 	.word	0x08007097
 800706c:	080070a9 	.word	0x080070a9
 8007070:	0800709d 	.word	0x0800709d
 8007074:	08007091 	.word	0x08007091
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8007078:	2304      	movs	r3, #4
 800707a:	73fb      	strb	r3, [r7, #15]
		break;
 800707c:	e016      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800707e:	2301      	movs	r3, #1
 8007080:	73fb      	strb	r3, [r7, #15]
		break;
 8007082:	e013      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8007084:	2306      	movs	r3, #6
 8007086:	73fb      	strb	r3, [r7, #15]
		break;
 8007088:	e010      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800708a:	2307      	movs	r3, #7
 800708c:	73fb      	strb	r3, [r7, #15]
		break;
 800708e:	e00d      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8007090:	230c      	movs	r3, #12
 8007092:	73fb      	strb	r3, [r7, #15]
		break;
 8007094:	e00a      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8007096:	2307      	movs	r3, #7
 8007098:	73fb      	strb	r3, [r7, #15]
		break;
 800709a:	e007      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 800709c:	230b      	movs	r3, #11
 800709e:	73fb      	strb	r3, [r7, #15]
		break;
 80070a0:	e004      	b.n	80070ac <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
		break;
 80070a6:	e001      	b.n	80070ac <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80070a8:	23ff      	movs	r3, #255	; 0xff
 80070aa:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop

080070bc <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b092      	sub	sp, #72	; 0x48
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	461a      	mov	r2, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	70fb      	strb	r3, [r7, #3]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70bb      	strb	r3, [r7, #2]
 80070d2:	4613      	mov	r3, r2
 80070d4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3318      	adds	r3, #24
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80070e8:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80070ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070f0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80070fc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff feaf 	bl	8006e68 <ComputeRQL>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007110:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8007112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007114:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007116:	025b      	lsls	r3, r3, #9
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800711a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711e:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8007120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007122:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007124:	025b      	lsls	r3, r3, #9
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8007128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800712a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800712c:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800712e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007130:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007132:	025b      	lsls	r3, r3, #9
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8007136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713a:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800713c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007144:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8007146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007148:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800714c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800714e:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8007150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007152:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8007156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007158:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 800715a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800715c:	2200      	movs	r2, #0
 800715e:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8007160:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007164:	2b11      	cmp	r3, #17
 8007166:	d009      	beq.n	800717c <SetTargetData+0xc0>
 8007168:	2b11      	cmp	r3, #17
 800716a:	dc0f      	bgt.n	800718c <SetTargetData+0xd0>
 800716c:	2b03      	cmp	r3, #3
 800716e:	dc02      	bgt.n	8007176 <SetTargetData+0xba>
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc03      	bgt.n	800717c <SetTargetData+0xc0>
 8007174:	e00a      	b.n	800718c <SetTargetData+0xd0>
 8007176:	2b0d      	cmp	r3, #13
 8007178:	d004      	beq.n	8007184 <SetTargetData+0xc8>
 800717a:	e007      	b.n	800718c <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800717c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800717e:	2205      	movs	r2, #5
 8007180:	75da      	strb	r2, [r3, #23]
		break;
 8007182:	e006      	b.n	8007192 <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8007184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007186:	220d      	movs	r2, #13
 8007188:	75da      	strb	r2, [r3, #23]
		break;
 800718a:	e002      	b.n	8007192 <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800718c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800718e:	2200      	movs	r2, #0
 8007190:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8007192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007194:	7ddb      	ldrb	r3, [r3, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d117      	bne.n	80071ca <SetTargetData+0x10e>
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d114      	bne.n	80071ca <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 80071a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071a2:	22ff      	movs	r2, #255	; 0xff
 80071a4:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 80071a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071a8:	2200      	movs	r2, #0
 80071aa:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 80071ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 80071b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80071b8:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 80071ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071bc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80071c0:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 80071c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071c4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80071c8:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80071ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071cc:	7ddb      	ldrb	r3, [r3, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d125      	bne.n	800721e <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071d8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80071dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 80071e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d007      	beq.n	80071f8 <SetTargetData+0x13c>
 80071e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d003      	beq.n	80071f8 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	d109      	bne.n	800720c <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 80071f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff09 	bl	8007014 <ConvertStatusHisto>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8007206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007208:	75da      	strb	r2, [r3, #23]
 800720a:	e008      	b.n	800721e <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800720c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff feaf 	bl	8006f74 <ConvertStatusLite>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800721a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721c:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800721e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007220:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007222:	025b      	lsls	r3, r3, #9
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800722c:	461a      	mov	r2, r3
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8007234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007236:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007238:	025b      	lsls	r3, r3, #9
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007242:	461a      	mov	r2, r3
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 800724a:	f107 0310 	add.w	r3, r7, #16
 800724e:	461a      	mov	r2, r3
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fb2d 	bl	80068b2 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8007258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800725c:	2b06      	cmp	r3, #6
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8007266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 800726a:	f107 0315 	add.w	r3, r7, #21
 800726e:	461a      	mov	r2, r3
 8007270:	2100      	movs	r1, #0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff faf8 	bl	8006868 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8007278:	7d7b      	ldrb	r3, [r7, #21]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <SetTargetData+0x1ce>
 800727e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <SetTargetData+0x1ce>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <SetTargetData+0x1d0>
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007296:	461a      	mov	r2, r3
 8007298:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800729c:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 80072a0:	f107 0310 	add.w	r3, r7, #16
 80072a4:	461a      	mov	r2, r3
 80072a6:	2101      	movs	r1, #1
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fb02 	bl	80068b2 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80072ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	bf0c      	ite	eq
 80072b6:	2301      	moveq	r3, #1
 80072b8:	2300      	movne	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80072bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 80072c0:	f107 0315 	add.w	r3, r7, #21
 80072c4:	461a      	mov	r2, r3
 80072c6:	2101      	movs	r1, #1
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff facd 	bl	8006868 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80072ce:	7d7b      	ldrb	r3, [r7, #21]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <SetTargetData+0x224>
 80072d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <SetTargetData+0x224>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <SetTargetData+0x226>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ec:	461a      	mov	r2, r3
 80072ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80072f2:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80072f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f8:	8a9b      	ldrh	r3, [r3, #20]
 80072fa:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80072fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072fe:	7ddb      	ldrb	r3, [r3, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <SetTargetData+0x26a>
 8007304:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007308:	2b00      	cmp	r3, #0
 800730a:	da0c      	bge.n	8007326 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800730c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007310:	4ba3      	ldr	r3, [pc, #652]	; (80075a0 <SetTargetData+0x4e4>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	da03      	bge.n	8007320 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8007318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800731a:	220e      	movs	r2, #14
 800731c:	75da      	strb	r2, [r3, #23]
 800731e:	e002      	b.n	8007326 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8007320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007322:	2200      	movs	r2, #0
 8007324:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	461a      	mov	r2, r3
 800732c:	f248 01be 	movw	r1, #32958	; 0x80be
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f004 f943 	bl	800b5bc <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 800733a:	787b      	ldrb	r3, [r7, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8007340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007342:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8007348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800734a:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	429a      	cmp	r2, r3
 8007350:	d902      	bls.n	8007358 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8007352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007354:	220c      	movs	r2, #12
 8007356:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	461a      	mov	r2, r3
 800735e:	f248 0191 	movw	r1, #32913	; 0x8091
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f004 f92a 	bl	800b5bc <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8007368:	78bb      	ldrb	r3, [r7, #2]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8007376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007378:	8a9b      	ldrh	r3, [r3, #20]
 800737a:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8007382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007384:	2200      	movs	r2, #0
 8007386:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d106      	bne.n	800739c <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007394:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8007398:	2b01      	cmp	r3, #1
 800739a:	d001      	beq.n	80073a0 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8250 	beq.w	8007848 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 80073a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073aa:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 80073ac:	2b07      	cmp	r3, #7
 80073ae:	d004      	beq.n	80073ba <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80073b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b2:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	f040 8247 	bne.w	8007848 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80073ba:	787b      	ldrb	r3, [r7, #1]
 80073bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073be:	4413      	add	r3, r2
 80073c0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80073c4:	3320      	adds	r3, #32
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b07      	cmp	r3, #7
 80073ca:	d01c      	beq.n	8007406 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80073cc:	787b      	ldrb	r3, [r7, #1]
 80073ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80073d6:	3320      	adds	r3, #32
 80073d8:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d013      	beq.n	8007406 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80073de:	787b      	ldrb	r3, [r7, #1]
 80073e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80073e8:	3320      	adds	r3, #32
 80073ea:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 822b 	bne.w	8007848 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80073f2:	787b      	ldrb	r3, [r7, #1]
 80073f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80073fc:	3324      	adds	r3, #36	; 0x24
 80073fe:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 8221 	bne.w	8007848 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8007406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800740c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8007410:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8007418:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 800741a:	429a      	cmp	r2, r3
 800741c:	d00c      	beq.n	8007438 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007424:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8007428:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8007430:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8007432:	429a      	cmp	r2, r3
 8007434:	f040 81dc 	bne.w	80077f0 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8007438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800743a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800743e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8007440:	787b      	ldrb	r3, [r7, #1]
 8007442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007444:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007448:	330c      	adds	r3, #12
 800744a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800744e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	b29b      	uxth	r3, r3
 8007454:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 800745c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b21      	cmp	r3, #33	; 0x21
 8007462:	d008      	beq.n	8007476 <SetTargetData+0x3ba>
 8007464:	2b21      	cmp	r3, #33	; 0x21
 8007466:	f300 81bf 	bgt.w	80077e8 <SetTargetData+0x72c>
 800746a:	2b1b      	cmp	r3, #27
 800746c:	f000 8113 	beq.w	8007696 <SetTargetData+0x5da>
 8007470:	2b1e      	cmp	r3, #30
 8007472:	d004      	beq.n	800747e <SetTargetData+0x3c2>
 8007474:	e1b8      	b.n	80077e8 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800747c:	e1b9      	b.n	80077f2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8007484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007488:	429a      	cmp	r2, r3
 800748a:	dd0f      	ble.n	80074ac <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8007492:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007496:	429a      	cmp	r2, r3
 8007498:	da08      	bge.n	80074ac <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800749a:	7efb      	ldrb	r3, [r7, #27]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d105      	bne.n	80074ac <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80074a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80074aa:	e0f3      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80074ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80074b6:	425b      	negs	r3, r3
 80074b8:	429a      	cmp	r2, r3
 80074ba:	da10      	bge.n	80074de <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80074bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80074c6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80074c8:	429a      	cmp	r2, r3
 80074ca:	dd08      	ble.n	80074de <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80074cc:	7efb      	ldrb	r3, [r7, #27]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80074d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80074dc:	e0da      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80074e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	dd0f      	ble.n	800750c <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80074f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	da08      	bge.n	800750c <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80074fa:	7efb      	ldrb	r3, [r7, #27]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8007506:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800750a:	e0c3      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800750c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8007516:	425b      	negs	r3, r3
 8007518:	429a      	cmp	r2, r3
 800751a:	da10      	bge.n	800753e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800751c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8007526:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8007528:	429a      	cmp	r2, r3
 800752a:	dd08      	ble.n	800753e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800752c:	7efb      	ldrb	r3, [r7, #27]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d105      	bne.n	800753e <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8007538:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800753c:	e0aa      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8007544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007548:	429a      	cmp	r2, r3
 800754a:	dd0f      	ble.n	800756c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8007552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007556:	429a      	cmp	r2, r3
 8007558:	da08      	bge.n	800756c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800755a:	7efb      	ldrb	r3, [r7, #27]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8007566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800756a:	e093      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800756c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8007576:	425b      	negs	r3, r3
 8007578:	429a      	cmp	r2, r3
 800757a:	da13      	bge.n	80075a4 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800757c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8007586:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8007588:	429a      	cmp	r2, r3
 800758a:	dd0b      	ble.n	80075a4 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800758c:	7efb      	ldrb	r3, [r7, #27]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8007598:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800759c:	e07a      	b.n	8007694 <SetTargetData+0x5d8>
 800759e:	bf00      	nop
 80075a0:	2000001c 	.word	0x2000001c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80075aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	dd0f      	ble.n	80075d2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80075b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80075bc:	429a      	cmp	r2, r3
 80075be:	da08      	bge.n	80075d2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80075c0:	7efb      	ldrb	r3, [r7, #27]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80075cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80075d0:	e060      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80075d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80075dc:	425b      	negs	r3, r3
 80075de:	429a      	cmp	r2, r3
 80075e0:	da10      	bge.n	8007604 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80075e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80075ec:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80075ee:	429a      	cmp	r2, r3
 80075f0:	dd08      	ble.n	8007604 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80075f2:	7efb      	ldrb	r3, [r7, #27]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80075fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007602:	e047      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 800760a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800760e:	429a      	cmp	r2, r3
 8007610:	da0c      	bge.n	800762c <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8007618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800761c:	429a      	cmp	r2, r3
 800761e:	dd05      	ble.n	800762c <SetTargetData+0x570>
					AddOffset =
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8007626:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800762a:	e033      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8007632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007636:	429a      	cmp	r2, r3
 8007638:	dd0f      	ble.n	800765a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8007640:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007644:	429a      	cmp	r2, r3
 8007646:	da08      	bge.n	800765a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8007648:	7efb      	ldrb	r3, [r7, #27]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d105      	bne.n	800765a <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8007654:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007658:	e01c      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800765a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8007664:	425b      	negs	r3, r3
 8007666:	429a      	cmp	r2, r3
 8007668:	da10      	bge.n	800768c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800766a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8007674:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8007676:	429a      	cmp	r2, r3
 8007678:	dd08      	ble.n	800768c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800767a:	7efb      	ldrb	r3, [r7, #27]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8007686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800768a:	e003      	b.n	8007694 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8007692:	e0ae      	b.n	80077f2 <SetTargetData+0x736>
 8007694:	e0ad      	b.n	80077f2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800769c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	dd0f      	ble.n	80076c4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80076aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	da08      	bge.n	80076c4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80076b2:	7efb      	ldrb	r3, [r7, #27]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80076be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80076c2:	e090      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80076c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80076ce:	425b      	negs	r3, r3
 80076d0:	429a      	cmp	r2, r3
 80076d2:	da10      	bge.n	80076f6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80076d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80076de:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80076e0:	429a      	cmp	r2, r3
 80076e2:	dd08      	ble.n	80076f6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80076e4:	7efb      	ldrb	r3, [r7, #27]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d105      	bne.n	80076f6 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80076f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80076f4:	e077      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80076fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007700:	429a      	cmp	r2, r3
 8007702:	dd0f      	ble.n	8007724 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800770a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800770e:	429a      	cmp	r2, r3
 8007710:	da08      	bge.n	8007724 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8007712:	7efb      	ldrb	r3, [r7, #27]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d105      	bne.n	8007724 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800771e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007722:	e060      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8007724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800772e:	425b      	negs	r3, r3
 8007730:	429a      	cmp	r2, r3
 8007732:	da10      	bge.n	8007756 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8007734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800773e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8007740:	429a      	cmp	r2, r3
 8007742:	dd08      	ble.n	8007756 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8007744:	7efb      	ldrb	r3, [r7, #27]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8007750:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007754:	e047      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 800775c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007760:	429a      	cmp	r2, r3
 8007762:	da0c      	bge.n	800777e <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800776a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800776e:	429a      	cmp	r2, r3
 8007770:	dd05      	ble.n	800777e <SetTargetData+0x6c2>
					AddOffset =
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8007778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800777c:	e033      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8007784:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007788:	429a      	cmp	r2, r3
 800778a:	dd0f      	ble.n	80077ac <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8007792:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007796:	429a      	cmp	r2, r3
 8007798:	da08      	bge.n	80077ac <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800779a:	7efb      	ldrb	r3, [r7, #27]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d105      	bne.n	80077ac <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80077a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80077aa:	e01c      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80077ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80077b6:	425b      	negs	r3, r3
 80077b8:	429a      	cmp	r2, r3
 80077ba:	da10      	bge.n	80077de <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80077bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80077c6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80077c8:	429a      	cmp	r2, r3
 80077ca:	dd08      	ble.n	80077de <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80077cc:	7efb      	ldrb	r3, [r7, #27]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80077d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80077dc:	e003      	b.n	80077e6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80077e4:	e005      	b.n	80077f2 <SetTargetData+0x736>
 80077e6:	e004      	b.n	80077f2 <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80077ee:	e000      	b.n	80077f2 <SetTargetData+0x736>
			}
		}
 80077f0:	bf00      	nop

		if (uwr_status) {
 80077f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d026      	beq.n	8007848 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80077fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007806:	4413      	add	r3, r2
 8007808:	b29b      	uxth	r3, r3
 800780a:	b21a      	sxth	r2, r3
 800780c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800780e:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8007810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007812:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007816:	b29a      	uxth	r2, r3
 8007818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	b21a      	sxth	r2, r3
 8007822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007824:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8007826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007828:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007832:	4413      	add	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	b21a      	sxth	r2, r3
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 800783c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783e:	2201      	movs	r2, #1
 8007840:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 8007842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007844:	2200      	movs	r2, #0
 8007846:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8007848:	787b      	ldrb	r3, [r7, #1]
 800784a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800784c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007850:	330c      	adds	r3, #12
 8007852:	8b39      	ldrh	r1, [r7, #24]
 8007854:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8007858:	787b      	ldrb	r3, [r7, #1]
 800785a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800785c:	7dd1      	ldrb	r1, [r2, #23]
 800785e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007860:	4413      	add	r3, r2
 8007862:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007866:	3320      	adds	r3, #32
 8007868:	460a      	mov	r2, r1
 800786a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 800786c:	787b      	ldrb	r3, [r7, #1]
 800786e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007870:	7e11      	ldrb	r1, [r2, #24]
 8007872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007874:	4413      	add	r3, r2
 8007876:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	460a      	mov	r2, r1
 800787e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007886:	461a      	mov	r2, r3
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800788e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007892:	4618      	mov	r0, r3
 8007894:	3748      	adds	r7, #72	; 0x48
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b091      	sub	sp, #68	; 0x44
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3318      	adds	r3, #24
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	7c9a      	ldrb	r2, [r3, #18]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	789a      	ldrb	r2, [r3, #2]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bfa8      	it	ge
 80078ea:	4613      	movge	r3, r2
 80078ec:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80078f2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	78da      	ldrb	r2, [r3, #3]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800790a:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	7c9b      	ldrb	r3, [r3, #18]
 8007918:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 800791c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <SetMeasurementData+0x90>

		iteration = 1;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800792a:	e003      	b.n	8007934 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 800792c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007930:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8007934:	2300      	movs	r3, #0
 8007936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800793a:	e048      	b.n	80079ce <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800793c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	3308      	adds	r3, #8
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8007950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007954:	224c      	movs	r2, #76	; 0x4c
 8007956:	fb02 f303 	mul.w	r3, r2, r3
 800795a:	3310      	adds	r3, #16
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	3304      	adds	r3, #4
 8007962:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8007964:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007968:	2b00      	cmp	r3, #0
 800796a:	d114      	bne.n	8007996 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7918      	ldrb	r0, [r3, #4]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7c1b      	ldrb	r3, [r3, #16]
 8007974:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8007978:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	9202      	str	r2, [sp, #8]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4623      	mov	r3, r4
 8007988:	4602      	mov	r2, r0
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f7ff fb96 	bl	80070bc <SetTargetData>
 8007990:	4603      	mov	r3, r0
 8007992:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	7ddb      	ldrb	r3, [r3, #23]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80079ae:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80079b2:	429a      	cmp	r2, r3
 80079b4:	da06      	bge.n	80079c4 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	8a9b      	ldrh	r3, [r3, #20]
 80079ba:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80079bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80079c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079c8:	3301      	adds	r3, #1
 80079ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80079d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3b0      	bcc.n	800793c <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80079e6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80079ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079f2:	e01f      	b.n	8007a34 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80079f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80079fe:	330c      	adds	r3, #12
 8007a00:	2100      	movs	r1, #0
 8007a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8007a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007a12:	3320      	adds	r3, #32
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8007a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007a24:	3324      	adds	r3, #36	; 0x24
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8007a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a2e:	3301      	adds	r3, #1
 8007a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d9db      	bls.n	80079f4 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8007a3c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11b      	bne.n	8007a7c <SetMeasurementData+0x1e0>
 8007a44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d017      	beq.n	8007a7c <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8007a4c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	3308      	adds	r3, #8
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8007a60:	2304      	movs	r3, #4
 8007a62:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8007a64:	7efb      	ldrb	r3, [r7, #27]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	337e      	adds	r3, #126	; 0x7e
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff f996 	bl	8006da8 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8007a7c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3734      	adds	r7, #52	; 0x34
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd90      	pop	{r4, r7, pc}

08007a88 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3318      	adds	r3, #24
 8007a9a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8007aa6:	2280      	movs	r2, #128	; 0x80
 8007aa8:	21ff      	movs	r1, #255	; 0xff
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f01d fcea 	bl	8025484 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f002 fc2e 	bl	800a316 <VL53L1_get_device_results>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8007abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d118      	bne.n	8007af8 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b07      	cmp	r3, #7
 8007acc:	d002      	beq.n	8007ad4 <VL53L1_GetMultiRangingData+0x4c>
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d004      	beq.n	8007adc <VL53L1_GetMultiRangingData+0x54>
 8007ad2:	e007      	b.n	8007ae4 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8007ada:	e006      	b.n	8007aea <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8007ae2:	e002      	b.n	8007aea <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fed4 	bl	800789c <SetMeasurementData>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b090      	sub	sp, #64	; 0x40
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8007b12:	f240 3305 	movw	r3, #773	; 0x305
 8007b16:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	3348      	adds	r3, #72	; 0x48
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8007b24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11c      	bne.n	8007b66 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b32:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8007b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8007b3a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8e3 	bl	8007d0c <VL53L1_run_ref_spad_char>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8007b4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8007b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fe fb2c 	bl	80061b8 <VL53L1_SetPresetMode>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8007b66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b6a:	f113 0f1d 	cmn.w	r3, #29
 8007b6e:	d14e      	bne.n	8007c0e <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8007b70:	f107 0310 	add.w	r3, r7, #16
 8007b74:	2206      	movs	r2, #6
 8007b76:	2128      	movs	r1, #40	; 0x28
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f00e fbf6 	bl	801636a <VL53L1_read_nvm_raw_data>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8007b84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8007b8c:	f107 020c 	add.w	r2, r7, #12
 8007b90:	2302      	movs	r3, #2
 8007b92:	2114      	movs	r1, #20
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f010 fe5f 	bl	8018858 <VL53L1_WriteMulti>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8007ba0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d105      	bne.n	8007bb4 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8007ba8:	7b3a      	ldrb	r2, [r7, #12]
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8007bae:	7b7a      	ldrb	r2, [r7, #13]
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8007bb4:	f107 0310 	add.w	r3, r7, #16
 8007bb8:	3310      	adds	r3, #16
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8007bbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8007bc4:	2306      	movs	r3, #6
 8007bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc8:	210d      	movs	r1, #13
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f010 fe44 	bl	8018858 <VL53L1_WriteMulti>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8007bd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d117      	bne.n	8007c0e <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	785a      	ldrb	r2, [r3, #1]
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	789a      	ldrb	r2, [r3, #2]
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	78da      	ldrb	r2, [r3, #3]
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	791a      	ldrb	r2, [r3, #4]
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	795a      	ldrb	r2, [r3, #5]
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8007c0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3740      	adds	r7, #64	; 0x40
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d84a      	bhi.n	8007cd4 <VL53L1_SmudgeCorrectionEnable+0xb8>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c75 	.word	0x08007c75
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007cb5 	.word	0x08007cb5
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f004 fbee 	bl	800c436 <VL53L1_dynamic_xtalk_correction_disable>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f004 fc17 	bl	800c492 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8007c64:	4603      	mov	r3, r0
 8007c66:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f004 fc40 	bl	800c4ee <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	733b      	strb	r3, [r7, #12]
		break;
 8007c72:	e032      	b.n	8007cda <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f004 fbc7 	bl	800c408 <VL53L1_dynamic_xtalk_correction_enable>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f004 fbf0 	bl	800c464 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8007c84:	4603      	mov	r3, r0
 8007c86:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f004 fc30 	bl	800c4ee <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	733b      	strb	r3, [r7, #12]
		break;
 8007c92:	e022      	b.n	8007cda <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f004 fbb7 	bl	800c408 <VL53L1_dynamic_xtalk_correction_enable>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f004 fbe0 	bl	800c464 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f004 fc09 	bl	800c4c0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	733b      	strb	r3, [r7, #12]
		break;
 8007cb2:	e012      	b.n	8007cda <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f004 fba7 	bl	800c408 <VL53L1_dynamic_xtalk_correction_enable>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f004 fbe7 	bl	800c492 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f004 fc10 	bl	800c4ee <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	733b      	strb	r3, [r7, #12]
		break;
 8007cd2:	e002      	b.n	8007cda <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8007cd4:	23fc      	movs	r3, #252	; 0xfc
 8007cd6:	73fb      	strb	r3, [r7, #15]
		break;
 8007cd8:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8007cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8007ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8007cee:	7b7b      	ldrb	r3, [r7, #13]
 8007cf0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8007cfa:	7b3b      	ldrb	r3, [r7, #12]
 8007cfc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop

08007d0c <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8007d0c:	b5b0      	push	{r4, r5, r7, lr}
 8007d0e:	b08c      	sub	sp, #48	; 0x30
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007d26:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8007d28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f007 fc99 	bl	800f668 <VL53L1_enable_powerforce>
 8007d36:	4603      	mov	r3, r0
 8007d38:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8007d3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d117      	bne.n	8007d72 <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	7858      	ldrb	r0, [r3, #1]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	685c      	ldr	r4, [r3, #4]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	891d      	ldrh	r5, [r3, #8]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	899b      	ldrh	r3, [r3, #12]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	8952      	ldrh	r2, [r2, #10]
 8007d56:	69b9      	ldr	r1, [r7, #24]
 8007d58:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8007d5c:	9102      	str	r1, [sp, #8]
 8007d5e:	9201      	str	r2, [sp, #4]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	462b      	mov	r3, r5
 8007d64:	4622      	mov	r2, r4
 8007d66:	4601      	mov	r1, r0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f009 fbda 	bl	8011522 <VL53L1_set_ref_spad_char_config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8007d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f891 	bl	8007ea8 <VL53L1_run_device_test>
 8007d86:	4603      	mov	r3, r0
 8007d88:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8007d8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d108      	bne.n	8007da4 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8007d92:	f107 020c 	add.w	r2, r7, #12
 8007d96:	2302      	movs	r3, #2
 8007d98:	21d9      	movs	r1, #217	; 0xd9
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f010 fd92 	bl	80188c4 <VL53L1_ReadMulti>
 8007da0:	4603      	mov	r3, r0
 8007da2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8007da4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8007dac:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db4:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8007db8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8007dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d108      	bne.n	8007dde <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8007dcc:	f107 020c 	add.w	r2, r7, #12
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2114      	movs	r1, #20
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f010 fd3f 	bl	8018858 <VL53L1_WriteMulti>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8007dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d107      	bne.n	8007df6 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8007de6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8007dee:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8007df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d108      	bne.n	8007e10 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8007dfe:	f107 020c 	add.w	r2, r7, #12
 8007e02:	2306      	movs	r3, #6
 8007e04:	21ac      	movs	r1, #172	; 0xac
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f010 fd5c 	bl	80188c4 <VL53L1_ReadMulti>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8007e10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8007e18:	f107 020c 	add.w	r2, r7, #12
 8007e1c:	2306      	movs	r3, #6
 8007e1e:	210d      	movs	r1, #13
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f010 fd19 	bl	8018858 <VL53L1_WriteMulti>
 8007e26:	4603      	mov	r3, r0
 8007e28:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8007e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d117      	bne.n	8007e62 <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8007e32:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8007e3a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8007e42:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8007e4a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8007e52:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8007e5a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8007e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d114      	bne.n	8007e94 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d00c      	beq.n	8007e8e <VL53L1_run_ref_spad_char+0x182>
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	dc0e      	bgt.n	8007e96 <VL53L1_run_ref_spad_char+0x18a>
 8007e78:	2b0e      	cmp	r3, #14
 8007e7a:	d002      	beq.n	8007e82 <VL53L1_run_ref_spad_char+0x176>
 8007e7c:	2b0f      	cmp	r3, #15
 8007e7e:	d003      	beq.n	8007e88 <VL53L1_run_ref_spad_char+0x17c>
 8007e80:	e009      	b.n	8007e96 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8007e82:	23e4      	movs	r3, #228	; 0xe4
 8007e84:	77fb      	strb	r3, [r7, #31]
			break;
 8007e86:	e006      	b.n	8007e96 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8007e88:	23e3      	movs	r3, #227	; 0xe3
 8007e8a:	77fb      	strb	r3, [r7, #31]
			break;
 8007e8c:	e003      	b.n	8007e96 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8007e8e:	23e2      	movs	r3, #226	; 0xe2
 8007e90:	77fb      	strb	r3, [r7, #31]
			break;
 8007e92:	e000      	b.n	8007e96 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8007e94:	bf00      	nop



	*pcal_status = status;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	7ffa      	ldrb	r2, [r7, #31]
 8007e9a:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8007e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3720      	adds	r7, #32
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bdb0      	pop	{r4, r5, r7, pc}

08007ea8 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3318      	adds	r3, #24
 8007ebc:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8007ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d108      	bne.n	8007edc <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8007eca:	f107 030b 	add.w	r3, r7, #11
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2130      	movs	r1, #48	; 0x30
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f010 fd88 	bl	80189e8 <VL53L1_RdByte>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8007edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8007ee4:	7afa      	ldrb	r2, [r7, #11]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8007eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f007 fb39 	bl	800f570 <VL53L1_start_test>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8007f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f00f ff5c 	bl	8017dc8 <VL53L1_wait_for_test_completion>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8007f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8007f1c:	f107 020c 	add.w	r2, r7, #12
 8007f20:	2302      	movs	r3, #2
 8007f22:	2189      	movs	r1, #137	; 0x89
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f010 fccd 	bl	80188c4 <VL53L1_ReadMulti>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8007f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d107      	bne.n	8007f46 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8007f36:	7b3a      	ldrb	r2, [r7, #12]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8007f3e:	7b7a      	ldrb	r2, [r7, #13]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8007f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d108      	bne.n	8007f72 <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8007f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f007 fba1 	bl	800f6b0 <VL53L1_clear_interrupt>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8007f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f007 faf7 	bl	800f570 <VL53L1_start_test>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8007f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b21      	cmp	r3, #33	; 0x21
 8007fa6:	d006      	beq.n	8007fb6 <select_offset_per_vcsel+0x24>
 8007fa8:	2b21      	cmp	r3, #33	; 0x21
 8007faa:	dc2b      	bgt.n	8008004 <select_offset_per_vcsel+0x72>
 8007fac:	2b1b      	cmp	r3, #27
 8007fae:	d01c      	beq.n	8007fea <select_offset_per_vcsel+0x58>
 8007fb0:	2b1e      	cmp	r3, #30
 8007fb2:	d00d      	beq.n	8007fd0 <select_offset_per_vcsel+0x3e>
 8007fb4:	e026      	b.n	8008004 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fbc:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8007fc0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8007fcc:	817b      	strh	r3, [r7, #10]
		break;
 8007fce:	e02b      	b.n	8008028 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd6:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8007fda:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe2:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8007fe6:	817b      	strh	r3, [r7, #10]
		break;
 8007fe8:	e01e      	b.n	8008028 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff0:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8007ff4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffc:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8008000:	817b      	strh	r3, [r7, #10]
		break;
 8008002:	e011      	b.n	8008028 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800a:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 800800e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 800801a:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800801c:	23fc      	movs	r3, #252	; 0xfc
 800801e:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	801a      	strh	r2, [r3, #0]
		break;
 8008026:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800802e:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8008030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10b      	bne.n	8008050 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8008038:	7a7b      	ldrb	r3, [r7, #9]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <select_offset_per_vcsel+0xb6>
 8008042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008046:	e001      	b.n	800804c <select_offset_per_vcsel+0xba>
 8008048:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	8013      	strh	r3, [r2, #0]

	return status;
 8008050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8008060:	b490      	push	{r4, r7}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	460b      	mov	r3, r1
 8008070:	71fb      	strb	r3, [r7, #7]
 8008072:	4613      	mov	r3, r2
 8008074:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	b29b      	uxth	r3, r3
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008092:	e021      	b.n	80080d8 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8008094:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	461a      	mov	r2, r3
 80080a0:	0052      	lsls	r2, r2, #1
 80080a2:	441a      	add	r2, r3
 80080a4:	00d3      	lsls	r3, r2, #3
 80080a6:	461a      	mov	r2, r3
 80080a8:	460b      	mov	r3, r1
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	440b      	add	r3, r1
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	4413      	add	r3, r2
 80080b2:	4423      	add	r3, r4
 80080b4:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80080b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	4413      	add	r3, r2
 80080c0:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80080c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3206      	adds	r2, #6
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80080d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080d4:	3301      	adds	r3, #1
 80080d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080d8:	79bb      	ldrb	r3, [r7, #6]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080de:	429a      	cmp	r2, r3
 80080e0:	d3d8      	bcc.n	8008094 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d047      	beq.n	8008178 <vl53l1_diff_histo_stddev+0x118>
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d044      	beq.n	8008178 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080f6:	e03a      	b.n	800816e <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80080f8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	461a      	mov	r2, r3
 8008104:	0052      	lsls	r2, r2, #1
 8008106:	441a      	add	r2, r3
 8008108:	00d3      	lsls	r3, r2, #3
 800810a:	461a      	mov	r2, r3
 800810c:	460b      	mov	r3, r1
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	440b      	add	r3, r1
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	4413      	add	r3, r2
 8008116:	4423      	add	r3, r4
 8008118:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800811c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008120:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008128:	fb03 f202 	mul.w	r2, r3, r2
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	fb92 f3f3 	sdiv	r3, r2, r3
 8008132:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8008134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3206      	adds	r2, #6
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008142:	fb03 f202 	mul.w	r2, r3, r2
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	fb92 f3f3 	sdiv	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8008158:	69b8      	ldr	r0, [r7, #24]
 800815a:	6979      	ldr	r1, [r7, #20]
 800815c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800815e:	fb01 f303 	mul.w	r3, r1, r3
 8008162:	441a      	add	r2, r3
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8008168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800816a:	3301      	adds	r3, #1
 800816c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800816e:	79bb      	ldrb	r3, [r7, #6]
 8008170:	b29b      	uxth	r3, r3
 8008172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008174:	429a      	cmp	r2, r3
 8008176:	d3bf      	bcc.n	80080f8 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8008178:	bf00      	nop
 800817a:	3728      	adds	r7, #40	; 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bc90      	pop	{r4, r7}
 8008180:	4770      	bx	lr

08008182 <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8008182:	b5b0      	push	{r4, r5, r7, lr}
 8008184:	b08c      	sub	sp, #48	; 0x30
 8008186:	af02      	add	r7, sp, #8
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3318      	adds	r3, #24
 8008190:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80081b2:	2318      	movs	r3, #24
 80081b4:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80081b6:	f107 0314 	add.w	r3, r7, #20
 80081ba:	461a      	mov	r2, r3
 80081bc:	f248 018f 	movw	r1, #32911	; 0x808f
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f003 f9fb 	bl	800b5bc <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	461a      	mov	r2, r3
 80081cc:	f248 018e 	movw	r1, #32910	; 0x808e
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f003 f9f3 	bl	800b5bc <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081dc:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f040 811b 	bne.w	800841c <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8008200:	7efb      	ldrb	r3, [r7, #27]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	b2db      	uxtb	r3, r3
 8008206:	7eba      	ldrb	r2, [r7, #26]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008212:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008220:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8008224:	3b01      	subs	r3, #1
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800822a:	e004      	b.n	8008236 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8008236:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800823a:	7efb      	ldrb	r3, [r7, #27]
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	461a      	mov	r2, r3
 8008240:	0052      	lsls	r2, r2, #1
 8008242:	441a      	add	r2, r3
 8008244:	0153      	lsls	r3, r2, #5
 8008246:	461a      	mov	r2, r3
 8008248:	460b      	mov	r3, r1
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	440b      	add	r3, r1
 800824e:	019b      	lsls	r3, r3, #6
 8008250:	4413      	add	r3, r2
 8008252:	4403      	add	r3, r0
 8008254:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8008258:	3308      	adds	r3, #8
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd0c      	ble.n	800827a <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8008260:	7e79      	ldrb	r1, [r7, #25]
 8008262:	7efa      	ldrb	r2, [r7, #27]
 8008264:	f107 030c 	add.w	r3, r7, #12
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	460b      	mov	r3, r1
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	69f8      	ldr	r0, [r7, #28]
 8008276:	f7ff fef3 	bl	8008060 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	db23      	blt.n	80082ca <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8008288:	3318      	adds	r3, #24
 800828a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f01d f8f7 	bl	8025484 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 80082a8:	7efb      	ldrb	r3, [r7, #27]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b4:	2206      	movs	r2, #6
 80082b6:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80082ba:	e034      	b.n	8008326 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	2207      	movs	r2, #7
 80082c4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80082c8:	e02d      	b.n	8008326 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80082d4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80082dc:	e01e      	b.n	800831c <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80082de:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80082e2:	7e39      	ldrb	r1, [r7, #24]
 80082e4:	7efb      	ldrb	r3, [r7, #27]
 80082e6:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	3006      	adds	r0, #6
 80082ee:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80082f2:	69f8      	ldr	r0, [r7, #28]
 80082f4:	461a      	mov	r2, r3
 80082f6:	0052      	lsls	r2, r2, #1
 80082f8:	441a      	add	r2, r3
 80082fa:	00d3      	lsls	r3, r2, #3
 80082fc:	461a      	mov	r2, r3
 80082fe:	460b      	mov	r3, r1
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	440b      	add	r3, r1
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	4413      	add	r3, r2
 8008308:	442b      	add	r3, r5
 800830a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800830e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8008312:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008316:	3301      	adds	r3, #1
 8008318:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800831c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008320:	7ebb      	ldrb	r3, [r7, #26]
 8008322:	429a      	cmp	r2, r3
 8008324:	d3db      	bcc.n	80082de <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8008330:	461a      	mov	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	3b01      	subs	r3, #1
 8008336:	429a      	cmp	r2, r3
 8008338:	d109      	bne.n	800834e <vl53l1_histo_merge+0x1cc>
 800833a:	7efb      	ldrb	r3, [r7, #27]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d106      	bne.n	800834e <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 800834c:	e00e      	b.n	800836c <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 800834e:	7efb      	ldrb	r3, [r7, #27]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d10b      	bne.n	800836c <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800835e:	3301      	adds	r3, #1
 8008360:	b2da      	uxtb	r2, r3
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008368:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800836c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008370:	2b01      	cmp	r3, #1
 8008372:	d102      	bne.n	800837a <vl53l1_histo_merge+0x1f8>
 8008374:	7efb      	ldrb	r3, [r7, #27]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d069      	beq.n	800844e <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008380:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8008384:	2b00      	cmp	r3, #0
 8008386:	d162      	bne.n	800844e <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8008388:	2300      	movs	r3, #0
 800838a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800838c:	e008      	b.n	80083a0 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 800838e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	3206      	adds	r2, #6
 8008394:	2100      	movs	r1, #0
 8008396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800839a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800839c:	3301      	adds	r3, #1
 800839e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80083a0:	7ebb      	ldrb	r3, [r7, #26]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3f1      	bcc.n	800838e <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 80083aa:	2300      	movs	r3, #0
 80083ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80083ae:	e02f      	b.n	8008410 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80083b6:	e023      	b.n	8008400 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 80083b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	3206      	adds	r2, #6
 80083be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80083c2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80083c6:	7efb      	ldrb	r3, [r7, #27]
 80083c8:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80083ca:	69fc      	ldr	r4, [r7, #28]
 80083cc:	461a      	mov	r2, r3
 80083ce:	0052      	lsls	r2, r2, #1
 80083d0:	441a      	add	r2, r3
 80083d2:	00d3      	lsls	r3, r2, #3
 80083d4:	461a      	mov	r2, r3
 80083d6:	460b      	mov	r3, r1
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	440b      	add	r3, r1
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	4413      	add	r3, r2
 80083e0:	442b      	add	r3, r5
 80083e2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80083e6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80083ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083ec:	18c1      	adds	r1, r0, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	3206      	adds	r2, #6
 80083f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80083f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083fa:	3301      	adds	r3, #1
 80083fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008400:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	429a      	cmp	r2, r3
 8008408:	dbd6      	blt.n	80083b8 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 800840a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800840c:	3301      	adds	r3, #1
 800840e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008410:	7ebb      	ldrb	r3, [r7, #26]
 8008412:	b29b      	uxth	r3, r3
 8008414:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008416:	429a      	cmp	r2, r3
 8008418:	d3ca      	bcc.n	80083b0 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 800841a:	e018      	b.n	800844e <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008422:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8008426:	3b01      	subs	r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008430:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800843e:	2bff      	cmp	r3, #255	; 0xff
 8008440:	d105      	bne.n	800844e <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 800844e:	bf00      	nop
 8008450:	3728      	adds	r7, #40	; 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008458 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b0c6      	sub	sp, #280	; 0x118
 800845c:	af00      	add	r7, sp, #0
 800845e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008462:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008466:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8008474:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10b      	bne.n	8008494 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 800847c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008480:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008484:	2200      	movs	r2, #0
 8008486:	2185      	movs	r1, #133	; 0x85
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f010 fa51 	bl	8018930 <VL53L1_WrByte>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8008494:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 800849c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f007 f8df 	bl	800f668 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 80084aa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80084ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80084b6:	f248 018c 	movw	r1, #32908	; 0x808c
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	f003 f87e 	bl	800b5bc <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d81b      	bhi.n	8008500 <VL53L1_load_patch+0xa8>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <VL53L1_load_patch+0x78>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	080084e9 	.word	0x080084e9
 80084d8:	080084f1 	.word	0x080084f1
 80084dc:	080084f9 	.word	0x080084f9
	case 0:
		patch_power = 0x00;
 80084e0:	2300      	movs	r3, #0
 80084e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80084e6:	e00e      	b.n	8008506 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80084e8:	2310      	movs	r3, #16
 80084ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80084ee:	e00a      	b.n	8008506 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80084f0:	2320      	movs	r3, #32
 80084f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80084f6:	e006      	b.n	8008506 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80084fe:	e002      	b.n	8008506 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8008506:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800850a:	2b00      	cmp	r3, #0
 800850c:	d134      	bne.n	8008578 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800850e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008516:	2229      	movs	r2, #41	; 0x29
 8008518:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800851a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800851e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008522:	22c9      	movs	r2, #201	; 0xc9
 8008524:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8008526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800852a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800852e:	220e      	movs	r2, #14
 8008530:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8008532:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800853a:	2240      	movs	r2, #64	; 0x40
 800853c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800853e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008546:	2228      	movs	r2, #40	; 0x28
 8008548:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800854a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800854e:	b2da      	uxtb	r2, r3
 8008550:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008554:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008558:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 800855a:	f107 020c 	add.w	r2, r7, #12
 800855e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008562:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008566:	2306      	movs	r3, #6
 8008568:	f240 4176 	movw	r1, #1142	; 0x476
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f010 f973 	bl	8018858 <VL53L1_WriteMulti>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008578:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800857c:	2b00      	cmp	r3, #0
 800857e:	d132      	bne.n	80085e6 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8008580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008588:	2203      	movs	r2, #3
 800858a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800858c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008594:	226d      	movs	r2, #109	; 0x6d
 8008596:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8008598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800859c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085a0:	2203      	movs	r2, #3
 80085a2:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80085a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085ac:	226f      	movs	r2, #111	; 0x6f
 80085ae:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80085b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085b8:	2207      	movs	r2, #7
 80085ba:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80085bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085c4:	2229      	movs	r2, #41	; 0x29
 80085c6:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80085c8:	f107 020c 	add.w	r2, r7, #12
 80085cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085d0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80085d4:	2306      	movs	r3, #6
 80085d6:	f240 4196 	movw	r1, #1174	; 0x496
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	f010 f93c 	bl	8018858 <VL53L1_WriteMulti>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80085e6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11a      	bne.n	8008624 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80085ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80085fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008602:	2207      	movs	r2, #7
 8008604:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8008606:	f107 020c 	add.w	r2, r7, #12
 800860a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800860e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008612:	2302      	movs	r3, #2
 8008614:	f240 4172 	movw	r1, #1138	; 0x472
 8008618:	6800      	ldr	r0, [r0, #0]
 800861a:	f010 f91d 	bl	8018858 <VL53L1_WriteMulti>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008624:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11a      	bne.n	8008662 <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 800862c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8008638:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800863c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008640:	2207      	movs	r2, #7
 8008642:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8008644:	f107 020c 	add.w	r2, r7, #12
 8008648:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800864c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008650:	2302      	movs	r3, #2
 8008652:	f240 4174 	movw	r1, #1140	; 0x474
 8008656:	6800      	ldr	r0, [r0, #0]
 8008658:	f010 f8fe 	bl	8018858 <VL53L1_WriteMulti>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8008662:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10c      	bne.n	8008684 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 800866a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800866e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008672:	2201      	movs	r2, #1
 8008674:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	f010 f959 	bl	8018930 <VL53L1_WrByte>
 800867e:	4603      	mov	r3, r0
 8008680:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8008684:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 800868c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008690:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008694:	2201      	movs	r2, #1
 8008696:	2185      	movs	r1, #133	; 0x85
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	f010 f949 	bl	8018930 <VL53L1_WrByte>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80086a4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop

080086b4 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80086c8:	2200      	movs	r2, #0
 80086ca:	2185      	movs	r1, #133	; 0x85
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f010 f92f 	bl	8018930 <VL53L1_WrByte>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80086d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f006 ffd4 	bl	800f68c <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80086e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f010 f91c 	bl	8018930 <VL53L1_WrByte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80086fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8008704:	2201      	movs	r2, #1
 8008706:	2185      	movs	r1, #133	; 0x85
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f010 f911 	bl	8018930 <VL53L1_WrByte>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8008712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800871e:	b5b0      	push	{r4, r5, r7, lr}
 8008720:	b08a      	sub	sp, #40	; 0x28
 8008722:	af04      	add	r7, sp, #16
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3318      	adds	r3, #24
 8008732:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800873a:	3308      	adds	r3, #8
 800873c:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 8008742:	2162      	movs	r1, #98	; 0x62
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f006 f810 	bl	800e76a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2204      	movs	r2, #4
 800874e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2210      	movs	r2, #16
 800875a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8008766:	2300      	movs	r3, #0
 8008768:	75bb      	strb	r3, [r7, #22]
 800876a:	e01b      	b.n	80087a4 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 800876c:	7dba      	ldrb	r2, [r7, #22]
 800876e:	4613      	mov	r3, r2
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	3308      	adds	r3, #8
 8008780:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2200      	movs	r2, #0
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2200      	movs	r2, #0
 800878c:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800879e:	7dbb      	ldrb	r3, [r7, #22]
 80087a0:	3301      	adds	r3, #1
 80087a2:	75bb      	strb	r3, [r7, #22]
 80087a4:	7dbb      	ldrb	r3, [r7, #22]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d9e0      	bls.n	800876c <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2210      	movs	r2, #16
 80087ae:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2210      	movs	r2, #16
 80087be:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80087ca:	2300      	movs	r3, #0
 80087cc:	75bb      	strb	r3, [r7, #22]
 80087ce:	e039      	b.n	8008844 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80087d0:	7dba      	ldrb	r2, [r7, #22]
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80087e6:	7dba      	ldrb	r2, [r7, #22]
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	4613      	mov	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80087fc:	7dba      	ldrb	r2, [r7, #22]
 80087fe:	68f9      	ldr	r1, [r7, #12]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 8008812:	7dba      	ldrb	r2, [r7, #22]
 8008814:	68f9      	ldr	r1, [r7, #12]
 8008816:	4613      	mov	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8008828:	7dba      	ldrb	r2, [r7, #22]
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800883e:	7dbb      	ldrb	r3, [r7, #22]
 8008840:	3301      	adds	r3, #1
 8008842:	75bb      	strb	r3, [r7, #22]
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d9c2      	bls.n	80087d0 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2200      	movs	r2, #0
 800884e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2201      	movs	r2, #1
 8008854:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2200      	movs	r2, #0
 800885a:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2200      	movs	r2, #0
 8008860:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2201      	movs	r2, #1
 8008866:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2201      	movs	r2, #1
 800886c:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2201      	movs	r2, #1
 8008872:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800887a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008882:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800888a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2264      	movs	r2, #100	; 0x64
 8008890:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008898:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a8:	2203      	movs	r2, #3
 80088aa:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f240 72db 	movw	r2, #2011	; 0x7db
 80088c0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80088ca:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f005 ff2e 	bl	800e730 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80088da:	3318      	adds	r3, #24
 80088dc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80088e0:	2100      	movs	r1, #0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f01c fdce 	bl	8025484 <memset>
	pdev->bin_rec_pos = 0;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <VL53L1_data_init+0x1fa>
 8008906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f8b8 	bl	8008a84 <VL53L1_read_p2p_data>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8008918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008926:	4618      	mov	r0, r3
 8008928:	f003 fdf8 	bl	800c51c <VL53L1_init_refspadchar_config_struct>
 800892c:	4603      	mov	r3, r0
 800892e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8008930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800893e:	4618      	mov	r0, r3
 8008940:	f003 fe10 	bl	800c564 <VL53L1_init_ssc_config_struct>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8008948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10b      	bne.n	8008968 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f003 fe21 	bl	800c5a6 <VL53L1_init_xtalk_config_struct>
 8008964:	4603      	mov	r3, r0
 8008966:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8008968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d107      	bne.n	8008980 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8008976:	4618      	mov	r0, r3
 8008978:	f003 fe89 	bl	800c68e <VL53L1_init_xtalk_extract_config_struct>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8008980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800898e:	4618      	mov	r0, r3
 8008990:	f003 feac 	bl	800c6ec <VL53L1_init_offset_cal_config_struct>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8008998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d107      	bne.n	80089b0 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80089a6:	4618      	mov	r0, r3
 80089a8:	f003 fec7 	bl	800c73a <VL53L1_init_zone_cal_config_struct>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80089b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f003 fedb 	bl	800c782 <VL53L1_init_hist_post_process_config_struct>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80089d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d107      	bne.n	80089e8 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80089de:	4618      	mov	r0, r3
 80089e0:	f004 f8f6 	bl	800cbd0 <VL53L1_init_hist_gen3_dmax_config_struct>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80089e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80089f6:	4618      	mov	r0, r3
 80089f8:	f003 ff32 	bl	800c860 <VL53L1_init_tuning_parm_storage_struct>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8008a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d116      	bne.n	8008a36 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	7858      	ldrb	r0, [r3, #1]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	8b1c      	ldrh	r4, [r3, #24]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	689d      	ldr	r5, [r3, #8]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	6912      	ldr	r2, [r2, #16]
 8008a1c:	6939      	ldr	r1, [r7, #16]
 8008a1e:	6949      	ldr	r1, [r1, #20]
 8008a20:	9102      	str	r1, [sp, #8]
 8008a22:	9201      	str	r2, [sp, #4]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	462b      	mov	r3, r5
 8008a28:	4622      	mov	r2, r4
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fc8f 	bl	8009350 <VL53L1_set_preset_mode>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2118      	movs	r1, #24
 8008a40:	2000      	movs	r0, #0
 8008a42:	f00a fa90 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2118      	movs	r1, #24
 8008a50:	2000      	movs	r0, #0
 8008a52:	f00a fa88 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	210c      	movs	r1, #12
 8008a60:	2000      	movs	r0, #0
 8008a62:	f006 fc26 	bl	800f2b2 <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f009 fcd2 	bl	8012410 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f009 fbd1 	bl	8012214 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f009 fcf7 	bl	8012466 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8008a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bdb0      	pop	{r4, r5, r7, pc}

08008a84 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b091      	sub	sp, #68	; 0x44
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3318      	adds	r3, #24
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	3348      	adds	r3, #72	; 0x48
 8008aa4:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	339c      	adds	r3, #156	; 0x9c
 8008aaa:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8008aac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f00d fdd1 	bl	8016664 <VL53L1_get_static_nvm_managed>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8008ac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d108      	bne.n	8008ae2 <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	3348      	adds	r3, #72	; 0x48
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f00d ff02 	bl	80168e0 <VL53L1_get_customer_nvm_managed>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8008ae2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d117      	bne.n	8008b1a <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f00e fdda 	bl	80176ac <VL53L1_get_nvm_copy_data>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8008afe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f006 f921 	bl	800ed5c <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8008b1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10e      	bne.n	8008b40 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	895b      	ldrh	r3, [r3, #10]
 8008b26:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8008b40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d108      	bne.n	8008b5a <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	33c0      	adds	r3, #192	; 0xc0
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f00d fc3c 	bl	80163cc <VL53L1_read_nvm_optical_centre>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8008b5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d108      	bne.n	8008b74 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	3360      	adds	r3, #96	; 0x60
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f00d fc52 	bl	8016412 <VL53L1_read_nvm_cal_peak_rate_map>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8008b74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d12d      	bne.n	8008bd8 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	339c      	adds	r3, #156	; 0x9c
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f00d fc6b 	bl	801645e <VL53L1_read_nvm_additional_offset_cal_data>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	889b      	ldrh	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d120      	bne.n	8008bd8 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d11c      	bne.n	8008bd8 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2280      	movs	r2, #128	; 0x80
 8008ba2:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008baa:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	69f9      	ldr	r1, [r7, #28]
 8008bc2:	3102      	adds	r1, #2
 8008bc4:	9103      	str	r1, [sp, #12]
 8008bc6:	9202      	str	r2, [sp, #8]
 8008bc8:	2238      	movs	r2, #56	; 0x38
 8008bca:	9201      	str	r2, [sp, #4]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	22c7      	movs	r2, #199	; 0xc7
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f008 f934 	bl	8010e40 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8008bd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d12f      	bne.n	8008c40 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	461a      	mov	r2, r3
 8008be6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f00d fc5a 	bl	80164a4 <VL53L1_read_nvm_fmt_range_results_data>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8008bf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d120      	bne.n	8008c40 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8008bfe:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8008c06:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8008c0e:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d006      	beq.n	8008c2e <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8008c2c:	e003      	b.n	8008c36 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	2214      	movs	r2, #20
 8008c32:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8008c40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8008c4e:	3308      	adds	r3, #8
 8008c50:	461a      	mov	r2, r3
 8008c52:	21de      	movs	r1, #222	; 0xde
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f00f fefb 	bl	8018a50 <VL53L1_RdWord>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d204      	bcs.n	8008c76 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8008c72:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8008c76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d108      	bne.n	8008c90 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	33bc      	adds	r3, #188	; 0xbc
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f97d 	bl	8008f84 <VL53L1_get_mode_mitigation_roi>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d114      	bne.n	8008cc4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8008cc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3734      	adds	r7, #52	; 0x34
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}

08008cd0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3318      	adds	r3, #24
 8008ce2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cea:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008cf2:	23f1      	movs	r3, #241	; 0xf1
 8008cf4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8008cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10e      	bne.n	8008d1c <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0a:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8008d0e:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3318      	adds	r3, #24
 8008d3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d46:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d4e:	23f1      	movs	r3, #241	; 0xf1
 8008d50:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8008d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10b      	bne.n	8008d72 <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d66:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8008d6a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8008d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b088      	sub	sp, #32
 8008d86:	af02      	add	r7, sp, #8
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3318      	adds	r3, #24
 8008d98:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008da4:	23f1      	movs	r3, #241	; 0xf1
 8008da6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8008da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11b      	bne.n	8008de8 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f203 3362 	addw	r3, r3, #866	; 0x362
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8008dd4:	9201      	str	r2, [sp, #4]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	68b8      	ldr	r0, [r7, #8]
 8008de0:	f006 fe0b 	bl	800f9fa <VL53L1_calc_timeout_register_values>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8008de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3318      	adds	r3, #24
 8008e0a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008e1e:	23f1      	movs	r3, #241	; 0xf1
 8008e20:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8008e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d14a      	bne.n	8008ec0 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f006 fc56 	bl	800f6ea <VL53L1_calc_macro_period_us>
 8008e3e:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8008e46:	6979      	ldr	r1, [r7, #20]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f006 fd14 	bl	800f876 <VL53L1_calc_timeout_us>
 8008e4e:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8008e5a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8008e5c:	8a7b      	ldrh	r3, [r7, #18]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8008e68:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8008e6a:	4413      	add	r3, r2
 8008e6c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8008e6e:	8a7b      	ldrh	r3, [r7, #18]
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f006 fd66 	bl	800f944 <VL53L1_calc_decoded_timeout_us>
 8008e78:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8008e84:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8008e86:	8a7b      	ldrh	r3, [r7, #18]
 8008e88:	021b      	lsls	r3, r3, #8
 8008e8a:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8008e92:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8008e94:	4413      	add	r3, r2
 8008e96:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8008e98:	8a7b      	ldrh	r3, [r7, #18]
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f006 fd51 	bl	800f944 <VL53L1_calc_decoded_timeout_us>
 8008ea2:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8008ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	2b07      	cmp	r3, #7
 8008eec:	d81c      	bhi.n	8008f28 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8008efc:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8008f04:	7dbb      	ldrb	r3, [r7, #22]
 8008f06:	4013      	ands	r3, r2
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	fa42 f303 	asr.w	r3, r2, r3
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e001      	b.n	8008f2c <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008f28:	23fc      	movs	r3, #252	; 0xfc
 8008f2a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8008f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	7858      	ldrb	r0, [r3, #1]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	7819      	ldrb	r1, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f007 fdeb 	bl	8010b3a <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	7898      	ldrb	r0, [r3, #2]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	78d9      	ldrb	r1, [r3, #3]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8008f72:	461a      	mov	r2, r3
 8008f74:	f007 fe20 	bl	8010bb8 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8008f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3318      	adds	r3, #24
 8008f96:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008faa:	f107 020e 	add.w	r2, r7, #14
 8008fae:	f107 010d 	add.w	r1, r7, #13
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f00a f880 	bl	80130b8 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8008fb8:	7bba      	ldrb	r2, [r7, #14]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8008fbe:	7b7a      	ldrb	r2, [r7, #13]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8008fca:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	091b      	lsrs	r3, r3, #4
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8008fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3318      	adds	r3, #24
 8009000:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	331c      	adds	r3, #28
 800900c:	2240      	movs	r2, #64	; 0x40
 800900e:	4619      	mov	r1, r3
 8009010:	f01c fa10 	bl	8025434 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	785a      	ldrb	r2, [r3, #1]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	33c2      	adds	r3, #194	; 0xc2
 800902c:	4618      	mov	r0, r3
 800902e:	f00f fbce 	bl	80187ce <VL53L1_init_zone_config_histogram_bins>
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8009046:	e00f      	b.n	8009068 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b0f      	cmp	r3, #15
 800904e:	d807      	bhi.n	8009060 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	3301      	adds	r3, #1
 8009056:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800905e:	e003      	b.n	8009068 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2211      	movs	r2, #17
 8009064:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8009068:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3318      	adds	r3, #24
 8009086:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	33c2      	adds	r3, #194	; 0xc2
 800908c:	226c      	movs	r2, #108	; 0x6c
 800908e:	4619      	mov	r1, r3
 8009090:	6838      	ldr	r0, [r7, #0]
 8009092:	f01c f9cf 	bl	8025434 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	460b      	mov	r3, r1
 80090b2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3318      	adds	r3, #24
 80090bc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	2b26      	cmp	r3, #38	; 0x26
 80090c4:	f200 8139 	bhi.w	800933a <VL53L1_get_preset_mode_timing_cfg+0x296>
 80090c8:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	0800916d 	.word	0x0800916d
 80090d4:	0800916d 	.word	0x0800916d
 80090d8:	0800916d 	.word	0x0800916d
 80090dc:	0800916d 	.word	0x0800916d
 80090e0:	0800916d 	.word	0x0800916d
 80090e4:	08009197 	.word	0x08009197
 80090e8:	08009197 	.word	0x08009197
 80090ec:	08009197 	.word	0x08009197
 80090f0:	0800933b 	.word	0x0800933b
 80090f4:	0800933b 	.word	0x0800933b
 80090f8:	080091eb 	.word	0x080091eb
 80090fc:	08009293 	.word	0x08009293
 8009100:	080091eb 	.word	0x080091eb
 8009104:	0800933b 	.word	0x0800933b
 8009108:	0800933b 	.word	0x0800933b
 800910c:	0800933b 	.word	0x0800933b
 8009110:	0800916d 	.word	0x0800916d
 8009114:	08009197 	.word	0x08009197
 8009118:	080091eb 	.word	0x080091eb
 800911c:	080091eb 	.word	0x080091eb
 8009120:	080091eb 	.word	0x080091eb
 8009124:	080091eb 	.word	0x080091eb
 8009128:	080091eb 	.word	0x080091eb
 800912c:	08009215 	.word	0x08009215
 8009130:	0800923f 	.word	0x0800923f
 8009134:	08009269 	.word	0x08009269
 8009138:	080091eb 	.word	0x080091eb
 800913c:	080091eb 	.word	0x080091eb
 8009140:	080091eb 	.word	0x080091eb
 8009144:	080092bd 	.word	0x080092bd
 8009148:	080092bd 	.word	0x080092bd
 800914c:	080092bd 	.word	0x080092bd
 8009150:	080092e7 	.word	0x080092e7
 8009154:	080092e7 	.word	0x080092e7
 8009158:	080092e7 	.word	0x080092e7
 800915c:	080091c1 	.word	0x080091c1
 8009160:	080091c1 	.word	0x080091c1
 8009164:	080091c1 	.word	0x080091c1
 8009168:	08009311 	.word	0x08009311
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	601a      	str	r2, [r3, #0]
	break;
 8009194:	e0d4      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	601a      	str	r2, [r3, #0]
	break;
 80091be:	e0bf      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	601a      	str	r2, [r3, #0]
	break;
 80091e8:	e0aa      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	601a      	str	r2, [r3, #0]

	break;
 8009212:	e095      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	601a      	str	r2, [r3, #0]
	break;
 800923c:	e080      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	601a      	str	r2, [r3, #0]
	break;
 8009266:	e06b      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	601a      	str	r2, [r3, #0]
	break;
 8009290:	e056      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	601a      	str	r2, [r3, #0]
	break;
 80092ba:	e041      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	601a      	str	r2, [r3, #0]
	break;
 80092e4:	e02c      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	601a      	str	r2, [r3, #0]
	break;
 800930e:	e017      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	601a      	str	r2, [r3, #0]
	break;
 8009338:	e002      	b.n	8009340 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800933a:	23fc      	movs	r3, #252	; 0xfc
 800933c:	75fb      	strb	r3, [r7, #23]
		break;
 800933e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009340:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009344:	4618      	mov	r0, r3
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b098      	sub	sp, #96	; 0x60
 8009354:	af06      	add	r7, sp, #24
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	72fb      	strb	r3, [r7, #11]
 800935e:	4613      	mov	r3, r2
 8009360:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009362:	2300      	movs	r3, #0
 8009364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3318      	adds	r3, #24
 800936c:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009374:	3308      	adds	r3, #8
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8009378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009382:	f203 3342 	addw	r3, r3, #834	; 0x342
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8009388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800938a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800938e:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	f203 3362 	addw	r3, r3, #866	; 0x362
 8009396:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80093a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80093a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093aa:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80093ae:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80093b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b2:	33c2      	adds	r3, #194	; 0xc2
 80093b4:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80093b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80093bc:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80093be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80093c4:	3318      	adds	r3, #24
 80093c6:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80093c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ca:	7afa      	ldrb	r2, [r7, #11]
 80093cc:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80093ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093d2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80093d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093d8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80093da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093de:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80093e0:	2103      	movs	r1, #3
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f005 f9c1 	bl	800e76a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80093e8:	7afb      	ldrb	r3, [r7, #11]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	2b26      	cmp	r3, #38	; 0x26
 80093ee:	f200 8321 	bhi.w	8009a34 <VL53L1_set_preset_mode+0x6e4>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <VL53L1_set_preset_mode+0xa8>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009495 	.word	0x08009495
 80093fc:	080094b9 	.word	0x080094b9
 8009400:	080094dd 	.word	0x080094dd
 8009404:	08009501 	.word	0x08009501
 8009408:	08009525 	.word	0x08009525
 800940c:	08009549 	.word	0x08009549
 8009410:	0800956d 	.word	0x0800956d
 8009414:	08009591 	.word	0x08009591
 8009418:	08009a35 	.word	0x08009a35
 800941c:	08009a35 	.word	0x08009a35
 8009420:	080095b5 	.word	0x080095b5
 8009424:	0800971d 	.word	0x0800971d
 8009428:	080098ad 	.word	0x080098ad
 800942c:	080098d5 	.word	0x080098d5
 8009430:	080098fd 	.word	0x080098fd
 8009434:	08009925 	.word	0x08009925
 8009438:	0800994d 	.word	0x0800994d
 800943c:	08009971 	.word	0x08009971
 8009440:	080096f5 	.word	0x080096f5
 8009444:	080095dd 	.word	0x080095dd
 8009448:	08009605 	.word	0x08009605
 800944c:	0800962d 	.word	0x0800962d
 8009450:	08009655 	.word	0x08009655
 8009454:	0800967d 	.word	0x0800967d
 8009458:	080096a5 	.word	0x080096a5
 800945c:	080096cd 	.word	0x080096cd
 8009460:	08009745 	.word	0x08009745
 8009464:	0800976d 	.word	0x0800976d
 8009468:	08009795 	.word	0x08009795
 800946c:	080097bd 	.word	0x080097bd
 8009470:	080097e5 	.word	0x080097e5
 8009474:	0800980d 	.word	0x0800980d
 8009478:	08009835 	.word	0x08009835
 800947c:	0800985d 	.word	0x0800985d
 8009480:	08009885 	.word	0x08009885
 8009484:	08009995 	.word	0x08009995
 8009488:	080099bd 	.word	0x080099bd
 800948c:	080099e5 	.word	0x080099e5
 8009490:	08009a0d 	.word	0x08009a0d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	9302      	str	r3, [sp, #8]
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094ac:	f003 fbc6 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80094b6:	e2c1      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	9303      	str	r3, [sp, #12]
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	9302      	str	r3, [sp, #8]
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094d0:	f003 fd2d 	bl	800cf2e <VL53L1_preset_mode_standard_ranging_short_range>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80094da:	e2af      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	9303      	str	r3, [sp, #12]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	9302      	str	r3, [sp, #8]
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094f4:	f003 fd60 	bl	800cfb8 <VL53L1_preset_mode_standard_ranging_long_range>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80094fe:	e29d      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009516:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009518:	f003 fd93 	bl	800d042 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009522:	e28b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800953a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800953c:	f003 fdaa 	bl	800d094 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009546:	e279      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800955e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009560:	f003 fdc1 	bl	800d0e6 <VL53L1_preset_mode_timed_ranging>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800956a:	e267      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	9303      	str	r3, [sp, #12]
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009582:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009584:	f003 fded 	bl	800d162 <VL53L1_preset_mode_timed_ranging_short_range>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800958e:	e255      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	9303      	str	r3, [sp, #12]
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095a8:	f003 fe19 	bl	800d1de <VL53L1_preset_mode_timed_ranging_long_range>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80095b2:	e243      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095d0:	f003 fefb 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80095da:	e22f      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	9303      	str	r3, [sp, #12]
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	9302      	str	r3, [sp, #8]
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095f8:	f003 ff7c 	bl	800d4f4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009602:	e21b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800961e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009620:	f003 ffcc 	bl	800d5bc <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800962a:	e207      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009646:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009648:	f003 ffe0 	bl	800d60c <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009652:	e1f3      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800966e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009670:	f004 f830 	bl	800d6d4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800967a:	e1df      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009694:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009696:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009698:	f004 fe25 	bl	800e2e6 <VL53L1_preset_mode_histogram_multizone>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80096a2:	e1cb      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096c0:	f004 fe63 	bl	800e38a <VL53L1_preset_mode_histogram_multizone_short_range>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80096ca:	e1b7      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096e8:	f004 fea1 	bl	800e42e <VL53L1_preset_mode_histogram_multizone_long_range>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80096f2:	e1a3      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800970e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009710:	f004 ffde 	bl	800e6d0 <VL53L1_preset_mode_histogram_ranging_ref>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800971a:	e18f      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	9303      	str	r3, [sp, #12]
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	9302      	str	r3, [sp, #8]
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009736:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009738:	f003 fff4 	bl	800d724 <VL53L1_preset_mode_histogram_ranging_short_timing>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009742:	e17b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	9303      	str	r3, [sp, #12]
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800975c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800975e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009760:	f004 f86c 	bl	800d83c <VL53L1_preset_mode_histogram_long_range>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800976a:	e167      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	9302      	str	r3, [sp, #8]
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009788:	f004 f8f6 	bl	800d978 <VL53L1_preset_mode_histogram_long_range_mm1>
 800978c:	4603      	mov	r3, r0
 800978e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009792:	e153      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097b0:	f004 f943 	bl	800da3a <VL53L1_preset_mode_histogram_long_range_mm2>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80097ba:	e13f      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097d8:	f004 f957 	bl	800da8a <VL53L1_preset_mode_histogram_medium_range>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80097e2:	e12b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	9303      	str	r3, [sp, #12]
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	9302      	str	r3, [sp, #8]
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009800:	f004 f9e1 	bl	800dbc6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009804:	4603      	mov	r3, r0
 8009806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800980a:	e117      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	9303      	str	r3, [sp, #12]
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	9302      	str	r3, [sp, #8]
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009826:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009828:	f004 fa2e 	bl	800dc88 <VL53L1_preset_mode_histogram_medium_range_mm2>
 800982c:	4603      	mov	r3, r0
 800982e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009832:	e103      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800984c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800984e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009850:	f004 fa42 	bl	800dcd8 <VL53L1_preset_mode_histogram_short_range>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800985a:	e0ef      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	9303      	str	r3, [sp, #12]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	9302      	str	r3, [sp, #8]
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009874:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009876:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009878:	f004 fb4c 	bl	800df14 <VL53L1_preset_mode_histogram_short_range_mm1>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009882:	e0db      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	9303      	str	r3, [sp, #12]
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800989e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098a0:	f004 fb99 	bl	800dfd6 <VL53L1_preset_mode_histogram_short_range_mm2>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80098aa:	e0c7      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	9302      	str	r3, [sp, #8]
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098c8:	f004 fbad 	bl	800e026 <VL53L1_preset_mode_histogram_characterisation>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80098d2:	e0b3      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098f0:	f004 fbca 	bl	800e088 <VL53L1_preset_mode_histogram_xtalk_planar>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80098fa:	e09f      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	9304      	str	r3, [sp, #16]
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	9302      	str	r3, [sp, #8]
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009914:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009916:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009918:	f004 fc2d 	bl	800e176 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009922:	e08b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800993e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009940:	f004 fcad 	bl	800e29e <VL53L1_preset_mode_histogram_xtalk_mm2>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800994a:	e077      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009962:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009964:	f004 fdb5 	bl	800e4d2 <VL53L1_preset_mode_olt>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800996e:	e065      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009988:	f003 fce5 	bl	800d356 <VL53L1_preset_mode_singleshot_ranging>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009992:	e053      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	9302      	str	r3, [sp, #8]
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80099b0:	f003 fc7d 	bl	800d2ae <VL53L1_preset_mode_low_power_auto_short_ranging>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80099ba:	e03f      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	9304      	str	r3, [sp, #16]
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80099d8:	f003 fc3f 	bl	800d25a <VL53L1_preset_mode_low_power_auto_ranging>
 80099dc:	4603      	mov	r3, r0
 80099de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80099e2:	e02b      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	9302      	str	r3, [sp, #8]
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a00:	f003 fc7f 	bl	800d302 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8009a0a:	e017      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	9303      	str	r3, [sp, #12]
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	9302      	str	r3, [sp, #8]
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a28:	f004 f9f4 	bl	800de14 <VL53L1_preset_mode_special_histogram_short_range>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8009a32:	e003      	b.n	8009a3c <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009a34:	23fc      	movs	r3, #252	; 0xfc
 8009a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8009a3a:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8009a3c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d105      	bne.n	8009a50 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	893a      	ldrh	r2, [r7, #8]
 8009a48:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8009a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4c:	893a      	ldrh	r2, [r7, #8]
 8009a4e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8009a50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d108      	bne.n	8009a6a <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8009a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff f98f 	bl	8008d82 <VL53L1_set_timeouts_us>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8009a6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8009a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff f92b 	bl	8008cd0 <VL53L1_set_inter_measurement_period_ms>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8009a86:	3301      	adds	r3, #1
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8009a90:	4619      	mov	r1, r3
 8009a92:	4610      	mov	r0, r2
 8009a94:	f005 fa82 	bl	800ef9c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8009a98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3748      	adds	r7, #72	; 0x48
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	887a      	ldrh	r2, [r7, #2]
 8009aec:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8009af0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3318      	adds	r3, #24
 8009b12:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8009b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b085      	sub	sp, #20
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	460b      	mov	r3, r1
 8009b38:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3318      	adds	r3, #24
 8009b42:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8009b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b0d2      	sub	sp, #328	; 0x148
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009b6a:	6018      	str	r0, [r3, #0]
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b74:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8009b78:	4602      	mov	r2, r0
 8009b7a:	701a      	strb	r2, [r3, #0]
 8009b7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b80:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009b84:	460a      	mov	r2, r1
 8009b86:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3318      	adds	r3, #24
 8009b9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8009b9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ba2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009bac:	3308      	adds	r3, #8
 8009bae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8009bb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bb6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8009bba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8009bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bc2:	3348      	adds	r3, #72	; 0x48
 8009bc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bcc:	f203 3342 	addw	r3, r3, #834	; 0x342
 8009bd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bd8:	f203 3362 	addw	r3, r3, #866	; 0x362
 8009bdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009be0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009be4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009be8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bf0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009bf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bfc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8009c00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8009c04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c08:	332c      	adds	r3, #44	; 0x2c
 8009c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8009c0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c12:	3348      	adds	r3, #72	; 0x48
 8009c14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8009c18:	f107 030c 	add.w	r3, r7, #12
 8009c1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8009c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c3c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c40:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8009c48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c4c:	791b      	ldrb	r3, [r3, #4]
 8009c4e:	b25b      	sxtb	r3, r3
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009c56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009c5a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8009c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8009c68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c6c:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8009c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8009c76:	3336      	adds	r3, #54	; 0x36
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009c7e:	4413      	add	r3, r2
 8009c80:	1d9a      	adds	r2, r3, #6
 8009c82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009c86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff f955 	bl	8008f3c <VL53L1_set_user_zone>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8009c98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c9c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d019      	beq.n	8009cd8 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8009ca4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009ca8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009cac:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009cba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8009cbe:	4413      	add	r3, r2
 8009cc0:	1c9a      	adds	r2, r3, #2
 8009cc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009cc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009cca:	4611      	mov	r1, r2
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	f001 fbd7 	bl	800b480 <VL53L1_set_zone_dss_config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8009cd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009cdc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10d      	bne.n	8009d04 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8009ce8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009cec:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d107      	bne.n	8009d04 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8009cf4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009cf8:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8009cfc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d00:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8009d04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0c:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8009d10:	2bff      	cmp	r3, #255	; 0xff
 8009d12:	d106      	bne.n	8009d22 <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8009d14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009d22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d139      	bne.n	8009da6 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8009d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d131      	bne.n	8009da6 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8009d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d46:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8009d4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8009d56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8009d60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d64:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8009d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d109      	bne.n	8009d84 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8009d70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009d78:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8009d7a:	b21a      	sxth	r2, r3
 8009d7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d80:	825a      	strh	r2, [r3, #18]
 8009d82:	e003      	b.n	8009d8c <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8009d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d88:	2200      	movs	r2, #0
 8009d8a:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8009d8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009d90:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d805      	bhi.n	8009da6 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8009d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009d9e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009da2:	2205      	movs	r2, #5
 8009da4:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009da6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dae:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d117      	bne.n	8009de6 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8009db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d10f      	bne.n	8009de6 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8009dc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dce:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8009dd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dd6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8009dda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009dde:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009de2:	2206      	movs	r2, #6
 8009de4:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8009de6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8009dee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009df2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	f007 f98c 	bl	8011114 <VL53L1_save_cfg_data>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8009e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e06:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d826      	bhi.n	8009e60 <VL53L1_init_and_start_range+0x304>
 8009e12:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <VL53L1_init_and_start_range+0x2bc>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e59 	.word	0x08009e59
 8009e1c:	08009e51 	.word	0x08009e51
 8009e20:	08009e49 	.word	0x08009e49
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e31 	.word	0x08009e31
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e36:	e017      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8009e38:	230d      	movs	r3, #13
 8009e3a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e3e:	e013      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8009e40:	2324      	movs	r3, #36	; 0x24
 8009e42:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e46:	e00f      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8009e48:	2344      	movs	r3, #68	; 0x44
 8009e4a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e4e:	e00b      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8009e50:	235a      	movs	r3, #90	; 0x5a
 8009e52:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e56:	e007      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8009e58:	2371      	movs	r3, #113	; 0x71
 8009e5a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e5e:	e003      	b.n	8009e68 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8009e60:	2383      	movs	r3, #131	; 0x83
 8009e62:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009e66:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8009e68:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009e6c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8009e70:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8009e74:	f107 030c 	add.w	r3, r7, #12
 8009e78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8009e82:	e00b      	b.n	8009e9c <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8009e84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8009e92:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8009e96:	3301      	adds	r3, #1
 8009e98:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8009e9c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8009ea0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d3ed      	bcc.n	8009e84 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8009ea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009eac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	d917      	bls.n	8009ee6 <VL53L1_init_and_start_range+0x38a>
 8009eb6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d113      	bne.n	8009ee6 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009ebe:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009ec2:	f1c3 0301 	rsb	r3, r3, #1
 8009ec6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009eca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8009ece:	f107 020c 	add.w	r2, r7, #12
 8009ed2:	4413      	add	r3, r2
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	210b      	movs	r1, #11
 8009ed8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8009edc:	f00c fb0d 	bl	80164fa <VL53L1_i2c_encode_static_nvm_managed>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009ee6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009eea:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d917      	bls.n	8009f24 <VL53L1_init_and_start_range+0x3c8>
 8009ef4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d113      	bne.n	8009f24 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009efc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009f00:	f1c3 030d 	rsb	r3, r3, #13
 8009f04:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009f08:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8009f0c:	f107 020c 	add.w	r2, r7, #12
 8009f10:	4413      	add	r3, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	2117      	movs	r1, #23
 8009f16:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8009f1a:	f00c fbca 	bl	80166b2 <VL53L1_i2c_encode_customer_nvm_managed>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009f24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009f28:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d917      	bls.n	8009f62 <VL53L1_init_and_start_range+0x406>
 8009f32:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d113      	bne.n	8009f62 <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009f3a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009f3e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8009f42:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009f46:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8009f4a:	f107 020c 	add.w	r2, r7, #12
 8009f4e:	4413      	add	r3, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	2120      	movs	r1, #32
 8009f54:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009f58:	f00c fce9 	bl	801692e <VL53L1_i2c_encode_static_config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8009f62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009f66:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d917      	bls.n	8009fa0 <VL53L1_init_and_start_range+0x444>
 8009f70:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d113      	bne.n	8009fa0 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009f78:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009f7c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8009f80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009f84:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8009f88:	f107 020c 	add.w	r2, r7, #12
 8009f8c:	4413      	add	r3, r2
 8009f8e:	461a      	mov	r2, r3
 8009f90:	2116      	movs	r1, #22
 8009f92:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009f96:	f00c fdad 	bl	8016af4 <VL53L1_i2c_encode_general_config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8009fa0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fa4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d917      	bls.n	8009fde <VL53L1_init_and_start_range+0x482>
 8009fae:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d113      	bne.n	8009fde <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009fb6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009fba:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8009fbe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009fc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8009fc6:	f107 020c 	add.w	r2, r7, #12
 8009fca:	4413      	add	r3, r2
 8009fcc:	461a      	mov	r2, r3
 8009fce:	2117      	movs	r1, #23
 8009fd0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8009fd4:	f00c fe12 	bl	8016bfc <VL53L1_i2c_encode_timing_config>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8009fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fe2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d036      	beq.n	800a05a <VL53L1_init_and_start_range+0x4fe>
 8009fec:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d132      	bne.n	800a05a <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009ff4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009ff8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8009ffc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800a000:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a004:	791b      	ldrb	r3, [r3, #4]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d017      	beq.n	800a03e <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a012:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 800a014:	f043 0301 	orr.w	r3, r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a01e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a024:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800a026:	f043 0301 	orr.w	r3, r3, #1
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a030:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a036:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 800a038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a03c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a03e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800a042:	f107 020c 	add.w	r2, r7, #12
 800a046:	4413      	add	r3, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	2112      	movs	r1, #18
 800a04c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a050:	f00c fe56 	bl	8016d00 <VL53L1_i2c_encode_dynamic_config>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 800a05a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d113      	bne.n	800a08a <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800a062:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800a066:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800a06a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a06e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800a072:	f107 020c 	add.w	r2, r7, #12
 800a076:	4413      	add	r3, r2
 800a078:	461a      	mov	r2, r3
 800a07a:	2105      	movs	r1, #5
 800a07c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800a080:	f00c fec3 	bl	8016e0a <VL53L1_i2c_encode_system_control>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 800a08a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10f      	bne.n	800a0b2 <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 800a092:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a096:	f107 020c 	add.w	r2, r7, #12
 800a09a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800a09e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800a0a2:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 800a0a6:	6800      	ldr	r0, [r0, #0]
 800a0a8:	f00e fbd6 	bl	8018858 <VL53L1_WriteMulti>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 800a0b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800a0ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	f004 fb82 	bl	800e7cc <VL53L1_update_ll_driver_rd_state>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 800a0ce:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800a0d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	f004 fd15 	bl	800eb0e <VL53L1_update_ll_driver_cfg_state>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 800a0ea:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3318      	adds	r3, #24
 800a108:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a110:	3308      	adds	r3, #8
 800a112:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a126:	b25b      	sxtb	r3, r3
 800a128:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f00c fea1 	bl	8016e80 <VL53L1_set_system_control>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a148:	f003 030f 	and.w	r3, r3, #15
 800a14c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 800a154:	2103      	movs	r1, #3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f004 fb07 	bl	800e76a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800a162:	3301      	adds	r3, #1
 800a164:	b2da      	uxtb	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f004 ff14 	bl	800ef9c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f004 ff46 	bl	800f006 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800a184:	2b01      	cmp	r3, #1
 800a186:	d102      	bne.n	800a18e <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f008 f9b4 	bl	80124f6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800a18e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b0c8      	sub	sp, #288	; 0x120
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a1a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a1a8:	6018      	str	r0, [r3, #0]
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a1b0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a1b4:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a1bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a1c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3318      	adds	r3, #24
 800a1c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800a1cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a1d0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a1d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800a1d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a1dc:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800a1e0:	331c      	adds	r3, #28
 800a1e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800a1e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a1ea:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a1ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800a1f2:	2388      	movs	r3, #136	; 0x88
 800a1f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800a204:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a208:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d008      	beq.n	800a224 <VL53L1_get_measurement_results+0x8a>
 800a212:	2b02      	cmp	r3, #2
 800a214:	d10d      	bne.n	800a232 <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800a216:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a21a:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800a21e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a222:	e00a      	b.n	800a23a <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800a224:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a228:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800a22c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a230:	e003      	b.n	800a23a <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800a232:	232c      	movs	r3, #44	; 0x2c
 800a234:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800a238:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 800a23a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10f      	bne.n	800a262 <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 800a242:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800a246:	f107 0208 	add.w	r2, r7, #8
 800a24a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800a24e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800a252:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800a256:	6800      	ldr	r0, [r0, #0]
 800a258:	f00e fb34 	bl	80188c4 <VL53L1_ReadMulti>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800a262:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a266:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d917      	bls.n	800a2a0 <VL53L1_get_measurement_results+0x106>
 800a270:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a274:	2b00      	cmp	r3, #0
 800a276:	d113      	bne.n	800a2a0 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a278:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a27c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800a280:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a284:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800a288:	f107 0208 	add.w	r2, r7, #8
 800a28c:	4413      	add	r3, r2
 800a28e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a292:	4619      	mov	r1, r3
 800a294:	2038      	movs	r0, #56	; 0x38
 800a296:	f00c ff71 	bl	801717c <VL53L1_i2c_decode_debug_results>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800a2a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a2a4:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d017      	beq.n	800a2de <VL53L1_get_measurement_results+0x144>
 800a2ae:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d113      	bne.n	800a2de <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a2b6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a2ba:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800a2be:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a2c2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	2021      	movs	r0, #33	; 0x21
 800a2d4:	f00c fef1 	bl	80170ba <VL53L1_i2c_decode_core_results>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800a2de:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d110      	bne.n	800a308 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a2ec:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800a2f0:	f107 0208 	add.w	r2, r7, #8
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	202c      	movs	r0, #44	; 0x2c
 800a2fe:	f00c fde6 	bl	8016ece <VL53L1_i2c_decode_system_results>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a308:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	b0a0      	sub	sp, #128	; 0x80
 800a31c:	af06      	add	r7, sp, #24
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	460b      	mov	r3, r1
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a326:	2300      	movs	r3, #0
 800a328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3318      	adds	r3, #24
 800a330:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a338:	3308      	adds	r3, #8
 800a33a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 800a33c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a33e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 800a340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a342:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a346:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 800a348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a34a:	332c      	adds	r3, #44	; 0x2c
 800a34c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 800a34e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a350:	33c2      	adds	r3, #194	; 0xc2
 800a352:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 800a354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a356:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800a35a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800a362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a364:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800a368:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800a36a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a36c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800a372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a374:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800a378:	3318      	adds	r3, #24
 800a37a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 800a37c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a37e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a382:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800a384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a386:	3348      	adds	r3, #72	; 0x48
 800a388:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 800a38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a38c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 800a390:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800a392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a394:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800a39a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a39c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d108      	bne.n	800a3b6 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a3aa:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <VL53L1_get_device_results+0xa0>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e000      	b.n	800a3b8 <VL53L1_get_device_results+0xa2>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 800a3bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3be:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 82a9 	beq.w	800a91e <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 800a3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 fbd7 	bl	800ab88 <VL53L1_get_histogram_bin_data>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 800a3e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d118      	bne.n	800a41a <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ea:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d114      	bne.n	800a41a <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 800a3f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 800a3fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a402:	4413      	add	r3, r2
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a408:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f005 fb6c 	bl	800faec <VL53L1_hist_copy_and_scale_ambient_info>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 800a41a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f040 8220 	bne.w	800a864 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a424:	f107 0313 	add.w	r3, r7, #19
 800a428:	4619      	mov	r1, r3
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f008 f91a 	bl	8012664 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800a430:	7cfb      	ldrb	r3, [r7, #19]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 800a436:	2301      	movs	r3, #1
 800a438:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800a43a:	7cfb      	ldrb	r3, [r7, #19]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 800a442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a446:	2b00      	cmp	r3, #0
 800a448:	d007      	beq.n	800a45a <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800a44a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	3202      	adds	r2, #2
 800a452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800a456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a458:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 800a45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a45c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 800a460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a462:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 800a464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f005 fa41 	bl	800f8f8 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 800a476:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800a478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47a:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a484:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a48e:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800a490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a492:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800a494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a496:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 800a49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49c:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800a49e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4a0:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800a4a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a6:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 800a4a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4aa:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800a4ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4b0:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800a4b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4b6:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 800a4ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4bc:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800a4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4c2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800a4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 800a4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ce:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d8:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 800a4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4dc:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800a4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e0:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e4:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800a4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e8:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 800a4ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ec:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 800a4f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4f2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f004 fc2f 	bl	800ed5c <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800a4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a500:	795b      	ldrb	r3, [r3, #5]
 800a502:	2b03      	cmp	r3, #3
 800a504:	d048      	beq.n	800a598 <VL53L1_get_device_results+0x282>
 800a506:	2b03      	cmp	r3, #3
 800a508:	dc56      	bgt.n	800a5b8 <VL53L1_get_device_results+0x2a2>
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d002      	beq.n	800a514 <VL53L1_get_device_results+0x1fe>
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d02e      	beq.n	800a570 <VL53L1_get_device_results+0x25a>
 800a512:	e051      	b.n	800a5b8 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800a514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a516:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 800a51a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800a52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a52c:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 800a530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a532:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800a53c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a53e:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 800a542:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a544:	319c      	adds	r1, #156	; 0x9c
 800a546:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a548:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 800a54c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800a550:	b2a4      	uxth	r4, r4
 800a552:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800a554:	351c      	adds	r5, #28
 800a556:	9505      	str	r5, [sp, #20]
 800a558:	9404      	str	r4, [sp, #16]
 800a55a:	9003      	str	r0, [sp, #12]
 800a55c:	9102      	str	r1, [sp, #8]
 800a55e:	9201      	str	r2, [sp, #4]
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	4643      	mov	r3, r8
 800a564:	4672      	mov	r2, lr
 800a566:	4661      	mov	r1, ip
 800a568:	4630      	mov	r0, r6
 800a56a:	f006 fa36 	bl	80109da <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800a56e:	e027      	b.n	800a5c0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 800a570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a572:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 800a57a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a57e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a580:	4613      	mov	r3, r2
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	440b      	add	r3, r1
 800a58a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a58e:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 800a590:	b21a      	sxth	r2, r3
 800a592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a594:	839a      	strh	r2, [r3, #28]
		break;
 800a596:	e013      	b.n	800a5c0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 800a598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a59a:	331c      	adds	r3, #28
 800a59c:	4619      	mov	r1, r3
 800a59e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a5a0:	f7fd fcf7 	bl	8007f92 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800a5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	b21a      	sxth	r2, r3
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	839a      	strh	r2, [r3, #28]
		break;
 800a5b6:	e003      	b.n	800a5c0 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 800a5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	839a      	strh	r2, [r3, #28]
		break;
 800a5be:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 800a5c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f040 814f 	bne.w	800a868 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5cc:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d2:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800a5d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5d8:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 800a5dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5de:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800a5e2:	b29c      	uxth	r4, r3
 800a5e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5e6:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	f006 fb99 	bl	8010d24 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800a5f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5f4:	7999      	ldrb	r1, [r3, #6]
 800a5f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5f8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 ff7b 	bl	800b4fa <VL53L1_get_dmax_calibration_data>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 800a60a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f040 812c 	bne.w	800a86c <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 800a614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a616:	f503 7526 	add.w	r5, r3, #664	; 0x298
 800a61a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a61c:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800a620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a622:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800a626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a628:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 800a62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a62e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800a632:	3308      	adds	r3, #8
				pdev->wArea2,
 800a634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a636:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 800a63a:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 800a63c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a63e:	9405      	str	r4, [sp, #20]
 800a640:	f107 0413 	add.w	r4, r7, #19
 800a644:	9404      	str	r4, [sp, #16]
 800a646:	9203      	str	r2, [sp, #12]
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	9001      	str	r0, [sp, #4]
 800a64c:	9100      	str	r1, [sp, #0]
 800a64e:	4633      	mov	r3, r6
 800a650:	462a      	mov	r2, r5
 800a652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f00e fb45 	bl	8018ce4 <VL53L1_ipp_hist_process_data>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 800a660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a664:	2b00      	cmp	r3, #0
 800a666:	d050      	beq.n	800a70a <VL53L1_get_device_results+0x3f4>
 800a668:	7cfb      	ldrb	r3, [r7, #19]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d94d      	bls.n	800a70a <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800a66e:	2300      	movs	r3, #0
 800a670:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a674:	e045      	b.n	800a702 <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 800a676:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a67a:	224c      	movs	r2, #76	; 0x4c
 800a67c:	fb02 f303 	mul.w	r3, r2, r3
 800a680:	3310      	adds	r3, #16
 800a682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a684:	4413      	add	r3, r2
 800a686:	3304      	adds	r3, #4
 800a688:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	7cfa      	ldrb	r2, [r7, #19]
 800a690:	fbb3 f2f2 	udiv	r2, r3, r2
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69c:	7cfa      	ldrb	r2, [r7, #19]
 800a69e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6aa:	7cfa      	ldrb	r2, [r7, #19]
 800a6ac:	fb93 f2f2 	sdiv	r2, r3, r2
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	7cfb      	ldrb	r3, [r7, #19]
 800a6bc:	fb92 f3f3 	sdiv	r3, r2, r3
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	7cfb      	ldrb	r3, [r7, #19]
 800a6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a6dc:	461a      	mov	r2, r3
 800a6de:	7cfb      	ldrb	r3, [r7, #19]
 800a6e0:	fb92 f3f3 	sdiv	r3, r2, r3
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ee:	7cfa      	ldrb	r2, [r7, #19]
 800a6f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800a6f8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a702:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a706:	2b03      	cmp	r3, #3
 800a708:	d9b5      	bls.n	800a676 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 800a70a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f040 80ae 	bne.w	800a870 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 800a714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a716:	f503 7016 	add.w	r0, r3, #600	; 0x258
 800a71a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a71c:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800a720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a722:	330e      	adds	r3, #14
 800a724:	461a      	mov	r2, r3
 800a726:	f006 f922 	bl	801096e <VL53L1_hist_wrap_dmax>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 800a730:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a734:	2b00      	cmp	r3, #0
 800a736:	f040 809d 	bne.w	800a874 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800a73a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a73c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 800a744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a74c:	4413      	add	r3, r2
 800a74e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800a750:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 800a754:	4613      	mov	r3, r2
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a762:	4413      	add	r3, r2
 800a764:	f103 0208 	add.w	r2, r3, #8
 800a768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f005 fc1d 	bl	800ffaa <VL53L1_hist_phase_consistency_check>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 800a776:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d17c      	bne.n	800a878 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800a77e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a780:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 800a788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a790:	4413      	add	r3, r2
 800a792:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800a794:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 800a798:	4613      	mov	r3, r2
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a7a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f103 0208 	add.w	r2, r3, #8
 800a7ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f006 f883 	bl	80108be <VL53L1_hist_xmonitor_consistency_check>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 800a7be:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d15a      	bne.n	800a87c <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800a7c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a7cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	2210      	movs	r2, #16
 800a7d4:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800a7d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7d8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a7dc:	3301      	adds	r3, #1
 800a7de:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7ea:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 800a7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ee:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800a7f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d222      	bcs.n	800a840 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 800a7fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a802:	4413      	add	r3, r2
 800a804:	3304      	adds	r3, #4
 800a806:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800a808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80a:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 800a80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a80e:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800a810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a812:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800a814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a816:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800a818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800a81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a820:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 800a828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82a:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800a82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800a832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a834:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800a836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a838:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800a83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a83e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 800a840:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11b      	bne.n	800a880 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 800a848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a84a:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800a84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a850:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 800a854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a856:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800a85a:	331c      	adds	r3, #28
 800a85c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a85e:	f006 fbbe 	bl	8010fde <VL53L1_hist_copy_results_to_sys_and_core>
 800a862:	e00e      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a864:	bf00      	nop
 800a866:	e00c      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a868:	bf00      	nop
 800a86a:	e00a      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a86c:	bf00      	nop
 800a86e:	e008      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a870:	bf00      	nop
 800a872:	e006      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a874:	bf00      	nop
 800a876:	e004      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800a880:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800a882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d036      	beq.n	800a8f8 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 800a88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a88c:	79db      	ldrb	r3, [r3, #7]
 800a88e:	2b06      	cmp	r3, #6
 800a890:	d00a      	beq.n	800a8a8 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800a892:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 800a89a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f006 fc73 	bl	8011188 <VL53L1_dynamic_zone_update>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a8ae:	e015      	b.n	800a8dc <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 800a8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800a8b6:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <VL53L1_get_device_results+0x5ac>
 800a8be:	2103      	movs	r1, #3
 800a8c0:	e000      	b.n	800a8c4 <VL53L1_get_device_results+0x5ae>
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8ca:	4413      	add	r3, r2
 800a8cc:	460a      	mov	r2, r1
 800a8ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800a8d2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a8dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8e0:	2b0f      	cmp	r3, #15
 800a8e2:	d9e5      	bls.n	800a8b0 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 800a8e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d105      	bne.n	800a8f8 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f006 fcc6 	bl	801127e <VL53L1_multizone_hist_bins_update>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 800a8f8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d105      	bne.n	800a90c <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f007 f9d3 	bl	8011cac <VL53L1_dynamic_xtalk_correction_corrector>
 800a906:	4603      	mov	r3, r0
 800a908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 800a90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a910:	2b00      	cmp	r3, #0
 800a912:	d043      	beq.n	800a99c <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800a918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e03e      	b.n	800a99c <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800a91e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a922:	2b00      	cmp	r3, #0
 800a924:	d107      	bne.n	800a936 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	4619      	mov	r1, r3
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fc35 	bl	800a19a <VL53L1_get_measurement_results>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 800a936:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10d      	bne.n	800a95a <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800a93e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a940:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 800a944:	4618      	mov	r0, r3
 800a946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a948:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 800a94c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a94e:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800a952:	321c      	adds	r2, #28
 800a954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a956:	f000 fc1f 	bl	800b198 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	785b      	ldrb	r3, [r3, #1]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d11c      	bne.n	800a99c <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800a962:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10d      	bne.n	800a986 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f007 fe24 	bl	80125c0 <VL53L1_low_power_auto_setup_manual_calibration>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	2201      	movs	r2, #1
 800a982:	709a      	strb	r2, [r3, #2]
 800a984:	e00a      	b.n	800a99c <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 800a986:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800a992:	2b01      	cmp	r3, #1
 800a994:	d102      	bne.n	800a99c <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	2202      	movs	r2, #2
 800a99a:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800a99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a99e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a9a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9a4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800a9a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9a8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800a9ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9ae:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800a9b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9b2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9b8:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 800a9ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 80b0 	bne.w	800ab24 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 800a9c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c6:	2210      	movs	r2, #16
 800a9c8:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800a9cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ce:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 800a9dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 800a9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a9ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	f080 8097 	bcs.w	800ab24 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 800a9f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800aa06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa08:	4413      	add	r3, r2
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800aa0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa10:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800aa12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa14:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800aa16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa18:	785a      	ldrb	r2, [r3, #1]
 800aa1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa1c:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800aa1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa20:	789a      	ldrb	r2, [r3, #2]
 800aa22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa24:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 800aa26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa28:	78da      	ldrb	r2, [r3, #3]
 800aa2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa2c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800aa2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa30:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 800aa34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 800aa38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa3a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800aa3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa40:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800aa42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa44:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 800aa48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800aa4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa50:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 800aa54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800aa5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa5c:	7c5a      	ldrb	r2, [r3, #17]
 800aa5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa60:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800aa62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa64:	7c9a      	ldrb	r2, [r3, #18]
 800aa66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa68:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800aa70:	e052      	b.n	800ab18 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800aa72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 800aa76:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800aa7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa7c:	204c      	movs	r0, #76	; 0x4c
 800aa7e:	fb00 f303 	mul.w	r3, r0, r3
 800aa82:	440b      	add	r3, r1
 800aa84:	3338      	adds	r3, #56	; 0x38
 800aa86:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 800aa88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4403      	add	r3, r0
 800aa94:	3308      	adds	r3, #8
 800aa96:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 800aa98:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800aa9c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 800aaa0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaa2:	204c      	movs	r0, #76	; 0x4c
 800aaa4:	fb00 f303 	mul.w	r3, r0, r3
 800aaa8:	440b      	add	r3, r1
 800aaaa:	333c      	adds	r3, #60	; 0x3c
 800aaac:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800aaae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aab0:	4613      	mov	r3, r2
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4403      	add	r3, r0
 800aaba:	330c      	adds	r3, #12
 800aabc:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800aabe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800aac2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800aac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aac8:	204c      	movs	r0, #76	; 0x4c
 800aaca:	fb00 f303 	mul.w	r3, r0, r3
 800aace:	440b      	add	r3, r1
 800aad0:	3354      	adds	r3, #84	; 0x54
 800aad2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800aad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aad6:	4613      	mov	r3, r2
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	440b      	add	r3, r1
 800aae0:	3310      	adds	r3, #16
 800aae2:	4602      	mov	r2, r0
 800aae4:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 800aae6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 800aaea:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 800aaee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaf0:	204c      	movs	r0, #76	; 0x4c
 800aaf2:	fb00 f303 	mul.w	r3, r0, r3
 800aaf6:	440b      	add	r3, r1
 800aaf8:	335e      	adds	r3, #94	; 0x5e
 800aafa:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 800aafc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aafe:	4613      	mov	r3, r2
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3312      	adds	r3, #18
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800ab0e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ab12:	3301      	adds	r3, #1
 800ab14:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800ab18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab1a:	7c9b      	ldrb	r3, [r3, #18]
 800ab1c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d3a6      	bcc.n	800aa72 <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 800ab24:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800ab28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f01a fc82 	bl	8025434 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 800ab30:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f003 ff35 	bl	800e9a8 <VL53L1_check_ll_driver_rd_state>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ab44:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3768      	adds	r7, #104	; 0x68
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab52 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 800ab62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d107      	bne.n	800ab7a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	2203      	movs	r2, #3
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7fe fff3 	bl	8009b5c <VL53L1_init_and_start_range>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800ab7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b0d2      	sub	sp, #328	; 0x148
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ab96:	6018      	str	r0, [r3, #0]
 800ab98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aba0:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aba2:	2300      	movs	r3, #0
 800aba4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 800aba8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800abac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3318      	adds	r3, #24
 800abb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800abb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800abbc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800abc6:	3308      	adds	r3, #8
 800abc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 800abcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abd0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800abd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800abd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abdc:	f203 3342 	addw	r3, r3, #834	; 0x342
 800abe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800abe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abe8:	f203 3362 	addw	r3, r3, #866	; 0x362
 800abec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 800abf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abf4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800abf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 800abfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800ac04:	f107 030c 	add.w	r3, r7, #12
 800ac08:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 800ac36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac3a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800ac42:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10d      	bne.n	800ac66 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 800ac4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac4e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800ac52:	2353      	movs	r3, #83	; 0x53
 800ac54:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800ac58:	2188      	movs	r1, #136	; 0x88
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	f00d fe32 	bl	80188c4 <VL53L1_ReadMulti>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 800ac66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac6a:	781a      	ldrb	r2, [r3, #0]
 800ac6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 800ac7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac7e:	785a      	ldrb	r2, [r3, #1]
 800ac80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800ac8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ac92:	789a      	ldrb	r2, [r3, #2]
 800ac94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ac98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 800aca2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aca6:	78da      	ldrb	r2, [r3, #3]
 800aca8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 800acb6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	2002      	movs	r0, #2
 800acc0:	f004 fb75 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 800acc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800accc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 800acd6:	234e      	movs	r3, #78	; 0x4e
 800acd8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800acdc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ace0:	f107 020c 	add.w	r2, r7, #12
 800ace4:	4413      	add	r3, r2
 800ace6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 800acea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800acee:	2002      	movs	r0, #2
 800acf0:	f004 fb5d 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800acf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 800ad06:	2350      	movs	r3, #80	; 0x50
 800ad08:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 800ad0c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ad10:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ad14:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ad18:	5cd2      	ldrb	r2, [r2, r3]
 800ad1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad1e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 800ad28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 800ad36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3e:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 800ad42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad46:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800ad50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad58:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 800ad5c:	2351      	movs	r3, #81	; 0x51
 800ad5e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800ad62:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ad66:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ad6a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ad6e:	5cd3      	ldrb	r3, [r2, r3]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800ad76:	2352      	movs	r3, #82	; 0x52
 800ad78:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800ad7c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ad80:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ad84:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ad88:	5cd2      	ldrb	r2, [r2, r3]
 800ad8a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ad8e:	4413      	add	r3, r2
 800ad90:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800ad94:	234d      	movs	r3, #77	; 0x4d
 800ad96:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800ad9a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ad9e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ada2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ada6:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800adaa:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800adac:	2306      	movs	r3, #6
 800adae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800adb2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800adb6:	f107 020c 	add.w	r2, r7, #12
 800adba:	4413      	add	r3, r2
 800adbc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 800adc0:	2300      	movs	r3, #0
 800adc2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800adc6:	e01a      	b.n	800adfe <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 800adc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800adcc:	2003      	movs	r0, #3
 800adce:	f004 fb8d 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 800add2:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800add4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 800add8:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 800adda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800adde:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3206      	adds	r2, #6
 800ade6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 800adea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800adee:	3303      	adds	r3, #3
 800adf0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 800adf4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800adf8:	3301      	adds	r3, #1
 800adfa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800adfe:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800ae02:	2b17      	cmp	r3, #23
 800ae04:	d9e0      	bls.n	800adc8 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 800ae06:	f107 0208 	add.w	r2, r7, #8
 800ae0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ae12:	f248 018d 	movw	r1, #32909	; 0x808d
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	f000 fbd0 	bl	800b5bc <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 800ae1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d118      	bne.n	800ae60 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800ae2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae32:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 800ae36:	3318      	adds	r3, #24
 800ae38:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f01a fb20 	bl	8025484 <memset>
		pdev->bin_rec_pos = 0;
 800ae44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 800ae52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 800ae60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10b      	bne.n	800ae86 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 800ae6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae72:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800ae76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ae7e:	6811      	ldr	r1, [r2, #0]
 800ae80:	6818      	ldr	r0, [r3, #0]
 800ae82:	f7fd f97e 	bl	8008182 <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800ae86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae8a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800ae8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 800ae9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae9e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2200      	movs	r2, #0
 800aea6:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800aea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aeac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2218      	movs	r2, #24
 800aeb4:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800aeb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aeba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2218      	movs	r2, #24
 800aec2:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800aec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aec8:	78da      	ldrb	r2, [r3, #3]
 800aeca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aece:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800aed8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aedc:	799b      	ldrb	r3, [r3, #6]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 800aee4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aee8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800aef2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aef6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800af00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af04:	7c1b      	ldrb	r3, [r3, #16]
 800af06:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 800af08:	4413      	add	r3, r2
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800af1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af1e:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 800af20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 800af2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af32:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800af36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800af3e:	6811      	ldr	r1, [r2, #0]
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	f004 fed4 	bl	800fcee <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 800af46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d117      	bne.n	800af82 <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800af52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af56:	791b      	ldrb	r3, [r3, #4]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800af5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af62:	795b      	ldrb	r3, [r3, #5]
 800af64:	b29b      	uxth	r3, r3
		encoded_timeout =
 800af66:	4413      	add	r3, r2
 800af68:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 800af6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af70:	799a      	ldrb	r2, [r3, #6]
 800af72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af76:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800af80:	e016      	b.n	800afb0 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800af82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af86:	79db      	ldrb	r3, [r3, #7]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800af8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af92:	7a1b      	ldrb	r3, [r3, #8]
 800af94:	b29b      	uxth	r3, r3
		encoded_timeout =
 800af96:	4413      	add	r3, r2
 800af98:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 800af9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800afa0:	7a5a      	ldrb	r2, [r3, #9]
 800afa2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800afa6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800afb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800afb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2200      	movs	r2, #0
 800afbc:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800afbe:	2300      	movs	r3, #0
 800afc0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800afc4:	e01f      	b.n	800b006 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800afc6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800afca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800afce:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	7b1b      	ldrb	r3, [r3, #12]
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	2b07      	cmp	r3, #7
 800afde:	d10d      	bne.n	800affc <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800afe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800afe4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	7adb      	ldrb	r3, [r3, #11]
 800afec:	3304      	adds	r3, #4
 800afee:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800aff0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aff4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800affc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800b000:	3301      	adds	r3, #1
 800b002:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800b006:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800b00a:	2b05      	cmp	r3, #5
 800b00c:	d9db      	bls.n	800afc6 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 800b00e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800b012:	4618      	mov	r0, r3
 800b014:	f004 fcdb 	bl	800f9ce <VL53L1_decode_timeout>
 800b018:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800b01a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b01e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 800b028:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b02c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b036:	4618      	mov	r0, r3
 800b038:	f007 fb54 	bl	80126e4 <VL53L1_calc_pll_period_us>
 800b03c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800b040:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04e:	3301      	adds	r3, #1
 800b050:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 800b054:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b058:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 800b062:	4619      	mov	r1, r3
 800b064:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b06c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800b070:	f007 fb4f 	bl	8012712 <VL53L1_duration_maths>
 800b074:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800b076:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b07a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800b084:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b088:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 800b094:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b098:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	f007 fc5e 	bl	801295e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800b0a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0a6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	f008 f875 	bl	801319a <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800b0b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0b4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b0b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800b0c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0c8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800b0cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 800b0d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	789b      	ldrb	r3, [r3, #2]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b0f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b0f6:	4413      	add	r3, r2
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800b0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b102:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800b104:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b108:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800b112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b116:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800b118:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b11c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b12a:	2200      	movs	r2, #0
 800b12c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800b12e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b132:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b13c:	f003 031f 	and.w	r3, r3, #31
 800b140:	2b11      	cmp	r3, #17
 800b142:	bf8c      	ite	hi
 800b144:	2201      	movhi	r2, #1
 800b146:	2200      	movls	r2, #0
 800b148:	b2d2      	uxtb	r2, r2
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	d11b      	bne.n	800b186 <VL53L1_get_histogram_bin_data+0x5fe>
 800b14e:	2201      	movs	r2, #1
 800b150:	409a      	lsls	r2, r3
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <VL53L1_get_histogram_bin_data+0x60c>)
 800b154:	4013      	ands	r3, r2
 800b156:	2b00      	cmp	r3, #0
 800b158:	bf14      	ite	ne
 800b15a:	2301      	movne	r3, #1
 800b15c:	2300      	moveq	r3, #0
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d010      	beq.n	800b186 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800b164:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b168:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b172:	f003 031f 	and.w	r3, r3, #31
 800b176:	b2da      	uxtb	r2, r3
 800b178:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b17c:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 800b17e:	23fa      	movs	r3, #250	; 0xfa
 800b180:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 800b184:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b186:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	0002200e 	.word	0x0002200e

0800b198 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800b198:	b480      	push	{r7}
 800b19a:	b08b      	sub	sp, #44	; 0x2c
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	78da      	ldrb	r2, [r3, #3]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	8a1b      	ldrh	r3, [r3, #16]
 800b1d8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	8a9b      	ldrh	r3, [r3, #20]
 800b1de:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	8a5b      	ldrh	r3, [r3, #18]
 800b1e4:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1ec:	e00b      	b.n	800b206 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 800b1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 800b1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b200:	3301      	adds	r3, #1
 800b202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d9ef      	bls.n	800b1ee <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	3314      	adds	r3, #20
 800b212:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800b214:	2300      	movs	r3, #0
 800b216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b21a:	e0fe      	b.n	800b41a <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b222:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	2200      	movs	r2, #0
 800b228:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	78db      	ldrb	r3, [r3, #3]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	d104      	bne.n	800b248 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	2213      	movs	r2, #19
 800b242:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800b246:	e007      	b.n	800b258 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	785b      	ldrb	r3, [r3, #1]
 800b24c:	f003 031f 	and.w	r3, r3, #31
 800b250:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	2200      	movs	r2, #0
 800b25c:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	2200      	movs	r2, #0
 800b262:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	2200      	movs	r2, #0
 800b268:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	2200      	movs	r2, #0
 800b26e:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	2200      	movs	r2, #0
 800b274:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	2200      	movs	r2, #0
 800b27a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 800b27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 800b284:	2b01      	cmp	r3, #1
 800b286:	d05c      	beq.n	800b342 <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 800b288:	e0a8      	b.n	800b3dc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	789b      	ldrb	r3, [r3, #2]
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d103      	bne.n	800b29a <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	8a7a      	ldrh	r2, [r7, #18]
 800b296:	82da      	strh	r2, [r3, #22]
 800b298:	e00b      	b.n	800b2b2 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	789b      	ldrb	r3, [r3, #2]
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d103      	bne.n	800b2aa <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	8aba      	ldrh	r2, [r7, #20]
 800b2a6:	82da      	strh	r2, [r3, #22]
 800b2a8:	e003      	b.n	800b2b2 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	8afa      	ldrh	r2, [r7, #22]
 800b2b6:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	895b      	ldrh	r3, [r3, #10]
 800b2cc:	015b      	lsls	r3, r3, #5
 800b2ce:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d6:	d302      	bcc.n	800b2de <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800b2d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2dc:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800b2f4:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b306:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da01      	bge.n	800b312 <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 800b30e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b312:	12db      	asrs	r3, r3, #11
 800b314:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	b21a      	sxth	r2, r3
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800b340:	e04c      	b.n	800b3dc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b358:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	8bdb      	ldrh	r3, [r3, #30]
 800b366:	015b      	lsls	r3, r3, #5
 800b368:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b370:	d302      	bcc.n	800b378 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800b372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b376:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800b38e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	fb02 f303 	mul.w	r3, r2, r3
 800b398:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3a0:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da01      	bge.n	800b3ac <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 800b3a8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b3ac:	12db      	asrs	r3, r3, #11
 800b3ae:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	b21a      	sxth	r2, r3
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800b3da:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	334c      	adds	r3, #76	; 0x4c
 800b40e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800b410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b414:	3301      	adds	r3, #1
 800b416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b41a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b41e:	2b01      	cmp	r3, #1
 800b420:	f67f aefc 	bls.w	800b21c <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2200      	movs	r2, #0
 800b428:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	f003 031f 	and.w	r3, r3, #31
 800b432:	2b11      	cmp	r3, #17
 800b434:	bf8c      	ite	hi
 800b436:	2201      	movhi	r2, #1
 800b438:	2200      	movls	r2, #0
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	d116      	bne.n	800b46e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 800b440:	2201      	movs	r2, #1
 800b442:	409a      	lsls	r2, r3
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 800b446:	4013      	ands	r3, r2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bf14      	ite	ne
 800b44c:	2301      	movne	r3, #1
 800b44e:	2300      	moveq	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00b      	beq.n	800b46e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	f003 031f 	and.w	r3, r3, #31
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 800b46c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800b46e:	bf00      	nop
 800b470:	372c      	adds	r7, #44	; 0x2c
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	0002200e 	.word	0x0002200e

0800b480 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3318      	adds	r3, #24
 800b492:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	332c      	adds	r3, #44	; 0x2c
 800b498:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b05      	cmp	r3, #5
 800b4a0:	d109      	bne.n	800b4b6 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800b4b4:	e003      	b.n	800b4be <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800b4be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3318      	adds	r3, #24
 800b4e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800b4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b088      	sub	sp, #32
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	60f8      	str	r0, [r7, #12]
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	460b      	mov	r3, r1
 800b506:	72fb      	strb	r3, [r7, #11]
 800b508:	4613      	mov	r3, r2
 800b50a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3318      	adds	r3, #24
 800b514:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b51c:	3308      	adds	r3, #8
 800b51e:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	2b03      	cmp	r3, #3
 800b524:	d006      	beq.n	800b534 <VL53L1_get_dmax_calibration_data+0x3a>
 800b526:	2b03      	cmp	r3, #3
 800b528:	dc3e      	bgt.n	800b5a8 <VL53L1_get_dmax_calibration_data+0xae>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d034      	beq.n	800b598 <VL53L1_get_dmax_calibration_data+0x9e>
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d02a      	beq.n	800b588 <VL53L1_get_dmax_calibration_data+0x8e>
 800b532:	e039      	b.n	800b5a8 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 800b534:	7aba      	ldrb	r2, [r7, #10]
 800b536:	6979      	ldr	r1, [r7, #20]
 800b538:	4613      	mov	r3, r2
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	1a9b      	subs	r3, r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	440b      	add	r3, r1
 800b542:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 800b54e:	7aba      	ldrb	r2, [r7, #10]
 800b550:	6979      	ldr	r1, [r7, #20]
 800b552:	4613      	mov	r3, r2
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 800b56e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b584:	811a      	strh	r2, [r3, #8]
	break;
 800b586:	e012      	b.n	800b5ae <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800b58c:	220a      	movs	r2, #10
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f019 ff4f 	bl	8025434 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800b596:	e00a      	b.n	800b5ae <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 800b59c:	220a      	movs	r2, #10
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f019 ff47 	bl	8025434 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800b5a6:	e002      	b.n	800b5ae <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b5a8:	23fc      	movs	r3, #252	; 0xfc
 800b5aa:	77fb      	strb	r3, [r7, #31]
	break;
 800b5ac:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b5ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b089      	sub	sp, #36	; 0x24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3318      	adds	r3, #24
 800b5d2:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800b5da:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b5e2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800b5e4:	897b      	ldrh	r3, [r7, #10]
 800b5e6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b5ea:	2bbe      	cmp	r3, #190	; 0xbe
 800b5ec:	f200 86fc 	bhi.w	800c3e8 <VL53L1_get_tuning_parm+0xe2c>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <VL53L1_get_tuning_parm+0x3c>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b8f5 	.word	0x0800b8f5
 800b5fc:	0800b905 	.word	0x0800b905
 800b600:	0800b915 	.word	0x0800b915
 800b604:	0800b925 	.word	0x0800b925
 800b608:	0800b933 	.word	0x0800b933
 800b60c:	0800b941 	.word	0x0800b941
 800b610:	0800b94f 	.word	0x0800b94f
 800b614:	0800b95d 	.word	0x0800b95d
 800b618:	0800b96b 	.word	0x0800b96b
 800b61c:	0800b979 	.word	0x0800b979
 800b620:	0800b987 	.word	0x0800b987
 800b624:	0800b993 	.word	0x0800b993
 800b628:	0800b9a1 	.word	0x0800b9a1
 800b62c:	0800b9af 	.word	0x0800b9af
 800b630:	0800b9bb 	.word	0x0800b9bb
 800b634:	0800b9c9 	.word	0x0800b9c9
 800b638:	0800b9d7 	.word	0x0800b9d7
 800b63c:	0800b9e7 	.word	0x0800b9e7
 800b640:	0800b9f7 	.word	0x0800b9f7
 800b644:	0800ba05 	.word	0x0800ba05
 800b648:	0800ba15 	.word	0x0800ba15
 800b64c:	0800ba23 	.word	0x0800ba23
 800b650:	0800ba33 	.word	0x0800ba33
 800b654:	0800ba43 	.word	0x0800ba43
 800b658:	0800ba53 	.word	0x0800ba53
 800b65c:	0800ba63 	.word	0x0800ba63
 800b660:	0800ba73 	.word	0x0800ba73
 800b664:	0800ba83 	.word	0x0800ba83
 800b668:	0800ba93 	.word	0x0800ba93
 800b66c:	0800baa3 	.word	0x0800baa3
 800b670:	0800bab3 	.word	0x0800bab3
 800b674:	0800bac1 	.word	0x0800bac1
 800b678:	0800bad1 	.word	0x0800bad1
 800b67c:	0800bae1 	.word	0x0800bae1
 800b680:	0800baf1 	.word	0x0800baf1
 800b684:	0800bb01 	.word	0x0800bb01
 800b688:	0800bb11 	.word	0x0800bb11
 800b68c:	0800bb21 	.word	0x0800bb21
 800b690:	0800bb31 	.word	0x0800bb31
 800b694:	0800bb41 	.word	0x0800bb41
 800b698:	0800bb51 	.word	0x0800bb51
 800b69c:	0800bb61 	.word	0x0800bb61
 800b6a0:	0800bb71 	.word	0x0800bb71
 800b6a4:	0800bb81 	.word	0x0800bb81
 800b6a8:	0800bb91 	.word	0x0800bb91
 800b6ac:	0800bba1 	.word	0x0800bba1
 800b6b0:	0800bbb1 	.word	0x0800bbb1
 800b6b4:	0800bbc1 	.word	0x0800bbc1
 800b6b8:	0800bbd1 	.word	0x0800bbd1
 800b6bc:	0800bbe1 	.word	0x0800bbe1
 800b6c0:	0800bbf1 	.word	0x0800bbf1
 800b6c4:	0800bbff 	.word	0x0800bbff
 800b6c8:	0800bc0d 	.word	0x0800bc0d
 800b6cc:	0800bc1b 	.word	0x0800bc1b
 800b6d0:	0800bc29 	.word	0x0800bc29
 800b6d4:	0800bc37 	.word	0x0800bc37
 800b6d8:	0800bc45 	.word	0x0800bc45
 800b6dc:	0800bc53 	.word	0x0800bc53
 800b6e0:	0800bc61 	.word	0x0800bc61
 800b6e4:	0800bc6f 	.word	0x0800bc6f
 800b6e8:	0800bc7d 	.word	0x0800bc7d
 800b6ec:	0800bc8b 	.word	0x0800bc8b
 800b6f0:	0800bc99 	.word	0x0800bc99
 800b6f4:	0800bca7 	.word	0x0800bca7
 800b6f8:	0800bcb5 	.word	0x0800bcb5
 800b6fc:	0800bcc3 	.word	0x0800bcc3
 800b700:	0800bcd1 	.word	0x0800bcd1
 800b704:	0800bcdf 	.word	0x0800bcdf
 800b708:	0800bced 	.word	0x0800bced
 800b70c:	0800bcfb 	.word	0x0800bcfb
 800b710:	0800bd09 	.word	0x0800bd09
 800b714:	0800bd17 	.word	0x0800bd17
 800b718:	0800bd25 	.word	0x0800bd25
 800b71c:	0800bd33 	.word	0x0800bd33
 800b720:	0800bd3f 	.word	0x0800bd3f
 800b724:	0800bd4d 	.word	0x0800bd4d
 800b728:	0800bd5b 	.word	0x0800bd5b
 800b72c:	0800bd67 	.word	0x0800bd67
 800b730:	0800bd73 	.word	0x0800bd73
 800b734:	0800bd7f 	.word	0x0800bd7f
 800b738:	0800bd8b 	.word	0x0800bd8b
 800b73c:	0800bd97 	.word	0x0800bd97
 800b740:	0800bda3 	.word	0x0800bda3
 800b744:	0800bdb1 	.word	0x0800bdb1
 800b748:	0800bdbf 	.word	0x0800bdbf
 800b74c:	0800bdcd 	.word	0x0800bdcd
 800b750:	0800bddb 	.word	0x0800bddb
 800b754:	0800bde9 	.word	0x0800bde9
 800b758:	0800bdf7 	.word	0x0800bdf7
 800b75c:	0800be05 	.word	0x0800be05
 800b760:	0800be13 	.word	0x0800be13
 800b764:	0800be21 	.word	0x0800be21
 800b768:	0800be2f 	.word	0x0800be2f
 800b76c:	0800be3d 	.word	0x0800be3d
 800b770:	0800be4b 	.word	0x0800be4b
 800b774:	0800be59 	.word	0x0800be59
 800b778:	0800be67 	.word	0x0800be67
 800b77c:	0800be75 	.word	0x0800be75
 800b780:	0800be83 	.word	0x0800be83
 800b784:	0800be91 	.word	0x0800be91
 800b788:	0800be9f 	.word	0x0800be9f
 800b78c:	0800bead 	.word	0x0800bead
 800b790:	0800bebb 	.word	0x0800bebb
 800b794:	0800bec9 	.word	0x0800bec9
 800b798:	0800bed7 	.word	0x0800bed7
 800b79c:	0800bee5 	.word	0x0800bee5
 800b7a0:	0800bef3 	.word	0x0800bef3
 800b7a4:	0800bf01 	.word	0x0800bf01
 800b7a8:	0800bf0f 	.word	0x0800bf0f
 800b7ac:	0800bf1d 	.word	0x0800bf1d
 800b7b0:	0800bf2b 	.word	0x0800bf2b
 800b7b4:	0800bf39 	.word	0x0800bf39
 800b7b8:	0800bf47 	.word	0x0800bf47
 800b7bc:	0800bf55 	.word	0x0800bf55
 800b7c0:	0800bf63 	.word	0x0800bf63
 800b7c4:	0800bf71 	.word	0x0800bf71
 800b7c8:	0800bf7f 	.word	0x0800bf7f
 800b7cc:	0800bf8d 	.word	0x0800bf8d
 800b7d0:	0800bf9b 	.word	0x0800bf9b
 800b7d4:	0800bfad 	.word	0x0800bfad
 800b7d8:	0800bfbf 	.word	0x0800bfbf
 800b7dc:	0800bfd1 	.word	0x0800bfd1
 800b7e0:	0800bfe3 	.word	0x0800bfe3
 800b7e4:	0800bff5 	.word	0x0800bff5
 800b7e8:	0800c007 	.word	0x0800c007
 800b7ec:	0800c019 	.word	0x0800c019
 800b7f0:	0800c02b 	.word	0x0800c02b
 800b7f4:	0800c03d 	.word	0x0800c03d
 800b7f8:	0800c04f 	.word	0x0800c04f
 800b7fc:	0800c061 	.word	0x0800c061
 800b800:	0800c073 	.word	0x0800c073
 800b804:	0800c085 	.word	0x0800c085
 800b808:	0800c097 	.word	0x0800c097
 800b80c:	0800c0a9 	.word	0x0800c0a9
 800b810:	0800c0bb 	.word	0x0800c0bb
 800b814:	0800c0cd 	.word	0x0800c0cd
 800b818:	0800c0df 	.word	0x0800c0df
 800b81c:	0800c0f1 	.word	0x0800c0f1
 800b820:	0800c0ff 	.word	0x0800c0ff
 800b824:	0800c10d 	.word	0x0800c10d
 800b828:	0800c11b 	.word	0x0800c11b
 800b82c:	0800c129 	.word	0x0800c129
 800b830:	0800c137 	.word	0x0800c137
 800b834:	0800c145 	.word	0x0800c145
 800b838:	0800c153 	.word	0x0800c153
 800b83c:	0800c165 	.word	0x0800c165
 800b840:	0800c173 	.word	0x0800c173
 800b844:	0800c181 	.word	0x0800c181
 800b848:	0800c18f 	.word	0x0800c18f
 800b84c:	0800c19d 	.word	0x0800c19d
 800b850:	0800c1ab 	.word	0x0800c1ab
 800b854:	0800c1b9 	.word	0x0800c1b9
 800b858:	0800c1c7 	.word	0x0800c1c7
 800b85c:	0800c1d5 	.word	0x0800c1d5
 800b860:	0800c1e3 	.word	0x0800c1e3
 800b864:	0800c1f1 	.word	0x0800c1f1
 800b868:	0800c1ff 	.word	0x0800c1ff
 800b86c:	0800c20d 	.word	0x0800c20d
 800b870:	0800c21b 	.word	0x0800c21b
 800b874:	0800c229 	.word	0x0800c229
 800b878:	0800c237 	.word	0x0800c237
 800b87c:	0800c245 	.word	0x0800c245
 800b880:	0800c253 	.word	0x0800c253
 800b884:	0800c261 	.word	0x0800c261
 800b888:	0800c26f 	.word	0x0800c26f
 800b88c:	0800c27d 	.word	0x0800c27d
 800b890:	0800c28b 	.word	0x0800c28b
 800b894:	0800c299 	.word	0x0800c299
 800b898:	0800c2a7 	.word	0x0800c2a7
 800b89c:	0800c2b5 	.word	0x0800c2b5
 800b8a0:	0800c2c3 	.word	0x0800c2c3
 800b8a4:	0800c2d1 	.word	0x0800c2d1
 800b8a8:	0800c2df 	.word	0x0800c2df
 800b8ac:	0800c2ed 	.word	0x0800c2ed
 800b8b0:	0800c2fb 	.word	0x0800c2fb
 800b8b4:	0800c309 	.word	0x0800c309
 800b8b8:	0800c317 	.word	0x0800c317
 800b8bc:	0800c325 	.word	0x0800c325
 800b8c0:	0800c333 	.word	0x0800c333
 800b8c4:	0800c341 	.word	0x0800c341
 800b8c8:	0800c34f 	.word	0x0800c34f
 800b8cc:	0800c35d 	.word	0x0800c35d
 800b8d0:	0800c36b 	.word	0x0800c36b
 800b8d4:	0800c379 	.word	0x0800c379
 800b8d8:	0800c387 	.word	0x0800c387
 800b8dc:	0800c395 	.word	0x0800c395
 800b8e0:	0800c3a3 	.word	0x0800c3a3
 800b8e4:	0800c3b1 	.word	0x0800c3b1
 800b8e8:	0800c3bf 	.word	0x0800c3bf
 800b8ec:	0800c3cd 	.word	0x0800c3cd
 800b8f0:	0800c3db 	.word	0x0800c3db

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 800b8fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	601a      	str	r2, [r3, #0]
	break;
 800b900:	f000 bd79 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 800b90a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	601a      	str	r2, [r3, #0]
	break;
 800b910:	f000 bd71 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 800b91a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	601a      	str	r2, [r3, #0]
	break;
 800b920:	f000 bd69 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
	break;
 800b92e:	f000 bd62 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	601a      	str	r2, [r3, #0]
	break;
 800b93c:	f000 bd5b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	789b      	ldrb	r3, [r3, #2]
 800b944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
	break;
 800b94a:	f000 bd54 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	78db      	ldrb	r3, [r3, #3]
 800b952:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]
	break;
 800b958:	f000 bd4d 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	791b      	ldrb	r3, [r3, #4]
 800b960:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	601a      	str	r2, [r3, #0]
	break;
 800b966:	f000 bd46 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	795b      	ldrb	r3, [r3, #5]
 800b96e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
	break;
 800b974:	f000 bd3f 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	799b      	ldrb	r3, [r3, #6]
 800b97c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
	break;
 800b982:	f000 bd38 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	601a      	str	r2, [r3, #0]
	break;
 800b98e:	f000 bd32 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	891b      	ldrh	r3, [r3, #8]
 800b996:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	601a      	str	r2, [r3, #0]
	break;
 800b99c:	f000 bd2b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	8a1b      	ldrh	r3, [r3, #16]
 800b9a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
	break;
 800b9aa:	f000 bd24 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
	break;
 800b9b6:	f000 bd1e 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	7e1b      	ldrb	r3, [r3, #24]
 800b9be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
	break;
 800b9c4:	f000 bd17 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	8b5b      	ldrh	r3, [r3, #26]
 800b9cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]
	break;
 800b9d2:	f000 bd10 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800b9dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
	break;
 800b9e2:	f000 bd08 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b9ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	601a      	str	r2, [r3, #0]
	break;
 800b9f2:	f000 bd00 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	601a      	str	r2, [r3, #0]
	break;
 800ba00:	f000 bcf9 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ba0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	601a      	str	r2, [r3, #0]
	break;
 800ba10:	f000 bcf1 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ba18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	601a      	str	r2, [r3, #0]
	break;
 800ba1e:	f000 bcea 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800ba28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	601a      	str	r2, [r3, #0]
	break;
 800ba2e:	f000 bce2 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800ba38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]
	break;
 800ba3e:	f000 bcda 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800ba48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	601a      	str	r2, [r3, #0]
	break;
 800ba4e:	f000 bcd2 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800ba58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	601a      	str	r2, [r3, #0]
	break;
 800ba5e:	f000 bcca 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ba68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	601a      	str	r2, [r3, #0]
	break;
 800ba6e:	f000 bcc2 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800ba78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	601a      	str	r2, [r3, #0]
	break;
 800ba7e:	f000 bcba 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 800ba88:	461a      	mov	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	601a      	str	r2, [r3, #0]
	break;
 800ba8e:	f000 bcb2 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 800ba98:	461a      	mov	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
	break;
 800ba9e:	f000 bcaa 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800baa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	601a      	str	r2, [r3, #0]
	break;
 800baae:	f000 bca2 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bab6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	601a      	str	r2, [r3, #0]
	break;
 800babc:	f000 bc9b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 800bac6:	461a      	mov	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	601a      	str	r2, [r3, #0]
	break;
 800bacc:	f000 bc93 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bad6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	601a      	str	r2, [r3, #0]
	break;
 800badc:	f000 bc8b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 800bae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
	break;
 800baec:	f000 bc83 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800baf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]
	break;
 800bafc:	f000 bc7b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800bb06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	601a      	str	r2, [r3, #0]
	break;
 800bb0c:	f000 bc73 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bb16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	601a      	str	r2, [r3, #0]
	break;
 800bb1c:	f000 bc6b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800bb26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	601a      	str	r2, [r3, #0]
	break;
 800bb2c:	f000 bc63 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800bb36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
	break;
 800bb3c:	f000 bc5b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800bb46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	601a      	str	r2, [r3, #0]
	break;
 800bb4c:	f000 bc53 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800bb56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	601a      	str	r2, [r3, #0]
	break;
 800bb5c:	f000 bc4b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800bb66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	601a      	str	r2, [r3, #0]
	break;
 800bb6c:	f000 bc43 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 800bb76:	461a      	mov	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	601a      	str	r2, [r3, #0]
	break;
 800bb7c:	f000 bc3b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800bb86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	601a      	str	r2, [r3, #0]
	break;
 800bb8c:	f000 bc33 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800bb96:	461a      	mov	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	601a      	str	r2, [r3, #0]
	break;
 800bb9c:	f000 bc2b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800bba6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
	break;
 800bbac:	f000 bc23 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800bbb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]
	break;
 800bbbc:	f000 bc1b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800bbc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	601a      	str	r2, [r3, #0]
	break;
 800bbcc:	f000 bc13 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800bbd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]
	break;
 800bbdc:	f000 bc0b 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800bbe6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	601a      	str	r2, [r3, #0]
	break;
 800bbec:	f000 bc03 	b.w	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800bbf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	601a      	str	r2, [r3, #0]
	break;
 800bbfc:	e3fb      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800bc04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
	break;
 800bc0a:	e3f4      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800bc12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]
	break;
 800bc18:	e3ed      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800bc20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
	break;
 800bc26:	e3e6      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800bc2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
	break;
 800bc34:	e3df      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800bc3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
	break;
 800bc42:	e3d8      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800bc4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
	break;
 800bc50:	e3d1      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800bc58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	601a      	str	r2, [r3, #0]
	break;
 800bc5e:	e3ca      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800bc66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	601a      	str	r2, [r3, #0]
	break;
 800bc6c:	e3c3      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800bc74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]
	break;
 800bc7a:	e3bc      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800bc82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	601a      	str	r2, [r3, #0]
	break;
 800bc88:	e3b5      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 800bc90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	601a      	str	r2, [r3, #0]
	break;
 800bc96:	e3ae      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800bc9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
	break;
 800bca4:	e3a7      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800bcac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
	break;
 800bcb2:	e3a0      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800bcba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]
	break;
 800bcc0:	e399      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800bcc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
	break;
 800bcce:	e392      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800bcd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	601a      	str	r2, [r3, #0]
	break;
 800bcdc:	e38b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800bce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
	break;
 800bcea:	e384      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800bcf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]
	break;
 800bcf8:	e37d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800bd00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
	break;
 800bd06:	e376      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800bd0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	601a      	str	r2, [r3, #0]
	break;
 800bd14:	e36f      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800bd1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	601a      	str	r2, [r3, #0]
	break;
 800bd22:	e368      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800bd2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
	break;
 800bd30:	e361      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
	break;
 800bd3c:	e35b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	601a      	str	r2, [r3, #0]
	break;
 800bd4a:	e354      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bd52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]
	break;
 800bd58:	e34d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	601a      	str	r2, [r3, #0]
	break;
 800bd64:	e347      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	601a      	str	r2, [r3, #0]
	break;
 800bd70:	e341      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	8adb      	ldrh	r3, [r3, #22]
 800bd76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]
	break;
 800bd7c:	e33b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	8b1b      	ldrh	r3, [r3, #24]
 800bd82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	601a      	str	r2, [r3, #0]
	break;
 800bd88:	e335      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	601a      	str	r2, [r3, #0]
	break;
 800bd94:	e32f      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
	break;
 800bda0:	e329      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 800bda8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	601a      	str	r2, [r3, #0]
	break;
 800bdae:	e322      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bdb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	601a      	str	r2, [r3, #0]
	break;
 800bdbc:	e31b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bdc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
	break;
 800bdca:	e314      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800bdd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]
	break;
 800bdd8:	e30d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800bde0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
	break;
 800bde6:	e306      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800bdee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
	break;
 800bdf4:	e2ff      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 800bdfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]
	break;
 800be02:	e2f8      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 800be0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	601a      	str	r2, [r3, #0]
	break;
 800be10:	e2f1      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800be18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	601a      	str	r2, [r3, #0]
	break;
 800be1e:	e2ea      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800be26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	601a      	str	r2, [r3, #0]
	break;
 800be2c:	e2e3      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 800be34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	601a      	str	r2, [r3, #0]
	break;
 800be3a:	e2dc      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800be42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	601a      	str	r2, [r3, #0]
	break;
 800be48:	e2d5      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 800be50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	601a      	str	r2, [r3, #0]
	break;
 800be56:	e2ce      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800be5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	601a      	str	r2, [r3, #0]
	break;
 800be64:	e2c7      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 800be6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	601a      	str	r2, [r3, #0]
	break;
 800be72:	e2c0      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 800be7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
	break;
 800be80:	e2b9      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 800be88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	601a      	str	r2, [r3, #0]
	break;
 800be8e:	e2b2      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800be96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
	break;
 800be9c:	e2ab      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800bea4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	601a      	str	r2, [r3, #0]
	break;
 800beaa:	e2a4      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800beb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	601a      	str	r2, [r3, #0]
	break;
 800beb8:	e29d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800bec0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	601a      	str	r2, [r3, #0]
	break;
 800bec6:	e296      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800bece:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	601a      	str	r2, [r3, #0]
	break;
 800bed4:	e28f      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bedc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
	break;
 800bee2:	e288      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800beea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	601a      	str	r2, [r3, #0]
	break;
 800bef0:	e281      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bef8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	601a      	str	r2, [r3, #0]
	break;
 800befe:	e27a      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800bf06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	601a      	str	r2, [r3, #0]
	break;
 800bf0c:	e273      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800bf14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	601a      	str	r2, [r3, #0]
	break;
 800bf1a:	e26c      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800bf22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	601a      	str	r2, [r3, #0]
	break;
 800bf28:	e265      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800bf30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]
	break;
 800bf36:	e25e      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800bf3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	601a      	str	r2, [r3, #0]
	break;
 800bf44:	e257      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800bf4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	601a      	str	r2, [r3, #0]
	break;
 800bf52:	e250      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800bf5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	601a      	str	r2, [r3, #0]
	break;
 800bf60:	e249      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bf68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	601a      	str	r2, [r3, #0]
	break;
 800bf6e:	e242      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800bf76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	601a      	str	r2, [r3, #0]
	break;
 800bf7c:	e23b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800bf84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	601a      	str	r2, [r3, #0]
	break;
 800bf8a:	e234      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800bf92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	601a      	str	r2, [r3, #0]
	break;
 800bf98:	e22d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa0:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 800bfa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	601a      	str	r2, [r3, #0]
	break;
 800bfaa:	e224      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bfb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	601a      	str	r2, [r3, #0]
	break;
 800bfbc:	e21b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800bfc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
	break;
 800bfce:	e212      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800bfda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	601a      	str	r2, [r3, #0]
	break;
 800bfe0:	e209      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800bfec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	601a      	str	r2, [r3, #0]
	break;
 800bff2:	e200      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bffa:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800bffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
	break;
 800c004:	e1f7      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00c:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800c010:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]
	break;
 800c016:	e1ee      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c01e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800c022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	601a      	str	r2, [r3, #0]
	break;
 800c028:	e1e5      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c030:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	601a      	str	r2, [r3, #0]
	break;
 800c03a:	e1dc      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c042:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 800c046:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
	break;
 800c04c:	e1d3      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c054:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 800c058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	601a      	str	r2, [r3, #0]
	break;
 800c05e:	e1ca      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c066:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800c06a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	601a      	str	r2, [r3, #0]
	break;
 800c070:	e1c1      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c078:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800c07c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	601a      	str	r2, [r3, #0]
	break;
 800c082:	e1b8      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c08a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]
	break;
 800c094:	e1af      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c0a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	601a      	str	r2, [r3, #0]
	break;
 800c0a6:	e1a6      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800c0b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	601a      	str	r2, [r3, #0]
	break;
 800c0b8:	e19d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800c0c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	601a      	str	r2, [r3, #0]
	break;
 800c0ca:	e194      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800c0d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	601a      	str	r2, [r3, #0]
	break;
 800c0dc:	e18b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c0e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	601a      	str	r2, [r3, #0]
	break;
 800c0ee:	e182      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800c0f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	601a      	str	r2, [r3, #0]
	break;
 800c0fc:	e17b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800c104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
	break;
 800c10a:	e174      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800c112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	601a      	str	r2, [r3, #0]
	break;
 800c118:	e16d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800c120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	601a      	str	r2, [r3, #0]
	break;
 800c126:	e166      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800c12e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
	break;
 800c134:	e15f      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800c13c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	601a      	str	r2, [r3, #0]
	break;
 800c142:	e158      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800c14a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	601a      	str	r2, [r3, #0]
	break;
 800c150:	e151      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c158:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800c15c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	601a      	str	r2, [r3, #0]
	break;
 800c162:	e148      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800c16a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	601a      	str	r2, [r3, #0]
	break;
 800c170:	e141      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800c178:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	601a      	str	r2, [r3, #0]
	break;
 800c17e:	e13a      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800c186:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	601a      	str	r2, [r3, #0]
	break;
 800c18c:	e133      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800c194:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	601a      	str	r2, [r3, #0]
	break;
 800c19a:	e12c      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800c1a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	601a      	str	r2, [r3, #0]
	break;
 800c1a8:	e125      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800c1b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
	break;
 800c1b6:	e11e      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800c1be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	601a      	str	r2, [r3, #0]
	break;
 800c1c4:	e117      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800c1cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	601a      	str	r2, [r3, #0]
	break;
 800c1d2:	e110      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800c1da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
	break;
 800c1e0:	e109      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800c1e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	601a      	str	r2, [r3, #0]
	break;
 800c1ee:	e102      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800c1f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	601a      	str	r2, [r3, #0]
	break;
 800c1fc:	e0fb      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800c204:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	601a      	str	r2, [r3, #0]
	break;
 800c20a:	e0f4      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800c212:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]
	break;
 800c218:	e0ed      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800c220:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	601a      	str	r2, [r3, #0]
	break;
 800c226:	e0e6      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800c22e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
	break;
 800c234:	e0df      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800c23c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	601a      	str	r2, [r3, #0]
	break;
 800c242:	e0d8      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800c24a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	601a      	str	r2, [r3, #0]
	break;
 800c250:	e0d1      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 800c258:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
	break;
 800c25e:	e0ca      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800c266:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	601a      	str	r2, [r3, #0]
	break;
 800c26c:	e0c3      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800c274:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
	break;
 800c27a:	e0bc      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800c282:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
	break;
 800c288:	e0b5      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800c290:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]
	break;
 800c296:	e0ae      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800c29e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]
	break;
 800c2a4:	e0a7      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800c2ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	601a      	str	r2, [r3, #0]
	break;
 800c2b2:	e0a0      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800c2ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	601a      	str	r2, [r3, #0]
	break;
 800c2c0:	e099      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 800c2c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
	break;
 800c2ce:	e092      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800c2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	601a      	str	r2, [r3, #0]
	break;
 800c2dc:	e08b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800c2e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	601a      	str	r2, [r3, #0]
	break;
 800c2ea:	e084      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800c2f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]
	break;
 800c2f8:	e07d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800c300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	break;
 800c306:	e076      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800c30e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
	break;
 800c314:	e06f      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 800c31c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	601a      	str	r2, [r3, #0]
	break;
 800c322:	e068      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800c32a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	601a      	str	r2, [r3, #0]
	break;
 800c330:	e061      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 800c338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
	break;
 800c33e:	e05a      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800c346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	601a      	str	r2, [r3, #0]
	break;
 800c34c:	e053      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800c354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	601a      	str	r2, [r3, #0]
	break;
 800c35a:	e04c      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800c362:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]
	break;
 800c368:	e045      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800c370:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	break;
 800c376:	e03e      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800c37e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
	break;
 800c384:	e037      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800c38c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
	break;
 800c392:	e030      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800c39a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	601a      	str	r2, [r3, #0]
	break;
 800c3a0:	e029      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 800c3a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
	break;
 800c3ae:	e022      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800c3b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	601a      	str	r2, [r3, #0]
	break;
 800c3bc:	e01b      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800c3c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
	break;
 800c3ca:	e014      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800c3d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	601a      	str	r2, [r3, #0]
	break;
 800c3d8:	e00d      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
	break;
 800c3e6:	e006      	b.n	800c3f6 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c3ee:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c3f0:	23fc      	movs	r3, #252	; 0xfc
 800c3f2:	77fb      	strb	r3, [r7, #31]
	break;
 800c3f4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c3f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3724      	adds	r7, #36	; 0x24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop

0800c408 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3318      	adds	r3, #24
 800c418:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c420:	2201      	movs	r2, #1
 800c422:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800c426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800c436:	b480      	push	{r7}
 800c438:	b085      	sub	sp, #20
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c43e:	2300      	movs	r3, #0
 800c440:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3318      	adds	r3, #24
 800c446:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800c454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3318      	adds	r3, #24
 800c474:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800c482:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3318      	adds	r3, #24
 800c4a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800c4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3318      	adds	r3, #24
 800c4d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800c4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3318      	adds	r3, #24
 800c4fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c506:	2200      	movs	r2, #0
 800c508:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800c50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c524:	2300      	movs	r3, #0
 800c526:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2208      	movs	r2, #8
 800c52c:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	220b      	movs	r2, #11
 800c532:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c53a:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c542:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c54a:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c552:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2212      	movs	r2, #18
 800c57a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	220f      	movs	r2, #15
 800c580:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2202      	movs	r2, #2
 800c586:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800c58e:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	220c      	movs	r2, #12
 800c594:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	895b      	ldrh	r3, [r3, #10]
 800c5d6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5f6:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2240      	movs	r2, #64	; 0x40
 800c602:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10d      	bne.n	800c628 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d108      	bne.n	800c628 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d103      	bne.n	800c628 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2200      	movs	r2, #0
 800c624:	741a      	strb	r2, [r3, #16]
 800c626:	e002      	b.n	800c62e <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2201      	movs	r2, #1
 800c62c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800c62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d114      	bne.n	800c660 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d110      	bne.n	800c660 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	6818      	ldr	r0, [r3, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	7d9b      	ldrb	r3, [r3, #22]
 800c652:	f003 f879 	bl	800f748 <VL53L1_calc_range_ignore_threshold>
 800c656:	4603      	mov	r3, r0
 800c658:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	831a      	strh	r2, [r3, #24]
 800c65e:	e002      	b.n	800c666 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2200      	movs	r2, #0
 800c664:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800c66c:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2232      	movs	r2, #50	; 0x32
 800c672:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800c67a:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	228c      	movs	r2, #140	; 0x8c
 800c680:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800c68e:	b480      	push	{r7}
 800c690:	b085      	sub	sp, #20
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c696:	2300      	movs	r3, #0
 800c698:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c6a0:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c6a8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2207      	movs	r2, #7
 800c6ae:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c6b6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800c6be:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800c6c6:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2246      	movs	r2, #70	; 0x46
 800c6cc:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800c6d4:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	228c      	movs	r2, #140	; 0x8c
 800c6da:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800c6dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c6fe:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c706:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c70e:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c716:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2208      	movs	r2, #8
 800c71c:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2228      	movs	r2, #40	; 0x28
 800c722:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2209      	movs	r2, #9
 800c728:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c74c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c754:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c75c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c764:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2210      	movs	r2, #16
 800c76a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2208      	movs	r2, #8
 800c770:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	4603      	mov	r3, r0
 800c78a:	6039      	str	r1, [r7, #0]
 800c78c:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c78e:	2300      	movs	r3, #0
 800c790:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2204      	movs	r2, #4
 800c796:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2201      	movs	r2, #1
 800c79c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2250      	movs	r2, #80	; 0x50
 800c7b4:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2270      	movs	r2, #112	; 0x70
 800c7ba:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	f241 023d 	movw	r2, #4157	; 0x103d
 800c7c2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2210      	movs	r2, #16
 800c7c8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2232      	movs	r2, #50	; 0x32
 800c7ce:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2264      	movs	r2, #100	; 0x64
 800c7d4:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	22a0      	movs	r2, #160	; 0xa0
 800c7e0:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800c7ee:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2208      	movs	r2, #8
 800c7f4:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2288      	movs	r2, #136	; 0x88
 800c7fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2208      	movs	r2, #8
 800c804:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c816:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	22fa      	movs	r2, #250	; 0xfa
 800c81c:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800c82c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2232      	movs	r2, #50	; 0x32
 800c832:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800c83a:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	228c      	movs	r2, #140	; 0x8c
 800c840:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2250      	movs	r2, #80	; 0x50
 800c846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2232      	movs	r2, #50	; 0x32
 800c84e:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800c850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2220      	movs	r2, #32
 800c870:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	220e      	movs	r2, #14
 800c876:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f642 7294 	movw	r2, #12180	; 0x2f94
 800c87e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	220e      	movs	r2, #14
 800c884:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	220a      	movs	r2, #10
 800c88a:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2206      	movs	r2, #6
 800c890:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	220e      	movs	r2, #14
 800c896:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	220a      	movs	r2, #10
 800c89c:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2206      	movs	r2, #6
 800c8a2:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2209      	movs	r2, #9
 800c8a8:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2205      	movs	r2, #5
 800c8ae:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2206      	movs	r2, #6
 800c8ba:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2206      	movs	r2, #6
 800c8c0:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2206      	movs	r2, #6
 800c8c6:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2221      	movs	r2, #33	; 0x21
 800c8d2:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	223c      	movs	r2, #60	; 0x3c
 800c8e4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	223c      	movs	r2, #60	; 0x3c
 800c8ea:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	223c      	movs	r2, #60	; 0x3c
 800c8f0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2280      	movs	r2, #128	; 0x80
 800c8f6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2280      	movs	r2, #128	; 0x80
 800c8fc:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2280      	movs	r2, #128	; 0x80
 800c902:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2208      	movs	r2, #8
 800c908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2210      	movs	r2, #16
 800c910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c942:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c94a:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c952:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c95a:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c962:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c96a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f242 3228 	movw	r2, #9000	; 0x2328
 800c972:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f241 7270 	movw	r2, #6000	; 0x1770
 800c97a:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c982:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f242 3228 	movw	r2, #9000	; 0x2328
 800c98a:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f241 7270 	movw	r2, #6000	; 0x1770
 800c992:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c9a2:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c9aa:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c9b2:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c9ba:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f24f 6218 	movw	r2, #63000	; 0xf618
 800c9c2:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c9ca:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c9d2:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c9da:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c9e8:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c9f0:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2206      	movs	r2, #6
 800ca10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ca22:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f640 22be 	movw	r2, #2750	; 0xabe
 800ca2c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	22fa      	movs	r2, #250	; 0xfa
 800ca34:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca3e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800ca48:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800ca52:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800ca5c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800ca66:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f64f 7238 	movw	r2, #65336	; 0xff38
 800ca70:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	22c8      	movs	r2, #200	; 0xc8
 800ca78:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	22fa      	movs	r2, #250	; 0xfa
 800ca80:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800ca8a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f640 1206 	movw	r2, #2310	; 0x906
 800ca94:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f640 1206 	movw	r2, #2310	; 0x906
 800caa6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f640 421c 	movw	r2, #3100	; 0xc1c
 800cab0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800caba:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f640 421c 	movw	r2, #3100	; 0xc1c
 800cac4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800cace:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f641 022e 	movw	r2, #6190	; 0x182e
 800cad8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f641 3230 	movw	r2, #6960	; 0x1b30
 800caf2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f641 022e 	movw	r2, #6190	; 0x182e
 800cafc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	22fa      	movs	r2, #250	; 0xfa
 800cb04:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800cb0e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800cb18:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f241 1294 	movw	r2, #4500	; 0x1194
 800cb22:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f64f 7238 	movw	r2, #65336	; 0xff38
 800cb2c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	22c8      	movs	r2, #200	; 0xc8
 800cb34:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f640 3222 	movw	r2, #2850	; 0xb22
 800cb3e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f640 42e4 	movw	r2, #3300	; 0xce4
 800cb48:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f640 721e 	movw	r2, #3870	; 0xf1e
 800cb62:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f241 222a 	movw	r2, #4650	; 0x122a
 800cb6c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f640 720a 	movw	r2, #3850	; 0xf0a
 800cb76:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f641 6214 	movw	r2, #7700	; 0x1e14
 800cb98:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800cba2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f641 1288 	movw	r2, #6536	; 0x1988
 800cbbc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 800cbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800cbe2:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2238      	movs	r2, #56	; 0x38
 800cbe8:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2220      	movs	r2, #32
 800cbee:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2270      	movs	r2, #112	; 0x70
 800cbf4:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2210      	movs	r2, #16
 800cbfa:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2264      	movs	r2, #100	; 0x64
 800cc00:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc08:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	220f      	movs	r2, #15
 800cc0e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2234      	movs	r2, #52	; 0x34
 800cc14:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	22c8      	movs	r2, #200	; 0xc8
 800cc1a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cc22:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cc2a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800cc2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cc54:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2211      	movs	r2, #17
 800cc96:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2202      	movs	r2, #2
 800cca8:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2208      	movs	r2, #8
 800ccae:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	22ff      	movs	r2, #255	; 0xff
 800ccf0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800ccfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfc:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	220b      	movs	r2, #11
 800cd2a:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2202      	movs	r2, #2
 800cd38:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	220d      	movs	r2, #13
 800cd3e:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800cd66:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2238      	movs	r2, #56	; 0x38
 800cd72:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	22ff      	movs	r2, #255	; 0xff
 800cd78:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	221a      	movs	r2, #26
 800cd8a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2220      	movs	r2, #32
 800cd96:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	22cc      	movs	r2, #204	; 0xcc
 800cda2:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	220b      	movs	r2, #11
 800cda8:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2201      	movs	r2, #1
 800cdae:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	22f5      	movs	r2, #245	; 0xf5
 800cdb4:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	2209      	movs	r2, #9
 800cdba:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2208      	movs	r2, #8
 800cdd0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2278      	movs	r2, #120	; 0x78
 800cdd6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2200      	movs	r2, #0
 800cddc:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2200      	movs	r2, #0
 800cde2:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2207      	movs	r2, #7
 800cde8:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2221      	movs	r2, #33	; 0x21
 800cdee:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2243      	movs	r2, #67	; 0x43
 800cdf4:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2210      	movs	r2, #16
 800cdfa:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2232      	movs	r2, #50	; 0x32
 800ce00:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2254      	movs	r2, #84	; 0x54
 800ce06:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2207      	movs	r2, #7
 800ce0c:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2221      	movs	r2, #33	; 0x21
 800ce12:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2243      	movs	r2, #67	; 0x43
 800ce18:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2210      	movs	r2, #16
 800ce1e:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2202      	movs	r2, #2
 800ce24:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2243      	movs	r2, #67	; 0x43
 800ce2a:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2205      	movs	r2, #5
 800ce30:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2200      	movs	r2, #0
 800ce36:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2207      	movs	r2, #7
 800ce3c:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2221      	movs	r2, #33	; 0x21
 800ce42:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2243      	movs	r2, #67	; 0x43
 800ce48:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2210      	movs	r2, #16
 800ce4e:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2232      	movs	r2, #50	; 0x32
 800ce54:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2254      	movs	r2, #84	; 0x54
 800ce5a:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce62:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce6a:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	2210      	movs	r2, #16
 800ce76:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	220f      	movs	r2, #15
 800ce82:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	220f      	movs	r2, #15
 800ce88:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	2208      	movs	r2, #8
 800ce8e:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	2208      	movs	r2, #8
 800ce94:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800ce96:	6a3b      	ldr	r3, [r7, #32]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	2200      	movs	r2, #0
 800cea6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	220b      	movs	r2, #11
 800cebc:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	2209      	movs	r2, #9
 800cec2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800cec8:	6a3b      	ldr	r3, [r7, #32]
 800ceca:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	2201      	movs	r2, #1
 800ced8:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800cee0:	6a3b      	ldr	r3, [r7, #32]
 800cee2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	22c7      	movs	r2, #199	; 0xc7
 800cef2:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	22ff      	movs	r2, #255	; 0xff
 800cef8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	22db      	movs	r2, #219	; 0xdb
 800cefe:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	2202      	movs	r2, #2
 800cf04:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	2200      	movs	r2, #0
 800cf0a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	2201      	movs	r2, #1
 800cf10:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	2201      	movs	r2, #1
 800cf16:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	2221      	movs	r2, #33	; 0x21
 800cf1c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800cf1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b08a      	sub	sp, #40	; 0x28
 800cf32:	af04      	add	r7, sp, #16
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
 800cf3a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	9303      	str	r3, [sp, #12]
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	9302      	str	r3, [sp, #8]
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	9301      	str	r3, [sp, #4]
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68b9      	ldr	r1, [r7, #8]
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f7ff fe70 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cf60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d121      	bne.n	800cfac <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2207      	movs	r2, #7
 800cf6c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2205      	movs	r2, #5
 800cf72:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2208      	movs	r2, #8
 800cf88:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2238      	movs	r2, #56	; 0x38
 800cf8e:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	2207      	movs	r2, #7
 800cf94:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	2205      	movs	r2, #5
 800cf9a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800cfa8:	6a3b      	ldr	r3, [r7, #32]
 800cfaa:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08a      	sub	sp, #40	; 0x28
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd0:	9302      	str	r3, [sp, #8]
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	68b9      	ldr	r1, [r7, #8]
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f7ff fe2b 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cfea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d121      	bne.n	800d036 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	220f      	movs	r2, #15
 800cff6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	220d      	movs	r2, #13
 800cffc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2208      	movs	r2, #8
 800d012:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	22b8      	movs	r2, #184	; 0xb8
 800d018:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	220f      	movs	r2, #15
 800d01e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	220d      	movs	r2, #13
 800d024:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b08a      	sub	sp, #40	; 0x28
 800d046:	af04      	add	r7, sp, #16
 800d048:	60f8      	str	r0, [r7, #12]
 800d04a:	60b9      	str	r1, [r7, #8]
 800d04c:	607a      	str	r2, [r7, #4]
 800d04e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d050:	2300      	movs	r3, #0
 800d052:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	9303      	str	r3, [sp, #12]
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	68b9      	ldr	r1, [r7, #8]
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7ff fde6 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800d070:	4603      	mov	r3, r0
 800d072:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d105      	bne.n	800d088 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2202      	movs	r2, #2
 800d080:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	223b      	movs	r2, #59	; 0x3b
 800d086:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08a      	sub	sp, #40	; 0x28
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	9303      	str	r3, [sp, #12]
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	9302      	str	r3, [sp, #8]
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	68b9      	ldr	r1, [r7, #8]
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f7ff fdbd 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d105      	bne.n	800d0da <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	225b      	movs	r2, #91	; 0x5b
 800d0d8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b08a      	sub	sp, #40	; 0x28
 800d0ea:	af04      	add	r7, sp, #16
 800d0ec:	60f8      	str	r0, [r7, #12]
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	607a      	str	r2, [r7, #4]
 800d0f2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	9302      	str	r3, [sp, #8]
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	68b9      	ldr	r1, [r7, #8]
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f7ff fd94 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800d114:	4603      	mov	r3, r0
 800d116:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11a      	bne.n	800d156 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	2200      	movs	r2, #0
 800d124:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2200      	movs	r2, #0
 800d12a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	22b1      	movs	r2, #177	; 0xb1
 800d130:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2200      	movs	r2, #0
 800d136:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	22d4      	movs	r2, #212	; 0xd4
 800d13c:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d144:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	2240      	movs	r2, #64	; 0x40
 800d154:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3718      	adds	r7, #24
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b08a      	sub	sp, #40	; 0x28
 800d166:	af04      	add	r7, sp, #16
 800d168:	60f8      	str	r0, [r7, #12]
 800d16a:	60b9      	str	r1, [r7, #8]
 800d16c:	607a      	str	r2, [r7, #4]
 800d16e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d170:	2300      	movs	r3, #0
 800d172:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	9303      	str	r3, [sp, #12]
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fecf 	bl	800cf2e <VL53L1_preset_mode_standard_ranging_short_range>
 800d190:	4603      	mov	r3, r0
 800d192:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d11a      	bne.n	800d1d2 <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800d19c:	6a3b      	ldr	r3, [r7, #32]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2284      	movs	r2, #132	; 0x84
 800d1ac:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	22b1      	movs	r2, #177	; 0xb1
 800d1b8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d1c0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	2240      	movs	r2, #64	; 0x40
 800d1d0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b08a      	sub	sp, #40	; 0x28
 800d1e2:	af04      	add	r7, sp, #16
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	607a      	str	r2, [r7, #4]
 800d1ea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	9302      	str	r3, [sp, #8]
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff fed6 	bl	800cfb8 <VL53L1_preset_mode_standard_ranging_long_range>
 800d20c:	4603      	mov	r3, r0
 800d20e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d11a      	bne.n	800d24e <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	2200      	movs	r2, #0
 800d21c:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2200      	movs	r2, #0
 800d222:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2297      	movs	r2, #151	; 0x97
 800d228:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2200      	movs	r2, #0
 800d22e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	22b1      	movs	r2, #177	; 0xb1
 800d234:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d23c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	2240      	movs	r2, #64	; 0x40
 800d24c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b08a      	sub	sp, #40	; 0x28
 800d25e:	af04      	add	r7, sp, #16
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d268:	2300      	movs	r3, #0
 800d26a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	9302      	str	r3, [sp, #8]
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	68b9      	ldr	r1, [r7, #8]
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f7ff ff2f 	bl	800d0e6 <VL53L1_preset_mode_timed_ranging>
 800d288:	4603      	mov	r3, r0
 800d28a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d106      	bne.n	800d2a2 <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800d294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d296:	6a39      	ldr	r1, [r7, #32]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f005 f978 	bl	801258e <VL53L1_config_low_power_auto_mode>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b08a      	sub	sp, #40	; 0x28
 800d2b2:	af04      	add	r7, sp, #16
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
 800d2ba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	9303      	str	r3, [sp, #12]
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	9302      	str	r3, [sp, #8]
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	9301      	str	r3, [sp, #4]
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7ff ff43 	bl	800d162 <VL53L1_preset_mode_timed_ranging_short_range>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800d2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ea:	6a39      	ldr	r1, [r7, #32]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f005 f94e 	bl	801258e <VL53L1_config_low_power_auto_mode>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b08a      	sub	sp, #40	; 0x28
 800d306:	af04      	add	r7, sp, #16
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	607a      	str	r2, [r7, #4]
 800d30e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d310:	2300      	movs	r3, #0
 800d312:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	9303      	str	r3, [sp, #12]
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	9302      	str	r3, [sp, #8]
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f7ff ff57 	bl	800d1de <VL53L1_preset_mode_timed_ranging_long_range>
 800d330:	4603      	mov	r3, r0
 800d332:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800d33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d33e:	6a39      	ldr	r1, [r7, #32]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f005 f924 	bl	801258e <VL53L1_config_low_power_auto_mode>
 800d346:	4603      	mov	r3, r0
 800d348:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d34a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b08a      	sub	sp, #40	; 0x28
 800d35a:	af04      	add	r7, sp, #16
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
 800d362:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d364:	2300      	movs	r3, #0
 800d366:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	9303      	str	r3, [sp, #12]
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	9302      	str	r3, [sp, #8]
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	9301      	str	r3, [sp, #4]
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	68b9      	ldr	r1, [r7, #8]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff fc5c 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800d384:	4603      	mov	r3, r0
 800d386:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d116      	bne.n	800d3be <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	2200      	movs	r2, #0
 800d394:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2200      	movs	r2, #0
 800d39a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	22b1      	movs	r2, #177	; 0xb1
 800d3a0:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	22d4      	movs	r2, #212	; 0xd4
 800d3ac:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ba:	2210      	movs	r2, #16
 800d3bc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b090      	sub	sp, #64	; 0x40
 800d3ce:	af0a      	add	r7, sp, #40	; 0x28
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	60b9      	str	r1, [r7, #8]
 800d3d4:	607a      	str	r2, [r7, #4]
 800d3d6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	9303      	str	r3, [sp, #12]
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	9302      	str	r3, [sp, #8]
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	9301      	str	r3, [sp, #4]
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	68b8      	ldr	r0, [r7, #8]
 800d3f4:	f7ff fc22 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d3fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d171      	bne.n	800d4e8 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d40a:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	9308      	str	r3, [sp, #32]
 800d410:	2305      	movs	r3, #5
 800d412:	9307      	str	r3, [sp, #28]
 800d414:	2304      	movs	r3, #4
 800d416:	9306      	str	r3, [sp, #24]
 800d418:	2303      	movs	r3, #3
 800d41a:	9305      	str	r3, [sp, #20]
 800d41c:	2302      	movs	r3, #2
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	2301      	movs	r3, #1
 800d422:	9303      	str	r3, [sp, #12]
 800d424:	2300      	movs	r3, #0
 800d426:	9302      	str	r3, [sp, #8]
 800d428:	2304      	movs	r3, #4
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	2303      	movs	r3, #3
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	2302      	movs	r3, #2
 800d432:	2201      	movs	r2, #1
 800d434:	2100      	movs	r1, #0
 800d436:	2007      	movs	r0, #7
 800d438:	f001 fe1b 	bl	800f072 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	3302      	adds	r3, #2
 800d440:	9308      	str	r3, [sp, #32]
 800d442:	2305      	movs	r3, #5
 800d444:	9307      	str	r3, [sp, #28]
 800d446:	2304      	movs	r3, #4
 800d448:	9306      	str	r3, [sp, #24]
 800d44a:	2303      	movs	r3, #3
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	2302      	movs	r3, #2
 800d450:	9304      	str	r3, [sp, #16]
 800d452:	2301      	movs	r3, #1
 800d454:	9303      	str	r3, [sp, #12]
 800d456:	2300      	movs	r3, #0
 800d458:	9302      	str	r3, [sp, #8]
 800d45a:	2304      	movs	r3, #4
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	2303      	movs	r3, #3
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	2302      	movs	r3, #2
 800d464:	2201      	movs	r2, #1
 800d466:	2100      	movs	r1, #0
 800d468:	2007      	movs	r0, #7
 800d46a:	f001 fe92 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	2209      	movs	r2, #9
 800d472:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	220b      	movs	r2, #11
 800d478:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	2209      	movs	r2, #9
 800d47e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	220b      	movs	r2, #11
 800d484:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	2220      	movs	r2, #32
 800d490:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	2200      	movs	r2, #0
 800d496:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	221a      	movs	r2, #26
 800d49c:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	2228      	movs	r2, #40	; 0x28
 800d4a8:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	2221      	movs	r2, #33	; 0x21
 800d4b4:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	22f5      	movs	r2, #245	; 0xf5
 800d4ba:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2208      	movs	r2, #8
 800d4c0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2288      	movs	r2, #136	; 0x88
 800d4c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	68b9      	ldr	r1, [r7, #8]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f001 f821 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	229b      	movs	r2, #155	; 0x9b
 800d4e0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	2226      	movs	r2, #38	; 0x26
 800d4e6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b090      	sub	sp, #64	; 0x40
 800d4f8:	af0a      	add	r7, sp, #40	; 0x28
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
 800d504:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	9303      	str	r3, [sp, #12]
 800d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d510:	9302      	str	r3, [sp, #8]
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	68b9      	ldr	r1, [r7, #8]
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f7ff ff52 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d13e      	bne.n	800d5b0 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	9308      	str	r3, [sp, #32]
 800d536:	2305      	movs	r3, #5
 800d538:	9307      	str	r3, [sp, #28]
 800d53a:	2304      	movs	r3, #4
 800d53c:	9306      	str	r3, [sp, #24]
 800d53e:	2303      	movs	r3, #3
 800d540:	9305      	str	r3, [sp, #20]
 800d542:	230a      	movs	r3, #10
 800d544:	9304      	str	r3, [sp, #16]
 800d546:	2309      	movs	r3, #9
 800d548:	9303      	str	r3, [sp, #12]
 800d54a:	2308      	movs	r3, #8
 800d54c:	9302      	str	r3, [sp, #8]
 800d54e:	2304      	movs	r3, #4
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	2303      	movs	r3, #3
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	2302      	movs	r3, #2
 800d558:	2201      	movs	r2, #1
 800d55a:	2100      	movs	r1, #0
 800d55c:	2007      	movs	r0, #7
 800d55e:	f001 fd88 	bl	800f072 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	3302      	adds	r3, #2
 800d566:	9308      	str	r3, [sp, #32]
 800d568:	2305      	movs	r3, #5
 800d56a:	9307      	str	r3, [sp, #28]
 800d56c:	2304      	movs	r3, #4
 800d56e:	9306      	str	r3, [sp, #24]
 800d570:	2303      	movs	r3, #3
 800d572:	9305      	str	r3, [sp, #20]
 800d574:	230a      	movs	r3, #10
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	2309      	movs	r3, #9
 800d57a:	9303      	str	r3, [sp, #12]
 800d57c:	2308      	movs	r3, #8
 800d57e:	9302      	str	r3, [sp, #8]
 800d580:	2304      	movs	r3, #4
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	2303      	movs	r3, #3
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	2302      	movs	r3, #2
 800d58a:	2201      	movs	r2, #1
 800d58c:	2100      	movs	r1, #0
 800d58e:	2007      	movs	r0, #7
 800d590:	f001 fdff 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 ffbd 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	22bb      	movs	r2, #187	; 0xbb
 800d5a8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	2226      	movs	r2, #38	; 0x26
 800d5ae:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	; 0x30
 800d5c0:	af06      	add	r7, sp, #24
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d4:	9303      	str	r3, [sp, #12]
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	9302      	str	r3, [sp, #8]
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	9301      	str	r3, [sp, #4]
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7ff ff83 	bl	800d4f4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d102      	bne.n	800d600 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	22db      	movs	r2, #219	; 0xdb
 800d5fe:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b090      	sub	sp, #64	; 0x40
 800d610:	af0a      	add	r7, sp, #40	; 0x28
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	9302      	str	r3, [sp, #8]
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	68b9      	ldr	r1, [r7, #8]
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7ff fec6 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800d63e:	4603      	mov	r3, r0
 800d640:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d13e      	bne.n	800d6c8 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	9308      	str	r3, [sp, #32]
 800d64e:	230d      	movs	r3, #13
 800d650:	9307      	str	r3, [sp, #28]
 800d652:	230c      	movs	r3, #12
 800d654:	9306      	str	r3, [sp, #24]
 800d656:	230b      	movs	r3, #11
 800d658:	9305      	str	r3, [sp, #20]
 800d65a:	230a      	movs	r3, #10
 800d65c:	9304      	str	r3, [sp, #16]
 800d65e:	2309      	movs	r3, #9
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	2308      	movs	r3, #8
 800d664:	9302      	str	r3, [sp, #8]
 800d666:	230c      	movs	r3, #12
 800d668:	9301      	str	r3, [sp, #4]
 800d66a:	230b      	movs	r3, #11
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	230a      	movs	r3, #10
 800d670:	2209      	movs	r2, #9
 800d672:	2108      	movs	r1, #8
 800d674:	2007      	movs	r0, #7
 800d676:	f001 fcfc 	bl	800f072 <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	3302      	adds	r3, #2
 800d67e:	9308      	str	r3, [sp, #32]
 800d680:	230d      	movs	r3, #13
 800d682:	9307      	str	r3, [sp, #28]
 800d684:	230c      	movs	r3, #12
 800d686:	9306      	str	r3, [sp, #24]
 800d688:	230b      	movs	r3, #11
 800d68a:	9305      	str	r3, [sp, #20]
 800d68c:	230a      	movs	r3, #10
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	2309      	movs	r3, #9
 800d692:	9303      	str	r3, [sp, #12]
 800d694:	2308      	movs	r3, #8
 800d696:	9302      	str	r3, [sp, #8]
 800d698:	230c      	movs	r3, #12
 800d69a:	9301      	str	r3, [sp, #4]
 800d69c:	230b      	movs	r3, #11
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	230a      	movs	r3, #10
 800d6a2:	2209      	movs	r2, #9
 800d6a4:	2108      	movs	r1, #8
 800d6a6:	2007      	movs	r0, #7
 800d6a8:	f001 fd73 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 ff31 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	22bb      	movs	r2, #187	; 0xbb
 800d6c6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800d6c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3718      	adds	r7, #24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08c      	sub	sp, #48	; 0x30
 800d6d8:	af06      	add	r7, sp, #24
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	9304      	str	r3, [sp, #16]
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	9303      	str	r3, [sp, #12]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	9302      	str	r3, [sp, #8]
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f7ff ff83 	bl	800d60c <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800d706:	4603      	mov	r3, r0
 800d708:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800d70a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d102      	bne.n	800d718 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	22db      	movs	r2, #219	; 0xdb
 800d716:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800d718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3718      	adds	r7, #24
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b090      	sub	sp, #64	; 0x40
 800d728:	af0a      	add	r7, sp, #40	; 0x28
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d732:	2300      	movs	r3, #0
 800d734:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	9302      	str	r3, [sp, #8]
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff fe3a 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800d756:	4603      	mov	r3, r0
 800d758:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d75a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d166      	bne.n	800d830 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d768:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	9308      	str	r3, [sp, #32]
 800d76e:	2304      	movs	r3, #4
 800d770:	9307      	str	r3, [sp, #28]
 800d772:	2303      	movs	r3, #3
 800d774:	9306      	str	r3, [sp, #24]
 800d776:	2302      	movs	r3, #2
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9304      	str	r3, [sp, #16]
 800d77e:	2300      	movs	r3, #0
 800d780:	9303      	str	r3, [sp, #12]
 800d782:	2307      	movs	r3, #7
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	2304      	movs	r3, #4
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	2303      	movs	r3, #3
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	2302      	movs	r3, #2
 800d790:	2201      	movs	r2, #1
 800d792:	2100      	movs	r1, #0
 800d794:	2007      	movs	r0, #7
 800d796:	f001 fc6c 	bl	800f072 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	3302      	adds	r3, #2
 800d79e:	9308      	str	r3, [sp, #32]
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	9307      	str	r3, [sp, #28]
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	9306      	str	r3, [sp, #24]
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	9305      	str	r3, [sp, #20]
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	9304      	str	r3, [sp, #16]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	2307      	movs	r3, #7
 800d7b6:	9302      	str	r3, [sp, #8]
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	2303      	movs	r3, #3
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	2007      	movs	r0, #7
 800d7c8:	f001 fce3 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	68b9      	ldr	r1, [r7, #8]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 fea1 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	2204      	movs	r2, #4
 800d7e0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	2242      	movs	r2, #66	; 0x42
 800d7f2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	2242      	movs	r2, #66	; 0x42
 800d7fe:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	2200      	movs	r2, #0
 800d804:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	2252      	movs	r2, #82	; 0x52
 800d80a:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	2200      	movs	r2, #0
 800d810:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	2266      	movs	r2, #102	; 0x66
 800d816:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	2204      	movs	r2, #4
 800d81c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	22a4      	movs	r2, #164	; 0xa4
 800d822:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	229b      	movs	r2, #155	; 0x9b
 800d828:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	2226      	movs	r2, #38	; 0x26
 800d82e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d830:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b090      	sub	sp, #64	; 0x40
 800d840:	af0a      	add	r7, sp, #40	; 0x28
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	9304      	str	r3, [sp, #16]
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	9303      	str	r3, [sp, #12]
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	9302      	str	r3, [sp, #8]
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	68b9      	ldr	r1, [r7, #8]
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f7ff fdae 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800d86e:	4603      	mov	r3, r0
 800d870:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d178      	bne.n	800d96c <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	9308      	str	r3, [sp, #32]
 800d87e:	2305      	movs	r3, #5
 800d880:	9307      	str	r3, [sp, #28]
 800d882:	2304      	movs	r3, #4
 800d884:	9306      	str	r3, [sp, #24]
 800d886:	2303      	movs	r3, #3
 800d888:	9305      	str	r3, [sp, #20]
 800d88a:	2302      	movs	r3, #2
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	2301      	movs	r3, #1
 800d890:	9303      	str	r3, [sp, #12]
 800d892:	2300      	movs	r3, #0
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	2304      	movs	r3, #4
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	2303      	movs	r3, #3
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	2302      	movs	r3, #2
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	2007      	movs	r0, #7
 800d8a6:	f001 fbe4 	bl	800f072 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	2305      	movs	r3, #5
 800d8b2:	9307      	str	r3, [sp, #28]
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	9306      	str	r3, [sp, #24]
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	9305      	str	r3, [sp, #20]
 800d8bc:	2302      	movs	r3, #2
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	9303      	str	r3, [sp, #12]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9302      	str	r3, [sp, #8]
 800d8c8:	2304      	movs	r3, #4
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	2007      	movs	r0, #7
 800d8d8:	f001 fc5b 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	68b9      	ldr	r1, [r7, #8]
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fe19 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	2209      	movs	r2, #9
 800d8f0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	220b      	movs	r2, #11
 800d8f6:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	2221      	movs	r2, #33	; 0x21
 800d902:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	2200      	movs	r2, #0
 800d908:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	221b      	movs	r2, #27
 800d90e:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	2200      	movs	r2, #0
 800d914:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	2229      	movs	r2, #41	; 0x29
 800d91a:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	2200      	movs	r2, #0
 800d920:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	2222      	movs	r2, #34	; 0x22
 800d926:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2209      	movs	r2, #9
 800d92c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	22f5      	movs	r2, #245	; 0xf5
 800d932:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2209      	movs	r2, #9
 800d938:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	220b      	movs	r2, #11
 800d93e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2208      	movs	r2, #8
 800d954:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2288      	movs	r2, #136	; 0x88
 800d95c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	229b      	movs	r2, #155	; 0x9b
 800d964:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	2226      	movs	r2, #38	; 0x26
 800d96a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b090      	sub	sp, #64	; 0x40
 800d97c:	af0a      	add	r7, sp, #40	; 0x28
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d986:	2300      	movs	r3, #0
 800d988:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	9303      	str	r3, [sp, #12]
 800d992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	68b9      	ldr	r1, [r7, #8]
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f7ff ff49 	bl	800d83c <VL53L1_preset_mode_histogram_long_range>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800d9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d13b      	bne.n	800da2e <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	9308      	str	r3, [sp, #32]
 800d9ba:	2305      	movs	r3, #5
 800d9bc:	9307      	str	r3, [sp, #28]
 800d9be:	2304      	movs	r3, #4
 800d9c0:	9306      	str	r3, [sp, #24]
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	9305      	str	r3, [sp, #20]
 800d9c6:	230a      	movs	r3, #10
 800d9c8:	9304      	str	r3, [sp, #16]
 800d9ca:	2309      	movs	r3, #9
 800d9cc:	9303      	str	r3, [sp, #12]
 800d9ce:	2308      	movs	r3, #8
 800d9d0:	9302      	str	r3, [sp, #8]
 800d9d2:	2304      	movs	r3, #4
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	2302      	movs	r3, #2
 800d9dc:	2201      	movs	r2, #1
 800d9de:	2100      	movs	r1, #0
 800d9e0:	2007      	movs	r0, #7
 800d9e2:	f001 fb46 	bl	800f072 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	9308      	str	r3, [sp, #32]
 800d9ec:	2305      	movs	r3, #5
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	9306      	str	r3, [sp, #24]
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	230a      	movs	r3, #10
 800d9fa:	9304      	str	r3, [sp, #16]
 800d9fc:	2309      	movs	r3, #9
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	2308      	movs	r3, #8
 800da02:	9302      	str	r3, [sp, #8]
 800da04:	2304      	movs	r3, #4
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	2303      	movs	r3, #3
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	2302      	movs	r3, #2
 800da0e:	2201      	movs	r2, #1
 800da10:	2100      	movs	r1, #0
 800da12:	2007      	movs	r0, #7
 800da14:	f001 fbbd 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	6a3b      	ldr	r3, [r7, #32]
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	68b9      	ldr	r1, [r7, #8]
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fd7b 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	22bb      	movs	r2, #187	; 0xbb
 800da2c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800da2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b08c      	sub	sp, #48	; 0x30
 800da3e:	af06      	add	r7, sp, #24
 800da40:	60f8      	str	r0, [r7, #12]
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da48:	2300      	movs	r3, #0
 800da4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	9304      	str	r3, [sp, #16]
 800da50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da52:	9303      	str	r3, [sp, #12]
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	9302      	str	r3, [sp, #8]
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	9301      	str	r3, [sp, #4]
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff ff86 	bl	800d978 <VL53L1_preset_mode_histogram_long_range_mm1>
 800da6c:	4603      	mov	r3, r0
 800da6e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800da70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	22db      	movs	r2, #219	; 0xdb
 800da7c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800da7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3718      	adds	r7, #24
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b090      	sub	sp, #64	; 0x40
 800da8e:	af0a      	add	r7, sp, #40	; 0x28
 800da90:	60f8      	str	r0, [r7, #12]
 800da92:	60b9      	str	r1, [r7, #8]
 800da94:	607a      	str	r2, [r7, #4]
 800da96:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da98:	2300      	movs	r3, #0
 800da9a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	9304      	str	r3, [sp, #16]
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	9303      	str	r3, [sp, #12]
 800daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa6:	9302      	str	r3, [sp, #8]
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	9301      	str	r3, [sp, #4]
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fc87 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800dabc:	4603      	mov	r3, r0
 800dabe:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800dac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d178      	bne.n	800dbba <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	9308      	str	r3, [sp, #32]
 800dacc:	2303      	movs	r3, #3
 800dace:	9307      	str	r3, [sp, #28]
 800dad0:	2302      	movs	r3, #2
 800dad2:	9306      	str	r3, [sp, #24]
 800dad4:	2301      	movs	r3, #1
 800dad6:	9305      	str	r3, [sp, #20]
 800dad8:	2302      	movs	r3, #2
 800dada:	9304      	str	r3, [sp, #16]
 800dadc:	2301      	movs	r3, #1
 800dade:	9303      	str	r3, [sp, #12]
 800dae0:	2300      	movs	r3, #0
 800dae2:	9302      	str	r3, [sp, #8]
 800dae4:	2302      	movs	r3, #2
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	2302      	movs	r3, #2
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	2301      	movs	r3, #1
 800daee:	2201      	movs	r2, #1
 800daf0:	2100      	movs	r1, #0
 800daf2:	2007      	movs	r0, #7
 800daf4:	f001 fabd 	bl	800f072 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800daf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafa:	3302      	adds	r3, #2
 800dafc:	9308      	str	r3, [sp, #32]
 800dafe:	2303      	movs	r3, #3
 800db00:	9307      	str	r3, [sp, #28]
 800db02:	2302      	movs	r3, #2
 800db04:	9306      	str	r3, [sp, #24]
 800db06:	2301      	movs	r3, #1
 800db08:	9305      	str	r3, [sp, #20]
 800db0a:	2302      	movs	r3, #2
 800db0c:	9304      	str	r3, [sp, #16]
 800db0e:	2301      	movs	r3, #1
 800db10:	9303      	str	r3, [sp, #12]
 800db12:	2300      	movs	r3, #0
 800db14:	9302      	str	r3, [sp, #8]
 800db16:	2302      	movs	r3, #2
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	2302      	movs	r3, #2
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	2301      	movs	r3, #1
 800db20:	2201      	movs	r2, #1
 800db22:	2100      	movs	r1, #0
 800db24:	2007      	movs	r0, #7
 800db26:	f001 fb34 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	68b9      	ldr	r1, [r7, #8]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fcf2 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	2205      	movs	r2, #5
 800db3e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	2207      	movs	r2, #7
 800db44:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	2200      	movs	r2, #0
 800db4a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	2236      	movs	r2, #54	; 0x36
 800db50:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	2200      	movs	r2, #0
 800db56:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800db58:	6a3b      	ldr	r3, [r7, #32]
 800db5a:	2228      	movs	r2, #40	; 0x28
 800db5c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	2200      	movs	r2, #0
 800db62:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	2244      	movs	r2, #68	; 0x44
 800db68:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	2200      	movs	r2, #0
 800db6e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	2233      	movs	r2, #51	; 0x33
 800db74:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2205      	movs	r2, #5
 800db7a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	22f5      	movs	r2, #245	; 0xf5
 800db80:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	2205      	movs	r2, #5
 800db86:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	2207      	movs	r2, #7
 800db8c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2208      	movs	r2, #8
 800dba2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2248      	movs	r2, #72	; 0x48
 800dbaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	229b      	movs	r2, #155	; 0x9b
 800dbb2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	2226      	movs	r2, #38	; 0x26
 800dbb8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dbba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b090      	sub	sp, #64	; 0x40
 800dbca:	af0a      	add	r7, sp, #40	; 0x28
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
 800dbd2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbde:	9303      	str	r3, [sp, #12]
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	9302      	str	r3, [sp, #8]
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	68b9      	ldr	r1, [r7, #8]
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff ff49 	bl	800da8a <VL53L1_preset_mode_histogram_medium_range>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800dbfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d13b      	bne.n	800dc7c <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	9308      	str	r3, [sp, #32]
 800dc08:	2303      	movs	r3, #3
 800dc0a:	9307      	str	r3, [sp, #28]
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	9306      	str	r3, [sp, #24]
 800dc10:	2301      	movs	r3, #1
 800dc12:	9305      	str	r3, [sp, #20]
 800dc14:	230a      	movs	r3, #10
 800dc16:	9304      	str	r3, [sp, #16]
 800dc18:	2309      	movs	r3, #9
 800dc1a:	9303      	str	r3, [sp, #12]
 800dc1c:	2308      	movs	r3, #8
 800dc1e:	9302      	str	r3, [sp, #8]
 800dc20:	2302      	movs	r3, #2
 800dc22:	9301      	str	r3, [sp, #4]
 800dc24:	2302      	movs	r3, #2
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	2301      	movs	r3, #1
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	2007      	movs	r0, #7
 800dc30:	f001 fa1f 	bl	800f072 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	3302      	adds	r3, #2
 800dc38:	9308      	str	r3, [sp, #32]
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	9307      	str	r3, [sp, #28]
 800dc3e:	2302      	movs	r3, #2
 800dc40:	9306      	str	r3, [sp, #24]
 800dc42:	2301      	movs	r3, #1
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	230a      	movs	r3, #10
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	2309      	movs	r3, #9
 800dc4c:	9303      	str	r3, [sp, #12]
 800dc4e:	2308      	movs	r3, #8
 800dc50:	9302      	str	r3, [sp, #8]
 800dc52:	2302      	movs	r3, #2
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	2302      	movs	r3, #2
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	2100      	movs	r1, #0
 800dc60:	2007      	movs	r0, #7
 800dc62:	f001 fa96 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	68b9      	ldr	r1, [r7, #8]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fc54 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	22bb      	movs	r2, #187	; 0xbb
 800dc7a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08c      	sub	sp, #48	; 0x30
 800dc8c:	af06      	add	r7, sp, #24
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca4:	9302      	str	r3, [sp, #8]
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff ff86 	bl	800dbc6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800dcbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	22db      	movs	r2, #219	; 0xdb
 800dcca:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b090      	sub	sp, #64	; 0x40
 800dcdc:	af0a      	add	r7, sp, #40	; 0x28
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
 800dce4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dce6:	2300      	movs	r3, #0
 800dce8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	9303      	str	r3, [sp, #12]
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	68b9      	ldr	r1, [r7, #8]
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7ff fb60 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800dd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d178      	bne.n	800de08 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	9308      	str	r3, [sp, #32]
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	9307      	str	r3, [sp, #28]
 800dd1e:	2302      	movs	r3, #2
 800dd20:	9306      	str	r3, [sp, #24]
 800dd22:	2301      	movs	r3, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	2301      	movs	r3, #1
 800dd28:	9304      	str	r3, [sp, #16]
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	9303      	str	r3, [sp, #12]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	9302      	str	r3, [sp, #8]
 800dd32:	2301      	movs	r3, #1
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	2301      	movs	r3, #1
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2107      	movs	r1, #7
 800dd40:	2007      	movs	r0, #7
 800dd42:	f001 f996 	bl	800f072 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	3302      	adds	r3, #2
 800dd4a:	9308      	str	r3, [sp, #32]
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	2302      	movs	r3, #2
 800dd52:	9306      	str	r3, [sp, #24]
 800dd54:	2301      	movs	r3, #1
 800dd56:	9305      	str	r3, [sp, #20]
 800dd58:	2301      	movs	r3, #1
 800dd5a:	9304      	str	r3, [sp, #16]
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	9303      	str	r3, [sp, #12]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9302      	str	r3, [sp, #8]
 800dd64:	2301      	movs	r3, #1
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	2301      	movs	r3, #1
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	2200      	movs	r2, #0
 800dd70:	2107      	movs	r1, #7
 800dd72:	2007      	movs	r0, #7
 800dd74:	f001 fa0d 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fbcb 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	2205      	movs	r2, #5
 800dd92:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	2200      	movs	r2, #0
 800dd98:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	2252      	movs	r2, #82	; 0x52
 800dd9e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	2200      	movs	r2, #0
 800dda4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	2237      	movs	r2, #55	; 0x37
 800ddaa:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	2266      	movs	r2, #102	; 0x66
 800ddb6:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	2244      	movs	r2, #68	; 0x44
 800ddc2:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2203      	movs	r2, #3
 800ddc8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	22f5      	movs	r2, #245	; 0xf5
 800ddce:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	2203      	movs	r2, #3
 800ddd4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	2205      	movs	r2, #5
 800ddda:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2208      	movs	r2, #8
 800ddf0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2228      	movs	r2, #40	; 0x28
 800ddf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	22bb      	movs	r2, #187	; 0xbb
 800de00:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800de02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de04:	2226      	movs	r2, #38	; 0x26
 800de06:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800de08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b090      	sub	sp, #64	; 0x40
 800de18:	af0a      	add	r7, sp, #40	; 0x28
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800de22:	2300      	movs	r3, #0
 800de24:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800de26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de28:	9304      	str	r3, [sp, #16]
 800de2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	68b9      	ldr	r1, [r7, #8]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f7ff ff49 	bl	800dcd8 <VL53L1_preset_mode_histogram_short_range>
 800de46:	4603      	mov	r3, r0
 800de48:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800de4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d15a      	bne.n	800df08 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	9308      	str	r3, [sp, #32]
 800de56:	2301      	movs	r3, #1
 800de58:	9307      	str	r3, [sp, #28]
 800de5a:	2301      	movs	r3, #1
 800de5c:	9306      	str	r3, [sp, #24]
 800de5e:	2301      	movs	r3, #1
 800de60:	9305      	str	r3, [sp, #20]
 800de62:	2300      	movs	r3, #0
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	2300      	movs	r3, #0
 800de68:	9303      	str	r3, [sp, #12]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	2301      	movs	r3, #1
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	2301      	movs	r3, #1
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	2300      	movs	r3, #0
 800de78:	2200      	movs	r2, #0
 800de7a:	2107      	movs	r1, #7
 800de7c:	2007      	movs	r0, #7
 800de7e:	f001 f8f8 	bl	800f072 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	3302      	adds	r3, #2
 800de86:	9308      	str	r3, [sp, #32]
 800de88:	2301      	movs	r3, #1
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	2301      	movs	r3, #1
 800de8e:	9306      	str	r3, [sp, #24]
 800de90:	2301      	movs	r3, #1
 800de92:	9305      	str	r3, [sp, #20]
 800de94:	2300      	movs	r3, #0
 800de96:	9304      	str	r3, [sp, #16]
 800de98:	2300      	movs	r3, #0
 800de9a:	9303      	str	r3, [sp, #12]
 800de9c:	2300      	movs	r3, #0
 800de9e:	9302      	str	r3, [sp, #8]
 800dea0:	2301      	movs	r3, #1
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	2301      	movs	r3, #1
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	2300      	movs	r3, #0
 800deaa:	2200      	movs	r2, #0
 800deac:	2107      	movs	r1, #7
 800deae:	2007      	movs	r0, #7
 800deb0:	f001 f96f 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fb2d 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	2202      	movs	r2, #2
 800dec8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	2203      	movs	r2, #3
 800dece:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2200      	movs	r2, #0
 800ded4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2231      	movs	r2, #49	; 0x31
 800deda:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2202      	movs	r2, #2
 800dee0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	2203      	movs	r2, #3
 800dee6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2210      	movs	r2, #16
 800defc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2218      	movs	r2, #24
 800df04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800df08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b090      	sub	sp, #64	; 0x40
 800df18:	af0a      	add	r7, sp, #40	; 0x28
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df22:	2300      	movs	r3, #0
 800df24:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	9304      	str	r3, [sp, #16]
 800df2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2c:	9303      	str	r3, [sp, #12]
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	9302      	str	r3, [sp, #8]
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f7ff fec9 	bl	800dcd8 <VL53L1_preset_mode_histogram_short_range>
 800df46:	4603      	mov	r3, r0
 800df48:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800df4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d13b      	bne.n	800dfca <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	9308      	str	r3, [sp, #32]
 800df56:	2302      	movs	r3, #2
 800df58:	9307      	str	r3, [sp, #28]
 800df5a:	2302      	movs	r3, #2
 800df5c:	9306      	str	r3, [sp, #24]
 800df5e:	2301      	movs	r3, #1
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	2301      	movs	r3, #1
 800df64:	9304      	str	r3, [sp, #16]
 800df66:	2309      	movs	r3, #9
 800df68:	9303      	str	r3, [sp, #12]
 800df6a:	2308      	movs	r3, #8
 800df6c:	9302      	str	r3, [sp, #8]
 800df6e:	2301      	movs	r3, #1
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	2301      	movs	r3, #1
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2301      	movs	r3, #1
 800df78:	2200      	movs	r2, #0
 800df7a:	2107      	movs	r1, #7
 800df7c:	2007      	movs	r0, #7
 800df7e:	f001 f878 	bl	800f072 <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	3302      	adds	r3, #2
 800df86:	9308      	str	r3, [sp, #32]
 800df88:	2302      	movs	r3, #2
 800df8a:	9307      	str	r3, [sp, #28]
 800df8c:	2302      	movs	r3, #2
 800df8e:	9306      	str	r3, [sp, #24]
 800df90:	2301      	movs	r3, #1
 800df92:	9305      	str	r3, [sp, #20]
 800df94:	2301      	movs	r3, #1
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	2309      	movs	r3, #9
 800df9a:	9303      	str	r3, [sp, #12]
 800df9c:	2308      	movs	r3, #8
 800df9e:	9302      	str	r3, [sp, #8]
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	9301      	str	r3, [sp, #4]
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2107      	movs	r1, #7
 800dfae:	2007      	movs	r0, #7
 800dfb0:	f001 f8ef 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	68b9      	ldr	r1, [r7, #8]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 faad 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	22bb      	movs	r2, #187	; 0xbb
 800dfc8:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800dfca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b08c      	sub	sp, #48	; 0x30
 800dfda:	af06      	add	r7, sp, #24
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	607a      	str	r2, [r7, #4]
 800dfe2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	9303      	str	r3, [sp, #12]
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	9302      	str	r3, [sp, #8]
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	9301      	str	r3, [sp, #4]
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	68b9      	ldr	r1, [r7, #8]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f7ff ff86 	bl	800df14 <VL53L1_preset_mode_histogram_short_range_mm1>
 800e008:	4603      	mov	r3, r0
 800e00a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	22db      	movs	r2, #219	; 0xdb
 800e018:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b08c      	sub	sp, #48	; 0x30
 800e02a:	af06      	add	r7, sp, #24
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	607a      	str	r2, [r7, #4]
 800e032:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e034:	2300      	movs	r3, #0
 800e036:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	9303      	str	r3, [sp, #12]
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	9302      	str	r3, [sp, #8]
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	68b9      	ldr	r1, [r7, #8]
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff f9b9 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800e058:	4603      	mov	r3, r0
 800e05a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e05c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10b      	bne.n	800e07c <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2201      	movs	r2, #1
 800e068:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	2201      	movs	r2, #1
 800e06e:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	2283      	movs	r2, #131	; 0x83
 800e074:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	222e      	movs	r2, #46	; 0x2e
 800e07a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b090      	sub	sp, #64	; 0x40
 800e08c:	af0a      	add	r7, sp, #40	; 0x28
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e096:	2300      	movs	r3, #0
 800e098:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800e09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09c:	9304      	str	r3, [sp, #16]
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	9303      	str	r3, [sp, #12]
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	9302      	str	r3, [sp, #8]
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	68b9      	ldr	r1, [r7, #8]
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 f9ba 	bl	800e42e <VL53L1_preset_mode_histogram_multizone_long_range>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e0be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d151      	bne.n	800e16a <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800e0c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0c8:	6838      	ldr	r0, [r7, #0]
 800e0ca:	f00a fb1c 	bl	8018706 <VL53L1_zone_preset_xtalk_planar>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800e0d2:	6a3b      	ldr	r3, [r7, #32]
 800e0d4:	2209      	movs	r2, #9
 800e0d6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	2209      	movs	r2, #9
 800e0dc:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	9308      	str	r3, [sp, #32]
 800e0e2:	2304      	movs	r3, #4
 800e0e4:	9307      	str	r3, [sp, #28]
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	9306      	str	r3, [sp, #24]
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	9305      	str	r3, [sp, #20]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	2307      	movs	r3, #7
 800e0f8:	9302      	str	r3, [sp, #8]
 800e0fa:	2304      	movs	r3, #4
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	2303      	movs	r3, #3
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	2302      	movs	r3, #2
 800e104:	2201      	movs	r2, #1
 800e106:	2100      	movs	r1, #0
 800e108:	2007      	movs	r0, #7
 800e10a:	f000 ffb2 	bl	800f072 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	3302      	adds	r3, #2
 800e112:	9308      	str	r3, [sp, #32]
 800e114:	2304      	movs	r3, #4
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	2303      	movs	r3, #3
 800e11a:	9306      	str	r3, [sp, #24]
 800e11c:	2302      	movs	r3, #2
 800e11e:	9305      	str	r3, [sp, #20]
 800e120:	2301      	movs	r3, #1
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	2300      	movs	r3, #0
 800e126:	9303      	str	r3, [sp, #12]
 800e128:	2307      	movs	r3, #7
 800e12a:	9302      	str	r3, [sp, #8]
 800e12c:	2304      	movs	r3, #4
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	2303      	movs	r3, #3
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	2302      	movs	r3, #2
 800e136:	2201      	movs	r2, #1
 800e138:	2100      	movs	r1, #0
 800e13a:	2007      	movs	r0, #7
 800e13c:	f001 f829 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800e140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d108      	bne.n	800e15a <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	3302      	adds	r3, #2
 800e14c:	461a      	mov	r2, r3
 800e14e:	6879      	ldr	r1, [r7, #4]
 800e150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e152:	f003 f97d 	bl	8011450 <VL53L1_set_histogram_multizone_initial_bin_config>
 800e156:	4603      	mov	r3, r0
 800e158:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800e15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	6a3b      	ldr	r3, [r7, #32]
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	68b9      	ldr	r1, [r7, #8]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f9da 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e16a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b090      	sub	sp, #64	; 0x40
 800e17a:	af0a      	add	r7, sp, #40	; 0x28
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e184:	2300      	movs	r3, #0
 800e186:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	9304      	str	r3, [sp, #16]
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	9303      	str	r3, [sp, #12]
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	9302      	str	r3, [sp, #8]
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68b9      	ldr	r1, [r7, #8]
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7ff f911 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800e1ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d16e      	bne.n	800e292 <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	9308      	str	r3, [sp, #32]
 800e1b8:	230c      	movs	r3, #12
 800e1ba:	9307      	str	r3, [sp, #28]
 800e1bc:	230b      	movs	r3, #11
 800e1be:	9306      	str	r3, [sp, #24]
 800e1c0:	230a      	movs	r3, #10
 800e1c2:	9305      	str	r3, [sp, #20]
 800e1c4:	2309      	movs	r3, #9
 800e1c6:	9304      	str	r3, [sp, #16]
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	230f      	movs	r3, #15
 800e1ce:	9302      	str	r3, [sp, #8]
 800e1d0:	230c      	movs	r3, #12
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	230b      	movs	r3, #11
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	230a      	movs	r3, #10
 800e1da:	2209      	movs	r2, #9
 800e1dc:	2108      	movs	r1, #8
 800e1de:	200f      	movs	r0, #15
 800e1e0:	f000 ff47 	bl	800f072 <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	3302      	adds	r3, #2
 800e1e8:	9308      	str	r3, [sp, #32]
 800e1ea:	230c      	movs	r3, #12
 800e1ec:	9307      	str	r3, [sp, #28]
 800e1ee:	230b      	movs	r3, #11
 800e1f0:	9306      	str	r3, [sp, #24]
 800e1f2:	230a      	movs	r3, #10
 800e1f4:	9305      	str	r3, [sp, #20]
 800e1f6:	2309      	movs	r3, #9
 800e1f8:	9304      	str	r3, [sp, #16]
 800e1fa:	2308      	movs	r3, #8
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	230f      	movs	r3, #15
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	230c      	movs	r3, #12
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	230b      	movs	r3, #11
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	230a      	movs	r3, #10
 800e20c:	2209      	movs	r2, #9
 800e20e:	2108      	movs	r1, #8
 800e210:	200f      	movs	r0, #15
 800e212:	f000 ffbe 	bl	800f192 <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 f97c 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	2209      	movs	r2, #9
 800e22a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	2209      	movs	r2, #9
 800e230:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	2200      	movs	r2, #0
 800e236:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	2221      	movs	r2, #33	; 0x21
 800e23c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	2200      	movs	r2, #0
 800e242:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	2221      	movs	r2, #33	; 0x21
 800e248:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	2200      	movs	r2, #0
 800e24e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	2229      	movs	r2, #41	; 0x29
 800e254:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800e256:	6a3b      	ldr	r3, [r7, #32]
 800e258:	2200      	movs	r2, #0
 800e25a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	2229      	movs	r2, #41	; 0x29
 800e260:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2209      	movs	r2, #9
 800e266:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	22f5      	movs	r2, #245	; 0xf5
 800e26c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e270:	2209      	movs	r2, #9
 800e272:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	2209      	movs	r2, #9
 800e278:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	2209      	movs	r2, #9
 800e27e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	2206      	movs	r2, #6
 800e284:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	22bb      	movs	r2, #187	; 0xbb
 800e28a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800e28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28e:	2226      	movs	r2, #38	; 0x26
 800e290:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b08c      	sub	sp, #48	; 0x30
 800e2a2:	af06      	add	r7, sp, #24
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	607a      	str	r2, [r7, #4]
 800e2aa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	9303      	str	r3, [sp, #12]
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	9301      	str	r3, [sp, #4]
 800e2c0:	6a3b      	ldr	r3, [r7, #32]
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	68b9      	ldr	r1, [r7, #8]
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff ff53 	bl	800e176 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	22db      	movs	r2, #219	; 0xdb
 800e2d8:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800e2da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b08c      	sub	sp, #48	; 0x30
 800e2ea:	af06      	add	r7, sp, #24
 800e2ec:	60f8      	str	r0, [r7, #12]
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	607a      	str	r2, [r7, #4]
 800e2f2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	9304      	str	r3, [sp, #16]
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	9303      	str	r3, [sp, #12]
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	9302      	str	r3, [sp, #8]
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	68b9      	ldr	r1, [r7, #8]
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fbb9 	bl	800da8a <VL53L1_preset_mode_histogram_medium_range>
 800e318:	4603      	mov	r3, r0
 800e31a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e31c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d12c      	bne.n	800e37e <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	9304      	str	r3, [sp, #16]
 800e328:	2307      	movs	r3, #7
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	2307      	movs	r3, #7
 800e32e:	9302      	str	r3, [sp, #8]
 800e330:	2302      	movs	r3, #2
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	2308      	movs	r3, #8
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	2304      	movs	r3, #4
 800e33a:	2202      	movs	r2, #2
 800e33c:	2108      	movs	r1, #8
 800e33e:	2004      	movs	r0, #4
 800e340:	f00a f96c 	bl	801861c <VL53L1_init_zone_config_structure>
 800e344:	4603      	mov	r3, r0
 800e346:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	785b      	ldrb	r3, [r3, #1]
 800e34c:	3301      	adds	r3, #1
 800e34e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800e354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d108      	bne.n	800e36e <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800e35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35e:	3302      	adds	r3, #2
 800e360:	461a      	mov	r2, r3
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e366:	f003 f873 	bl	8011450 <VL53L1_set_histogram_multizone_initial_bin_config>
 800e36a:	4603      	mov	r3, r0
 800e36c:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	68b9      	ldr	r1, [r7, #8]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f8d0 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e37e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b08c      	sub	sp, #48	; 0x30
 800e38e:	af06      	add	r7, sp, #24
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	60b9      	str	r1, [r7, #8]
 800e394:	607a      	str	r2, [r7, #4]
 800e396:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e398:	2300      	movs	r3, #0
 800e39a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	9304      	str	r3, [sp, #16]
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	9302      	str	r3, [sp, #8]
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	68b9      	ldr	r1, [r7, #8]
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7ff fc8e 	bl	800dcd8 <VL53L1_preset_mode_histogram_short_range>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d12c      	bne.n	800e422 <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	9304      	str	r3, [sp, #16]
 800e3cc:	2307      	movs	r3, #7
 800e3ce:	9303      	str	r3, [sp, #12]
 800e3d0:	2307      	movs	r3, #7
 800e3d2:	9302      	str	r3, [sp, #8]
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	9301      	str	r3, [sp, #4]
 800e3d8:	2308      	movs	r3, #8
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	2304      	movs	r3, #4
 800e3de:	2202      	movs	r2, #2
 800e3e0:	2108      	movs	r1, #8
 800e3e2:	2004      	movs	r0, #4
 800e3e4:	f00a f91a 	bl	801861c <VL53L1_init_zone_config_structure>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	785b      	ldrb	r3, [r3, #1]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800e3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d108      	bne.n	800e412 <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800e400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e402:	3302      	adds	r3, #2
 800e404:	461a      	mov	r2, r3
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e40a:	f003 f821 	bl	8011450 <VL53L1_set_histogram_multizone_initial_bin_config>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	68b9      	ldr	r1, [r7, #8]
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f87e 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b08c      	sub	sp, #48	; 0x30
 800e432:	af06      	add	r7, sp, #24
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
 800e43a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e43c:	2300      	movs	r3, #0
 800e43e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	9304      	str	r3, [sp, #16]
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	9303      	str	r3, [sp, #12]
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	9302      	str	r3, [sp, #8]
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f7ff f9ee 	bl	800d83c <VL53L1_preset_mode_histogram_long_range>
 800e460:	4603      	mov	r3, r0
 800e462:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d12c      	bne.n	800e4c6 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800e46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46e:	9304      	str	r3, [sp, #16]
 800e470:	2307      	movs	r3, #7
 800e472:	9303      	str	r3, [sp, #12]
 800e474:	2307      	movs	r3, #7
 800e476:	9302      	str	r3, [sp, #8]
 800e478:	2302      	movs	r3, #2
 800e47a:	9301      	str	r3, [sp, #4]
 800e47c:	2308      	movs	r3, #8
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	2304      	movs	r3, #4
 800e482:	2202      	movs	r2, #2
 800e484:	2108      	movs	r1, #8
 800e486:	2004      	movs	r0, #4
 800e488:	f00a f8c8 	bl	801861c <VL53L1_init_zone_config_structure>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800e490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	3301      	adds	r3, #1
 800e496:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800e49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d108      	bne.n	800e4b6 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a6:	3302      	adds	r3, #2
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ae:	f002 ffcf 	bl	8011450 <VL53L1_set_histogram_multizone_initial_bin_config>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	68b9      	ldr	r1, [r7, #8]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f82c 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e4c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b08a      	sub	sp, #40	; 0x28
 800e4d6:	af04      	add	r7, sp, #16
 800e4d8:	60f8      	str	r0, [r7, #12]
 800e4da:	60b9      	str	r1, [r7, #8]
 800e4dc:	607a      	str	r2, [r7, #4]
 800e4de:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	9303      	str	r3, [sp, #12]
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	9302      	str	r3, [sp, #8]
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	6a3b      	ldr	r3, [r7, #32]
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f7fe fb9e 	bl	800cc3c <VL53L1_preset_mode_standard_ranging>
 800e500:	4603      	mov	r3, r0
 800e502:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800e504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d102      	bne.n	800e512 <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	2201      	movs	r2, #1
 800e510:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800e512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800e51e:	b480      	push	{r7}
 800e520:	b085      	sub	sp, #20
 800e522:	af00      	add	r7, sp, #0
 800e524:	60f8      	str	r0, [r7, #12]
 800e526:	60b9      	str	r1, [r7, #8]
 800e528:	607a      	str	r2, [r7, #4]
 800e52a:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	79db      	ldrb	r3, [r3, #7]
 800e560:	b29b      	uxth	r3, r3
				<< 8)
 800e562:	021b      	lsls	r3, r3, #8
 800e564:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	7a1b      	ldrb	r3, [r3, #8]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	4413      	add	r3, r2
 800e56e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	785b      	ldrb	r3, [r3, #1]
 800e5a8:	b29b      	uxth	r3, r3
				<< 8)
 800e5aa:	021b      	lsls	r3, r3, #8
 800e5ac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	789b      	ldrb	r3, [r3, #2]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	4413      	add	r3, r2
 800e5b6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	78db      	ldrb	r3, [r3, #3]
 800e5c0:	b29b      	uxth	r3, r3
				<< 8)
 800e5c2:	021b      	lsls	r3, r3, #8
 800e5c4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	791b      	ldrb	r3, [r3, #4]
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	4413      	add	r3, r2
 800e5ce:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800e5fc:	bf00      	nop
 800e5fe:	3714      	adds	r7, #20
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	79db      	ldrb	r3, [r3, #7]
 800e648:	b29b      	uxth	r3, r3
				<< 8)
 800e64a:	021b      	lsls	r3, r3, #8
 800e64c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	7a1b      	ldrb	r3, [r3, #8]
 800e652:	b29b      	uxth	r3, r3
 800e654:	4413      	add	r3, r2
 800e656:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	785b      	ldrb	r3, [r3, #1]
 800e688:	b29b      	uxth	r3, r3
				<< 8)
 800e68a:	021b      	lsls	r3, r3, #8
 800e68c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	789b      	ldrb	r3, [r3, #2]
 800e692:	b29b      	uxth	r3, r3
 800e694:	4413      	add	r3, r2
 800e696:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	78db      	ldrb	r3, [r3, #3]
 800e6a0:	b29b      	uxth	r3, r3
				<< 8)
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	791b      	ldrb	r3, [r3, #4]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08c      	sub	sp, #48	; 0x30
 800e6d4:	af06      	add	r7, sp, #24
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	9303      	str	r3, [sp, #12]
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	9302      	str	r3, [sp, #8]
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	9301      	str	r3, [sp, #4]
 800e6f2:	6a3b      	ldr	r3, [r7, #32]
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	68b9      	ldr	r1, [r7, #8]
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7fe fe64 	bl	800d3ca <VL53L1_preset_mode_histogram_ranging>
 800e702:	4603      	mov	r3, r0
 800e704:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800e706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff fefd 	bl	800e51e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800e730:	b480      	push	{r7}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3318      	adds	r3, #24
 800e73c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2230      	movs	r2, #48	; 0x30
 800e752:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800e75c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e75e:	bf00      	nop
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b085      	sub	sp, #20
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	3318      	adds	r3, #24
 800e77a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	332c      	adds	r3, #44	; 0x2c
 800e780:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	78fa      	ldrb	r2, [r7, #3]
 800e786:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2200      	movs	r2, #0
 800e78c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2202      	movs	r2, #2
 800e792:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2200      	movs	r2, #0
 800e798:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2200      	movs	r2, #0
 800e79e:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	78fa      	ldrb	r2, [r7, #3]
 800e7a4:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	735a      	strb	r2, [r3, #13]

}
 800e7be:	bf00      	nop
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
	...

0800e7cc <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3318      	adds	r3, #24
 800e7dc:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	332c      	adds	r3, #44	; 0x2c
 800e7e2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800e7ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d115      	bne.n	800e81e <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2203      	movs	r2, #3
 800e7f6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2202      	movs	r2, #2
 800e80e:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2200      	movs	r2, #0
 800e81a:	735a      	strb	r2, [r3, #13]
 800e81c:	e0be      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	7a1b      	ldrb	r3, [r3, #8]
 800e822:	2bff      	cmp	r3, #255	; 0xff
 800e824:	d103      	bne.n	800e82e <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2280      	movs	r2, #128	; 0x80
 800e82a:	721a      	strb	r2, [r3, #8]
 800e82c:	e005      	b.n	800e83a <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	7a1b      	ldrb	r3, [r3, #8]
 800e832:	3301      	adds	r3, #1
 800e834:	b2da      	uxtb	r2, r3
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	7a19      	ldrb	r1, [r3, #8]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f103 0209 	add.w	r2, r3, #9
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	330a      	adds	r3, #10
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f002 fdc2 	bl	80113d2 <VL53L1_update_internal_stream_counters>
 800e84e:	4603      	mov	r3, r0
 800e850:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	7adb      	ldrb	r3, [r3, #11]
 800e856:	f083 0302 	eor.w	r3, r3, #2
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	79db      	ldrb	r3, [r3, #7]
 800e864:	3b03      	subs	r3, #3
 800e866:	2b05      	cmp	r3, #5
 800e868:	f200 8082 	bhi.w	800e970 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800e86c:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800e86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e872:	bf00      	nop
 800e874:	0800e88d 	.word	0x0800e88d
 800e878:	0800e971 	.word	0x0800e971
 800e87c:	0800e971 	.word	0x0800e971
 800e880:	0800e8df 	.word	0x0800e8df
 800e884:	0800e915 	.word	0x0800e915
 800e888:	0800e93f 	.word	0x0800e93f

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800e892:	f003 0302 	and.w	r3, r3, #2
 800e896:	2b00      	cmp	r3, #0
 800e898:	dd03      	ble.n	800e8a2 <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2206      	movs	r2, #6
 800e89e:	71da      	strb	r2, [r3, #7]
 800e8a0:	e00d      	b.n	800e8be <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d303      	bcc.n	800e8b8 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2208      	movs	r2, #8
 800e8b4:	71da      	strb	r2, [r3, #7]
 800e8b6:	e002      	b.n	800e8be <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2207      	movs	r2, #7
 800e8bc:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	735a      	strb	r2, [r3, #13]

			break;
 800e8dc:	e05e      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800e900:	429a      	cmp	r2, r3
 800e902:	d303      	bcc.n	800e90c <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2208      	movs	r2, #8
 800e908:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800e90a:	e047      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2207      	movs	r2, #7
 800e910:	71da      	strb	r2, [r3, #7]
			break;
 800e912:	e043      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	7b5b      	ldrb	r3, [r3, #13]
 800e918:	3301      	adds	r3, #1
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d303      	bcc.n	800e936 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2208      	movs	r2, #8
 800e932:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800e934:	e032      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2207      	movs	r2, #7
 800e93a:	71da      	strb	r2, [r3, #7]
			break;
 800e93c:	e02e      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	7b1b      	ldrb	r3, [r3, #12]
 800e948:	f083 0301 	eor.w	r3, r3, #1
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d303      	bcc.n	800e968 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2208      	movs	r2, #8
 800e964:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800e966:	e019      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2207      	movs	r2, #7
 800e96c:	71da      	strb	r2, [r3, #7]
			break;
 800e96e:	e015      	b.n	800e99c <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2203      	movs	r2, #3
 800e974:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2200      	movs	r2, #0
 800e986:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2202      	movs	r2, #2
 800e98c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	735a      	strb	r2, [r3, #13]
			break;
 800e99a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800e99c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3718      	adds	r7, #24
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b08d      	sub	sp, #52	; 0x34
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3318      	adds	r3, #24
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	332c      	adds	r3, #44	; 0x2c
 800e9ca:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800e9d2:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e9da:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800e9e2:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ea02:	f003 031f 	and.w	r3, r3, #31
 800ea06:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	78db      	ldrb	r3, [r3, #3]
 800ea0c:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800ea14:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bf14      	ite	ne
 800ea1c:	2301      	movne	r3, #1
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	b2db      	uxtb	r3, r3
	histogram_mode =
 800ea22:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ea28:	111b      	asrs	r3, r3, #4
 800ea2a:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800ea2c:	f003 0302 	and.w	r3, r3, #2
 800ea30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800ea34:	7c7b      	ldrb	r3, [r7, #17]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d008      	beq.n	800ea4c <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ea40:	111b      	asrs	r3, r3, #4
 800ea42:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800ea44:	f003 0302 	and.w	r3, r3, #2
 800ea48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800ea4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800ea52:	f003 0320 	and.w	r3, r3, #32
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d04e      	beq.n	800eaf8 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	79db      	ldrb	r3, [r3, #7]
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d109      	bne.n	800ea76 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800ea62:	7c7b      	ldrb	r3, [r7, #17]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d14a      	bne.n	800eafe <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800ea68:	7cfb      	ldrb	r3, [r7, #19]
 800ea6a:	2b12      	cmp	r3, #18
 800ea6c:	d047      	beq.n	800eafe <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800ea6e:	23ef      	movs	r3, #239	; 0xef
 800ea70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ea74:	e043      	b.n	800eafe <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	7a1b      	ldrb	r3, [r3, #8]
 800ea7a:	7cba      	ldrb	r2, [r7, #18]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d002      	beq.n	800ea86 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800ea80:	23ee      	movs	r3, #238	; 0xee
 800ea82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	7adb      	ldrb	r3, [r3, #11]
 800ea8a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d002      	beq.n	800ea98 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800ea92:	23ed      	movs	r3, #237	; 0xed
 800ea94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	7b5b      	ldrb	r3, [r3, #13]
 800ea9c:	4619      	mov	r1, r3
		expected_stream_count =
 800ea9e:	697a      	ldr	r2, [r7, #20]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	440b      	add	r3, r1
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	4413      	add	r3, r2
 800eaaa:	3302      	adds	r3, #2
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800eab0:	6a3b      	ldr	r3, [r7, #32]
 800eab2:	7b5b      	ldrb	r3, [r3, #13]
 800eab4:	4619      	mov	r1, r3
		expected_gph_id =
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	460b      	mov	r3, r1
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	005b      	lsls	r3, r3, #1
 800eac0:	4413      	add	r3, r2
 800eac2:	3303      	adds	r3, #3
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800eac8:	7c3a      	ldrb	r2, [r7, #16]
 800eaca:	7cbb      	ldrb	r3, [r7, #18]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d00a      	beq.n	800eae6 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d102      	bne.n	800eae0 <VL53L1_check_ll_driver_rd_state+0x138>
 800eada:	7cbb      	ldrb	r3, [r7, #18]
 800eadc:	2bff      	cmp	r3, #255	; 0xff
 800eade:	d002      	beq.n	800eae6 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800eae0:	23ec      	movs	r3, #236	; 0xec
 800eae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800eae6:	7bfa      	ldrb	r2, [r7, #15]
 800eae8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d005      	beq.n	800eafc <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800eaf0:	23eb      	movs	r3, #235	; 0xeb
 800eaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eaf6:	e002      	b.n	800eafe <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800eaf8:	bf00      	nop
 800eafa:	e000      	b.n	800eafe <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800eafc:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800eafe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3734      	adds	r7, #52	; 0x34
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b088      	sub	sp, #32
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800eb16:	2300      	movs	r3, #0
 800eb18:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	3318      	adds	r3, #24
 800eb1e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800eb26:	3308      	adds	r3, #8
 800eb28:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	332c      	adds	r3, #44	; 0x2c
 800eb2e:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800eb36:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800eb3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d11b      	bne.n	800eb7e <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	2203      	movs	r2, #3
 800eb4a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	2200      	movs	r2, #0
 800eb56:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2202      	movs	r2, #2
 800eb62:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	2200      	movs	r2, #0
 800eb68:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	773b      	strb	r3, [r7, #28]
 800eb7c:	e0b1      	b.n	800ece2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	791b      	ldrb	r3, [r3, #4]
 800eb82:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	799b      	ldrb	r3, [r3, #6]
 800eb88:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	785b      	ldrb	r3, [r3, #1]
 800eb8e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	785b      	ldrb	r3, [r3, #1]
 800eb94:	2bff      	cmp	r3, #255	; 0xff
 800eb96:	d103      	bne.n	800eba0 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	2280      	movs	r2, #128	; 0x80
 800eb9c:	705a      	strb	r2, [r3, #1]
 800eb9e:	e005      	b.n	800ebac <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	785b      	ldrb	r3, [r3, #1]
 800eba4:	3301      	adds	r3, #1
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	7859      	ldrb	r1, [r3, #1]
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	1c9a      	adds	r2, r3, #2
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	3303      	adds	r3, #3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f002 fc0a 	bl	80113d2 <VL53L1_update_internal_stream_counters>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	791b      	ldrb	r3, [r3, #4]
 800ebc6:	f083 0302 	eor.w	r3, r3, #2
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b05      	cmp	r3, #5
 800ebd6:	d053      	beq.n	800ec80 <VL53L1_update_ll_driver_cfg_state+0x172>
 800ebd8:	2b05      	cmp	r3, #5
 800ebda:	dc69      	bgt.n	800ecb0 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800ebdc:	2b03      	cmp	r3, #3
 800ebde:	d002      	beq.n	800ebe6 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800ebe0:	2b04      	cmp	r3, #4
 800ebe2:	d02d      	beq.n	800ec40 <VL53L1_update_ll_driver_cfg_state+0x132>
 800ebe4:	e064      	b.n	800ecb0 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d909      	bls.n	800ec0e <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	795b      	ldrb	r3, [r3, #5]
 800ec04:	f083 0301 	eor.w	r3, r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	2201      	movs	r2, #1
 800ec12:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2201      	movs	r2, #1
 800ec22:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	2200      	movs	r2, #0
 800ec28:	70da      	strb	r2, [r3, #3]
 800ec2a:	e005      	b.n	800ec38 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2201      	movs	r2, #1
 800ec36:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	2204      	movs	r2, #4
 800ec3c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800ec3e:	e050      	b.n	800ece2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	799b      	ldrb	r3, [r3, #6]
 800ec44:	3301      	adds	r3, #1
 800ec46:	b2da      	uxtb	r2, r3
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d940      	bls.n	800ecdc <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	795b      	ldrb	r3, [r3, #5]
 800ec64:	f083 0301 	eor.w	r3, r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d031      	beq.n	800ecdc <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	2205      	movs	r2, #5
 800ec7c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800ec7e:	e02d      	b.n	800ecdc <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	799b      	ldrb	r3, [r3, #6]
 800ec84:	3301      	adds	r3, #1
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d922      	bls.n	800ece0 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	795b      	ldrb	r3, [r3, #5]
 800eca4:	f083 0301 	eor.w	r3, r3, #1
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ecae:	e017      	b.n	800ece0 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	2203      	movs	r2, #3
 800ecb4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	2202      	movs	r2, #2
 800eccc:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	719a      	strb	r2, [r3, #6]
			break;
 800ecda:	e002      	b.n	800ece2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ecdc:	bf00      	nop
 800ecde:	e000      	b.n	800ece2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ece0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d11d      	bne.n	800ed28 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ecec:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800ecee:	7f3b      	ldrb	r3, [r7, #28]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	b2d8      	uxtb	r0, r3
 800ecf4:	68f9      	ldr	r1, [r7, #12]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	005b      	lsls	r3, r3, #1
 800ecfe:	440b      	add	r3, r1
 800ed00:	3302      	adds	r3, #2
 800ed02:	4602      	mov	r2, r0
 800ed04:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	7b5b      	ldrb	r3, [r3, #13]
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	7f7b      	ldrb	r3, [r7, #29]
 800ed0e:	f083 0302 	eor.w	r3, r3, #2
 800ed12:	b2d8      	uxtb	r0, r3
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	460b      	mov	r3, r1
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	440b      	add	r3, r1
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4413      	add	r3, r2
 800ed20:	3303      	adds	r3, #3
 800ed22:	4602      	mov	r2, r0
 800ed24:	701a      	strb	r2, [r3, #0]
 800ed26:	e013      	b.n	800ed50 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ed28:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ed2a:	68f9      	ldr	r1, [r7, #12]
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	440b      	add	r3, r1
 800ed36:	3302      	adds	r3, #2
 800ed38:	7f3a      	ldrb	r2, [r7, #28]
 800ed3a:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800ed3c:	7fba      	ldrb	r2, [r7, #30]
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	4613      	mov	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4413      	add	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	440b      	add	r3, r1
 800ed4a:	3303      	adds	r3, #3
 800ed4c:	7f7a      	ldrb	r2, [r7, #29]
 800ed4e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800ed50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3720      	adds	r7, #32
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	7c1a      	ldrb	r2, [r3, #16]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	3301      	adds	r3, #1
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	7c52      	ldrb	r2, [r2, #17]
 800ed76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	3302      	adds	r3, #2
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	7c92      	ldrb	r2, [r2, #18]
 800ed80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	3303      	adds	r3, #3
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	7cd2      	ldrb	r2, [r2, #19]
 800ed8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	7d12      	ldrb	r2, [r2, #20]
 800ed94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	3305      	adds	r3, #5
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	7d52      	ldrb	r2, [r2, #21]
 800ed9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	3306      	adds	r3, #6
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	7d92      	ldrb	r2, [r2, #22]
 800eda8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	3307      	adds	r3, #7
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	7dd2      	ldrb	r2, [r2, #23]
 800edb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	3308      	adds	r3, #8
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	7e12      	ldrb	r2, [r2, #24]
 800edbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	3309      	adds	r3, #9
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	7e52      	ldrb	r2, [r2, #25]
 800edc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	330a      	adds	r3, #10
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	7e92      	ldrb	r2, [r2, #26]
 800edd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	330b      	adds	r3, #11
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	7ed2      	ldrb	r2, [r2, #27]
 800edda:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	330c      	adds	r3, #12
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	7f12      	ldrb	r2, [r2, #28]
 800ede4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	330d      	adds	r3, #13
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	7f52      	ldrb	r2, [r2, #29]
 800edee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	330e      	adds	r3, #14
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	7f92      	ldrb	r2, [r2, #30]
 800edf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	330f      	adds	r3, #15
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	7fd2      	ldrb	r2, [r2, #31]
 800ee02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	3310      	adds	r3, #16
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ee0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	3311      	adds	r3, #17
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ee1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	3312      	adds	r3, #18
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ee26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	3313      	adds	r3, #19
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ee32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3314      	adds	r3, #20
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ee3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	3315      	adds	r3, #21
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ee4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	3316      	adds	r3, #22
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ee56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	3317      	adds	r3, #23
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ee62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	3318      	adds	r3, #24
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ee6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	3319      	adds	r3, #25
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ee7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	331a      	adds	r3, #26
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ee86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	331b      	adds	r3, #27
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ee92:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	331c      	adds	r3, #28
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ee9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	331d      	adds	r3, #29
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800eeaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	331e      	adds	r3, #30
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800eeb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	331f      	adds	r3, #31
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800eec2:	701a      	strb	r2, [r3, #0]
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	22ff      	movs	r2, #255	; 0xff
 800eedc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	22ff      	movs	r2, #255	; 0xff
 800eee2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	22ff      	movs	r2, #255	; 0xff
 800eee8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	22ff      	movs	r2, #255	; 0xff
 800eeee:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eefe:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef06:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef0e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef16:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef1e:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef26:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef2e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef36:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef3e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef46:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef4e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef56:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef5e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef66:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef76:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef7e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef86:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	22ff      	movs	r2, #255	; 0xff
 800ef8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	6039      	str	r1, [r7, #0]
 800efa6:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2210      	movs	r2, #16
 800efb0:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	79fa      	ldrb	r2, [r7, #7]
 800efb6:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800efb8:	2300      	movs	r3, #0
 800efba:	73fb      	strb	r3, [r7, #15]
 800efbc:	e017      	b.n	800efee <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800efbe:	7bfa      	ldrb	r2, [r7, #15]
 800efc0:	4613      	mov	r3, r2
 800efc2:	011b      	lsls	r3, r3, #4
 800efc4:	4413      	add	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	4413      	add	r3, r2
 800efcc:	3304      	adds	r3, #4
 800efce:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2203      	movs	r2, #3
 800efd4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	2203      	movs	r2, #3
 800efda:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	2204      	movs	r2, #4
 800efe0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2200      	movs	r2, #0
 800efe6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	3301      	adds	r3, #1
 800efec:	73fb      	strb	r3, [r7, #15]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	7bfa      	ldrb	r2, [r7, #15]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d3e2      	bcc.n	800efbe <V53L1_init_zone_results_structure+0x22>
	}
}
 800eff8:	bf00      	nop
 800effa:	bf00      	nop
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800f006:	b480      	push	{r7}
 800f008:	b087      	sub	sp, #28
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f014:	3308      	adds	r3, #8
 800f016:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800f01c:	2310      	movs	r3, #16
 800f01e:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f026:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800f028:	2300      	movs	r3, #0
 800f02a:	75fb      	strb	r3, [r7, #23]
 800f02c:	e016      	b.n	800f05c <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800f02e:	7dfa      	ldrb	r2, [r7, #23]
 800f030:	68b9      	ldr	r1, [r7, #8]
 800f032:	4613      	mov	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	4413      	add	r3, r2
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	440b      	add	r3, r1
 800f03c:	3304      	adds	r3, #4
 800f03e:	2201      	movs	r2, #1
 800f040:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800f042:	7dfa      	ldrb	r2, [r7, #23]
 800f044:	68b9      	ldr	r1, [r7, #8]
 800f046:	4613      	mov	r3, r2
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	4413      	add	r3, r2
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	440b      	add	r3, r1
 800f050:	3306      	adds	r3, #6
 800f052:	2200      	movs	r2, #0
 800f054:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	3301      	adds	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
 800f05c:	7dfa      	ldrb	r2, [r7, #23]
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
 800f060:	429a      	cmp	r2, r3
 800f062:	d3e4      	bcc.n	800f02e <V53L1_init_zone_dss_configs+0x28>
	}
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800f072:	b490      	push	{r4, r7}
 800f074:	b082      	sub	sp, #8
 800f076:	af00      	add	r7, sp, #0
 800f078:	4604      	mov	r4, r0
 800f07a:	4608      	mov	r0, r1
 800f07c:	4611      	mov	r1, r2
 800f07e:	461a      	mov	r2, r3
 800f080:	4623      	mov	r3, r4
 800f082:	71fb      	strb	r3, [r7, #7]
 800f084:	4603      	mov	r3, r0
 800f086:	71bb      	strb	r3, [r7, #6]
 800f088:	460b      	mov	r3, r1
 800f08a:	717b      	strb	r3, [r7, #5]
 800f08c:	4613      	mov	r3, r2
 800f08e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800f090:	79bb      	ldrb	r3, [r7, #6]
 800f092:	011b      	lsls	r3, r3, #4
 800f094:	b2da      	uxtb	r2, r3
 800f096:	79fb      	ldrb	r3, [r7, #7]
 800f098:	4413      	add	r3, r2
 800f09a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800f09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800f0a0:	793b      	ldrb	r3, [r7, #4]
 800f0a2:	011b      	lsls	r3, r3, #4
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	797b      	ldrb	r3, [r7, #5]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ae:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800f0b0:	7d3b      	ldrb	r3, [r7, #20]
 800f0b2:	011b      	lsls	r3, r3, #4
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	7c3b      	ldrb	r3, [r7, #16]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800f0c0:	7f3b      	ldrb	r3, [r7, #28]
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	7e3b      	ldrb	r3, [r7, #24]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ce:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800f0d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f0d4:	011b      	lsls	r3, r3, #4
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0dc:	4413      	add	r3, r2
 800f0de:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e2:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800f0e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f0e8:	011b      	lsls	r3, r3, #4
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f0f0:	4413      	add	r3, r2
 800f0f2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fa:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fe:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800f100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f102:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800f10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800f118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f11e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800f120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f124:	011b      	lsls	r3, r3, #4
 800f126:	b2da      	uxtb	r2, r3
 800f128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f12c:	4413      	add	r3, r2
 800f12e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800f134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f136:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f13a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	2200      	movs	r2, #0
 800f140:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f144:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f178:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f180:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	2200      	movs	r2, #0
 800f186:	701a      	strb	r2, [r3, #0]

}
 800f188:	bf00      	nop
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bc90      	pop	{r4, r7}
 800f190:	4770      	bx	lr

0800f192 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800f192:	b490      	push	{r4, r7}
 800f194:	b082      	sub	sp, #8
 800f196:	af00      	add	r7, sp, #0
 800f198:	4604      	mov	r4, r0
 800f19a:	4608      	mov	r0, r1
 800f19c:	4611      	mov	r1, r2
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4623      	mov	r3, r4
 800f1a2:	71fb      	strb	r3, [r7, #7]
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	71bb      	strb	r3, [r7, #6]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	717b      	strb	r3, [r7, #5]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800f1b0:	79bb      	ldrb	r3, [r7, #6]
 800f1b2:	011b      	lsls	r3, r3, #4
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800f1c0:	793b      	ldrb	r3, [r7, #4]
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	797b      	ldrb	r3, [r7, #5]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ce:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800f1d0:	7d3b      	ldrb	r3, [r7, #20]
 800f1d2:	011b      	lsls	r3, r3, #4
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	7c3b      	ldrb	r3, [r7, #16]
 800f1d8:	4413      	add	r3, r2
 800f1da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1de:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	789a      	ldrb	r2, [r3, #2]
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	78da      	ldrb	r2, [r3, #3]
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fa:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800f200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f202:	789a      	ldrb	r2, [r3, #2]
 800f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f206:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	78da      	ldrb	r2, [r3, #3]
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	791a      	ldrb	r2, [r3, #4]
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f21e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800f220:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f224:	011b      	lsls	r3, r3, #4
 800f226:	b2da      	uxtb	r2, r3
 800f228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f22c:	4413      	add	r3, r2
 800f22e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f23a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	2200      	movs	r2, #0
 800f240:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800f242:	7f3b      	ldrb	r3, [r7, #28]
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	b2da      	uxtb	r2, r3
 800f248:	7e3b      	ldrb	r3, [r7, #24]
 800f24a:	4413      	add	r3, r2
 800f24c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800f252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f256:	011b      	lsls	r3, r3, #4
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f25e:	4413      	add	r3, r2
 800f260:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800f262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f264:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800f266:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f272:	4413      	add	r3, r2
 800f274:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	7bda      	ldrb	r2, [r3, #15]
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	7c1a      	ldrb	r2, [r3, #16]
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	7c5a      	ldrb	r2, [r3, #17]
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f298:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2a0:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	701a      	strb	r2, [r3, #0]
}
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bc90      	pop	{r4, r7}
 800f2b0:	4770      	bx	lr

0800f2b2 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	b087      	sub	sp, #28
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	607a      	str	r2, [r7, #4]
 800f2be:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	220c      	movs	r2, #12
 800f2da:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800f2dc:	897b      	ldrh	r3, [r7, #10]
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800f312:	2300      	movs	r3, #0
 800f314:	82fb      	strh	r3, [r7, #22]
 800f316:	e015      	b.n	800f344 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800f318:	8afa      	ldrh	r2, [r7, #22]
 800f31a:	897b      	ldrh	r3, [r7, #10]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d207      	bcs.n	800f330 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800f320:	8afb      	ldrh	r3, [r7, #22]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	3302      	adds	r3, #2
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	605a      	str	r2, [r3, #4]
 800f32e:	e006      	b.n	800f33e <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800f330:	8afb      	ldrh	r3, [r7, #22]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	3302      	adds	r3, #2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	2200      	movs	r2, #0
 800f33c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800f33e:	8afb      	ldrh	r3, [r7, #22]
 800f340:	3301      	adds	r3, #1
 800f342:	82fb      	strh	r3, [r7, #22]
 800f344:	8afb      	ldrh	r3, [r7, #22]
 800f346:	2b0b      	cmp	r3, #11
 800f348:	d9e6      	bls.n	800f318 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800f34a:	bf00      	nop
 800f34c:	bf00      	nop
 800f34e:	371c      	adds	r7, #28
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	603a      	str	r2, [r7, #0]
 800f362:	80fb      	strh	r3, [r7, #6]
 800f364:	460b      	mov	r3, r1
 800f366:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800f370:	88fb      	ldrh	r3, [r7, #6]
 800f372:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800f374:	2300      	movs	r3, #0
 800f376:	81fb      	strh	r3, [r7, #14]
 800f378:	e00e      	b.n	800f398 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800f37a:	88ba      	ldrh	r2, [r7, #4]
 800f37c:	89fb      	ldrh	r3, [r7, #14]
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	3b01      	subs	r3, #1
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	4413      	add	r3, r2
 800f386:	89ba      	ldrh	r2, [r7, #12]
 800f388:	b2d2      	uxtb	r2, r2
 800f38a:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800f38c:	89bb      	ldrh	r3, [r7, #12]
 800f38e:	0a1b      	lsrs	r3, r3, #8
 800f390:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800f392:	89fb      	ldrh	r3, [r7, #14]
 800f394:	3301      	adds	r3, #1
 800f396:	81fb      	strh	r3, [r7, #14]
 800f398:	89fa      	ldrh	r2, [r7, #14]
 800f39a:	88bb      	ldrh	r3, [r7, #4]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d3ec      	bcc.n	800f37a <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f3ae:	b480      	push	{r7}
 800f3b0:	b085      	sub	sp, #20
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	6039      	str	r1, [r7, #0]
 800f3b8:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800f3be:	e00a      	b.n	800f3d6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800f3c0:	89fb      	ldrh	r3, [r7, #14]
 800f3c2:	021b      	lsls	r3, r3, #8
 800f3c4:	b21a      	sxth	r2, r3
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	1c59      	adds	r1, r3, #1
 800f3ca:	6039      	str	r1, [r7, #0]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	b21b      	sxth	r3, r3
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	b21b      	sxth	r3, r3
 800f3d4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	1e5a      	subs	r2, r3, #1
 800f3da:	80fa      	strh	r2, [r7, #6]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1ef      	bne.n	800f3c0 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800f3e0:	89fb      	ldrh	r3, [r7, #14]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b085      	sub	sp, #20
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	603a      	str	r2, [r7, #0]
 800f3f8:	80fb      	strh	r3, [r7, #6]
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800f406:	88fb      	ldrh	r3, [r7, #6]
 800f408:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800f40a:	2300      	movs	r3, #0
 800f40c:	81fb      	strh	r3, [r7, #14]
 800f40e:	e00f      	b.n	800f430 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800f410:	88ba      	ldrh	r2, [r7, #4]
 800f412:	89fb      	ldrh	r3, [r7, #14]
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	3b01      	subs	r3, #1
 800f418:	683a      	ldr	r2, [r7, #0]
 800f41a:	4413      	add	r3, r2
 800f41c:	89ba      	ldrh	r2, [r7, #12]
 800f41e:	b2d2      	uxtb	r2, r2
 800f420:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800f422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f426:	121b      	asrs	r3, r3, #8
 800f428:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800f42a:	89fb      	ldrh	r3, [r7, #14]
 800f42c:	3301      	adds	r3, #1
 800f42e:	81fb      	strh	r3, [r7, #14]
 800f430:	89fa      	ldrh	r2, [r7, #14]
 800f432:	88bb      	ldrh	r3, [r7, #4]
 800f434:	429a      	cmp	r2, r3
 800f436:	d3eb      	bcc.n	800f410 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800f438:	bf00      	nop
 800f43a:	bf00      	nop
 800f43c:	3714      	adds	r7, #20
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f446:	b480      	push	{r7}
 800f448:	b085      	sub	sp, #20
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	4603      	mov	r3, r0
 800f44e:	6039      	str	r1, [r7, #0]
 800f450:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800f452:	2300      	movs	r3, #0
 800f454:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	b25b      	sxtb	r3, r3
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	da0e      	bge.n	800f47e <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800f460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f464:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800f466:	e00a      	b.n	800f47e <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800f468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f46c:	021b      	lsls	r3, r3, #8
 800f46e:	b21a      	sxth	r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	1c59      	adds	r1, r3, #1
 800f474:	6039      	str	r1, [r7, #0]
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	b21b      	sxth	r3, r3
 800f47a:	4313      	orrs	r3, r2
 800f47c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800f47e:	88fb      	ldrh	r3, [r7, #6]
 800f480:	1e5a      	subs	r2, r3, #1
 800f482:	80fa      	strh	r2, [r7, #6]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1ef      	bne.n	800f468 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800f488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3714      	adds	r7, #20
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	82fb      	strh	r3, [r7, #22]
 800f4b6:	e00e      	b.n	800f4d6 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800f4b8:	897a      	ldrh	r2, [r7, #10]
 800f4ba:	8afb      	ldrh	r3, [r7, #22]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	0a1b      	lsrs	r3, r3, #8
 800f4ce:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800f4d0:	8afb      	ldrh	r3, [r7, #22]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	82fb      	strh	r3, [r7, #22]
 800f4d6:	8afa      	ldrh	r2, [r7, #22]
 800f4d8:	897b      	ldrh	r3, [r7, #10]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d3ec      	bcc.n	800f4b8 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	371c      	adds	r7, #28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	6039      	str	r1, [r7, #0]
 800f4f6:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800f4fc:	e007      	b.n	800f50e <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	021a      	lsls	r2, r3, #8
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	1c59      	adds	r1, r3, #1
 800f506:	6039      	str	r1, [r7, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800f50e:	88fb      	ldrh	r3, [r7, #6]
 800f510:	1e5a      	subs	r2, r3, #1
 800f512:	80fa      	strh	r2, [r7, #6]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1f2      	bne.n	800f4fe <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800f518:	68fb      	ldr	r3, [r7, #12]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f526:	b480      	push	{r7}
 800f528:	b085      	sub	sp, #20
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	4603      	mov	r3, r0
 800f52e:	6039      	str	r1, [r7, #0]
 800f530:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800f532:	2300      	movs	r3, #0
 800f534:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b25b      	sxtb	r3, r3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	da0b      	bge.n	800f558 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800f540:	f04f 33ff 	mov.w	r3, #4294967295
 800f544:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800f546:	e007      	b.n	800f558 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	021a      	lsls	r2, r3, #8
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	1c59      	adds	r1, r3, #1
 800f550:	6039      	str	r1, [r7, #0]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	4313      	orrs	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	1e5a      	subs	r2, r3, #1
 800f55c:	80fa      	strh	r2, [r7, #6]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1f2      	bne.n	800f548 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800f562:	68fb      	ldr	r3, [r7, #12]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f57c:	2300      	movs	r3, #0
 800f57e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800f580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d107      	bne.n	800f598 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800f588:	78fb      	ldrb	r3, [r7, #3]
 800f58a:	461a      	mov	r2, r3
 800f58c:	2127      	movs	r1, #39	; 0x27
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f009 f9ce 	bl	8018930 <VL53L1_WrByte>
 800f594:	4603      	mov	r3, r0
 800f596:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800f598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3318      	adds	r3, #24
 800f5b8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	78fa      	ldrb	r2, [r7, #3]
 800f5be:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	2185      	movs	r1, #133	; 0x85
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f009 f9af 	bl	8018930 <VL53L1_WrByte>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800f5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b084      	sub	sp, #16
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ffd7 	bl	800f5a4 <VL53L1_set_firmware_enable_register>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f60e:	2300      	movs	r3, #0
 800f610:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800f612:	2100      	movs	r1, #0
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff ffc5 	bl	800f5a4 <VL53L1_set_firmware_enable_register>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b084      	sub	sp, #16
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	460b      	mov	r3, r1
 800f634:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f636:	2300      	movs	r3, #0
 800f638:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3318      	adds	r3, #24
 800f63e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	78fa      	ldrb	r2, [r7, #3]
 800f644:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800f64e:	461a      	mov	r2, r3
 800f650:	2183      	movs	r1, #131	; 0x83
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f009 f96c 	bl	8018930 <VL53L1_WrByte>
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800f65c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f670:	2300      	movs	r3, #0
 800f672:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800f674:	2101      	movs	r1, #1
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7ff ffd7 	bl	800f62a <VL53L1_set_powerforce_register>
 800f67c:	4603      	mov	r3, r0
 800f67e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f694:	2300      	movs	r3, #0
 800f696:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800f698:	2100      	movs	r1, #0
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7ff ffc5 	bl	800f62a <VL53L1_set_powerforce_register>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3318      	adds	r3, #24
 800f6c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	2186      	movs	r1, #134	; 0x86
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f009 f92b 	bl	8018930 <VL53L1_WrByte>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800f6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b086      	sub	sp, #24
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	460a      	mov	r2, r1
 800f6f4:	80fb      	strh	r3, [r7, #6]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800f706:	88fb      	ldrh	r3, [r7, #6]
 800f708:	4618      	mov	r0, r3
 800f70a:	f002 ffeb 	bl	80126e4 <VL53L1_calc_pll_period_us>
 800f70e:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800f710:	797b      	ldrb	r3, [r7, #5]
 800f712:	4618      	mov	r0, r3
 800f714:	f003 fbd6 	bl	8012ec4 <VL53L1_decode_vcsel_period>
 800f718:	4603      	mov	r3, r0
 800f71a:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800f71c:	697a      	ldr	r2, [r7, #20]
 800f71e:	4613      	mov	r3, r2
 800f720:	00db      	lsls	r3, r3, #3
 800f722:	4413      	add	r3, r2
 800f724:	021b      	lsls	r3, r3, #8
 800f726:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	099b      	lsrs	r3, r3, #6
 800f72c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800f72e:	7cfa      	ldrb	r2, [r7, #19]
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	fb02 f303 	mul.w	r3, r2, r3
 800f736:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	099b      	lsrs	r3, r3, #6
 800f73c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800f73e:	68fb      	ldr	r3, [r7, #12]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800f748:	b480      	push	{r7}
 800f74a:	b089      	sub	sp, #36	; 0x24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	4608      	mov	r0, r1
 800f752:	4611      	mov	r1, r2
 800f754:	461a      	mov	r2, r3
 800f756:	4603      	mov	r3, r0
 800f758:	817b      	strh	r3, [r7, #10]
 800f75a:	460b      	mov	r3, r1
 800f75c:	813b      	strh	r3, [r7, #8]
 800f75e:	4613      	mov	r3, r2
 800f760:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800f76e:	2300      	movs	r3, #0
 800f770:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	4a23      	ldr	r2, [pc, #140]	; (800f808 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f77c:	fb82 1203 	smull	r1, r2, r2, r3
 800f780:	1192      	asrs	r2, r2, #6
 800f782:	17db      	asrs	r3, r3, #31
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800f788:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	da03      	bge.n	800f798 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800f790:	897b      	ldrh	r3, [r7, #10]
 800f792:	425b      	negs	r3, r3
 800f794:	b29b      	uxth	r3, r3
 800f796:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800f798:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	da03      	bge.n	800f7a8 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800f7a0:	893b      	ldrh	r3, [r7, #8]
 800f7a2:	425b      	negs	r3, r3
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800f7a8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f7ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	015b      	lsls	r3, r3, #5
 800f7b4:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	4a13      	ldr	r2, [pc, #76]	; (800f808 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f7ba:	fb82 1203 	smull	r1, r2, r2, r3
 800f7be:	1192      	asrs	r2, r2, #6
 800f7c0:	17db      	asrs	r3, r3, #31
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800f7c6:	697a      	ldr	r2, [r7, #20]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800f7ce:	79fa      	ldrb	r2, [r7, #7]
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	fb02 f303 	mul.w	r3, r2, r3
 800f7d6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	3310      	adds	r3, #16
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	da00      	bge.n	800f7e2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800f7e0:	331f      	adds	r3, #31
 800f7e2:	115b      	asrs	r3, r3, #5
 800f7e4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7ec:	db03      	blt.n	800f7f6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800f7ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7f2:	83fb      	strh	r3, [r7, #30]
 800f7f4:	e001      	b.n	800f7fa <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800f7fa:	8bfb      	ldrh	r3, [r7, #30]
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3724      	adds	r7, #36	; 0x24
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	10624dd3 	.word	0x10624dd3

0800f80c <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800f820:	2300      	movs	r3, #0
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	e008      	b.n	800f838 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	031a      	lsls	r2, r3, #12
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	085b      	lsrs	r3, r3, #1
 800f82e:	441a      	add	r2, r3
		timeout_mclks =
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	fbb2 f3f3 	udiv	r3, r2, r3
 800f836:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800f838:	68fb      	ldr	r3, [r7, #12]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800f858:	6839      	ldr	r1, [r7, #0]
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7ff ffd6 	bl	800f80c <VL53L1_calc_timeout_mclks>
 800f860:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f000 f887 	bl	800f976 <VL53L1_encode_timeout>
 800f868:	4603      	mov	r3, r0
 800f86a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800f86c:	897b      	ldrh	r3, [r7, #10]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800f876:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800f882:	2100      	movs	r1, #0
 800f884:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800f886:	f04f 0000 	mov.w	r0, #0
 800f88a:	f04f 0100 	mov.w	r1, #0
 800f88e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	2000      	movs	r0, #0
 800f896:	4688      	mov	r8, r1
 800f898:	4681      	mov	r9, r0
 800f89a:	6839      	ldr	r1, [r7, #0]
 800f89c:	2000      	movs	r0, #0
 800f89e:	460c      	mov	r4, r1
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	fb04 f009 	mul.w	r0, r4, r9
 800f8a6:	fb08 f105 	mul.w	r1, r8, r5
 800f8aa:	4401      	add	r1, r0
 800f8ac:	fba8 2304 	umull	r2, r3, r8, r4
 800f8b0:	4419      	add	r1, r3
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f8b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800f8bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8c0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800f8c4:	f143 0b00 	adc.w	fp, r3, #0
 800f8c8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800f8cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f8d0:	f04f 0200 	mov.w	r2, #0
 800f8d4:	f04f 0300 	mov.w	r3, #0
 800f8d8:	0b02      	lsrs	r2, r0, #12
 800f8da:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800f8de:	0b0b      	lsrs	r3, r1, #12
 800f8e0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800f8e8:	697b      	ldr	r3, [r7, #20]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f8f4:	4770      	bx	lr
	...

0800f8f8 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800f904:	2300      	movs	r3, #0
 800f906:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800f90c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800f910:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800f912:	4413      	add	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	da02      	bge.n	800f922 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800f91c:	2300      	movs	r3, #0
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e005      	b.n	800f92e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f928:	db01      	blt.n	800f92e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800f92a:	4b05      	ldr	r3, [pc, #20]	; (800f940 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800f92c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800f932:	68bb      	ldr	r3, [r7, #8]

}
 800f934:	4618      	mov	r0, r3
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	0003ffff 	.word	0x0003ffff

0800f944 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	6039      	str	r1, [r7, #0]
 800f94e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800f958:	88fb      	ldrh	r3, [r7, #6]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 f837 	bl	800f9ce <VL53L1_decode_timeout>
 800f960:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800f962:	6839      	ldr	r1, [r7, #0]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f7ff ff86 	bl	800f876 <VL53L1_calc_timeout_us>
 800f96a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800f96c:	68bb      	ldr	r3, [r7, #8]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800f976:	b480      	push	{r7}
 800f978:	b087      	sub	sp, #28
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d017      	beq.n	800f9c0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3b01      	subs	r3, #1
 800f994:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f996:	e005      	b.n	800f9a4 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	085b      	lsrs	r3, r3, #1
 800f99c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800f99e:	89fb      	ldrh	r3, [r7, #14]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1f4      	bne.n	800f998 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800f9ae:	89fb      	ldrh	r3, [r7, #14]
 800f9b0:	021b      	lsls	r3, r3, #8
 800f9b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800f9bc:	4413      	add	r3, r2
 800f9be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800f9c0:	8afb      	ldrh	r3, [r7, #22]
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	371c      	adds	r7, #28
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	b085      	sub	sp, #20
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f9dc:	88fb      	ldrh	r3, [r7, #6]
 800f9de:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800f9e0:	88fa      	ldrh	r2, [r7, #6]
 800f9e2:	0a12      	lsrs	r2, r2, #8
 800f9e4:	b292      	uxth	r2, r2
 800f9e6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b088      	sub	sp, #32
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
 800fa06:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800fa18:	887b      	ldrh	r3, [r7, #2]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d102      	bne.n	800fa24 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800fa1e:	23f1      	movs	r3, #241	; 0xf1
 800fa20:	77fb      	strb	r3, [r7, #31]
 800fa22:	e05d      	b.n	800fae0 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	799a      	ldrb	r2, [r3, #6]
 800fa28:	887b      	ldrh	r3, [r7, #2]
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff fe5c 	bl	800f6ea <VL53L1_calc_macro_period_us>
 800fa32:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800fa34:	6979      	ldr	r1, [r7, #20]
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f7ff fee8 	bl	800f80c <VL53L1_calc_timeout_mclks>
 800fa3c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2bff      	cmp	r3, #255	; 0xff
 800fa42:	d901      	bls.n	800fa48 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800fa44:	23ff      	movs	r3, #255	; 0xff
 800fa46:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800fa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800fa50:	6979      	ldr	r1, [r7, #20]
 800fa52:	68b8      	ldr	r0, [r7, #8]
 800fa54:	f7ff fef7 	bl	800f846 <VL53L1_calc_encoded_timeout>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800fa5c:	8a7b      	ldrh	r3, [r7, #18]
 800fa5e:	0a1b      	lsrs	r3, r3, #8
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800fa68:	8a7b      	ldrh	r3, [r7, #18]
 800fa6a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800fa70:	6979      	ldr	r1, [r7, #20]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7ff fee7 	bl	800f846 <VL53L1_calc_encoded_timeout>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800fa7c:	8a7b      	ldrh	r3, [r7, #18]
 800fa7e:	0a1b      	lsrs	r3, r3, #8
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800fa88:	8a7b      	ldrh	r3, [r7, #18]
 800fa8a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	7a5a      	ldrb	r2, [r3, #9]
 800fa94:	887b      	ldrh	r3, [r7, #2]
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff fe26 	bl	800f6ea <VL53L1_calc_macro_period_us>
 800fa9e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800faa0:	6979      	ldr	r1, [r7, #20]
 800faa2:	68b8      	ldr	r0, [r7, #8]
 800faa4:	f7ff fecf 	bl	800f846 <VL53L1_calc_encoded_timeout>
 800faa8:	4603      	mov	r3, r0
 800faaa:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800faac:	8a7b      	ldrh	r3, [r7, #18]
 800faae:	0a1b      	lsrs	r3, r3, #8
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800fab8:	8a7b      	ldrh	r3, [r7, #18]
 800faba:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800fac0:	6979      	ldr	r1, [r7, #20]
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff febf 	bl	800f846 <VL53L1_calc_encoded_timeout>
 800fac8:	4603      	mov	r3, r0
 800faca:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800facc:	8a7b      	ldrh	r3, [r7, #18]
 800face:	0a1b      	lsrs	r3, r3, #8
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800fad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800fad8:	8a7b      	ldrh	r3, [r7, #18]
 800fada:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800fadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fade:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800fae0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3720      	adds	r7, #32
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800faec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800faf0:	b09e      	sub	sp, #120	; 0x78
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6578      	str	r0, [r7, #84]	; 0x54
 800faf6:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800fafe:	f04f 0200 	mov.w	r2, #0
 800fb02:	f04f 0300 	mov.w	r3, #0
 800fb06:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800fb0a:	f04f 0200 	mov.w	r2, #0
 800fb0e:	f04f 0300 	mov.w	r3, #0
 800fb12:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800fb16:	f04f 0200 	mov.w	r2, #0
 800fb1a:	f04f 0300 	mov.w	r3, #0
 800fb1e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800fb22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb24:	885b      	ldrh	r3, [r3, #2]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d103      	bne.n	800fb32 <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800fb2a:	23f1      	movs	r3, #241	; 0xf1
 800fb2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fb30:	e0d6      	b.n	800fce0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800fb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb34:	785b      	ldrb	r3, [r3, #1]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f000 80d2 	beq.w	800fce0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800fb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb3e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f040 80cd 	bne.w	800fce0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800fb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb50:	647a      	str	r2, [r7, #68]	; 0x44
 800fb52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fb56:	460b      	mov	r3, r1
 800fb58:	3301      	adds	r3, #1
 800fb5a:	623b      	str	r3, [r7, #32]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	f143 0300 	adc.w	r3, r3, #0
 800fb62:	627b      	str	r3, [r7, #36]	; 0x24
 800fb64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fb68:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800fb6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb6e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	2200      	movs	r2, #0
 800fb76:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb78:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800fb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb7c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800fb80:	4602      	mov	r2, r0
 800fb82:	fb02 f203 	mul.w	r2, r2, r3
 800fb86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb88:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800fb8c:	fb01 f303 	mul.w	r3, r1, r3
 800fb90:	441a      	add	r2, r3
 800fb92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb96:	fba3 4501 	umull	r4, r5, r3, r1
 800fb9a:	1953      	adds	r3, r2, r5
 800fb9c:	461d      	mov	r5, r3
 800fb9e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800fba2:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800fba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fbb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	61bb      	str	r3, [r7, #24]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	f143 0300 	adc.w	r3, r3, #0
 800fbc0:	61fb      	str	r3, [r7, #28]
 800fbc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fbc6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800fbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbcc:	885b      	ldrh	r3, [r3, #2]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	633b      	str	r3, [r7, #48]	; 0x30
 800fbd4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800fbd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fbdc:	4622      	mov	r2, r4
 800fbde:	fb02 f203 	mul.w	r2, r2, r3
 800fbe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	fb01 f303 	mul.w	r3, r1, r3
 800fbea:	441a      	add	r2, r3
 800fbec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbee:	4621      	mov	r1, r4
 800fbf0:	fba3 ab01 	umull	sl, fp, r3, r1
 800fbf4:	eb02 030b 	add.w	r3, r2, fp
 800fbf8:	469b      	mov	fp, r3
 800fbfa:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800fbfe:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800fc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	17da      	asrs	r2, r3, #31
 800fc08:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc0a:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800fc0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800fc12:	4622      	mov	r2, r4
 800fc14:	fb02 f203 	mul.w	r2, r2, r3
 800fc18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	fb01 f303 	mul.w	r3, r1, r3
 800fc20:	4413      	add	r3, r2
 800fc22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc24:	4621      	mov	r1, r4
 800fc26:	fba2 8901 	umull	r8, r9, r2, r1
 800fc2a:	444b      	add	r3, r9
 800fc2c:	4699      	mov	r9, r3
 800fc2e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800fc32:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800fc36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc3a:	0fd9      	lsrs	r1, r3, #31
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	6139      	str	r1, [r7, #16]
 800fc40:	6178      	str	r0, [r7, #20]
 800fc42:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800fc46:	4621      	mov	r1, r4
 800fc48:	1889      	adds	r1, r1, r2
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	eb43 0101 	adc.w	r1, r3, r1
 800fc52:	60f9      	str	r1, [r7, #12]
 800fc54:	f04f 0200 	mov.w	r2, #0
 800fc58:	f04f 0300 	mov.w	r3, #0
 800fc5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800fc60:	4621      	mov	r1, r4
 800fc62:	084a      	lsrs	r2, r1, #1
 800fc64:	4629      	mov	r1, r5
 800fc66:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	104b      	asrs	r3, r1, #1
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4619      	mov	r1, r3
 800fc72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fc76:	1814      	adds	r4, r2, r0
 800fc78:	603c      	str	r4, [r7, #0]
 800fc7a:	414b      	adcs	r3, r1
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fc82:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800fc86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	d009      	beq.n	800fca2 <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800fc8e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fc96:	f7f0 ff5f 	bl	8000b58 <__aeabi_ldivmod>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800fca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800fcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800fcb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800fcb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800fcbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcbe:	7852      	ldrb	r2, [r2, #1]
 800fcc0:	0852      	lsrs	r2, r2, #1
 800fcc2:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800fcc4:	441a      	add	r2, r3
 800fcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800fccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800fcd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcd4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800fcd6:	fb93 f2f2 	sdiv	r2, r3, r2
 800fcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcdc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800fce0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3778      	adds	r7, #120	; 0x78
 800fce8:	46bd      	mov	sp, r7
 800fcea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fcee <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b087      	sub	sp, #28
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3318      	adds	r3, #24
 800fcfc:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800fd10:	029b      	lsls	r3, r3, #10
 800fd12:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800fd1a:	029b      	lsls	r3, r3, #10
 800fd1c:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f040 8095 	bne.w	800fe58 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800fd34:	091b      	lsrs	r3, r3, #4
 800fd36:	b2da      	uxtb	r2, r3
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800fd42:	f003 030f 	and.w	r3, r3, #15
 800fd46:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800fd52:	091b      	lsrs	r3, r3, #4
 800fd54:	b2da      	uxtb	r2, r3
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800fd60:	f003 030f 	and.w	r3, r3, #15
 800fd64:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800fd70:	091b      	lsrs	r3, r3, #4
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	da2c      	bge.n	800fdee <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800fd9a:	091b      	lsrs	r3, r3, #4
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800fda8:	f003 030f 	and.w	r3, r3, #15
 800fdac:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800fdb8:	091b      	lsrs	r3, r3, #4
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800fdc6:	f003 030f 	and.w	r3, r3, #15
 800fdca:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800fdd6:	091b      	lsrs	r3, r3, #4
 800fdd8:	b2da      	uxtb	r2, r3
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800fde4:	f003 030f 	and.w	r3, r3, #15
 800fde8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	f340 80c2 	ble.w	800ff80 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800fe02:	091b      	lsrs	r3, r3, #4
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800fe10:	f003 030f 	and.w	r3, r3, #15
 800fe14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800fe20:	091b      	lsrs	r3, r3, #4
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800fe2e:	f003 030f 	and.w	r3, r3, #15
 800fe32:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800fe3e:	091b      	lsrs	r3, r3, #4
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800fe4c:	f003 030f 	and.w	r3, r3, #15
 800fe50:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	731a      	strb	r2, [r3, #12]
 800fe56:	e093      	b.n	800ff80 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800fe5e:	f003 030f 	and.w	r3, r3, #15
 800fe62:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800fe6e:	f003 030f 	and.w	r3, r3, #15
 800fe72:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800fe7e:	091b      	lsrs	r3, r3, #4
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800fe8c:	f003 030f 	and.w	r3, r3, #15
 800fe90:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800fe9c:	091b      	lsrs	r3, r3, #4
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800feaa:	f003 030f 	and.w	r3, r3, #15
 800feae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800feba:	68ba      	ldr	r2, [r7, #8]
 800febc:	429a      	cmp	r2, r3
 800febe:	da2c      	bge.n	800ff1a <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800fec6:	091b      	lsrs	r3, r3, #4
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800fed4:	f003 030f 	and.w	r3, r3, #15
 800fed8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800fee4:	091b      	lsrs	r3, r3, #4
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800fef2:	f003 030f 	and.w	r3, r3, #15
 800fef6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800ff02:	091b      	lsrs	r3, r3, #4
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800ff10:	f003 030f 	and.w	r3, r3, #15
 800ff14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ff20:	68fa      	ldr	r2, [r7, #12]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	dd2c      	ble.n	800ff80 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800ff2c:	091b      	lsrs	r3, r3, #4
 800ff2e:	b2da      	uxtb	r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800ff3a:	f003 030f 	and.w	r3, r3, #15
 800ff3e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800ff4a:	091b      	lsrs	r3, r3, #4
 800ff4c:	b2da      	uxtb	r2, r3
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800ff58:	f003 030f 	and.w	r3, r3, #15
 800ff5c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800ff68:	091b      	lsrs	r3, r3, #4
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800ff76:	f003 030f 	and.w	r3, r3, #15
 800ff7a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ff80:	2300      	movs	r3, #0
 800ff82:	75fb      	strb	r3, [r7, #23]
 800ff84:	e007      	b.n	800ff96 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800ff86:	7dfb      	ldrb	r3, [r7, #23]
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ff90:	7dfb      	ldrb	r3, [r7, #23]
 800ff92:	3301      	adds	r3, #1
 800ff94:	75fb      	strb	r3, [r7, #23]
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	2b05      	cmp	r3, #5
 800ff9a:	d9f4      	bls.n	800ff86 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800ff9c:	bf00      	nop
 800ff9e:	bf00      	nop
 800ffa0:	371c      	adds	r7, #28
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr

0800ffaa <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800ffaa:	b590      	push	{r4, r7, lr}
 800ffac:	b093      	sub	sp, #76	; 0x4c
 800ffae:	af04      	add	r7, sp, #16
 800ffb0:	60f8      	str	r0, [r7, #12]
 800ffb2:	60b9      	str	r1, [r7, #8]
 800ffb4:	607a      	str	r2, [r7, #4]
 800ffb6:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	3318      	adds	r3, #24
 800ffc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800ffea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800fff4:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800fffc:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8010004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8010008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801000c:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 801000e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010010:	021b      	lsls	r3, r3, #8
 8010012:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	785b      	ldrb	r3, [r3, #1]
 8010018:	2b07      	cmp	r3, #7
 801001a:	d006      	beq.n	801002a <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 8010020:	2b08      	cmp	r3, #8
 8010022:	d002      	beq.n	801002a <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8010024:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010028:	e0ec      	b.n	8010204 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 801002a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801002c:	2b00      	cmp	r3, #0
 801002e:	d102      	bne.n	8010036 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 8010030:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010034:	e0e6      	b.n	8010204 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8010036:	2300      	movs	r3, #0
 8010038:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801003c:	e0d9      	b.n	80101f2 <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 801003e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	214c      	movs	r1, #76	; 0x4c
 8010046:	fb01 f303 	mul.w	r3, r1, r3
 801004a:	4413      	add	r3, r2
 801004c:	335e      	adds	r3, #94	; 0x5e
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b09      	cmp	r3, #9
 8010052:	d00b      	beq.n	801006c <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 8010054:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	214c      	movs	r1, #76	; 0x4c
 801005c:	fb01 f303 	mul.w	r3, r1, r3
 8010060:	4413      	add	r3, r2
 8010062:	335e      	adds	r3, #94	; 0x5e
 8010064:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 8010066:	2b13      	cmp	r3, #19
 8010068:	f040 80bd 	bne.w	80101e6 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	795b      	ldrb	r3, [r3, #5]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10a      	bne.n	801008a <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 8010074:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	214c      	movs	r1, #76	; 0x4c
 801007c:	fb01 f303 	mul.w	r3, r1, r3
 8010080:	4413      	add	r3, r2
 8010082:	335e      	adds	r3, #94	; 0x5e
 8010084:	2217      	movs	r2, #23
 8010086:	701a      	strb	r2, [r3, #0]
 8010088:	e009      	b.n	801009e <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 801008a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801008e:	683a      	ldr	r2, [r7, #0]
 8010090:	214c      	movs	r1, #76	; 0x4c
 8010092:	fb01 f303 	mul.w	r3, r1, r3
 8010096:	4413      	add	r3, r2
 8010098:	335e      	adds	r3, #94	; 0x5e
 801009a:	2207      	movs	r2, #7
 801009c:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 801009e:	2300      	movs	r3, #0
 80100a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80100a4:	e097      	b.n	80101d6 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 80100a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	214c      	movs	r1, #76	; 0x4c
 80100ae:	fb01 f303 	mul.w	r3, r1, r3
 80100b2:	4413      	add	r3, r2
 80100b4:	3354      	adds	r3, #84	; 0x54
 80100b6:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 80100b8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	4613      	mov	r3, r2
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	4413      	add	r3, r2
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	4403      	add	r3, r0
 80100c8:	3310      	adds	r3, #16
 80100ca:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 80100cc:	4299      	cmp	r1, r3
 80100ce:	d915      	bls.n	80100fc <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 80100d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100d4:	683a      	ldr	r2, [r7, #0]
 80100d6:	214c      	movs	r1, #76	; 0x4c
 80100d8:	fb01 f303 	mul.w	r3, r1, r3
 80100dc:	4413      	add	r3, r2
 80100de:	3354      	adds	r3, #84	; 0x54
 80100e0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 80100e2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	4613      	mov	r3, r2
 80100ea:	005b      	lsls	r3, r3, #1
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4403      	add	r3, r0
 80100f2:	3310      	adds	r3, #16
 80100f4:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80100f6:	1acb      	subs	r3, r1, r3
 80100f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80100fa:	e014      	b.n	8010126 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 80100fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	440b      	add	r3, r1
 801010c:	3310      	adds	r3, #16
 801010e:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 8010110:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	204c      	movs	r0, #76	; 0x4c
 8010118:	fb00 f303 	mul.w	r3, r0, r3
 801011c:	440b      	add	r3, r1
 801011e:	3354      	adds	r3, #84	; 0x54
 8010120:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8010126:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010128:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801012a:	429a      	cmp	r2, r3
 801012c:	d24e      	bcs.n	80101cc <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 801012e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010132:	2b00      	cmp	r3, #0
 8010134:	d125      	bne.n	8010182 <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 8010136:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 801013a:	4613      	mov	r3, r2
 801013c:	005b      	lsls	r3, r3, #1
 801013e:	4413      	add	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	3308      	adds	r3, #8
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 8010148:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 801014c:	224c      	movs	r2, #76	; 0x4c
 801014e:	fb02 f303 	mul.w	r3, r2, r3
 8010152:	3310      	adds	r3, #16
 8010154:	683a      	ldr	r2, [r7, #0]
 8010156:	4413      	add	r3, r2
 8010158:	3304      	adds	r3, #4
 801015a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801015c:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8010160:	f107 0217 	add.w	r2, r7, #23
 8010164:	9203      	str	r2, [sp, #12]
 8010166:	f107 021c 	add.w	r2, r7, #28
 801016a:	9202      	str	r2, [sp, #8]
 801016c:	f107 0218 	add.w	r2, r7, #24
 8010170:	9201      	str	r2, [sp, #4]
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	4623      	mov	r3, r4
 8010176:	68ba      	ldr	r2, [r7, #8]
 8010178:	f000 f848 	bl	801020c <VL53L1_hist_events_consistency_check>
 801017c:	4603      	mov	r3, r0
 801017e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 8010182:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010186:	2b00      	cmp	r3, #0
 8010188:	d115      	bne.n	80101b6 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 801018a:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 801018c:	2b09      	cmp	r3, #9
 801018e:	d112      	bne.n	80101b6 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 8010190:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 8010194:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 8010198:	224c      	movs	r2, #76	; 0x4c
 801019a:	fb02 f303 	mul.w	r3, r2, r3
 801019e:	3310      	adds	r3, #16
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	4413      	add	r3, r2
 80101a4:	3304      	adds	r3, #4
 80101a6:	f107 0217 	add.w	r2, r7, #23
 80101aa:	4619      	mov	r1, r3
 80101ac:	f000 fb44 	bl	8010838 <VL53L1_hist_merged_pulse_check>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 80101b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101ba:	7df8      	ldrb	r0, [r7, #23]
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	214c      	movs	r1, #76	; 0x4c
 80101c0:	fb01 f303 	mul.w	r3, r1, r3
 80101c4:	4413      	add	r3, r2
 80101c6:	335e      	adds	r3, #94	; 0x5e
 80101c8:	4602      	mov	r2, r0
 80101ca:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 80101cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80101d0:	3301      	adds	r3, #1
 80101d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	795b      	ldrb	r3, [r3, #5]
 80101da:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80101de:	429a      	cmp	r2, r3
 80101e0:	f4ff af61 	bcc.w	80100a6 <VL53L1_hist_phase_consistency_check+0xfc>
 80101e4:	e000      	b.n	80101e8 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 80101e6:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80101e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101ec:	3301      	adds	r3, #1
 80101ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	7c9b      	ldrb	r3, [r3, #18]
 80101f6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101fa:	429a      	cmp	r2, r3
 80101fc:	f4ff af1f 	bcc.w	801003e <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8010200:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010204:	4618      	mov	r0, r3
 8010206:	373c      	adds	r7, #60	; 0x3c
 8010208:	46bd      	mov	sp, r7
 801020a:	bd90      	pop	{r4, r7, pc}

0801020c <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 801020c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010210:	b0d4      	sub	sp, #336	; 0x150
 8010212:	af00      	add	r7, sp, #0
 8010214:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8010218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801021c:	4603      	mov	r3, r0
 801021e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8010222:	460b      	mov	r3, r1
 8010224:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010228:	2300      	movs	r3, #0
 801022a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 801022e:	f04f 0200 	mov.w	r2, #0
 8010232:	f04f 0300 	mov.w	r3, #0
 8010236:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 801023a:	f04f 0200 	mov.w	r2, #0
 801023e:	f04f 0300 	mov.w	r3, #0
 8010242:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 8010246:	f04f 0200 	mov.w	r2, #0
 801024a:	f04f 0300 	mov.w	r3, #0
 801024e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 8010252:	f04f 0200 	mov.w	r2, #0
 8010256:	f04f 0300 	mov.w	r3, #0
 801025a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 801025e:	f04f 0200 	mov.w	r2, #0
 8010262:	f04f 0300 	mov.w	r3, #0
 8010266:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 801026a:	f04f 0200 	mov.w	r2, #0
 801026e:	f04f 0300 	mov.w	r3, #0
 8010272:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 8010276:	f04f 0200 	mov.w	r2, #0
 801027a:	f04f 0300 	mov.w	r3, #0
 801027e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 8010282:	f04f 0200 	mov.w	r2, #0
 8010286:	f04f 0300 	mov.w	r3, #0
 801028a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 8010294:	2300      	movs	r3, #0
 8010296:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 801029a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 80102a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80102a6:	2209      	movs	r2, #9
 80102a8:	701a      	strb	r2, [r3, #0]
		return status;
 80102aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80102ae:	e2bd      	b.n	801082c <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80102b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80102bc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80102c0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80102c4:	460b      	mov	r3, r1
 80102c6:	3301      	adds	r3, #1
 80102c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80102cc:	4613      	mov	r3, r2
 80102ce:	f143 0300 	adc.w	r3, r3, #0
 80102d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80102d6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80102da:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80102de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102e2:	885b      	ldrh	r3, [r3, #2]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	2200      	movs	r2, #0
 80102e8:	469a      	mov	sl, r3
 80102ea:	4693      	mov	fp, r2
 80102ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80102f0:	fb0a f203 	mul.w	r2, sl, r3
 80102f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80102f8:	fb0b f303 	mul.w	r3, fp, r3
 80102fc:	441a      	add	r2, r3
 80102fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010302:	fba3 450a 	umull	r4, r5, r3, sl
 8010306:	1953      	adds	r3, r2, r5
 8010308:	461d      	mov	r5, r3
 801030a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 801030e:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8010312:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	2200      	movs	r2, #0
 801031a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801031e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010322:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010326:	460b      	mov	r3, r1
 8010328:	3301      	adds	r3, #1
 801032a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801032e:	4613      	mov	r3, r2
 8010330:	f143 0300 	adc.w	r3, r3, #0
 8010334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010338:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 801033c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 8010340:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010344:	8adb      	ldrh	r3, [r3, #22]
 8010346:	b29b      	uxth	r3, r3
 8010348:	2200      	movs	r2, #0
 801034a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801034e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010352:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010356:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801035a:	4622      	mov	r2, r4
 801035c:	fb02 f203 	mul.w	r2, r2, r3
 8010360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010364:	4629      	mov	r1, r5
 8010366:	fb01 f303 	mul.w	r3, r1, r3
 801036a:	441a      	add	r2, r3
 801036c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010370:	4621      	mov	r1, r4
 8010372:	fba3 8901 	umull	r8, r9, r3, r1
 8010376:	eb02 0309 	add.w	r3, r2, r9
 801037a:	4699      	mov	r9, r3
 801037c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 8010380:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 8010384:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8010388:	f04f 0000 	mov.w	r0, #0
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	0319      	lsls	r1, r3, #12
 8010392:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010396:	0310      	lsls	r0, r2, #12
 8010398:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 801039c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80103a0:	0fd9      	lsrs	r1, r3, #31
 80103a2:	2000      	movs	r0, #0
 80103a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80103a8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80103ac:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80103b0:	4621      	mov	r1, r4
 80103b2:	1889      	adds	r1, r1, r2
 80103b4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80103b8:	4629      	mov	r1, r5
 80103ba:	eb43 0101 	adc.w	r1, r3, r1
 80103be:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80103c2:	f04f 0200 	mov.w	r2, #0
 80103c6:	f04f 0300 	mov.w	r3, #0
 80103ca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80103ce:	4621      	mov	r1, r4
 80103d0:	084a      	lsrs	r2, r1, #1
 80103d2:	4629      	mov	r1, r5
 80103d4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80103d8:	4629      	mov	r1, r5
 80103da:	104b      	asrs	r3, r1, #1
 80103dc:	4610      	mov	r0, r2
 80103de:	4619      	mov	r1, r3
 80103e0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80103e4:	1814      	adds	r4, r2, r0
 80103e6:	67bc      	str	r4, [r7, #120]	; 0x78
 80103e8:	414b      	adcs	r3, r1
 80103ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80103ec:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80103f0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 80103f4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80103f8:	4313      	orrs	r3, r2
 80103fa:	d009      	beq.n	8010410 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 80103fc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8010400:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8010404:	f7f0 fba8 	bl	8000b58 <__aeabi_ldivmod>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 8010410:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010414:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010418:	fb03 f102 	mul.w	r1, r3, r2
 801041c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010420:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010424:	fb02 f303 	mul.w	r3, r2, r3
 8010428:	18ca      	adds	r2, r1, r3
 801042a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801042e:	fba3 1303 	umull	r1, r3, r3, r3
 8010432:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010436:	460b      	mov	r3, r1
 8010438:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801043c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010440:	18d3      	adds	r3, r2, r3
 8010442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010446:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801044a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 801044e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 8010452:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8010456:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 801045a:	6739      	str	r1, [r7, #112]	; 0x70
 801045c:	f143 0300 	adc.w	r3, r3, #0
 8010460:	677b      	str	r3, [r7, #116]	; 0x74
 8010462:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8010466:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 801046a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801046e:	2b00      	cmp	r3, #0
 8010470:	da08      	bge.n	8010484 <VL53L1_hist_events_consistency_check+0x278>
 8010472:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010476:	1851      	adds	r1, r2, r1
 8010478:	66b9      	str	r1, [r7, #104]	; 0x68
 801047a:	f143 0300 	adc.w	r3, r3, #0
 801047e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010480:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010484:	f04f 0000 	mov.w	r0, #0
 8010488:	f04f 0100 	mov.w	r1, #0
 801048c:	0b10      	lsrs	r0, r2, #12
 801048e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010492:	1319      	asrs	r1, r3, #12
 8010494:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 8010498:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801049c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801049e:	2200      	movs	r2, #0
 80104a0:	663b      	str	r3, [r7, #96]	; 0x60
 80104a2:	667a      	str	r2, [r7, #100]	; 0x64
 80104a4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80104a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 80104ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80104b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80104b8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80104bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80104c0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80104c4:	4621      	mov	r1, r4
 80104c6:	1a51      	subs	r1, r2, r1
 80104c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80104ca:	4629      	mov	r1, r5
 80104cc:	eb63 0301 	sbc.w	r3, r3, r1
 80104d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104d2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80104d6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 80104da:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80104de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80104e2:	fb03 f102 	mul.w	r1, r3, r2
 80104e6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80104ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80104ee:	fb02 f303 	mul.w	r3, r2, r3
 80104f2:	4419      	add	r1, r3
 80104f4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80104f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80104fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010500:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010504:	4613      	mov	r3, r2
 8010506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801050a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801050e:	18cb      	adds	r3, r1, r3
 8010510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010514:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8010518:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801051c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 8010520:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8010524:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8010528:	6539      	str	r1, [r7, #80]	; 0x50
 801052a:	f143 0300 	adc.w	r3, r3, #0
 801052e:	657b      	str	r3, [r7, #84]	; 0x54
 8010530:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8010534:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 8010538:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801053c:	2b00      	cmp	r3, #0
 801053e:	da08      	bge.n	8010552 <VL53L1_hist_events_consistency_check+0x346>
 8010540:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010544:	1851      	adds	r1, r2, r1
 8010546:	64b9      	str	r1, [r7, #72]	; 0x48
 8010548:	f143 0300 	adc.w	r3, r3, #0
 801054c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801054e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010552:	f04f 0000 	mov.w	r0, #0
 8010556:	f04f 0100 	mov.w	r1, #0
 801055a:	0b10      	lsrs	r0, r2, #12
 801055c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010560:	1319      	asrs	r1, r3, #12
 8010562:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8010566:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801056a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 801056e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010574:	2200      	movs	r2, #0
 8010576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801057a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801057e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010582:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8010586:	4622      	mov	r2, r4
 8010588:	fb02 f203 	mul.w	r2, r2, r3
 801058c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010590:	4629      	mov	r1, r5
 8010592:	fb01 f303 	mul.w	r3, r1, r3
 8010596:	441a      	add	r2, r3
 8010598:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801059c:	4621      	mov	r1, r4
 801059e:	fba3 1301 	umull	r1, r3, r3, r1
 80105a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80105a6:	460b      	mov	r3, r1
 80105a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105b0:	18d3      	adds	r3, r2, r3
 80105b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80105b6:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80105ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80105be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 80105c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80105c6:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80105ca:	6439      	str	r1, [r7, #64]	; 0x40
 80105cc:	f143 0300 	adc.w	r3, r3, #0
 80105d0:	647b      	str	r3, [r7, #68]	; 0x44
 80105d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80105d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 80105da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80105de:	2b00      	cmp	r3, #0
 80105e0:	da08      	bge.n	80105f4 <VL53L1_hist_events_consistency_check+0x3e8>
 80105e2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80105e6:	1851      	adds	r1, r2, r1
 80105e8:	63b9      	str	r1, [r7, #56]	; 0x38
 80105ea:	f143 0300 	adc.w	r3, r3, #0
 80105ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80105f4:	f04f 0000 	mov.w	r0, #0
 80105f8:	f04f 0100 	mov.w	r1, #0
 80105fc:	0b10      	lsrs	r0, r2, #12
 80105fe:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010602:	1319      	asrs	r1, r3, #12
 8010604:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8010608:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801060c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 8010610:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010616:	2200      	movs	r2, #0
 8010618:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801061c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010624:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8010628:	4622      	mov	r2, r4
 801062a:	fb02 f203 	mul.w	r2, r2, r3
 801062e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010632:	4629      	mov	r1, r5
 8010634:	fb01 f303 	mul.w	r3, r1, r3
 8010638:	441a      	add	r2, r3
 801063a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801063e:	4621      	mov	r1, r4
 8010640:	fba3 1301 	umull	r1, r3, r3, r1
 8010644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010648:	460b      	mov	r3, r1
 801064a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801064e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010652:	18d3      	adds	r3, r2, r3
 8010654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010658:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 801065c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8010660:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 8010664:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8010668:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 801066c:	6339      	str	r1, [r7, #48]	; 0x30
 801066e:	f143 0300 	adc.w	r3, r3, #0
 8010672:	637b      	str	r3, [r7, #52]	; 0x34
 8010674:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010678:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 801067c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8010680:	4610      	mov	r0, r2
 8010682:	4619      	mov	r1, r3
 8010684:	2900      	cmp	r1, #0
 8010686:	da08      	bge.n	801069a <VL53L1_hist_events_consistency_check+0x48e>
 8010688:	f640 73ff 	movw	r3, #4095	; 0xfff
 801068c:	18c3      	adds	r3, r0, r3
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010690:	f141 0300 	adc.w	r3, r1, #0
 8010694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801069a:	f04f 0200 	mov.w	r2, #0
 801069e:	f04f 0300 	mov.w	r3, #0
 80106a2:	0b02      	lsrs	r2, r0, #12
 80106a4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80106a8:	130b      	asrs	r3, r1, #12
 80106aa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 80106ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80106b2:	1c91      	adds	r1, r2, #2
 80106b4:	6239      	str	r1, [r7, #32]
 80106b6:	f143 0300 	adc.w	r3, r3, #0
 80106ba:	627b      	str	r3, [r7, #36]	; 0x24
 80106bc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80106c0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 80106c4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da06      	bge.n	80106da <VL53L1_hist_events_consistency_check+0x4ce>
 80106cc:	1cd1      	adds	r1, r2, #3
 80106ce:	61b9      	str	r1, [r7, #24]
 80106d0:	f143 0300 	adc.w	r3, r3, #0
 80106d4:	61fb      	str	r3, [r7, #28]
 80106d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80106da:	f04f 0000 	mov.w	r0, #0
 80106de:	f04f 0100 	mov.w	r1, #0
 80106e2:	0890      	lsrs	r0, r2, #2
 80106e4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80106e8:	1099      	asrs	r1, r3, #2
 80106ea:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 80106ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106f2:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80106f4:	2200      	movs	r2, #0
 80106f6:	613b      	str	r3, [r7, #16]
 80106f8:	617a      	str	r2, [r7, #20]
 80106fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80106fe:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 8010702:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8010706:	1c91      	adds	r1, r2, #2
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	f143 0300 	adc.w	r3, r3, #0
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010714:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 8010718:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 801071c:	2b00      	cmp	r3, #0
 801071e:	da06      	bge.n	801072e <VL53L1_hist_events_consistency_check+0x522>
 8010720:	1cd1      	adds	r1, r2, #3
 8010722:	6039      	str	r1, [r7, #0]
 8010724:	f143 0300 	adc.w	r3, r3, #0
 8010728:	607b      	str	r3, [r7, #4]
 801072a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801072e:	f04f 0000 	mov.w	r0, #0
 8010732:	f04f 0100 	mov.w	r1, #0
 8010736:	0890      	lsrs	r0, r2, #2
 8010738:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801073c:	1099      	asrs	r1, r3, #2
 801073e:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 8010742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010746:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8010748:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 801074c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 801074e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 8010752:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8010754:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 8010758:	4413      	add	r3, r2
 801075a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 801075e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010762:	011b      	lsls	r3, r3, #4
 8010764:	4618      	mov	r0, r3
 8010766:	f002 f8c6 	bl	80128f6 <VL53L1_isqrt>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
	*pevents_tolerance =
 801076e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010772:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8010774:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 801077e:	fb03 f202 	mul.w	r2, r3, r2
 8010782:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010786:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8010788:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f103 0220 	add.w	r2, r3, #32
 8010792:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010796:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8010798:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	da00      	bge.n	80107a4 <VL53L1_hist_events_consistency_check+0x598>
 80107a2:	333f      	adds	r3, #63	; 0x3f
 80107a4:	119b      	asrs	r3, r3, #6
 80107a6:	461a      	mov	r2, r3
 80107a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80107ac:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 80107ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 80107b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107c4:	1a9b      	subs	r3, r3, r2
 80107c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 80107ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80107ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80107d2:	429a      	cmp	r2, r3
 80107d4:	da08      	bge.n	80107e8 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80107d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80107da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107de:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80107e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e007      	b.n	80107f8 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80107e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80107ec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80107f0:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80107f2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80107f6:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80107f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	429a      	cmp	r2, r3
 8010806:	dd0b      	ble.n	8010820 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 8010808:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801080c:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 801080e:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 8010812:	429a      	cmp	r2, r3
 8010814:	d204      	bcs.n	8010820 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 8010816:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801081a:	2214      	movs	r2, #20
 801081c:	701a      	strb	r2, [r3, #0]
 801081e:	e003      	b.n	8010828 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 8010820:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8010824:	2209      	movs	r2, #9
 8010826:	701a      	strb	r2, [r3, #0]





	return status;
 8010828:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 801082c:	4618      	mov	r0, r3
 801082e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8010832:	46bd      	mov	sp, r7
 8010834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010838 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 8010838:	b480      	push	{r7}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 8010846:	2300      	movs	r3, #0
 8010848:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801085a:	429a      	cmp	r2, r3
 801085c:	dd0b      	ble.n	8010876 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8010864:	b29a      	uxth	r2, r3
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801086c:	b29b      	uxth	r3, r3
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	b29b      	uxth	r3, r3
		delta_mm =
 8010872:	82fb      	strh	r3, [r7, #22]
 8010874:	e00a      	b.n	801088c <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801087c:	b29a      	uxth	r2, r3
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8010884:	b29b      	uxth	r3, r3
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	b29b      	uxth	r3, r3
		delta_mm =
 801088a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 801088c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010890:	2b00      	cmp	r3, #0
 8010892:	dd09      	ble.n	80108a8 <VL53L1_hist_merged_pulse_check+0x70>
 8010894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801089c:	429a      	cmp	r2, r3
 801089e:	dd03      	ble.n	80108a8 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2216      	movs	r2, #22
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	e002      	b.n	80108ae <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2209      	movs	r2, #9
 80108ac:	701a      	strb	r2, [r3, #0]

	return status;
 80108ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	371c      	adds	r7, #28
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b08e      	sub	sp, #56	; 0x38
 80108c2:	af04      	add	r7, sp, #16
 80108c4:	60f8      	str	r0, [r7, #12]
 80108c6:	60b9      	str	r1, [r7, #8]
 80108c8:	607a      	str	r2, [r7, #4]
 80108ca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	3318      	adds	r3, #24
 80108d6:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80108d8:	2300      	movs	r3, #0
 80108da:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 80108e6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80108e8:	6a3b      	ldr	r3, [r7, #32]
 80108ea:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 80108ee:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80108f6:	2b09      	cmp	r3, #9
 80108f8:	d009      	beq.n	801090e <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 8010900:	2b13      	cmp	r3, #19
 8010902:	d004      	beq.n	801090e <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 801090a:	2b14      	cmp	r3, #20
 801090c:	d129      	bne.n	8010962 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010914:	2b09      	cmp	r3, #9
 8010916:	d009      	beq.n	801092c <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 801091e:	2b13      	cmp	r3, #19
 8010920:	d004      	beq.n	801092c <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8010928:	2b14      	cmp	r3, #20
 801092a:	d11a      	bne.n	8010962 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	2209      	movs	r2, #9
 8010930:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 801093e:	8bb9      	ldrh	r1, [r7, #28]
 8010940:	7ff8      	ldrb	r0, [r7, #31]
 8010942:	9303      	str	r3, [sp, #12]
 8010944:	f107 0318 	add.w	r3, r7, #24
 8010948:	9302      	str	r3, [sp, #8]
 801094a:	f107 0314 	add.w	r3, r7, #20
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	4613      	mov	r3, r2
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	f7ff fc58 	bl	801020c <VL53L1_hist_events_consistency_check>
 801095c:	4603      	mov	r3, r0
 801095e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8010962:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010966:	4618      	mov	r0, r3
 8010968:	3728      	adds	r7, #40	; 0x28
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b088      	sub	sp, #32
 8010972:	af00      	add	r7, sp, #0
 8010974:	60f8      	str	r0, [r7, #12]
 8010976:	60b9      	str	r1, [r7, #8]
 8010978:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801097a:	2300      	movs	r3, #0
 801097c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010996:	2b00      	cmp	r3, #0
 8010998:	d019      	beq.n	80109ce <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80109a0:	4618      	mov	r0, r3
 80109a2:	f002 f90f 	bl	8012bc4 <VL53L1_calc_pll_period_mm>
 80109a6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 80109ae:	021b      	lsls	r3, r3, #8
 80109b0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	fb02 f303 	mul.w	r3, r2, r3
 80109ba:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109c2:	0bdb      	lsrs	r3, r3, #15
 80109c4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	b21a      	sxth	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80109ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3720      	adds	r7, #32
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80109da:	b590      	push	{r4, r7, lr}
 80109dc:	b08d      	sub	sp, #52	; 0x34
 80109de:	af04      	add	r7, sp, #16
 80109e0:	4604      	mov	r4, r0
 80109e2:	4608      	mov	r0, r1
 80109e4:	4611      	mov	r1, r2
 80109e6:	461a      	mov	r2, r3
 80109e8:	4623      	mov	r3, r4
 80109ea:	80fb      	strh	r3, [r7, #6]
 80109ec:	4603      	mov	r3, r0
 80109ee:	80bb      	strh	r3, [r7, #4]
 80109f0:	460b      	mov	r3, r1
 80109f2:	70fb      	strb	r3, [r7, #3]
 80109f4:	4613      	mov	r3, r2
 80109f6:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 8010a18:	78b9      	ldrb	r1, [r7, #2]
 8010a1a:	78f8      	ldrb	r0, [r7, #3]
 8010a1c:	f107 030c 	add.w	r3, r7, #12
 8010a20:	9303      	str	r3, [sp, #12]
 8010a22:	f107 030e 	add.w	r3, r7, #14
 8010a26:	9302      	str	r3, [sp, #8]
 8010a28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	23ff      	movs	r3, #255	; 0xff
 8010a34:	22c7      	movs	r2, #199	; 0xc7
 8010a36:	f000 fa03 	bl	8010e40 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8010a3a:	89fb      	ldrh	r3, [r7, #14]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d050      	beq.n	8010ae2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8010a40:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d04d      	beq.n	8010ae2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 8010a46:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8010a4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010a4e:	78b9      	ldrb	r1, [r7, #2]
 8010a50:	78f8      	ldrb	r0, [r7, #3]
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	9303      	str	r3, [sp, #12]
 8010a58:	f107 030a 	add.w	r3, r7, #10
 8010a5c:	9302      	str	r3, [sp, #8]
 8010a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a62:	9301      	str	r3, [sp, #4]
 8010a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	4623      	mov	r3, r4
 8010a6a:	f000 f9e9 	bl	8010e40 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8010a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a70:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8010a72:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8010a74:	897b      	ldrh	r3, [r7, #10]
 8010a76:	461a      	mov	r2, r3
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	fb02 f303 	mul.w	r3, r2, r3
 8010a7e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8010a80:	89fb      	ldrh	r3, [r7, #14]
 8010a82:	461a      	mov	r2, r3
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a8a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8010a90:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8010a92:	893b      	ldrh	r3, [r7, #8]
 8010a94:	461a      	mov	r2, r3
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	fb02 f303 	mul.w	r3, r2, r3
 8010a9c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8010a9e:	89bb      	ldrh	r3, [r7, #12]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aa8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8010aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aae:	69ba      	ldr	r2, [r7, #24]
 8010ab0:	fb02 f303 	mul.w	r3, r2, r3
 8010ab4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8010ab6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010aba:	697a      	ldr	r2, [r7, #20]
 8010abc:	fb02 f303 	mul.w	r3, r2, r3
 8010ac0:	69fa      	ldr	r2, [r7, #28]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8010ac6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8010ac8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8010aca:	4413      	add	r3, r2
 8010acc:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d008      	beq.n	8010ae6 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	009a      	lsls	r2, r3, #2
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ade:	61fb      	str	r3, [r7, #28]
 8010ae0:	e002      	b.n	8010ae8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8010ae2:	bf00      	nop
 8010ae4:	e000      	b.n	8010ae8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8010ae6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	b21a      	sxth	r2, r3
 8010aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aee:	801a      	strh	r2, [r3, #0]

}
 8010af0:	bf00      	nop
 8010af2:	3724      	adds	r7, #36	; 0x24
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}

08010af8 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60b9      	str	r1, [r7, #8]
 8010b00:	607a      	str	r2, [r7, #4]
 8010b02:	603b      	str	r3, [r7, #0]
 8010b04:	4603      	mov	r3, r0
 8010b06:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	08db      	lsrs	r3, r3, #3
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	f003 0307 	and.w	r3, r3, #7
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	2301      	movs	r3, #1
 8010b26:	4093      	lsls	r3, r2
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	701a      	strb	r2, [r3, #0]

}
 8010b2e:	bf00      	nop
 8010b30:	3714      	adds	r7, #20
 8010b32:	46bd      	mov	sp, r7
 8010b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b38:	4770      	bx	lr

08010b3a <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8010b3a:	b480      	push	{r7}
 8010b3c:	b083      	sub	sp, #12
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	4603      	mov	r3, r0
 8010b42:	603a      	str	r2, [r7, #0]
 8010b44:	71fb      	strb	r3, [r7, #7]
 8010b46:	460b      	mov	r3, r1
 8010b48:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8010b4a:	79fb      	ldrb	r3, [r7, #7]
 8010b4c:	2b07      	cmp	r3, #7
 8010b4e:	d90a      	bls.n	8010b66 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8010b50:	79bb      	ldrb	r3, [r7, #6]
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	3b71      	subs	r3, #113	; 0x71
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8010b64:	e00a      	b.n	8010b7c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8010b66:	79bb      	ldrb	r3, [r7, #6]
 8010b68:	f1c3 030f 	rsb	r3, r3, #15
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	79fb      	ldrb	r3, [r7, #7]
 8010b74:	4413      	add	r3, r2
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	701a      	strb	r2, [r3, #0]
}
 8010b7c:	bf00      	nop
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	091b      	lsrs	r3, r3, #4
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	f003 030f 	and.w	r3, r3, #15
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	701a      	strb	r2, [r3, #0]

}
 8010bac:	bf00      	nop
 8010bae:	3714      	adds	r7, #20
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	603a      	str	r2, [r7, #0]
 8010bc2:	71fb      	strb	r3, [r7, #7]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8010bc8:	79bb      	ldrb	r3, [r7, #6]
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	79fb      	ldrb	r3, [r7, #7]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	701a      	strb	r2, [r3, #0]

}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60ba      	str	r2, [r7, #8]
 8010bec:	607b      	str	r3, [r7, #4]
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 8010c06:	f107 0217 	add.w	r2, r7, #23
 8010c0a:	f107 0116 	add.w	r1, r7, #22
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f002 fa51 	bl	80130b8 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 8010c16:	f107 0214 	add.w	r2, r7, #20
 8010c1a:	f107 0115 	add.w	r1, r7, #21
 8010c1e:	7bbb      	ldrb	r3, [r7, #14]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff ffb1 	bl	8010b88 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	7d7b      	ldrb	r3, [r7, #21]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	0fd9      	lsrs	r1, r3, #31
 8010c30:	440b      	add	r3, r1
 8010c32:	105b      	asrs	r3, r3, #1
 8010c34:	425b      	negs	r3, r3
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	b21a      	sxth	r2, r3
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	da02      	bge.n	8010c52 <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	7d7b      	ldrb	r3, [r7, #21]
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	b21a      	sxth	r2, r3
 8010c64:	6a3b      	ldr	r3, [r7, #32]
 8010c66:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 8010c68:	6a3b      	ldr	r3, [r7, #32]
 8010c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c6e:	2b0f      	cmp	r3, #15
 8010c70:	dd02      	ble.n	8010c78 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	220f      	movs	r2, #15
 8010c76:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8010c78:	7dbb      	ldrb	r3, [r7, #22]
 8010c7a:	b29a      	uxth	r2, r3
 8010c7c:	7d3b      	ldrb	r3, [r7, #20]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	0fd9      	lsrs	r1, r3, #31
 8010c82:	440b      	add	r3, r1
 8010c84:	105b      	asrs	r3, r3, #1
 8010c86:	425b      	negs	r3, r3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	4413      	add	r3, r2
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	b21a      	sxth	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	da02      	bge.n	8010ca4 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	7d3b      	ldrb	r3, [r7, #20]
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	4413      	add	r3, r2
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	b21a      	sxth	r2, r3
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cc0:	2b0f      	cmp	r3, #15
 8010cc2:	dd02      	ble.n	8010cca <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	220f      	movs	r2, #15
 8010cc8:	801a      	strh	r2, [r3, #0]
}
 8010cca:	bf00      	nop
 8010ccc:	3718      	adds	r7, #24
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	4603      	mov	r3, r0
 8010cda:	460a      	mov	r2, r1
 8010cdc:	71fb      	strb	r3, [r7, #7]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8010ce6:	79fb      	ldrb	r3, [r7, #7]
 8010ce8:	f003 0303 	and.w	r3, r3, #3
 8010cec:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8010cee:	79bb      	ldrb	r3, [r7, #6]
 8010cf0:	f003 0303 	and.w	r3, r3, #3
 8010cf4:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8010cf6:	7bbb      	ldrb	r3, [r7, #14]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d104      	bne.n	8010d06 <VL53L1_is_aperture_location+0x34>
 8010cfc:	7b7b      	ldrb	r3, [r7, #13]
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	d101      	bne.n	8010d06 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 8010d02:	2301      	movs	r3, #1
 8010d04:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8010d06:	7bbb      	ldrb	r3, [r7, #14]
 8010d08:	2b02      	cmp	r3, #2
 8010d0a:	d104      	bne.n	8010d16 <VL53L1_is_aperture_location+0x44>
 8010d0c:	7b7b      	ldrb	r3, [r7, #13]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 8010d12:	2301      	movs	r3, #1
 8010d14:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8010d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3714      	adds	r7, #20
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8010d24:	b590      	push	{r4, r7, lr}
 8010d26:	b08b      	sub	sp, #44	; 0x2c
 8010d28:	af02      	add	r7, sp, #8
 8010d2a:	603a      	str	r2, [r7, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	4603      	mov	r3, r0
 8010d30:	71fb      	strb	r3, [r7, #7]
 8010d32:	460b      	mov	r3, r1
 8010d34:	71bb      	strb	r3, [r7, #6]
 8010d36:	4613      	mov	r3, r2
 8010d38:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8010d46:	2300      	movs	r3, #0
 8010d48:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 8010d66:	f107 0416 	add.w	r4, r7, #22
 8010d6a:	f107 0218 	add.w	r2, r7, #24
 8010d6e:	79b9      	ldrb	r1, [r7, #6]
 8010d70:	79f8      	ldrb	r0, [r7, #7]
 8010d72:	f107 0312 	add.w	r3, r7, #18
 8010d76:	9301      	str	r3, [sp, #4]
 8010d78:	f107 0314 	add.w	r3, r7, #20
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	4623      	mov	r3, r4
 8010d80:	f7ff ff30 	bl	8010be4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	2200      	movs	r2, #0
 8010d88:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8010d8a:	8afb      	ldrh	r3, [r7, #22]
 8010d8c:	83bb      	strh	r3, [r7, #28]
 8010d8e:	e04c      	b.n	8010e2a <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8010d90:	8b3b      	ldrh	r3, [r7, #24]
 8010d92:	83fb      	strh	r3, [r7, #30]
 8010d94:	e03d      	b.n	8010e12 <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 8010d96:	8bbb      	ldrh	r3, [r7, #28]
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	8bfa      	ldrh	r2, [r7, #30]
 8010d9c:	b2d1      	uxtb	r1, r2
 8010d9e:	f107 0211 	add.w	r2, r7, #17
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7ff fec9 	bl	8010b3a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 8010da8:	7c78      	ldrb	r0, [r7, #17]
 8010daa:	f107 030e 	add.w	r3, r7, #14
 8010dae:	f107 020f 	add.w	r2, r7, #15
 8010db2:	f107 0110 	add.w	r1, r7, #16
 8010db6:	f7ff fe9f 	bl	8010af8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8010dba:	7c3b      	ldrb	r3, [r7, #16]
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	781a      	ldrb	r2, [r3, #0]
 8010dc4:	7bbb      	ldrb	r3, [r7, #14]
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01b      	beq.n	8010e06 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 8010dce:	8bbb      	ldrh	r3, [r7, #28]
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	8bfa      	ldrh	r2, [r7, #30]
 8010dd4:	b2d2      	uxtb	r2, r2
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff ff7a 	bl	8010cd2 <VL53L1_is_aperture_location>
 8010dde:	4603      	mov	r3, r0
 8010de0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8010de2:	7efb      	ldrb	r3, [r7, #27]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d007      	beq.n	8010df8 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8010de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dea:	881a      	ldrh	r2, [r3, #0]
 8010dec:	88bb      	ldrh	r3, [r7, #4]
 8010dee:	4413      	add	r3, r2
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df4:	801a      	strh	r2, [r3, #0]
 8010df6:	e006      	b.n	8010e06 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8010df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e04:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8010e06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	83fb      	strh	r3, [r7, #30]
 8010e12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010e16:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	ddbb      	ble.n	8010d96 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8010e1e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	3301      	adds	r3, #1
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	83bb      	strh	r3, [r7, #28]
 8010e2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e2e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	ddac      	ble.n	8010d90 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8010e36:	bf00      	nop
 8010e38:	bf00      	nop
 8010e3a:	3724      	adds	r7, #36	; 0x24
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd90      	pop	{r4, r7, pc}

08010e40 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b08d      	sub	sp, #52	; 0x34
 8010e44:	af02      	add	r7, sp, #8
 8010e46:	4604      	mov	r4, r0
 8010e48:	4608      	mov	r0, r1
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4623      	mov	r3, r4
 8010e50:	71fb      	strb	r3, [r7, #7]
 8010e52:	4603      	mov	r3, r0
 8010e54:	71bb      	strb	r3, [r7, #6]
 8010e56:	460b      	mov	r3, r1
 8010e58:	717b      	strb	r3, [r7, #5]
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8010e66:	2300      	movs	r3, #0
 8010e68:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8010e76:	2300      	movs	r3, #0
 8010e78:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8010e92:	2300      	movs	r3, #0
 8010e94:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 8010ea0:	f107 041c 	add.w	r4, r7, #28
 8010ea4:	f107 021e 	add.w	r2, r7, #30
 8010ea8:	79b9      	ldrb	r1, [r7, #6]
 8010eaa:	79f8      	ldrb	r0, [r7, #7]
 8010eac:	f107 0318 	add.w	r3, r7, #24
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	f107 031a 	add.w	r3, r7, #26
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	4623      	mov	r3, r4
 8010eba:	f7ff fe93 	bl	8010be4 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 8010ebe:	f107 0414 	add.w	r4, r7, #20
 8010ec2:	f107 0216 	add.w	r2, r7, #22
 8010ec6:	7939      	ldrb	r1, [r7, #4]
 8010ec8:	7978      	ldrb	r0, [r7, #5]
 8010eca:	f107 0310 	add.w	r3, r7, #16
 8010ece:	9301      	str	r3, [sp, #4]
 8010ed0:	f107 0312 	add.w	r3, r7, #18
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	4623      	mov	r3, r4
 8010ed8:	f7ff fe84 	bl	8010be4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8010edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ede:	2200      	movs	r2, #0
 8010ee0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8010ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8010ee8:	8abb      	ldrh	r3, [r7, #20]
 8010eea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010eec:	e06c      	b.n	8010fc8 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8010eee:	8afb      	ldrh	r3, [r7, #22]
 8010ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010ef2:	e05d      	b.n	8010fb0 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 8010ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010efa:	b2d1      	uxtb	r1, r2
 8010efc:	f107 020f 	add.w	r2, r7, #15
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fe1a 	bl	8010b3a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 8010f06:	7bf8      	ldrb	r0, [r7, #15]
 8010f08:	f107 030c 	add.w	r3, r7, #12
 8010f0c:	f107 020d 	add.w	r2, r7, #13
 8010f10:	f107 010e 	add.w	r1, r7, #14
 8010f14:	f7ff fdf0 	bl	8010af8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8010f18:	7bbb      	ldrb	r3, [r7, #14]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1e:	4413      	add	r3, r2
 8010f20:	781a      	ldrb	r2, [r3, #0]
 8010f22:	7b3b      	ldrb	r3, [r7, #12]
 8010f24:	4013      	ands	r3, r2
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d03b      	beq.n	8010fa4 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 8010f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f32:	b2d2      	uxtb	r2, r2
 8010f34:	4611      	mov	r1, r2
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff fecb 	bl	8010cd2 <VL53L1_is_aperture_location>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8010f42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d002      	beq.n	8010f50 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8010f4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f4e:	e002      	b.n	8010f56 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8010f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f54:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8010f56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010f5a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	db19      	blt.n	8010f96 <VL53L1_calc_mm_effective_spads+0x156>
 8010f62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010f66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	dc13      	bgt.n	8010f96 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8010f6e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8010f72:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010f76:	429a      	cmp	r2, r3
 8010f78:	db0d      	blt.n	8010f96 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8010f7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010f7e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010f82:	429a      	cmp	r2, r3
 8010f84:	dc07      	bgt.n	8010f96 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8010f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f88:	881a      	ldrh	r2, [r3, #0]
 8010f8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f8c:	4413      	add	r3, r2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f92:	801a      	strh	r2, [r3, #0]
 8010f94:	e006      	b.n	8010fa4 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8010f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f98:	881a      	ldrh	r2, [r3, #0]
 8010f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f9c:	4413      	add	r3, r2
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8010fa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	3301      	adds	r3, #1
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010fb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	dd9b      	ble.n	8010ef4 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8010fbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010fc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010fcc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	dd8c      	ble.n	8010eee <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8010fd4:	bf00      	nop
 8010fd6:	bf00      	nop
 8010fd8:	372c      	adds	r7, #44	; 0x2c
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd90      	pop	{r4, r7, pc}

08010fde <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b086      	sub	sp, #24
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	60f8      	str	r0, [r7, #12]
 8010fe6:	60b9      	str	r1, [r7, #8]
 8010fe8:	607a      	str	r2, [r7, #4]
 8010fea:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7fd ff6d 	bl	800eed0 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	7c9a      	ldrb	r2, [r3, #18]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	3314      	adds	r3, #20
 8011020:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8011022:	2300      	movs	r3, #0
 8011024:	75fb      	strb	r3, [r7, #23]
 8011026:	e06b      	b.n	8011100 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8011028:	7dfb      	ldrb	r3, [r7, #23]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d002      	beq.n	8011034 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 801102e:	2b01      	cmp	r3, #1
 8011030:	d034      	beq.n	801109c <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 8011032:	e05f      	b.n	80110f4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801106c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	8a9a      	ldrh	r2, [r3, #20]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	601a      	str	r2, [r3, #0]

			break;
 801109a:	e02b      	b.n	80110f4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80110cc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	611a      	str	r2, [r3, #16]
			break;
 80110f2:	bf00      	nop
		}

		pdata++;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	334c      	adds	r3, #76	; 0x4c
 80110f8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 80110fa:	7dfb      	ldrb	r3, [r7, #23]
 80110fc:	3301      	adds	r3, #1
 80110fe:	75fb      	strb	r3, [r7, #23]
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	7c9b      	ldrb	r3, [r3, #18]
 8011104:	7dfa      	ldrb	r2, [r7, #23]
 8011106:	429a      	cmp	r2, r3
 8011108:	d38e      	bcc.n	8011028 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 801110a:	bf00      	nop
 801110c:	bf00      	nop
 801110e:	3718      	adds	r7, #24
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 8011114:	b480      	push	{r7}
 8011116:	b089      	sub	sp, #36	; 0x24
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801111c:	2300      	movs	r3, #0
 801111e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3318      	adds	r3, #24
 8011124:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801112c:	3308      	adds	r3, #8
 801112e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8011136:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801113e:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8011140:	4613      	mov	r3, r2
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	4413      	add	r3, r2
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	4413      	add	r3, r2
 8011150:	3302      	adds	r3, #2
 8011152:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8011178:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3724      	adds	r7, #36	; 0x24
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr

08011188 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 8011188:	b480      	push	{r7}
 801118a:	b08b      	sub	sp, #44	; 0x2c
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011192:	2300      	movs	r3, #0
 8011194:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	3318      	adds	r3, #24
 801119a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80111a2:	3308      	adds	r3, #8
 80111a4:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80111ac:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80111b4:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 80111bc:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 80111be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111c2:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 80111c4:	7bfa      	ldrb	r2, [r7, #15]
 80111c6:	6939      	ldr	r1, [r7, #16]
 80111c8:	4613      	mov	r3, r2
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	005b      	lsls	r3, r3, #1
 80111d0:	440b      	add	r3, r1
 80111d2:	3306      	adds	r3, #6
 80111d4:	2200      	movs	r2, #0
 80111d6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80111de:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 80111e0:	2301      	movs	r3, #1
 80111e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111e6:	e01a      	b.n	801121e <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 80111e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	214c      	movs	r1, #76	; 0x4c
 80111f0:	fb01 f303 	mul.w	r3, r1, r3
 80111f4:	4413      	add	r3, r2
 80111f6:	334a      	adds	r3, #74	; 0x4a
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d209      	bcs.n	8011214 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 8011200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	214c      	movs	r1, #76	; 0x4c
 8011208:	fb01 f303 	mul.w	r3, r1, r3
 801120c:	4413      	add	r3, r2
 801120e:	334a      	adds	r3, #74	; 0x4a
 8011210:	881b      	ldrh	r3, [r3, #0]
 8011212:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 8011214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011218:	3301      	adds	r3, #1
 801121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	7c9b      	ldrb	r3, [r3, #18]
 8011222:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011226:	429a      	cmp	r2, r3
 8011228:	d3de      	bcc.n	80111e8 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 801122a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801122c:	2b00      	cmp	r3, #0
 801122e:	d103      	bne.n	8011238 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 8011230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011234:	623b      	str	r3, [r7, #32]
 8011236:	e00e      	b.n	8011256 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 8011238:	89bb      	ldrh	r3, [r7, #12]
 801123a:	039b      	lsls	r3, r3, #14
 801123c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 801123e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011240:	6a3a      	ldr	r2, [r7, #32]
 8011242:	fbb2 f3f3 	udiv	r3, r2, r3
 8011246:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801124e:	d302      	bcc.n	8011256 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 8011250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011254:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 8011256:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 8011258:	6a3b      	ldr	r3, [r7, #32]
 801125a:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 801125c:	6939      	ldr	r1, [r7, #16]
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	005b      	lsls	r3, r3, #1
 8011266:	440b      	add	r3, r1
 8011268:	3306      	adds	r3, #6
 801126a:	4602      	mov	r2, r0
 801126c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 801126e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011272:	4618      	mov	r0, r3
 8011274:	372c      	adds	r7, #44	; 0x2c
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b08a      	sub	sp, #40	; 0x28
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011286:	2300      	movs	r3, #0
 8011288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3318      	adds	r3, #24
 8011290:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8011292:	6a3b      	ldr	r3, [r7, #32]
 8011294:	332c      	adds	r3, #44	; 0x2c
 8011296:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 8011298:	6a3b      	ldr	r3, [r7, #32]
 801129a:	33c2      	adds	r3, #194	; 0xc2
 801129c:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 801129e:	6a3b      	ldr	r3, [r7, #32]
 80112a0:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80112a4:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	3302      	adds	r3, #2
 80112aa:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	785b      	ldrb	r3, [r3, #1]
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80112bc:	461a      	mov	r2, r3
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	4413      	add	r3, r2
 80112c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d11e      	bne.n	8011308 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d10b      	bne.n	80112e8 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d05d      	beq.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	719a      	strb	r2, [r3, #6]
 8011306:	e050      	b.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8011308:	6a3b      	ldr	r3, [r7, #32]
 801130a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801130e:	461a      	mov	r2, r3
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	4413      	add	r3, r2
 8011314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011318:	2b02      	cmp	r3, #2
 801131a:	d11e      	bne.n	801135a <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 801131c:	7bfb      	ldrb	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d10b      	bne.n	801133a <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d034      	beq.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	719a      	strb	r2, [r3, #6]
 8011358:	e027      	b.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011360:	461a      	mov	r2, r3
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	4413      	add	r3, r2
 8011366:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801136a:	2b03      	cmp	r3, #3
 801136c:	d11d      	bne.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 801136e:	7bfb      	ldrb	r3, [r7, #15]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10b      	bne.n	801138c <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00b      	beq.n	80113aa <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 80113aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d109      	bne.n	80113c6 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	f203 3142 	addw	r1, r3, #834	; 0x342
 80113b8:	6a3b      	ldr	r3, [r7, #32]
 80113ba:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80113be:	461a      	mov	r2, r3
 80113c0:	6978      	ldr	r0, [r7, #20]
 80113c2:	f7fd f921 	bl	800e608 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80113c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3728      	adds	r7, #40	; 0x28
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b089      	sub	sp, #36	; 0x24
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	60f8      	str	r0, [r7, #12]
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	603b      	str	r3, [r7, #0]
 80113de:	460b      	mov	r3, r1
 80113e0:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80113e2:	2300      	movs	r3, #0
 80113e4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	3318      	adds	r3, #24
 80113ea:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 80113f2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 80113f4:	7dfb      	ldrb	r3, [r7, #23]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d103      	bne.n	8011402 <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	7afa      	ldrb	r2, [r7, #11]
 80113fe:	701a      	strb	r2, [r3, #0]
 8011400:	e01e      	b.n	8011440 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	7dfb      	ldrb	r3, [r7, #23]
 801140a:	3b01      	subs	r3, #1
 801140c:	429a      	cmp	r2, r3
 801140e:	d111      	bne.n	8011434 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2bff      	cmp	r3, #255	; 0xff
 8011416:	d103      	bne.n	8011420 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2280      	movs	r2, #128	; 0x80
 801141c:	701a      	strb	r2, [r3, #0]
 801141e:	e005      	b.n	801142c <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	3301      	adds	r3, #1
 8011426:	b2da      	uxtb	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	2200      	movs	r2, #0
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	e005      	b.n	8011440 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	3301      	adds	r3, #1
 801143a:	b2da      	uxtb	r2, r3
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 8011440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3724      	adds	r7, #36	; 0x24
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 8011450:	b480      	push	{r7}
 8011452:	b087      	sub	sp, #28
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801145c:	2300      	movs	r3, #0
 801145e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011466:	2b01      	cmp	r3, #1
 8011468:	d118      	bne.n	801149c <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	719a      	strb	r2, [r3, #6]
 801149a:	e03a      	b.n	8011512 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d118      	bne.n	80114d8 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	719a      	strb	r2, [r3, #6]
 80114d6:	e01c      	b.n	8011512 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80114de:	2b03      	cmp	r3, #3
 80114e0:	d117      	bne.n	8011512 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 8011512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011516:	4618      	mov	r0, r3
 8011518:	371c      	adds	r7, #28
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b08a      	sub	sp, #40	; 0x28
 8011526:	af00      	add	r7, sp, #0
 8011528:	60f8      	str	r0, [r7, #12]
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	461a      	mov	r2, r3
 801152e:	460b      	mov	r3, r1
 8011530:	72fb      	strb	r3, [r7, #11]
 8011532:	4613      	mov	r3, r2
 8011534:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011536:	2300      	movs	r3, #0
 8011538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	3318      	adds	r3, #24
 8011540:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 8011546:	2300      	movs	r3, #0
 8011548:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 801154a:	7afa      	ldrb	r2, [r7, #11]
 801154c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801154e:	4611      	mov	r1, r2
 8011550:	4618      	mov	r0, r3
 8011552:	f7fe f8ca 	bl	800f6ea <VL53L1_calc_macro_period_us>
 8011556:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 8011558:	6a3b      	ldr	r3, [r7, #32]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d101      	bne.n	8011562 <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 801155e:	2301      	movs	r3, #1
 8011560:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	031b      	lsls	r3, r3, #12
 8011566:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 8011568:	6a3b      	ldr	r3, [r7, #32]
 801156a:	085b      	lsrs	r3, r3, #1
 801156c:	69ba      	ldr	r2, [r7, #24]
 801156e:	4413      	add	r3, r2
 8011570:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 8011572:	69ba      	ldr	r2, [r7, #24]
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	fbb2 f3f3 	udiv	r3, r2, r3
 801157a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	2bff      	cmp	r3, #255	; 0xff
 8011580:	d904      	bls.n	801158c <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	22ff      	movs	r2, #255	; 0xff
 8011586:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 801158a:	e004      	b.n	8011596 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	7afa      	ldrb	r2, [r7, #11]
 801159a:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 801159e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10a      	bne.n	80115bc <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 80115ac:	461a      	mov	r2, r3
 80115ae:	214b      	movs	r1, #75	; 0x4b
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f007 f9bd 	bl	8018930 <VL53L1_WrByte>
 80115b6:	4603      	mov	r3, r0
 80115b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 80115bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10a      	bne.n	80115da <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 80115ca:	461a      	mov	r2, r3
 80115cc:	2160      	movs	r1, #96	; 0x60
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f007 f9ae 	bl	8018930 <VL53L1_WrByte>
 80115d4:	4603      	mov	r3, r0
 80115d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 80115e0:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 80115e8:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 80115ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d109      	bne.n	8011606 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 80115f2:	f107 0214 	add.w	r2, r7, #20
 80115f6:	2302      	movs	r3, #2
 80115f8:	2178      	movs	r1, #120	; 0x78
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f007 f92c 	bl	8018858 <VL53L1_WriteMulti>
 8011600:	4603      	mov	r3, r0
 8011602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	893a      	ldrh	r2, [r7, #8]
 801160a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 801160e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011612:	2b00      	cmp	r3, #0
 8011614:	d108      	bne.n	8011628 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 8011616:	893b      	ldrh	r3, [r7, #8]
 8011618:	461a      	mov	r2, r3
 801161a:	211c      	movs	r1, #28
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f007 f9b1 	bl	8018984 <VL53L1_WrWord>
 8011622:	4603      	mov	r3, r0
 8011624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 8011628:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801162c:	2b00      	cmp	r3, #0
 801162e:	d108      	bne.n	8011642 <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 8011630:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011632:	461a      	mov	r2, r3
 8011634:	2164      	movs	r1, #100	; 0x64
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f007 f9a4 	bl	8018984 <VL53L1_WrWord>
 801163c:	4603      	mov	r3, r0
 801163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 8011642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011646:	2b00      	cmp	r3, #0
 8011648:	d108      	bne.n	801165c <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 801164a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801164c:	461a      	mov	r2, r3
 801164e:	2166      	movs	r1, #102	; 0x66
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f007 f997 	bl	8018984 <VL53L1_WrWord>
 8011656:	4603      	mov	r3, r0
 8011658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 801165c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011660:	4618      	mov	r0, r3
 8011662:	3728      	adds	r7, #40	; 0x28
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 8011668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801166c:	b0a2      	sub	sp, #136	; 0x88
 801166e:	af00      	add	r7, sp, #0
 8011670:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011672:	2300      	movs	r3, #0
 8011674:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8011678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801167a:	3318      	adds	r3, #24
 801167c:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 801167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011680:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8011684:	3308      	adds	r3, #8
 8011686:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 8011688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801168a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 801168e:	3318      	adds	r3, #24
 8011690:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 8011692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011694:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8011698:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 801169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801169c:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 801169e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116a4:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 80116a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116a8:	69db      	ldr	r3, [r3, #28]
 80116aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 80116ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 80116b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 80116be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 80116c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 80116c6:	4413      	add	r3, r2
 80116c8:	2200      	movs	r2, #0
 80116ca:	461c      	mov	r4, r3
 80116cc:	4615      	mov	r5, r2
 80116ce:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80116d2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80116d6:	4622      	mov	r2, r4
 80116d8:	462b      	mov	r3, r5
 80116da:	f04f 0000 	mov.w	r0, #0
 80116de:	f04f 0100 	mov.w	r1, #0
 80116e2:	0159      	lsls	r1, r3, #5
 80116e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80116e8:	0150      	lsls	r0, r2, #5
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	ebb2 0804 	subs.w	r8, r2, r4
 80116f2:	eb63 0905 	sbc.w	r9, r3, r5
 80116f6:	f04f 0200 	mov.w	r2, #0
 80116fa:	f04f 0300 	mov.w	r3, #0
 80116fe:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011702:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011706:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801170a:	4690      	mov	r8, r2
 801170c:	4699      	mov	r9, r3
 801170e:	eb18 0304 	adds.w	r3, r8, r4
 8011712:	633b      	str	r3, [r7, #48]	; 0x30
 8011714:	eb49 0305 	adc.w	r3, r9, r5
 8011718:	637b      	str	r3, [r7, #52]	; 0x34
 801171a:	f04f 0200 	mov.w	r2, #0
 801171e:	f04f 0300 	mov.w	r3, #0
 8011722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011726:	4629      	mov	r1, r5
 8011728:	00cb      	lsls	r3, r1, #3
 801172a:	4621      	mov	r1, r4
 801172c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011730:	4621      	mov	r1, r4
 8011732:	00ca      	lsls	r2, r1, #3
 8011734:	4610      	mov	r0, r2
 8011736:	4619      	mov	r1, r3
 8011738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801173c:	2200      	movs	r2, #0
 801173e:	643b      	str	r3, [r7, #64]	; 0x40
 8011740:	647a      	str	r2, [r7, #68]	; 0x44
 8011742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011746:	f7ef fa57 	bl	8000bf8 <__aeabi_uldivmod>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8011752:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8011756:	4622      	mov	r2, r4
 8011758:	462b      	mov	r3, r5
 801175a:	f04f 0000 	mov.w	r0, #0
 801175e:	f04f 0100 	mov.w	r1, #0
 8011762:	0159      	lsls	r1, r3, #5
 8011764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011768:	0150      	lsls	r0, r2, #5
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	ebb2 0a04 	subs.w	sl, r2, r4
 8011772:	eb63 0b05 	sbc.w	fp, r3, r5
 8011776:	f04f 0200 	mov.w	r2, #0
 801177a:	f04f 0300 	mov.w	r3, #0
 801177e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011782:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011786:	ea4f 028a 	mov.w	r2, sl, lsl #2
 801178a:	4692      	mov	sl, r2
 801178c:	469b      	mov	fp, r3
 801178e:	eb1a 0304 	adds.w	r3, sl, r4
 8011792:	62bb      	str	r3, [r7, #40]	; 0x28
 8011794:	eb4b 0305 	adc.w	r3, fp, r5
 8011798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801179a:	f04f 0200 	mov.w	r2, #0
 801179e:	f04f 0300 	mov.w	r3, #0
 80117a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80117a6:	4629      	mov	r1, r5
 80117a8:	00cb      	lsls	r3, r1, #3
 80117aa:	4621      	mov	r1, r4
 80117ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80117b0:	4621      	mov	r1, r4
 80117b2:	00ca      	lsls	r2, r1, #3
 80117b4:	4610      	mov	r0, r2
 80117b6:	4619      	mov	r1, r3
 80117b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117bc:	2200      	movs	r2, #0
 80117be:	63bb      	str	r3, [r7, #56]	; 0x38
 80117c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80117c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80117c6:	f7ef fa17 	bl	8000bf8 <__aeabi_uldivmod>
 80117ca:	4602      	mov	r2, r0
 80117cc:	460b      	mov	r3, r1
 80117ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 80117d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117d8:	8ad2      	ldrh	r2, [r2, #22]
 80117da:	fb02 f303 	mul.w	r3, r2, r3
 80117de:	2200      	movs	r2, #0
 80117e0:	623b      	str	r3, [r7, #32]
 80117e2:	627a      	str	r2, [r7, #36]	; 0x24
 80117e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80117e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 80117ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80117f0:	4313      	orrs	r3, r2
 80117f2:	d105      	bne.n	8011800 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 80117f4:	f04f 0201 	mov.w	r2, #1
 80117f8:	f04f 0300 	mov.w	r3, #0
 80117fc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 8011800:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	f04f 0400 	mov.w	r4, #0
 801180c:	f04f 0500 	mov.w	r5, #0
 8011810:	015d      	lsls	r5, r3, #5
 8011812:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8011816:	0154      	lsls	r4, r2, #5
 8011818:	4622      	mov	r2, r4
 801181a:	462b      	mov	r3, r5
 801181c:	1a14      	subs	r4, r2, r0
 801181e:	61bc      	str	r4, [r7, #24]
 8011820:	eb63 0301 	sbc.w	r3, r3, r1
 8011824:	61fb      	str	r3, [r7, #28]
 8011826:	f04f 0200 	mov.w	r2, #0
 801182a:	f04f 0300 	mov.w	r3, #0
 801182e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8011832:	464c      	mov	r4, r9
 8011834:	00a3      	lsls	r3, r4, #2
 8011836:	4644      	mov	r4, r8
 8011838:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801183c:	4644      	mov	r4, r8
 801183e:	00a2      	lsls	r2, r4, #2
 8011840:	4614      	mov	r4, r2
 8011842:	461d      	mov	r5, r3
 8011844:	4623      	mov	r3, r4
 8011846:	181b      	adds	r3, r3, r0
 8011848:	613b      	str	r3, [r7, #16]
 801184a:	462b      	mov	r3, r5
 801184c:	eb41 0303 	adc.w	r3, r1, r3
 8011850:	617b      	str	r3, [r7, #20]
 8011852:	f04f 0200 	mov.w	r2, #0
 8011856:	f04f 0300 	mov.w	r3, #0
 801185a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801185e:	4629      	mov	r1, r5
 8011860:	02cb      	lsls	r3, r1, #11
 8011862:	4621      	mov	r1, r4
 8011864:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8011868:	4621      	mov	r1, r4
 801186a:	02ca      	lsls	r2, r1, #11
 801186c:	461c      	mov	r4, r3
 801186e:	4613      	mov	r3, r2
 8011870:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 8011874:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011878:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801187c:	f7ef f9bc 	bl	8000bf8 <__aeabi_uldivmod>
 8011880:	4602      	mov	r2, r0
 8011882:	460b      	mov	r3, r1
 8011884:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 8011888:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	f04f 0400 	mov.w	r4, #0
 8011894:	f04f 0500 	mov.w	r5, #0
 8011898:	015d      	lsls	r5, r3, #5
 801189a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 801189e:	0154      	lsls	r4, r2, #5
 80118a0:	4622      	mov	r2, r4
 80118a2:	462b      	mov	r3, r5
 80118a4:	1a14      	subs	r4, r2, r0
 80118a6:	60bc      	str	r4, [r7, #8]
 80118a8:	eb63 0301 	sbc.w	r3, r3, r1
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	f04f 0200 	mov.w	r2, #0
 80118b2:	f04f 0300 	mov.w	r3, #0
 80118b6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80118ba:	464c      	mov	r4, r9
 80118bc:	00a3      	lsls	r3, r4, #2
 80118be:	4644      	mov	r4, r8
 80118c0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80118c4:	4644      	mov	r4, r8
 80118c6:	00a2      	lsls	r2, r4, #2
 80118c8:	4614      	mov	r4, r2
 80118ca:	461d      	mov	r5, r3
 80118cc:	4623      	mov	r3, r4
 80118ce:	181b      	adds	r3, r3, r0
 80118d0:	603b      	str	r3, [r7, #0]
 80118d2:	462b      	mov	r3, r5
 80118d4:	eb41 0303 	adc.w	r3, r1, r3
 80118d8:	607b      	str	r3, [r7, #4]
 80118da:	f04f 0200 	mov.w	r2, #0
 80118de:	f04f 0300 	mov.w	r3, #0
 80118e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80118e6:	4629      	mov	r1, r5
 80118e8:	02cb      	lsls	r3, r1, #11
 80118ea:	4621      	mov	r1, r4
 80118ec:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80118f0:	4621      	mov	r1, r4
 80118f2:	02ca      	lsls	r2, r1, #11
 80118f4:	461c      	mov	r4, r3
 80118f6:	4613      	mov	r3, r2
 80118f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 80118fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011900:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011904:	f7ef f978 	bl	8000bf8 <__aeabi_uldivmod>
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 8011910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011914:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 8011916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d802      	bhi.n	8011924 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 801191e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011920:	2202      	movs	r2, #2
 8011922:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 8011924:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8011928:	4618      	mov	r0, r3
 801192a:	3788      	adds	r7, #136	; 0x88
 801192c:	46bd      	mov	sp, r7
 801192e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08011934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b096      	sub	sp, #88	; 0x58
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011942:	2300      	movs	r3, #0
 8011944:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	3318      	adds	r3, #24
 801194c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 801194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011950:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8011954:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 8011956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011958:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 801195c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 801195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011960:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8011964:	2b01      	cmp	r3, #1
 8011966:	d108      	bne.n	801197a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801196e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8011972:	2b01      	cmp	r3, #1
 8011974:	d101      	bne.n	801197a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 8011976:	2301      	movs	r3, #1
 8011978:	e000      	b.n	801197c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 801197a:	2300      	movs	r3, #0
 801197c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 8011980:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8011984:	2b01      	cmp	r3, #1
 8011986:	d107      	bne.n	8011998 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	889b      	ldrh	r3, [r3, #4]
 801198c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	609a      	str	r2, [r3, #8]
 8011996:	e002      	b.n	801199e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 801199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a0:	689b      	ldr	r3, [r3, #8]
 80119a2:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 80119a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a6:	899b      	ldrh	r3, [r3, #12]
 80119a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 80119ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ae:	89db      	ldrh	r3, [r3, #14]
 80119b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d004      	beq.n	80119c8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d125      	bne.n	8011a14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d021      	beq.n	8011a14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80119d0:	f107 0313 	add.w	r3, r7, #19
 80119d4:	4619      	mov	r1, r3
 80119d6:	68f8      	ldr	r0, [r7, #12]
 80119d8:	f000 fe44 	bl	8012664 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80119dc:	7cfb      	ldrb	r3, [r7, #19]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d101      	bne.n	80119e6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 80119e2:	2301      	movs	r3, #1
 80119e4:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 80119e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d103      	bne.n	80119f6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 80119ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	653b      	str	r3, [r7, #80]	; 0x50
 80119f4:	e006      	b.n	8011a04 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 80119f6:	7cfb      	ldrb	r3, [r7, #19]
 80119f8:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 80119fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fc:	3202      	adds	r2, #2
 80119fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a02:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	889b      	ldrh	r3, [r3, #4]
 8011a08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	88db      	ldrh	r3, [r3, #6]
 8011a10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d10a      	bne.n	8011a34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 8011a1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	795b      	ldrb	r3, [r3, #5]
 8011a2a:	f043 0301 	orr.w	r3, r3, #1
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d10a      	bne.n	8011a54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 8011a3e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d106      	bne.n	8011a54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	795b      	ldrb	r3, [r3, #5]
 8011a4a:	f043 0302 	orr.w	r3, r3, #2
 8011a4e:	b2da      	uxtb	r2, r3
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 8011a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d108      	bne.n	8011a7a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8011a78:	e019      	b.n	8011aae <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 8011a7a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a7e:	019b      	lsls	r3, r3, #6
 8011a80:	461a      	mov	r2, r3
 8011a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8011a92:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 8011a94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011a98:	019b      	lsls	r3, r3, #6
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8011aac:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d12a      	bne.n	8011b0e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	689b      	ldr	r3, [r3, #8]
 8011abc:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8011ac0:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 8011ac4:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8011ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac8:	119b      	asrs	r3, r3, #6
 8011aca:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8011acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ad2:	db02      	blt.n	8011ada <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 8011ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ad8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 8011ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011adc:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8011aea:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 8011aee:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8011af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af2:	119b      	asrs	r3, r3, #6
 8011af4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8011af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011afc:	db02      	blt.n	8011b04 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 8011afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b02:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8011b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b06:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	81da      	strh	r2, [r3, #14]
 8011b0c:	e042      	b.n	8011b94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d13d      	bne.n	8011b94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8011b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b1e:	1ad3      	subs	r3, r2, r3
 8011b20:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8011b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	da00      	bge.n	8011b2a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 8011b28:	330f      	adds	r3, #15
 8011b2a:	111b      	asrs	r3, r3, #4
 8011b2c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 8011b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8011b34:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b3a:	4413      	add	r3, r2
 8011b3c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8011b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b44:	db02      	blt.n	8011b4c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 8011b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b4a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 8011b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b4e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8011b58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 8011b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b60:	4a51      	ldr	r2, [pc, #324]	; (8011ca8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 8011b62:	fb82 1203 	smull	r1, r2, r2, r3
 8011b66:	1152      	asrs	r2, r2, #5
 8011b68:	17db      	asrs	r3, r3, #31
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 8011b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8011b74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b7a:	4413      	add	r3, r2
 8011b7c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8011b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b84:	db02      	blt.n	8011b8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 8011b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b8a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8011b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b8e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	785b      	ldrb	r3, [r3, #1]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d177      	bne.n	8011c8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 8011b9c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d073      	beq.n	8011c8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	689b      	ldr	r3, [r3, #8]
 8011bae:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8011bb0:	f107 0313 	add.w	r3, r7, #19
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f000 fd54 	bl	8012664 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 8011bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbe:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8011bc2:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8011bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc6:	3308      	adds	r3, #8
 8011bc8:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 8011bca:	7cfb      	ldrb	r3, [r7, #19]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d041      	beq.n	8011c54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 8011bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d03d      	beq.n	8011c54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 8011bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d03a      	beq.n	8011c54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 8011bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011bea:	fb03 f202 	mul.w	r2, r3, r2
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bf4:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d004      	beq.n	8011c06 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 8011c00:	69ba      	ldr	r2, [r7, #24]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d303      	bcc.n	8011c0e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	719a      	strb	r2, [r3, #6]
 8011c0c:	e022      	b.n	8011c54 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 8011c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c16:	617b      	str	r3, [r7, #20]
				cval = 0;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8011c22:	e00e      	b.n	8011c42 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 8011c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	4413      	add	r3, r2
 8011c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 8011c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c30:	601a      	str	r2, [r3, #0]
					pcpo++;
 8011c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c34:	3304      	adds	r3, #4
 8011c36:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 8011c38:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8011c42:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d3ea      	bcc.n	8011c24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 8011c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c52:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	799b      	ldrb	r3, [r3, #6]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d017      	beq.n	8011c8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8011c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c62:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8011c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8011c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c76:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	789b      	ldrb	r3, [r3, #2]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d105      	bne.n	8011c8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2200      	movs	r2, #0
 8011c84:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 8011c8c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d002      	beq.n	8011c9a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	2201      	movs	r2, #1
 8011c98:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8011c9a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3758      	adds	r7, #88	; 0x58
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	66666667 	.word	0x66666667

08011cac <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 8011cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011cb0:	b0a2      	sub	sp, #136	; 0x88
 8011cb2:	af02      	add	r7, sp, #8
 8011cb4:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	3318      	adds	r3, #24
 8011cc0:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8011cc8:	3308      	adds	r3, #8
 8011cca:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 8011ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cce:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8011cd2:	3318      	adds	r3, #24
 8011cd4:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 8011cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cd8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8011cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 8011cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ce0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8011ce4:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 8011ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ce8:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 8011cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cec:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8011cf0:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 8011d04:	2300      	movs	r3, #0
 8011d06:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 8011d0e:	f04f 0200 	mov.w	r2, #0
 8011d12:	f04f 0300 	mov.w	r3, #0
 8011d16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 8011d24:	2300      	movs	r3, #0
 8011d26:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8011d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d3e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d108      	bne.n	8011d58 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011d4c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d101      	bne.n	8011d58 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 8011d54:	2301      	movs	r3, #1
 8011d56:	e000      	b.n	8011d5a <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8011d5e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8011d62:	4619      	mov	r1, r3
 8011d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d66:	f000 fc7d 	bl	8012664 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 8011d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d003      	beq.n	8011d7a <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 8011d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d102      	bne.n	8011d80 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8011d80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011d82:	f000 fb15 	bl	80123b0 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8011d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00a      	beq.n	8011da4 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 8011d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011d96:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 8011d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d9c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d901      	bls.n	8011da8 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 8011da4:	2301      	movs	r3, #1
 8011da6:	e000      	b.n	8011daa <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 8011da8:	2300      	movs	r3, #0
 8011daa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 8011dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d006      	beq.n	8011dc4 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 8011db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011db8:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 8011dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d101      	bne.n	8011dc8 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e000      	b.n	8011dca <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 8011dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dd0:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8011dd2:	2b01      	cmp	r3, #1
 8011dd4:	d10e      	bne.n	8011df4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 8011dd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d00a      	beq.n	8011df4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 8011dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de0:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 8011de4:	2b09      	cmp	r3, #9
 8011de6:	d105      	bne.n	8011df4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8011de8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d001      	beq.n	8011df4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 8011df0:	2301      	movs	r3, #1
 8011df2:	e000      	b.n	8011df6 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 8011df4:	2300      	movs	r3, #0
	run_smudge_detection =
 8011df6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 8011dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dfc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8011e00:	2b09      	cmp	r3, #9
 8011e02:	f000 80a6 	beq.w	8011f52 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 8011e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e08:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	f040 80a1 	bne.w	8011f52 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 8011e10:	2302      	movs	r3, #2
 8011e12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 8011e16:	2300      	movs	r3, #0
 8011e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8011e1c:	e02d      	b.n	8011e7a <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 8011e1e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8011e22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e24:	234c      	movs	r3, #76	; 0x4c
 8011e26:	fb01 f303 	mul.w	r3, r1, r3
 8011e2a:	4413      	add	r3, r2
 8011e2c:	335e      	adds	r3, #94	; 0x5e
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	2b09      	cmp	r3, #9
 8011e32:	d11d      	bne.n	8011e70 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 8011e34:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8011e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e3a:	234c      	movs	r3, #76	; 0x4c
 8011e3c:	fb01 f303 	mul.w	r3, r1, r3
 8011e40:	4413      	add	r3, r2
 8011e42:	335a      	adds	r3, #90	; 0x5a
 8011e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e48:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 8011e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	dc03      	bgt.n	8011e5a <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011e58:	e00a      	b.n	8011e70 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 8011e5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d106      	bne.n	8011e70 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 8011e62:	2301      	movs	r3, #1
 8011e64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 8011e68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011e6c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 8011e70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011e74:	3301      	adds	r3, #1
 8011e76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8011e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7c:	7c9a      	ldrb	r2, [r3, #18]
 8011e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011e82:	4293      	cmp	r3, r2
 8011e84:	d3cb      	bcc.n	8011e1e <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 8011e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e8a:	2b02      	cmp	r3, #2
 8011e8c:	d102      	bne.n	8011e94 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 8011e94:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 8011e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e9a:	234c      	movs	r3, #76	; 0x4c
 8011e9c:	fb01 f303 	mul.w	r3, r1, r3
 8011ea0:	4413      	add	r3, r2
 8011ea2:	3348      	adds	r3, #72	; 0x48
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 8011ea8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d150      	bne.n	8011f52 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 8011eb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	469a      	mov	sl, r3
 8011eb6:	4693      	mov	fp, r2
 8011eb8:	4652      	mov	r2, sl
 8011eba:	465b      	mov	r3, fp
 8011ebc:	f04f 0000 	mov.w	r0, #0
 8011ec0:	f04f 0100 	mov.w	r1, #0
 8011ec4:	0159      	lsls	r1, r3, #5
 8011ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011eca:	0150      	lsls	r0, r2, #5
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8011ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8011ed8:	f04f 0200 	mov.w	r2, #0
 8011edc:	f04f 0300 	mov.w	r3, #0
 8011ee0:	00ab      	lsls	r3, r5, #2
 8011ee2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011ee6:	00a2      	lsls	r2, r4, #2
 8011ee8:	4614      	mov	r4, r2
 8011eea:	461d      	mov	r5, r3
 8011eec:	eb14 080a 	adds.w	r8, r4, sl
 8011ef0:	eb45 090b 	adc.w	r9, r5, fp
 8011ef4:	f04f 0200 	mov.w	r2, #0
 8011ef8:	f04f 0300 	mov.w	r3, #0
 8011efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011f08:	4690      	mov	r8, r2
 8011f0a:	4699      	mov	r9, r3
 8011f0c:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 8011f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8011f14:	f04f 0200 	mov.w	r2, #0
 8011f18:	f04f 0300 	mov.w	r3, #0
 8011f1c:	024b      	lsls	r3, r1, #9
 8011f1e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8011f22:	0242      	lsls	r2, r0, #9
 8011f24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8011f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	61bb      	str	r3, [r7, #24]
 8011f30:	61fa      	str	r2, [r7, #28]
 8011f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011f36:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	428a      	cmp	r2, r1
 8011f3e:	4629      	mov	r1, r5
 8011f40:	418b      	sbcs	r3, r1
 8011f42:	d203      	bcs.n	8011f4c <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 8011f44:	2301      	movs	r3, #1
 8011f46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011f4a:	e002      	b.n	8011f52 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 8011f52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 810b 	beq.w	8012172 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 8011f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f5e:	2200      	movs	r2, #0
 8011f60:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 8011f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f64:	f7ff fb80 	bl	8011668 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 8011f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f6a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8011f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 8011f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 8011f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8011f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f7e:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 8011f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	1ad2      	subs	r2, r2, r3
 8011f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8c:	4413      	add	r3, r2
 8011f8e:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 8011f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	da02      	bge.n	8011f9c <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 8011f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f98:	425b      	negs	r3, r3
 8011f9a:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8011f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f9e:	699b      	ldr	r3, [r3, #24]
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	dd0c      	ble.n	8011fc2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 8011fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 8011faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8011fac:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 8011fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	da03      	bge.n	8011fbc <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 8011fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	709a      	strb	r2, [r3, #2]
 8011fba:	e002      	b.n	8011fc2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 8011fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fbe:	2202      	movs	r2, #2
 8011fc0:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 8011fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fca:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 8011fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fd2:	695b      	ldr	r3, [r3, #20]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d906      	bls.n	8011fe6 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 8011fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fda:	2201      	movs	r2, #1
 8011fdc:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 8011fde:	2302      	movs	r3, #2
 8011fe0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011fe4:	e014      	b.n	8012010 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 8011fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fee:	2000      	movs	r0, #0
 8011ff0:	6139      	str	r1, [r7, #16]
 8011ff2:	6178      	str	r0, [r7, #20]
 8011ff4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	1851      	adds	r1, r2, r1
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	4629      	mov	r1, r5
 8012000:	eb43 0101 	adc.w	r1, r3, r1
 8012004:	60f9      	str	r1, [r7, #12]
 8012006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012008:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801200c:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 8012010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	429a      	cmp	r2, r3
 801201a:	d202      	bcs.n	8012022 <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 801201c:	2301      	movs	r3, #1
 801201e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 8012022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012024:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8012028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2200      	movs	r2, #0
 801202e:	603b      	str	r3, [r7, #0]
 8012030:	607a      	str	r2, [r7, #4]
 8012032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012036:	f7ee fddf 	bl	8000bf8 <__aeabi_uldivmod>
 801203a:	4602      	mov	r2, r0
 801203c:	460b      	mov	r3, r1
		xtalk_offset_out =
 801203e:	4613      	mov	r3, r2
 8012040:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 8012042:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012046:	1ad2      	subs	r2, r2, r3
 8012048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204a:	4413      	add	r3, r2
 801204c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 801204e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012050:	2b00      	cmp	r3, #0
 8012052:	da02      	bge.n	801205a <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 8012054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012056:	425b      	negs	r3, r3
 8012058:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 801205a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801205e:	2b00      	cmp	r3, #0
 8012060:	d112      	bne.n	8012088 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 8012062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012064:	69db      	ldr	r3, [r3, #28]
 8012066:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8012068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801206a:	4293      	cmp	r3, r2
 801206c:	db0c      	blt.n	8012088 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 801206e:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 8012070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8012072:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 8012074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012076:	429a      	cmp	r2, r3
 8012078:	da03      	bge.n	8012082 <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 801207a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801207c:	2201      	movs	r2, #1
 801207e:	70da      	strb	r2, [r3, #3]
 8012080:	e002      	b.n	8012088 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 8012082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012084:	2202      	movs	r2, #2
 8012086:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 8012088:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801208c:	2b00      	cmp	r3, #0
 801208e:	d108      	bne.n	80120a2 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 8012090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012092:	69db      	ldr	r3, [r3, #28]
 8012094:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8012096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012098:	4293      	cmp	r3, r2
 801209a:	da02      	bge.n	80120a2 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 801209c:	2302      	movs	r3, #2
 801209e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 80120a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120a4:	2200      	movs	r2, #0
 80120a6:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 80120a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d112      	bne.n	80120d6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 80120b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120b2:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00e      	beq.n	80120d6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 80120b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120ba:	6a1b      	ldr	r3, [r3, #32]
 80120bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80120c0:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 80120c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d905      	bls.n	80120d6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 80120ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120cc:	2201      	movs	r2, #1
 80120ce:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 80120d0:	2302      	movs	r3, #2
 80120d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 80120d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120d8:	7c1b      	ldrb	r3, [r3, #16]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d007      	beq.n	80120ee <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 80120de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120e0:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 80120e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d902      	bls.n	80120ee <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 80120e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80120ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120f0:	7c1b      	ldrb	r3, [r3, #16]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d107      	bne.n	8012106 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 80120f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120f8:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80120fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d202      	bcs.n	8012106 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 8012100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 8012106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012108:	089b      	lsrs	r3, r3, #2
 801210a:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 801210c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801210e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012112:	d301      	bcc.n	8012118 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 8012114:	4b3e      	ldr	r3, [pc, #248]	; (8012210 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 8012116:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 8012118:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10d      	bne.n	801213c <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8012120:	2300      	movs	r3, #0
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	2301      	movs	r3, #1
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801212a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801212c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801212e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012130:	f7ff fc00 	bl	8011934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 8012134:	2302      	movs	r3, #2
 8012136:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801213a:	e009      	b.n	8012150 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 801213c:	2301      	movs	r3, #1
 801213e:	9301      	str	r3, [sp, #4]
 8012140:	2301      	movs	r3, #1
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012148:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801214a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801214c:	f7ff fbf2 	bl	8011934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8012150:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012154:	2b02      	cmp	r3, #2
 8012156:	d10c      	bne.n	8012172 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 8012158:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801215a:	f04f 0200 	mov.w	r2, #0
 801215e:	f04f 0300 	mov.w	r3, #0
 8012162:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8012166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 801216c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801216e:	2200      	movs	r2, #0
 8012170:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 8012172:	2300      	movs	r3, #0
 8012174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 8012178:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801217c:	2b01      	cmp	r3, #1
 801217e:	d140      	bne.n	8012202 <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 8012180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012182:	691b      	ldr	r3, [r3, #16]
 8012184:	1c5a      	adds	r2, r3, #1
 8012186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012188:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 801218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801218c:	691a      	ldr	r2, [r3, #16]
 801218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012192:	429a      	cmp	r2, r3
 8012194:	d202      	bcs.n	801219c <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 8012196:	2301      	movs	r3, #1
 8012198:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 801219c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a0:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 80121a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d110      	bne.n	80121cc <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80121aa:	2300      	movs	r3, #0
 80121ac:	9301      	str	r3, [sp, #4]
 80121ae:	2300      	movs	r3, #0
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80121b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80121b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121ba:	f7ff fbbb 	bl	8011934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 80121be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121c0:	2202      	movs	r2, #2
 80121c2:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 80121c4:	2302      	movs	r3, #2
 80121c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80121ca:	e009      	b.n	80121e0 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80121cc:	2301      	movs	r3, #1
 80121ce:	9301      	str	r3, [sp, #4]
 80121d0:	2300      	movs	r3, #0
 80121d2:	9300      	str	r3, [sp, #0]
 80121d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80121d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80121da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121dc:	f7ff fbaa 	bl	8011934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 80121e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d10c      	bne.n	8012202 <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 80121e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80121ea:	f04f 0200 	mov.w	r2, #0
 80121ee:	f04f 0300 	mov.w	r3, #0
 80121f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 80121f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121f8:	2200      	movs	r2, #0
 80121fa:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 80121fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121fe:	2200      	movs	r2, #0
 8012200:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012202:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 8012206:	4618      	mov	r0, r3
 8012208:	3780      	adds	r7, #128	; 0x80
 801220a:	46bd      	mov	sp, r7
 801220c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012210:	0003ffff 	.word	0x0003ffff

08012214 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b086      	sub	sp, #24
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801221c:	2300      	movs	r3, #0
 801221e:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	3318      	adds	r3, #24
 8012224:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801222c:	3308      	adds	r3, #8
 801222e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012236:	2201      	movs	r2, #1
 8012238:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012242:	2201      	movs	r2, #1
 8012244:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801224e:	2200      	movs	r2, #0
 8012250:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801225a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801225e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012268:	461a      	mov	r2, r3
 801226a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801226e:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012278:	461a      	mov	r2, r3
 801227a:	2300      	movs	r3, #0
 801227c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012286:	2200      	movs	r2, #0
 8012288:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012292:	461a      	mov	r2, r3
 8012294:	23c8      	movs	r3, #200	; 0xc8
 8012296:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122a0:	461a      	mov	r2, r3
 80122a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80122a6:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122b0:	461a      	mov	r2, r3
 80122b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122b6:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122c0:	461a      	mov	r2, r3
 80122c2:	4b3a      	ldr	r3, [pc, #232]	; (80123ac <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 80122c4:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122ce:	461a      	mov	r2, r3
 80122d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80122d4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122de:	2200      	movs	r2, #0
 80122e0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80122ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80122fc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012306:	2200      	movs	r2, #0
 8012308:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012312:	461a      	mov	r2, r3
 8012314:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 8012318:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012322:	461a      	mov	r2, r3
 8012324:	230a      	movs	r3, #10
 8012326:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012330:	461a      	mov	r2, r3
 8012332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012336:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012340:	f44f 7261 	mov.w	r2, #900	; 0x384
 8012344:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801234e:	461a      	mov	r2, r3
 8012350:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012354:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801235e:	461a      	mov	r2, r3
 8012360:	2300      	movs	r3, #0
 8012362:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801236c:	461a      	mov	r2, r3
 801236e:	2300      	movs	r3, #0
 8012370:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801237a:	3310      	adds	r3, #16
 801237c:	4619      	mov	r1, r3
 801237e:	f04f 0200 	mov.w	r2, #0
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012390:	461a      	mov	r2, r3
 8012392:	2300      	movs	r3, #0
 8012394:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f000 f809 	bl	80123b0 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 801239e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3718      	adds	r7, #24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	000ff800 	.word	0x000ff800

080123b0 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b085      	sub	sp, #20
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80123c2:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2200      	movs	r2, #0
 80123c8:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2200      	movs	r2, #0
 80123ce:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2200      	movs	r2, #0
 80123d4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	2200      	movs	r2, #0
 80123da:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	2200      	movs	r2, #0
 80123e0:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	2200      	movs	r2, #0
 80123e6:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	2200      	movs	r2, #0
 80123ec:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2200      	movs	r2, #0
 80123f2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	2200      	movs	r2, #0
 80123f8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2200      	movs	r2, #0
 80123fe:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 8012400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012404:	4618      	mov	r0, r3
 8012406:	3714      	adds	r7, #20
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012418:	2300      	movs	r3, #0
 801241a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3318      	adds	r3, #24
 8012420:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012428:	461a      	mov	r2, r3
 801242a:	2300      	movs	r3, #0
 801242c:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012436:	2200      	movs	r2, #0
 8012438:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012442:	2200      	movs	r2, #0
 8012444:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 801244e:	3308      	adds	r3, #8
 8012450:	2218      	movs	r2, #24
 8012452:	2100      	movs	r1, #0
 8012454:	4618      	mov	r0, r3
 8012456:	f013 f815 	bl	8025484 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 801245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801245e:	4618      	mov	r0, r3
 8012460:	3710      	adds	r7, #16
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8012466:	b480      	push	{r7}
 8012468:	b085      	sub	sp, #20
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801246e:	2300      	movs	r3, #0
 8012470:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	3318      	adds	r3, #24
 8012476:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801247e:	2203      	movs	r2, #3
 8012480:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801248a:	2200      	movs	r2, #0
 801248c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012496:	2200      	movs	r2, #0
 8012498:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124a2:	2200      	movs	r2, #0
 80124a4:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124ae:	2200      	movs	r2, #0
 80124b0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124ba:	2200      	movs	r2, #0
 80124bc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124d2:	461a      	mov	r2, r3
 80124d4:	2300      	movs	r3, #0
 80124d6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124e0:	2200      	movs	r2, #0
 80124e2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 80124e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3714      	adds	r7, #20
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr

080124f6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 80124f6:	b480      	push	{r7}
 80124f8:	b085      	sub	sp, #20
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80124fe:	2300      	movs	r3, #0
 8012500:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	3318      	adds	r3, #24
 8012506:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801250e:	22ff      	movs	r2, #255	; 0xff
 8012510:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801251a:	2200      	movs	r2, #0
 801251c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012526:	461a      	mov	r2, r3
 8012528:	2300      	movs	r3, #0
 801252a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012534:	2200      	movs	r2, #0
 8012536:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012540:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8012544:	2b00      	cmp	r3, #0
 8012546:	d007      	beq.n	8012558 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801254e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801255e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8012562:	2b00      	cmp	r3, #0
 8012564:	d007      	beq.n	8012576 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801256c:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	2200      	movs	r2, #0
 801257a:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 801257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3714      	adds	r7, #20
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr

0801258e <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 801258e:	b480      	push	{r7}
 8012590:	b087      	sub	sp, #28
 8012592:	af00      	add	r7, sp, #0
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801259a:	2300      	movs	r3, #0
 801259c:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2201      	movs	r2, #1
 80125a2:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2200      	movs	r2, #0
 80125a8:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	229b      	movs	r2, #155	; 0x9b
 80125ae:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80125b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	371c      	adds	r7, #28
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3318      	adds	r3, #24
 80125cc:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80125ce:	2300      	movs	r3, #0
 80125d0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80125de:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80125ee:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 80125f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 801260a:	f003 0303 	and.w	r3, r3, #3
 801260e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012616:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 801261e:	4413      	add	r3, r2
 8012620:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012636:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012640:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801264a:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 8012654:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3714      	adds	r7, #20
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8012664:	b480      	push	{r7}
 8012666:	b087      	sub	sp, #28
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3318      	adds	r3, #24
 8012672:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012674:	2300      	movs	r3, #0
 8012676:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 8012678:	2300      	movs	r3, #0
 801267a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012682:	2b07      	cmp	r3, #7
 8012684:	bf0c      	ite	eq
 8012686:	2301      	moveq	r3, #1
 8012688:	2300      	movne	r3, #0
 801268a:	b2db      	uxtb	r3, r3
 801268c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 801268e:	2300      	movs	r3, #0
 8012690:	75fb      	strb	r3, [r7, #23]
 8012692:	e019      	b.n	80126c8 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 8012694:	7df9      	ldrb	r1, [r7, #23]
 8012696:	7bbb      	ldrb	r3, [r7, #14]
 8012698:	6938      	ldr	r0, [r7, #16]
 801269a:	461a      	mov	r2, r3
 801269c:	0052      	lsls	r2, r2, #1
 801269e:	441a      	add	r2, r3
 80126a0:	0153      	lsls	r3, r2, #5
 80126a2:	461a      	mov	r2, r3
 80126a4:	460b      	mov	r3, r1
 80126a6:	005b      	lsls	r3, r3, #1
 80126a8:	440b      	add	r3, r1
 80126aa:	019b      	lsls	r3, r3, #6
 80126ac:	4413      	add	r3, r2
 80126ae:	4403      	add	r3, r0
 80126b0:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 80126b4:	3314      	adds	r3, #20
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	dd02      	ble.n	80126c2 <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 80126bc:	7dbb      	ldrb	r3, [r7, #22]
 80126be:	3301      	adds	r3, #1
 80126c0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 80126c2:	7dfb      	ldrb	r3, [r7, #23]
 80126c4:	3301      	adds	r3, #1
 80126c6:	75fb      	strb	r3, [r7, #23]
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	2b05      	cmp	r3, #5
 80126cc:	d9e2      	bls.n	8012694 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	7dba      	ldrb	r2, [r7, #22]
 80126d2:	701a      	strb	r2, [r3, #0]

	return status;
 80126d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	371c      	adds	r7, #28
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b085      	sub	sp, #20
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4603      	mov	r3, r0
 80126ec:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 80126f2:	88fb      	ldrh	r3, [r7, #6]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d005      	beq.n	8012704 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80126f8:	88fb      	ldrh	r3, [r7, #6]
 80126fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80126fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8012702:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 8012704:	68fb      	ldr	r3, [r7, #12]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3714      	adds	r7, #20
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr

08012712 <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 8012712:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012716:	b089      	sub	sp, #36	; 0x24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 8012722:	f04f 0200 	mov.w	r2, #0
 8012726:	f04f 0300 	mov.w	r3, #0
 801272a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	fb02 f303 	mul.w	r3, r2, r3
 801273a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	0b1b      	lsrs	r3, r3, #12
 8012740:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	2200      	movs	r2, #0
 8012746:	469a      	mov	sl, r3
 8012748:	4693      	mov	fp, r2
 801274a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	68ba      	ldr	r2, [r7, #8]
 8012752:	fb02 f303 	mul.w	r3, r2, r3
 8012756:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	091b      	lsrs	r3, r3, #4
 801275c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	2200      	movs	r2, #0
 8012762:	4698      	mov	r8, r3
 8012764:	4691      	mov	r9, r2
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	fb08 f203 	mul.w	r2, r8, r3
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	fb09 f303 	mul.w	r3, r9, r3
 8012772:	4413      	add	r3, r2
 8012774:	69ba      	ldr	r2, [r7, #24]
 8012776:	fba2 4508 	umull	r4, r5, r2, r8
 801277a:	442b      	add	r3, r5
 801277c:	461d      	mov	r5, r3
 801277e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8012782:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 8012786:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801278a:	f04f 0200 	mov.w	r2, #0
 801278e:	f04f 0300 	mov.w	r3, #0
 8012792:	0b02      	lsrs	r2, r0, #12
 8012794:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8012798:	0b0b      	lsrs	r3, r1, #12
 801279a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 801279e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d305      	bcc.n	80127b2 <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 80127a6:	f04f 32ff 	mov.w	r2, #4294967295
 80127aa:	f04f 0300 	mov.w	r3, #0
 80127ae:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	617b      	str	r3, [r7, #20]

	return duration_us;
 80127b6:	697b      	ldr	r3, [r7, #20]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3724      	adds	r7, #36	; 0x24
 80127bc:	46bd      	mov	sp, r7
 80127be:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80127c2:	4770      	bx	lr

080127c4 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 80127c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127c8:	b096      	sub	sp, #88	; 0x58
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80127ce:	460b      	mov	r3, r1
 80127d0:	627a      	str	r2, [r7, #36]	; 0x24
 80127d2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 80127d4:	f04f 0200 	mov.w	r2, #0
 80127d8:	f04f 0300 	mov.w	r3, #0
 80127dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 80127e0:	f04f 0200 	mov.w	r2, #0
 80127e4:	f04f 0300 	mov.w	r3, #0
 80127e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	17da      	asrs	r2, r3, #31
 80127f4:	469a      	mov	sl, r3
 80127f6:	4693      	mov	fp, r2
 80127f8:	4652      	mov	r2, sl
 80127fa:	465b      	mov	r3, fp
 80127fc:	f04f 0000 	mov.w	r0, #0
 8012800:	f04f 0100 	mov.w	r1, #0
 8012804:	0159      	lsls	r1, r3, #5
 8012806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801280a:	0150      	lsls	r0, r2, #5
 801280c:	4602      	mov	r2, r0
 801280e:	460b      	mov	r3, r1
 8012810:	ebb2 040a 	subs.w	r4, r2, sl
 8012814:	eb63 050b 	sbc.w	r5, r3, fp
 8012818:	f04f 0200 	mov.w	r2, #0
 801281c:	f04f 0300 	mov.w	r3, #0
 8012820:	00ab      	lsls	r3, r5, #2
 8012822:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8012826:	00a2      	lsls	r2, r4, #2
 8012828:	4614      	mov	r4, r2
 801282a:	461d      	mov	r5, r3
 801282c:	eb14 080a 	adds.w	r8, r4, sl
 8012830:	eb45 090b 	adc.w	r9, r5, fp
 8012834:	f04f 0200 	mov.w	r2, #0
 8012838:	f04f 0300 	mov.w	r3, #0
 801283c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8012840:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 8012844:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 8012848:	4690      	mov	r8, r2
 801284a:	4699      	mov	r9, r3
 801284c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 8012850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00d      	beq.n	8012872 <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 8012856:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012858:	2200      	movs	r2, #0
 801285a:	61bb      	str	r3, [r7, #24]
 801285c:	61fa      	str	r2, [r7, #28]
 801285e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012862:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012866:	f7ee f9c7 	bl	8000bf8 <__aeabi_uldivmod>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	2b00      	cmp	r3, #0
 8012876:	d02a      	beq.n	80128ce <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8012878:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801287c:	f04f 0200 	mov.w	r2, #0
 8012880:	f04f 0300 	mov.w	r3, #0
 8012884:	02cb      	lsls	r3, r1, #11
 8012886:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801288a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 801288c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801288e:	0849      	lsrs	r1, r1, #1
 8012890:	2000      	movs	r0, #0
 8012892:	6139      	str	r1, [r7, #16]
 8012894:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8012896:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801289a:	4621      	mov	r1, r4
 801289c:	1851      	adds	r1, r2, r1
 801289e:	6039      	str	r1, [r7, #0]
 80128a0:	4629      	mov	r1, r5
 80128a2:	eb43 0101 	adc.w	r1, r3, r1
 80128a6:	6079      	str	r1, [r7, #4]
 80128a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80128ac:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 80128b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b2:	2200      	movs	r2, #0
 80128b4:	60bb      	str	r3, [r7, #8]
 80128b6:	60fa      	str	r2, [r7, #12]
 80128b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80128bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80128c0:	f7ee f99a 	bl	8000bf8 <__aeabi_uldivmod>
 80128c4:	4602      	mov	r2, r0
 80128c6:	460b      	mov	r3, r1
 80128c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80128cc:	e00b      	b.n	80128e6 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 80128ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80128d2:	f04f 0200 	mov.w	r2, #0
 80128d6:	f04f 0300 	mov.w	r3, #0
 80128da:	02cb      	lsls	r3, r1, #11
 80128dc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80128e0:	02c2      	lsls	r2, r0, #11
 80128e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 80128e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128e8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 80128ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3758      	adds	r7, #88	; 0x58
 80128f0:	46bd      	mov	sp, r7
 80128f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080128f6 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 80128f6:	b480      	push	{r7}
 80128f8:	b085      	sub	sp, #20
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8012902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012906:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 8012908:	e002      	b.n	8012910 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	089b      	lsrs	r3, r3, #2
 801290e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8012910:	68ba      	ldr	r2, [r7, #8]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	429a      	cmp	r2, r3
 8012916:	d8f8      	bhi.n	801290a <VL53L1_isqrt+0x14>

	while (bit != 0) {
 8012918:	e017      	b.n	801294a <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 801291a:	68fa      	ldr	r2, [r7, #12]
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	4413      	add	r3, r2
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	429a      	cmp	r2, r3
 8012924:	d30b      	bcc.n	801293e <VL53L1_isqrt+0x48>
			num -= res + bit;
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	4413      	add	r3, r2
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	085b      	lsrs	r3, r3, #1
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	4413      	add	r3, r2
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	e002      	b.n	8012944 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	085b      	lsrs	r3, r3, #1
 8012942:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	089b      	lsrs	r3, r3, #2
 8012948:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d1e4      	bne.n	801291a <VL53L1_isqrt+0x24>
	}

	return res;
 8012950:	68fb      	ldr	r3, [r7, #12]
}
 8012952:	4618      	mov	r0, r3
 8012954:	3714      	adds	r7, #20
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr

0801295e <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b084      	sub	sp, #16
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012974:	4618      	mov	r0, r3
 8012976:	f000 faa5 	bl	8012ec4 <VL53L1_decode_vcsel_period>
 801297a:	4603      	mov	r3, r0
	period = 2048 *
 801297c:	02db      	lsls	r3, r3, #11
 801297e:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801298a:	461a      	mov	r2, r3
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	4413      	add	r3, r2
 8012990:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012998:	02db      	lsls	r3, r3, #11
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	4413      	add	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80129a6:	02db      	lsls	r3, r3, #11
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d009      	beq.n	80129c8 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	68ba      	ldr	r2, [r7, #8]
 80129b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80129bc:	68b9      	ldr	r1, [r7, #8]
 80129be:	fb01 f202 	mul.w	r2, r1, r2
 80129c2:	1a9b      	subs	r3, r3, r2
 80129c4:	60fb      	str	r3, [r7, #12]
 80129c6:	e001      	b.n	80129cc <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 80129c8:	2300      	movs	r3, #0
 80129ca:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 80129d6:	bf00      	nop
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 80129de:	b580      	push	{r7, lr}
 80129e0:	b084      	sub	sp, #16
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
 80129e6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 80129ec:	2300      	movs	r3, #0
 80129ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 80129f0:	6838      	ldr	r0, [r7, #0]
 80129f2:	f000 fb90 	bl	8013116 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff ff7a 	bl	80128f6 <VL53L1_isqrt>
 8012a02:	4603      	mov	r3, r0
	VL53L1_p_032  =
 8012a04:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	fb02 f303 	mul.w	r3, r2, r3
 8012a0e:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	3307      	adds	r3, #7
 8012a14:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	111b      	asrs	r3, r3, #4
 8012a1a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a22:	68ba      	ldr	r2, [r7, #8]
 8012a24:	4413      	add	r3, r2
 8012a26:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	2200      	movs	r2, #0
 8012a34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	73fb      	strb	r3, [r7, #15]
 8012a3c:	e01e      	b.n	8012a7c <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 8012a3e:	7bfa      	ldrb	r2, [r7, #15]
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	3206      	adds	r2, #6
 8012a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	dd13      	ble.n	8012a76 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8012a54:	7bf9      	ldrb	r1, [r7, #15]
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	3106      	adds	r1, #6
 8012a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a5e:	441a      	add	r2, r3
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8012a76:	7bfb      	ldrb	r3, [r7, #15]
 8012a78:	3301      	adds	r3, #1
 8012a7a:	73fb      	strb	r3, [r7, #15]
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	7a9b      	ldrb	r3, [r3, #10]
 8012a80:	7bfa      	ldrb	r2, [r7, #15]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d3db      	bcc.n	8012a3e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d01c      	beq.n	8012aca <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 8012aa2:	683a      	ldr	r2, [r7, #0]
 8012aa4:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8012aa8:	0852      	lsrs	r2, r2, #1
 8012aaa:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8012aac:	441a      	add	r2, r3
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 8012ac0:	fb93 f2f2 	sdiv	r2, r3, r2
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 8012aca:	bf00      	nop
 8012acc:	3710      	adds	r7, #16
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}

08012ad2 <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8012ad2:	b480      	push	{r7}
 8012ad4:	b085      	sub	sp, #20
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	7b1b      	ldrb	r3, [r3, #12]
 8012aea:	f003 0307 	and.w	r3, r3, #7
 8012aee:	2b07      	cmp	r3, #7
 8012af0:	d13a      	bne.n	8012b68 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 8012af2:	2300      	movs	r3, #0
 8012af4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8012af6:	2300      	movs	r3, #0
 8012af8:	73bb      	strb	r3, [r7, #14]
 8012afa:	e01f      	b.n	8012b3c <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 8012afc:	7bbb      	ldrb	r3, [r7, #14]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	4413      	add	r3, r2
 8012b02:	7b1b      	ldrb	r3, [r3, #12]
 8012b04:	f003 0307 	and.w	r3, r3, #7
 8012b08:	2b07      	cmp	r3, #7
 8012b0a:	d014      	beq.n	8012b36 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8012b0c:	7bba      	ldrb	r2, [r7, #14]
 8012b0e:	7b7b      	ldrb	r3, [r7, #13]
 8012b10:	6879      	ldr	r1, [r7, #4]
 8012b12:	440a      	add	r2, r1
 8012b14:	7b11      	ldrb	r1, [r2, #12]
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	4413      	add	r3, r2
 8012b1a:	460a      	mov	r2, r1
 8012b1c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 8012b1e:	7bba      	ldrb	r2, [r7, #14]
 8012b20:	7b7b      	ldrb	r3, [r7, #13]
 8012b22:	6879      	ldr	r1, [r7, #4]
 8012b24:	440a      	add	r2, r1
 8012b26:	7c91      	ldrb	r1, [r2, #18]
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	460a      	mov	r2, r1
 8012b2e:	749a      	strb	r2, [r3, #18]
				i++;
 8012b30:	7b7b      	ldrb	r3, [r7, #13]
 8012b32:	3301      	adds	r3, #1
 8012b34:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8012b36:	7bbb      	ldrb	r3, [r7, #14]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	73bb      	strb	r3, [r7, #14]
 8012b3c:	7bbb      	ldrb	r3, [r7, #14]
 8012b3e:	2b05      	cmp	r3, #5
 8012b40:	d9dc      	bls.n	8012afc <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8012b42:	7b7b      	ldrb	r3, [r7, #13]
 8012b44:	73bb      	strb	r3, [r7, #14]
 8012b46:	e00c      	b.n	8012b62 <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 8012b48:	7bbb      	ldrb	r3, [r7, #14]
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	2210      	movs	r2, #16
 8012b50:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 8012b52:	7bbb      	ldrb	r3, [r7, #14]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	4413      	add	r3, r2
 8012b58:	2200      	movs	r2, #0
 8012b5a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8012b5c:	7bbb      	ldrb	r3, [r7, #14]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	73bb      	strb	r3, [r7, #14]
 8012b62:	7bbb      	ldrb	r3, [r7, #14]
 8012b64:	2b05      	cmp	r3, #5
 8012b66:	d9ef      	bls.n	8012b48 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	7adb      	ldrb	r3, [r3, #11]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d023      	beq.n	8012bb8 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7adb      	ldrb	r3, [r3, #11]
 8012b74:	73fb      	strb	r3, [r7, #15]
 8012b76:	e00f      	b.n	8012b98 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 8012b78:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	7ad2      	ldrb	r2, [r2, #11]
 8012b80:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	3106      	adds	r1, #6
 8012b86:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	3206      	adds	r2, #6
 8012b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
 8012b94:	3301      	adds	r3, #1
 8012b96:	73fb      	strb	r3, [r7, #15]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 8012b9c:	7bfa      	ldrb	r2, [r7, #15]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d3ea      	bcc.n	8012b78 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 8012baa:	1ad3      	subs	r3, r2, r3
 8012bac:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	72da      	strb	r2, [r3, #11]
	}
}
 8012bb8:	bf00      	nop
 8012bba:	3714      	adds	r7, #20
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	4603      	mov	r3, r0
 8012bcc:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8012bd6:	88fb      	ldrh	r3, [r7, #6]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff fd83 	bl	80126e4 <VL53L1_calc_pll_period_us>
 8012bde:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 8012be4:	f249 2257 	movw	r2, #37463	; 0x9257
 8012be8:	fb02 f303 	mul.w	r3, r2, r3
 8012bec:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012bf4:	0c1b      	lsrs	r3, r3, #16
 8012bf6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 8012bf8:	68bb      	ldr	r3, [r7, #8]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}

08012c02 <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 8012c02:	b480      	push	{r7}
 8012c04:	b087      	sub	sp, #28
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	6078      	str	r0, [r7, #4]
 8012c0a:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 8012c10:	2307      	movs	r3, #7
 8012c12:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c1e:	db03      	blt.n	8012c28 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 8012c20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012c24:	617b      	str	r3, [r7, #20]
 8012c26:	e004      	b.n	8012c32 <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	dd01      	ble.n	8012c32 <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012c38:	dd02      	ble.n	8012c40 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	613b      	str	r3, [r7, #16]
 8012c3e:	e001      	b.n	8012c44 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 8012c40:	2307      	movs	r3, #7
 8012c42:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d009      	beq.n	8012c5e <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8012c4a:	697a      	ldr	r2, [r7, #20]
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	409a      	lsls	r2, r3
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	085b      	lsrs	r3, r3, #1
 8012c54:	441a      	add	r2, r3
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c5c:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012c64:	dd02      	ble.n	8012c6c <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	011b      	lsls	r3, r3, #4
 8012c6a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c72:	d302      	bcc.n	8012c7a <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 8012c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c78:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 8012c7e:	89fb      	ldrh	r3, [r7, #14]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	371c      	adds	r7, #28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b087      	sub	sp, #28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	603b      	str	r3, [r7, #0]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d010      	beq.n	8012ccc <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	021a      	lsls	r2, r3, #8
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8012cb4:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 8012cb6:	88fb      	ldrh	r3, [r7, #6]
 8012cb8:	085b      	lsrs	r3, r3, #1
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 8012cc2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 8012cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cc8:	617b      	str	r3, [r7, #20]
 8012cca:	e004      	b.n	8012cd6 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 8012cd6:	697a      	ldr	r2, [r7, #20]
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d901      	bls.n	8012ce2 <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 8012ce6:	8a7b      	ldrh	r3, [r7, #18]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	371c      	adds	r7, #28
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 8012cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf8:	b093      	sub	sp, #76	; 0x4c
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	461e      	mov	r6, r3
 8012cfe:	4603      	mov	r3, r0
 8012d00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012d02:	460b      	mov	r3, r1
 8012d04:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012d06:	4613      	mov	r3, r2
 8012d08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012d0a:	4633      	mov	r3, r6
 8012d0c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 8012d14:	f04f 0200 	mov.w	r2, #0
 8012d18:	f04f 0300 	mov.w	r3, #0
 8012d1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 8012d24:	2300      	movs	r3, #0
 8012d26:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8012d28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff fcda 	bl	80126e4 <VL53L1_calc_pll_period_us>
 8012d30:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 8012d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d34:	2200      	movs	r2, #0
 8012d36:	623b      	str	r3, [r7, #32]
 8012d38:	627a      	str	r2, [r7, #36]	; 0x24
 8012d3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	61bb      	str	r3, [r7, #24]
 8012d40:	61fa      	str	r2, [r7, #28]
 8012d42:	6a3b      	ldr	r3, [r7, #32]
 8012d44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012d48:	4602      	mov	r2, r0
 8012d4a:	1a9b      	subs	r3, r3, r2
 8012d4c:	613b      	str	r3, [r7, #16]
 8012d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d50:	460a      	mov	r2, r1
 8012d52:	eb63 0302 	sbc.w	r3, r3, r2
 8012d56:	617b      	str	r3, [r7, #20]
 8012d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012d5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8012d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d62:	2200      	movs	r2, #0
 8012d64:	469a      	mov	sl, r3
 8012d66:	4693      	mov	fp, r2
 8012d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d6a:	fb0a f203 	mul.w	r2, sl, r3
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	fb0b f303 	mul.w	r3, fp, r3
 8012d74:	4413      	add	r3, r2
 8012d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d78:	fba2 890a 	umull	r8, r9, r2, sl
 8012d7c:	444b      	add	r3, r9
 8012d7e:	4699      	mov	r9, r3
 8012d80:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8012d84:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8012d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	da08      	bge.n	8012da2 <VL53L1_range_maths+0xae>
 8012d90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012d94:	1851      	adds	r1, r2, r1
 8012d96:	60b9      	str	r1, [r7, #8]
 8012d98:	f143 0300 	adc.w	r3, r3, #0
 8012d9c:	60fb      	str	r3, [r7, #12]
 8012d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012da2:	f04f 0000 	mov.w	r0, #0
 8012da6:	f04f 0100 	mov.w	r1, #0
 8012daa:	0a50      	lsrs	r0, r2, #9
 8012dac:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8012db0:	1259      	asrs	r1, r3, #9
 8012db2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8012db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012db8:	f249 2257 	movw	r2, #37463	; 0x9257
 8012dbc:	fb03 f202 	mul.w	r2, r3, r2
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	fb01 f303 	mul.w	r3, r1, r3
 8012dc8:	4413      	add	r3, r2
 8012dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dcc:	f249 2157 	movw	r1, #37463	; 0x9257
 8012dd0:	fba2 4501 	umull	r4, r5, r2, r1
 8012dd4:	442b      	add	r3, r5
 8012dd6:	461d      	mov	r5, r3
 8012dd8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8012ddc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8012de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	da07      	bge.n	8012df8 <VL53L1_range_maths+0x104>
 8012de8:	4934      	ldr	r1, [pc, #208]	; (8012ebc <VL53L1_range_maths+0x1c8>)
 8012dea:	1851      	adds	r1, r2, r1
 8012dec:	6039      	str	r1, [r7, #0]
 8012dee:	f143 0300 	adc.w	r3, r3, #0
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012df8:	f04f 0000 	mov.w	r0, #0
 8012dfc:	f04f 0100 	mov.w	r1, #0
 8012e00:	0d90      	lsrs	r0, r2, #22
 8012e02:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8012e06:	1599      	asrs	r1, r3, #22
 8012e08:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012e10:	4413      	add	r3, r2
 8012e12:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 8012e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e18:	fb02 f303 	mul.w	r3, r2, r3
 8012e1c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 8012e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012e24:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 8012e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	da01      	bge.n	8012e30 <VL53L1_range_maths+0x13c>
 8012e2c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8012e30:	12db      	asrs	r3, r3, #11
 8012e32:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 8012e34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d130      	bne.n	8012e9e <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 8012e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e3e:	4613      	mov	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8012e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	da00      	bge.n	8012e50 <VL53L1_range_maths+0x15c>
 8012e4e:	3303      	adds	r3, #3
 8012e50:	109b      	asrs	r3, r3, #2
 8012e52:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 8012e54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e56:	4b1a      	ldr	r3, [pc, #104]	; (8012ec0 <VL53L1_range_maths+0x1cc>)
 8012e58:	fb83 2301 	smull	r2, r3, r3, r1
 8012e5c:	109a      	asrs	r2, r3, #2
 8012e5e:	17cb      	asrs	r3, r1, #31
 8012e60:	1ad2      	subs	r2, r2, r3
 8012e62:	4613      	mov	r3, r2
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	4413      	add	r3, r2
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	1aca      	subs	r2, r1, r3
 8012e6c:	2a04      	cmp	r2, #4
 8012e6e:	dc09      	bgt.n	8012e84 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 8012e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e72:	4a13      	ldr	r2, [pc, #76]	; (8012ec0 <VL53L1_range_maths+0x1cc>)
 8012e74:	fb82 1203 	smull	r1, r2, r2, r3
 8012e78:	1092      	asrs	r2, r2, #2
 8012e7a:	17db      	asrs	r3, r3, #31
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	b21b      	sxth	r3, r3
 8012e80:	647b      	str	r3, [r7, #68]	; 0x44
 8012e82:	e015      	b.n	8012eb0 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 8012e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e86:	4a0e      	ldr	r2, [pc, #56]	; (8012ec0 <VL53L1_range_maths+0x1cc>)
 8012e88:	fb82 1203 	smull	r1, r2, r2, r3
 8012e8c:	1092      	asrs	r2, r2, #2
 8012e8e:	17db      	asrs	r3, r3, #31
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	3301      	adds	r3, #1
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	b21b      	sxth	r3, r3
 8012e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8012e9c:	e008      	b.n	8012eb0 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 8012e9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d104      	bne.n	8012eb0 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 8012ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea8:	0fda      	lsrs	r2, r3, #31
 8012eaa:	4413      	add	r3, r2
 8012eac:	105b      	asrs	r3, r3, #1
 8012eae:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 8012eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	374c      	adds	r7, #76	; 0x4c
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ebc:	003fffff 	.word	0x003fffff
 8012ec0:	66666667 	.word	0x66666667

08012ec4 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	4603      	mov	r3, r0
 8012ecc:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 8012ed2:	79fb      	ldrb	r3, [r7, #7]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 8012edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3714      	adds	r7, #20
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 8012eea:	b480      	push	{r7}
 8012eec:	b083      	sub	sp, #12
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
 8012ef2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	7a5a      	ldrb	r2, [r3, #9]
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	685a      	ldr	r2, [r3, #4]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	605a      	str	r2, [r3, #4]
}
 8012f5a:	bf00      	nop
 8012f5c:	370c      	adds	r7, #12
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b087      	sub	sp, #28
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	60f8      	str	r0, [r7, #12]
 8012f6e:	460b      	mov	r3, r1
 8012f70:	607a      	str	r2, [r7, #4]
 8012f72:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8012f74:	2300      	movs	r3, #0
 8012f76:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2203      	movs	r2, #3
 8012f7c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2203      	movs	r2, #3
 8012f82:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2218      	movs	r2, #24
 8012f9a:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 8012f9c:	897b      	ldrh	r3, [r7, #10]
 8012f9e:	b2da      	uxtb	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2200      	movs	r2, #0
 8013006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2200      	movs	r2, #0
 801300e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2200      	movs	r2, #0
 8013026:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2200      	movs	r2, #0
 801302e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801303a:	2300      	movs	r3, #0
 801303c:	82fb      	strh	r3, [r7, #22]
 801303e:	e009      	b.n	8013054 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 8013040:	8afb      	ldrh	r3, [r7, #22]
 8013042:	8afa      	ldrh	r2, [r7, #22]
 8013044:	b2d1      	uxtb	r1, r2
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	4413      	add	r3, r2
 801304a:	460a      	mov	r2, r1
 801304c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801304e:	8afb      	ldrh	r3, [r7, #22]
 8013050:	3301      	adds	r3, #1
 8013052:	82fb      	strh	r3, [r7, #22]
 8013054:	8afb      	ldrh	r3, [r7, #22]
 8013056:	2b05      	cmp	r3, #5
 8013058:	d9f2      	bls.n	8013040 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801305a:	2300      	movs	r3, #0
 801305c:	82fb      	strh	r3, [r7, #22]
 801305e:	e007      	b.n	8013070 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 8013060:	8afb      	ldrh	r3, [r7, #22]
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	4413      	add	r3, r2
 8013066:	2201      	movs	r2, #1
 8013068:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801306a:	8afb      	ldrh	r3, [r7, #22]
 801306c:	3301      	adds	r3, #1
 801306e:	82fb      	strh	r3, [r7, #22]
 8013070:	8afb      	ldrh	r3, [r7, #22]
 8013072:	2b05      	cmp	r3, #5
 8013074:	d9f4      	bls.n	8013060 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8013076:	2300      	movs	r3, #0
 8013078:	82fb      	strh	r3, [r7, #22]
 801307a:	e013      	b.n	80130a4 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 801307c:	8afa      	ldrh	r2, [r7, #22]
 801307e:	897b      	ldrh	r3, [r7, #10]
 8013080:	429a      	cmp	r2, r3
 8013082:	d206      	bcs.n	8013092 <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 8013084:	8afa      	ldrh	r2, [r7, #22]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	3206      	adds	r2, #6
 801308a:	68f9      	ldr	r1, [r7, #12]
 801308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013090:	e005      	b.n	801309e <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 8013092:	8afa      	ldrh	r2, [r7, #22]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	3206      	adds	r2, #6
 8013098:	2100      	movs	r1, #0
 801309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 801309e:	8afb      	ldrh	r3, [r7, #22]
 80130a0:	3301      	adds	r3, #1
 80130a2:	82fb      	strh	r3, [r7, #22]
 80130a4:	8afb      	ldrh	r3, [r7, #22]
 80130a6:	2b17      	cmp	r3, #23
 80130a8:	d9e8      	bls.n	801307c <VL53L1_init_histogram_bin_data_struct+0x116>


}
 80130aa:	bf00      	nop
 80130ac:	bf00      	nop
 80130ae:	371c      	adds	r7, #28
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80130b8:	b480      	push	{r7}
 80130ba:	b085      	sub	sp, #20
 80130bc:	af00      	add	r7, sp, #0
 80130be:	4603      	mov	r3, r0
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 80130c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	da10      	bge.n	80130f0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80130ce:	7bfb      	ldrb	r3, [r7, #15]
 80130d0:	43db      	mvns	r3, r3
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	f003 0307 	and.w	r3, r3, #7
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	3308      	adds	r3, #8
 80130dc:	b2da      	uxtb	r2, r3
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80130e2:	7bfb      	ldrb	r3, [r7, #15]
 80130e4:	3b80      	subs	r3, #128	; 0x80
 80130e6:	10db      	asrs	r3, r3, #3
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80130ee:	e00c      	b.n	801310a <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80130f0:	7bfb      	ldrb	r3, [r7, #15]
 80130f2:	f003 0307 	and.w	r3, r3, #7
 80130f6:	b2da      	uxtb	r2, r3
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80130fc:	7bfb      	ldrb	r3, [r7, #15]
 80130fe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8013102:	10db      	asrs	r3, r3, #3
 8013104:	b2da      	uxtb	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	701a      	strb	r2, [r3, #0]
}
 801310a:	bf00      	nop
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr

08013116 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8013116:	b480      	push	{r7}
 8013118:	b085      	sub	sp, #20
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 801311e:	2300      	movs	r3, #0
 8013120:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 8013122:	2300      	movs	r3, #0
 8013124:	73fb      	strb	r3, [r7, #15]
 8013126:	e02c      	b.n	8013182 <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8013128:	7bfb      	ldrb	r3, [r7, #15]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d009      	beq.n	8013142 <VL53L1_hist_find_min_max_bin_values+0x2c>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013134:	7bf9      	ldrb	r1, [r7, #15]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	3106      	adds	r1, #6
 801313a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801313e:	429a      	cmp	r2, r3
 8013140:	db07      	blt.n	8013152 <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 8013142:	7bfa      	ldrb	r2, [r7, #15]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3206      	adds	r2, #6
 8013148:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8013152:	7bfb      	ldrb	r3, [r7, #15]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d009      	beq.n	801316c <VL53L1_hist_find_min_max_bin_values+0x56>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801315e:	7bf9      	ldrb	r1, [r7, #15]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	3106      	adds	r1, #6
 8013164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013168:	429a      	cmp	r2, r3
 801316a:	dc07      	bgt.n	801317c <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 801316c:	7bfa      	ldrb	r2, [r7, #15]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3206      	adds	r2, #6
 8013172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 801317c:	7bfb      	ldrb	r3, [r7, #15]
 801317e:	3301      	adds	r3, #1
 8013180:	73fb      	strb	r3, [r7, #15]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	7a9b      	ldrb	r3, [r3, #10]
 8013186:	7bfa      	ldrb	r2, [r7, #15]
 8013188:	429a      	cmp	r2, r3
 801318a:	d3cd      	bcc.n	8013128 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 801318c:	bf00      	nop
 801318e:	bf00      	nop
 8013190:	3714      	adds	r7, #20
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr

0801319a <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801319a:	b480      	push	{r7}
 801319c:	b085      	sub	sp, #20
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	7adb      	ldrb	r3, [r3, #11]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d03a      	beq.n	8013224 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2200      	movs	r2, #0
 80131bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80131c0:	2300      	movs	r3, #0
 80131c2:	73fb      	strb	r3, [r7, #15]
 80131c4:	e00e      	b.n	80131e4 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80131cc:	7bf9      	ldrb	r1, [r7, #15]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3106      	adds	r1, #6
 80131d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131d6:	441a      	add	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80131de:	7bfb      	ldrb	r3, [r7, #15]
 80131e0:	3301      	adds	r3, #1
 80131e2:	73fb      	strb	r3, [r7, #15]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	7adb      	ldrb	r3, [r3, #11]
 80131e8:	7bfa      	ldrb	r2, [r7, #15]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d3eb      	bcc.n	80131c6 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	7ad2      	ldrb	r2, [r2, #11]
 8013204:	0852      	lsrs	r2, r2, #1
 8013206:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8013208:	441a      	add	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 801321a:	fb93 f2f2 	sdiv	r2, r3, r2
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 8013224:	bf00      	nop
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 8013230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013234:	b0ca      	sub	sp, #296	; 0x128
 8013236:	af00      	add	r7, sp, #0
 8013238:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801323c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8013240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013244:	4603      	mov	r3, r0
 8013246:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 801324a:	2300      	movs	r3, #0
 801324c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 8013250:	2300      	movs	r3, #0
 8013252:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 8013256:	2300      	movs	r3, #0
 8013258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 801325c:	2300      	movs	r3, #0
 801325e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 8013262:	f04f 0200 	mov.w	r2, #0
 8013266:	f04f 0300 	mov.w	r3, #0
 801326a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 8013274:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013278:	2300      	movs	r3, #0
 801327a:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 801327c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013280:	2300      	movs	r3, #0
 8013282:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 8013284:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013288:	2300      	movs	r3, #0
 801328a:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 801328c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013290:	2300      	movs	r3, #0
 8013292:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 8013294:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013298:	2300      	movs	r3, #0
 801329a:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 801329c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80132a0:	2300      	movs	r3, #0
 80132a2:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 80132a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80132a8:	2300      	movs	r3, #0
 80132aa:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 80132ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80132b0:	2300      	movs	r3, #0
 80132b2:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 80132b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80132b8:	2300      	movs	r3, #0
 80132ba:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 80132bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	f000 80e1 	beq.w	801348c <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 80132ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f000 80da 	beq.w	801348c <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 80132d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff f9ff 	bl	80126e4 <VL53L1_calc_pll_period_us>
 80132e6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 80132ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132f2:	3301      	adds	r3, #1
 80132f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 80132f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013300:	2110      	movs	r1, #16
 8013302:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8013306:	f7ff fa04 	bl	8012712 <VL53L1_duration_maths>
 801330a:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 801330c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013310:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 8013312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013316:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801331a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4619      	mov	r1, r3
 8013322:	4610      	mov	r0, r2
 8013324:	f7ff fc6d 	bl	8012c02 <VL53L1_rate_maths>
 8013328:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 801332a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801332e:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 8013330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013334:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8013338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801333c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 8013340:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	461a      	mov	r2, r3
 8013348:	f7ff fa3c 	bl	80127c4 <VL53L1_events_per_spad_maths>
 801334c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 801334e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013352:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 8013354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013358:	8adb      	ldrh	r3, [r3, #22]
 801335a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801335e:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 8013360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013364:	8adb      	ldrh	r3, [r3, #22]
 8013366:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801336a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 801336c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013370:	695b      	ldr	r3, [r3, #20]
 8013372:	2b00      	cmp	r3, #0
 8013374:	f000 808a 	beq.w	801348c <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8013378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801337c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 801337e:	b29b      	uxth	r3, r3
 8013380:	2200      	movs	r2, #0
 8013382:	461c      	mov	r4, r3
 8013384:	4615      	mov	r5, r2
 8013386:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 801338a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 801338e:	4622      	mov	r2, r4
 8013390:	462b      	mov	r3, r5
 8013392:	f04f 0000 	mov.w	r0, #0
 8013396:	f04f 0100 	mov.w	r1, #0
 801339a:	0159      	lsls	r1, r3, #5
 801339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80133a0:	0150      	lsls	r0, r2, #5
 80133a2:	4602      	mov	r2, r0
 80133a4:	460b      	mov	r3, r1
 80133a6:	ebb2 0804 	subs.w	r8, r2, r4
 80133aa:	eb63 0905 	sbc.w	r9, r3, r5
 80133ae:	f04f 0200 	mov.w	r2, #0
 80133b2:	f04f 0300 	mov.w	r3, #0
 80133b6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80133ba:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80133be:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80133c2:	4690      	mov	r8, r2
 80133c4:	4699      	mov	r9, r3
 80133c6:	eb18 0a04 	adds.w	sl, r8, r4
 80133ca:	eb49 0b05 	adc.w	fp, r9, r5
 80133ce:	f04f 0200 	mov.w	r2, #0
 80133d2:	f04f 0300 	mov.w	r3, #0
 80133d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80133da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80133de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80133e2:	4692      	mov	sl, r2
 80133e4:	469b      	mov	fp, r3
 80133e6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 80133ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80133ee:	f04f 0000 	mov.w	r0, #0
 80133f2:	f04f 0100 	mov.w	r1, #0
 80133f6:	0319      	lsls	r1, r3, #12
 80133f8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80133fc:	0310      	lsls	r0, r2, #12
 80133fe:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 8013402:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013406:	695b      	ldr	r3, [r3, #20]
 8013408:	085b      	lsrs	r3, r3, #1
 801340a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 801340e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013412:	2200      	movs	r2, #0
 8013414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013418:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801341c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013420:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013424:	4621      	mov	r1, r4
 8013426:	1851      	adds	r1, r2, r1
 8013428:	65b9      	str	r1, [r7, #88]	; 0x58
 801342a:	4629      	mov	r1, r5
 801342c:	eb43 0101 	adc.w	r1, r3, r1
 8013430:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013432:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8013436:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 801343a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801343e:	695b      	ldr	r3, [r3, #20]
 8013440:	2200      	movs	r2, #0
 8013442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013446:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801344a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801344e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8013452:	f7ed fbd1 	bl	8000bf8 <__aeabi_uldivmod>
 8013456:	4602      	mov	r2, r0
 8013458:	460b      	mov	r3, r1
 801345a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 801345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013462:	8adb      	ldrh	r3, [r3, #22]
 8013464:	b29b      	uxth	r3, r3
 8013466:	2200      	movs	r2, #0
 8013468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801346c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8013470:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013474:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013478:	4621      	mov	r1, r4
 801347a:	428a      	cmp	r2, r1
 801347c:	4629      	mov	r1, r5
 801347e:	418b      	sbcs	r3, r1
 8013480:	d204      	bcs.n	801348c <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 8013482:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8013486:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801348a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 801348c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013490:	881b      	ldrh	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	f000 82e9 	beq.w	8013a6a <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8013498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801349c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f000 82e2 	beq.w	8013a6a <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 80134a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80134aa:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 82dc 	beq.w	8013a6a <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 80134b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80134b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	f000 82d5 	beq.w	8013a6a <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 80134c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80134c4:	885b      	ldrh	r3, [r3, #2]
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	2200      	movs	r2, #0
 80134ca:	653b      	str	r3, [r7, #80]	; 0x50
 80134cc:	657a      	str	r2, [r7, #84]	; 0x54
 80134ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80134d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 80134d6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80134da:	4622      	mov	r2, r4
 80134dc:	462b      	mov	r3, r5
 80134de:	f04f 0000 	mov.w	r0, #0
 80134e2:	f04f 0100 	mov.w	r1, #0
 80134e6:	0159      	lsls	r1, r3, #5
 80134e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80134ec:	0150      	lsls	r0, r2, #5
 80134ee:	4602      	mov	r2, r0
 80134f0:	460b      	mov	r3, r1
 80134f2:	1b11      	subs	r1, r2, r4
 80134f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80134f6:	eb63 0305 	sbc.w	r3, r3, r5
 80134fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80134fc:	f04f 0200 	mov.w	r2, #0
 8013500:	f04f 0300 	mov.w	r3, #0
 8013504:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8013508:	4649      	mov	r1, r9
 801350a:	008b      	lsls	r3, r1, #2
 801350c:	4641      	mov	r1, r8
 801350e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013512:	4641      	mov	r1, r8
 8013514:	008a      	lsls	r2, r1, #2
 8013516:	4611      	mov	r1, r2
 8013518:	461a      	mov	r2, r3
 801351a:	460b      	mov	r3, r1
 801351c:	191b      	adds	r3, r3, r4
 801351e:	643b      	str	r3, [r7, #64]	; 0x40
 8013520:	4613      	mov	r3, r2
 8013522:	eb45 0303 	adc.w	r3, r5, r3
 8013526:	647b      	str	r3, [r7, #68]	; 0x44
 8013528:	f04f 0200 	mov.w	r2, #0
 801352c:	f04f 0300 	mov.w	r3, #0
 8013530:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013534:	4629      	mov	r1, r5
 8013536:	02cb      	lsls	r3, r1, #11
 8013538:	4621      	mov	r1, r4
 801353a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 801353e:	4621      	mov	r1, r4
 8013540:	02ca      	lsls	r2, r1, #11
 8013542:	461c      	mov	r4, r3
 8013544:	4613      	mov	r3, r2
 8013546:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 801354a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801354e:	881b      	ldrh	r3, [r3, #0]
 8013550:	085b      	lsrs	r3, r3, #1
 8013552:	b29b      	uxth	r3, r3
 8013554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 8013558:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801355c:	2200      	movs	r2, #0
 801355e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013562:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013566:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801356a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 801356e:	4621      	mov	r1, r4
 8013570:	1851      	adds	r1, r2, r1
 8013572:	63b9      	str	r1, [r7, #56]	; 0x38
 8013574:	4629      	mov	r1, r5
 8013576:	eb43 0101 	adc.w	r1, r3, r1
 801357a:	63f9      	str	r1, [r7, #60]	; 0x3c
 801357c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8013580:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8013584:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013588:	881b      	ldrh	r3, [r3, #0]
 801358a:	b29b      	uxth	r3, r3
 801358c:	2200      	movs	r2, #0
 801358e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013596:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801359a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801359e:	f7ed fb2b 	bl	8000bf8 <__aeabi_uldivmod>
 80135a2:	4602      	mov	r2, r0
 80135a4:	460b      	mov	r3, r1
 80135a6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 80135aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80135ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135b2:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 80135b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	011a      	lsls	r2, r3, #4
 80135bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135c0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 80135c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2200      	movs	r2, #0
 80135ca:	633b      	str	r3, [r7, #48]	; 0x30
 80135cc:	637a      	str	r2, [r7, #52]	; 0x34
 80135ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80135d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 80135d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135da:	695b      	ldr	r3, [r3, #20]
 80135dc:	2200      	movs	r2, #0
 80135de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80135e2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80135e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80135ea:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80135ee:	4622      	mov	r2, r4
 80135f0:	fb02 f203 	mul.w	r2, r2, r3
 80135f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80135f8:	4629      	mov	r1, r5
 80135fa:	fb01 f303 	mul.w	r3, r1, r3
 80135fe:	441a      	add	r2, r3
 8013600:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013604:	4621      	mov	r1, r4
 8013606:	fba3 1301 	umull	r1, r3, r3, r1
 801360a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801360e:	460b      	mov	r3, r1
 8013610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013618:	18d3      	adds	r3, r2, r3
 801361a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801361e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013622:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8013626:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 801362a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801362e:	8b5b      	ldrh	r3, [r3, #26]
 8013630:	b29b      	uxth	r3, r3
 8013632:	2200      	movs	r2, #0
 8013634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013638:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801363c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013640:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013644:	4622      	mov	r2, r4
 8013646:	fb02 f203 	mul.w	r2, r2, r3
 801364a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801364e:	4629      	mov	r1, r5
 8013650:	fb01 f303 	mul.w	r3, r1, r3
 8013654:	441a      	add	r2, r3
 8013656:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801365a:	4621      	mov	r1, r4
 801365c:	fba3 1301 	umull	r1, r3, r3, r1
 8013660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013664:	460b      	mov	r3, r1
 8013666:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801366e:	18d3      	adds	r3, r2, r3
 8013670:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013674:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013678:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 801367c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8013680:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013684:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8013688:	62b9      	str	r1, [r7, #40]	; 0x28
 801368a:	f143 0300 	adc.w	r3, r3, #0
 801368e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013690:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013694:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8013698:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801369c:	f04f 0000 	mov.w	r0, #0
 80136a0:	f04f 0100 	mov.w	r1, #0
 80136a4:	0cd0      	lsrs	r0, r2, #19
 80136a6:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 80136aa:	0cd9      	lsrs	r1, r3, #19
 80136ac:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 80136b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80136b4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 80136b8:	6239      	str	r1, [r7, #32]
 80136ba:	f143 0300 	adc.w	r3, r3, #0
 80136be:	627b      	str	r3, [r7, #36]	; 0x24
 80136c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80136c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 80136c8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80136cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80136d0:	f04f 0300 	mov.w	r3, #0
 80136d4:	f7ed fa90 	bl	8000bf8 <__aeabi_uldivmod>
 80136d8:	4602      	mov	r2, r0
 80136da:	460b      	mov	r3, r1
 80136dc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 80136e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80136e4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80136e8:	f173 0300 	sbcs.w	r3, r3, #0
 80136ec:	d305      	bcc.n	80136fa <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 80136ee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80136f2:	f04f 0300 	mov.w	r3, #0
 80136f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 80136fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80136fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013702:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8013704:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2200      	movs	r2, #0
 801370c:	61bb      	str	r3, [r7, #24]
 801370e:	61fa      	str	r2, [r7, #28]
 8013710:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013714:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 8013718:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801371c:	691b      	ldr	r3, [r3, #16]
 801371e:	2200      	movs	r2, #0
 8013720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801372c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013730:	4622      	mov	r2, r4
 8013732:	fb02 f203 	mul.w	r2, r2, r3
 8013736:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801373a:	4629      	mov	r1, r5
 801373c:	fb01 f303 	mul.w	r3, r1, r3
 8013740:	441a      	add	r2, r3
 8013742:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013746:	4621      	mov	r1, r4
 8013748:	fba3 1301 	umull	r1, r3, r3, r1
 801374c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013750:	460b      	mov	r3, r1
 8013752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801375a:	18d3      	adds	r3, r2, r3
 801375c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013760:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8013764:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8013768:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 801376c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	b29b      	uxth	r3, r3
 8013774:	2200      	movs	r2, #0
 8013776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801377a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801377e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013782:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013786:	4622      	mov	r2, r4
 8013788:	fb02 f203 	mul.w	r2, r2, r3
 801378c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013790:	4629      	mov	r1, r5
 8013792:	fb01 f303 	mul.w	r3, r1, r3
 8013796:	441a      	add	r2, r3
 8013798:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801379c:	4621      	mov	r1, r4
 801379e:	fba3 1301 	umull	r1, r3, r3, r1
 80137a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80137a6:	460b      	mov	r3, r1
 80137a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80137ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80137b0:	18d3      	adds	r3, r2, r3
 80137b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80137b6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80137ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80137be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 80137c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80137c6:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 80137ca:	6139      	str	r1, [r7, #16]
 80137cc:	f143 0300 	adc.w	r3, r3, #0
 80137d0:	617b      	str	r3, [r7, #20]
 80137d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80137d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 80137da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80137de:	f04f 0000 	mov.w	r0, #0
 80137e2:	f04f 0100 	mov.w	r1, #0
 80137e6:	0cd0      	lsrs	r0, r2, #19
 80137e8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 80137ec:	0cd9      	lsrs	r1, r3, #19
 80137ee:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 80137f2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80137f6:	2200      	movs	r2, #0
 80137f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80137fa:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 80137fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013800:	891b      	ldrh	r3, [r3, #8]
 8013802:	b29b      	uxth	r3, r3
 8013804:	2200      	movs	r2, #0
 8013806:	673b      	str	r3, [r7, #112]	; 0x70
 8013808:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 801380a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801380e:	462b      	mov	r3, r5
 8013810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013814:	4642      	mov	r2, r8
 8013816:	fb02 f203 	mul.w	r2, r2, r3
 801381a:	464b      	mov	r3, r9
 801381c:	4621      	mov	r1, r4
 801381e:	fb01 f303 	mul.w	r3, r1, r3
 8013822:	4413      	add	r3, r2
 8013824:	4622      	mov	r2, r4
 8013826:	4641      	mov	r1, r8
 8013828:	fba2 1201 	umull	r1, r2, r2, r1
 801382c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013830:	460a      	mov	r2, r1
 8013832:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013836:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801383a:	4413      	add	r3, r2
 801383c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013844:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8013848:	4622      	mov	r2, r4
 801384a:	fb02 f203 	mul.w	r2, r2, r3
 801384e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013852:	4629      	mov	r1, r5
 8013854:	fb01 f303 	mul.w	r3, r1, r3
 8013858:	4413      	add	r3, r2
 801385a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801385e:	4621      	mov	r1, r4
 8013860:	fba2 1201 	umull	r1, r2, r2, r1
 8013864:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8013868:	460a      	mov	r2, r1
 801386a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801386e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8013872:	4413      	add	r3, r2
 8013874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013878:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 801387c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8013880:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 8013884:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013888:	88db      	ldrh	r3, [r3, #6]
 801388a:	b29b      	uxth	r3, r3
 801388c:	2200      	movs	r2, #0
 801388e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013890:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013892:	f04f 0200 	mov.w	r2, #0
 8013896:	f04f 0300 	mov.w	r3, #0
 801389a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 801389e:	4629      	mov	r1, r5
 80138a0:	01cb      	lsls	r3, r1, #7
 80138a2:	4621      	mov	r1, r4
 80138a4:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 80138a8:	4621      	mov	r1, r4
 80138aa:	01ca      	lsls	r2, r1, #7
 80138ac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80138b0:	1884      	adds	r4, r0, r2
 80138b2:	60bc      	str	r4, [r7, #8]
 80138b4:	eb41 0303 	adc.w	r3, r1, r3
 80138b8:	60fb      	str	r3, [r7, #12]
 80138ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80138be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 80138c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80138c6:	88db      	ldrh	r3, [r3, #6]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	2200      	movs	r2, #0
 80138cc:	663b      	str	r3, [r7, #96]	; 0x60
 80138ce:	667a      	str	r2, [r7, #100]	; 0x64
 80138d0:	f04f 0200 	mov.w	r2, #0
 80138d4:	f04f 0300 	mov.w	r3, #0
 80138d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80138dc:	4629      	mov	r1, r5
 80138de:	020b      	lsls	r3, r1, #8
 80138e0:	4621      	mov	r1, r4
 80138e2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80138e6:	4621      	mov	r1, r4
 80138e8:	020a      	lsls	r2, r1, #8
 80138ea:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80138ee:	f7ed f983 	bl	8000bf8 <__aeabi_uldivmod>
 80138f2:	4602      	mov	r2, r0
 80138f4:	460b      	mov	r3, r1
 80138f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 80138fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80138fe:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8013902:	6039      	str	r1, [r7, #0]
 8013904:	f143 0300 	adc.w	r3, r3, #0
 8013908:	607b      	str	r3, [r7, #4]
 801390a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801390e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 8013912:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8013916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801391a:	f04f 0300 	mov.w	r3, #0
 801391e:	f7ed f96b 	bl	8000bf8 <__aeabi_uldivmod>
 8013922:	4602      	mov	r2, r0
 8013924:	460b      	mov	r3, r1
 8013926:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 801392a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801392e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013932:	f173 0300 	sbcs.w	r3, r3, #0
 8013936:	d305      	bcc.n	8013944 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 8013938:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801393c:	f04f 0300 	mov.w	r3, #0
 8013940:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 8013944:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8013948:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801394c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 801394e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	021b      	lsls	r3, r3, #8
 8013956:	4618      	mov	r0, r3
 8013958:	f7fe ffcd 	bl	80128f6 <VL53L1_isqrt>
 801395c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8013960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013964:	785b      	ldrb	r3, [r3, #1]
 8013966:	461a      	mov	r2, r3
 8013968:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801396c:	fb02 f303 	mul.w	r3, r2, r3
 8013970:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 8013974:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013978:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 801397a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801397e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 8013980:	4293      	cmp	r3, r2
 8013982:	d218      	bcs.n	80139b6 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 8013984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 801398c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013990:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 8013992:	1ad3      	subs	r3, r2, r3
 8013994:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8013998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801399c:	021b      	lsls	r3, r3, #8
 801399e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 80139a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80139a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d203      	bcs.n	80139b6 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 80139ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80139b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 80139b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139ba:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 80139bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80139c0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80139c2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 80139c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80139c8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 80139ca:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80139ce:	f000 f854 	bl	8013a7a <VL53L1_f_002>
 80139d2:	4603      	mov	r3, r0
 80139d4:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 80139d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139da:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 80139dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139e0:	6a1b      	ldr	r3, [r3, #32]
 80139e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80139e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80139ea:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80139ee:	461a      	mov	r2, r3
 80139f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80139f4:	fb02 f303 	mul.w	r3, r2, r3
 80139f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 80139fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013a00:	3308      	adds	r3, #8
 8013a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 8013a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013a0a:	091b      	lsrs	r3, r3, #4
 8013a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8013a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a14:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 8013a16:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 8013a18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013a1c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 8013a1e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8013a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a24:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8013a26:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013a2a:	f000 f826 	bl	8013a7a <VL53L1_f_002>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 8013a32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a36:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 8013a38:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a3c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8013a40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a44:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	da07      	bge.n	8013a5c <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 8013a4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a50:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8013a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a58:	801a      	strh	r2, [r3, #0]
 8013a5a:	e006      	b.n	8013a6a <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 8013a5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a60:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8013a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a68:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 8013a6a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8013a74:	46bd      	mov	sp, r7
 8013a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013a7a <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b086      	sub	sp, #24
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	60f8      	str	r0, [r7, #12]
 8013a82:	60b9      	str	r1, [r7, #8]
 8013a84:	607a      	str	r2, [r7, #4]
 8013a86:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	fb03 f303 	mul.w	r3, r3, r3
 8013a9c:	693a      	ldr	r2, [r7, #16]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8013aa2:	6938      	ldr	r0, [r7, #16]
 8013aa4:	f7fe ff27 	bl	80128f6 <VL53L1_isqrt>
 8013aa8:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8013aaa:	693a      	ldr	r2, [r7, #16]
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	4413      	add	r3, r2
 8013ab0:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	011b      	lsls	r3, r3, #4
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fe ff1d 	bl	80128f6 <VL53L1_isqrt>
 8013abc:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	687a      	ldr	r2, [r7, #4]
 8013ac2:	fb02 f303 	mul.w	r3, r2, r3
 8013ac6:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d009      	beq.n	8013ae2 <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	005b      	lsls	r3, r3, #1
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ae0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8013ae2:	697b      	ldr	r3, [r7, #20]

}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3718      	adds	r7, #24
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8013af4:	2300      	movs	r3, #0
 8013af6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2218      	movs	r2, #24
 8013afc:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2200      	movs	r2, #0
 8013b02:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2200      	movs	r2, #0
 8013b14:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	73fb      	strb	r3, [r7, #15]
 8013b22:	e01f      	b.n	8013b64 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8013b24:	7bfb      	ldrb	r3, [r7, #15]
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	4413      	add	r3, r2
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 8013b2e:	7bfb      	ldrb	r3, [r7, #15]
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	4413      	add	r3, r2
 8013b34:	2200      	movs	r2, #0
 8013b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 8013b3a:	7bfb      	ldrb	r3, [r7, #15]
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	4413      	add	r3, r2
 8013b40:	2200      	movs	r2, #0
 8013b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8013b46:	7bfa      	ldrb	r2, [r7, #15]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	322e      	adds	r2, #46	; 0x2e
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8013b52:	7bfa      	ldrb	r2, [r7, #15]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	3246      	adds	r2, #70	; 0x46
 8013b58:	2100      	movs	r1, #0
 8013b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8013b5e:	7bfb      	ldrb	r3, [r7, #15]
 8013b60:	3301      	adds	r3, #1
 8013b62:	73fb      	strb	r3, [r7, #15]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	785b      	ldrb	r3, [r3, #1]
 8013b68:	7bfa      	ldrb	r2, [r7, #15]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d3da      	bcc.n	8013b24 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2208      	movs	r2, #8
 8013b7a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2200      	movs	r2, #0
 8013b82:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	2118      	movs	r1, #24
 8013b90:	2000      	movs	r0, #0
 8013b92:	f7ff f9e8 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	2118      	movs	r1, #24
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	f7ff f9e0 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8013bac:	461a      	mov	r2, r3
 8013bae:	2118      	movs	r1, #24
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	f7ff f9d8 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	2118      	movs	r1, #24
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	f7ff f9d0 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8013bcc:	461a      	mov	r2, r3
 8013bce:	2118      	movs	r1, #24
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	f7ff f9c8 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8013bde:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013be2:	b090      	sub	sp, #64	; 0x40
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	61b9      	str	r1, [r7, #24]
 8013be8:	617a      	str	r2, [r7, #20]
 8013bea:	461a      	mov	r2, r3
 8013bec:	4603      	mov	r3, r0
 8013bee:	83fb      	strh	r3, [r7, #30]
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 8013c06:	f04f 0200 	mov.w	r2, #0
 8013c0a:	f04f 0300 	mov.w	r3, #0
 8013c0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 8013c16:	2300      	movs	r3, #0
 8013c18:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 8013c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c20:	7a5a      	ldrb	r2, [r3, #9]
 8013c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c24:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8013c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c28:	7a1a      	ldrb	r2, [r3, #8]
 8013c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c2c:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 8013c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c30:	7a9a      	ldrb	r2, [r3, #10]
 8013c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c34:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8013c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c38:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8013c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c3e:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8013c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff f93c 	bl	8012ec4 <VL53L1_decode_vcsel_period>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8013c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c52:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8013c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c5a:	17da      	asrs	r2, r3, #31
 8013c5c:	60bb      	str	r3, [r7, #8]
 8013c5e:	60fa      	str	r2, [r7, #12]
 8013c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8013c68:	8bfb      	ldrh	r3, [r7, #30]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	4698      	mov	r8, r3
 8013c6e:	4691      	mov	r9, r2
 8013c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c72:	fb08 f203 	mul.w	r2, r8, r3
 8013c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c78:	fb09 f303 	mul.w	r3, r9, r3
 8013c7c:	4413      	add	r3, r2
 8013c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c80:	fba2 4508 	umull	r4, r5, r2, r8
 8013c84:	442b      	add	r3, r5
 8013c86:	461d      	mov	r5, r3
 8013c88:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8013c8c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8013c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013c94:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8013c98:	f143 0b00 	adc.w	fp, r3, #0
 8013c9c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8013ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	da08      	bge.n	8013cba <VL53L1_f_018+0xdc>
 8013ca8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8013cac:	1851      	adds	r1, r2, r1
 8013cae:	6039      	str	r1, [r7, #0]
 8013cb0:	f143 0300 	adc.w	r3, r3, #0
 8013cb4:	607b      	str	r3, [r7, #4]
 8013cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cba:	f04f 0000 	mov.w	r0, #0
 8013cbe:	f04f 0100 	mov.w	r1, #0
 8013cc2:	0b10      	lsrs	r0, r2, #12
 8013cc4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8013cc8:	1319      	asrs	r1, r3, #12
 8013cca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8013cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013cd8:	e062      	b.n	8013da0 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 8013cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cde:	089b      	lsrs	r3, r3, #2
 8013ce0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8013ce4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013cea:	4413      	add	r3, r2
 8013cec:	7c9b      	ldrb	r3, [r3, #18]
 8013cee:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8013cf0:	6a3b      	ldr	r3, [r7, #32]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	dd4f      	ble.n	8013d96 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8013cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cf8:	7a9b      	ldrb	r3, [r3, #10]
 8013cfa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d20f      	bcs.n	8013d22 <VL53L1_f_018+0x144>
 8013d02:	7f7b      	ldrb	r3, [r7, #29]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00c      	beq.n	8013d22 <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8013d08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d0e:	3206      	adds	r2, #6
 8013d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	441a      	add	r2, r3
 8013d18:	6a3b      	ldr	r3, [r7, #32]
 8013d1a:	fb02 f303 	mul.w	r3, r2, r3
 8013d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d20:	e004      	b.n	8013d2c <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d26:	fb02 f303 	mul.w	r3, r2, r3
 8013d2a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8013d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fe fde1 	bl	80128f6 <VL53L1_isqrt>
 8013d34:	4603      	mov	r3, r0
 8013d36:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8013d38:	6a3b      	ldr	r3, [r7, #32]
 8013d3a:	0fda      	lsrs	r2, r3, #31
 8013d3c:	4413      	add	r3, r2
 8013d3e:	105b      	asrs	r3, r3, #1
 8013d40:	461a      	mov	r2, r3
 8013d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d44:	4413      	add	r3, r2
 8013d46:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8013d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d50:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8013d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d54:	69ba      	ldr	r2, [r7, #24]
 8013d56:	fb02 f303 	mul.w	r3, r2, r3
 8013d5a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 8013d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5e:	3308      	adds	r3, #8
 8013d60:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8013d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	da00      	bge.n	8013d6a <VL53L1_f_018+0x18c>
 8013d68:	330f      	adds	r3, #15
 8013d6a:	111b      	asrs	r3, r3, #4
 8013d6c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 8013d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	4413      	add	r3, r2
 8013d74:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8013d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	da01      	bge.n	8013d82 <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8013d82:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d88:	3216      	adds	r2, #22
 8013d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8013d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d94:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8013d96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013da2:	7a9b      	ldrb	r3, [r3, #10]
 8013da4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d396      	bcc.n	8013cda <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 8013dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dae:	2200      	movs	r2, #0
 8013db0:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8013db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013db4:	7a1b      	ldrb	r3, [r3, #8]
 8013db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013dba:	e033      	b.n	8013e24 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8013dbc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013dc2:	3206      	adds	r2, #6
 8013dc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013dc8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8013dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dce:	3116      	adds	r1, #22
 8013dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	dd13      	ble.n	8013e00 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 8013dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ddc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013dde:	4413      	add	r3, r2
 8013de0:	2201      	movs	r2, #1
 8013de2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8013de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013de8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013dea:	4413      	add	r3, r2
 8013dec:	2201      	movs	r2, #1
 8013dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8013df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013df4:	791b      	ldrb	r3, [r3, #4]
 8013df6:	3301      	adds	r3, #1
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dfc:	711a      	strb	r2, [r3, #4]
 8013dfe:	e00c      	b.n	8013e1a <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8013e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e06:	4413      	add	r3, r2
 8013e08:	2200      	movs	r2, #0
 8013e0a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 8013e0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e12:	4413      	add	r3, r2
 8013e14:	2200      	movs	r2, #0
 8013e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8013e1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e1e:	3301      	adds	r3, #1
 8013e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e26:	7a9b      	ldrb	r3, [r3, #10]
 8013e28:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d3c5      	bcc.n	8013dbc <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3740      	adds	r7, #64	; 0x40
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013e3e <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8013e3e:	b480      	push	{r7}
 8013e40:	b085      	sub	sp, #20
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8013e46:	2300      	movs	r3, #0
 8013e48:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8013e5e:	2300      	movs	r3, #0
 8013e60:	73fb      	strb	r3, [r7, #15]
 8013e62:	e02d      	b.n	8013ec0 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8013e64:	7bfb      	ldrb	r3, [r7, #15]
 8013e66:	3301      	adds	r3, #1
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	78d2      	ldrb	r2, [r2, #3]
 8013e6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013e70:	fb01 f202 	mul.w	r2, r1, r2
 8013e74:	1a9b      	subs	r3, r3, r2
 8013e76:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	789b      	ldrb	r3, [r3, #2]
 8013e7c:	7bfa      	ldrb	r2, [r7, #15]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d21b      	bcs.n	8013eba <VL53L1_f_019+0x7c>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	789b      	ldrb	r3, [r3, #2]
 8013e86:	7b3a      	ldrb	r2, [r7, #12]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d216      	bcs.n	8013eba <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8013e8c:	7bfb      	ldrb	r3, [r7, #15]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	4413      	add	r3, r2
 8013e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d10f      	bne.n	8013eba <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8013e9a:	7b3b      	ldrb	r3, [r7, #12]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d108      	bne.n	8013eba <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8013ea8:	7bbb      	ldrb	r3, [r7, #14]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d105      	bne.n	8013eba <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	7bfa      	ldrb	r2, [r7, #15]
 8013eb2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8013eba:	7bfb      	ldrb	r3, [r7, #15]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	73fb      	strb	r3, [r7, #15]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	78db      	ldrb	r3, [r3, #3]
 8013ec4:	7bfa      	ldrb	r2, [r7, #15]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d3cc      	bcc.n	8013e64 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013eca:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b085      	sub	sp, #20
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 8013eea:	2300      	movs	r3, #0
 8013eec:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8013ef8:	73fb      	strb	r3, [r7, #15]
 8013efa:	e05a      	b.n	8013fb2 <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	78da      	ldrb	r2, [r3, #3]
 8013f00:	7bfb      	ldrb	r3, [r7, #15]
 8013f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f06:	fb01 f202 	mul.w	r2, r1, r2
 8013f0a:	1a9b      	subs	r3, r3, r2
 8013f0c:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 8013f0e:	7bfb      	ldrb	r3, [r7, #15]
 8013f10:	3301      	adds	r3, #1
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	78d2      	ldrb	r2, [r2, #3]
 8013f16:	fb93 f1f2 	sdiv	r1, r3, r2
 8013f1a:	fb01 f202 	mul.w	r2, r1, r2
 8013f1e:	1a9b      	subs	r3, r3, r2
 8013f20:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	789b      	ldrb	r3, [r3, #2]
 8013f26:	7b7a      	ldrb	r2, [r7, #13]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d23f      	bcs.n	8013fac <VL53L1_f_020+0xd2>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	789b      	ldrb	r3, [r3, #2]
 8013f30:	7b3a      	ldrb	r2, [r7, #12]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d23a      	bcs.n	8013fac <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8013f36:	7b7b      	ldrb	r3, [r7, #13]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d10e      	bne.n	8013f62 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8013f44:	7b3b      	ldrb	r3, [r7, #12]
 8013f46:	687a      	ldr	r2, [r7, #4]
 8013f48:	4413      	add	r3, r2
 8013f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d107      	bne.n	8013f62 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8013f58:	3301      	adds	r3, #1
 8013f5a:	b2da      	uxtb	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d905      	bls.n	8013f7e <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 8013f7e:	7b7b      	ldrb	r3, [r7, #13]
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	4413      	add	r3, r2
 8013f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d009      	beq.n	8013fa0 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8013f8c:	7b7b      	ldrb	r3, [r7, #13]
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	4413      	add	r3, r2
 8013f98:	460a      	mov	r2, r1
 8013f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f9e:	e005      	b.n	8013fac <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8013fa0:	7b7b      	ldrb	r3, [r7, #13]
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
 8013fae:	3301      	adds	r3, #1
 8013fb0:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 8013fb2:	7bfa      	ldrb	r2, [r7, #15]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8013fba:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8013fc0:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	db9a      	blt.n	8013efc <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 8013fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3714      	adds	r7, #20
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8013fd6:	b480      	push	{r7}
 8013fd8:	b087      	sub	sp, #28
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 8013fea:	2300      	movs	r3, #0
 8013fec:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	78db      	ldrb	r3, [r3, #3]
 8013ffa:	3b01      	subs	r3, #1
 8013ffc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 8013ffe:	7cbb      	ldrb	r3, [r7, #18]
 8014000:	085b      	lsrs	r3, r3, #1
 8014002:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801400a:	75fb      	strb	r3, [r7, #23]
 801400c:	e0a2      	b.n	8014154 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	78da      	ldrb	r2, [r3, #3]
 8014012:	7dfb      	ldrb	r3, [r7, #23]
 8014014:	fbb3 f1f2 	udiv	r1, r3, r2
 8014018:	fb01 f202 	mul.w	r2, r1, r2
 801401c:	1a9b      	subs	r3, r3, r2
 801401e:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8014020:	7dfb      	ldrb	r3, [r7, #23]
 8014022:	3301      	adds	r3, #1
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	78d2      	ldrb	r2, [r2, #3]
 8014028:	fb93 f1f2 	sdiv	r1, r3, r2
 801402c:	fb01 f202 	mul.w	r2, r1, r2
 8014030:	1a9b      	subs	r3, r3, r2
 8014032:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	789b      	ldrb	r3, [r3, #2]
 8014038:	7d7a      	ldrb	r2, [r7, #21]
 801403a:	429a      	cmp	r2, r3
 801403c:	f080 8087 	bcs.w	801414e <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8014044:	7d3a      	ldrb	r2, [r7, #20]
 8014046:	429a      	cmp	r2, r3
 8014048:	f080 8081 	bcs.w	801414e <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 801404c:	7d7b      	ldrb	r3, [r7, #21]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	4413      	add	r3, r2
 8014052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014056:	2b00      	cmp	r3, #0
 8014058:	d12f      	bne.n	80140ba <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 801405a:	7d3b      	ldrb	r3, [r7, #20]
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	4413      	add	r3, r2
 8014060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8014064:	2b00      	cmp	r3, #0
 8014066:	d028      	beq.n	80140ba <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8014068:	7d3b      	ldrb	r3, [r7, #20]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	4413      	add	r3, r2
 801406e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014072:	3b01      	subs	r3, #1
 8014074:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801407c:	7cfa      	ldrb	r2, [r7, #19]
 801407e:	429a      	cmp	r2, r3
 8014080:	d21b      	bcs.n	80140ba <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8014082:	7cfa      	ldrb	r2, [r7, #19]
 8014084:	4613      	mov	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	4413      	add	r3, r2
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	4413      	add	r3, r2
 8014094:	3304      	adds	r3, #4
 8014096:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	7dfa      	ldrb	r2, [r7, #23]
 801409c:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 801409e:	7dfb      	ldrb	r3, [r7, #23]
 80140a0:	3301      	adds	r3, #1
 80140a2:	b2da      	uxtb	r2, r3
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	22ff      	movs	r2, #255	; 0xff
 80140ac:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	2200      	movs	r2, #0
 80140b2:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 80140ba:	7d7b      	ldrb	r3, [r7, #21]
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	4413      	add	r3, r2
 80140c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d042      	beq.n	801414e <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 80140c8:	7d3b      	ldrb	r3, [r7, #20]
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	4413      	add	r3, r2
 80140ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d13b      	bne.n	801414e <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 80140d6:	7d7b      	ldrb	r3, [r7, #21]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	4413      	add	r3, r2
 80140dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140e0:	3b01      	subs	r3, #1
 80140e2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80140ea:	7cfa      	ldrb	r2, [r7, #19]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d22e      	bcs.n	801414e <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80140f0:	7cfa      	ldrb	r2, [r7, #19]
 80140f2:	4613      	mov	r3, r2
 80140f4:	00db      	lsls	r3, r3, #3
 80140f6:	4413      	add	r3, r2
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	4413      	add	r3, r2
 8014102:	3304      	adds	r3, #4
 8014104:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	7dfa      	ldrb	r2, [r7, #23]
 801410a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 801410c:	7dfb      	ldrb	r3, [r7, #23]
 801410e:	3301      	adds	r3, #1
 8014110:	b2da      	uxtb	r2, r3
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	b2db      	uxtb	r3, r3
 8014122:	3301      	adds	r3, #1
 8014124:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	b2db      	uxtb	r3, r3
 8014136:	3301      	adds	r3, #1
 8014138:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	799b      	ldrb	r3, [r3, #6]
 8014142:	7cba      	ldrb	r2, [r7, #18]
 8014144:	429a      	cmp	r2, r3
 8014146:	d202      	bcs.n	801414e <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	7cba      	ldrb	r2, [r7, #18]
 801414c:	719a      	strb	r2, [r3, #6]
		blb++) {
 801414e:	7dfb      	ldrb	r3, [r7, #23]
 8014150:	3301      	adds	r3, #1
 8014152:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8014154:	7dfa      	ldrb	r2, [r7, #23]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801415c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 8014162:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8014164:	429a      	cmp	r2, r3
 8014166:	f6ff af52 	blt.w	801400e <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801416a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 801416e:	4618      	mov	r0, r3
 8014170:	371c      	adds	r7, #28
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr

0801417a <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b090      	sub	sp, #64	; 0x40
 801417e:	af00      	add	r7, sp, #0
 8014180:	4603      	mov	r3, r0
 8014182:	6039      	str	r1, [r7, #0]
 8014184:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8014186:	2300      	movs	r3, #0
 8014188:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 801418c:	f107 030c 	add.w	r3, r7, #12
 8014190:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 8014192:	2300      	movs	r3, #0
 8014194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8014198:	2301      	movs	r3, #1
 801419a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d965      	bls.n	8014274 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 80141a8:	e05f      	b.n	801426a <VL53L1_f_028+0xf0>

		swapped = 0;
 80141aa:	2300      	movs	r3, #0
 80141ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80141b0:	2301      	movs	r3, #1
 80141b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80141b6:	e051      	b.n	801425c <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 80141b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141bc:	1e5a      	subs	r2, r3, #1
 80141be:	4613      	mov	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	4413      	add	r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80141ca:	683a      	ldr	r2, [r7, #0]
 80141cc:	4413      	add	r3, r2
 80141ce:	3304      	adds	r3, #4
 80141d0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80141d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80141d6:	4613      	mov	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
 80141da:	4413      	add	r3, r2
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80141e2:	683a      	ldr	r2, [r7, #0]
 80141e4:	4413      	add	r3, r2
 80141e6:	3304      	adds	r3, #4
 80141e8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 80141ea:	79fb      	ldrb	r3, [r7, #7]
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	d118      	bne.n	8014222 <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 80141f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f2:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 80141f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 80141f8:	429a      	cmp	r2, r3
 80141fa:	da2a      	bge.n	8014252 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80141fc:	2224      	movs	r2, #36	; 0x24
 80141fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014202:	f011 f917 	bl	8025434 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8014206:	2224      	movs	r2, #36	; 0x24
 8014208:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801420a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801420c:	f011 f912 	bl	8025434 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8014210:	2224      	movs	r2, #36	; 0x24
 8014212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014214:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014216:	f011 f90d 	bl	8025434 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 801421a:	2301      	movs	r3, #1
 801421c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8014220:	e017      	b.n	8014252 <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 8014222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014224:	699a      	ldr	r2, [r3, #24]
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	699b      	ldr	r3, [r3, #24]
 801422a:	429a      	cmp	r2, r3
 801422c:	d911      	bls.n	8014252 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 801422e:	2224      	movs	r2, #36	; 0x24
 8014230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014234:	f011 f8fe 	bl	8025434 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8014238:	2224      	movs	r2, #36	; 0x24
 801423a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801423c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801423e:	f011 f8f9 	bl	8025434 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8014242:	2224      	movs	r2, #36	; 0x24
 8014244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014246:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014248:	f011 f8f4 	bl	8025434 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 801424c:	2301      	movs	r3, #1
 801424e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8014252:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014256:	3301      	adds	r3, #1
 8014258:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8014262:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014266:	429a      	cmp	r2, r3
 8014268:	d3a6      	bcc.n	80141b8 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 801426a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801426e:	2b00      	cmp	r3, #0
 8014270:	d19b      	bne.n	80141aa <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 8014272:	e000      	b.n	8014276 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8014274:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8014276:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 801427a:	4618      	mov	r0, r3
 801427c:	3740      	adds	r7, #64	; 0x40
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8014282:	b480      	push	{r7}
 8014284:	b087      	sub	sp, #28
 8014286:	af00      	add	r7, sp, #0
 8014288:	4603      	mov	r3, r0
 801428a:	60b9      	str	r1, [r7, #8]
 801428c:	607a      	str	r2, [r7, #4]
 801428e:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8014290:	2300      	movs	r3, #0
 8014292:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8014294:	2300      	movs	r3, #0
 8014296:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8014298:	2300      	movs	r3, #0
 801429a:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801429c:	7bfa      	ldrb	r2, [r7, #15]
 801429e:	4613      	mov	r3, r2
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	4413      	add	r3, r2
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	4413      	add	r3, r2
 80142ae:	3304      	adds	r3, #4
 80142b0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	2200      	movs	r2, #0
 80142b6:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	2200      	movs	r2, #0
 80142bc:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	75fb      	strb	r3, [r7, #23]
 80142c4:	e01c      	b.n	8014300 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	78da      	ldrb	r2, [r3, #3]
 80142ca:	7dfb      	ldrb	r3, [r7, #23]
 80142cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80142d0:	fb01 f202 	mul.w	r2, r1, r2
 80142d4:	1a9b      	subs	r3, r3, r2
 80142d6:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	68da      	ldr	r2, [r3, #12]
 80142dc:	7d79      	ldrb	r1, [r7, #21]
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	3106      	adds	r1, #6
 80142e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142e6:	441a      	add	r2, r3
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	689a      	ldr	r2, [r3, #8]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	689b      	ldr	r3, [r3, #8]
 80142f4:	441a      	add	r2, r3
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80142fa:	7dfb      	ldrb	r3, [r7, #23]
 80142fc:	3301      	adds	r3, #1
 80142fe:	75fb      	strb	r3, [r7, #23]
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	791b      	ldrb	r3, [r3, #4]
 8014304:	7dfa      	ldrb	r2, [r7, #23]
 8014306:	429a      	cmp	r2, r3
 8014308:	d9dd      	bls.n	80142c6 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	68da      	ldr	r2, [r3, #12]
 801430e:	693b      	ldr	r3, [r7, #16]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8014318:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801431c:	4618      	mov	r0, r3
 801431e:	371c      	adds	r7, #28
 8014320:	46bd      	mov	sp, r7
 8014322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014326:	4770      	bx	lr

08014328 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b08d      	sub	sp, #52	; 0x34
 801432c:	af02      	add	r7, sp, #8
 801432e:	60ba      	str	r2, [r7, #8]
 8014330:	607b      	str	r3, [r7, #4]
 8014332:	4603      	mov	r3, r0
 8014334:	73fb      	strb	r3, [r7, #15]
 8014336:	460b      	mov	r3, r1
 8014338:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801433a:	2300      	movs	r3, #0
 801433c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8014340:	2300      	movs	r3, #0
 8014342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8014346:	2300      	movs	r3, #0
 8014348:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 801434a:	2300      	movs	r3, #0
 801434c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8014356:	7bfa      	ldrb	r2, [r7, #15]
 8014358:	4613      	mov	r3, r2
 801435a:	00db      	lsls	r3, r3, #3
 801435c:	4413      	add	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014364:	687a      	ldr	r2, [r7, #4]
 8014366:	4413      	add	r3, r2
 8014368:	3304      	adds	r3, #4
 801436a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	789b      	ldrb	r3, [r3, #2]
 8014370:	2bff      	cmp	r3, #255	; 0xff
 8014372:	d102      	bne.n	801437a <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	2201      	movs	r2, #1
 8014378:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	789b      	ldrb	r3, [r3, #2]
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	78d2      	ldrb	r2, [r2, #3]
 8014382:	fbb3 f1f2 	udiv	r1, r3, r2
 8014386:	fb01 f202 	mul.w	r2, r1, r2
 801438a:	1a9b      	subs	r3, r3, r2
 801438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8014390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014394:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	b29a      	uxth	r2, r3
 801439c:	8c3b      	ldrh	r3, [r7, #32]
 801439e:	4413      	add	r3, r2
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 80143a4:	8c3a      	ldrh	r2, [r7, #32]
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	789b      	ldrb	r3, [r3, #2]
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	1ad3      	subs	r3, r2, r3
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 80143b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80143b6:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	791b      	ldrb	r3, [r3, #4]
 80143bc:	b29a      	uxth	r2, r3
 80143be:	8bfb      	ldrh	r3, [r7, #30]
 80143c0:	4413      	add	r3, r2
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80143c6:	8bfa      	ldrh	r2, [r7, #30]
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	789b      	ldrb	r3, [r3, #2]
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80143d4:	8bfa      	ldrh	r2, [r7, #30]
 80143d6:	8c3b      	ldrh	r3, [r7, #32]
 80143d8:	1ad3      	subs	r3, r2, r3
 80143da:	b29b      	uxth	r3, r3
 80143dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80143de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80143e2:	2b03      	cmp	r3, #3
 80143e4:	dd01      	ble.n	80143ea <VL53L1_f_027+0xc2>
		window_width = 3;
 80143e6:	2303      	movs	r3, #3
 80143e8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80143ea:	8c3a      	ldrh	r2, [r7, #32]
 80143ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143ee:	4413      	add	r3, r2
 80143f0:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80143f2:	b219      	sxth	r1, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	78da      	ldrb	r2, [r3, #3]
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	3314      	adds	r3, #20
 80143fc:	7bbc      	ldrb	r4, [r7, #14]
 80143fe:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014402:	9301      	str	r3, [sp, #4]
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	9300      	str	r3, [sp, #0]
 8014408:	4623      	mov	r3, r4
 801440a:	f000 f846 	bl	801449a <VL53L1_f_030>
 801440e:	4603      	mov	r3, r0
 8014410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 8014414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014418:	2b00      	cmp	r3, #0
 801441a:	d114      	bne.n	8014446 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 801441c:	8bfa      	ldrh	r2, [r7, #30]
 801441e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014420:	1ad3      	subs	r3, r2, r3
 8014422:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8014424:	b218      	sxth	r0, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	78da      	ldrb	r2, [r3, #3]
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	331c      	adds	r3, #28
 801442e:	7bbc      	ldrb	r4, [r7, #14]
 8014430:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	9300      	str	r3, [sp, #0]
 801443a:	4623      	mov	r3, r4
 801443c:	f000 f82d 	bl	801449a <VL53L1_f_030>
 8014440:	4603      	mov	r3, r0
 8014442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	695a      	ldr	r2, [r3, #20]
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	69db      	ldr	r3, [r3, #28]
 801444e:	429a      	cmp	r2, r3
 8014450:	d909      	bls.n	8014466 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	69da      	ldr	r2, [r3, #28]
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	69ba      	ldr	r2, [r7, #24]
 8014464:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	699a      	ldr	r2, [r3, #24]
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	695b      	ldr	r3, [r3, #20]
 801446e:	429a      	cmp	r2, r3
 8014470:	d203      	bcs.n	801447a <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	699a      	ldr	r2, [r3, #24]
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	699a      	ldr	r2, [r3, #24]
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	69db      	ldr	r3, [r3, #28]
 8014482:	429a      	cmp	r2, r3
 8014484:	d903      	bls.n	801448e <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	699a      	ldr	r2, [r3, #24]
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 801448e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014492:	4618      	mov	r0, r3
 8014494:	372c      	adds	r7, #44	; 0x2c
 8014496:	46bd      	mov	sp, r7
 8014498:	bd90      	pop	{r4, r7, pc}

0801449a <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 801449a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801449e:	b09d      	sub	sp, #116	; 0x74
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	461c      	mov	r4, r3
 80144a4:	4603      	mov	r3, r0
 80144a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80144aa:	460b      	mov	r3, r1
 80144ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80144b0:	4613      	mov	r3, r2
 80144b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144b6:	4623      	mov	r3, r4
 80144b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80144bc:	2300      	movs	r3, #0
 80144be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80144c8:	2300      	movs	r3, #0
 80144ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80144ce:	f04f 0200 	mov.w	r2, #0
 80144d2:	f04f 0300 	mov.w	r3, #0
 80144d6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80144da:	f04f 0200 	mov.w	r2, #0
 80144de:	f04f 0300 	mov.w	r3, #0
 80144e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80144e6:	f04f 0200 	mov.w	r2, #0
 80144ea:	f04f 0300 	mov.w	r3, #0
 80144ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80144f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80144f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144fa:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80144fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014500:	2b00      	cmp	r3, #0
 8014502:	f000 809c 	beq.w	801463e <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8014506:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801450a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801450e:	e08f      	b.n	8014630 <VL53L1_f_030+0x196>

		if (lb < 0)
 8014510:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8014514:	2b00      	cmp	r3, #0
 8014516:	da09      	bge.n	801452c <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8014518:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801451c:	b29a      	uxth	r2, r3
 801451e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014522:	4413      	add	r3, r2
 8014524:	b29b      	uxth	r3, r3
 8014526:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801452a:	e00a      	b.n	8014542 <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 801452c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8014530:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8014534:	fb91 f3f2 	sdiv	r3, r1, r2
 8014538:	fb02 f303 	mul.w	r3, r2, r3
 801453c:	1acb      	subs	r3, r1, r3
 801453e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 8014542:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8014546:	2b00      	cmp	r3, #0
 8014548:	db6b      	blt.n	8014622 <VL53L1_f_030+0x188>
 801454a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801454e:	2b17      	cmp	r3, #23
 8014550:	dc67      	bgt.n	8014622 <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 8014552:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8014556:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801455a:	3306      	adds	r3, #6
 801455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014560:	17da      	asrs	r2, r3, #31
 8014562:	633b      	str	r3, [r7, #48]	; 0x30
 8014564:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8014566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801456a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801456e:	17da      	asrs	r2, r3, #31
 8014570:	62bb      	str	r3, [r7, #40]	; 0x28
 8014572:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8014574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801457a:	4602      	mov	r2, r0
 801457c:	1a9b      	subs	r3, r3, r2
 801457e:	623b      	str	r3, [r7, #32]
 8014580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014582:	460a      	mov	r2, r1
 8014584:	eb63 0302 	sbc.w	r3, r3, r2
 8014588:	627b      	str	r3, [r7, #36]	; 0x24
 801458a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801458e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 8014592:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014596:	2b00      	cmp	r3, #0
 8014598:	d009      	beq.n	80145ae <VL53L1_f_030+0x114>
 801459a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801459e:	2b00      	cmp	r3, #0
 80145a0:	da05      	bge.n	80145ae <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 80145a2:	f04f 0200 	mov.w	r2, #0
 80145a6:	f04f 0300 	mov.w	r3, #0
 80145aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 80145ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80145b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80145b6:	1884      	adds	r4, r0, r2
 80145b8:	61bc      	str	r4, [r7, #24]
 80145ba:	eb41 0303 	adc.w	r3, r1, r3
 80145be:	61fb      	str	r3, [r7, #28]
 80145c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80145c4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80145c8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80145cc:	17da      	asrs	r2, r3, #31
 80145ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80145d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80145d2:	f04f 0200 	mov.w	r2, #0
 80145d6:	f04f 0300 	mov.w	r3, #0
 80145da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145dc:	02cb      	lsls	r3, r1, #11
 80145de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145e0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80145e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145e6:	02ca      	lsls	r2, r1, #11
 80145e8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80145ec:	f143 0600 	adc.w	r6, r3, #0
 80145f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145f2:	fb06 f203 	mul.w	r2, r6, r3
 80145f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145f8:	fb05 f303 	mul.w	r3, r5, r3
 80145fc:	441a      	add	r2, r3
 80145fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014600:	fba3 ab05 	umull	sl, fp, r3, r5
 8014604:	eb02 030b 	add.w	r3, r2, fp
 8014608:	469b      	mov	fp, r3
			weighted_sum +=
 801460a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801460e:	eb12 010a 	adds.w	r1, r2, sl
 8014612:	6139      	str	r1, [r7, #16]
 8014614:	eb43 030b 	adc.w	r3, r3, fp
 8014618:	617b      	str	r3, [r7, #20]
 801461a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801461e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8014622:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8014626:	b29b      	uxth	r3, r3
 8014628:	3301      	adds	r3, #1
 801462a:	b29b      	uxth	r3, r3
 801462c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8014630:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8014634:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8014638:	429a      	cmp	r2, r3
 801463a:	f77f af69 	ble.w	8014510 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 801463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014642:	2a01      	cmp	r2, #1
 8014644:	f173 0300 	sbcs.w	r3, r3, #0
 8014648:	db3b      	blt.n	80146c2 <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 801464a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801464e:	0fd9      	lsrs	r1, r3, #31
 8014650:	2000      	movs	r0, #0
 8014652:	60b9      	str	r1, [r7, #8]
 8014654:	60f8      	str	r0, [r7, #12]
 8014656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801465a:	4621      	mov	r1, r4
 801465c:	eb11 0802 	adds.w	r8, r1, r2
 8014660:	4629      	mov	r1, r5
 8014662:	eb41 0903 	adc.w	r9, r1, r3
 8014666:	f04f 0200 	mov.w	r2, #0
 801466a:	f04f 0300 	mov.w	r3, #0
 801466e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8014672:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8014676:	ea4f 0369 	mov.w	r3, r9, asr #1
 801467a:	4610      	mov	r0, r2
 801467c:	4619      	mov	r1, r3
 801467e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8014682:	1814      	adds	r4, r2, r0
 8014684:	603c      	str	r4, [r7, #0]
 8014686:	414b      	adcs	r3, r1
 8014688:	607b      	str	r3, [r7, #4]
 801468a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801468e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8014692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014696:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801469a:	f7ec fa5d 	bl	8000b58 <__aeabi_ldivmod>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 80146a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	da05      	bge.n	80146ba <VL53L1_f_030+0x220>
			weighted_sum = 0;
 80146ae:	f04f 0200 	mov.w	r2, #0
 80146b2:	f04f 0300 	mov.w	r3, #0
 80146b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 80146ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80146c0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80146c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3774      	adds	r7, #116	; 0x74
 80146ca:	46bd      	mov	sp, r7
 80146cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146d0 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	60b9      	str	r1, [r7, #8]
 80146d8:	607a      	str	r2, [r7, #4]
 80146da:	603b      	str	r3, [r7, #0]
 80146dc:	4603      	mov	r3, r0
 80146de:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80146e0:	2300      	movs	r3, #0
 80146e2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80146e4:	2300      	movs	r3, #0
 80146e6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80146e8:	2300      	movs	r3, #0
 80146ea:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80146ec:	7bfa      	ldrb	r2, [r7, #15]
 80146ee:	4613      	mov	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	4413      	add	r3, r2
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	4413      	add	r3, r2
 80146fe:	3304      	adds	r3, #4
 8014700:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 8014702:	22ac      	movs	r2, #172	; 0xac
 8014704:	68b9      	ldr	r1, [r7, #8]
 8014706:	6a38      	ldr	r0, [r7, #32]
 8014708:	f010 fe94 	bl	8025434 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8014712:	75fb      	strb	r3, [r7, #23]
 8014714:	e020      	b.n	8014758 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	7dfa      	ldrb	r2, [r7, #23]
 801471c:	429a      	cmp	r2, r3
 801471e:	d304      	bcc.n	801472a <VL53L1_f_023+0x5a>
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	791b      	ldrb	r3, [r3, #4]
 8014724:	7dfa      	ldrb	r2, [r7, #23]
 8014726:	429a      	cmp	r2, r3
 8014728:	d913      	bls.n	8014752 <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	78da      	ldrb	r2, [r3, #3]
 801472e:	7dfb      	ldrb	r3, [r7, #23]
 8014730:	fbb3 f1f2 	udiv	r1, r3, r2
 8014734:	fb01 f202 	mul.w	r2, r1, r2
 8014738:	1a9b      	subs	r3, r3, r2
 801473a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 801473c:	6a3b      	ldr	r3, [r7, #32]
 801473e:	7a9b      	ldrb	r3, [r3, #10]
 8014740:	7d7a      	ldrb	r2, [r7, #21]
 8014742:	429a      	cmp	r2, r3
 8014744:	d205      	bcs.n	8014752 <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8014746:	7d7a      	ldrb	r2, [r7, #21]
 8014748:	6a3b      	ldr	r3, [r7, #32]
 801474a:	3206      	adds	r2, #6
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8014752:	7dfb      	ldrb	r3, [r7, #23]
 8014754:	3301      	adds	r3, #1
 8014756:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8014758:	7dfa      	ldrb	r2, [r7, #23]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8014760:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8014766:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8014768:	429a      	cmp	r2, r3
 801476a:	dbd4      	blt.n	8014716 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801476c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014770:	4618      	mov	r0, r3
 8014772:	3718      	adds	r7, #24
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8014778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477c:	b096      	sub	sp, #88	; 0x58
 801477e:	af08      	add	r7, sp, #32
 8014780:	4604      	mov	r4, r0
 8014782:	4608      	mov	r0, r1
 8014784:	4611      	mov	r1, r2
 8014786:	461a      	mov	r2, r3
 8014788:	4623      	mov	r3, r4
 801478a:	73fb      	strb	r3, [r7, #15]
 801478c:	4603      	mov	r3, r0
 801478e:	73bb      	strb	r3, [r7, #14]
 8014790:	460b      	mov	r3, r1
 8014792:	737b      	strb	r3, [r7, #13]
 8014794:	4613      	mov	r3, r2
 8014796:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8014798:	2300      	movs	r3, #0
 801479a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801479e:	2300      	movs	r3, #0
 80147a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 80147ae:	2300      	movs	r3, #0
 80147b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80147be:	2300      	movs	r3, #0
 80147c0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80147c6:	2300      	movs	r3, #0
 80147c8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80147ca:	7b7b      	ldrb	r3, [r7, #13]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80147d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147d6:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80147d8:	f06f 030e 	mvn.w	r3, #14
 80147dc:	e06f      	b.n	80148be <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80147de:	7bfb      	ldrb	r3, [r7, #15]
 80147e0:	7b7a      	ldrb	r2, [r7, #13]
 80147e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80147e6:	fb01 f202 	mul.w	r2, r1, r2
 80147ea:	1a9b      	subs	r3, r3, r2
 80147ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80147f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80147f4:	7b39      	ldrb	r1, [r7, #12]
 80147f6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80147fa:	f107 0320 	add.w	r3, r7, #32
 80147fe:	9301      	str	r3, [sp, #4]
 8014800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014804:	9300      	str	r3, [sp, #0]
 8014806:	4613      	mov	r3, r2
 8014808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801480a:	f000 fddb 	bl	80153c4 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801480e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014812:	7b39      	ldrb	r1, [r7, #12]
 8014814:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8014818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801481c:	9301      	str	r3, [sp, #4]
 801481e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	4613      	mov	r3, r2
 8014826:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014828:	f000 fdcc 	bl	80153c4 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 801482c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8014830:	2b00      	cmp	r3, #0
 8014832:	d00e      	beq.n	8014852 <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8014834:	f107 021c 	add.w	r2, r7, #28
 8014838:	7b39      	ldrb	r1, [r7, #12]
 801483a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801483e:	f107 0314 	add.w	r3, r7, #20
 8014842:	9301      	str	r3, [sp, #4]
 8014844:	f107 0318 	add.w	r3, r7, #24
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	4613      	mov	r3, r2
 801484c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801484e:	f000 fdb9 	bl	80153c4 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 8014852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014854:	469c      	mov	ip, r3
 8014856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014858:	469e      	mov	lr, r3
 801485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485c:	4698      	mov	r8, r3
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	4619      	mov	r1, r3
 8014862:	6a3b      	ldr	r3, [r7, #32]
 8014864:	461c      	mov	r4, r3
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	461d      	mov	r5, r3
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	461e      	mov	r6, r3
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8014872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8014878:	607b      	str	r3, [r7, #4]
 801487a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801487c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8014880:	7bb8      	ldrb	r0, [r7, #14]
 8014882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014884:	9207      	str	r2, [sp, #28]
 8014886:	9306      	str	r3, [sp, #24]
 8014888:	687a      	ldr	r2, [r7, #4]
 801488a:	9205      	str	r2, [sp, #20]
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	9304      	str	r3, [sp, #16]
 8014890:	9603      	str	r6, [sp, #12]
 8014892:	9502      	str	r5, [sp, #8]
 8014894:	9401      	str	r4, [sp, #4]
 8014896:	9100      	str	r1, [sp, #0]
 8014898:	4643      	mov	r3, r8
 801489a:	4672      	mov	r2, lr
 801489c:	4661      	mov	r1, ip
 801489e:	f002 ff30 	bl	8017702 <VL53L1_f_014>
 80148a2:	4603      	mov	r3, r0
 80148a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80148a8:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80148ac:	f113 0f0f 	cmn.w	r3, #15
 80148b0:	d103      	bne.n	80148ba <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80148b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148b8:	801a      	strh	r2, [r3, #0]


	return status;
 80148ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3738      	adds	r7, #56	; 0x38
 80148c2:	46bd      	mov	sp, r7
 80148c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148c8 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80148c8:	b490      	push	{r4, r7}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	4604      	mov	r4, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	4611      	mov	r1, r2
 80148d4:	461a      	mov	r2, r3
 80148d6:	4623      	mov	r3, r4
 80148d8:	71fb      	strb	r3, [r7, #7]
 80148da:	4603      	mov	r3, r0
 80148dc:	71bb      	strb	r3, [r7, #6]
 80148de:	460b      	mov	r3, r1
 80148e0:	717b      	strb	r3, [r7, #5]
 80148e2:	4613      	mov	r3, r2
 80148e4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80148e6:	2300      	movs	r3, #0
 80148e8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80148ea:	2300      	movs	r3, #0
 80148ec:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80148ee:	6a3b      	ldr	r3, [r7, #32]
 80148f0:	79fa      	ldrb	r2, [r7, #7]
 80148f2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80148f4:	6a3b      	ldr	r3, [r7, #32]
 80148f6:	2200      	movs	r2, #0
 80148f8:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	781a      	ldrb	r2, [r3, #0]
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	785a      	ldrb	r2, [r3, #1]
 8014906:	6a3b      	ldr	r3, [r7, #32]
 8014908:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	789a      	ldrb	r2, [r3, #2]
 801490e:	6a3b      	ldr	r3, [r7, #32]
 8014910:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	78da      	ldrb	r2, [r3, #3]
 8014916:	6a3b      	ldr	r3, [r7, #32]
 8014918:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	791a      	ldrb	r2, [r3, #4]
 801491e:	6a3b      	ldr	r3, [r7, #32]
 8014920:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	795a      	ldrb	r2, [r3, #5]
 8014926:	6a3b      	ldr	r3, [r7, #32]
 8014928:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	791a      	ldrb	r2, [r3, #4]
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	b2db      	uxtb	r3, r3
 8014936:	3301      	adds	r3, #1
 8014938:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 801493a:	6a3b      	ldr	r3, [r7, #32]
 801493c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8014944:	6a3b      	ldr	r3, [r7, #32]
 8014946:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	8c1a      	ldrh	r2, [r3, #32]
 801494c:	6a3b      	ldr	r3, [r7, #32]
 801494e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	695b      	ldr	r3, [r3, #20]
 8014954:	b29a      	uxth	r2, r3
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	699b      	ldr	r3, [r3, #24]
 801495e:	b29a      	uxth	r2, r3
 8014960:	6a3b      	ldr	r3, [r7, #32]
 8014962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	69db      	ldr	r3, [r3, #28]
 801496a:	b29a      	uxth	r2, r3
 801496c:	6a3b      	ldr	r3, [r7, #32]
 801496e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8014972:	69fb      	ldr	r3, [r7, #28]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	461a      	mov	r2, r3
 8014978:	6a3b      	ldr	r3, [r7, #32]
 801497a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	691a      	ldr	r2, [r3, #16]
 8014980:	6a3b      	ldr	r3, [r7, #32]
 8014982:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	461a      	mov	r2, r3
 801498a:	6a3b      	ldr	r3, [r7, #32]
 801498c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8014994:	6a3b      	ldr	r3, [r7, #32]
 8014996:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	2213      	movs	r2, #19
 801499c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 80149a0:	887b      	ldrh	r3, [r7, #2]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00a      	beq.n	80149bc <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	8c1b      	ldrh	r3, [r3, #32]
 80149aa:	461a      	mov	r2, r3
 80149ac:	887b      	ldrh	r3, [r7, #2]
 80149ae:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d903      	bls.n	80149bc <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80149b4:	6a3b      	ldr	r3, [r7, #32]
 80149b6:	2206      	movs	r2, #6
 80149b8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80149bc:	79bb      	ldrb	r3, [r7, #6]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	021b      	lsls	r3, r3, #8
 80149c2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80149c4:	6a3b      	ldr	r3, [r7, #32]
 80149c6:	8a9b      	ldrh	r3, [r3, #20]
 80149c8:	89fa      	ldrh	r2, [r7, #14]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d205      	bcs.n	80149da <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80149ce:	6a3b      	ldr	r3, [r7, #32]
 80149d0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80149d2:	89fb      	ldrh	r3, [r7, #14]
 80149d4:	1ad3      	subs	r3, r2, r3
 80149d6:	81fb      	strh	r3, [r7, #14]
 80149d8:	e001      	b.n	80149de <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80149da:	2300      	movs	r3, #0
 80149dc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80149de:	797b      	ldrb	r3, [r7, #5]
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	021b      	lsls	r3, r3, #8
 80149e4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80149ec:	89bb      	ldrh	r3, [r7, #12]
 80149ee:	4413      	add	r3, r2
 80149f0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80149f2:	6a3b      	ldr	r3, [r7, #32]
 80149f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80149f8:	89fa      	ldrh	r2, [r7, #14]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d805      	bhi.n	8014a0a <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80149fe:	6a3b      	ldr	r3, [r7, #32]
 8014a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8014a04:	89ba      	ldrh	r2, [r7, #12]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d203      	bcs.n	8014a12 <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	2205      	movs	r2, #5
 8014a0e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 8014a12:	bf00      	nop
 8014a14:	3710      	adds	r7, #16
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bc90      	pop	{r4, r7}
 8014a1a:	4770      	bx	lr

08014a1c <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8014a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a1e:	b08f      	sub	sp, #60	; 0x3c
 8014a20:	af06      	add	r7, sp, #24
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	607a      	str	r2, [r7, #4]
 8014a28:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8014a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a34:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014a38:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8014a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014a3c:	f7ff f856 	bl	8013aec <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8014a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8014a46:	22ac      	movs	r2, #172	; 0xac
 8014a48:	6839      	ldr	r1, [r7, #0]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f010 fcf2 	bl	8025434 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	781a      	ldrb	r2, [r3, #0]
 8014a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a56:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	785a      	ldrb	r2, [r3, #1]
 8014a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a5e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	789a      	ldrb	r2, [r3, #2]
 8014a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a66:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8014a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a70:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8014a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a74:	2200      	movs	r2, #0
 8014a76:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8014a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a7a:	2204      	movs	r2, #4
 8014a7c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8014a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a80:	2200      	movs	r2, #0
 8014a82:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8014a84:	2300      	movs	r3, #0
 8014a86:	77bb      	strb	r3, [r7, #30]
 8014a88:	e008      	b.n	8014a9c <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8014a8a:	7fbb      	ldrb	r3, [r7, #30]
 8014a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4413      	add	r3, r2
 8014a92:	2200      	movs	r2, #0
 8014a94:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8014a96:	7fbb      	ldrb	r3, [r7, #30]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	77bb      	strb	r3, [r7, #30]
 8014a9c:	7fbb      	ldrb	r3, [r7, #30]
 8014a9e:	2b04      	cmp	r3, #4
 8014aa0:	d9f3      	bls.n	8014a8a <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8014aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fd ff58 	bl	801295e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014aba:	4619      	mov	r1, r3
 8014abc:	4610      	mov	r0, r2
 8014abe:	f7fd ff8e 	bl	80129de <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8014ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ac4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fe fb66 	bl	801319a <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8014ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ad0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fd fffc 	bl	8012ad2 <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d009      	beq.n	8014af8 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8014ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ae6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8014aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aec:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8014af0:	461a      	mov	r2, r3
 8014af2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014af4:	f000 fdae 	bl	8015654 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8014b00:	2300      	movs	r3, #0
 8014b02:	77bb      	strb	r3, [r7, #30]
 8014b04:	e01e      	b.n	8014b44 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8014b06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d117      	bne.n	8014b3e <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8014b0e:	7fbb      	ldrb	r3, [r7, #30]
 8014b10:	68ba      	ldr	r2, [r7, #8]
 8014b12:	3304      	adds	r3, #4
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	8898      	ldrh	r0, [r3, #4]
 8014b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b1c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8014b20:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8014b22:	005b      	lsls	r3, r3, #1
 8014b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b26:	4413      	add	r3, r2
 8014b28:	3304      	adds	r3, #4
 8014b2a:	9301      	str	r3, [sp, #4]
 8014b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	460b      	mov	r3, r1
 8014b32:	68ba      	ldr	r2, [r7, #8]
 8014b34:	68f9      	ldr	r1, [r7, #12]
 8014b36:	f7fe fb7b 	bl	8013230 <VL53L1_f_001>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8014b3e:	7fbb      	ldrb	r3, [r7, #30]
 8014b40:	3301      	adds	r3, #1
 8014b42:	77bb      	strb	r3, [r7, #30]
 8014b44:	7fbb      	ldrb	r3, [r7, #30]
 8014b46:	2b04      	cmp	r3, #4
 8014b48:	d9dd      	bls.n	8014b06 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8014b4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d11a      	bne.n	8014b88 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8014b5a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8014b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b68:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b6e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8014b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014b74:	9102      	str	r1, [sp, #8]
 8014b76:	9201      	str	r2, [sp, #4]
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	462b      	mov	r3, r5
 8014b7c:	4622      	mov	r2, r4
 8014b7e:	4631      	mov	r1, r6
 8014b80:	f7ff f82d 	bl	8013bde <VL53L1_f_018>
 8014b84:	4603      	mov	r3, r0
 8014b86:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8014b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d104      	bne.n	8014b9a <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8014b90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014b92:	f7ff f954 	bl	8013e3e <VL53L1_f_019>
 8014b96:	4603      	mov	r3, r0
 8014b98:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8014b9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d104      	bne.n	8014bac <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8014ba2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014ba4:	f7ff f999 	bl	8013eda <VL53L1_f_020>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8014bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d104      	bne.n	8014bbe <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8014bb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014bb6:	f7ff fa0e 	bl	8013fd6 <VL53L1_f_021>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	77bb      	strb	r3, [r7, #30]
 8014bc2:	e0a6      	b.n	8014d12 <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8014bc4:	7fba      	ldrb	r2, [r7, #30]
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	00db      	lsls	r3, r3, #3
 8014bca:	4413      	add	r3, r2
 8014bcc:	009b      	lsls	r3, r3, #2
 8014bce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014bd4:	4413      	add	r3, r2
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8014bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d109      	bne.n	8014bf6 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8014be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014be4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8014be8:	7fbb      	ldrb	r3, [r7, #30]
 8014bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7ff fb48 	bl	8014282 <VL53L1_f_022>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8014bf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d110      	bne.n	8014c20 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8014bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c00:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8014c04:	69bb      	ldr	r3, [r7, #24]
 8014c06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8014c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c0c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8014c10:	7fb8      	ldrb	r0, [r7, #30]
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	4613      	mov	r3, r2
 8014c16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c18:	f7ff fd5a 	bl	80146d0 <VL53L1_f_023>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8014c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d10d      	bne.n	8014c44 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8014c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c2a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8014c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c30:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8014c34:	7fb8      	ldrb	r0, [r7, #30]
 8014c36:	9300      	str	r3, [sp, #0]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c3c:	f7ff fd48 	bl	80146d0 <VL53L1_f_023>
 8014c40:	4603      	mov	r3, r0
 8014c42:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8014c44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d10d      	bne.n	8014c68 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8014c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c4e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8014c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c54:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8014c58:	7fb8      	ldrb	r0, [r7, #30]
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c60:	f7ff fd36 	bl	80146d0 <VL53L1_f_023>
 8014c64:	4603      	mov	r3, r0
 8014c66:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8014c68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d109      	bne.n	8014c84 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8014c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c72:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8014c76:	7fb8      	ldrb	r0, [r7, #30]
 8014c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c7c:	f000 f8dd 	bl	8014e3a <VL53L1_f_034>
 8014c80:	4603      	mov	r3, r0
 8014c82:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8014c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d108      	bne.n	8014c9e <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	8a19      	ldrh	r1, [r3, #16]
 8014c90:	7fb8      	ldrb	r0, [r7, #30]
 8014c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c96:	f000 f95c 	bl	8014f52 <VL53L1_f_035>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8014c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d124      	bne.n	8014cf0 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	789d      	ldrb	r5, [r3, #2]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	7e1e      	ldrb	r6, [r3, #24]
 8014cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb0:	f893 c003 	ldrb.w	ip, [r3, #3]
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	f893 e006 	ldrb.w	lr, [r3, #6]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cc2:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8014cc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014cc8:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8014ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014cce:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8014cd2:	697c      	ldr	r4, [r7, #20]
 8014cd4:	3420      	adds	r4, #32
 8014cd6:	9404      	str	r4, [sp, #16]
 8014cd8:	9003      	str	r0, [sp, #12]
 8014cda:	9102      	str	r1, [sp, #8]
 8014cdc:	9201      	str	r2, [sp, #4]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	4673      	mov	r3, lr
 8014ce2:	4662      	mov	r2, ip
 8014ce4:	4631      	mov	r1, r6
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f7ff fd46 	bl	8014778 <VL53L1_f_026>
 8014cec:	4603      	mov	r3, r0
 8014cee:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8014cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d109      	bne.n	8014d0c <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8014cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cfa:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8014cfe:	7fb8      	ldrb	r0, [r7, #30]
 8014d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d02:	2101      	movs	r1, #1
 8014d04:	f7ff fb10 	bl	8014328 <VL53L1_f_027>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8014d0c:	7fbb      	ldrb	r3, [r7, #30]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	77bb      	strb	r3, [r7, #30]
 8014d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d14:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8014d18:	7fba      	ldrb	r2, [r7, #30]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	f4ff af52 	bcc.w	8014bc4 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8014d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d107      	bne.n	8014d38 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	785b      	ldrb	r3, [r3, #1]
 8014d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7ff fa23 	bl	801417a <VL53L1_f_028>
 8014d34:	4603      	mov	r3, r0
 8014d36:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8014d38:	2300      	movs	r3, #0
 8014d3a:	77bb      	strb	r3, [r7, #30]
 8014d3c:	e071      	b.n	8014e22 <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8014d3e:	7fba      	ldrb	r2, [r7, #30]
 8014d40:	4613      	mov	r3, r2
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	4413      	add	r3, r2
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d4e:	4413      	add	r3, r2
 8014d50:	3304      	adds	r3, #4
 8014d52:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8014d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d56:	7c9a      	ldrb	r2, [r3, #18]
 8014d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d5a:	7c5b      	ldrb	r3, [r3, #17]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d25c      	bcs.n	8014e1a <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	dd57      	ble.n	8014e1c <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8014d70:	2bff      	cmp	r3, #255	; 0xff
 8014d72:	d053      	beq.n	8014e1c <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8014d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d76:	7c9b      	ldrb	r3, [r3, #18]
 8014d78:	461a      	mov	r2, r3
			prange_data =
 8014d7a:	234c      	movs	r3, #76	; 0x4c
 8014d7c:	fb02 f303 	mul.w	r3, r2, r3
 8014d80:	3310      	adds	r3, #16
 8014d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d84:	4413      	add	r3, r2
 8014d86:	3304      	adds	r3, #4
 8014d88:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8014d8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d115      	bne.n	8014dbe <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8014d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d94:	7c98      	ldrb	r0, [r3, #18]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f893 1020 	ldrb.w	r1, [r3, #32]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	8b5d      	ldrh	r5, [r3, #26]
 8014da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014da8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8014dac:	693a      	ldr	r2, [r7, #16]
 8014dae:	9202      	str	r2, [sp, #8]
 8014db0:	697a      	ldr	r2, [r7, #20]
 8014db2:	9201      	str	r2, [sp, #4]
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	462b      	mov	r3, r5
 8014db8:	4622      	mov	r2, r4
 8014dba:	f7ff fd85 	bl	80148c8 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8014dbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d115      	bne.n	8014df2 <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8014dd8:	69bb      	ldr	r3, [r7, #24]
 8014dda:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8014dde:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8014de2:	9301      	str	r3, [sp, #4]
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	4623      	mov	r3, r4
 8014dea:	f000 fb44 	bl	8015476 <VL53L1_f_011>
 8014dee:	4603      	mov	r3, r0
 8014df0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8014df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d108      	bne.n	8014e0c <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	8bd8      	ldrh	r0, [r3, #30]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014e04:	693a      	ldr	r2, [r7, #16]
 8014e06:	4619      	mov	r1, r3
 8014e08:	f000 fbda 	bl	80155c0 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8014e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e0e:	7c9b      	ldrb	r3, [r3, #18]
 8014e10:	3301      	adds	r3, #1
 8014e12:	b2da      	uxtb	r2, r3
 8014e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e16:	749a      	strb	r2, [r3, #18]
 8014e18:	e000      	b.n	8014e1c <VL53L1_f_033+0x400>
			continue;
 8014e1a:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8014e1c:	7fbb      	ldrb	r3, [r7, #30]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	77bb      	strb	r3, [r7, #30]
 8014e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e24:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8014e28:	7fba      	ldrb	r2, [r7, #30]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d387      	bcc.n	8014d3e <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8014e2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3724      	adds	r7, #36	; 0x24
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e3a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b08c      	sub	sp, #48	; 0x30
 8014e3e:	af02      	add	r7, sp, #8
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	603b      	str	r3, [r7, #0]
 8014e46:	4603      	mov	r3, r0
 8014e48:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8014e50:	7bfa      	ldrb	r2, [r7, #15]
 8014e52:	4613      	mov	r3, r2
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	4413      	add	r3, r2
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	4413      	add	r3, r2
 8014e62:	3304      	adds	r3, #4
 8014e64:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8014e66:	2300      	movs	r3, #0
 8014e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8014e74:	2300      	movs	r3, #0
 8014e76:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	785a      	ldrb	r2, [r3, #1]
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	781a      	ldrb	r2, [r3, #0]
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	789a      	ldrb	r2, [r3, #2]
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e9c:	e04d      	b.n	8014f3a <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	78da      	ldrb	r2, [r3, #3]
 8014ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014eaa:	fb01 f202 	mul.w	r2, r1, r2
 8014eae:	1a9b      	subs	r3, r3, r2
 8014eb0:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8014eb2:	6a3b      	ldr	r3, [r7, #32]
 8014eb4:	7999      	ldrb	r1, [r3, #6]
 8014eb6:	f107 0218 	add.w	r2, r7, #24
 8014eba:	7ff8      	ldrb	r0, [r7, #31]
 8014ebc:	f107 0310 	add.w	r3, r7, #16
 8014ec0:	9301      	str	r3, [sp, #4]
 8014ec2:	f107 0314 	add.w	r3, r7, #20
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	4613      	mov	r3, r2
 8014eca:	68ba      	ldr	r2, [r7, #8]
 8014ecc:	f000 fa7a 	bl	80153c4 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8014ed0:	7ffb      	ldrb	r3, [r7, #31]
 8014ed2:	69ba      	ldr	r2, [r7, #24]
 8014ed4:	6839      	ldr	r1, [r7, #0]
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	440b      	add	r3, r1
 8014eda:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8014edc:	7ffb      	ldrb	r3, [r7, #31]
 8014ede:	697a      	ldr	r2, [r7, #20]
 8014ee0:	6839      	ldr	r1, [r7, #0]
 8014ee2:	3318      	adds	r3, #24
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	440b      	add	r3, r1
 8014ee8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8014eea:	7ffb      	ldrb	r3, [r7, #31]
 8014eec:	693a      	ldr	r2, [r7, #16]
 8014eee:	6839      	ldr	r1, [r7, #0]
 8014ef0:	3330      	adds	r3, #48	; 0x30
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	440b      	add	r3, r1
 8014ef6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8014ef8:	69ba      	ldr	r2, [r7, #24]
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	689a      	ldr	r2, [r3, #8]
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8014f06:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8014f08:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8014f0a:	6839      	ldr	r1, [r7, #0]
 8014f0c:	3348      	adds	r3, #72	; 0x48
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	440b      	add	r3, r1
 8014f12:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8014f14:	697a      	ldr	r2, [r7, #20]
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	689a      	ldr	r2, [r3, #8]
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8014f22:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8014f24:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	3360      	adds	r3, #96	; 0x60
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	440b      	add	r3, r1
 8014f2e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8014f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f34:	3301      	adds	r3, #1
 8014f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	791b      	ldrb	r3, [r3, #4]
 8014f3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d9ab      	bls.n	8014e9e <VL53L1_f_034+0x64>
	}

	return status;
 8014f46:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3728      	adds	r7, #40	; 0x28
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8014f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f54:	b08f      	sub	sp, #60	; 0x3c
 8014f56:	af06      	add	r7, sp, #24
 8014f58:	60ba      	str	r2, [r7, #8]
 8014f5a:	607b      	str	r3, [r7, #4]
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	73fb      	strb	r3, [r7, #15]
 8014f60:	460b      	mov	r3, r1
 8014f62:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8014f64:	2300      	movs	r3, #0
 8014f66:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8014f6c:	7bfa      	ldrb	r2, [r7, #15]
 8014f6e:	4613      	mov	r3, r2
 8014f70:	00db      	lsls	r3, r3, #3
 8014f72:	4413      	add	r3, r2
 8014f74:	009b      	lsls	r3, r3, #2
 8014f76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	3304      	adds	r3, #4
 8014f80:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8014f86:	2300      	movs	r3, #0
 8014f88:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	77fb      	strb	r3, [r7, #31]
 8014f94:	e0b9      	b.n	801510a <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	78da      	ldrb	r2, [r3, #3]
 8014f9a:	7ffb      	ldrb	r3, [r7, #31]
 8014f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fa0:	fb01 f202 	mul.w	r2, r1, r2
 8014fa4:	1a9b      	subs	r3, r3, r2
 8014fa6:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8014fa8:	7ffb      	ldrb	r3, [r7, #31]
 8014faa:	3301      	adds	r3, #1
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	78d2      	ldrb	r2, [r2, #3]
 8014fb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8014fb4:	fb01 f202 	mul.w	r2, r1, r2
 8014fb8:	1a9b      	subs	r3, r3, r2
 8014fba:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	789b      	ldrb	r3, [r3, #2]
 8014fc0:	7dfa      	ldrb	r2, [r7, #23]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	f080 809e 	bcs.w	8015104 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8014fcc:	7dba      	ldrb	r2, [r7, #22]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	f080 8098 	bcs.w	8015104 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8014fd4:	7dfb      	ldrb	r3, [r7, #23]
 8014fd6:	68ba      	ldr	r2, [r7, #8]
 8014fd8:	3348      	adds	r3, #72	; 0x48
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4413      	add	r3, r2
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d10e      	bne.n	8015002 <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
 8014fe6:	68ba      	ldr	r2, [r7, #8]
 8014fe8:	3360      	adds	r3, #96	; 0x60
 8014fea:	009b      	lsls	r3, r3, #2
 8014fec:	4413      	add	r3, r2
 8014fee:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d106      	bne.n	8015002 <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8014ff4:	7dfb      	ldrb	r3, [r7, #23]
 8014ff6:	68ba      	ldr	r2, [r7, #8]
 8014ff8:	4413      	add	r3, r2
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8015000:	e043      	b.n	801508a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8015002:	7dfb      	ldrb	r3, [r7, #23]
 8015004:	68ba      	ldr	r2, [r7, #8]
 8015006:	3348      	adds	r3, #72	; 0x48
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	4413      	add	r3, r2
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	db0e      	blt.n	8015030 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8015012:	7dfb      	ldrb	r3, [r7, #23]
 8015014:	68ba      	ldr	r2, [r7, #8]
 8015016:	3360      	adds	r3, #96	; 0x60
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	4413      	add	r3, r2
 801501c:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 801501e:	2b00      	cmp	r3, #0
 8015020:	db06      	blt.n	8015030 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8015022:	7dfb      	ldrb	r3, [r7, #23]
 8015024:	68ba      	ldr	r2, [r7, #8]
 8015026:	4413      	add	r3, r2
 8015028:	2201      	movs	r2, #1
 801502a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801502e:	e02c      	b.n	801508a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8015030:	7dfb      	ldrb	r3, [r7, #23]
 8015032:	68ba      	ldr	r2, [r7, #8]
 8015034:	3348      	adds	r3, #72	; 0x48
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	4413      	add	r3, r2
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	da1e      	bge.n	801507e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8015040:	7dfb      	ldrb	r3, [r7, #23]
 8015042:	68ba      	ldr	r2, [r7, #8]
 8015044:	3360      	adds	r3, #96	; 0x60
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	4413      	add	r3, r2
 801504a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801504c:	2b00      	cmp	r3, #0
 801504e:	db16      	blt.n	801507e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8015050:	7dbb      	ldrb	r3, [r7, #22]
 8015052:	68ba      	ldr	r2, [r7, #8]
 8015054:	3348      	adds	r3, #72	; 0x48
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	4413      	add	r3, r2
 801505a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801505c:	2b00      	cmp	r3, #0
 801505e:	db0e      	blt.n	801507e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8015060:	7dbb      	ldrb	r3, [r7, #22]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	3360      	adds	r3, #96	; 0x60
 8015066:	009b      	lsls	r3, r3, #2
 8015068:	4413      	add	r3, r2
 801506a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801506c:	2b00      	cmp	r3, #0
 801506e:	da06      	bge.n	801507e <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	4413      	add	r3, r2
 8015076:	2201      	movs	r2, #1
 8015078:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801507c:	e005      	b.n	801508a <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801507e:	7dfb      	ldrb	r3, [r7, #23]
 8015080:	68ba      	ldr	r2, [r7, #8]
 8015082:	4413      	add	r3, r2
 8015084:	2200      	movs	r2, #0
 8015086:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	4413      	add	r3, r2
 8015090:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8015094:	2b00      	cmp	r3, #0
 8015096:	d035      	beq.n	8015104 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	7ffa      	ldrb	r2, [r7, #31]
 801509c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 801509e:	7dfb      	ldrb	r3, [r7, #23]
 80150a0:	68ba      	ldr	r2, [r7, #8]
 80150a2:	009b      	lsls	r3, r3, #2
 80150a4:	4413      	add	r3, r2
 80150a6:	685c      	ldr	r4, [r3, #4]
 80150a8:	7dfb      	ldrb	r3, [r7, #23]
 80150aa:	68ba      	ldr	r2, [r7, #8]
 80150ac:	3318      	adds	r3, #24
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	4413      	add	r3, r2
 80150b2:	685d      	ldr	r5, [r3, #4]
 80150b4:	7dfb      	ldrb	r3, [r7, #23]
 80150b6:	68ba      	ldr	r2, [r7, #8]
 80150b8:	3330      	adds	r3, #48	; 0x30
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	4413      	add	r3, r2
 80150be:	685e      	ldr	r6, [r3, #4]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	689b      	ldr	r3, [r3, #8]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	78d2      	ldrb	r2, [r2, #3]
 80150c8:	69b9      	ldr	r1, [r7, #24]
 80150ca:	3118      	adds	r1, #24
 80150cc:	7ff8      	ldrb	r0, [r7, #31]
 80150ce:	9105      	str	r1, [sp, #20]
 80150d0:	9204      	str	r2, [sp, #16]
 80150d2:	9303      	str	r3, [sp, #12]
 80150d4:	2300      	movs	r3, #0
 80150d6:	9302      	str	r3, [sp, #8]
 80150d8:	2300      	movs	r3, #0
 80150da:	9301      	str	r3, [sp, #4]
 80150dc:	2300      	movs	r3, #0
 80150de:	9300      	str	r3, [sp, #0]
 80150e0:	4633      	mov	r3, r6
 80150e2:	462a      	mov	r2, r5
 80150e4:	4621      	mov	r1, r4
 80150e6:	f000 f81c 	bl	8015122 <VL53L1_f_036>
 80150ea:	4603      	mov	r3, r0
 80150ec:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 80150ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80150f2:	f113 0f0f 	cmn.w	r3, #15
 80150f6:	d105      	bne.n	8015104 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80150f8:	7dfb      	ldrb	r3, [r7, #23]
 80150fa:	68ba      	ldr	r2, [r7, #8]
 80150fc:	4413      	add	r3, r2
 80150fe:	2200      	movs	r2, #0
 8015100:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8015104:	7ffb      	ldrb	r3, [r7, #31]
 8015106:	3301      	adds	r3, #1
 8015108:	77fb      	strb	r3, [r7, #31]
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	791b      	ldrb	r3, [r3, #4]
 801510e:	7ffa      	ldrb	r2, [r7, #31]
 8015110:	429a      	cmp	r2, r3
 8015112:	f4ff af40 	bcc.w	8014f96 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8015116:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801511a:	4618      	mov	r0, r3
 801511c:	3724      	adds	r7, #36	; 0x24
 801511e:	46bd      	mov	sp, r7
 8015120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015122 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8015122:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015126:	b0b2      	sub	sp, #200	; 0xc8
 8015128:	af00      	add	r7, sp, #0
 801512a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801512e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015136:	4603      	mov	r3, r0
 8015138:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801513c:	23f1      	movs	r3, #241	; 0xf1
 801513e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8015142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015146:	f04f 0300 	mov.w	r3, #0
 801514a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 801514e:	f04f 0200 	mov.w	r2, #0
 8015152:	f04f 0300 	mov.w	r3, #0
 8015156:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 801515a:	f04f 0200 	mov.w	r2, #0
 801515e:	f04f 0300 	mov.w	r3, #0
 8015162:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8015166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801516a:	17da      	asrs	r2, r3, #31
 801516c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8015174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015178:	17da      	asrs	r2, r3, #31
 801517a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801517e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8015182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801518a:	4602      	mov	r2, r0
 801518c:	ebb3 0802 	subs.w	r8, r3, r2
 8015190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015194:	460a      	mov	r2, r1
 8015196:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 801519a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801519e:	17da      	asrs	r2, r3, #31
 80151a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80151a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80151a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80151a8:	460b      	mov	r3, r1
 80151aa:	ebb8 0a03 	subs.w	sl, r8, r3
 80151ae:	4613      	mov	r3, r2
 80151b0:	eb69 0b03 	sbc.w	fp, r9, r3
 80151b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80151b8:	17da      	asrs	r2, r3, #31
 80151ba:	673b      	str	r3, [r7, #112]	; 0x70
 80151bc:	677a      	str	r2, [r7, #116]	; 0x74
 80151be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80151c2:	460b      	mov	r3, r1
 80151c4:	ebba 0403 	subs.w	r4, sl, r3
 80151c8:	4613      	mov	r3, r2
 80151ca:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80151ce:	f04f 0200 	mov.w	r2, #0
 80151d2:	f04f 0300 	mov.w	r3, #0
 80151d6:	032b      	lsls	r3, r5, #12
 80151d8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80151dc:	0322      	lsls	r2, r4, #12
 80151de:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80151e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80151e6:	17da      	asrs	r2, r3, #31
 80151e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80151ea:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80151ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80151f0:	17da      	asrs	r2, r3, #31
 80151f2:	663b      	str	r3, [r7, #96]	; 0x60
 80151f4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80151f6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80151fa:	4623      	mov	r3, r4
 80151fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8015200:	4602      	mov	r2, r0
 8015202:	1a9b      	subs	r3, r3, r2
 8015204:	65bb      	str	r3, [r7, #88]	; 0x58
 8015206:	462b      	mov	r3, r5
 8015208:	460a      	mov	r2, r1
 801520a:	eb63 0302 	sbc.w	r3, r3, r2
 801520e:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8015210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015214:	17da      	asrs	r2, r3, #31
 8015216:	653b      	str	r3, [r7, #80]	; 0x50
 8015218:	657a      	str	r2, [r7, #84]	; 0x54
 801521a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801521e:	4623      	mov	r3, r4
 8015220:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8015224:	4602      	mov	r2, r0
 8015226:	1a9b      	subs	r3, r3, r2
 8015228:	64bb      	str	r3, [r7, #72]	; 0x48
 801522a:	462b      	mov	r3, r5
 801522c:	460a      	mov	r2, r1
 801522e:	eb63 0302 	sbc.w	r3, r3, r2
 8015232:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8015234:	f04f 0200 	mov.w	r2, #0
 8015238:	f04f 0300 	mov.w	r3, #0
 801523c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8015240:	4629      	mov	r1, r5
 8015242:	030b      	lsls	r3, r1, #12
 8015244:	4621      	mov	r1, r4
 8015246:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 801524a:	4621      	mov	r1, r4
 801524c:	030a      	lsls	r2, r1, #12
 801524e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8015252:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8015256:	4313      	orrs	r3, r2
 8015258:	f000 80a8 	beq.w	80153ac <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 801525c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8015260:	f04f 0000 	mov.w	r0, #0
 8015264:	f04f 0100 	mov.w	r1, #0
 8015268:	0319      	lsls	r1, r3, #12
 801526a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 801526e:	0310      	lsls	r0, r2, #12
 8015270:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8015274:	1814      	adds	r4, r2, r0
 8015276:	633c      	str	r4, [r7, #48]	; 0x30
 8015278:	414b      	adcs	r3, r1
 801527a:	637b      	str	r3, [r7, #52]	; 0x34
 801527c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8015280:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8015284:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8015288:	1891      	adds	r1, r2, r2
 801528a:	62b9      	str	r1, [r7, #40]	; 0x28
 801528c:	415b      	adcs	r3, r3
 801528e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015294:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8015298:	f7eb fc5e 	bl	8000b58 <__aeabi_ldivmod>
 801529c:	4602      	mov	r2, r0
 801529e:	460b      	mov	r3, r1
 80152a0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 80152a4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80152a8:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80152ac:	6239      	str	r1, [r7, #32]
 80152ae:	f143 0300 	adc.w	r3, r3, #0
 80152b2:	627b      	str	r3, [r7, #36]	; 0x24
 80152b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80152b8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 80152bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80152c0:	2200      	movs	r2, #0
 80152c2:	643b      	str	r3, [r7, #64]	; 0x40
 80152c4:	647a      	str	r2, [r7, #68]	; 0x44
 80152c6:	f04f 0200 	mov.w	r2, #0
 80152ca:	f04f 0300 	mov.w	r3, #0
 80152ce:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80152d2:	4629      	mov	r1, r5
 80152d4:	030b      	lsls	r3, r1, #12
 80152d6:	4621      	mov	r1, r4
 80152d8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80152dc:	4621      	mov	r1, r4
 80152de:	030a      	lsls	r2, r1, #12
 80152e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80152e4:	1884      	adds	r4, r0, r2
 80152e6:	61bc      	str	r4, [r7, #24]
 80152e8:	eb41 0303 	adc.w	r3, r1, r3
 80152ec:	61fb      	str	r3, [r7, #28]
 80152ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80152f2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 80152f6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80152fa:	1c51      	adds	r1, r2, #1
 80152fc:	63b9      	str	r1, [r7, #56]	; 0x38
 80152fe:	f143 0300 	adc.w	r3, r3, #0
 8015302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015304:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015308:	460b      	mov	r3, r1
 801530a:	0fdb      	lsrs	r3, r3, #31
 801530c:	2200      	movs	r2, #0
 801530e:	613b      	str	r3, [r7, #16]
 8015310:	617a      	str	r2, [r7, #20]
 8015312:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8015316:	4623      	mov	r3, r4
 8015318:	4602      	mov	r2, r0
 801531a:	189b      	adds	r3, r3, r2
 801531c:	60bb      	str	r3, [r7, #8]
 801531e:	460b      	mov	r3, r1
 8015320:	462a      	mov	r2, r5
 8015322:	eb42 0303 	adc.w	r3, r2, r3
 8015326:	60fb      	str	r3, [r7, #12]
 8015328:	f04f 0200 	mov.w	r2, #0
 801532c:	f04f 0300 	mov.w	r3, #0
 8015330:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015334:	4621      	mov	r1, r4
 8015336:	084a      	lsrs	r2, r1, #1
 8015338:	4629      	mov	r1, r5
 801533a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801533e:	4629      	mov	r1, r5
 8015340:	104b      	asrs	r3, r1, #1
 8015342:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8015346:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801534a:	2b00      	cmp	r3, #0
 801534c:	da05      	bge.n	801535a <VL53L1_f_036+0x238>
			mean_phase = 0;
 801534e:	f04f 0200 	mov.w	r2, #0
 8015352:	f04f 0300 	mov.w	r3, #0
 8015356:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 801535a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801535e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8015362:	f173 0300 	sbcs.w	r3, r3, #0
 8015366:	db05      	blt.n	8015374 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8015368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801536c:	f04f 0300 	mov.w	r3, #0
 8015370:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8015374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 801537c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8015380:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8015382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015386:	fb93 f1f2 	sdiv	r1, r3, r2
 801538a:	fb01 f202 	mul.w	r2, r1, r2
 801538e:	1a9b      	subs	r3, r3, r2
 8015390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8015394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015398:	17da      	asrs	r2, r3, #31
 801539a:	603b      	str	r3, [r7, #0]
 801539c:	607a      	str	r2, [r7, #4]
 801539e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80153a2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 80153a6:	2300      	movs	r3, #0
 80153a8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 80153ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80153b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80153b4:	601a      	str	r2, [r3, #0]

	return status;
 80153b6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	37c8      	adds	r7, #200	; 0xc8
 80153be:	46bd      	mov	sp, r7
 80153c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080153c4 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b087      	sub	sp, #28
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60ba      	str	r2, [r7, #8]
 80153cc:	607b      	str	r3, [r7, #4]
 80153ce:	4603      	mov	r3, r0
 80153d0:	73fb      	strb	r3, [r7, #15]
 80153d2:	460b      	mov	r3, r1
 80153d4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80153d6:	2300      	movs	r3, #0
 80153d8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80153da:	2300      	movs	r3, #0
 80153dc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2200      	movs	r2, #0
 80153e2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80153e4:	7bfa      	ldrb	r2, [r7, #15]
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	3206      	adds	r2, #6
 80153ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153ee:	6a3b      	ldr	r3, [r7, #32]
 80153f0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80153f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f4:	2200      	movs	r2, #0
 80153f6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80153f8:	2300      	movs	r3, #0
 80153fa:	75fb      	strb	r3, [r7, #23]
 80153fc:	e02f      	b.n	801545e <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80153fe:	7bfa      	ldrb	r2, [r7, #15]
 8015400:	7dfb      	ldrb	r3, [r7, #23]
 8015402:	4413      	add	r3, r2
 8015404:	68ba      	ldr	r2, [r7, #8]
 8015406:	7a92      	ldrb	r2, [r2, #10]
 8015408:	441a      	add	r2, r3
 801540a:	7bbb      	ldrb	r3, [r7, #14]
 801540c:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	7a92      	ldrb	r2, [r2, #10]
 8015412:	fb93 f1f2 	sdiv	r1, r3, r2
 8015416:	fb01 f202 	mul.w	r2, r1, r2
 801541a:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 801541c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 801541e:	7dfa      	ldrb	r2, [r7, #23]
 8015420:	7bbb      	ldrb	r3, [r7, #14]
 8015422:	429a      	cmp	r2, r3
 8015424:	d20a      	bcs.n	801543c <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	7db9      	ldrb	r1, [r7, #22]
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	3106      	adds	r1, #6
 8015430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015434:	441a      	add	r2, r3
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	601a      	str	r2, [r3, #0]
 801543a:	e00d      	b.n	8015458 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 801543c:	7dfa      	ldrb	r2, [r7, #23]
 801543e:	7bbb      	ldrb	r3, [r7, #14]
 8015440:	429a      	cmp	r2, r3
 8015442:	d909      	bls.n	8015458 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	7db9      	ldrb	r1, [r7, #22]
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	3106      	adds	r1, #6
 801544e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015452:	441a      	add	r2, r3
 8015454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015456:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	3301      	adds	r3, #1
 801545c:	75fb      	strb	r3, [r7, #23]
 801545e:	7bbb      	ldrb	r3, [r7, #14]
 8015460:	005a      	lsls	r2, r3, #1
 8015462:	7dfb      	ldrb	r3, [r7, #23]
 8015464:	429a      	cmp	r2, r3
 8015466:	daca      	bge.n	80153fe <VL53L1_f_013+0x3a>
	}
}
 8015468:	bf00      	nop
 801546a:	bf00      	nop
 801546c:	371c      	adds	r7, #28
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr

08015476 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8015476:	b580      	push	{r7, lr}
 8015478:	b088      	sub	sp, #32
 801547a:	af00      	add	r7, sp, #0
 801547c:	60ba      	str	r2, [r7, #8]
 801547e:	461a      	mov	r2, r3
 8015480:	4603      	mov	r3, r0
 8015482:	81fb      	strh	r3, [r7, #14]
 8015484:	460b      	mov	r3, r1
 8015486:	81bb      	strh	r3, [r7, #12]
 8015488:	4613      	mov	r3, r2
 801548a:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 801548c:	2300      	movs	r3, #0
 801548e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8015490:	2300      	movs	r3, #0
 8015492:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8015494:	2300      	movs	r3, #0
 8015496:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8015498:	2300      	movs	r3, #0
 801549a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 801549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801549e:	89fa      	ldrh	r2, [r7, #14]
 80154a0:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 80154a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a4:	89ba      	ldrh	r2, [r7, #12]
 80154a6:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 80154a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 80154ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b0:	88fa      	ldrh	r2, [r7, #6]
 80154b2:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 80154b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b6:	8a5b      	ldrh	r3, [r3, #18]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d101      	bne.n	80154c0 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80154bc:	23f1      	movs	r3, #241	; 0xf1
 80154be:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80154c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c2:	699b      	ldr	r3, [r3, #24]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d101      	bne.n	80154cc <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80154c8:	23f1      	movs	r3, #241	; 0xf1
 80154ca:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80154cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d16f      	bne.n	80155b4 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80154d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d6:	8a5b      	ldrh	r3, [r3, #18]
 80154d8:	4618      	mov	r0, r3
 80154da:	f7fd f903 	bl	80126e4 <VL53L1_calc_pll_period_us>
 80154de:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80154e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e2:	699b      	ldr	r3, [r3, #24]
 80154e4:	3301      	adds	r3, #1
 80154e6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80154e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ea:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80154ec:	4619      	mov	r1, r3
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80154f4:	6978      	ldr	r0, [r7, #20]
 80154f6:	f7fd f90c 	bl	8012712 <VL53L1_duration_maths>
 80154fa:	4602      	mov	r2, r0
 80154fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154fe:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8015500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015502:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8015504:	0119      	lsls	r1, r3, #4
 8015506:	693b      	ldr	r3, [r7, #16]
 8015508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801550c:	6978      	ldr	r0, [r7, #20]
 801550e:	f7fd f900 	bl	8012712 <VL53L1_duration_maths>
 8015512:	4602      	mov	r2, r0
 8015514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015516:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8015518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 801551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551e:	69db      	ldr	r3, [r3, #28]
 8015520:	4619      	mov	r1, r3
 8015522:	4610      	mov	r0, r2
 8015524:	f7fd fb6d 	bl	8012c02 <VL53L1_rate_maths>
 8015528:	4603      	mov	r3, r0
 801552a:	461a      	mov	r2, r3
 801552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8015530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8015534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015536:	6a1b      	ldr	r3, [r3, #32]
 8015538:	4619      	mov	r1, r3
 801553a:	4610      	mov	r0, r2
 801553c:	f7fd fb61 	bl	8012c02 <VL53L1_rate_maths>
 8015540:	4603      	mov	r3, r0
 8015542:	461a      	mov	r2, r3
 8015544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015546:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8015548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 801554c:	461a      	mov	r2, r3
 801554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015550:	6a1b      	ldr	r3, [r3, #32]
 8015552:	4619      	mov	r1, r3
 8015554:	4610      	mov	r0, r2
 8015556:	f7fd fb54 	bl	8012c02 <VL53L1_rate_maths>
 801555a:	4603      	mov	r3, r0
 801555c:	461a      	mov	r2, r3
 801555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015560:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8015562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015564:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8015566:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8015568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801556a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 801556c:	4413      	add	r3, r2
 801556e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8015570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015574:	2b01      	cmp	r3, #1
 8015576:	d905      	bls.n	8015584 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8015578:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801557c:	69ba      	ldr	r2, [r7, #24]
 801557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015582:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8015584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015586:	8ada      	ldrh	r2, [r3, #22]
 8015588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801558c:	69b9      	ldr	r1, [r7, #24]
 801558e:	2006      	movs	r0, #6
 8015590:	f7fd fb7c 	bl	8012c8c <VL53L1_rate_per_spad_maths>
 8015594:	4603      	mov	r3, r0
 8015596:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8015598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 801559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80155a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a2:	8ad9      	ldrh	r1, [r3, #22]
 80155a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a6:	69db      	ldr	r3, [r3, #28]
 80155a8:	461a      	mov	r2, r3
 80155aa:	f7fd f90b 	bl	80127c4 <VL53L1_events_per_spad_maths>
 80155ae:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 80155b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b2:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 80155b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3720      	adds	r7, #32
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80155c0:	b590      	push	{r4, r7, lr}
 80155c2:	b085      	sub	sp, #20
 80155c4:	af02      	add	r7, sp, #8
 80155c6:	4603      	mov	r3, r0
 80155c8:	603a      	str	r2, [r7, #0]
 80155ca:	80fb      	strh	r3, [r7, #6]
 80155cc:	460b      	mov	r3, r1
 80155ce:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	8a58      	ldrh	r0, [r3, #18]
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	8a9c      	ldrh	r4, [r3, #20]
 80155dc:	88fb      	ldrh	r3, [r7, #6]
 80155de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80155e2:	9201      	str	r2, [sp, #4]
 80155e4:	9300      	str	r3, [sp, #0]
 80155e6:	2300      	movs	r3, #0
 80155e8:	4622      	mov	r2, r4
 80155ea:	f7fd fb83 	bl	8012cf4 <VL53L1_range_maths>
 80155ee:	4603      	mov	r3, r0
 80155f0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	8a58      	ldrh	r0, [r3, #18]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	8a9c      	ldrh	r4, [r3, #20]
 8015606:	88fb      	ldrh	r3, [r7, #6]
 8015608:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801560c:	9201      	str	r2, [sp, #4]
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	2300      	movs	r3, #0
 8015612:	4622      	mov	r2, r4
 8015614:	f7fd fb6e 	bl	8012cf4 <VL53L1_range_maths>
 8015618:	4603      	mov	r3, r0
 801561a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	8a58      	ldrh	r0, [r3, #18]
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	8a9c      	ldrh	r4, [r3, #20]
 8015630:	88fb      	ldrh	r3, [r7, #6]
 8015632:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015636:	9201      	str	r2, [sp, #4]
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	2300      	movs	r3, #0
 801563c:	4622      	mov	r2, r4
 801563e:	f7fd fb59 	bl	8012cf4 <VL53L1_range_maths>
 8015642:	4603      	mov	r3, r0
 8015644:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 801564c:	bf00      	nop
 801564e:	370c      	adds	r7, #12
 8015650:	46bd      	mov	sp, r7
 8015652:	bd90      	pop	{r4, r7, pc}

08015654 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8015660:	2300      	movs	r3, #0
 8015662:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8015664:	2300      	movs	r3, #0
 8015666:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8015668:	2300      	movs	r3, #0
 801566a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 801566c:	2300      	movs	r3, #0
 801566e:	757b      	strb	r3, [r7, #21]





	memcpy(
 8015670:	22ac      	movs	r2, #172	; 0xac
 8015672:	68b9      	ldr	r1, [r7, #8]
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f00f fedd 	bl	8025434 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801567a:	2300      	movs	r3, #0
 801567c:	75fb      	strb	r3, [r7, #23]
 801567e:	e008      	b.n	8015692 <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8015680:	7dfa      	ldrb	r2, [r7, #23]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	3206      	adds	r2, #6
 8015686:	2100      	movs	r1, #0
 8015688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801568c:	7dfb      	ldrb	r3, [r7, #23]
 801568e:	3301      	adds	r3, #1
 8015690:	75fb      	strb	r3, [r7, #23]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	7a5b      	ldrb	r3, [r3, #9]
 8015696:	7dfa      	ldrb	r2, [r7, #23]
 8015698:	429a      	cmp	r2, r3
 801569a:	d3f1      	bcc.n	8015680 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 801569c:	68f9      	ldr	r1, [r7, #12]
 801569e:	68b8      	ldr	r0, [r7, #8]
 80156a0:	f000 f878 	bl	8015794 <VL53L1_f_038>
 80156a4:	4603      	mov	r3, r0
 80156a6:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	7a9a      	ldrb	r2, [r3, #10]
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	7a9b      	ldrb	r3, [r3, #10]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d203      	bcs.n	80156bc <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	7a9b      	ldrb	r3, [r3, #10]
 80156b8:	75bb      	strb	r3, [r7, #22]
 80156ba:	e002      	b.n	80156c2 <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	7a9b      	ldrb	r3, [r3, #10]
 80156c0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80156c2:	2300      	movs	r3, #0
 80156c4:	75fb      	strb	r3, [r7, #23]
 80156c6:	e05c      	b.n	8015782 <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80156c8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	db0f      	blt.n	80156f0 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80156d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156d4:	461a      	mov	r2, r3
 80156d6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80156da:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	7a92      	ldrb	r2, [r2, #10]
 80156e0:	b252      	sxtb	r2, r2
 80156e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80156e6:	fb01 f202 	mul.w	r2, r1, r2
 80156ea:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80156ec:	757b      	strb	r3, [r7, #21]
 80156ee:	e013      	b.n	8015718 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	7a9b      	ldrb	r3, [r3, #10]
 80156f4:	b25b      	sxtb	r3, r3
 80156f6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80156f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156fc:	4619      	mov	r1, r3
 80156fe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015702:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8015704:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8015706:	68ba      	ldr	r2, [r7, #8]
 8015708:	7a92      	ldrb	r2, [r2, #10]
 801570a:	b252      	sxtb	r2, r2
 801570c:	fb93 f1f2 	sdiv	r1, r3, r2
 8015710:	fb01 f202 	mul.w	r2, r1, r2
 8015714:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8015716:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8015718:	7d7b      	ldrb	r3, [r7, #21]
 801571a:	461a      	mov	r2, r3
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	3206      	adds	r2, #6
 8015720:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8015724:	7df9      	ldrb	r1, [r7, #23]
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	3106      	adds	r1, #6
 801572a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801572e:	429a      	cmp	r2, r3
 8015730:	dd12      	ble.n	8015758 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8015732:	7d7b      	ldrb	r3, [r7, #21]
 8015734:	461a      	mov	r2, r3
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	3206      	adds	r2, #6
 801573a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801573e:	7df9      	ldrb	r1, [r7, #23]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	3106      	adds	r1, #6
 8015744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8015748:	7d79      	ldrb	r1, [r7, #21]
 801574a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 801574c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	1d82      	adds	r2, r0, #6
 8015752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015756:	e006      	b.n	8015766 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8015758:	7d7b      	ldrb	r3, [r7, #21]
 801575a:	461a      	mov	r2, r3
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	3206      	adds	r2, #6
 8015760:	2100      	movs	r1, #0
 8015762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8015766:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8015768:	7d7b      	ldrb	r3, [r7, #21]
 801576a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	3206      	adds	r2, #6
 8015770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	1d82      	adds	r2, r0, #6
 8015778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 801577c:	7dfb      	ldrb	r3, [r7, #23]
 801577e:	3301      	adds	r3, #1
 8015780:	75fb      	strb	r3, [r7, #23]
 8015782:	7dfa      	ldrb	r2, [r7, #23]
 8015784:	7dbb      	ldrb	r3, [r7, #22]
 8015786:	429a      	cmp	r2, r3
 8015788:	d39e      	bcc.n	80156c8 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 801578a:	bf00      	nop
 801578c:	bf00      	nop
 801578e:	3718      	adds	r7, #24
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b086      	sub	sp, #24
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801579e:	2300      	movs	r3, #0
 80157a0:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 80157a2:	2300      	movs	r3, #0
 80157a4:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 80157a6:	2300      	movs	r3, #0
 80157a8:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 80157aa:	2300      	movs	r3, #0
 80157ac:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7fd fb85 	bl	8012ec4 <VL53L1_decode_vcsel_period>
 80157ba:	4603      	mov	r3, r0
	period = 2048 *
 80157bc:	02db      	lsls	r3, r3, #11
 80157be:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d00a      	beq.n	80157dc <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80157cc:	68ba      	ldr	r2, [r7, #8]
 80157ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80157d2:	68b9      	ldr	r1, [r7, #8]
 80157d4:	fb01 f202 	mul.w	r2, r1, r2
 80157d8:	1a9b      	subs	r3, r3, r2
 80157da:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80157e2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80157e4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	dd09      	ble.n	8015804 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	da01      	bge.n	80157fe <VL53L1_f_038+0x6a>
 80157fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80157fe:	12db      	asrs	r3, r3, #11
 8015800:	75fb      	strb	r3, [r7, #23]
 8015802:	e008      	b.n	8015816 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801580a:	2b00      	cmp	r3, #0
 801580c:	da01      	bge.n	8015812 <VL53L1_f_038+0x7e>
 801580e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8015812:	12db      	asrs	r3, r3, #11
 8015814:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8015816:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801581a:	4618      	mov	r0, r3
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8015822:	b580      	push	{r7, lr}
 8015824:	b08e      	sub	sp, #56	; 0x38
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801582c:	2300      	movs	r3, #0
 801582e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8015838:	2300      	movs	r3, #0
 801583a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801583e:	2300      	movs	r3, #0
 8015840:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 8015842:	2300      	movs	r3, #0
 8015844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8015854:	22ac      	movs	r2, #172	; 0xac
 8015856:	6879      	ldr	r1, [r7, #4]
 8015858:	6838      	ldr	r0, [r7, #0]
 801585a:	f00f fdeb 	bl	8025434 <memcpy>


	podata->VL53L1_p_024 = 0;
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	2200      	movs	r2, #0
 8015862:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8015864:	2300      	movs	r3, #0
 8015866:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801586a:	e00a      	b.n	8015882 <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 801586c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	4413      	add	r3, r2
 8015874:	2210      	movs	r2, #16
 8015876:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8015878:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801587c:	3301      	adds	r3, #1
 801587e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015882:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015886:	2b05      	cmp	r3, #5
 8015888:	d9f0      	bls.n	801586c <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801588a:	2300      	movs	r3, #0
 801588c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015890:	e00b      	b.n	80158aa <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 8015892:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	3206      	adds	r2, #6
 801589a:	2100      	movs	r1, #0
 801589c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80158a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158a4:	3301      	adds	r3, #1
 80158a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	7a5b      	ldrb	r3, [r3, #9]
 80158ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d3ed      	bcc.n	8015892 <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80158b6:	2300      	movs	r3, #0
 80158b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80158bc:	e012      	b.n	80158e4 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80158be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158c2:	3338      	adds	r3, #56	; 0x38
 80158c4:	443b      	add	r3, r7
 80158c6:	2200      	movs	r2, #0
 80158c8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80158cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158d0:	3338      	adds	r3, #56	; 0x38
 80158d2:	443b      	add	r3, r7
 80158d4:	2200      	movs	r2, #0
 80158d6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80158da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158de:	3301      	adds	r3, #1
 80158e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80158e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158e8:	2b0f      	cmp	r3, #15
 80158ea:	d9e8      	bls.n	80158be <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80158ec:	2300      	movs	r3, #0
 80158ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80158f2:	2300      	movs	r3, #0
 80158f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80158f8:	e068      	b.n	80159cc <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80158fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80158fe:	687a      	ldr	r2, [r7, #4]
 8015900:	4413      	add	r3, r2
 8015902:	7b1b      	ldrb	r3, [r3, #12]
 8015904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8015908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801590c:	3338      	adds	r3, #56	; 0x38
 801590e:	443b      	add	r3, r7
 8015910:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d115      	bne.n	8015944 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8015918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801591c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015920:	0092      	lsls	r2, r2, #2
 8015922:	b2d2      	uxtb	r2, r2
 8015924:	3338      	adds	r3, #56	; 0x38
 8015926:	443b      	add	r3, r7
 8015928:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 801592c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	4413      	add	r3, r2
 8015934:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8015938:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 801593a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801593e:	3301      	adds	r3, #1
 8015940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8015944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015948:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801594c:	443a      	add	r2, r7
 801594e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8015952:	3201      	adds	r2, #1
 8015954:	b2d2      	uxtb	r2, r2
 8015956:	3338      	adds	r3, #56	; 0x38
 8015958:	443b      	add	r3, r7
 801595a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801595e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015962:	3338      	adds	r3, #56	; 0x38
 8015964:	443b      	add	r3, r7
 8015966:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801596e:	2300      	movs	r3, #0
 8015970:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8015974:	e021      	b.n	80159ba <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8015976:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801597a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801597e:	441a      	add	r2, r3
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	3206      	adds	r2, #6
 8015984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8015988:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801598c:	009a      	lsls	r2, r3, #2
 801598e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015992:	441a      	add	r2, r3
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	3206      	adds	r2, #6
 8015998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 801599c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 80159a0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80159a4:	4402      	add	r2, r0
 80159a6:	4419      	add	r1, r3
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	3206      	adds	r2, #6
 80159ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80159b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80159b4:	3301      	adds	r3, #1
 80159b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80159ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80159be:	2b03      	cmp	r3, #3
 80159c0:	d9d9      	bls.n	8015976 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80159c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80159c6:	3301      	adds	r3, #1
 80159c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80159cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80159d0:	2b05      	cmp	r3, #5
 80159d2:	d992      	bls.n	80158fa <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80159d4:	2300      	movs	r3, #0
 80159d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80159da:	e022      	b.n	8015a22 <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80159dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80159e0:	683a      	ldr	r2, [r7, #0]
 80159e2:	4413      	add	r3, r2
 80159e4:	7b1b      	ldrb	r3, [r3, #12]
 80159e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80159ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80159ee:	2b0f      	cmp	r3, #15
 80159f0:	d80c      	bhi.n	8015a0c <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80159f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80159f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80159fa:	3238      	adds	r2, #56	; 0x38
 80159fc:	443a      	add	r2, r7
 80159fe:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 8015a02:	683a      	ldr	r2, [r7, #0]
 8015a04:	4413      	add	r3, r2
 8015a06:	460a      	mov	r2, r1
 8015a08:	749a      	strb	r2, [r3, #18]
 8015a0a:	e005      	b.n	8015a18 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8015a0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a10:	683a      	ldr	r2, [r7, #0]
 8015a12:	4413      	add	r3, r2
 8015a14:	2200      	movs	r2, #0
 8015a16:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8015a18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015a22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a26:	2b05      	cmp	r3, #5
 8015a28:	d9d8      	bls.n	80159dc <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8015a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	b2da      	uxtb	r2, r3
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8015a36:	2300      	movs	r3, #0
 8015a38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015a3c:	e050      	b.n	8015ae0 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8015a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a42:	3338      	adds	r3, #56	; 0x38
 8015a44:	443b      	add	r3, r7
 8015a46:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8015a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8015a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	dd41      	ble.n	8015ad6 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8015a52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a56:	3338      	adds	r3, #56	; 0x38
 8015a58:	443b      	add	r3, r7
 8015a5a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8015a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8015a62:	2300      	movs	r3, #0
 8015a64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8015a68:	e031      	b.n	8015ace <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8015a6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015a72:	441a      	add	r2, r3
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	3206      	adds	r2, #6
 8015a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8015a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7e:	0fda      	lsrs	r2, r3, #31
 8015a80:	4413      	add	r3, r2
 8015a82:	105b      	asrs	r3, r3, #1
 8015a84:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8015a86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015a8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015a8e:	441a      	add	r2, r3
 8015a90:	4401      	add	r1, r0
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	3206      	adds	r2, #6
 8015a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8015a9a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015a9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015aa2:	441a      	add	r2, r3
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	3206      	adds	r2, #6
 8015aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015aac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015ab0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015ab4:	441a      	add	r2, r3
 8015ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab8:	fb91 f1f3 	sdiv	r1, r1, r3
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	3206      	adds	r2, #6
 8015ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8015ac4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015ac8:	3301      	adds	r3, #1
 8015aca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8015ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015ad2:	2b03      	cmp	r3, #3
 8015ad4:	d9c9      	bls.n	8015a6a <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8015ad6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015ada:	3301      	adds	r3, #1
 8015adc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015ae0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015ae4:	2b0f      	cmp	r3, #15
 8015ae6:	d9aa      	bls.n	8015a3e <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	2200      	movs	r2, #0
 8015aec:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8015aee:	7bfb      	ldrb	r3, [r7, #15]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d102      	bne.n	8015afa <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8015af4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d002      	beq.n	8015b00 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	2204      	movs	r2, #4
 8015afe:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8015b00:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3738      	adds	r7, #56	; 0x38
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8015b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b0e:	b0cb      	sub	sp, #300	; 0x12c
 8015b10:	af06      	add	r7, sp, #24
 8015b12:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8015b16:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8015b1a:	6020      	str	r0, [r4, #0]
 8015b1c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8015b20:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8015b24:	6001      	str	r1, [r0, #0]
 8015b26:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8015b2a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8015b2e:	600a      	str	r2, [r1, #0]
 8015b30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015b34:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8015b38:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8015b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015b44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8015b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015b4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8015b50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015b54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8015b58:	f107 0318 	add.w	r3, r7, #24
 8015b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8015b60:	2300      	movs	r3, #0
 8015b62:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8015b64:	2300      	movs	r3, #0
 8015b66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8015b70:	2300      	movs	r3, #0
 8015b72:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8015b82:	2300      	movs	r3, #0
 8015b84:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8015b88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015b8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015b90:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8015b94:	6818      	ldr	r0, [r3, #0]
 8015b96:	f7ff fe44 	bl	8015822 <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8015b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b9e:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8015ba0:	b299      	uxth	r1, r3
 8015ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ba6:	3348      	adds	r3, #72	; 0x48
 8015ba8:	461a      	mov	r2, r3
 8015baa:	2000      	movs	r0, #0
 8015bac:	f7fd f9db 	bl	8012f66 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8015bb0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bb8:	3348      	adds	r3, #72	; 0x48
 8015bba:	4619      	mov	r1, r3
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	f7fd f994 	bl	8012eea <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8015bc2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d142      	bne.n	8015c50 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8015bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015bce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d039      	beq.n	8015c50 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8015bdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015be0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015bec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8015bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8015c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015c08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015c12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015c16:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8015c1a:	6812      	ldr	r2, [r2, #0]
 8015c1c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8015c20:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8015c24:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8015c28:	6809      	ldr	r1, [r1, #0]
 8015c2a:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8015c2e:	f107 0014 	add.w	r0, r7, #20
 8015c32:	9004      	str	r0, [sp, #16]
 8015c34:	9103      	str	r1, [sp, #12]
 8015c36:	9202      	str	r2, [sp, #8]
 8015c38:	9301      	str	r3, [sp, #4]
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	2300      	movs	r3, #0
 8015c40:	4632      	mov	r2, r6
 8015c42:	4629      	mov	r1, r5
 8015c44:	4620      	mov	r0, r4
 8015c46:	f002 f98c 	bl	8017f62 <VL53L1_f_040>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8015c50:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d115      	bne.n	8015c84 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8015c58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015c5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00c      	beq.n	8015c84 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8015c6a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8015c6e:	697a      	ldr	r2, [r7, #20]
 8015c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c74:	3348      	adds	r3, #72	; 0x48
 8015c76:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8015c7a:	f002 fbe4 	bl	8018446 <VL53L1_f_041>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8015c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8015c8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8015c94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015c98:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8015c9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ca0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8015ca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ca8:	2200      	movs	r2, #0
 8015caa:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8015cae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8015cb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8015cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8015cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015cd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d002      	beq.n	8015cea <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8015cea:	2300      	movs	r3, #0
 8015cec:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8015cf0:	e108      	b.n	8015f04 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8015cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8015d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8015d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d08:	3348      	adds	r3, #72	; 0x48
 8015d0a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015d0e:	7814      	ldrb	r4, [r2, #0]
 8015d10:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015d14:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8015d18:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8015d1c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8015d20:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8015d24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8015d28:	9405      	str	r4, [sp, #20]
 8015d2a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8015d2e:	9404      	str	r4, [sp, #16]
 8015d30:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8015d34:	9403      	str	r4, [sp, #12]
 8015d36:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8015d3a:	9402      	str	r4, [sp, #8]
 8015d3c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8015d40:	9401      	str	r4, [sp, #4]
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015d48:	6812      	ldr	r2, [r2, #0]
 8015d4a:	6809      	ldr	r1, [r1, #0]
 8015d4c:	6800      	ldr	r0, [r0, #0]
 8015d4e:	f7fe fe65 	bl	8014a1c <VL53L1_f_033>
 8015d52:	4603      	mov	r3, r0
 8015d54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8015d58:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f040 80cb 	bne.w	8015ef8 <VL53L1_hist_process_data+0x3ec>
 8015d62:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f040 80c6 	bne.w	8015ef8 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8015d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d70:	7c9b      	ldrb	r3, [r3, #18]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d110      	bne.n	8015d98 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8015d76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d7a:	3314      	adds	r3, #20
 8015d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8015d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d84:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8015d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015d8a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8015d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d90:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8015d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015d96:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8015d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015d9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8015da4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8015da8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	461a      	mov	r2, r3
 8015db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015db4:	fb02 f303 	mul.w	r3, r2, r3
 8015db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8015dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015dc0:	011b      	lsls	r3, r3, #4
 8015dc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8015dcc:	e08b      	b.n	8015ee6 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8015dce:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8015dd2:	224c      	movs	r2, #76	; 0x4c
 8015dd4:	fb02 f303 	mul.w	r3, r2, r3
 8015dd8:	3310      	adds	r3, #16
 8015dda:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015dde:	4413      	add	r3, r2
 8015de0:	3304      	adds	r3, #4
 8015de2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8015de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015dea:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8015dee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015df2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015df6:	429a      	cmp	r2, r3
 8015df8:	dd0e      	ble.n	8015e18 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8015dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015dfe:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8015e02:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8015e04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e08:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015e0c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8015e0e:	1ad3      	subs	r3, r2, r3
 8015e10:	b29b      	uxth	r3, r3
				delta_mm =
 8015e12:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8015e16:	e00d      	b.n	8015e34 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8015e18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e1c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015e20:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8015e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e26:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8015e2a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8015e2c:	1ad3      	subs	r3, r2, r3
 8015e2e:	b29b      	uxth	r3, r3
				delta_mm =
 8015e30:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8015e34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015e38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8015e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8015e44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015e50:	fb02 f303 	mul.w	r3, r2, r3
 8015e54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8015e58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015e5c:	015b      	lsls	r3, r3, #5
 8015e5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8015e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e66:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8015e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015e6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	dd2f      	ble.n	8015edc <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8015e7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e80:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8015e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015e88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8015e92:	429a      	cmp	r2, r3
 8015e94:	da22      	bge.n	8015edc <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8015e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8015e9c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d91b      	bls.n	8015edc <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8015ea4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ea8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8015eaa:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8015eac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d913      	bls.n	8015edc <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8015eb4:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8015eb8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015ebc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8015ec0:	6812      	ldr	r2, [r2, #0]
 8015ec2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	da09      	bge.n	8015edc <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8015ec8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ecc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8015ed0:	224c      	movs	r2, #76	; 0x4c
 8015ed2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f00f faac 	bl	8025434 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8015edc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8015ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015eea:	7c9b      	ldrb	r3, [r3, #18]
 8015eec:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	f4ff af6c 	bcc.w	8015dce <VL53L1_hist_process_data+0x2c2>
 8015ef6:	e000      	b.n	8015efa <VL53L1_hist_process_data+0x3ee>
			continue;
 8015ef8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8015efa:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8015efe:	3301      	adds	r3, #1
 8015f00:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8015f04:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8015f08:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	f67f aef0 	bls.w	8015cf2 <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8015f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015f16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8015f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8015f24:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f32 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8015f32:	b580      	push	{r7, lr}
 8015f34:	b086      	sub	sp, #24
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	60f8      	str	r0, [r7, #12]
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	607a      	str	r2, [r7, #4]
 8015f3e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015f40:	2300      	movs	r3, #0
 8015f42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8015f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d104      	bne.n	8015f56 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f7f9 fb5a 	bl	800f606 <VL53L1_disable_firmware>
 8015f52:	4603      	mov	r3, r0
 8015f54:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8015f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d104      	bne.n	8015f68 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8015f5e:	68f8      	ldr	r0, [r7, #12]
 8015f60:	f7f9 fb82 	bl	800f668 <VL53L1_enable_powerforce>
 8015f64:	4603      	mov	r3, r0
 8015f66:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8015f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d105      	bne.n	8015f7c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8015f70:	21fa      	movs	r1, #250	; 0xfa
 8015f72:	68f8      	ldr	r0, [r7, #12]
 8015f74:	f002 fdd0 	bl	8018b18 <VL53L1_WaitUs>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8015f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d107      	bne.n	8015f94 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8015f84:	2201      	movs	r2, #1
 8015f86:	f240 7181 	movw	r1, #1921	; 0x781
 8015f8a:	68f8      	ldr	r0, [r7, #12]
 8015f8c:	f002 fcd0 	bl	8018930 <VL53L1_WrByte>
 8015f90:	4603      	mov	r3, r0
 8015f92:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8015f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d107      	bne.n	8015fac <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8015f9c:	2205      	movs	r2, #5
 8015f9e:	f240 6183 	movw	r1, #1667	; 0x683
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f002 fcc4 	bl	8018930 <VL53L1_WrByte>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8015fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d105      	bne.n	8015fc0 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8015fb4:	6879      	ldr	r1, [r7, #4]
 8015fb6:	68f8      	ldr	r0, [r7, #12]
 8015fb8:	f002 fdae 	bl	8018b18 <VL53L1_WaitUs>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8015fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d107      	bne.n	8015fd8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8015fc8:	2201      	movs	r2, #1
 8015fca:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f002 fcae 	bl	8018930 <VL53L1_WrByte>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8015fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d108      	bne.n	8015ff2 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8015fe0:	897b      	ldrh	r3, [r7, #10]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	f240 7184 	movw	r1, #1924	; 0x784
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	f002 fccb 	bl	8018984 <VL53L1_WrWord>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8015ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3718      	adds	r7, #24
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}

08015ffe <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8015ffe:	b580      	push	{r7, lr}
 8016000:	b086      	sub	sp, #24
 8016002:	af00      	add	r7, sp, #0
 8016004:	60f8      	str	r0, [r7, #12]
 8016006:	607b      	str	r3, [r7, #4]
 8016008:	460b      	mov	r3, r1
 801600a:	72fb      	strb	r3, [r7, #11]
 801600c:	4613      	mov	r3, r2
 801600e:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8016010:	2300      	movs	r3, #0
 8016012:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8016014:	2300      	movs	r3, #0
 8016016:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8016018:	7afb      	ldrb	r3, [r7, #11]
 801601a:	75bb      	strb	r3, [r7, #22]
 801601c:	e041      	b.n	80160a2 <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 801601e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d108      	bne.n	8016038 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8016026:	7dbb      	ldrb	r3, [r7, #22]
 8016028:	461a      	mov	r2, r3
 801602a:	f240 7194 	movw	r1, #1940	; 0x794
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f002 fc7e 	bl	8018930 <VL53L1_WrByte>
 8016034:	4603      	mov	r3, r0
 8016036:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8016038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d107      	bne.n	8016050 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8016040:	2200      	movs	r2, #0
 8016042:	f240 7183 	movw	r1, #1923	; 0x783
 8016046:	68f8      	ldr	r0, [r7, #12]
 8016048:	f002 fc72 	bl	8018930 <VL53L1_WrByte>
 801604c:	4603      	mov	r3, r0
 801604e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8016050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d105      	bne.n	8016064 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8016058:	2105      	movs	r1, #5
 801605a:	68f8      	ldr	r0, [r7, #12]
 801605c:	f002 fd5c 	bl	8018b18 <VL53L1_WaitUs>
 8016060:	4603      	mov	r3, r0
 8016062:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8016064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d107      	bne.n	801607c <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 801606c:	2201      	movs	r2, #1
 801606e:	f240 7183 	movw	r1, #1923	; 0x783
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f002 fc5c 	bl	8018930 <VL53L1_WrByte>
 8016078:	4603      	mov	r3, r0
 801607a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 801607c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d108      	bne.n	8016096 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8016084:	2304      	movs	r3, #4
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f002 fc19 	bl	80188c4 <VL53L1_ReadMulti>
 8016092:	4603      	mov	r3, r0
 8016094:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	3304      	adds	r3, #4
 801609a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 801609c:	7dbb      	ldrb	r3, [r7, #22]
 801609e:	3301      	adds	r3, #1
 80160a0:	75bb      	strb	r3, [r7, #22]
 80160a2:	7dba      	ldrb	r2, [r7, #22]
 80160a4:	7af9      	ldrb	r1, [r7, #11]
 80160a6:	7abb      	ldrb	r3, [r7, #10]
 80160a8:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 80160aa:	429a      	cmp	r2, r3
 80160ac:	dbb7      	blt.n	801601e <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 80160ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3718      	adds	r7, #24
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}

080160ba <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 80160ba:	b580      	push	{r7, lr}
 80160bc:	b084      	sub	sp, #16
 80160be:	af00      	add	r7, sp, #0
 80160c0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80160c2:	2300      	movs	r3, #0
 80160c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80160c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d107      	bne.n	80160de <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80160ce:	2201      	movs	r2, #1
 80160d0:	f240 7183 	movw	r1, #1923	; 0x783
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f002 fc2b 	bl	8018930 <VL53L1_WrByte>
 80160da:	4603      	mov	r3, r0
 80160dc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80160de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d107      	bne.n	80160f6 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80160e6:	2200      	movs	r2, #0
 80160e8:	f240 7181 	movw	r1, #1921	; 0x781
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f002 fc1f 	bl	8018930 <VL53L1_WrByte>
 80160f2:	4603      	mov	r3, r0
 80160f4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 80160f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d104      	bne.n	8016108 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f7f9 fac4 	bl	800f68c <VL53L1_disable_powerforce>
 8016104:	4603      	mov	r3, r0
 8016106:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8016108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d104      	bne.n	801611a <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7f9 fa66 	bl	800f5e2 <VL53L1_enable_firmware>
 8016116:	4603      	mov	r3, r0
 8016118:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 801611a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 801611e:	4618      	mov	r0, r3
 8016120:	3710      	adds	r7, #16
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}

08016126 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8016126:	b480      	push	{r7}
 8016128:	b087      	sub	sp, #28
 801612a:	af00      	add	r7, sp, #0
 801612c:	4603      	mov	r3, r0
 801612e:	60b9      	str	r1, [r7, #8]
 8016130:	607a      	str	r2, [r7, #4]
 8016132:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8016134:	2300      	movs	r3, #0
 8016136:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8016138:	2300      	movs	r3, #0
 801613a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 801613c:	89fb      	ldrh	r3, [r7, #14]
 801613e:	2b03      	cmp	r3, #3
 8016140:	d802      	bhi.n	8016148 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8016142:	f06f 0308 	mvn.w	r3, #8
 8016146:	e018      	b.n	801617a <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8016148:	f44f 7380 	mov.w	r3, #256	; 0x100
 801614c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	3302      	adds	r3, #2
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	b29b      	uxth	r3, r3
 8016156:	8afa      	ldrh	r2, [r7, #22]
 8016158:	1ad3      	subs	r3, r2, r3
 801615a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 801615c:	8afb      	ldrh	r3, [r7, #22]
 801615e:	2bff      	cmp	r3, #255	; 0xff
 8016160:	d901      	bls.n	8016166 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8016166:	8afb      	ldrh	r3, [r7, #22]
 8016168:	b2da      	uxtb	r2, r3
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	78da      	ldrb	r2, [r3, #3]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	705a      	strb	r2, [r3, #1]

	return status;
 8016176:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801617a:	4618      	mov	r0, r3
 801617c:	371c      	adds	r7, #28
 801617e:	46bd      	mov	sp, r7
 8016180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016184:	4770      	bx	lr

08016186 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8016186:	b590      	push	{r4, r7, lr}
 8016188:	b087      	sub	sp, #28
 801618a:	af00      	add	r7, sp, #0
 801618c:	4603      	mov	r3, r0
 801618e:	60b9      	str	r1, [r7, #8]
 8016190:	607a      	str	r2, [r7, #4]
 8016192:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8016194:	2300      	movs	r3, #0
 8016196:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8016198:	2300      	movs	r3, #0
 801619a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 801619c:	2300      	movs	r3, #0
 801619e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80161a0:	89fb      	ldrh	r3, [r7, #14]
 80161a2:	2b37      	cmp	r3, #55	; 0x37
 80161a4:	d802      	bhi.n	80161ac <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80161a6:	f06f 0308 	mvn.w	r3, #8
 80161aa:	e03e      	b.n	801622a <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80161ac:	68b9      	ldr	r1, [r7, #8]
 80161ae:	2002      	movs	r0, #2
 80161b0:	f7f9 f8fd 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80161b4:	4603      	mov	r3, r0
 80161b6:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	3302      	adds	r3, #2
 80161c0:	4619      	mov	r1, r3
 80161c2:	2002      	movs	r0, #2
 80161c4:	f7f9 f8f3 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80161c8:	4603      	mov	r3, r0
 80161ca:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80161d4:	099b      	lsrs	r3, r3, #6
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2219      	movs	r2, #25
 80161e0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2205      	movs	r2, #5
 80161e6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2205      	movs	r2, #5
 80161ec:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	3304      	adds	r3, #4
 80161f2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80161f4:	2300      	movs	r3, #0
 80161f6:	74fb      	strb	r3, [r7, #19]
 80161f8:	e012      	b.n	8016220 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80161fa:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 80161fc:	6979      	ldr	r1, [r7, #20]
 80161fe:	2002      	movs	r0, #2
 8016200:	f7f9 f8d5 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016204:	4603      	mov	r3, r0
 8016206:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	1d23      	adds	r3, r4, #4
 801620c:	005b      	lsls	r3, r3, #1
 801620e:	4413      	add	r3, r2
 8016210:	460a      	mov	r2, r1
 8016212:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	3302      	adds	r3, #2
 8016218:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 801621a:	7cfb      	ldrb	r3, [r7, #19]
 801621c:	3301      	adds	r3, #1
 801621e:	74fb      	strb	r3, [r7, #19]
 8016220:	7cfb      	ldrb	r3, [r7, #19]
 8016222:	2b18      	cmp	r3, #24
 8016224:	d9e9      	bls.n	80161fa <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8016226:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801622a:	4618      	mov	r0, r3
 801622c:	371c      	adds	r7, #28
 801622e:	46bd      	mov	sp, r7
 8016230:	bd90      	pop	{r4, r7, pc}

08016232 <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8016232:	b580      	push	{r7, lr}
 8016234:	b086      	sub	sp, #24
 8016236:	af00      	add	r7, sp, #0
 8016238:	4603      	mov	r3, r0
 801623a:	60b9      	str	r1, [r7, #8]
 801623c:	607a      	str	r2, [r7, #4]
 801623e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8016240:	2300      	movs	r3, #0
 8016242:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8016244:	89fb      	ldrh	r3, [r7, #14]
 8016246:	2b07      	cmp	r3, #7
 8016248:	d802      	bhi.n	8016250 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801624a:	f06f 0308 	mvn.w	r3, #8
 801624e:	e027      	b.n	80162a0 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8016250:	68b9      	ldr	r1, [r7, #8]
 8016252:	2002      	movs	r0, #2
 8016254:	f7f9 f8ab 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	3302      	adds	r3, #2
 8016264:	4619      	mov	r1, r3
 8016266:	2002      	movs	r0, #2
 8016268:	f7f9 f8a1 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801626c:	4603      	mov	r3, r0
 801626e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	3304      	adds	r3, #4
 8016278:	4619      	mov	r1, r3
 801627a:	2002      	movs	r0, #2
 801627c:	f7f9 f897 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016280:	4603      	mov	r3, r0
 8016282:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	3306      	adds	r3, #6
 801628c:	4619      	mov	r1, r3
 801628e:	2002      	movs	r0, #2
 8016290:	f7f9 f88d 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016294:	4603      	mov	r3, r0
 8016296:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	80da      	strh	r2, [r3, #6]

	return status;
 801629c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b086      	sub	sp, #24
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	4603      	mov	r3, r0
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80162b6:	2300      	movs	r3, #0
 80162b8:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 80162ba:	89fb      	ldrh	r3, [r7, #14]
 80162bc:	2b0f      	cmp	r3, #15
 80162be:	d802      	bhi.n	80162c6 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80162c0:	f06f 0308 	mvn.w	r3, #8
 80162c4:	e04d      	b.n	8016362 <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80162c6:	68b9      	ldr	r1, [r7, #8]
 80162c8:	2002      	movs	r0, #2
 80162ca:	f7f9 f870 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80162ce:	4603      	mov	r3, r0
 80162d0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	789a      	ldrb	r2, [r3, #2]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	78da      	ldrb	r2, [r3, #3]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	3304      	adds	r3, #4
 80162ea:	4619      	mov	r1, r3
 80162ec:	2002      	movs	r0, #2
 80162ee:	f7f9 f85e 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80162f2:	4603      	mov	r3, r0
 80162f4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	3306      	adds	r3, #6
 80162fe:	4619      	mov	r1, r3
 8016300:	2002      	movs	r0, #2
 8016302:	f7f9 f854 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016306:	4603      	mov	r3, r0
 8016308:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	3308      	adds	r3, #8
 8016312:	4619      	mov	r1, r3
 8016314:	2002      	movs	r0, #2
 8016316:	f7f9 f84a 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801631a:	4603      	mov	r3, r0
 801631c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	330a      	adds	r3, #10
 8016326:	4619      	mov	r1, r3
 8016328:	2002      	movs	r0, #2
 801632a:	f7f9 f840 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801632e:	4603      	mov	r3, r0
 8016330:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	330c      	adds	r3, #12
 801633a:	4619      	mov	r1, r3
 801633c:	2002      	movs	r0, #2
 801633e:	f7f9 f836 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016342:	4603      	mov	r3, r0
 8016344:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	330e      	adds	r3, #14
 801634e:	4619      	mov	r1, r3
 8016350:	2002      	movs	r0, #2
 8016352:	f7f9 f82c 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016356:	4603      	mov	r3, r0
 8016358:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	81da      	strh	r2, [r3, #14]

	return status;
 801635e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 801636a:	b580      	push	{r7, lr}
 801636c:	b086      	sub	sp, #24
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	607b      	str	r3, [r7, #4]
 8016374:	460b      	mov	r3, r1
 8016376:	72fb      	strb	r3, [r7, #11]
 8016378:	4613      	mov	r3, r2
 801637a:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801637c:	2300      	movs	r3, #0
 801637e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8016380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d106      	bne.n	8016396 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8016388:	2232      	movs	r2, #50	; 0x32
 801638a:	2104      	movs	r1, #4
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f7ff fdd0 	bl	8015f32 <VL53L1_nvm_enable>
 8016392:	4603      	mov	r3, r0
 8016394:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8016396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d107      	bne.n	80163ae <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 801639e:	7aba      	ldrb	r2, [r7, #10]
 80163a0:	7af9      	ldrb	r1, [r7, #11]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	68f8      	ldr	r0, [r7, #12]
 80163a6:	f7ff fe2a 	bl	8015ffe <VL53L1_nvm_read>
 80163aa:	4603      	mov	r3, r0
 80163ac:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 80163ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d104      	bne.n	80163c0 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f7ff fe7f 	bl	80160ba <VL53L1_nvm_disable>
 80163bc:	4603      	mov	r3, r0
 80163be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80163c0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3718      	adds	r7, #24
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80163d6:	2300      	movs	r3, #0
 80163d8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80163da:	f107 0308 	add.w	r3, r7, #8
 80163de:	2201      	movs	r2, #1
 80163e0:	212e      	movs	r1, #46	; 0x2e
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7ff ffc1 	bl	801636a <VL53L1_read_nvm_raw_data>
 80163e8:	4603      	mov	r3, r0
 80163ea:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80163ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d108      	bne.n	8016406 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80163f4:	f107 0308 	add.w	r3, r7, #8
 80163f8:	683a      	ldr	r2, [r7, #0]
 80163fa:	4619      	mov	r1, r3
 80163fc:	2004      	movs	r0, #4
 80163fe:	f7ff fe92 	bl	8016126 <VL53L1_nvm_decode_optical_centre>
 8016402:	4603      	mov	r3, r0
 8016404:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8016406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b092      	sub	sp, #72	; 0x48
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
 801641a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801641c:	2300      	movs	r3, #0
 801641e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8016422:	f107 030c 	add.w	r3, r7, #12
 8016426:	220e      	movs	r2, #14
 8016428:	2157      	movs	r1, #87	; 0x57
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f7ff ff9d 	bl	801636a <VL53L1_read_nvm_raw_data>
 8016430:	4603      	mov	r3, r0
 8016432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8016436:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801643a:	2b00      	cmp	r3, #0
 801643c:	d109      	bne.n	8016452 <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 801643e:	f107 030c 	add.w	r3, r7, #12
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	4619      	mov	r1, r3
 8016446:	2038      	movs	r0, #56	; 0x38
 8016448:	f7ff fe9d 	bl	8016186 <VL53L1_nvm_decode_cal_peak_rate_map>
 801644c:	4603      	mov	r3, r0
 801644e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8016452:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8016456:	4618      	mov	r0, r3
 8016458:	3748      	adds	r7, #72	; 0x48
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b086      	sub	sp, #24
 8016462:	af00      	add	r7, sp, #0
 8016464:	6078      	str	r0, [r7, #4]
 8016466:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016468:	2300      	movs	r3, #0
 801646a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801646c:	f107 030c 	add.w	r3, r7, #12
 8016470:	2202      	movs	r2, #2
 8016472:	2165      	movs	r1, #101	; 0x65
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7ff ff78 	bl	801636a <VL53L1_read_nvm_raw_data>
 801647a:	4603      	mov	r3, r0
 801647c:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801647e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d108      	bne.n	8016498 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8016486:	f107 030c 	add.w	r3, r7, #12
 801648a:	683a      	ldr	r2, [r7, #0]
 801648c:	4619      	mov	r1, r3
 801648e:	2008      	movs	r0, #8
 8016490:	f7ff fecf 	bl	8016232 <VL53L1_nvm_decode_additional_offset_cal_data>
 8016494:	4603      	mov	r3, r0
 8016496:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8016498:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801649c:	4618      	mov	r0, r3
 801649e:	3718      	adds	r7, #24
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b08a      	sub	sp, #40	; 0x28
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	460b      	mov	r3, r1
 80164ae:	607a      	str	r2, [r7, #4]
 80164b0:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80164b2:	2300      	movs	r3, #0
 80164b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80164b8:	897b      	ldrh	r3, [r7, #10]
 80164ba:	089b      	lsrs	r3, r3, #2
 80164bc:	b29b      	uxth	r3, r3
 80164be:	b2d9      	uxtb	r1, r3
 80164c0:	f107 0314 	add.w	r3, r7, #20
 80164c4:	2204      	movs	r2, #4
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	f7ff ff4f 	bl	801636a <VL53L1_read_nvm_raw_data>
 80164cc:	4603      	mov	r3, r0
 80164ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80164d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d109      	bne.n	80164ee <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80164da:	f107 0314 	add.w	r3, r7, #20
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	4619      	mov	r1, r3
 80164e2:	2010      	movs	r0, #16
 80164e4:	f7ff fee0 	bl	80162a8 <VL53L1_nvm_decode_fmt_range_results_data>
 80164e8:	4603      	mov	r3, r0
 80164ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80164ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3728      	adds	r7, #40	; 0x28
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}

080164fa <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80164fa:	b580      	push	{r7, lr}
 80164fc:	b086      	sub	sp, #24
 80164fe:	af00      	add	r7, sp, #0
 8016500:	60f8      	str	r0, [r7, #12]
 8016502:	460b      	mov	r3, r1
 8016504:	607a      	str	r2, [r7, #4]
 8016506:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016508:	2300      	movs	r3, #0
 801650a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801650c:	897b      	ldrh	r3, [r7, #10]
 801650e:	2b0a      	cmp	r3, #10
 8016510:	d802      	bhi.n	8016518 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016512:	f06f 0309 	mvn.w	r3, #9
 8016516:	e047      	b.n	80165a8 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016520:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801652e:	f002 020f 	and.w	r2, r2, #15
 8016532:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8016534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801653e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016542:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801654e:	f002 0203 	and.w	r2, r2, #3
 8016552:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8016554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801655e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016562:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8016564:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	88d8      	ldrh	r0, [r3, #6]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	3305      	adds	r3, #5
 801656e:	461a      	mov	r2, r3
 8016570:	2102      	movs	r1, #2
 8016572:	f7f8 fef1 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 801657a:	68fa      	ldr	r2, [r7, #12]
 801657c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801657e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8016588:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8016592:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016596:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8016598:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80165a2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80165a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3718      	adds	r7, #24
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b086      	sub	sp, #24
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	4603      	mov	r3, r0
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
 80165bc:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80165be:	2300      	movs	r3, #0
 80165c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80165c2:	89fb      	ldrh	r3, [r7, #14]
 80165c4:	2b0a      	cmp	r3, #10
 80165c6:	d802      	bhi.n	80165ce <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80165c8:	f06f 0309 	mvn.w	r3, #9
 80165cc:	e046      	b.n	801665c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165d6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	3301      	adds	r3, #1
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	f003 030f 	and.w	r3, r3, #15
 80165e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	3302      	adds	r3, #2
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3303      	adds	r3, #3
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	f003 0303 	and.w	r3, r3, #3
 8016606:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	3304      	adds	r3, #4
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016616:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	3305      	adds	r3, #5
 8016620:	4619      	mov	r1, r3
 8016622:	2002      	movs	r0, #2
 8016624:	f7f8 fec3 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016628:	4603      	mov	r3, r0
 801662a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	79da      	ldrb	r2, [r3, #7]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	7a1a      	ldrb	r2, [r3, #8]
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	3309      	adds	r3, #9
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801664a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	7a9a      	ldrb	r2, [r3, #10]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8016658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801665c:	4618      	mov	r0, r3
 801665e:	3718      	adds	r7, #24
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801666e:	2300      	movs	r3, #0
 8016670:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8016672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d108      	bne.n	801668c <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801667a:	f107 020c 	add.w	r2, r7, #12
 801667e:	230b      	movs	r3, #11
 8016680:	2101      	movs	r1, #1
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f002 f91e 	bl	80188c4 <VL53L1_ReadMulti>
 8016688:	4603      	mov	r3, r0
 801668a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 801668c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d108      	bne.n	80166a6 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8016694:	f107 030c 	add.w	r3, r7, #12
 8016698:	683a      	ldr	r2, [r7, #0]
 801669a:	4619      	mov	r1, r3
 801669c:	200b      	movs	r0, #11
 801669e:	f7ff ff87 	bl	80165b0 <VL53L1_i2c_decode_static_nvm_managed>
 80166a2:	4603      	mov	r3, r0
 80166a4:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80166a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3718      	adds	r7, #24
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b086      	sub	sp, #24
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	60f8      	str	r0, [r7, #12]
 80166ba:	460b      	mov	r3, r1
 80166bc:	607a      	str	r2, [r7, #4]
 80166be:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80166c0:	2300      	movs	r3, #0
 80166c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80166c4:	897b      	ldrh	r3, [r7, #10]
 80166c6:	2b16      	cmp	r3, #22
 80166c8:	d802      	bhi.n	80166d0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80166ca:	f06f 0309 	mvn.w	r3, #9
 80166ce:	e076      	b.n	80167be <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80166e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80166e6:	68fa      	ldr	r2, [r7, #12]
 80166e8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80166ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80166f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80166fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8016708:	f002 020f 	and.w	r2, r2, #15
 801670c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801670e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8016718:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8016722:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016726:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8016728:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8016732:	f002 0203 	and.w	r2, r2, #3
 8016736:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8016738:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	8958      	ldrh	r0, [r3, #10]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	3309      	adds	r3, #9
 8016742:	461a      	mov	r2, r3
 8016744:	2102      	movs	r1, #2
 8016746:	f7f8 fe07 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	330b      	adds	r3, #11
 8016754:	461a      	mov	r2, r3
 8016756:	2102      	movs	r1, #2
 8016758:	f7f8 fe49 	bl	800f3ee <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	330d      	adds	r3, #13
 8016766:	461a      	mov	r2, r3
 8016768:	2102      	movs	r1, #2
 801676a:	f7f8 fe40 	bl	800f3ee <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	8a18      	ldrh	r0, [r3, #16]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	330f      	adds	r3, #15
 8016776:	461a      	mov	r2, r3
 8016778:	2102      	movs	r1, #2
 801677a:	f7f8 fded 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8016784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016788:	b218      	sxth	r0, r3
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	3311      	adds	r3, #17
 801678e:	461a      	mov	r2, r3
 8016790:	2102      	movs	r1, #2
 8016792:	f7f8 fe2c 	bl	800f3ee <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	3313      	adds	r3, #19
 80167a0:	461a      	mov	r2, r3
 80167a2:	2102      	movs	r1, #2
 80167a4:	f7f8 fe23 	bl	800f3ee <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	3315      	adds	r3, #21
 80167b2:	461a      	mov	r2, r3
 80167b4:	2102      	movs	r1, #2
 80167b6:	f7f8 fe1a 	bl	800f3ee <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80167ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3718      	adds	r7, #24
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b086      	sub	sp, #24
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	4603      	mov	r3, r0
 80167ce:	60b9      	str	r1, [r7, #8]
 80167d0:	607a      	str	r2, [r7, #4]
 80167d2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80167d4:	2300      	movs	r3, #0
 80167d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80167d8:	89fb      	ldrh	r3, [r7, #14]
 80167da:	2b16      	cmp	r3, #22
 80167dc:	d802      	bhi.n	80167e4 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80167de:	f06f 0309 	mvn.w	r3, #9
 80167e2:	e079      	b.n	80168d8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	785a      	ldrb	r2, [r3, #1]
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	789a      	ldrb	r2, [r3, #2]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	78da      	ldrb	r2, [r3, #3]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	791a      	ldrb	r2, [r3, #4]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	3305      	adds	r3, #5
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	f003 030f 	and.w	r3, r3, #15
 8016816:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	799a      	ldrb	r2, [r3, #6]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	3307      	adds	r3, #7
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801682e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	3308      	adds	r3, #8
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	f003 0303 	and.w	r3, r3, #3
 801683e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	3309      	adds	r3, #9
 8016848:	4619      	mov	r1, r3
 801684a:	2002      	movs	r0, #2
 801684c:	f7f8 fdaf 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016850:	4603      	mov	r3, r0
 8016852:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	330b      	adds	r3, #11
 801685c:	4619      	mov	r1, r3
 801685e:	2002      	movs	r0, #2
 8016860:	f7f8 fdf1 	bl	800f446 <VL53L1_i2c_decode_int16_t>
 8016864:	4603      	mov	r3, r0
 8016866:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	330d      	adds	r3, #13
 8016870:	4619      	mov	r1, r3
 8016872:	2002      	movs	r0, #2
 8016874:	f7f8 fde7 	bl	800f446 <VL53L1_i2c_decode_int16_t>
 8016878:	4603      	mov	r3, r0
 801687a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	330f      	adds	r3, #15
 8016884:	4619      	mov	r1, r3
 8016886:	2002      	movs	r0, #2
 8016888:	f7f8 fd91 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801688c:	4603      	mov	r3, r0
 801688e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	3311      	adds	r3, #17
 8016898:	4619      	mov	r1, r3
 801689a:	2002      	movs	r0, #2
 801689c:	f7f8 fdd3 	bl	800f446 <VL53L1_i2c_decode_int16_t>
 80168a0:	4603      	mov	r3, r0
 80168a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168a6:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	3313      	adds	r3, #19
 80168b0:	4619      	mov	r1, r3
 80168b2:	2002      	movs	r0, #2
 80168b4:	f7f8 fdc7 	bl	800f446 <VL53L1_i2c_decode_int16_t>
 80168b8:	4603      	mov	r3, r0
 80168ba:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	3315      	adds	r3, #21
 80168c4:	4619      	mov	r1, r3
 80168c6:	2002      	movs	r0, #2
 80168c8:	f7f8 fdbd 	bl	800f446 <VL53L1_i2c_decode_int16_t>
 80168cc:	4603      	mov	r3, r0
 80168ce:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80168d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3718      	adds	r7, #24
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}

080168e0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b088      	sub	sp, #32
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
 80168e8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80168ea:	2300      	movs	r3, #0
 80168ec:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80168ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d108      	bne.n	8016908 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80168f6:	f107 0208 	add.w	r2, r7, #8
 80168fa:	2317      	movs	r3, #23
 80168fc:	210d      	movs	r1, #13
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f001 ffe0 	bl	80188c4 <VL53L1_ReadMulti>
 8016904:	4603      	mov	r3, r0
 8016906:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8016908:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d108      	bne.n	8016922 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8016910:	f107 0308 	add.w	r3, r7, #8
 8016914:	683a      	ldr	r2, [r7, #0]
 8016916:	4619      	mov	r1, r3
 8016918:	2017      	movs	r0, #23
 801691a:	f7ff ff54 	bl	80167c6 <VL53L1_i2c_decode_customer_nvm_managed>
 801691e:	4603      	mov	r3, r0
 8016920:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8016922:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016926:	4618      	mov	r0, r3
 8016928:	3720      	adds	r7, #32
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b086      	sub	sp, #24
 8016932:	af00      	add	r7, sp, #0
 8016934:	60f8      	str	r0, [r7, #12]
 8016936:	460b      	mov	r3, r1
 8016938:	607a      	str	r2, [r7, #4]
 801693a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801693c:	2300      	movs	r3, #0
 801693e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8016940:	897b      	ldrh	r3, [r7, #10]
 8016942:	2b1f      	cmp	r3, #31
 8016944:	d802      	bhi.n	801694c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016946:	f06f 0309 	mvn.w	r3, #9
 801694a:	e0cf      	b.n	8016aec <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	881b      	ldrh	r3, [r3, #0]
 8016950:	687a      	ldr	r2, [r7, #4]
 8016952:	2102      	movs	r1, #2
 8016954:	4618      	mov	r0, r3
 8016956:	f7f8 fcff 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8016962:	f002 0201 	and.w	r2, r2, #1
 8016966:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016968:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8016972:	f002 020f 	and.w	r2, r2, #15
 8016976:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8016978:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8016982:	f002 020f 	and.w	r2, r2, #15
 8016986:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8016988:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8016992:	f002 021f 	and.w	r2, r2, #31
 8016996:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8016998:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80169a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80169a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80169a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80169b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80169b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80169b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80169c2:	f002 0201 	and.w	r2, r2, #1
 80169c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80169c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80169ce:	68fa      	ldr	r2, [r7, #12]
 80169d0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80169d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80169dc:	f002 0201 	and.w	r2, r2, #1
 80169e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80169e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80169ec:	f002 0203 	and.w	r2, r2, #3
 80169f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80169f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80169fc:	f002 021f 	and.w	r2, r2, #31
 8016a00:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8016a02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8016a0c:	f002 0203 	and.w	r2, r2, #3
 8016a10:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8016a12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8016a1c:	f002 0203 	and.w	r2, r2, #3
 8016a20:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8016a22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8016a2c:	f002 0207 	and.w	r2, r2, #7
 8016a30:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8016a32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8016a3c:	f002 021f 	and.w	r2, r2, #31
 8016a40:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8016a42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8016a4c:	f002 0201 	and.w	r2, r2, #1
 8016a50:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8016a52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8016a58:	68fa      	ldr	r2, [r7, #12]
 8016a5a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8016a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8016a66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8016a6c:	68fa      	ldr	r2, [r7, #12]
 8016a6e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8016a70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8016a76:	68fa      	ldr	r2, [r7, #12]
 8016a78:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8016a7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8016a80:	68fa      	ldr	r2, [r7, #12]
 8016a82:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8016a84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8016a8a:	68fa      	ldr	r2, [r7, #12]
 8016a8c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8016a8e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	8b18      	ldrh	r0, [r3, #24]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	3318      	adds	r3, #24
 8016a98:	461a      	mov	r2, r3
 8016a9a:	2102      	movs	r1, #2
 8016a9c:	f7f8 fc5c 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8016aa4:	68fa      	ldr	r2, [r7, #12]
 8016aa6:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8016aa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8016ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8016abc:	f002 020f 	and.w	r2, r2, #15
 8016ac0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8016ac2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8016ac8:	68fa      	ldr	r2, [r7, #12]
 8016aca:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8016acc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8016ad6:	f002 020f 	and.w	r2, r2, #15
 8016ada:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8016adc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8016ae2:	68fa      	ldr	r2, [r7, #12]
 8016ae4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8016ae6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3718      	adds	r7, #24
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	460b      	mov	r3, r1
 8016afe:	607a      	str	r2, [r7, #4]
 8016b00:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016b02:	2300      	movs	r3, #0
 8016b04:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8016b06:	897b      	ldrh	r3, [r7, #10]
 8016b08:	2b15      	cmp	r3, #21
 8016b0a:	d802      	bhi.n	8016b12 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016b0c:	f06f 0309 	mvn.w	r3, #9
 8016b10:	e070      	b.n	8016bf4 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8016b1e:	68fa      	ldr	r2, [r7, #12]
 8016b20:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8016b22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8016b2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8016b36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016b3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8016b3c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8016b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b46:	b298      	uxth	r0, r3
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	3304      	adds	r3, #4
 8016b4c:	461a      	mov	r2, r3
 8016b4e:	2102      	movs	r1, #2
 8016b50:	f7f8 fc02 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8016b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016b60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8016b62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8016b6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8016b72:	68fa      	ldr	r2, [r7, #12]
 8016b74:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8016b76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8016b80:	f002 0201 	and.w	r2, r2, #1
 8016b84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8016b86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8016b90:	f002 0207 	and.w	r2, r2, #7
 8016b94:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8016b96:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	8998      	ldrh	r0, [r3, #12]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	330c      	adds	r3, #12
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	2102      	movs	r1, #2
 8016ba4:	f7f8 fbd8 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	89d8      	ldrh	r0, [r3, #14]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	330e      	adds	r3, #14
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	2102      	movs	r1, #2
 8016bb4:	f7f8 fbd0 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	8a18      	ldrh	r0, [r3, #16]
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	3310      	adds	r3, #16
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	2102      	movs	r1, #2
 8016bc4:	f7f8 fbc8 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8016bd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8016bd6:	68fa      	ldr	r2, [r7, #12]
 8016bd8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8016bda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8016be0:	68fa      	ldr	r2, [r7, #12]
 8016be2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8016be4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8016bee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3718      	adds	r7, #24
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	460b      	mov	r3, r1
 8016c06:	607a      	str	r2, [r7, #4]
 8016c08:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8016c0e:	897b      	ldrh	r3, [r7, #10]
 8016c10:	2b16      	cmp	r3, #22
 8016c12:	d802      	bhi.n	8016c1a <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016c14:	f06f 0309 	mvn.w	r3, #9
 8016c18:	e06e      	b.n	8016cf8 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	f003 030f 	and.w	r3, r3, #15
 8016c22:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8016c30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8016c3a:	f002 020f 	and.w	r2, r2, #15
 8016c3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016c40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8016c4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8016c54:	f002 020f 	and.w	r2, r2, #15
 8016c58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8016c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8016c60:	68fa      	ldr	r2, [r7, #12]
 8016c62:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8016c64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8016c6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016c72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8016c74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8016c7e:	f002 020f 	and.w	r2, r2, #15
 8016c82:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8016c84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8016c8a:	68fa      	ldr	r2, [r7, #12]
 8016c8c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8016c8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8016c98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016c9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8016c9e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	8958      	ldrh	r0, [r3, #10]
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	330a      	adds	r3, #10
 8016ca8:	461a      	mov	r2, r3
 8016caa:	2102      	movs	r1, #2
 8016cac:	f7f8 fb54 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	8998      	ldrh	r0, [r3, #12]
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	330c      	adds	r3, #12
 8016cb8:	461a      	mov	r2, r3
 8016cba:	2102      	movs	r1, #2
 8016cbc:	f7f8 fb4c 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8016cc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8016cce:	68fa      	ldr	r2, [r7, #12]
 8016cd0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8016cd2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	6918      	ldr	r0, [r3, #16]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3312      	adds	r3, #18
 8016cdc:	461a      	mov	r2, r3
 8016cde:	2104      	movs	r1, #4
 8016ce0:	f7f8 fbda 	bl	800f498 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8016cec:	f002 0201 	and.w	r2, r2, #1
 8016cf0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8016cf2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3718      	adds	r7, #24
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b086      	sub	sp, #24
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	460b      	mov	r3, r1
 8016d0a:	607a      	str	r2, [r7, #4]
 8016d0c:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8016d12:	897b      	ldrh	r3, [r7, #10]
 8016d14:	2b11      	cmp	r3, #17
 8016d16:	d802      	bhi.n	8016d1e <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016d18:	f06f 0309 	mvn.w	r3, #9
 8016d1c:	e071      	b.n	8016e02 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	f003 0303 	and.w	r3, r3, #3
 8016d26:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	8858      	ldrh	r0, [r3, #2]
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	3301      	adds	r3, #1
 8016d34:	461a      	mov	r2, r3
 8016d36:	2102      	movs	r1, #2
 8016d38:	f7f8 fb0e 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	8898      	ldrh	r0, [r3, #4]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	3303      	adds	r3, #3
 8016d44:	461a      	mov	r2, r3
 8016d46:	2102      	movs	r1, #2
 8016d48:	f7f8 fb06 	bl	800f358 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8016d54:	f002 0201 	and.w	r2, r2, #1
 8016d58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8016d5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8016d64:	f002 0207 	and.w	r2, r2, #7
 8016d68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8016d6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8016d70:	68fa      	ldr	r2, [r7, #12]
 8016d72:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8016d74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8016d7a:	68fa      	ldr	r2, [r7, #12]
 8016d7c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8016d7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8016d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016d8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8016d8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8016d98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016d9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8016d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8016da8:	f002 0203 	and.w	r2, r2, #3
 8016dac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8016dae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8016db8:	f002 0203 	and.w	r2, r2, #3
 8016dbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8016dbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8016dc8:	f002 020f 	and.w	r2, r2, #15
 8016dcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8016dce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8016dd4:	68fa      	ldr	r2, [r7, #12]
 8016dd6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8016dd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8016de2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8016dec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8016df6:	f002 0203 	and.w	r2, r2, #3
 8016dfa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8016dfc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3718      	adds	r7, #24
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016e0a:	b480      	push	{r7}
 8016e0c:	b087      	sub	sp, #28
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	60f8      	str	r0, [r7, #12]
 8016e12:	460b      	mov	r3, r1
 8016e14:	607a      	str	r2, [r7, #4]
 8016e16:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8016e1c:	897b      	ldrh	r3, [r7, #10]
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	d802      	bhi.n	8016e28 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016e22:	f06f 0309 	mvn.w	r3, #9
 8016e26:	e025      	b.n	8016e74 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	f003 0301 	and.w	r3, r3, #1
 8016e30:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8016e3e:	f002 0201 	and.w	r2, r2, #1
 8016e42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8016e44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8016e4e:	f002 0201 	and.w	r2, r2, #1
 8016e52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016e54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8016e5e:	f002 0203 	and.w	r2, r2, #3
 8016e62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8016e64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8016e6a:	68fa      	ldr	r2, [r7, #12]
 8016e6c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8016e6e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	371c      	adds	r7, #28
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8016e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d108      	bne.n	8016ea8 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8016e96:	f107 0308 	add.w	r3, r7, #8
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	2105      	movs	r1, #5
 8016e9e:	6838      	ldr	r0, [r7, #0]
 8016ea0:	f7ff ffb3 	bl	8016e0a <VL53L1_i2c_encode_system_control>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8016ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d108      	bne.n	8016ec2 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8016eb0:	f107 0208 	add.w	r2, r7, #8
 8016eb4:	2305      	movs	r3, #5
 8016eb6:	2183      	movs	r1, #131	; 0x83
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f001 fccd 	bl	8018858 <VL53L1_WriteMulti>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8016ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}

08016ece <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8016ece:	b580      	push	{r7, lr}
 8016ed0:	b086      	sub	sp, #24
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	60b9      	str	r1, [r7, #8]
 8016ed8:	607a      	str	r2, [r7, #4]
 8016eda:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016edc:	2300      	movs	r3, #0
 8016ede:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8016ee0:	89fb      	ldrh	r3, [r7, #14]
 8016ee2:	2b2b      	cmp	r3, #43	; 0x2b
 8016ee4:	d802      	bhi.n	8016eec <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016ee6:	f06f 0309 	mvn.w	r3, #9
 8016eea:	e0e2      	b.n	80170b2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ef4:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	785a      	ldrb	r2, [r3, #1]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	3302      	adds	r3, #2
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	f003 030f 	and.w	r3, r3, #15
 8016f0c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	78da      	ldrb	r2, [r3, #3]
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	3304      	adds	r3, #4
 8016f1e:	4619      	mov	r1, r3
 8016f20:	2002      	movs	r0, #2
 8016f22:	f7f8 fa44 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f26:	4603      	mov	r3, r0
 8016f28:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	3306      	adds	r3, #6
 8016f32:	4619      	mov	r1, r3
 8016f34:	2002      	movs	r0, #2
 8016f36:	f7f8 fa3a 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	3308      	adds	r3, #8
 8016f46:	4619      	mov	r1, r3
 8016f48:	2002      	movs	r0, #2
 8016f4a:	f7f8 fa30 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	330a      	adds	r3, #10
 8016f5a:	4619      	mov	r1, r3
 8016f5c:	2002      	movs	r0, #2
 8016f5e:	f7f8 fa26 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f62:	4603      	mov	r3, r0
 8016f64:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	330c      	adds	r3, #12
 8016f6e:	4619      	mov	r1, r3
 8016f70:	2002      	movs	r0, #2
 8016f72:	f7f8 fa1c 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f76:	4603      	mov	r3, r0
 8016f78:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	330e      	adds	r3, #14
 8016f82:	4619      	mov	r1, r3
 8016f84:	2002      	movs	r0, #2
 8016f86:	f7f8 fa12 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8016f92:	68bb      	ldr	r3, [r7, #8]
 8016f94:	3310      	adds	r3, #16
 8016f96:	4619      	mov	r1, r3
 8016f98:	2002      	movs	r0, #2
 8016f9a:	f7f8 fa08 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	3312      	adds	r3, #18
 8016faa:	4619      	mov	r1, r3
 8016fac:	2002      	movs	r0, #2
 8016fae:	f7f8 f9fe 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	3314      	adds	r3, #20
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	2002      	movs	r0, #2
 8016fc2:	f7f8 f9f4 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	3316      	adds	r3, #22
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	2002      	movs	r0, #2
 8016fd6:	f7f8 f9ea 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	3318      	adds	r3, #24
 8016fe6:	4619      	mov	r1, r3
 8016fe8:	2002      	movs	r0, #2
 8016fea:	f7f8 f9e0 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	331a      	adds	r3, #26
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	2002      	movs	r0, #2
 8016ffe:	f7f8 f9d6 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8017002:	4603      	mov	r3, r0
 8017004:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	331c      	adds	r3, #28
 801700e:	4619      	mov	r1, r3
 8017010:	2002      	movs	r0, #2
 8017012:	f7f8 f9cc 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8017016:	4603      	mov	r3, r0
 8017018:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	331e      	adds	r3, #30
 8017022:	4619      	mov	r1, r3
 8017024:	2002      	movs	r0, #2
 8017026:	f7f8 f9c2 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801702a:	4603      	mov	r3, r0
 801702c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	3320      	adds	r3, #32
 8017036:	4619      	mov	r1, r3
 8017038:	2002      	movs	r0, #2
 801703a:	f7f8 f9b8 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801703e:	4603      	mov	r3, r0
 8017040:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	3322      	adds	r3, #34	; 0x22
 801704a:	4619      	mov	r1, r3
 801704c:	2002      	movs	r0, #2
 801704e:	f7f8 f9ae 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8017052:	4603      	mov	r3, r0
 8017054:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	3324      	adds	r3, #36	; 0x24
 801705e:	4619      	mov	r1, r3
 8017060:	2002      	movs	r0, #2
 8017062:	f7f8 f9a4 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8017066:	4603      	mov	r3, r0
 8017068:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	3326      	adds	r3, #38	; 0x26
 8017072:	4619      	mov	r1, r3
 8017074:	2002      	movs	r0, #2
 8017076:	f7f8 f99a 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801707a:	4603      	mov	r3, r0
 801707c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	3328      	adds	r3, #40	; 0x28
 8017086:	4619      	mov	r1, r3
 8017088:	2002      	movs	r0, #2
 801708a:	f7f8 f990 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801708e:	4603      	mov	r3, r0
 8017090:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80170ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	3718      	adds	r7, #24
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}

080170ba <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80170ba:	b580      	push	{r7, lr}
 80170bc:	b086      	sub	sp, #24
 80170be:	af00      	add	r7, sp, #0
 80170c0:	4603      	mov	r3, r0
 80170c2:	60b9      	str	r1, [r7, #8]
 80170c4:	607a      	str	r2, [r7, #4]
 80170c6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80170c8:	2300      	movs	r3, #0
 80170ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80170cc:	89fb      	ldrh	r3, [r7, #14]
 80170ce:	2b20      	cmp	r3, #32
 80170d0:	d802      	bhi.n	80170d8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80170d2:	f06f 0309 	mvn.w	r3, #9
 80170d6:	e04d      	b.n	8017174 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80170d8:	68b9      	ldr	r1, [r7, #8]
 80170da:	2004      	movs	r0, #4
 80170dc:	f7f8 fa06 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 80170e0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	3304      	adds	r3, #4
 80170ea:	4619      	mov	r1, r3
 80170ec:	2004      	movs	r0, #4
 80170ee:	f7f8 f9fd 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 80170f2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	3308      	adds	r3, #8
 80170fc:	4619      	mov	r1, r3
 80170fe:	2004      	movs	r0, #4
 8017100:	f7f8 fa11 	bl	800f526 <VL53L1_i2c_decode_int32_t>
 8017104:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	330c      	adds	r3, #12
 801710e:	4619      	mov	r1, r3
 8017110:	2004      	movs	r0, #4
 8017112:	f7f8 f9eb 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 8017116:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	3310      	adds	r3, #16
 8017120:	4619      	mov	r1, r3
 8017122:	2004      	movs	r0, #4
 8017124:	f7f8 f9e2 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 8017128:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	3314      	adds	r3, #20
 8017132:	4619      	mov	r1, r3
 8017134:	2004      	movs	r0, #4
 8017136:	f7f8 f9d9 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 801713a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	3318      	adds	r3, #24
 8017144:	4619      	mov	r1, r3
 8017146:	2004      	movs	r0, #4
 8017148:	f7f8 f9ed 	bl	800f526 <VL53L1_i2c_decode_int32_t>
 801714c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	331c      	adds	r3, #28
 8017156:	4619      	mov	r1, r3
 8017158:	2004      	movs	r0, #4
 801715a:	f7f8 f9c7 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 801715e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	f893 2020 	ldrb.w	r2, [r3, #32]
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8017170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017174:	4618      	mov	r0, r3
 8017176:	3718      	adds	r7, #24
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}

0801717c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b086      	sub	sp, #24
 8017180:	af00      	add	r7, sp, #0
 8017182:	4603      	mov	r3, r0
 8017184:	60b9      	str	r1, [r7, #8]
 8017186:	607a      	str	r2, [r7, #4]
 8017188:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801718a:	2300      	movs	r3, #0
 801718c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 801718e:	89fb      	ldrh	r3, [r7, #14]
 8017190:	2b37      	cmp	r3, #55	; 0x37
 8017192:	d802      	bhi.n	801719a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017194:	f06f 0309 	mvn.w	r3, #9
 8017198:	e15e      	b.n	8017458 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801719a:	68b9      	ldr	r1, [r7, #8]
 801719c:	2002      	movs	r0, #2
 801719e:	f7f8 f906 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80171a2:	4603      	mov	r3, r0
 80171a4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	3302      	adds	r3, #2
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80171b4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	3303      	adds	r3, #3
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171c4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80171ca:	68bb      	ldr	r3, [r7, #8]
 80171cc:	3304      	adds	r3, #4
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	f003 0303 	and.w	r3, r3, #3
 80171d4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	3305      	adds	r3, #5
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	f003 0301 	and.w	r3, r3, #1
 80171e4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	3306      	adds	r3, #6
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171f4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	3307      	adds	r3, #7
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017204:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	3308      	adds	r3, #8
 801720e:	4619      	mov	r1, r3
 8017210:	2002      	movs	r0, #2
 8017212:	f7f8 f8cc 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 8017216:	4603      	mov	r3, r0
 8017218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801721c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	330a      	adds	r3, #10
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	f003 0303 	and.w	r3, r3, #3
 801722c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	330b      	adds	r3, #11
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	f003 0303 	and.w	r3, r3, #3
 801723c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	330c      	adds	r3, #12
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	f003 030f 	and.w	r3, r3, #15
 801724c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	330d      	adds	r3, #13
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	f003 0307 	and.w	r3, r3, #7
 801725c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	330e      	adds	r3, #14
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	f003 0301 	and.w	r3, r3, #1
 801726c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	330f      	adds	r3, #15
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	f003 0303 	and.w	r3, r3, #3
 801727c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	7c1a      	ldrb	r2, [r3, #16]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	7c5a      	ldrb	r2, [r3, #17]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	3312      	adds	r3, #18
 8017296:	4619      	mov	r1, r3
 8017298:	2002      	movs	r0, #2
 801729a:	f7f8 f888 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 801729e:	4603      	mov	r3, r0
 80172a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80172a4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	3316      	adds	r3, #22
 80172ae:	4619      	mov	r1, r3
 80172b0:	2002      	movs	r0, #2
 80172b2:	f7f8 f87c 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80172b6:	4603      	mov	r3, r0
 80172b8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	3318      	adds	r3, #24
 80172c2:	4619      	mov	r1, r3
 80172c4:	2002      	movs	r0, #2
 80172c6:	f7f8 f872 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80172ca:	4603      	mov	r3, r0
 80172cc:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	331a      	adds	r3, #26
 80172d6:	781b      	ldrb	r3, [r3, #0]
 80172d8:	f003 0301 	and.w	r3, r3, #1
 80172dc:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	331b      	adds	r3, #27
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	f003 0307 	and.w	r3, r3, #7
 80172ec:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	7f1a      	ldrb	r2, [r3, #28]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	7f5a      	ldrb	r2, [r3, #29]
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	331e      	adds	r3, #30
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801730c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	331f      	adds	r3, #31
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801731c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	3320      	adds	r3, #32
 8017326:	781b      	ldrb	r3, [r3, #0]
 8017328:	f003 0303 	and.w	r3, r3, #3
 801732c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	3321      	adds	r3, #33	; 0x21
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	f003 030f 	and.w	r3, r3, #15
 801733c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	3325      	adds	r3, #37	; 0x25
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	f003 0301 	and.w	r3, r3, #1
 8017370:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	3326      	adds	r3, #38	; 0x26
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	f003 0303 	and.w	r3, r3, #3
 8017382:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	3327      	adds	r3, #39	; 0x27
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	f003 031f 	and.w	r3, r3, #31
 8017394:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	3328      	adds	r3, #40	; 0x28
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	f003 031f 	and.w	r3, r3, #31
 80173a6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	3329      	adds	r3, #41	; 0x29
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	f003 031f 	and.w	r3, r3, #31
 80173b8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	332a      	adds	r3, #42	; 0x2a
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	f003 0301 	and.w	r3, r3, #1
 80173ca:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	332b      	adds	r3, #43	; 0x2b
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	f003 0301 	and.w	r3, r3, #1
 80173dc:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	332c      	adds	r3, #44	; 0x2c
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	f003 0303 	and.w	r3, r3, #3
 80173ee:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	332d      	adds	r3, #45	; 0x2d
 80173fa:	781b      	ldrb	r3, [r3, #0]
 80173fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017400:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	332e      	adds	r3, #46	; 0x2e
 801740c:	4619      	mov	r1, r3
 801740e:	2004      	movs	r0, #4
 8017410:	f7f8 f86c 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 8017414:	4603      	mov	r3, r0
 8017416:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	3332      	adds	r3, #50	; 0x32
 8017422:	4619      	mov	r1, r3
 8017424:	2004      	movs	r0, #4
 8017426:	f7f8 f861 	bl	800f4ec <VL53L1_i2c_decode_uint32_t>
 801742a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	3336      	adds	r3, #54	; 0x36
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	f003 0301 	and.w	r3, r3, #1
 801743a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	3337      	adds	r3, #55	; 0x37
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	f003 0301 	and.w	r3, r3, #1
 801744c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8017454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017458:	4618      	mov	r0, r3
 801745a:	3718      	adds	r7, #24
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}

08017460 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b086      	sub	sp, #24
 8017464:	af00      	add	r7, sp, #0
 8017466:	4603      	mov	r3, r0
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	607a      	str	r2, [r7, #4]
 801746c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801746e:	2300      	movs	r3, #0
 8017470:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8017472:	89fb      	ldrh	r3, [r7, #14]
 8017474:	2b30      	cmp	r3, #48	; 0x30
 8017476:	d802      	bhi.n	801747e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017478:	f06f 0309 	mvn.w	r3, #9
 801747c:	e112      	b.n	80176a4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	785a      	ldrb	r2, [r3, #1]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	789a      	ldrb	r2, [r3, #2]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	3303      	adds	r3, #3
 801749a:	4619      	mov	r1, r3
 801749c:	2002      	movs	r0, #2
 801749e:	f7f7 ff86 	bl	800f3ae <VL53L1_i2c_decode_uint16_t>
 80174a2:	4603      	mov	r3, r0
 80174a4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	3305      	adds	r3, #5
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	3306      	adds	r3, #6
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	f003 0307 	and.w	r3, r3, #7
 80174c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	3307      	adds	r3, #7
 80174ce:	781b      	ldrb	r3, [r3, #0]
 80174d0:	f003 0307 	and.w	r3, r3, #7
 80174d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80174da:	68bb      	ldr	r3, [r7, #8]
 80174dc:	3308      	adds	r3, #8
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	3309      	adds	r3, #9
 80174ee:	781b      	ldrb	r3, [r3, #0]
 80174f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	330a      	adds	r3, #10
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	f003 0301 	and.w	r3, r3, #1
 8017504:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	330b      	adds	r3, #11
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017514:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	330c      	adds	r3, #12
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	f003 0301 	and.w	r3, r3, #1
 8017524:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	330d      	adds	r3, #13
 801752e:	781b      	ldrb	r3, [r3, #0]
 8017530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017534:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	330e      	adds	r3, #14
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017544:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	7bda      	ldrb	r2, [r3, #15]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	7c1a      	ldrb	r2, [r3, #16]
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	7c5a      	ldrb	r2, [r3, #17]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	7c9a      	ldrb	r2, [r3, #18]
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	7cda      	ldrb	r2, [r3, #19]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	7d1a      	ldrb	r2, [r3, #20]
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	7d5a      	ldrb	r2, [r3, #21]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8017582:	68bb      	ldr	r3, [r7, #8]
 8017584:	7d9a      	ldrb	r2, [r3, #22]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	7dda      	ldrb	r2, [r3, #23]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	7e1a      	ldrb	r2, [r3, #24]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	7e5a      	ldrb	r2, [r3, #25]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	7e9a      	ldrb	r2, [r3, #26]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	7eda      	ldrb	r2, [r3, #27]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	7f1a      	ldrb	r2, [r3, #28]
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	7f5a      	ldrb	r2, [r3, #29]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	7f9a      	ldrb	r2, [r3, #30]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	7fda      	ldrb	r2, [r3, #31]
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80175ec:	68bb      	ldr	r3, [r7, #8]
 80175ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801764c:	68bb      	ldr	r3, [r7, #8]
 801764e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80176a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3718      	adds	r7, #24
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b090      	sub	sp, #64	; 0x40
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80176b6:	2300      	movs	r3, #0
 80176b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80176bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d10a      	bne.n	80176da <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80176c4:	f107 020c 	add.w	r2, r7, #12
 80176c8:	2331      	movs	r3, #49	; 0x31
 80176ca:	f240 110f 	movw	r1, #271	; 0x10f
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	f001 f8f8 	bl	80188c4 <VL53L1_ReadMulti>
 80176d4:	4603      	mov	r3, r0
 80176d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80176da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d109      	bne.n	80176f6 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80176e2:	f107 030c 	add.w	r3, r7, #12
 80176e6:	683a      	ldr	r2, [r7, #0]
 80176e8:	4619      	mov	r1, r3
 80176ea:	2031      	movs	r0, #49	; 0x31
 80176ec:	f7ff feb8 	bl	8017460 <VL53L1_i2c_decode_nvm_copy_data>
 80176f0:	4603      	mov	r3, r0
 80176f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80176f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3740      	adds	r7, #64	; 0x40
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}

08017702 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8017702:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017706:	b0d6      	sub	sp, #344	; 0x158
 8017708:	af00      	add	r7, sp, #0
 801770a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801770e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8017712:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8017716:	4603      	mov	r3, r0
 8017718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801771c:	23f1      	movs	r3, #241	; 0xf1
 801771e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 8017722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8017730:	f04f 0200 	mov.w	r2, #0
 8017734:	f04f 0300 	mov.w	r3, #0
 8017738:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 801773c:	f04f 0200 	mov.w	r2, #0
 8017740:	f04f 0300 	mov.w	r3, #0
 8017744:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8017748:	f04f 0200 	mov.w	r2, #0
 801774c:	f04f 0300 	mov.w	r3, #0
 8017750:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8017754:	f04f 0200 	mov.w	r2, #0
 8017758:	f04f 0300 	mov.w	r3, #0
 801775c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8017760:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8017764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017768:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801776a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801776e:	2b00      	cmp	r3, #0
 8017770:	f000 8322 	beq.w	8017db8 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8017774:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8017778:	4618      	mov	r0, r3
 801777a:	f7fb fa23 	bl	8012bc4 <VL53L1_calc_pll_period_mm>
 801777e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 8017782:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017786:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801778a:	429a      	cmp	r2, r3
 801778c:	d91a      	bls.n	80177c4 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801778e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017792:	2200      	movs	r2, #0
 8017794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017798:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 801779c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80177a0:	2200      	movs	r2, #0
 80177a2:	4698      	mov	r8, r3
 80177a4:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80177a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80177aa:	460b      	mov	r3, r1
 80177ac:	ebb3 0308 	subs.w	r3, r3, r8
 80177b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80177b2:	4613      	mov	r3, r2
 80177b4:	eb63 0309 	sbc.w	r3, r3, r9
 80177b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80177ba:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80177be:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80177c2:	e013      	b.n	80177ec <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80177c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80177c8:	2200      	movs	r2, #0
 80177ca:	469a      	mov	sl, r3
 80177cc:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80177ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80177d2:	2200      	movs	r2, #0
 80177d4:	461c      	mov	r4, r3
 80177d6:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80177d8:	ebba 0304 	subs.w	r3, sl, r4
 80177dc:	633b      	str	r3, [r7, #48]	; 0x30
 80177de:	eb6b 0305 	sbc.w	r3, fp, r5
 80177e2:	637b      	str	r3, [r7, #52]	; 0x34
 80177e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80177e8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80177ec:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80177f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d91f      	bls.n	8017838 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80177f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80177fc:	2200      	movs	r2, #0
 80177fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017802:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8017806:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801780a:	2200      	movs	r2, #0
 801780c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017810:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8017814:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8017818:	4623      	mov	r3, r4
 801781a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801781e:	4602      	mov	r2, r0
 8017820:	1a9b      	subs	r3, r3, r2
 8017822:	62bb      	str	r3, [r7, #40]	; 0x28
 8017824:	462b      	mov	r3, r5
 8017826:	460a      	mov	r2, r1
 8017828:	eb63 0302 	sbc.w	r3, r3, r2
 801782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801782e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8017832:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8017836:	e01e      	b.n	8017876 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8017838:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801783c:	2200      	movs	r2, #0
 801783e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017842:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8017846:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801784a:	2200      	movs	r2, #0
 801784c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8017854:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8017858:	4623      	mov	r3, r4
 801785a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801785e:	4602      	mov	r2, r0
 8017860:	1a9b      	subs	r3, r3, r2
 8017862:	623b      	str	r3, [r7, #32]
 8017864:	462b      	mov	r3, r5
 8017866:	460a      	mov	r2, r1
 8017868:	eb63 0302 	sbc.w	r3, r3, r2
 801786c:	627b      	str	r3, [r7, #36]	; 0x24
 801786e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8017872:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8017876:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801787a:	4313      	orrs	r3, r2
 801787c:	f000 829c 	beq.w	8017db8 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8017880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017884:	2200      	movs	r2, #0
 8017886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801788a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801788e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017892:	2200      	movs	r2, #0
 8017894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8017898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801789c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80178a0:	4623      	mov	r3, r4
 80178a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80178a6:	4602      	mov	r2, r0
 80178a8:	189b      	adds	r3, r3, r2
 80178aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80178ae:	460b      	mov	r3, r1
 80178b0:	462a      	mov	r2, r5
 80178b2:	eb42 0303 	adc.w	r3, r2, r3
 80178b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80178ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80178be:	2200      	movs	r2, #0
 80178c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80178c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80178c8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80178cc:	4623      	mov	r3, r4
 80178ce:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80178d2:	4602      	mov	r2, r0
 80178d4:	189b      	adds	r3, r3, r2
 80178d6:	61bb      	str	r3, [r7, #24]
 80178d8:	460b      	mov	r3, r1
 80178da:	462a      	mov	r2, r5
 80178dc:	eb42 0303 	adc.w	r3, r2, r3
 80178e0:	61fb      	str	r3, [r7, #28]
 80178e2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80178e6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80178ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80178ee:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80178f2:	f173 0300 	sbcs.w	r3, r3, #0
 80178f6:	d305      	bcc.n	8017904 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80178f8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80178fc:	f04f 0300 	mov.w	r3, #0
 8017900:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8017904:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017908:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801790c:	fb03 f102 	mul.w	r1, r3, r2
 8017910:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017914:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017918:	fb02 f303 	mul.w	r3, r2, r3
 801791c:	18ca      	adds	r2, r1, r3
 801791e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017922:	fba3 1303 	umull	r1, r3, r3, r3
 8017926:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801792a:	460b      	mov	r3, r1
 801792c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8017930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017934:	18d3      	adds	r3, r2, r3
 8017936:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801793a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801793e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8017942:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8017946:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801794a:	f04f 0000 	mov.w	r0, #0
 801794e:	f04f 0100 	mov.w	r1, #0
 8017952:	0219      	lsls	r1, r3, #8
 8017954:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8017958:	0210      	lsls	r0, r2, #8
 801795a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801795e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8017962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017966:	d305      	bcc.n	8017974 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8017968:	f04f 32ff 	mov.w	r2, #4294967295
 801796c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017970:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8017974:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017978:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801797c:	f7e9 f93c 	bl	8000bf8 <__aeabi_uldivmod>
 8017980:	4602      	mov	r2, r0
 8017982:	460b      	mov	r3, r1
 8017984:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8017988:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801798c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8017990:	f7e9 f932 	bl	8000bf8 <__aeabi_uldivmod>
 8017994:	4602      	mov	r2, r0
 8017996:	460b      	mov	r3, r1
 8017998:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 801799c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80179a0:	2b80      	cmp	r3, #128	; 0x80
 80179a2:	d305      	bcc.n	80179b0 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80179a4:	f04f 32ff 	mov.w	r2, #4294967295
 80179a8:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80179ac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80179b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80179b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80179b8:	fb03 f102 	mul.w	r1, r3, r2
 80179bc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80179c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80179c4:	fb02 f303 	mul.w	r3, r2, r3
 80179c8:	4419      	add	r1, r3
 80179ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80179ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80179d2:	fba2 2303 	umull	r2, r3, r2, r3
 80179d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80179da:	4613      	mov	r3, r2
 80179dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80179e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80179e4:	18cb      	adds	r3, r1, r3
 80179e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80179ea:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80179ee:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80179f2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80179f6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80179fa:	2200      	movs	r2, #0
 80179fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017a00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017a04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017a08:	2200      	movs	r2, #0
 8017a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017a0e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8017a16:	4623      	mov	r3, r4
 8017a18:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	189b      	adds	r3, r3, r2
 8017a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017a24:	460b      	mov	r3, r1
 8017a26:	462a      	mov	r2, r5
 8017a28:	eb42 0303 	adc.w	r3, r2, r3
 8017a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8017a30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017a34:	2200      	movs	r2, #0
 8017a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8017a38:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8017a3a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8017a3e:	4623      	mov	r3, r4
 8017a40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8017a44:	4602      	mov	r2, r0
 8017a46:	189b      	adds	r3, r3, r2
 8017a48:	673b      	str	r3, [r7, #112]	; 0x70
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	462a      	mov	r2, r5
 8017a4e:	eb42 0303 	adc.w	r3, r2, r3
 8017a52:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8017a54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8017a58:	2200      	movs	r2, #0
 8017a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8017a5c:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8017a5e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8017a62:	4623      	mov	r3, r4
 8017a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8017a68:	4602      	mov	r2, r0
 8017a6a:	189b      	adds	r3, r3, r2
 8017a6c:	613b      	str	r3, [r7, #16]
 8017a6e:	460b      	mov	r3, r1
 8017a70:	462a      	mov	r2, r5
 8017a72:	eb42 0303 	adc.w	r3, r2, r3
 8017a76:	617b      	str	r3, [r7, #20]
 8017a78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8017a7c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8017a80:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8017a84:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8017a88:	f173 0300 	sbcs.w	r3, r3, #0
 8017a8c:	d305      	bcc.n	8017a9a <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8017a8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017a92:	f04f 0300 	mov.w	r3, #0
 8017a96:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8017a9a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8017a9e:	f04f 0000 	mov.w	r0, #0
 8017aa2:	f04f 0100 	mov.w	r1, #0
 8017aa6:	0219      	lsls	r1, r3, #8
 8017aa8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8017aac:	0210      	lsls	r0, r2, #8
 8017aae:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8017ab2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017ab6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8017aba:	1884      	adds	r4, r0, r2
 8017abc:	60bc      	str	r4, [r7, #8]
 8017abe:	eb41 0303 	adc.w	r3, r1, r3
 8017ac2:	60fb      	str	r3, [r7, #12]
 8017ac4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017ac8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8017acc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	da05      	bge.n	8017ae0 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8017ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ad8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017adc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8017ae0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d331      	bcc.n	8017b4c <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8017ae8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017aec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017af0:	f7e9 f882 	bl	8000bf8 <__aeabi_uldivmod>
 8017af4:	4602      	mov	r2, r0
 8017af6:	460b      	mov	r3, r1
 8017af8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8017afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b00:	2200      	movs	r2, #0
 8017b02:	663b      	str	r3, [r7, #96]	; 0x60
 8017b04:	667a      	str	r2, [r7, #100]	; 0x64
 8017b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017b0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8017b0e:	4622      	mov	r2, r4
 8017b10:	fb02 f203 	mul.w	r2, r2, r3
 8017b14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017b18:	4629      	mov	r1, r5
 8017b1a:	fb01 f303 	mul.w	r3, r1, r3
 8017b1e:	441a      	add	r2, r3
 8017b20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017b24:	4621      	mov	r1, r4
 8017b26:	fba3 1301 	umull	r1, r3, r3, r1
 8017b2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017b2e:	460b      	mov	r3, r1
 8017b30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8017b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017b38:	18d3      	adds	r3, r2, r3
 8017b3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017b3e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8017b42:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017b46:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017b4a:	e030      	b.n	8017bae <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8017b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b50:	2200      	movs	r2, #0
 8017b52:	65bb      	str	r3, [r7, #88]	; 0x58
 8017b54:	65fa      	str	r2, [r7, #92]	; 0x5c
 8017b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017b5a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8017b5e:	4622      	mov	r2, r4
 8017b60:	fb02 f203 	mul.w	r2, r2, r3
 8017b64:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017b68:	4629      	mov	r1, r5
 8017b6a:	fb01 f303 	mul.w	r3, r1, r3
 8017b6e:	441a      	add	r2, r3
 8017b70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017b74:	4621      	mov	r1, r4
 8017b76:	fba3 1301 	umull	r1, r3, r3, r1
 8017b7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8017b7e:	460b      	mov	r3, r1
 8017b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8017b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017b88:	18d3      	adds	r3, r2, r3
 8017b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8017b8e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8017b92:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017b96:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8017b9a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017b9e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017ba2:	f7e9 f829 	bl	8000bf8 <__aeabi_uldivmod>
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	460b      	mov	r3, r1
 8017baa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8017bae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	da05      	bge.n	8017bc2 <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8017bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8017bba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017bbe:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8017bc2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017bc6:	2b01      	cmp	r3, #1
 8017bc8:	d33d      	bcc.n	8017c46 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8017bca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017bce:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017bd2:	f7e9 f811 	bl	8000bf8 <__aeabi_uldivmod>
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	460b      	mov	r3, r1
 8017bda:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8017bde:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017be2:	f04f 0200 	mov.w	r2, #0
 8017be6:	f04f 0300 	mov.w	r3, #0
 8017bea:	0882      	lsrs	r2, r0, #2
 8017bec:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8017bf0:	088b      	lsrs	r3, r1, #2
 8017bf2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8017bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8017bfe:	657a      	str	r2, [r7, #84]	; 0x54
 8017c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017c04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8017c08:	4622      	mov	r2, r4
 8017c0a:	fb02 f203 	mul.w	r2, r2, r3
 8017c0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017c12:	4629      	mov	r1, r5
 8017c14:	fb01 f303 	mul.w	r3, r1, r3
 8017c18:	4413      	add	r3, r2
 8017c1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017c1e:	4621      	mov	r1, r4
 8017c20:	fba2 1201 	umull	r1, r2, r2, r1
 8017c24:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8017c28:	460a      	mov	r2, r1
 8017c2a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8017c2e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8017c32:	4413      	add	r3, r2
 8017c34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8017c38:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8017c3c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017c40:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017c44:	e03c      	b.n	8017cc0 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8017c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8017c4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017c54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8017c58:	4622      	mov	r2, r4
 8017c5a:	fb02 f203 	mul.w	r2, r2, r3
 8017c5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017c62:	4629      	mov	r1, r5
 8017c64:	fb01 f303 	mul.w	r3, r1, r3
 8017c68:	4413      	add	r3, r2
 8017c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017c6e:	4621      	mov	r1, r4
 8017c70:	fba2 1201 	umull	r1, r2, r2, r1
 8017c74:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017c78:	460a      	mov	r2, r1
 8017c7a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8017c7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017c82:	4413      	add	r3, r2
 8017c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017c88:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8017c8c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8017c90:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8017c94:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017c98:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017c9c:	f7e8 ffac 	bl	8000bf8 <__aeabi_uldivmod>
 8017ca0:	4602      	mov	r2, r0
 8017ca2:	460b      	mov	r3, r1
 8017ca4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8017ca8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017cac:	f04f 0200 	mov.w	r2, #0
 8017cb0:	f04f 0300 	mov.w	r3, #0
 8017cb4:	0882      	lsrs	r2, r0, #2
 8017cb6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8017cba:	088b      	lsrs	r3, r1, #2
 8017cbc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8017cc0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	da05      	bge.n	8017cd4 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8017cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ccc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017cd0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8017cd4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017cd8:	f04f 0200 	mov.w	r2, #0
 8017cdc:	f04f 0300 	mov.w	r3, #0
 8017ce0:	0882      	lsrs	r2, r0, #2
 8017ce2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8017ce6:	088b      	lsrs	r3, r1, #2
 8017ce8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8017cec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017cf0:	2b01      	cmp	r3, #1
 8017cf2:	d305      	bcc.n	8017d00 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8017cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8017cf8:	f04f 0300 	mov.w	r3, #0
 8017cfc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8017d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8017d04:	2200      	movs	r2, #0
 8017d06:	643b      	str	r3, [r7, #64]	; 0x40
 8017d08:	647a      	str	r2, [r7, #68]	; 0x44
 8017d0a:	f04f 0200 	mov.w	r2, #0
 8017d0e:	f04f 0300 	mov.w	r3, #0
 8017d12:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8017d16:	4629      	mov	r1, r5
 8017d18:	01cb      	lsls	r3, r1, #7
 8017d1a:	4621      	mov	r1, r4
 8017d1c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8017d20:	4621      	mov	r1, r4
 8017d22:	01ca      	lsls	r2, r1, #7
 8017d24:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8017d28:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017d2c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8017d30:	fb03 f202 	mul.w	r2, r3, r2
 8017d34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017d38:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8017d3c:	fb01 f303 	mul.w	r3, r1, r3
 8017d40:	441a      	add	r2, r3
 8017d42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017d46:	fba3 1303 	umull	r1, r3, r3, r3
 8017d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017d4e:	460b      	mov	r3, r1
 8017d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017d58:	18d3      	adds	r3, r2, r3
 8017d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017d5e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8017d62:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8017d66:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8017d6a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8017d6e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8017d72:	1884      	adds	r4, r0, r2
 8017d74:	603c      	str	r4, [r7, #0]
 8017d76:	eb41 0303 	adc.w	r3, r1, r3
 8017d7a:	607b      	str	r3, [r7, #4]
 8017d7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017d80:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8017d84:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8017d88:	2b01      	cmp	r3, #1
 8017d8a:	d305      	bcc.n	8017d98 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8017d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d90:	f04f 0300 	mov.w	r3, #0
 8017d94:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8017d98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f7fa fdaa 	bl	80128f6 <VL53L1_isqrt>
 8017da2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8017da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8017db0:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8017db2:	2300      	movs	r3, #0
 8017db4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8017db8:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017dc8 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b086      	sub	sp, #24
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	3318      	adds	r3, #24
 8017dd8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d107      	bne.n	8017df6 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8017de6:	f64e 2160 	movw	r1, #60000	; 0xea60
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f000 f88b 	bl	8017f06 <VL53L1_poll_for_range_completion>
 8017df0:	4603      	mov	r3, r0
 8017df2:	75fb      	strb	r3, [r7, #23]
 8017df4:	e01b      	b.n	8017e2e <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8017dfa:	e011      	b.n	8017e20 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8017dfc:	f107 030f 	add.w	r3, r7, #15
 8017e00:	4619      	mov	r1, r3
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f000 f819 	bl	8017e3a <VL53L1_is_new_data_ready>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8017e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d105      	bne.n	8017e20 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8017e14:	2101      	movs	r1, #1
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f000 fe6e 	bl	8018af8 <VL53L1_WaitMs>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8017e20:	7bfb      	ldrb	r3, [r7, #15]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d103      	bne.n	8017e2e <VL53L1_wait_for_test_completion+0x66>
 8017e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d0e6      	beq.n	8017dfc <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8017e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e32:	4618      	mov	r0, r3
 8017e34:	3718      	adds	r7, #24
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd80      	pop	{r7, pc}

08017e3a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8017e3a:	b580      	push	{r7, lr}
 8017e3c:	b086      	sub	sp, #24
 8017e3e:	af00      	add	r7, sp, #0
 8017e40:	6078      	str	r0, [r7, #4]
 8017e42:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017e44:	2300      	movs	r3, #0
 8017e46:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	3318      	adds	r3, #24
 8017e4c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8017e52:	2300      	movs	r3, #0
 8017e54:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8017e56:	2300      	movs	r3, #0
 8017e58:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8017e60:	f003 0310 	and.w	r3, r3, #16
 8017e64:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8017e66:	7bfb      	ldrb	r3, [r7, #15]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d102      	bne.n	8017e72 <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	75fb      	strb	r3, [r7, #23]
 8017e70:	e001      	b.n	8017e76 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8017e72:	2300      	movs	r3, #0
 8017e74:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8017e76:	f107 030e 	add.w	r3, r7, #14
 8017e7a:	461a      	mov	r2, r3
 8017e7c:	2131      	movs	r1, #49	; 0x31
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f000 fdb2 	bl	80189e8 <VL53L1_RdByte>
 8017e84:	4603      	mov	r3, r0
 8017e86:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8017e88:	7bbb      	ldrb	r3, [r7, #14]
 8017e8a:	f003 0201 	and.w	r2, r3, #1
 8017e8e:	7dfb      	ldrb	r3, [r7, #23]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d103      	bne.n	8017e9c <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	2201      	movs	r2, #1
 8017e98:	701a      	strb	r2, [r3, #0]
 8017e9a:	e002      	b.n	8017ea2 <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8017ea2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3718      	adds	r7, #24
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}

08017eae <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8017eae:	b580      	push	{r7, lr}
 8017eb0:	b086      	sub	sp, #24
 8017eb2:	af02      	add	r7, sp, #8
 8017eb4:	6078      	str	r0, [r7, #4]
 8017eb6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8017ebc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8017ec0:	6878      	ldr	r0, [r7, #4]
 8017ec2:	f000 fe29 	bl	8018b18 <VL53L1_WaitUs>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8017eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d10b      	bne.n	8017eea <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	9301      	str	r3, [sp, #4]
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	9300      	str	r3, [sp, #0]
 8017eda:	2301      	movs	r3, #1
 8017edc:	22e5      	movs	r2, #229	; 0xe5
 8017ede:	6839      	ldr	r1, [r7, #0]
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f000 fe31 	bl	8018b48 <VL53L1_WaitValueMaskEx>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8017eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d103      	bne.n	8017efa <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8017ef2:	2103      	movs	r1, #3
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f7f6 fc38 	bl	800e76a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8017efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3710      	adds	r7, #16
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}

08017f06 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8017f06:	b580      	push	{r7, lr}
 8017f08:	b088      	sub	sp, #32
 8017f0a:	af02      	add	r7, sp, #8
 8017f0c:	6078      	str	r0, [r7, #4]
 8017f0e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017f10:	2300      	movs	r3, #0
 8017f12:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	3318      	adds	r3, #24
 8017f18:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8017f28:	f003 0310 	and.w	r3, r3, #16
 8017f2c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8017f2e:	7bfb      	ldrb	r3, [r7, #15]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d102      	bne.n	8017f3a <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8017f34:	2301      	movs	r3, #1
 8017f36:	75fb      	strb	r3, [r7, #23]
 8017f38:	e001      	b.n	8017f3e <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8017f3e:	7dfb      	ldrb	r3, [r7, #23]
 8017f40:	2201      	movs	r2, #1
 8017f42:	9201      	str	r2, [sp, #4]
 8017f44:	2201      	movs	r2, #1
 8017f46:	9200      	str	r2, [sp, #0]
 8017f48:	2231      	movs	r2, #49	; 0x31
 8017f4a:	6839      	ldr	r1, [r7, #0]
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f000 fdfb 	bl	8018b48 <VL53L1_WaitValueMaskEx>
 8017f52:	4603      	mov	r3, r0
 8017f54:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8017f56:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3718      	adds	r7, #24
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}

08017f62 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8017f62:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017f66:	b0c0      	sub	sp, #256	; 0x100
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8017f6e:	4618      	mov	r0, r3
 8017f70:	460b      	mov	r3, r1
 8017f72:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8017f76:	4613      	mov	r3, r2
 8017f78:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017f82:	2300      	movs	r3, #0
 8017f84:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8017f94:	2300      	movs	r3, #0
 8017f96:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8017fac:	f04f 0200 	mov.w	r2, #0
 8017fb0:	f04f 0300 	mov.w	r3, #0
 8017fb4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8017fb8:	f04f 0200 	mov.w	r2, #0
 8017fbc:	f04f 0300 	mov.w	r3, #0
 8017fc0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8017fc4:	f04f 0200 	mov.w	r2, #0
 8017fc8:	f04f 0300 	mov.w	r3, #0
 8017fcc:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8017fd0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d108      	bne.n	8017fea <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8017fd8:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8017fdc:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8017fe0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7fb f867 	bl	80130b8 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8017fea:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d165      	bne.n	80180be <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8017ff2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8017ff6:	091b      	lsrs	r3, r3, #4
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	f003 0301 	and.w	r3, r3, #1
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00e      	beq.n	8018020 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8018002:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8018006:	b29a      	uxth	r2, r3
 8018008:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801800c:	095b      	lsrs	r3, r3, #5
 801800e:	b2db      	uxtb	r3, r3
 8018010:	b29b      	uxth	r3, r3
 8018012:	1ad3      	subs	r3, r2, r3
 8018014:	b29b      	uxth	r3, r3
 8018016:	3b01      	subs	r3, #1
 8018018:	b29b      	uxth	r3, r3
 801801a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 801801e:	e00b      	b.n	8018038 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8018020:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8018024:	b29a      	uxth	r2, r3
 8018026:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801802a:	095b      	lsrs	r3, r3, #5
 801802c:	b2db      	uxtb	r3, r3
 801802e:	b29b      	uxth	r3, r3
 8018030:	1ad3      	subs	r3, r2, r3
 8018032:	b29b      	uxth	r3, r3
 8018034:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8018038:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801803c:	b29a      	uxth	r2, r3
 801803e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8018042:	095b      	lsrs	r3, r3, #5
 8018044:	b2db      	uxtb	r3, r3
 8018046:	b29b      	uxth	r3, r3
 8018048:	4413      	add	r3, r2
 801804a:	b29b      	uxth	r3, r3
 801804c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8018050:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	2b00      	cmp	r3, #0
 801805a:	d011      	beq.n	8018080 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 801805c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8018060:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8018062:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8018066:	f003 020f 	and.w	r2, r3, #15
 801806a:	0fd3      	lsrs	r3, r2, #31
 801806c:	4413      	add	r3, r2
 801806e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8018070:	b29b      	uxth	r3, r3
 8018072:	1acb      	subs	r3, r1, r3
 8018074:	b29b      	uxth	r3, r3
 8018076:	3b01      	subs	r3, #1
 8018078:	b29b      	uxth	r3, r3
 801807a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801807e:	e00f      	b.n	80180a0 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8018080:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8018084:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8018086:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801808a:	f003 020f 	and.w	r2, r3, #15
 801808e:	0fd3      	lsrs	r3, r2, #31
 8018090:	4413      	add	r3, r2
 8018092:	105b      	asrs	r3, r3, #1
 8018094:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8018096:	b29b      	uxth	r3, r3
 8018098:	440b      	add	r3, r1
 801809a:	b29b      	uxth	r3, r3
 801809c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 80180a0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80180a4:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80180a6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80180aa:	f003 020f 	and.w	r2, r3, #15
 80180ae:	0fd3      	lsrs	r3, r2, #31
 80180b0:	4413      	add	r3, r2
 80180b2:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	440b      	add	r3, r1
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80180be:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d133      	bne.n	801812e <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80180c6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80180ca:	b29a      	uxth	r2, r3
 80180cc:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80180d0:	4413      	add	r3, r2
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	005b      	lsls	r3, r3, #1
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	3b0f      	subs	r3, #15
 80180da:	b29b      	uxth	r3, r3
 80180dc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80180e0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80180e4:	b29a      	uxth	r2, r3
 80180e6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80180ea:	4413      	add	r3, r2
 80180ec:	b29b      	uxth	r3, r3
 80180ee:	005b      	lsls	r3, r3, #1
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	3b0f      	subs	r3, #15
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80180fa:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80180fe:	b29a      	uxth	r2, r3
 8018100:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8018104:	4413      	add	r3, r2
 8018106:	b29b      	uxth	r3, r3
 8018108:	005b      	lsls	r3, r3, #1
 801810a:	b29b      	uxth	r3, r3
 801810c:	3b0f      	subs	r3, #15
 801810e:	b29b      	uxth	r3, r3
 8018110:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8018114:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8018118:	b29a      	uxth	r2, r3
 801811a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801811e:	4413      	add	r3, r2
 8018120:	b29b      	uxth	r3, r3
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	b29b      	uxth	r3, r3
 8018126:	3b0f      	subs	r3, #15
 8018128:	b29b      	uxth	r3, r3
 801812a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801812e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8018132:	2b00      	cmp	r3, #0
 8018134:	f040 8135 	bne.w	80183a2 <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8018138:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 801813c:	17da      	asrs	r2, r3, #31
 801813e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018142:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8018146:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801814a:	17da      	asrs	r2, r3, #31
 801814c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8018154:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8018158:	460b      	mov	r3, r1
 801815a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801815e:	fb02 f203 	mul.w	r2, r2, r3
 8018162:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018166:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 801816a:	4601      	mov	r1, r0
 801816c:	fb01 f303 	mul.w	r3, r1, r3
 8018170:	4413      	add	r3, r2
 8018172:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018176:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801817a:	fba2 4501 	umull	r4, r5, r2, r1
 801817e:	442b      	add	r3, r5
 8018180:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8018182:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8018186:	17da      	asrs	r2, r3, #31
 8018188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801818c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8018190:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8018194:	17da      	asrs	r2, r3, #31
 8018196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801819a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801819e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80181a2:	460b      	mov	r3, r1
 80181a4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80181a8:	fb02 f203 	mul.w	r2, r2, r3
 80181ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80181b0:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 80181b4:	4601      	mov	r1, r0
 80181b6:	fb01 f303 	mul.w	r3, r1, r3
 80181ba:	4413      	add	r3, r2
 80181bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80181c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80181c4:	fba2 8901 	umull	r8, r9, r2, r1
 80181c8:	444b      	add	r3, r9
 80181ca:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80181cc:	eb14 0308 	adds.w	r3, r4, r8
 80181d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80181d2:	eb45 0309 	adc.w	r3, r5, r9
 80181d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80181d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80181dc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80181e0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80181e4:	1c51      	adds	r1, r2, #1
 80181e6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80181ea:	f143 0300 	adc.w	r3, r3, #0
 80181ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80181f2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80181f6:	460b      	mov	r3, r1
 80181f8:	0fdb      	lsrs	r3, r3, #31
 80181fa:	2200      	movs	r2, #0
 80181fc:	643b      	str	r3, [r7, #64]	; 0x40
 80181fe:	647a      	str	r2, [r7, #68]	; 0x44
 8018200:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8018204:	4623      	mov	r3, r4
 8018206:	4602      	mov	r2, r0
 8018208:	189b      	adds	r3, r3, r2
 801820a:	63bb      	str	r3, [r7, #56]	; 0x38
 801820c:	460b      	mov	r3, r1
 801820e:	462a      	mov	r2, r5
 8018210:	eb42 0303 	adc.w	r3, r2, r3
 8018214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018216:	f04f 0200 	mov.w	r2, #0
 801821a:	f04f 0300 	mov.w	r3, #0
 801821e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8018222:	4621      	mov	r1, r4
 8018224:	084a      	lsrs	r2, r1, #1
 8018226:	4629      	mov	r1, r5
 8018228:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801822c:	4629      	mov	r1, r5
 801822e:	104b      	asrs	r3, r1, #1
 8018230:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8018234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018238:	2200      	movs	r2, #0
 801823a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801823e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018242:	f04f 0000 	mov.w	r0, #0
 8018246:	f04f 0100 	mov.w	r1, #0
 801824a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801824e:	462b      	mov	r3, r5
 8018250:	0099      	lsls	r1, r3, #2
 8018252:	4623      	mov	r3, r4
 8018254:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8018258:	4623      	mov	r3, r4
 801825a:	0098      	lsls	r0, r3, #2
 801825c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8018260:	1814      	adds	r4, r2, r0
 8018262:	633c      	str	r4, [r7, #48]	; 0x30
 8018264:	414b      	adcs	r3, r1
 8018266:	637b      	str	r3, [r7, #52]	; 0x34
 8018268:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801826c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8018270:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8018274:	17da      	asrs	r2, r3, #31
 8018276:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801827a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801827e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8018282:	17da      	asrs	r2, r3, #31
 8018284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018288:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801828c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8018290:	462b      	mov	r3, r5
 8018292:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8018296:	4642      	mov	r2, r8
 8018298:	fb02 f203 	mul.w	r2, r2, r3
 801829c:	464b      	mov	r3, r9
 801829e:	4621      	mov	r1, r4
 80182a0:	fb01 f303 	mul.w	r3, r1, r3
 80182a4:	4413      	add	r3, r2
 80182a6:	4622      	mov	r2, r4
 80182a8:	4641      	mov	r1, r8
 80182aa:	fba2 ab01 	umull	sl, fp, r2, r1
 80182ae:	445b      	add	r3, fp
 80182b0:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80182b2:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 80182b6:	17da      	asrs	r2, r3, #31
 80182b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80182ba:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 80182bc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80182c0:	17da      	asrs	r2, r3, #31
 80182c2:	673b      	str	r3, [r7, #112]	; 0x70
 80182c4:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80182c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80182ca:	462b      	mov	r3, r5
 80182cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80182d0:	4642      	mov	r2, r8
 80182d2:	fb02 f203 	mul.w	r2, r2, r3
 80182d6:	464b      	mov	r3, r9
 80182d8:	4621      	mov	r1, r4
 80182da:	fb01 f303 	mul.w	r3, r1, r3
 80182de:	4413      	add	r3, r2
 80182e0:	4622      	mov	r2, r4
 80182e2:	4641      	mov	r1, r8
 80182e4:	fba2 1201 	umull	r1, r2, r2, r1
 80182e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80182ec:	460a      	mov	r2, r1
 80182ee:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80182f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80182f6:	4413      	add	r3, r2
 80182f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80182fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8018300:	460b      	mov	r3, r1
 8018302:	eb1a 0303 	adds.w	r3, sl, r3
 8018306:	62bb      	str	r3, [r7, #40]	; 0x28
 8018308:	4613      	mov	r3, r2
 801830a:	eb4b 0303 	adc.w	r3, fp, r3
 801830e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018310:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018314:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8018318:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801831c:	1c51      	adds	r1, r2, #1
 801831e:	66b9      	str	r1, [r7, #104]	; 0x68
 8018320:	f143 0300 	adc.w	r3, r3, #0
 8018324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801832a:	460b      	mov	r3, r1
 801832c:	0fdb      	lsrs	r3, r3, #31
 801832e:	2200      	movs	r2, #0
 8018330:	623b      	str	r3, [r7, #32]
 8018332:	627a      	str	r2, [r7, #36]	; 0x24
 8018334:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8018338:	4623      	mov	r3, r4
 801833a:	4602      	mov	r2, r0
 801833c:	189b      	adds	r3, r3, r2
 801833e:	61bb      	str	r3, [r7, #24]
 8018340:	460b      	mov	r3, r1
 8018342:	462a      	mov	r2, r5
 8018344:	eb42 0303 	adc.w	r3, r2, r3
 8018348:	61fb      	str	r3, [r7, #28]
 801834a:	f04f 0200 	mov.w	r2, #0
 801834e:	f04f 0300 	mov.w	r3, #0
 8018352:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8018356:	4621      	mov	r1, r4
 8018358:	084a      	lsrs	r2, r1, #1
 801835a:	4629      	mov	r1, r5
 801835c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8018360:	4629      	mov	r1, r5
 8018362:	104b      	asrs	r3, r1, #1
 8018364:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8018368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801836c:	2200      	movs	r2, #0
 801836e:	663b      	str	r3, [r7, #96]	; 0x60
 8018370:	667a      	str	r2, [r7, #100]	; 0x64
 8018372:	f04f 0200 	mov.w	r2, #0
 8018376:	f04f 0300 	mov.w	r3, #0
 801837a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801837e:	4629      	mov	r1, r5
 8018380:	008b      	lsls	r3, r1, #2
 8018382:	4621      	mov	r1, r4
 8018384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018388:	4621      	mov	r1, r4
 801838a:	008a      	lsls	r2, r1, #2
 801838c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8018390:	1884      	adds	r4, r0, r2
 8018392:	613c      	str	r4, [r7, #16]
 8018394:	eb41 0303 	adc.w	r3, r1, r3
 8018398:	617b      	str	r3, [r7, #20]
 801839a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801839e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 80183a2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d132      	bne.n	8018410 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 80183aa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80183ae:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80183b2:	1884      	adds	r4, r0, r2
 80183b4:	65bc      	str	r4, [r7, #88]	; 0x58
 80183b6:	eb41 0303 	adc.w	r3, r1, r3
 80183ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80183bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80183c0:	460b      	mov	r3, r1
 80183c2:	3301      	adds	r3, #1
 80183c4:	653b      	str	r3, [r7, #80]	; 0x50
 80183c6:	4613      	mov	r3, r2
 80183c8:	f143 0300 	adc.w	r3, r3, #0
 80183cc:	657b      	str	r3, [r7, #84]	; 0x54
 80183ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80183d2:	460b      	mov	r3, r1
 80183d4:	0fdb      	lsrs	r3, r3, #31
 80183d6:	2200      	movs	r2, #0
 80183d8:	60bb      	str	r3, [r7, #8]
 80183da:	60fa      	str	r2, [r7, #12]
 80183dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80183e0:	4623      	mov	r3, r4
 80183e2:	4602      	mov	r2, r0
 80183e4:	189b      	adds	r3, r3, r2
 80183e6:	603b      	str	r3, [r7, #0]
 80183e8:	460b      	mov	r3, r1
 80183ea:	462a      	mov	r2, r5
 80183ec:	eb42 0303 	adc.w	r3, r2, r3
 80183f0:	607b      	str	r3, [r7, #4]
 80183f2:	f04f 0200 	mov.w	r2, #0
 80183f6:	f04f 0300 	mov.w	r3, #0
 80183fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80183fe:	4621      	mov	r1, r4
 8018400:	084a      	lsrs	r2, r1, #1
 8018402:	4629      	mov	r1, r5
 8018404:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8018408:	4629      	mov	r1, r5
 801840a:	104b      	asrs	r3, r1, #1
 801840c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8018410:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8018414:	2b00      	cmp	r3, #0
 8018416:	d109      	bne.n	801842c <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8018418:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801841c:	2b00      	cmp	r3, #0
 801841e:	da05      	bge.n	801842c <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8018420:	f04f 0200 	mov.w	r2, #0
 8018424:	f04f 0300 	mov.w	r3, #0
 8018428:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801842c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8018434:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8018436:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 801843a:	4618      	mov	r0, r3
 801843c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018440:	46bd      	mov	sp, r7
 8018442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08018446 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8018446:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801844a:	b09a      	sub	sp, #104	; 0x68
 801844c:	af00      	add	r7, sp, #0
 801844e:	6478      	str	r0, [r7, #68]	; 0x44
 8018450:	6439      	str	r1, [r7, #64]	; 0x40
 8018452:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018454:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8018456:	2300      	movs	r3, #0
 8018458:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801845c:	f04f 0200 	mov.w	r2, #0
 8018460:	f04f 0300 	mov.w	r3, #0
 8018464:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8018468:	f04f 0200 	mov.w	r2, #0
 801846c:	f04f 0300 	mov.w	r3, #0
 8018470:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8018474:	f04f 0200 	mov.w	r2, #0
 8018478:	f04f 0300 	mov.w	r3, #0
 801847c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8018480:	2300      	movs	r3, #0
 8018482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8018486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018488:	2200      	movs	r2, #0
 801848a:	633b      	str	r3, [r7, #48]	; 0x30
 801848c:	637a      	str	r2, [r7, #52]	; 0x34
 801848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018494:	2200      	movs	r2, #0
 8018496:	62bb      	str	r3, [r7, #40]	; 0x28
 8018498:	62fa      	str	r2, [r7, #44]	; 0x2c
 801849a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801849e:	460b      	mov	r3, r1
 80184a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184a2:	fb02 f203 	mul.w	r2, r2, r3
 80184a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184a8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80184ac:	4601      	mov	r1, r0
 80184ae:	fb01 f303 	mul.w	r3, r1, r3
 80184b2:	4413      	add	r3, r2
 80184b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184b8:	fba2 4501 	umull	r4, r5, r2, r1
 80184bc:	442b      	add	r3, r5
 80184be:	461d      	mov	r5, r3
 80184c0:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80184c4:	623b      	str	r3, [r7, #32]
 80184c6:	f145 0300 	adc.w	r3, r5, #0
 80184ca:	627b      	str	r3, [r7, #36]	; 0x24
 80184cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80184d0:	f04f 0300 	mov.w	r3, #0
 80184d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80184d8:	f7e8 fb8e 	bl	8000bf8 <__aeabi_uldivmod>
 80184dc:	4602      	mov	r2, r0
 80184de:	460b      	mov	r3, r1
 80184e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80184e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184e6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80184ea:	b29b      	uxth	r3, r3
 80184ec:	2200      	movs	r2, #0
 80184ee:	61bb      	str	r3, [r7, #24]
 80184f0:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80184f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184f4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80184f8:	4622      	mov	r2, r4
 80184fa:	fb02 f203 	mul.w	r2, r2, r3
 80184fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018500:	4629      	mov	r1, r5
 8018502:	fb01 f303 	mul.w	r3, r1, r3
 8018506:	4413      	add	r3, r2
 8018508:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801850a:	4621      	mov	r1, r4
 801850c:	fba2 ab01 	umull	sl, fp, r2, r1
 8018510:	445b      	add	r3, fp
 8018512:	469b      	mov	fp, r3
 8018514:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8018518:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 801851c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8018520:	f04f 0200 	mov.w	r2, #0
 8018524:	f04f 0300 	mov.w	r3, #0
 8018528:	0a02      	lsrs	r2, r0, #8
 801852a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801852e:	0a0b      	lsrs	r3, r1, #8
 8018530:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8018534:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8018538:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 801853c:	6139      	str	r1, [r7, #16]
 801853e:	f143 0300 	adc.w	r3, r3, #0
 8018542:	617b      	str	r3, [r7, #20]
 8018544:	f04f 0200 	mov.w	r2, #0
 8018548:	f04f 0300 	mov.w	r3, #0
 801854c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8018550:	4621      	mov	r1, r4
 8018552:	0aca      	lsrs	r2, r1, #11
 8018554:	4629      	mov	r1, r5
 8018556:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 801855a:	4629      	mov	r1, r5
 801855c:	0acb      	lsrs	r3, r1, #11
 801855e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8018562:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8018566:	2b01      	cmp	r3, #1
 8018568:	d305      	bcc.n	8018576 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 801856a:	f04f 32ff 	mov.w	r2, #4294967295
 801856e:	f04f 0300 	mov.w	r3, #0
 8018572:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8018576:	2300      	movs	r3, #0
 8018578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801857c:	e041      	b.n	8018602 <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801857e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018584:	3302      	adds	r3, #2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	4413      	add	r3, r2
 801858a:	685b      	ldr	r3, [r3, #4]
 801858c:	2200      	movs	r2, #0
 801858e:	60bb      	str	r3, [r7, #8]
 8018590:	60fa      	str	r2, [r7, #12]
 8018592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018594:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8018598:	4622      	mov	r2, r4
 801859a:	fb02 f203 	mul.w	r2, r2, r3
 801859e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80185a0:	4629      	mov	r1, r5
 80185a2:	fb01 f303 	mul.w	r3, r1, r3
 80185a6:	4413      	add	r3, r2
 80185a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80185aa:	4621      	mov	r1, r4
 80185ac:	fba2 8901 	umull	r8, r9, r2, r1
 80185b0:	444b      	add	r3, r9
 80185b2:	4699      	mov	r9, r3
 80185b4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80185b8:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80185bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80185c0:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80185c4:	6039      	str	r1, [r7, #0]
 80185c6:	f143 0300 	adc.w	r3, r3, #0
 80185ca:	607b      	str	r3, [r7, #4]
 80185cc:	f04f 0200 	mov.w	r2, #0
 80185d0:	f04f 0300 	mov.w	r3, #0
 80185d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80185d8:	4621      	mov	r1, r4
 80185da:	0a8a      	lsrs	r2, r1, #10
 80185dc:	4629      	mov	r1, r5
 80185de:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80185e2:	4629      	mov	r1, r5
 80185e4:	0a8b      	lsrs	r3, r1, #10
 80185e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80185ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80185ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80185f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185f2:	3206      	adds	r2, #6
 80185f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80185f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80185fc:	3301      	adds	r3, #1
 80185fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018604:	7a9b      	ldrb	r3, [r3, #10]
 8018606:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801860a:	429a      	cmp	r2, r3
 801860c:	d3b7      	bcc.n	801857e <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801860e:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8018612:	4618      	mov	r0, r3
 8018614:	3768      	adds	r7, #104	; 0x68
 8018616:	46bd      	mov	sp, r7
 8018618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801861c <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 801861c:	b590      	push	{r4, r7, lr}
 801861e:	b085      	sub	sp, #20
 8018620:	af00      	add	r7, sp, #0
 8018622:	4604      	mov	r4, r0
 8018624:	4608      	mov	r0, r1
 8018626:	4611      	mov	r1, r2
 8018628:	461a      	mov	r2, r3
 801862a:	4623      	mov	r3, r4
 801862c:	71fb      	strb	r3, [r7, #7]
 801862e:	4603      	mov	r3, r0
 8018630:	71bb      	strb	r3, [r7, #6]
 8018632:	460b      	mov	r3, r1
 8018634:	717b      	strb	r3, [r7, #5]
 8018636:	4613      	mov	r3, r2
 8018638:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801863a:	2300      	movs	r3, #0
 801863c:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 801863e:	2300      	movs	r3, #0
 8018640:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8018642:	2300      	movs	r3, #0
 8018644:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8018646:	2300      	movs	r3, #0
 8018648:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 801864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801864c:	2210      	movs	r2, #16
 801864e:	701a      	strb	r2, [r3, #0]

	i = 0;
 8018650:	2300      	movs	r3, #0
 8018652:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8018654:	2300      	movs	r3, #0
 8018656:	73fb      	strb	r3, [r7, #15]
 8018658:	e046      	b.n	80186e8 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 801865a:	2300      	movs	r3, #0
 801865c:	73bb      	strb	r3, [r7, #14]
 801865e:	e03b      	b.n	80186d8 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8018660:	89bb      	ldrh	r3, [r7, #12]
 8018662:	2b0f      	cmp	r3, #15
 8018664:	d832      	bhi.n	80186cc <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8018666:	89bb      	ldrh	r3, [r7, #12]
 8018668:	b2da      	uxtb	r2, r3
 801866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801866c:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 801866e:	89bb      	ldrh	r3, [r7, #12]
 8018670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018672:	3306      	adds	r3, #6
 8018674:	009b      	lsls	r3, r3, #2
 8018676:	4413      	add	r3, r2
 8018678:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801867c:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 801867e:	89bb      	ldrh	r3, [r7, #12]
 8018680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018682:	3306      	adds	r3, #6
 8018684:	009b      	lsls	r3, r3, #2
 8018686:	4413      	add	r3, r2
 8018688:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801868c:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 801868e:	7bfa      	ldrb	r2, [r7, #15]
 8018690:	79bb      	ldrb	r3, [r7, #6]
 8018692:	fb12 f303 	smulbb	r3, r2, r3
 8018696:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8018698:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 801869a:	79fa      	ldrb	r2, [r7, #7]
 801869c:	440a      	add	r2, r1
 801869e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 80186a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186a2:	3306      	adds	r3, #6
 80186a4:	009b      	lsls	r3, r3, #2
 80186a6:	4413      	add	r3, r2
 80186a8:	460a      	mov	r2, r1
 80186aa:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 80186ac:	7bba      	ldrb	r2, [r7, #14]
 80186ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186b2:	fb12 f303 	smulbb	r3, r2, r3
 80186b6:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 80186b8:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 80186ba:	793a      	ldrb	r2, [r7, #4]
 80186bc:	440a      	add	r2, r1
 80186be:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80186c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186c2:	3306      	adds	r3, #6
 80186c4:	009b      	lsls	r3, r3, #2
 80186c6:	4413      	add	r3, r2
 80186c8:	460a      	mov	r2, r1
 80186ca:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80186cc:	89bb      	ldrh	r3, [r7, #12]
 80186ce:	3301      	adds	r3, #1
 80186d0:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80186d2:	7bbb      	ldrb	r3, [r7, #14]
 80186d4:	3301      	adds	r3, #1
 80186d6:	73bb      	strb	r3, [r7, #14]
 80186d8:	7bba      	ldrb	r2, [r7, #14]
 80186da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186de:	429a      	cmp	r2, r3
 80186e0:	d3be      	bcc.n	8018660 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80186e2:	7bfb      	ldrb	r3, [r7, #15]
 80186e4:	3301      	adds	r3, #1
 80186e6:	73fb      	strb	r3, [r7, #15]
 80186e8:	7bfa      	ldrb	r2, [r7, #15]
 80186ea:	797b      	ldrb	r3, [r7, #5]
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d3b4      	bcc.n	801865a <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80186f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80186f2:	f000 f86c 	bl	80187ce <VL53L1_init_zone_config_histogram_bins>
 80186f6:	4603      	mov	r3, r0
 80186f8:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80186fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3714      	adds	r7, #20
 8018702:	46bd      	mov	sp, r7
 8018704:	bd90      	pop	{r4, r7, pc}

08018706 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8018706:	b580      	push	{r7, lr}
 8018708:	b084      	sub	sp, #16
 801870a:	af00      	add	r7, sp, #0
 801870c:	6078      	str	r0, [r7, #4]
 801870e:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018710:	2300      	movs	r3, #0
 8018712:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2205      	movs	r2, #5
 8018718:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	2204      	movs	r2, #4
 801871e:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	220f      	movs	r2, #15
 8018724:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	2207      	movs	r2, #7
 801872a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	2204      	movs	r2, #4
 8018730:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 8018732:	683b      	ldr	r3, [r7, #0]
 8018734:	2208      	movs	r2, #8
 8018736:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	220f      	movs	r2, #15
 801873c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	2207      	movs	r2, #7
 8018744:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	220c      	movs	r2, #12
 801874c:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	2208      	movs	r2, #8
 8018754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2207      	movs	r2, #7
 801875c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	220f      	movs	r2, #15
 8018764:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	2208      	movs	r2, #8
 801876c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	2204      	movs	r2, #4
 8018774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	2207      	movs	r2, #7
 801877c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	220f      	movs	r2, #15
 8018784:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	2208      	movs	r2, #8
 801878c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	220c      	movs	r2, #12
 8018794:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8018798:	683b      	ldr	r3, [r7, #0]
 801879a:	220f      	movs	r2, #15
 801879c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	220f      	movs	r2, #15
 80187a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	2208      	movs	r2, #8
 80187ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 80187b0:	683b      	ldr	r3, [r7, #0]
 80187b2:	2208      	movs	r2, #8
 80187b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80187b8:	6838      	ldr	r0, [r7, #0]
 80187ba:	f000 f808 	bl	80187ce <VL53L1_init_zone_config_histogram_bins>
 80187be:	4603      	mov	r3, r0
 80187c0:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80187c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}

080187ce <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80187ce:	b480      	push	{r7}
 80187d0:	b085      	sub	sp, #20
 80187d2:	af00      	add	r7, sp, #0
 80187d4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80187d6:	2300      	movs	r3, #0
 80187d8:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80187da:	2300      	movs	r3, #0
 80187dc:	73fb      	strb	r3, [r7, #15]
 80187de:	e008      	b.n	80187f2 <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80187e0:	7bfb      	ldrb	r3, [r7, #15]
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	4413      	add	r3, r2
 80187e6:	2201      	movs	r2, #1
 80187e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80187ec:	7bfb      	ldrb	r3, [r7, #15]
 80187ee:	3301      	adds	r3, #1
 80187f0:	73fb      	strb	r3, [r7, #15]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	7bfa      	ldrb	r2, [r7, #15]
 80187f8:	429a      	cmp	r2, r3
 80187fa:	d3f1      	bcc.n	80187e0 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80187fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8018800:	4618      	mov	r0, r3
 8018802:	3714      	adds	r7, #20
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	60b9      	str	r1, [r7, #8]
 8018816:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	68fa      	ldr	r2, [r7, #12]
 801881e:	8910      	ldrh	r0, [r2, #8]
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	b292      	uxth	r2, r2
 8018824:	68b9      	ldr	r1, [r7, #8]
 8018826:	4798      	blx	r3
 8018828:	4603      	mov	r3, r0
}
 801882a:	4618      	mov	r0, r3
 801882c:	3710      	adds	r7, #16
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}

08018832 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8018832:	b580      	push	{r7, lr}
 8018834:	b084      	sub	sp, #16
 8018836:	af00      	add	r7, sp, #0
 8018838:	60f8      	str	r0, [r7, #12]
 801883a:	60b9      	str	r1, [r7, #8]
 801883c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	691b      	ldr	r3, [r3, #16]
 8018842:	68fa      	ldr	r2, [r7, #12]
 8018844:	8910      	ldrh	r0, [r2, #8]
 8018846:	687a      	ldr	r2, [r7, #4]
 8018848:	b292      	uxth	r2, r2
 801884a:	68b9      	ldr	r1, [r7, #8]
 801884c:	4798      	blx	r3
 801884e:	4603      	mov	r3, r0
}
 8018850:	4618      	mov	r0, r3
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8018858:	b580      	push	{r7, lr}
 801885a:	b086      	sub	sp, #24
 801885c:	af00      	add	r7, sp, #0
 801885e:	60f8      	str	r0, [r7, #12]
 8018860:	607a      	str	r2, [r7, #4]
 8018862:	603b      	str	r3, [r7, #0]
 8018864:	460b      	mov	r3, r1
 8018866:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8018868:	2300      	movs	r3, #0
 801886a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	2bff      	cmp	r3, #255	; 0xff
 8018870:	d902      	bls.n	8018878 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8018872:	f06f 0303 	mvn.w	r3, #3
 8018876:	e01d      	b.n	80188b4 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8018878:	897b      	ldrh	r3, [r7, #10]
 801887a:	0a1b      	lsrs	r3, r3, #8
 801887c:	b29b      	uxth	r3, r3
 801887e:	b2da      	uxtb	r2, r3
 8018880:	4b0e      	ldr	r3, [pc, #56]	; (80188bc <VL53L1_WriteMulti+0x64>)
 8018882:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8018884:	897b      	ldrh	r3, [r7, #10]
 8018886:	b2da      	uxtb	r2, r3
 8018888:	4b0c      	ldr	r3, [pc, #48]	; (80188bc <VL53L1_WriteMulti+0x64>)
 801888a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 801888c:	683a      	ldr	r2, [r7, #0]
 801888e:	6879      	ldr	r1, [r7, #4]
 8018890:	480b      	ldr	r0, [pc, #44]	; (80188c0 <VL53L1_WriteMulti+0x68>)
 8018892:	f00c fdcf 	bl	8025434 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	3302      	adds	r3, #2
 801889a:	461a      	mov	r2, r3
 801889c:	4907      	ldr	r1, [pc, #28]	; (80188bc <VL53L1_WriteMulti+0x64>)
 801889e:	68f8      	ldr	r0, [r7, #12]
 80188a0:	f7ff ffb4 	bl	801880c <_I2CWrite>
 80188a4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d001      	beq.n	80188b0 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80188ac:	23f3      	movs	r3, #243	; 0xf3
 80188ae:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80188b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188b4:	4618      	mov	r0, r3
 80188b6:	3718      	adds	r7, #24
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	20009110 	.word	0x20009110
 80188c0:	20009112 	.word	0x20009112

080188c4 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b086      	sub	sp, #24
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	60f8      	str	r0, [r7, #12]
 80188cc:	607a      	str	r2, [r7, #4]
 80188ce:	603b      	str	r3, [r7, #0]
 80188d0:	460b      	mov	r3, r1
 80188d2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80188d4:	2300      	movs	r3, #0
 80188d6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80188d8:	897b      	ldrh	r3, [r7, #10]
 80188da:	0a1b      	lsrs	r3, r3, #8
 80188dc:	b29b      	uxth	r3, r3
 80188de:	b2da      	uxtb	r2, r3
 80188e0:	4b12      	ldr	r3, [pc, #72]	; (801892c <VL53L1_ReadMulti+0x68>)
 80188e2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80188e4:	897b      	ldrh	r3, [r7, #10]
 80188e6:	b2da      	uxtb	r2, r3
 80188e8:	4b10      	ldr	r3, [pc, #64]	; (801892c <VL53L1_ReadMulti+0x68>)
 80188ea:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80188ec:	2202      	movs	r2, #2
 80188ee:	490f      	ldr	r1, [pc, #60]	; (801892c <VL53L1_ReadMulti+0x68>)
 80188f0:	68f8      	ldr	r0, [r7, #12]
 80188f2:	f7ff ff8b 	bl	801880c <_I2CWrite>
 80188f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80188f8:	693b      	ldr	r3, [r7, #16]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d002      	beq.n	8018904 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80188fe:	23f3      	movs	r3, #243	; 0xf3
 8018900:	75fb      	strb	r3, [r7, #23]
        goto done;
 8018902:	e00c      	b.n	801891e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8018904:	683a      	ldr	r2, [r7, #0]
 8018906:	6879      	ldr	r1, [r7, #4]
 8018908:	68f8      	ldr	r0, [r7, #12]
 801890a:	f7ff ff92 	bl	8018832 <_I2CRead>
 801890e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d002      	beq.n	801891c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018916:	23f3      	movs	r3, #243	; 0xf3
 8018918:	75fb      	strb	r3, [r7, #23]
 801891a:	e000      	b.n	801891e <VL53L1_ReadMulti+0x5a>
    }
done:
 801891c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801891e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018922:	4618      	mov	r0, r3
 8018924:	3718      	adds	r7, #24
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	20009110 	.word	0x20009110

08018930 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	460b      	mov	r3, r1
 801893a:	807b      	strh	r3, [r7, #2]
 801893c:	4613      	mov	r3, r2
 801893e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8018940:	2300      	movs	r3, #0
 8018942:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8018944:	887b      	ldrh	r3, [r7, #2]
 8018946:	0a1b      	lsrs	r3, r3, #8
 8018948:	b29b      	uxth	r3, r3
 801894a:	b2da      	uxtb	r2, r3
 801894c:	4b0c      	ldr	r3, [pc, #48]	; (8018980 <VL53L1_WrByte+0x50>)
 801894e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8018950:	887b      	ldrh	r3, [r7, #2]
 8018952:	b2da      	uxtb	r2, r3
 8018954:	4b0a      	ldr	r3, [pc, #40]	; (8018980 <VL53L1_WrByte+0x50>)
 8018956:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8018958:	4a09      	ldr	r2, [pc, #36]	; (8018980 <VL53L1_WrByte+0x50>)
 801895a:	787b      	ldrb	r3, [r7, #1]
 801895c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801895e:	2203      	movs	r2, #3
 8018960:	4907      	ldr	r1, [pc, #28]	; (8018980 <VL53L1_WrByte+0x50>)
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7ff ff52 	bl	801880c <_I2CWrite>
 8018968:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d001      	beq.n	8018974 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018970:	23f3      	movs	r3, #243	; 0xf3
 8018972:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8018974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018978:	4618      	mov	r0, r3
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}
 8018980:	20009110 	.word	0x20009110

08018984 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	460b      	mov	r3, r1
 801898e:	807b      	strh	r3, [r7, #2]
 8018990:	4613      	mov	r3, r2
 8018992:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8018994:	2300      	movs	r3, #0
 8018996:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8018998:	887b      	ldrh	r3, [r7, #2]
 801899a:	0a1b      	lsrs	r3, r3, #8
 801899c:	b29b      	uxth	r3, r3
 801899e:	b2da      	uxtb	r2, r3
 80189a0:	4b10      	ldr	r3, [pc, #64]	; (80189e4 <VL53L1_WrWord+0x60>)
 80189a2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80189a4:	887b      	ldrh	r3, [r7, #2]
 80189a6:	b2da      	uxtb	r2, r3
 80189a8:	4b0e      	ldr	r3, [pc, #56]	; (80189e4 <VL53L1_WrWord+0x60>)
 80189aa:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80189ac:	883b      	ldrh	r3, [r7, #0]
 80189ae:	0a1b      	lsrs	r3, r3, #8
 80189b0:	b29b      	uxth	r3, r3
 80189b2:	b2da      	uxtb	r2, r3
 80189b4:	4b0b      	ldr	r3, [pc, #44]	; (80189e4 <VL53L1_WrWord+0x60>)
 80189b6:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80189b8:	883b      	ldrh	r3, [r7, #0]
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	4b09      	ldr	r3, [pc, #36]	; (80189e4 <VL53L1_WrWord+0x60>)
 80189be:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80189c0:	2204      	movs	r2, #4
 80189c2:	4908      	ldr	r1, [pc, #32]	; (80189e4 <VL53L1_WrWord+0x60>)
 80189c4:	6878      	ldr	r0, [r7, #4]
 80189c6:	f7ff ff21 	bl	801880c <_I2CWrite>
 80189ca:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d001      	beq.n	80189d6 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80189d2:	23f3      	movs	r3, #243	; 0xf3
 80189d4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80189d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3710      	adds	r7, #16
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	20009110 	.word	0x20009110

080189e8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b086      	sub	sp, #24
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	60f8      	str	r0, [r7, #12]
 80189f0:	460b      	mov	r3, r1
 80189f2:	607a      	str	r2, [r7, #4]
 80189f4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80189f6:	2300      	movs	r3, #0
 80189f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80189fa:	897b      	ldrh	r3, [r7, #10]
 80189fc:	0a1b      	lsrs	r3, r3, #8
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	b2da      	uxtb	r2, r3
 8018a02:	4b12      	ldr	r3, [pc, #72]	; (8018a4c <VL53L1_RdByte+0x64>)
 8018a04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8018a06:	897b      	ldrh	r3, [r7, #10]
 8018a08:	b2da      	uxtb	r2, r3
 8018a0a:	4b10      	ldr	r3, [pc, #64]	; (8018a4c <VL53L1_RdByte+0x64>)
 8018a0c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8018a0e:	2202      	movs	r2, #2
 8018a10:	490e      	ldr	r1, [pc, #56]	; (8018a4c <VL53L1_RdByte+0x64>)
 8018a12:	68f8      	ldr	r0, [r7, #12]
 8018a14:	f7ff fefa 	bl	801880c <_I2CWrite>
 8018a18:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8018a1a:	693b      	ldr	r3, [r7, #16]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d002      	beq.n	8018a26 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018a20:	23f3      	movs	r3, #243	; 0xf3
 8018a22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8018a24:	e00c      	b.n	8018a40 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8018a26:	2201      	movs	r2, #1
 8018a28:	6879      	ldr	r1, [r7, #4]
 8018a2a:	68f8      	ldr	r0, [r7, #12]
 8018a2c:	f7ff ff01 	bl	8018832 <_I2CRead>
 8018a30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d002      	beq.n	8018a3e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018a38:	23f3      	movs	r3, #243	; 0xf3
 8018a3a:	75fb      	strb	r3, [r7, #23]
 8018a3c:	e000      	b.n	8018a40 <VL53L1_RdByte+0x58>
    }
done:
 8018a3e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8018a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	3718      	adds	r7, #24
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	20009110 	.word	0x20009110

08018a50 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b086      	sub	sp, #24
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	460b      	mov	r3, r1
 8018a5a:	607a      	str	r2, [r7, #4]
 8018a5c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8018a62:	897b      	ldrh	r3, [r7, #10]
 8018a64:	0a1b      	lsrs	r3, r3, #8
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	b2da      	uxtb	r2, r3
 8018a6a:	4b18      	ldr	r3, [pc, #96]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018a6c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8018a6e:	897b      	ldrh	r3, [r7, #10]
 8018a70:	b2da      	uxtb	r2, r3
 8018a72:	4b16      	ldr	r3, [pc, #88]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018a74:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8018a76:	2202      	movs	r2, #2
 8018a78:	4914      	ldr	r1, [pc, #80]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018a7a:	68f8      	ldr	r0, [r7, #12]
 8018a7c:	f7ff fec6 	bl	801880c <_I2CWrite>
 8018a80:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8018a82:	693b      	ldr	r3, [r7, #16]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d002      	beq.n	8018a8e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018a88:	23f3      	movs	r3, #243	; 0xf3
 8018a8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8018a8c:	e017      	b.n	8018abe <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8018a8e:	2202      	movs	r2, #2
 8018a90:	490e      	ldr	r1, [pc, #56]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	f7ff fecd 	bl	8018832 <_I2CRead>
 8018a98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d002      	beq.n	8018aa6 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8018aa0:	23f3      	movs	r3, #243	; 0xf3
 8018aa2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8018aa4:	e00b      	b.n	8018abe <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8018aa6:	4b09      	ldr	r3, [pc, #36]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	021b      	lsls	r3, r3, #8
 8018aae:	b29a      	uxth	r2, r3
 8018ab0:	4b06      	ldr	r3, [pc, #24]	; (8018acc <VL53L1_RdWord+0x7c>)
 8018ab2:	785b      	ldrb	r3, [r3, #1]
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	4413      	add	r3, r2
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8018abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	3718      	adds	r7, #24
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	bf00      	nop
 8018acc:	20009110 	.word	0x20009110

08018ad0 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b084      	sub	sp, #16
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8018ada:	2300      	movs	r3, #0
 8018adc:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	695b      	ldr	r3, [r3, #20]
 8018ae2:	4798      	blx	r3
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8018aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3710      	adds	r7, #16
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}

08018af8 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	4619      	mov	r1, r3
 8018b06:	6878      	ldr	r0, [r7, #4]
 8018b08:	f000 f8d2 	bl	8018cb0 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8018b0c:	2300      	movs	r3, #0
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3708      	adds	r7, #8
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
	...

08018b18 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	4a07      	ldr	r2, [pc, #28]	; (8018b44 <VL53L1_WaitUs+0x2c>)
 8018b26:	fb82 1203 	smull	r1, r2, r2, r3
 8018b2a:	1192      	asrs	r2, r2, #6
 8018b2c:	17db      	asrs	r3, r3, #31
 8018b2e:	1ad3      	subs	r3, r2, r3
 8018b30:	4619      	mov	r1, r3
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f000 f8bc 	bl	8018cb0 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8018b38:	2300      	movs	r3, #0
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	10624dd3 	.word	0x10624dd3

08018b48 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8018b48:	b590      	push	{r4, r7, lr}
 8018b4a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8018b54:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8018b58:	6020      	str	r0, [r4, #0]
 8018b5a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8018b5e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8018b62:	6001      	str	r1, [r0, #0]
 8018b64:	4619      	mov	r1, r3
 8018b66:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018b6a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8018b6e:	801a      	strh	r2, [r3, #0]
 8018b70:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018b74:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8018b78:	460a      	mov	r2, r1
 8018b7a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8018b94:	2300      	movs	r3, #0
 8018b96:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8018ba0:	f107 0310 	add.w	r3, r7, #16
 8018ba4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8018ba8:	4940      	ldr	r1, [pc, #256]	; (8018cac <VL53L1_WaitValueMaskEx+0x164>)
 8018baa:	4618      	mov	r0, r3
 8018bac:	f00d faf4 	bl	8026198 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8018bb0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018bb4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018bb8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8018bbc:	4611      	mov	r1, r2
 8018bbe:	6818      	ldr	r0, [r3, #0]
 8018bc0:	f7ff ff86 	bl	8018ad0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8018bc4:	e04e      	b.n	8018c64 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8018bc6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d110      	bne.n	8018bf0 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8018bce:	f207 2213 	addw	r2, r7, #531	; 0x213
 8018bd2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018bd6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8018bda:	8819      	ldrh	r1, [r3, #0]
 8018bdc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018be0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8018be4:	6818      	ldr	r0, [r3, #0]
 8018be6:	f7ff feff 	bl	80189e8 <VL53L1_RdByte>
 8018bea:	4603      	mov	r3, r0
 8018bec:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8018bf0:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8018bf4:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8018c00:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8018c04:	7812      	ldrb	r2, [r2, #0]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d102      	bne.n	8018c10 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8018c10:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d114      	bne.n	8018c42 <VL53L1_WaitValueMaskEx+0xfa>
 8018c18:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d110      	bne.n	8018c42 <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8018c20:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d00c      	beq.n	8018c42 <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8018c28:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8018c2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018c30:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8018c34:	4611      	mov	r1, r2
 8018c36:	6818      	ldr	r0, [r3, #0]
 8018c38:	f7ff ff5e 	bl	8018af8 <VL53L1_WaitMs>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8018c42:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8018c46:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018c4a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8018c4e:	4611      	mov	r1, r2
 8018c50:	6818      	ldr	r0, [r3, #0]
 8018c52:	f7ff ff3d 	bl	8018ad0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8018c56:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8018c5a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8018c5e:	1ad3      	subs	r3, r2, r3
 8018c60:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8018c64:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d10c      	bne.n	8018c86 <VL53L1_WaitValueMaskEx+0x13e>
 8018c6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8018c70:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8018c74:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d203      	bcs.n	8018c86 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8018c7e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d09f      	beq.n	8018bc6 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8018c86:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d106      	bne.n	8018c9c <VL53L1_WaitValueMaskEx+0x154>
 8018c8e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d102      	bne.n	8018c9c <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8018c96:	23f9      	movs	r3, #249	; 0xf9
 8018c98:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8018c9c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd90      	pop	{r4, r7, pc}
 8018caa:	bf00      	nop
 8018cac:	080285d8 	.word	0x080285d8

08018cb0 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b084      	sub	sp, #16
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	695b      	ldr	r3, [r3, #20]
 8018cbe:	4798      	blx	r3
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8018cc4:	bf00      	nop
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	695b      	ldr	r3, [r3, #20]
 8018cca:	4798      	blx	r3
 8018ccc:	4603      	mov	r3, r0
 8018cce:	461a      	mov	r2, r3
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	1ad3      	subs	r3, r2, r3
 8018cd4:	683a      	ldr	r2, [r7, #0]
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	d8f5      	bhi.n	8018cc6 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8018cda:	2300      	movs	r3, #0
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	3710      	adds	r7, #16
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b08c      	sub	sp, #48	; 0x30
 8018ce8:	af06      	add	r7, sp, #24
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	607a      	str	r2, [r7, #4]
 8018cf0:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8018cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cf8:	9304      	str	r3, [sp, #16]
 8018cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cfc:	9303      	str	r3, [sp, #12]
 8018cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d00:	9302      	str	r3, [sp, #8]
 8018d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d04:	9301      	str	r3, [sp, #4]
 8018d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	6a3b      	ldr	r3, [r7, #32]
 8018d0c:	683a      	ldr	r2, [r7, #0]
 8018d0e:	6879      	ldr	r1, [r7, #4]
 8018d10:	68b8      	ldr	r0, [r7, #8]
 8018d12:	f7fc fefb 	bl	8015b0c <VL53L1_hist_process_data>
 8018d16:	4603      	mov	r3, r0
 8018d18:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8018d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3718      	adds	r7, #24
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}

08018d26 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8018d26:	b580      	push	{r7, lr}
 8018d28:	b084      	sub	sp, #16
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	6078      	str	r0, [r7, #4]
 8018d2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d103      	bne.n	8018d3e <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8018d36:	f06f 0301 	mvn.w	r3, #1
 8018d3a:	60fb      	str	r3, [r7, #12]
 8018d3c:	e023      	b.n	8018d86 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	685a      	ldr	r2, [r3, #4]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	891a      	ldrh	r2, [r3, #8]
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	68da      	ldr	r2, [r3, #12]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	691a      	ldr	r2, [r3, #16]
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	695a      	ldr	r2, [r3, #20]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d004      	beq.n	8018d80 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	4798      	blx	r3
 8018d7c:	60f8      	str	r0, [r7, #12]
 8018d7e:	e002      	b.n	8018d86 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8018d80:	f04f 33ff 	mov.w	r3, #4294967295
 8018d84:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8018d86:	68fb      	ldr	r3, [r7, #12]
}
 8018d88:	4618      	mov	r0, r3
 8018d8a:	3710      	adds	r7, #16
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	bd80      	pop	{r7, pc}

08018d90 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b084      	sub	sp, #16
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018d9e:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d003      	beq.n	8018dae <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8018da6:	f04f 33ff 	mov.w	r3, #4294967295
 8018daa:	60fb      	str	r3, [r7, #12]
 8018dac:	e04d      	b.n	8018e4a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8018dae:	6878      	ldr	r0, [r7, #4]
 8018db0:	f7ed f8d1 	bl	8005f56 <VL53L1_WaitDeviceBooted>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d003      	beq.n	8018dc2 <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8018dba:	f04f 33ff 	mov.w	r3, #4294967295
 8018dbe:	60fb      	str	r3, [r7, #12]
 8018dc0:	e043      	b.n	8018e4a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f7ed f847 	bl	8005e56 <VL53L1_DataInit>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d003      	beq.n	8018dd6 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8018dce:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd2:	60fb      	str	r3, [r7, #12]
 8018dd4:	e039      	b.n	8018e4a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f7ed f892 	bl	8005f00 <VL53L1_StaticInit>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d003      	beq.n	8018dea <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8018de2:	f04f 33ff 	mov.w	r3, #4294967295
 8018de6:	60fb      	str	r3, [r7, #12]
 8018de8:	e02f      	b.n	8018e4a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f7ee fe8a 	bl	8007b04 <VL53L1_PerformRefSpadManagement>
 8018df0:	4603      	mov	r3, r0
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d003      	beq.n	8018dfe <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8018df6:	f04f 33ff 	mov.w	r3, #4294967295
 8018dfa:	60fb      	str	r3, [r7, #12]
 8018dfc:	e025      	b.n	8018e4a <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e04:	2200      	movs	r2, #0
 8018e06:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e10:	2200      	movs	r2, #0
 8018e12:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e28:	2200      	movs	r2, #0
 8018e2a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e34:	2200      	movs	r2, #0
 8018e36:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e40:	2201      	movs	r2, #1
 8018e42:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8018e46:	2300      	movs	r3, #0
 8018e48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	3710      	adds	r7, #16
 8018e50:	46bd      	mov	sp, r7
 8018e52:	bd80      	pop	{r7, pc}

08018e54 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b084      	sub	sp, #16
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8018e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e60:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e68:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8018e6c:	2b01      	cmp	r3, #1
 8018e6e:	d111      	bne.n	8018e94 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	685b      	ldr	r3, [r3, #4]
 8018e74:	4798      	blx	r3
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d003      	beq.n	8018e84 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8018e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e80:	60fb      	str	r3, [r7, #12]
 8018e82:	e007      	b.n	8018e94 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8018e84:	2300      	movs	r3, #0
 8018e86:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018e8e:	2200      	movs	r2, #0
 8018e90:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8018e94:	68fb      	ldr	r3, [r7, #12]
}
 8018e96:	4618      	mov	r0, r3
 8018e98:	3710      	adds	r7, #16
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	bd80      	pop	{r7, pc}

08018e9e <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8018e9e:	b580      	push	{r7, lr}
 8018ea0:	b084      	sub	sp, #16
 8018ea2:	af00      	add	r7, sp, #0
 8018ea4:	6078      	str	r0, [r7, #4]
 8018ea6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d002      	beq.n	8018eb4 <VL53L1CB_ReadID+0x16>
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d103      	bne.n	8018ebc <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8018eb4:	f06f 0301 	mvn.w	r3, #1
 8018eb8:	60fb      	str	r3, [r7, #12]
 8018eba:	e00a      	b.n	8018ed2 <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8018ec2:	683a      	ldr	r2, [r7, #0]
 8018ec4:	f240 110f 	movw	r1, #271	; 0x10f
 8018ec8:	6878      	ldr	r0, [r7, #4]
 8018eca:	f7ff fdc1 	bl	8018a50 <VL53L1_RdWord>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3710      	adds	r7, #16
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}

08018edc <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8018edc:	b480      	push	{r7}
 8018ede:	b085      	sub	sp, #20
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d002      	beq.n	8018ef2 <VL53L1CB_GetCapabilities+0x16>
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d103      	bne.n	8018efa <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8018ef2:	f06f 0301 	mvn.w	r3, #1
 8018ef6:	60fb      	str	r3, [r7, #12]
 8018ef8:	e00d      	b.n	8018f16 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	2201      	movs	r2, #1
 8018efe:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	2204      	movs	r2, #4
 8018f04:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	2201      	movs	r2, #1
 8018f0a:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018f16:	68fb      	ldr	r3, [r7, #12]
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	3714      	adds	r7, #20
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr

08018f24 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d009      	beq.n	8018f48 <VL53L1CB_ConfigProfile+0x24>
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d006      	beq.n	8018f48 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	781b      	ldrb	r3, [r3, #0]
 8018f3e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8018f40:	7afb      	ldrb	r3, [r7, #11]
 8018f42:	2b01      	cmp	r3, #1
 8018f44:	d103      	bne.n	8018f4e <VL53L1CB_ConfigProfile+0x2a>
 8018f46:	e00c      	b.n	8018f62 <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8018f48:	f06f 0301 	mvn.w	r3, #1
 8018f4c:	e043      	b.n	8018fd6 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8018f4e:	7afb      	ldrb	r3, [r7, #11]
 8018f50:	2b02      	cmp	r3, #2
 8018f52:	d006      	beq.n	8018f62 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8018f54:	7afb      	ldrb	r3, [r7, #11]
 8018f56:	2b03      	cmp	r3, #3
 8018f58:	d003      	beq.n	8018f62 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8018f5a:	f06f 0301 	mvn.w	r3, #1
 8018f5e:	60fb      	str	r3, [r7, #12]
 8018f60:	e038      	b.n	8018fd4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8018f62:	7afb      	ldrb	r3, [r7, #11]
 8018f64:	4619      	mov	r1, r3
 8018f66:	6878      	ldr	r0, [r7, #4]
 8018f68:	f7ed f970 	bl	800624c <VL53L1_SetDistanceMode>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d003      	beq.n	8018f7a <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8018f72:	f04f 33ff 	mov.w	r3, #4294967295
 8018f76:	60fb      	str	r3, [r7, #12]
 8018f78:	e02c      	b.n	8018fd4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8018f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018f82:	fb02 f303 	mul.w	r3, r2, r3
 8018f86:	4619      	mov	r1, r3
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f7ed f9ed 	bl	8006368 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d003      	beq.n	8018f9c <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8018f94:	f04f 33ff 	mov.w	r3, #4294967295
 8018f98:	60fb      	str	r3, [r7, #12]
 8018f9a:	e01b      	b.n	8018fd4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	68db      	ldr	r3, [r3, #12]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	bf14      	ite	ne
 8018fa4:	2301      	movne	r3, #1
 8018fa6:	2300      	moveq	r3, #0
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	461a      	mov	r2, r3
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018fb2:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	691b      	ldr	r3, [r3, #16]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	bf14      	ite	ne
 8018fbe:	2301      	movne	r3, #1
 8018fc0:	2300      	moveq	r3, #0
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	461a      	mov	r2, r3
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018fcc:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018fd4:	68fb      	ldr	r3, [r7, #12]
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}

08018fde <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8018fde:	b580      	push	{r7, lr}
 8018fe0:	b094      	sub	sp, #80	; 0x50
 8018fe2:	af00      	add	r7, sp, #0
 8018fe4:	6078      	str	r0, [r7, #4]
 8018fe6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d002      	beq.n	8018ff4 <VL53L1CB_ConfigROI+0x16>
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d103      	bne.n	8018ffc <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8018ff4:	f06f 0301 	mvn.w	r3, #1
 8018ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018ffa:	e01c      	b.n	8019036 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8018ffc:	2301      	movs	r3, #1
 8018ffe:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	789b      	ldrb	r3, [r3, #2]
 8019004:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	78db      	ldrb	r3, [r3, #3]
 801900a:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 801900c:	683b      	ldr	r3, [r7, #0]
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	785b      	ldrb	r3, [r3, #1]
 8019016:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8019018:	f107 0308 	add.w	r3, r7, #8
 801901c:	4619      	mov	r1, r3
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7ed fca6 	bl	8006970 <VL53L1_SetROI>
 8019024:	4603      	mov	r3, r0
 8019026:	2b00      	cmp	r3, #0
 8019028:	d003      	beq.n	8019032 <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 801902a:	f04f 33ff 	mov.w	r3, #4294967295
 801902e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019030:	e001      	b.n	8019036 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8019032:	2300      	movs	r3, #0
 8019034:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8019036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8019038:	4618      	mov	r0, r3
 801903a:	3750      	adds	r7, #80	; 0x50
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}

08019040 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8019040:	b480      	push	{r7}
 8019042:	b083      	sub	sp, #12
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
 8019048:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 801904a:	f06f 0303 	mvn.w	r3, #3
}
 801904e:	4618      	mov	r0, r3
 8019050:	370c      	adds	r7, #12
 8019052:	46bd      	mov	sp, r7
 8019054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019058:	4770      	bx	lr

0801905a <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 801905a:	b580      	push	{r7, lr}
 801905c:	b084      	sub	sp, #16
 801905e:	af00      	add	r7, sp, #0
 8019060:	6078      	str	r0, [r7, #4]
 8019062:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d002      	beq.n	8019070 <VL53L1CB_GetDistance+0x16>
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d103      	bne.n	8019078 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8019070:	f06f 0301 	mvn.w	r3, #1
 8019074:	60fb      	str	r3, [r7, #12]
 8019076:	e03a      	b.n	80190ee <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801907e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8019082:	2b00      	cmp	r3, #0
 8019084:	d103      	bne.n	801908e <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8019086:	f04f 33ff 	mov.w	r3, #4294967295
 801908a:	60fb      	str	r3, [r7, #12]
 801908c:	e02f      	b.n	80190ee <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019094:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8019098:	2b01      	cmp	r3, #1
 801909a:	d106      	bne.n	80190aa <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 801909c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f000 f92b 	bl	80192fc <vl53l1cb_poll_for_measurement>
 80190a6:	60f8      	str	r0, [r7, #12]
 80190a8:	e004      	b.n	80190b4 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 80190aa:	2100      	movs	r1, #0
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	f000 f925 	bl	80192fc <vl53l1cb_poll_for_measurement>
 80190b2:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d119      	bne.n	80190ee <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 80190ba:	6839      	ldr	r1, [r7, #0]
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f000 f94b 	bl	8019358 <vl53l1cb_get_result>
 80190c2:	4603      	mov	r3, r0
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d003      	beq.n	80190d0 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 80190c8:	f04f 33ff 	mov.w	r3, #4294967295
 80190cc:	60fb      	str	r3, [r7, #12]
 80190ce:	e00e      	b.n	80190ee <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80190d6:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80190da:	2b01      	cmp	r3, #1
 80190dc:	d105      	bne.n	80190ea <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80190de:	6878      	ldr	r0, [r7, #4]
 80190e0:	f7ed fdde 	bl	8006ca0 <VL53L1_ClearInterruptAndStartMeasurement>
 80190e4:	4603      	mov	r3, r0
 80190e6:	60fb      	str	r3, [r7, #12]
 80190e8:	e001      	b.n	80190ee <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 80190ea:	2300      	movs	r3, #0
 80190ec:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 80190ee:	68fb      	ldr	r3, [r7, #12]
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	3710      	adds	r7, #16
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}

080190f8 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d103      	bne.n	8019110 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8019108:	f06f 0301 	mvn.w	r3, #1
 801910c:	60fb      	str	r3, [r7, #12]
 801910e:	e068      	b.n	80191e2 <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019116:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801911a:	2b01      	cmp	r3, #1
 801911c:	d103      	bne.n	8019126 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 801911e:	f04f 33ff 	mov.w	r3, #4294967295
 8019122:	60fb      	str	r3, [r7, #12]
 8019124:	e05d      	b.n	80191e2 <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f7ed fcf6 	bl	8006b18 <VL53L1_StartMeasurement>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	d154      	bne.n	80191dc <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019138:	2201      	movs	r2, #1
 801913a:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801913e:	2300      	movs	r3, #0
 8019140:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	3b01      	subs	r3, #1
 8019146:	2b03      	cmp	r3, #3
 8019148:	d83e      	bhi.n	80191c8 <VL53L1CB_Start+0xd0>
 801914a:	a201      	add	r2, pc, #4	; (adr r2, 8019150 <VL53L1CB_Start+0x58>)
 801914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019150:	08019161 	.word	0x08019161
 8019154:	0801917b 	.word	0x0801917b
 8019158:	08019195 	.word	0x08019195
 801915c:	080191af 	.word	0x080191af
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019166:	2201      	movs	r2, #1
 8019168:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019172:	2201      	movs	r2, #1
 8019174:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8019178:	e033      	b.n	80191e2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019180:	2200      	movs	r2, #0
 8019182:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801918c:	2201      	movs	r2, #1
 801918e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8019192:	e026      	b.n	80191e2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801919a:	2201      	movs	r2, #1
 801919c:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191a6:	2200      	movs	r2, #0
 80191a8:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80191ac:	e019      	b.n	80191e2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191b4:	2200      	movs	r2, #0
 80191b6:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191c0:	2200      	movs	r2, #0
 80191c2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80191c6:	e00c      	b.n	80191e2 <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191ce:	2200      	movs	r2, #0
 80191d0:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 80191d4:	f06f 0301 	mvn.w	r3, #1
 80191d8:	60fb      	str	r3, [r7, #12]
      break;
 80191da:	e002      	b.n	80191e2 <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80191dc:	f04f 33ff 	mov.w	r3, #4294967295
 80191e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80191e2:	68fb      	ldr	r3, [r7, #12]
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3710      	adds	r7, #16
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d103      	bne.n	8019202 <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80191fa:	f06f 0301 	mvn.w	r3, #1
 80191fe:	60fb      	str	r3, [r7, #12]
 8019200:	e01c      	b.n	801923c <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019208:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801920c:	2b00      	cmp	r3, #0
 801920e:	d103      	bne.n	8019218 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8019210:	f04f 33ff 	mov.w	r3, #4294967295
 8019214:	60fb      	str	r3, [r7, #12]
 8019216:	e011      	b.n	801923c <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8019218:	6878      	ldr	r0, [r7, #4]
 801921a:	f7ed fd1d 	bl	8006c58 <VL53L1_StopMeasurement>
 801921e:	4603      	mov	r3, r0
 8019220:	2b00      	cmp	r3, #0
 8019222:	d108      	bne.n	8019236 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801922a:	2200      	movs	r2, #0
 801922c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8019230:	2300      	movs	r3, #0
 8019232:	60fb      	str	r3, [r7, #12]
 8019234:	e002      	b.n	801923c <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8019236:	f04f 33ff 	mov.w	r3, #4294967295
 801923a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801923c:	68fb      	ldr	r3, [r7, #12]
}
 801923e:	4618      	mov	r0, r3
 8019240:	3710      	adds	r7, #16
 8019242:	46bd      	mov	sp, r7
 8019244:	bd80      	pop	{r7, pc}

08019246 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8019246:	b580      	push	{r7, lr}
 8019248:	b084      	sub	sp, #16
 801924a:	af00      	add	r7, sp, #0
 801924c:	6078      	str	r0, [r7, #4]
 801924e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d103      	bne.n	801925e <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8019256:	f06f 0301 	mvn.w	r3, #1
 801925a:	60fb      	str	r3, [r7, #12]
 801925c:	e012      	b.n	8019284 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	b2db      	uxtb	r3, r3
 8019262:	4619      	mov	r1, r3
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f7ec fdcf 	bl	8005e08 <VL53L1_SetDeviceAddress>
 801926a:	4603      	mov	r3, r0
 801926c:	2b00      	cmp	r3, #0
 801926e:	d003      	beq.n	8019278 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8019270:	f04f 33ff 	mov.w	r3, #4294967295
 8019274:	60fb      	str	r3, [r7, #12]
 8019276:	e005      	b.n	8019284 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	b29a      	uxth	r2, r3
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8019280:	2300      	movs	r3, #0
 8019282:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8019284:	68fb      	ldr	r3, [r7, #12]
}
 8019286:	4618      	mov	r0, r3
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 801928e:	b480      	push	{r7}
 8019290:	b085      	sub	sp, #20
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d002      	beq.n	80192a4 <VL53L1CB_GetAddress+0x16>
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d103      	bne.n	80192ac <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80192a4:	f06f 0301 	mvn.w	r3, #1
 80192a8:	60fb      	str	r3, [r7, #12]
 80192aa:	e006      	b.n	80192ba <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	891b      	ldrh	r3, [r3, #8]
 80192b0:	461a      	mov	r2, r3
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 80192b6:	2300      	movs	r3, #0
 80192b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80192ba:	68fb      	ldr	r3, [r7, #12]
}
 80192bc:	4618      	mov	r0, r3
 80192be:	3714      	adds	r7, #20
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr

080192c8 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 80192c8:	b480      	push	{r7}
 80192ca:	b083      	sub	sp, #12
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
 80192d0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80192d2:	f06f 0303 	mvn.w	r3, #3
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	370c      	adds	r7, #12
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr

080192e2 <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 80192e2:	b480      	push	{r7}
 80192e4:	b083      	sub	sp, #12
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
 80192ea:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80192ec:	f06f 0303 	mvn.w	r3, #3
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	370c      	adds	r7, #12
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr

080192fc <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b084      	sub	sp, #16
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8019306:	2300      	movs	r3, #0
 8019308:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d102      	bne.n	8019316 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8019310:	f06f 0301 	mvn.w	r3, #1
 8019314:	e01b      	b.n	801934e <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	695b      	ldr	r3, [r3, #20]
 801931a:	4798      	blx	r3
 801931c:	4603      	mov	r3, r0
 801931e:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8019320:	f107 030b 	add.w	r3, r7, #11
 8019324:	4619      	mov	r1, r3
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f7ed fcd0 	bl	8006ccc <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 801932c:	7afb      	ldrb	r3, [r7, #11]
 801932e:	2b01      	cmp	r3, #1
 8019330:	d101      	bne.n	8019336 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8019332:	2300      	movs	r3, #0
 8019334:	e00b      	b.n	801934e <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	695b      	ldr	r3, [r3, #20]
 801933a:	4798      	blx	r3
 801933c:	4603      	mov	r3, r0
 801933e:	461a      	mov	r2, r3
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	1ad3      	subs	r3, r2, r3
 8019344:	683a      	ldr	r2, [r7, #0]
 8019346:	429a      	cmp	r2, r3
 8019348:	d8ea      	bhi.n	8019320 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 801934a:	f06f 0302 	mvn.w	r3, #2
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}
	...

08019358 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8019358:	b590      	push	{r4, r7, lr}
 801935a:	b089      	sub	sp, #36	; 0x24
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d002      	beq.n	801936e <vl53l1cb_get_result+0x16>
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d103      	bne.n	8019376 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801936e:	f06f 0301 	mvn.w	r3, #1
 8019372:	61fb      	str	r3, [r7, #28]
 8019374:	e100      	b.n	8019578 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8019376:	4983      	ldr	r1, [pc, #524]	; (8019584 <vl53l1cb_get_result+0x22c>)
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	f7ee fb85 	bl	8007a88 <VL53L1_GetMultiRangingData>
 801937e:	4603      	mov	r3, r0
 8019380:	2b00      	cmp	r3, #0
 8019382:	d003      	beq.n	801938c <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 8019384:	f04f 33ff 	mov.w	r3, #4294967295
 8019388:	61fb      	str	r3, [r7, #28]
 801938a:	e0f5      	b.n	8019578 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801938c:	2300      	movs	r3, #0
 801938e:	76fb      	strb	r3, [r7, #27]
 8019390:	e0ec      	b.n	801956c <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8019392:	4b7c      	ldr	r3, [pc, #496]	; (8019584 <vl53l1cb_get_result+0x22c>)
 8019394:	799b      	ldrb	r3, [r3, #6]
 8019396:	7efa      	ldrb	r2, [r7, #27]
 8019398:	4618      	mov	r0, r3
 801939a:	6839      	ldr	r1, [r7, #0]
 801939c:	4613      	mov	r3, r2
 801939e:	011b      	lsls	r3, r3, #4
 80193a0:	4413      	add	r3, r2
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	440b      	add	r3, r1
 80193a6:	3304      	adds	r3, #4
 80193a8:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80193aa:	2300      	movs	r3, #0
 80193ac:	76bb      	strb	r3, [r7, #26]
 80193ae:	e0d4      	b.n	801955a <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80193b0:	7eba      	ldrb	r2, [r7, #26]
 80193b2:	4974      	ldr	r1, [pc, #464]	; (8019584 <vl53l1cb_get_result+0x22c>)
 80193b4:	4613      	mov	r3, r2
 80193b6:	00db      	lsls	r3, r3, #3
 80193b8:	1a9b      	subs	r3, r3, r2
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	440b      	add	r3, r1
 80193be:	331c      	adds	r3, #28
 80193c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	da0b      	bge.n	80193e0 <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80193c8:	7efa      	ldrb	r2, [r7, #27]
 80193ca:	7eb8      	ldrb	r0, [r7, #26]
 80193cc:	6839      	ldr	r1, [r7, #0]
 80193ce:	4613      	mov	r3, r2
 80193d0:	011b      	lsls	r3, r3, #4
 80193d2:	4413      	add	r3, r2
 80193d4:	4403      	add	r3, r0
 80193d6:	009b      	lsls	r3, r3, #2
 80193d8:	440b      	add	r3, r1
 80193da:	2200      	movs	r2, #0
 80193dc:	609a      	str	r2, [r3, #8]
 80193de:	e014      	b.n	801940a <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80193e0:	7eba      	ldrb	r2, [r7, #26]
 80193e2:	4968      	ldr	r1, [pc, #416]	; (8019584 <vl53l1cb_get_result+0x22c>)
 80193e4:	4613      	mov	r3, r2
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	1a9b      	subs	r3, r3, r2
 80193ea:	009b      	lsls	r3, r3, #2
 80193ec:	440b      	add	r3, r1
 80193ee:	331c      	adds	r3, #28
 80193f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193f4:	7efa      	ldrb	r2, [r7, #27]
 80193f6:	7eb8      	ldrb	r0, [r7, #26]
 80193f8:	461c      	mov	r4, r3
 80193fa:	6839      	ldr	r1, [r7, #0]
 80193fc:	4613      	mov	r3, r2
 80193fe:	011b      	lsls	r3, r3, #4
 8019400:	4413      	add	r3, r2
 8019402:	4403      	add	r3, r0
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	440b      	add	r3, r1
 8019408:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019410:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8019414:	2b01      	cmp	r3, #1
 8019416:	d132      	bne.n	801947e <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8019418:	7eba      	ldrb	r2, [r7, #26]
 801941a:	495a      	ldr	r1, [pc, #360]	; (8019584 <vl53l1cb_get_result+0x22c>)
 801941c:	4613      	mov	r3, r2
 801941e:	00db      	lsls	r3, r3, #3
 8019420:	1a9b      	subs	r3, r3, r2
 8019422:	009b      	lsls	r3, r3, #2
 8019424:	440b      	add	r3, r1
 8019426:	3314      	adds	r3, #20
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	ee07 3a90 	vmov	s15, r3
 801942e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019432:	eddf 6a55 	vldr	s13, [pc, #340]	; 8019588 <vl53l1cb_get_result+0x230>
 8019436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801943a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 801958c <vl53l1cb_get_result+0x234>
 801943e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019442:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8019446:	4b4f      	ldr	r3, [pc, #316]	; (8019584 <vl53l1cb_get_result+0x22c>)
 8019448:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 801944c:	0a1b      	lsrs	r3, r3, #8
 801944e:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8019450:	8a7b      	ldrh	r3, [r7, #18]
 8019452:	ee07 3a90 	vmov	s15, r3
 8019456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801945a:	7efa      	ldrb	r2, [r7, #27]
 801945c:	7eb8      	ldrb	r0, [r7, #26]
 801945e:	edd7 6a05 	vldr	s13, [r7, #20]
 8019462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019466:	6839      	ldr	r1, [r7, #0]
 8019468:	4613      	mov	r3, r2
 801946a:	011b      	lsls	r3, r3, #4
 801946c:	4413      	add	r3, r2
 801946e:	4403      	add	r3, r0
 8019470:	3308      	adds	r3, #8
 8019472:	009b      	lsls	r3, r3, #2
 8019474:	440b      	add	r3, r1
 8019476:	3308      	adds	r3, #8
 8019478:	edc3 7a00 	vstr	s15, [r3]
 801947c:	e00d      	b.n	801949a <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 801947e:	7efa      	ldrb	r2, [r7, #27]
 8019480:	7eb8      	ldrb	r0, [r7, #26]
 8019482:	6839      	ldr	r1, [r7, #0]
 8019484:	4613      	mov	r3, r2
 8019486:	011b      	lsls	r3, r3, #4
 8019488:	4413      	add	r3, r2
 801948a:	4403      	add	r3, r0
 801948c:	3308      	adds	r3, #8
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	440b      	add	r3, r1
 8019492:	3308      	adds	r3, #8
 8019494:	f04f 0200 	mov.w	r2, #0
 8019498:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80194a0:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d132      	bne.n	801950e <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80194a8:	7eba      	ldrb	r2, [r7, #26]
 80194aa:	4936      	ldr	r1, [pc, #216]	; (8019584 <vl53l1cb_get_result+0x22c>)
 80194ac:	4613      	mov	r3, r2
 80194ae:	00db      	lsls	r3, r3, #3
 80194b0:	1a9b      	subs	r3, r3, r2
 80194b2:	009b      	lsls	r3, r3, #2
 80194b4:	440b      	add	r3, r1
 80194b6:	3310      	adds	r3, #16
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	ee07 3a90 	vmov	s15, r3
 80194be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80194c2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8019588 <vl53l1cb_get_result+0x230>
 80194c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80194ca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801958c <vl53l1cb_get_result+0x234>
 80194ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80194d2:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80194d6:	4b2b      	ldr	r3, [pc, #172]	; (8019584 <vl53l1cb_get_result+0x22c>)
 80194d8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80194dc:	0a1b      	lsrs	r3, r3, #8
 80194de:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80194e0:	8a7b      	ldrh	r3, [r7, #18]
 80194e2:	ee07 3a90 	vmov	s15, r3
 80194e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80194ea:	7efa      	ldrb	r2, [r7, #27]
 80194ec:	7eb8      	ldrb	r0, [r7, #26]
 80194ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80194f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80194f6:	6839      	ldr	r1, [r7, #0]
 80194f8:	4613      	mov	r3, r2
 80194fa:	011b      	lsls	r3, r3, #4
 80194fc:	4413      	add	r3, r2
 80194fe:	4403      	add	r3, r0
 8019500:	330c      	adds	r3, #12
 8019502:	009b      	lsls	r3, r3, #2
 8019504:	440b      	add	r3, r1
 8019506:	3308      	adds	r3, #8
 8019508:	edc3 7a00 	vstr	s15, [r3]
 801950c:	e00d      	b.n	801952a <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 801950e:	7efa      	ldrb	r2, [r7, #27]
 8019510:	7eb8      	ldrb	r0, [r7, #26]
 8019512:	6839      	ldr	r1, [r7, #0]
 8019514:	4613      	mov	r3, r2
 8019516:	011b      	lsls	r3, r3, #4
 8019518:	4413      	add	r3, r2
 801951a:	4403      	add	r3, r0
 801951c:	330c      	adds	r3, #12
 801951e:	009b      	lsls	r3, r3, #2
 8019520:	440b      	add	r3, r1
 8019522:	3308      	adds	r3, #8
 8019524:	f04f 0200 	mov.w	r2, #0
 8019528:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 801952a:	7eba      	ldrb	r2, [r7, #26]
 801952c:	4915      	ldr	r1, [pc, #84]	; (8019584 <vl53l1cb_get_result+0x22c>)
 801952e:	4613      	mov	r3, r2
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	1a9b      	subs	r3, r3, r2
 8019534:	009b      	lsls	r3, r3, #2
 8019536:	440b      	add	r3, r1
 8019538:	331f      	adds	r3, #31
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	7efa      	ldrb	r2, [r7, #27]
 801953e:	7eb8      	ldrb	r0, [r7, #26]
 8019540:	461c      	mov	r4, r3
 8019542:	6839      	ldr	r1, [r7, #0]
 8019544:	4613      	mov	r3, r2
 8019546:	011b      	lsls	r3, r3, #4
 8019548:	4413      	add	r3, r2
 801954a:	4403      	add	r3, r0
 801954c:	3304      	adds	r3, #4
 801954e:	009b      	lsls	r3, r3, #2
 8019550:	440b      	add	r3, r1
 8019552:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8019554:	7ebb      	ldrb	r3, [r7, #26]
 8019556:	3301      	adds	r3, #1
 8019558:	76bb      	strb	r3, [r7, #26]
 801955a:	4b0a      	ldr	r3, [pc, #40]	; (8019584 <vl53l1cb_get_result+0x22c>)
 801955c:	799b      	ldrb	r3, [r3, #6]
 801955e:	7eba      	ldrb	r2, [r7, #26]
 8019560:	429a      	cmp	r2, r3
 8019562:	f4ff af25 	bcc.w	80193b0 <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8019566:	7efb      	ldrb	r3, [r7, #27]
 8019568:	3301      	adds	r3, #1
 801956a:	76fb      	strb	r3, [r7, #27]
 801956c:	7efb      	ldrb	r3, [r7, #27]
 801956e:	2b00      	cmp	r3, #0
 8019570:	f43f af0f 	beq.w	8019392 <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 8019574:	2300      	movs	r3, #0
 8019576:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8019578:	69fb      	ldr	r3, [r7, #28]
}
 801957a:	4618      	mov	r0, r3
 801957c:	3724      	adds	r7, #36	; 0x24
 801957e:	46bd      	mov	sp, r7
 8019580:	bd90      	pop	{r4, r7, pc}
 8019582:	bf00      	nop
 8019584:	20009210 	.word	0x20009210
 8019588:	47800000 	.word	0x47800000
 801958c:	447a0000 	.word	0x447a0000

08019590 <LL_AHB2_GRP1_EnableClock>:
{
 8019590:	b480      	push	{r7}
 8019592:	b085      	sub	sp, #20
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801959c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801959e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	4313      	orrs	r3, r2
 80195a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80195a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	4013      	ands	r3, r2
 80195b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80195b4:	68fb      	ldr	r3, [r7, #12]
}
 80195b6:	bf00      	nop
 80195b8:	3714      	adds	r7, #20
 80195ba:	46bd      	mov	sp, r7
 80195bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c0:	4770      	bx	lr

080195c2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80195c2:	b480      	push	{r7}
 80195c4:	b085      	sub	sp, #20
 80195c6:	af00      	add	r7, sp, #0
 80195c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80195ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80195d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	4313      	orrs	r3, r2
 80195d8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80195da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	4013      	ands	r3, r2
 80195e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80195e6:	68fb      	ldr	r3, [r7, #12]
}
 80195e8:	bf00      	nop
 80195ea:	3714      	adds	r7, #20
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr

080195f4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	4603      	mov	r3, r0
 80195fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80195fe:	2300      	movs	r3, #0
 8019600:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8019602:	79fb      	ldrb	r3, [r7, #7]
 8019604:	2b01      	cmp	r3, #1
 8019606:	d903      	bls.n	8019610 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8019608:	f06f 0301 	mvn.w	r3, #1
 801960c:	60fb      	str	r3, [r7, #12]
 801960e:	e022      	b.n	8019656 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8019610:	79fa      	ldrb	r2, [r7, #7]
 8019612:	79fb      	ldrb	r3, [r7, #7]
 8019614:	4912      	ldr	r1, [pc, #72]	; (8019660 <BSP_COM_Init+0x6c>)
 8019616:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801961a:	4912      	ldr	r1, [pc, #72]	; (8019664 <BSP_COM_Init+0x70>)
 801961c:	2094      	movs	r0, #148	; 0x94
 801961e:	fb00 f303 	mul.w	r3, r0, r3
 8019622:	440b      	add	r3, r1
 8019624:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8019626:	79fb      	ldrb	r3, [r7, #7]
 8019628:	2294      	movs	r2, #148	; 0x94
 801962a:	fb02 f303 	mul.w	r3, r2, r3
 801962e:	4a0d      	ldr	r2, [pc, #52]	; (8019664 <BSP_COM_Init+0x70>)
 8019630:	4413      	add	r3, r2
 8019632:	4618      	mov	r0, r3
 8019634:	f000 f86a 	bl	801970c <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8019638:	79fb      	ldrb	r3, [r7, #7]
 801963a:	2294      	movs	r2, #148	; 0x94
 801963c:	fb02 f303 	mul.w	r3, r2, r3
 8019640:	4a08      	ldr	r2, [pc, #32]	; (8019664 <BSP_COM_Init+0x70>)
 8019642:	4413      	add	r3, r2
 8019644:	4618      	mov	r0, r3
 8019646:	f000 f80f 	bl	8019668 <MX_USART1_UART_Init>
 801964a:	4603      	mov	r3, r0
 801964c:	2b00      	cmp	r3, #0
 801964e:	d002      	beq.n	8019656 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8019650:	f06f 0303 	mvn.w	r3, #3
 8019654:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8019656:	68fb      	ldr	r3, [r7, #12]
}
 8019658:	4618      	mov	r0, r3
 801965a:	3710      	adds	r7, #16
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}
 8019660:	20000080 	.word	0x20000080
 8019664:	20009290 	.word	0x20009290

08019668 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b084      	sub	sp, #16
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8019670:	2300      	movs	r3, #0
 8019672:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	4a24      	ldr	r2, [pc, #144]	; (8019708 <MX_USART1_UART_Init+0xa0>)
 8019678:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8019680:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2200      	movs	r2, #0
 8019686:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2200      	movs	r2, #0
 801968c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2200      	movs	r2, #0
 8019692:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	220c      	movs	r2, #12
 8019698:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	2200      	movs	r2, #0
 801969e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80196a6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	2200      	movs	r2, #0
 80196ac:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	2200      	movs	r2, #0
 80196b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2200      	movs	r2, #0
 80196b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f004 fa78 	bl	801dbb0 <HAL_UART_Init>
 80196c0:	4603      	mov	r3, r0
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d001      	beq.n	80196ca <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 80196c6:	2301      	movs	r3, #1
 80196c8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80196ca:	2100      	movs	r1, #0
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f005 fd93 	bl	801f1f8 <HAL_UARTEx_SetTxFifoThreshold>
 80196d2:	4603      	mov	r3, r0
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d001      	beq.n	80196dc <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 80196d8:	2301      	movs	r3, #1
 80196da:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80196dc:	2100      	movs	r1, #0
 80196de:	6878      	ldr	r0, [r7, #4]
 80196e0:	f005 fdc8 	bl	801f274 <HAL_UARTEx_SetRxFifoThreshold>
 80196e4:	4603      	mov	r3, r0
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d001      	beq.n	80196ee <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 80196ea:	2301      	movs	r3, #1
 80196ec:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80196ee:	6878      	ldr	r0, [r7, #4]
 80196f0:	f005 fd49 	bl	801f186 <HAL_UARTEx_DisableFifoMode>
 80196f4:	4603      	mov	r3, r0
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d001      	beq.n	80196fe <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 80196fa:	2301      	movs	r3, #1
 80196fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80196fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019700:	4618      	mov	r0, r3
 8019702:	3710      	adds	r7, #16
 8019704:	46bd      	mov	sp, r7
 8019706:	bd80      	pop	{r7, pc}
 8019708:	40013800 	.word	0x40013800

0801970c <USART1_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart1_tx;

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b09c      	sub	sp, #112	; 0x70
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019714:	f107 030c 	add.w	r3, r7, #12
 8019718:	2250      	movs	r2, #80	; 0x50
 801971a:	2100      	movs	r1, #0
 801971c:	4618      	mov	r0, r3
 801971e:	f00b feb1 	bl	8025484 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8019722:	2301      	movs	r3, #1
 8019724:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8019726:	2300      	movs	r3, #0
 8019728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801972a:	f107 030c 	add.w	r3, r7, #12
 801972e:	4618      	mov	r0, r3
 8019730:	f003 fdd4 	bl	801d2dc <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8019734:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8019738:	f7ff ff43 	bl	80195c2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801973c:	2002      	movs	r0, #2
 801973e:	f7ff ff27 	bl	8019590 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8019742:	2340      	movs	r3, #64	; 0x40
 8019744:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019746:	2302      	movs	r3, #2
 8019748:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801974a:	2301      	movs	r3, #1
 801974c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801974e:	2300      	movs	r3, #0
 8019750:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8019752:	2307      	movs	r3, #7
 8019754:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8019756:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801975a:	4619      	mov	r1, r3
 801975c:	481d      	ldr	r0, [pc, #116]	; (80197d4 <USART1_MspInit+0xc8>)
 801975e:	f000 fd9d 	bl	801a29c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8019762:	2380      	movs	r3, #128	; 0x80
 8019764:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019766:	2302      	movs	r3, #2
 8019768:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801976a:	2301      	movs	r3, #1
 801976c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801976e:	2300      	movs	r3, #0
 8019770:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8019772:	2307      	movs	r3, #7
 8019774:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8019776:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801977a:	4619      	mov	r1, r3
 801977c:	4815      	ldr	r0, [pc, #84]	; (80197d4 <USART1_MspInit+0xc8>)
 801977e:	f000 fd8d 	bl	801a29c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart1_tx.Instance = DMA2_Channel4;
 8019782:	4b15      	ldr	r3, [pc, #84]	; (80197d8 <USART1_MspInit+0xcc>)
 8019784:	4a15      	ldr	r2, [pc, #84]	; (80197dc <USART1_MspInit+0xd0>)
 8019786:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8019788:	4b13      	ldr	r3, [pc, #76]	; (80197d8 <USART1_MspInit+0xcc>)
 801978a:	220f      	movs	r2, #15
 801978c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801978e:	4b12      	ldr	r3, [pc, #72]	; (80197d8 <USART1_MspInit+0xcc>)
 8019790:	2210      	movs	r2, #16
 8019792:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8019794:	4b10      	ldr	r3, [pc, #64]	; (80197d8 <USART1_MspInit+0xcc>)
 8019796:	2200      	movs	r2, #0
 8019798:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801979a:	4b0f      	ldr	r3, [pc, #60]	; (80197d8 <USART1_MspInit+0xcc>)
 801979c:	2280      	movs	r2, #128	; 0x80
 801979e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80197a0:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <USART1_MspInit+0xcc>)
 80197a2:	2200      	movs	r2, #0
 80197a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80197a6:	4b0c      	ldr	r3, [pc, #48]	; (80197d8 <USART1_MspInit+0xcc>)
 80197a8:	2200      	movs	r2, #0
 80197aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80197ac:	4b0a      	ldr	r3, [pc, #40]	; (80197d8 <USART1_MspInit+0xcc>)
 80197ae:	2200      	movs	r2, #0
 80197b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80197b2:	4b09      	ldr	r3, [pc, #36]	; (80197d8 <USART1_MspInit+0xcc>)
 80197b4:	2200      	movs	r2, #0
 80197b6:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart1_tx);
 80197b8:	4807      	ldr	r0, [pc, #28]	; (80197d8 <USART1_MspInit+0xcc>)
 80197ba:	f000 fa3d 	bl	8019c38 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	4a05      	ldr	r2, [pc, #20]	; (80197d8 <USART1_MspInit+0xcc>)
 80197c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80197c4:	4a04      	ldr	r2, [pc, #16]	; (80197d8 <USART1_MspInit+0xcc>)
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80197ca:	bf00      	nop
 80197cc:	3770      	adds	r7, #112	; 0x70
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}
 80197d2:	bf00      	nop
 80197d4:	48000400 	.word	0x48000400
 80197d8:	20009324 	.word	0x20009324
 80197dc:	40020444 	.word	0x40020444

080197e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b082      	sub	sp, #8
 80197e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80197e6:	2300      	movs	r3, #0
 80197e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80197ea:	4b0c      	ldr	r3, [pc, #48]	; (801981c <HAL_Init+0x3c>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	4a0b      	ldr	r2, [pc, #44]	; (801981c <HAL_Init+0x3c>)
 80197f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80197f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80197f6:	2003      	movs	r0, #3
 80197f8:	f000 f9b4 	bl	8019b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80197fc:	2000      	movs	r0, #0
 80197fe:	f000 f80f 	bl	8019820 <HAL_InitTick>
 8019802:	4603      	mov	r3, r0
 8019804:	2b00      	cmp	r3, #0
 8019806:	d002      	beq.n	801980e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8019808:	2301      	movs	r3, #1
 801980a:	71fb      	strb	r3, [r7, #7]
 801980c:	e001      	b.n	8019812 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801980e:	f7eb f9a4 	bl	8004b5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8019812:	79fb      	ldrb	r3, [r7, #7]
}
 8019814:	4618      	mov	r0, r3
 8019816:	3708      	adds	r7, #8
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}
 801981c:	58004000 	.word	0x58004000

08019820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b084      	sub	sp, #16
 8019824:	af00      	add	r7, sp, #0
 8019826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8019828:	2300      	movs	r3, #0
 801982a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 801982c:	4b17      	ldr	r3, [pc, #92]	; (801988c <HAL_InitTick+0x6c>)
 801982e:	781b      	ldrb	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d024      	beq.n	801987e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8019834:	f003 fab2 	bl	801cd9c <HAL_RCC_GetHCLKFreq>
 8019838:	4602      	mov	r2, r0
 801983a:	4b14      	ldr	r3, [pc, #80]	; (801988c <HAL_InitTick+0x6c>)
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	4619      	mov	r1, r3
 8019840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019844:	fbb3 f3f1 	udiv	r3, r3, r1
 8019848:	fbb2 f3f3 	udiv	r3, r2, r3
 801984c:	4618      	mov	r0, r3
 801984e:	f000 f9ca 	bl	8019be6 <HAL_SYSTICK_Config>
 8019852:	4603      	mov	r3, r0
 8019854:	2b00      	cmp	r3, #0
 8019856:	d10f      	bne.n	8019878 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2b0f      	cmp	r3, #15
 801985c:	d809      	bhi.n	8019872 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801985e:	2200      	movs	r2, #0
 8019860:	6879      	ldr	r1, [r7, #4]
 8019862:	f04f 30ff 	mov.w	r0, #4294967295
 8019866:	f000 f988 	bl	8019b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801986a:	4a09      	ldr	r2, [pc, #36]	; (8019890 <HAL_InitTick+0x70>)
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	6013      	str	r3, [r2, #0]
 8019870:	e007      	b.n	8019882 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8019872:	2301      	movs	r3, #1
 8019874:	73fb      	strb	r3, [r7, #15]
 8019876:	e004      	b.n	8019882 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8019878:	2301      	movs	r3, #1
 801987a:	73fb      	strb	r3, [r7, #15]
 801987c:	e001      	b.n	8019882 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 801987e:	2301      	movs	r3, #1
 8019880:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8019882:	7bfb      	ldrb	r3, [r7, #15]
}
 8019884:	4618      	mov	r0, r3
 8019886:	3710      	adds	r7, #16
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}
 801988c:	20000088 	.word	0x20000088
 8019890:	20000084 	.word	0x20000084

08019894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019894:	b480      	push	{r7}
 8019896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019898:	4b06      	ldr	r3, [pc, #24]	; (80198b4 <HAL_IncTick+0x20>)
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	461a      	mov	r2, r3
 801989e:	4b06      	ldr	r3, [pc, #24]	; (80198b8 <HAL_IncTick+0x24>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	4413      	add	r3, r2
 80198a4:	4a04      	ldr	r2, [pc, #16]	; (80198b8 <HAL_IncTick+0x24>)
 80198a6:	6013      	str	r3, [r2, #0]
}
 80198a8:	bf00      	nop
 80198aa:	46bd      	mov	sp, r7
 80198ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b0:	4770      	bx	lr
 80198b2:	bf00      	nop
 80198b4:	20000088 	.word	0x20000088
 80198b8:	20009384 	.word	0x20009384

080198bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80198bc:	b480      	push	{r7}
 80198be:	af00      	add	r7, sp, #0
  return uwTick;
 80198c0:	4b03      	ldr	r3, [pc, #12]	; (80198d0 <HAL_GetTick+0x14>)
 80198c2:	681b      	ldr	r3, [r3, #0]
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	46bd      	mov	sp, r7
 80198c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198cc:	4770      	bx	lr
 80198ce:	bf00      	nop
 80198d0:	20009384 	.word	0x20009384

080198d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80198d4:	b480      	push	{r7}
 80198d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80198d8:	4b03      	ldr	r3, [pc, #12]	; (80198e8 <HAL_GetTickPrio+0x14>)
 80198da:	681b      	ldr	r3, [r3, #0]
}
 80198dc:	4618      	mov	r0, r3
 80198de:	46bd      	mov	sp, r7
 80198e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	20000084 	.word	0x20000084

080198ec <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80198ec:	b480      	push	{r7}
 80198ee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80198f0:	4b03      	ldr	r3, [pc, #12]	; (8019900 <HAL_GetTickFreq+0x14>)
 80198f2:	781b      	ldrb	r3, [r3, #0]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	46bd      	mov	sp, r7
 80198f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fc:	4770      	bx	lr
 80198fe:	bf00      	nop
 8019900:	20000088 	.word	0x20000088

08019904 <__NVIC_SetPriorityGrouping>:
{
 8019904:	b480      	push	{r7}
 8019906:	b085      	sub	sp, #20
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f003 0307 	and.w	r3, r3, #7
 8019912:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019914:	4b0c      	ldr	r3, [pc, #48]	; (8019948 <__NVIC_SetPriorityGrouping+0x44>)
 8019916:	68db      	ldr	r3, [r3, #12]
 8019918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801991a:	68ba      	ldr	r2, [r7, #8]
 801991c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019920:	4013      	ands	r3, r2
 8019922:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801992c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8019930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019936:	4a04      	ldr	r2, [pc, #16]	; (8019948 <__NVIC_SetPriorityGrouping+0x44>)
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	60d3      	str	r3, [r2, #12]
}
 801993c:	bf00      	nop
 801993e:	3714      	adds	r7, #20
 8019940:	46bd      	mov	sp, r7
 8019942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019946:	4770      	bx	lr
 8019948:	e000ed00 	.word	0xe000ed00

0801994c <__NVIC_GetPriorityGrouping>:
{
 801994c:	b480      	push	{r7}
 801994e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019950:	4b04      	ldr	r3, [pc, #16]	; (8019964 <__NVIC_GetPriorityGrouping+0x18>)
 8019952:	68db      	ldr	r3, [r3, #12]
 8019954:	0a1b      	lsrs	r3, r3, #8
 8019956:	f003 0307 	and.w	r3, r3, #7
}
 801995a:	4618      	mov	r0, r3
 801995c:	46bd      	mov	sp, r7
 801995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019962:	4770      	bx	lr
 8019964:	e000ed00 	.word	0xe000ed00

08019968 <__NVIC_EnableIRQ>:
{
 8019968:	b480      	push	{r7}
 801996a:	b083      	sub	sp, #12
 801996c:	af00      	add	r7, sp, #0
 801996e:	4603      	mov	r3, r0
 8019970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019976:	2b00      	cmp	r3, #0
 8019978:	db0b      	blt.n	8019992 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801997a:	79fb      	ldrb	r3, [r7, #7]
 801997c:	f003 021f 	and.w	r2, r3, #31
 8019980:	4907      	ldr	r1, [pc, #28]	; (80199a0 <__NVIC_EnableIRQ+0x38>)
 8019982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019986:	095b      	lsrs	r3, r3, #5
 8019988:	2001      	movs	r0, #1
 801998a:	fa00 f202 	lsl.w	r2, r0, r2
 801998e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019992:	bf00      	nop
 8019994:	370c      	adds	r7, #12
 8019996:	46bd      	mov	sp, r7
 8019998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999c:	4770      	bx	lr
 801999e:	bf00      	nop
 80199a0:	e000e100 	.word	0xe000e100

080199a4 <__NVIC_DisableIRQ>:
{
 80199a4:	b480      	push	{r7}
 80199a6:	b083      	sub	sp, #12
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	4603      	mov	r3, r0
 80199ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80199ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	db12      	blt.n	80199dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80199b6:	79fb      	ldrb	r3, [r7, #7]
 80199b8:	f003 021f 	and.w	r2, r3, #31
 80199bc:	490a      	ldr	r1, [pc, #40]	; (80199e8 <__NVIC_DisableIRQ+0x44>)
 80199be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80199c2:	095b      	lsrs	r3, r3, #5
 80199c4:	2001      	movs	r0, #1
 80199c6:	fa00 f202 	lsl.w	r2, r0, r2
 80199ca:	3320      	adds	r3, #32
 80199cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80199d0:	f3bf 8f4f 	dsb	sy
}
 80199d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80199d6:	f3bf 8f6f 	isb	sy
}
 80199da:	bf00      	nop
}
 80199dc:	bf00      	nop
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr
 80199e8:	e000e100 	.word	0xe000e100

080199ec <__NVIC_SetPendingIRQ>:
{
 80199ec:	b480      	push	{r7}
 80199ee:	b083      	sub	sp, #12
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	4603      	mov	r3, r0
 80199f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80199f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	db0c      	blt.n	8019a18 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80199fe:	79fb      	ldrb	r3, [r7, #7]
 8019a00:	f003 021f 	and.w	r2, r3, #31
 8019a04:	4907      	ldr	r1, [pc, #28]	; (8019a24 <__NVIC_SetPendingIRQ+0x38>)
 8019a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a0a:	095b      	lsrs	r3, r3, #5
 8019a0c:	2001      	movs	r0, #1
 8019a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8019a12:	3340      	adds	r3, #64	; 0x40
 8019a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019a18:	bf00      	nop
 8019a1a:	370c      	adds	r7, #12
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a22:	4770      	bx	lr
 8019a24:	e000e100 	.word	0xe000e100

08019a28 <__NVIC_ClearPendingIRQ>:
{
 8019a28:	b480      	push	{r7}
 8019a2a:	b083      	sub	sp, #12
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	4603      	mov	r3, r0
 8019a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	db0c      	blt.n	8019a54 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019a3a:	79fb      	ldrb	r3, [r7, #7]
 8019a3c:	f003 021f 	and.w	r2, r3, #31
 8019a40:	4907      	ldr	r1, [pc, #28]	; (8019a60 <__NVIC_ClearPendingIRQ+0x38>)
 8019a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a46:	095b      	lsrs	r3, r3, #5
 8019a48:	2001      	movs	r0, #1
 8019a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8019a4e:	3360      	adds	r3, #96	; 0x60
 8019a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019a54:	bf00      	nop
 8019a56:	370c      	adds	r7, #12
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5e:	4770      	bx	lr
 8019a60:	e000e100 	.word	0xe000e100

08019a64 <__NVIC_SetPriority>:
{
 8019a64:	b480      	push	{r7}
 8019a66:	b083      	sub	sp, #12
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	6039      	str	r1, [r7, #0]
 8019a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	db0a      	blt.n	8019a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	b2da      	uxtb	r2, r3
 8019a7c:	490c      	ldr	r1, [pc, #48]	; (8019ab0 <__NVIC_SetPriority+0x4c>)
 8019a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a82:	0112      	lsls	r2, r2, #4
 8019a84:	b2d2      	uxtb	r2, r2
 8019a86:	440b      	add	r3, r1
 8019a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019a8c:	e00a      	b.n	8019aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	b2da      	uxtb	r2, r3
 8019a92:	4908      	ldr	r1, [pc, #32]	; (8019ab4 <__NVIC_SetPriority+0x50>)
 8019a94:	79fb      	ldrb	r3, [r7, #7]
 8019a96:	f003 030f 	and.w	r3, r3, #15
 8019a9a:	3b04      	subs	r3, #4
 8019a9c:	0112      	lsls	r2, r2, #4
 8019a9e:	b2d2      	uxtb	r2, r2
 8019aa0:	440b      	add	r3, r1
 8019aa2:	761a      	strb	r2, [r3, #24]
}
 8019aa4:	bf00      	nop
 8019aa6:	370c      	adds	r7, #12
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aae:	4770      	bx	lr
 8019ab0:	e000e100 	.word	0xe000e100
 8019ab4:	e000ed00 	.word	0xe000ed00

08019ab8 <NVIC_EncodePriority>:
{
 8019ab8:	b480      	push	{r7}
 8019aba:	b089      	sub	sp, #36	; 0x24
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	60f8      	str	r0, [r7, #12]
 8019ac0:	60b9      	str	r1, [r7, #8]
 8019ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	f003 0307 	and.w	r3, r3, #7
 8019aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019acc:	69fb      	ldr	r3, [r7, #28]
 8019ace:	f1c3 0307 	rsb	r3, r3, #7
 8019ad2:	2b04      	cmp	r3, #4
 8019ad4:	bf28      	it	cs
 8019ad6:	2304      	movcs	r3, #4
 8019ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	3304      	adds	r3, #4
 8019ade:	2b06      	cmp	r3, #6
 8019ae0:	d902      	bls.n	8019ae8 <NVIC_EncodePriority+0x30>
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	3b03      	subs	r3, #3
 8019ae6:	e000      	b.n	8019aea <NVIC_EncodePriority+0x32>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019aec:	f04f 32ff 	mov.w	r2, #4294967295
 8019af0:	69bb      	ldr	r3, [r7, #24]
 8019af2:	fa02 f303 	lsl.w	r3, r2, r3
 8019af6:	43da      	mvns	r2, r3
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	401a      	ands	r2, r3
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019b00:	f04f 31ff 	mov.w	r1, #4294967295
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	fa01 f303 	lsl.w	r3, r1, r3
 8019b0a:	43d9      	mvns	r1, r3
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019b10:	4313      	orrs	r3, r2
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3724      	adds	r7, #36	; 0x24
 8019b16:	46bd      	mov	sp, r7
 8019b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1c:	4770      	bx	lr
	...

08019b20 <SysTick_Config>:
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b082      	sub	sp, #8
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	3b01      	subs	r3, #1
 8019b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019b30:	d301      	bcc.n	8019b36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8019b32:	2301      	movs	r3, #1
 8019b34:	e00f      	b.n	8019b56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019b36:	4a0a      	ldr	r2, [pc, #40]	; (8019b60 <SysTick_Config+0x40>)
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019b3e:	210f      	movs	r1, #15
 8019b40:	f04f 30ff 	mov.w	r0, #4294967295
 8019b44:	f7ff ff8e 	bl	8019a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019b48:	4b05      	ldr	r3, [pc, #20]	; (8019b60 <SysTick_Config+0x40>)
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019b4e:	4b04      	ldr	r3, [pc, #16]	; (8019b60 <SysTick_Config+0x40>)
 8019b50:	2207      	movs	r2, #7
 8019b52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8019b54:	2300      	movs	r3, #0
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	e000e010 	.word	0xe000e010

08019b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f7ff fec9 	bl	8019904 <__NVIC_SetPriorityGrouping>
}
 8019b72:	bf00      	nop
 8019b74:	3708      	adds	r7, #8
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}

08019b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019b7a:	b580      	push	{r7, lr}
 8019b7c:	b086      	sub	sp, #24
 8019b7e:	af00      	add	r7, sp, #0
 8019b80:	4603      	mov	r3, r0
 8019b82:	60b9      	str	r1, [r7, #8]
 8019b84:	607a      	str	r2, [r7, #4]
 8019b86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019b88:	f7ff fee0 	bl	801994c <__NVIC_GetPriorityGrouping>
 8019b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	68b9      	ldr	r1, [r7, #8]
 8019b92:	6978      	ldr	r0, [r7, #20]
 8019b94:	f7ff ff90 	bl	8019ab8 <NVIC_EncodePriority>
 8019b98:	4602      	mov	r2, r0
 8019b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b9e:	4611      	mov	r1, r2
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7ff ff5f 	bl	8019a64 <__NVIC_SetPriority>
}
 8019ba6:	bf00      	nop
 8019ba8:	3718      	adds	r7, #24
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd80      	pop	{r7, pc}

08019bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019bae:	b580      	push	{r7, lr}
 8019bb0:	b082      	sub	sp, #8
 8019bb2:	af00      	add	r7, sp, #0
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7ff fed3 	bl	8019968 <__NVIC_EnableIRQ>
}
 8019bc2:	bf00      	nop
 8019bc4:	3708      	adds	r7, #8
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}

08019bca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8019bca:	b580      	push	{r7, lr}
 8019bcc:	b082      	sub	sp, #8
 8019bce:	af00      	add	r7, sp, #0
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8019bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7ff fee3 	bl	80199a4 <__NVIC_DisableIRQ>
}
 8019bde:	bf00      	nop
 8019be0:	3708      	adds	r7, #8
 8019be2:	46bd      	mov	sp, r7
 8019be4:	bd80      	pop	{r7, pc}

08019be6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019be6:	b580      	push	{r7, lr}
 8019be8:	b082      	sub	sp, #8
 8019bea:	af00      	add	r7, sp, #0
 8019bec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8019bee:	6878      	ldr	r0, [r7, #4]
 8019bf0:	f7ff ff96 	bl	8019b20 <SysTick_Config>
 8019bf4:	4603      	mov	r3, r0
}
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	3708      	adds	r7, #8
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}

08019bfe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8019bfe:	b580      	push	{r7, lr}
 8019c00:	b082      	sub	sp, #8
 8019c02:	af00      	add	r7, sp, #0
 8019c04:	4603      	mov	r3, r0
 8019c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8019c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	f7ff feed 	bl	80199ec <__NVIC_SetPendingIRQ>
}
 8019c12:	bf00      	nop
 8019c14:	3708      	adds	r7, #8
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd80      	pop	{r7, pc}

08019c1a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8019c1a:	b580      	push	{r7, lr}
 8019c1c:	b082      	sub	sp, #8
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	4603      	mov	r3, r0
 8019c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8019c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7ff fefd 	bl	8019a28 <__NVIC_ClearPendingIRQ>
}
 8019c2e:	bf00      	nop
 8019c30:	3708      	adds	r7, #8
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}
	...

08019c38 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8019c46:	2301      	movs	r3, #1
 8019c48:	e08e      	b.n	8019d68 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	461a      	mov	r2, r3
 8019c50:	4b47      	ldr	r3, [pc, #284]	; (8019d70 <HAL_DMA_Init+0x138>)
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d80f      	bhi.n	8019c76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	4b45      	ldr	r3, [pc, #276]	; (8019d74 <HAL_DMA_Init+0x13c>)
 8019c5e:	4413      	add	r3, r2
 8019c60:	4a45      	ldr	r2, [pc, #276]	; (8019d78 <HAL_DMA_Init+0x140>)
 8019c62:	fba2 2303 	umull	r2, r3, r2, r3
 8019c66:	091b      	lsrs	r3, r3, #4
 8019c68:	009a      	lsls	r2, r3, #2
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4a42      	ldr	r2, [pc, #264]	; (8019d7c <HAL_DMA_Init+0x144>)
 8019c72:	641a      	str	r2, [r3, #64]	; 0x40
 8019c74:	e00e      	b.n	8019c94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	4b40      	ldr	r3, [pc, #256]	; (8019d80 <HAL_DMA_Init+0x148>)
 8019c7e:	4413      	add	r3, r2
 8019c80:	4a3d      	ldr	r2, [pc, #244]	; (8019d78 <HAL_DMA_Init+0x140>)
 8019c82:	fba2 2303 	umull	r2, r3, r2, r3
 8019c86:	091b      	lsrs	r3, r3, #4
 8019c88:	009a      	lsls	r2, r3, #2
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	4a3c      	ldr	r2, [pc, #240]	; (8019d84 <HAL_DMA_Init+0x14c>)
 8019c92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2202      	movs	r2, #2
 8019c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8019caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019cae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8019cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	691b      	ldr	r3, [r3, #16]
 8019cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	699b      	ldr	r3, [r3, #24]
 8019cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	6a1b      	ldr	r3, [r3, #32]
 8019cd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8019cd8:	68fa      	ldr	r2, [r7, #12]
 8019cda:	4313      	orrs	r3, r2
 8019cdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	68fa      	ldr	r2, [r7, #12]
 8019ce4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019ce6:	6878      	ldr	r0, [r7, #4]
 8019ce8:	f000 fa74 	bl	801a1d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	689b      	ldr	r3, [r3, #8]
 8019cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019cf4:	d102      	bne.n	8019cfc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	685a      	ldr	r2, [r3, #4]
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8019d08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d0e:	687a      	ldr	r2, [r7, #4]
 8019d10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019d12:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	685b      	ldr	r3, [r3, #4]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d010      	beq.n	8019d3e <HAL_DMA_Init+0x106>
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	685b      	ldr	r3, [r3, #4]
 8019d20:	2b04      	cmp	r3, #4
 8019d22:	d80c      	bhi.n	8019d3e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019d24:	6878      	ldr	r0, [r7, #4]
 8019d26:	f000 fa93 	bl	801a250 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d2e:	2200      	movs	r2, #0
 8019d30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d36:	687a      	ldr	r2, [r7, #4]
 8019d38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019d3a:	605a      	str	r2, [r3, #4]
 8019d3c:	e008      	b.n	8019d50 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	2200      	movs	r2, #0
 8019d42:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2200      	movs	r2, #0
 8019d48:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2200      	movs	r2, #0
 8019d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	2201      	movs	r2, #1
 8019d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2200      	movs	r2, #0
 8019d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8019d66:	2300      	movs	r3, #0
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3710      	adds	r7, #16
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	40020407 	.word	0x40020407
 8019d74:	bffdfff8 	.word	0xbffdfff8
 8019d78:	cccccccd 	.word	0xcccccccd
 8019d7c:	40020000 	.word	0x40020000
 8019d80:	bffdfbf8 	.word	0xbffdfbf8
 8019d84:	40020400 	.word	0x40020400

08019d88 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b086      	sub	sp, #24
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	607a      	str	r2, [r7, #4]
 8019d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019d96:	2300      	movs	r3, #0
 8019d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019da0:	2b01      	cmp	r3, #1
 8019da2:	d101      	bne.n	8019da8 <HAL_DMA_Start_IT+0x20>
 8019da4:	2302      	movs	r3, #2
 8019da6:	e066      	b.n	8019e76 <HAL_DMA_Start_IT+0xee>
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	2201      	movs	r2, #1
 8019dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	d155      	bne.n	8019e68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	2202      	movs	r2, #2
 8019dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	f022 0201 	bic.w	r2, r2, #1
 8019dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	687a      	ldr	r2, [r7, #4]
 8019dde:	68b9      	ldr	r1, [r7, #8]
 8019de0:	68f8      	ldr	r0, [r7, #12]
 8019de2:	f000 f9b9 	bl	801a158 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d008      	beq.n	8019e00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	f042 020e 	orr.w	r2, r2, #14
 8019dfc:	601a      	str	r2, [r3, #0]
 8019dfe:	e00f      	b.n	8019e20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	f022 0204 	bic.w	r2, r2, #4
 8019e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	681a      	ldr	r2, [r3, #0]
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	f042 020a 	orr.w	r2, r2, #10
 8019e1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d007      	beq.n	8019e3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e32:	681a      	ldr	r2, [r3, #0]
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d007      	beq.n	8019e56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e4a:	681a      	ldr	r2, [r3, #0]
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f042 0201 	orr.w	r2, r2, #1
 8019e64:	601a      	str	r2, [r3, #0]
 8019e66:	e005      	b.n	8019e74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8019e70:	2302      	movs	r3, #2
 8019e72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8019e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e76:	4618      	mov	r0, r3
 8019e78:	3718      	adds	r7, #24
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}

08019e7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8019e7e:	b480      	push	{r7}
 8019e80:	b083      	sub	sp, #12
 8019e82:	af00      	add	r7, sp, #0
 8019e84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d101      	bne.n	8019e90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e04f      	b.n	8019f30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019e96:	b2db      	uxtb	r3, r3
 8019e98:	2b02      	cmp	r3, #2
 8019e9a:	d008      	beq.n	8019eae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	2204      	movs	r2, #4
 8019ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	2200      	movs	r2, #0
 8019ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019eaa:	2301      	movs	r3, #1
 8019eac:	e040      	b.n	8019f30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f022 020e 	bic.w	r2, r2, #14
 8019ebc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ec2:	681a      	ldr	r2, [r3, #0]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019ecc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	681a      	ldr	r2, [r3, #0]
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f022 0201 	bic.w	r2, r2, #1
 8019edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ee2:	f003 021c 	and.w	r2, r3, #28
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019eea:	2101      	movs	r1, #1
 8019eec:	fa01 f202 	lsl.w	r2, r1, r2
 8019ef0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ef6:	687a      	ldr	r2, [r7, #4]
 8019ef8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019efa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d00c      	beq.n	8019f1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f08:	681a      	ldr	r2, [r3, #0]
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019f12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f18:	687a      	ldr	r2, [r7, #4]
 8019f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019f1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	2201      	movs	r2, #1
 8019f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	2200      	movs	r2, #0
 8019f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8019f2e:	2300      	movs	r3, #0
}
 8019f30:	4618      	mov	r0, r3
 8019f32:	370c      	adds	r7, #12
 8019f34:	46bd      	mov	sp, r7
 8019f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3a:	4770      	bx	lr

08019f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b084      	sub	sp, #16
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019f44:	2300      	movs	r3, #0
 8019f46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019f4e:	b2db      	uxtb	r3, r3
 8019f50:	2b02      	cmp	r3, #2
 8019f52:	d005      	beq.n	8019f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2204      	movs	r2, #4
 8019f58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	73fb      	strb	r3, [r7, #15]
 8019f5e:	e047      	b.n	8019ff0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	681a      	ldr	r2, [r3, #0]
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	f022 020e 	bic.w	r2, r2, #14
 8019f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	681a      	ldr	r2, [r3, #0]
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	f022 0201 	bic.w	r2, r2, #1
 8019f7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f94:	f003 021c 	and.w	r2, r3, #28
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f9c:	2101      	movs	r1, #1
 8019f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8019fa2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019fac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d00c      	beq.n	8019fd0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fba:	681a      	ldr	r2, [r3, #0]
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019fc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019fca:	687a      	ldr	r2, [r7, #4]
 8019fcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019fce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	2201      	movs	r2, #1
 8019fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2200      	movs	r2, #0
 8019fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d003      	beq.n	8019ff0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	4798      	blx	r3
    }
  }
  return status;
 8019ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8019ffa:	b580      	push	{r7, lr}
 8019ffc:	b084      	sub	sp, #16
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a016:	f003 031c 	and.w	r3, r3, #28
 801a01a:	2204      	movs	r2, #4
 801a01c:	409a      	lsls	r2, r3
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	4013      	ands	r3, r2
 801a022:	2b00      	cmp	r3, #0
 801a024:	d026      	beq.n	801a074 <HAL_DMA_IRQHandler+0x7a>
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	f003 0304 	and.w	r3, r3, #4
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d021      	beq.n	801a074 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	f003 0320 	and.w	r3, r3, #32
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d107      	bne.n	801a04e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	681a      	ldr	r2, [r3, #0]
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	f022 0204 	bic.w	r2, r2, #4
 801a04c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a052:	f003 021c 	and.w	r2, r3, #28
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a05a:	2104      	movs	r1, #4
 801a05c:	fa01 f202 	lsl.w	r2, r1, r2
 801a060:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a066:	2b00      	cmp	r3, #0
 801a068:	d071      	beq.n	801a14e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a072:	e06c      	b.n	801a14e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a078:	f003 031c 	and.w	r3, r3, #28
 801a07c:	2202      	movs	r2, #2
 801a07e:	409a      	lsls	r2, r3
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	4013      	ands	r3, r2
 801a084:	2b00      	cmp	r3, #0
 801a086:	d02e      	beq.n	801a0e6 <HAL_DMA_IRQHandler+0xec>
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	f003 0302 	and.w	r3, r3, #2
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d029      	beq.n	801a0e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	f003 0320 	and.w	r3, r3, #32
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d10b      	bne.n	801a0b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	681a      	ldr	r2, [r3, #0]
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f022 020a 	bic.w	r2, r2, #10
 801a0ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2201      	movs	r2, #1
 801a0b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0bc:	f003 021c 	and.w	r2, r3, #28
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0c4:	2102      	movs	r1, #2
 801a0c6:	fa01 f202 	lsl.w	r2, r1, r2
 801a0ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d038      	beq.n	801a14e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a0e4:	e033      	b.n	801a14e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ea:	f003 031c 	and.w	r3, r3, #28
 801a0ee:	2208      	movs	r2, #8
 801a0f0:	409a      	lsls	r2, r3
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	4013      	ands	r3, r2
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d02a      	beq.n	801a150 <HAL_DMA_IRQHandler+0x156>
 801a0fa:	68bb      	ldr	r3, [r7, #8]
 801a0fc:	f003 0308 	and.w	r3, r3, #8
 801a100:	2b00      	cmp	r3, #0
 801a102:	d025      	beq.n	801a150 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	681a      	ldr	r2, [r3, #0]
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f022 020e 	bic.w	r2, r2, #14
 801a112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a118:	f003 021c 	and.w	r2, r3, #28
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a120:	2101      	movs	r1, #1
 801a122:	fa01 f202 	lsl.w	r2, r1, r2
 801a126:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2201      	movs	r2, #1
 801a12c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	2201      	movs	r2, #1
 801a132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2200      	movs	r2, #0
 801a13a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a142:	2b00      	cmp	r3, #0
 801a144:	d004      	beq.n	801a150 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a14e:	bf00      	nop
 801a150:	bf00      	nop
}
 801a152:	3710      	adds	r7, #16
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60f8      	str	r0, [r7, #12]
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	607a      	str	r2, [r7, #4]
 801a164:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a16a:	68fa      	ldr	r2, [r7, #12]
 801a16c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a16e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a174:	2b00      	cmp	r3, #0
 801a176:	d004      	beq.n	801a182 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a17c:	68fa      	ldr	r2, [r7, #12]
 801a17e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a180:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a186:	f003 021c 	and.w	r2, r3, #28
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a18e:	2101      	movs	r1, #1
 801a190:	fa01 f202 	lsl.w	r2, r1, r2
 801a194:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	683a      	ldr	r2, [r7, #0]
 801a19c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	689b      	ldr	r3, [r3, #8]
 801a1a2:	2b10      	cmp	r3, #16
 801a1a4:	d108      	bne.n	801a1b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	68ba      	ldr	r2, [r7, #8]
 801a1b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a1b6:	e007      	b.n	801a1c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	68ba      	ldr	r2, [r7, #8]
 801a1be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	687a      	ldr	r2, [r7, #4]
 801a1c6:	60da      	str	r2, [r3, #12]
}
 801a1c8:	bf00      	nop
 801a1ca:	3714      	adds	r7, #20
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d2:	4770      	bx	lr

0801a1d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a1d4:	b480      	push	{r7}
 801a1d6:	b085      	sub	sp, #20
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	4b17      	ldr	r3, [pc, #92]	; (801a240 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a1e4:	429a      	cmp	r2, r3
 801a1e6:	d80a      	bhi.n	801a1fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1ec:	089b      	lsrs	r3, r3, #2
 801a1ee:	009b      	lsls	r3, r3, #2
 801a1f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a1f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801a1f8:	687a      	ldr	r2, [r7, #4]
 801a1fa:	6493      	str	r3, [r2, #72]	; 0x48
 801a1fc:	e007      	b.n	801a20e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a202:	089b      	lsrs	r3, r3, #2
 801a204:	009a      	lsls	r2, r3, #2
 801a206:	4b0f      	ldr	r3, [pc, #60]	; (801a244 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a208:	4413      	add	r3, r2
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	b2db      	uxtb	r3, r3
 801a214:	3b08      	subs	r3, #8
 801a216:	4a0c      	ldr	r2, [pc, #48]	; (801a248 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a218:	fba2 2303 	umull	r2, r3, r2, r3
 801a21c:	091b      	lsrs	r3, r3, #4
 801a21e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	4a0a      	ldr	r2, [pc, #40]	; (801a24c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a224:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	f003 031f 	and.w	r3, r3, #31
 801a22c:	2201      	movs	r2, #1
 801a22e:	409a      	lsls	r2, r3
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a234:	bf00      	nop
 801a236:	3714      	adds	r7, #20
 801a238:	46bd      	mov	sp, r7
 801a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23e:	4770      	bx	lr
 801a240:	40020407 	.word	0x40020407
 801a244:	4002081c 	.word	0x4002081c
 801a248:	cccccccd 	.word	0xcccccccd
 801a24c:	40020880 	.word	0x40020880

0801a250 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a250:	b480      	push	{r7}
 801a252:	b085      	sub	sp, #20
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	685b      	ldr	r3, [r3, #4]
 801a25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a260:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a262:	68fa      	ldr	r2, [r7, #12]
 801a264:	4b0b      	ldr	r3, [pc, #44]	; (801a294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a266:	4413      	add	r3, r2
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	461a      	mov	r2, r3
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	4a09      	ldr	r2, [pc, #36]	; (801a298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 801a274:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	3b01      	subs	r3, #1
 801a27a:	f003 0303 	and.w	r3, r3, #3
 801a27e:	2201      	movs	r2, #1
 801a280:	409a      	lsls	r2, r3
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a286:	bf00      	nop
 801a288:	3714      	adds	r7, #20
 801a28a:	46bd      	mov	sp, r7
 801a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	1000823f 	.word	0x1000823f
 801a298:	40020940 	.word	0x40020940

0801a29c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a29c:	b480      	push	{r7}
 801a29e:	b087      	sub	sp, #28
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
 801a2a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801a2aa:	e14c      	b.n	801a546 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	681a      	ldr	r2, [r3, #0]
 801a2b0:	2101      	movs	r1, #1
 801a2b2:	697b      	ldr	r3, [r7, #20]
 801a2b4:	fa01 f303 	lsl.w	r3, r1, r3
 801a2b8:	4013      	ands	r3, r2
 801a2ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	f000 813e 	beq.w	801a540 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	685b      	ldr	r3, [r3, #4]
 801a2c8:	f003 0303 	and.w	r3, r3, #3
 801a2cc:	2b01      	cmp	r3, #1
 801a2ce:	d005      	beq.n	801a2dc <HAL_GPIO_Init+0x40>
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	685b      	ldr	r3, [r3, #4]
 801a2d4:	f003 0303 	and.w	r3, r3, #3
 801a2d8:	2b02      	cmp	r3, #2
 801a2da:	d130      	bne.n	801a33e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	689b      	ldr	r3, [r3, #8]
 801a2e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	005b      	lsls	r3, r3, #1
 801a2e6:	2203      	movs	r2, #3
 801a2e8:	fa02 f303 	lsl.w	r3, r2, r3
 801a2ec:	43db      	mvns	r3, r3
 801a2ee:	693a      	ldr	r2, [r7, #16]
 801a2f0:	4013      	ands	r3, r2
 801a2f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	68da      	ldr	r2, [r3, #12]
 801a2f8:	697b      	ldr	r3, [r7, #20]
 801a2fa:	005b      	lsls	r3, r3, #1
 801a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 801a300:	693a      	ldr	r2, [r7, #16]
 801a302:	4313      	orrs	r3, r2
 801a304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	693a      	ldr	r2, [r7, #16]
 801a30a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	685b      	ldr	r3, [r3, #4]
 801a310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801a312:	2201      	movs	r2, #1
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	fa02 f303 	lsl.w	r3, r2, r3
 801a31a:	43db      	mvns	r3, r3
 801a31c:	693a      	ldr	r2, [r7, #16]
 801a31e:	4013      	ands	r3, r2
 801a320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	685b      	ldr	r3, [r3, #4]
 801a326:	091b      	lsrs	r3, r3, #4
 801a328:	f003 0201 	and.w	r2, r3, #1
 801a32c:	697b      	ldr	r3, [r7, #20]
 801a32e:	fa02 f303 	lsl.w	r3, r2, r3
 801a332:	693a      	ldr	r2, [r7, #16]
 801a334:	4313      	orrs	r3, r2
 801a336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	693a      	ldr	r2, [r7, #16]
 801a33c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a33e:	683b      	ldr	r3, [r7, #0]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	f003 0303 	and.w	r3, r3, #3
 801a346:	2b03      	cmp	r3, #3
 801a348:	d017      	beq.n	801a37a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	68db      	ldr	r3, [r3, #12]
 801a34e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a350:	697b      	ldr	r3, [r7, #20]
 801a352:	005b      	lsls	r3, r3, #1
 801a354:	2203      	movs	r2, #3
 801a356:	fa02 f303 	lsl.w	r3, r2, r3
 801a35a:	43db      	mvns	r3, r3
 801a35c:	693a      	ldr	r2, [r7, #16]
 801a35e:	4013      	ands	r3, r2
 801a360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	689a      	ldr	r2, [r3, #8]
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	005b      	lsls	r3, r3, #1
 801a36a:	fa02 f303 	lsl.w	r3, r2, r3
 801a36e:	693a      	ldr	r2, [r7, #16]
 801a370:	4313      	orrs	r3, r2
 801a372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	693a      	ldr	r2, [r7, #16]
 801a378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a37a:	683b      	ldr	r3, [r7, #0]
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	f003 0303 	and.w	r3, r3, #3
 801a382:	2b02      	cmp	r3, #2
 801a384:	d123      	bne.n	801a3ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	08da      	lsrs	r2, r3, #3
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	3208      	adds	r2, #8
 801a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801a394:	697b      	ldr	r3, [r7, #20]
 801a396:	f003 0307 	and.w	r3, r3, #7
 801a39a:	009b      	lsls	r3, r3, #2
 801a39c:	220f      	movs	r2, #15
 801a39e:	fa02 f303 	lsl.w	r3, r2, r3
 801a3a2:	43db      	mvns	r3, r3
 801a3a4:	693a      	ldr	r2, [r7, #16]
 801a3a6:	4013      	ands	r3, r2
 801a3a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801a3aa:	683b      	ldr	r3, [r7, #0]
 801a3ac:	691a      	ldr	r2, [r3, #16]
 801a3ae:	697b      	ldr	r3, [r7, #20]
 801a3b0:	f003 0307 	and.w	r3, r3, #7
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 801a3ba:	693a      	ldr	r2, [r7, #16]
 801a3bc:	4313      	orrs	r3, r2
 801a3be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801a3c0:	697b      	ldr	r3, [r7, #20]
 801a3c2:	08da      	lsrs	r2, r3, #3
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	3208      	adds	r2, #8
 801a3c8:	6939      	ldr	r1, [r7, #16]
 801a3ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801a3d4:	697b      	ldr	r3, [r7, #20]
 801a3d6:	005b      	lsls	r3, r3, #1
 801a3d8:	2203      	movs	r2, #3
 801a3da:	fa02 f303 	lsl.w	r3, r2, r3
 801a3de:	43db      	mvns	r3, r3
 801a3e0:	693a      	ldr	r2, [r7, #16]
 801a3e2:	4013      	ands	r3, r2
 801a3e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	685b      	ldr	r3, [r3, #4]
 801a3ea:	f003 0203 	and.w	r2, r3, #3
 801a3ee:	697b      	ldr	r3, [r7, #20]
 801a3f0:	005b      	lsls	r3, r3, #1
 801a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 801a3f6:	693a      	ldr	r2, [r7, #16]
 801a3f8:	4313      	orrs	r3, r2
 801a3fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	693a      	ldr	r2, [r7, #16]
 801a400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f000 8098 	beq.w	801a540 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801a410:	4a54      	ldr	r2, [pc, #336]	; (801a564 <HAL_GPIO_Init+0x2c8>)
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	089b      	lsrs	r3, r3, #2
 801a416:	3302      	adds	r3, #2
 801a418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a41c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801a41e:	697b      	ldr	r3, [r7, #20]
 801a420:	f003 0303 	and.w	r3, r3, #3
 801a424:	009b      	lsls	r3, r3, #2
 801a426:	220f      	movs	r2, #15
 801a428:	fa02 f303 	lsl.w	r3, r2, r3
 801a42c:	43db      	mvns	r3, r3
 801a42e:	693a      	ldr	r2, [r7, #16]
 801a430:	4013      	ands	r3, r2
 801a432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801a43a:	d019      	beq.n	801a470 <HAL_GPIO_Init+0x1d4>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	4a4a      	ldr	r2, [pc, #296]	; (801a568 <HAL_GPIO_Init+0x2cc>)
 801a440:	4293      	cmp	r3, r2
 801a442:	d013      	beq.n	801a46c <HAL_GPIO_Init+0x1d0>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	4a49      	ldr	r2, [pc, #292]	; (801a56c <HAL_GPIO_Init+0x2d0>)
 801a448:	4293      	cmp	r3, r2
 801a44a:	d00d      	beq.n	801a468 <HAL_GPIO_Init+0x1cc>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	4a48      	ldr	r2, [pc, #288]	; (801a570 <HAL_GPIO_Init+0x2d4>)
 801a450:	4293      	cmp	r3, r2
 801a452:	d007      	beq.n	801a464 <HAL_GPIO_Init+0x1c8>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	4a47      	ldr	r2, [pc, #284]	; (801a574 <HAL_GPIO_Init+0x2d8>)
 801a458:	4293      	cmp	r3, r2
 801a45a:	d101      	bne.n	801a460 <HAL_GPIO_Init+0x1c4>
 801a45c:	2304      	movs	r3, #4
 801a45e:	e008      	b.n	801a472 <HAL_GPIO_Init+0x1d6>
 801a460:	2307      	movs	r3, #7
 801a462:	e006      	b.n	801a472 <HAL_GPIO_Init+0x1d6>
 801a464:	2303      	movs	r3, #3
 801a466:	e004      	b.n	801a472 <HAL_GPIO_Init+0x1d6>
 801a468:	2302      	movs	r3, #2
 801a46a:	e002      	b.n	801a472 <HAL_GPIO_Init+0x1d6>
 801a46c:	2301      	movs	r3, #1
 801a46e:	e000      	b.n	801a472 <HAL_GPIO_Init+0x1d6>
 801a470:	2300      	movs	r3, #0
 801a472:	697a      	ldr	r2, [r7, #20]
 801a474:	f002 0203 	and.w	r2, r2, #3
 801a478:	0092      	lsls	r2, r2, #2
 801a47a:	4093      	lsls	r3, r2
 801a47c:	693a      	ldr	r2, [r7, #16]
 801a47e:	4313      	orrs	r3, r2
 801a480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801a482:	4938      	ldr	r1, [pc, #224]	; (801a564 <HAL_GPIO_Init+0x2c8>)
 801a484:	697b      	ldr	r3, [r7, #20]
 801a486:	089b      	lsrs	r3, r3, #2
 801a488:	3302      	adds	r3, #2
 801a48a:	693a      	ldr	r2, [r7, #16]
 801a48c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801a490:	4b39      	ldr	r3, [pc, #228]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	43db      	mvns	r3, r3
 801a49a:	693a      	ldr	r2, [r7, #16]
 801a49c:	4013      	ands	r3, r2
 801a49e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d003      	beq.n	801a4b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 801a4ac:	693a      	ldr	r2, [r7, #16]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	4313      	orrs	r3, r2
 801a4b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801a4b4:	4a30      	ldr	r2, [pc, #192]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a4b6:	693b      	ldr	r3, [r7, #16]
 801a4b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801a4ba:	4b2f      	ldr	r3, [pc, #188]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a4bc:	685b      	ldr	r3, [r3, #4]
 801a4be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	43db      	mvns	r3, r3
 801a4c4:	693a      	ldr	r2, [r7, #16]
 801a4c6:	4013      	ands	r3, r2
 801a4c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	685b      	ldr	r3, [r3, #4]
 801a4ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d003      	beq.n	801a4de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801a4d6:	693a      	ldr	r2, [r7, #16]
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	4313      	orrs	r3, r2
 801a4dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801a4de:	4a26      	ldr	r2, [pc, #152]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801a4e4:	4b24      	ldr	r3, [pc, #144]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a4ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	43db      	mvns	r3, r3
 801a4f0:	693a      	ldr	r2, [r7, #16]
 801a4f2:	4013      	ands	r3, r2
 801a4f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d003      	beq.n	801a50a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 801a502:	693a      	ldr	r2, [r7, #16]
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	4313      	orrs	r3, r2
 801a508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801a50a:	4a1b      	ldr	r2, [pc, #108]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a50c:	693b      	ldr	r3, [r7, #16]
 801a50e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801a512:	4b19      	ldr	r3, [pc, #100]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	43db      	mvns	r3, r3
 801a51e:	693a      	ldr	r2, [r7, #16]
 801a520:	4013      	ands	r3, r2
 801a522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801a524:	683b      	ldr	r3, [r7, #0]
 801a526:	685b      	ldr	r3, [r3, #4]
 801a528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d003      	beq.n	801a538 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801a530:	693a      	ldr	r2, [r7, #16]
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	4313      	orrs	r3, r2
 801a536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801a538:	4a0f      	ldr	r2, [pc, #60]	; (801a578 <HAL_GPIO_Init+0x2dc>)
 801a53a:	693b      	ldr	r3, [r7, #16]
 801a53c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	3301      	adds	r3, #1
 801a544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	681a      	ldr	r2, [r3, #0]
 801a54a:	697b      	ldr	r3, [r7, #20]
 801a54c:	fa22 f303 	lsr.w	r3, r2, r3
 801a550:	2b00      	cmp	r3, #0
 801a552:	f47f aeab 	bne.w	801a2ac <HAL_GPIO_Init+0x10>
  }
}
 801a556:	bf00      	nop
 801a558:	bf00      	nop
 801a55a:	371c      	adds	r7, #28
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr
 801a564:	40010000 	.word	0x40010000
 801a568:	48000400 	.word	0x48000400
 801a56c:	48000800 	.word	0x48000800
 801a570:	48000c00 	.word	0x48000c00
 801a574:	48001000 	.word	0x48001000
 801a578:	58000800 	.word	0x58000800

0801a57c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801a57c:	b480      	push	{r7}
 801a57e:	b087      	sub	sp, #28
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801a586:	2300      	movs	r3, #0
 801a588:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801a58a:	e0bb      	b.n	801a704 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801a58c:	2201      	movs	r2, #1
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	fa02 f303 	lsl.w	r3, r2, r3
 801a594:	683a      	ldr	r2, [r7, #0]
 801a596:	4013      	ands	r3, r2
 801a598:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	f000 80ae 	beq.w	801a6fe <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801a5a2:	4a5f      	ldr	r2, [pc, #380]	; (801a720 <HAL_GPIO_DeInit+0x1a4>)
 801a5a4:	697b      	ldr	r3, [r7, #20]
 801a5a6:	089b      	lsrs	r3, r3, #2
 801a5a8:	3302      	adds	r3, #2
 801a5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a5ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801a5b0:	697b      	ldr	r3, [r7, #20]
 801a5b2:	f003 0303 	and.w	r3, r3, #3
 801a5b6:	009b      	lsls	r3, r3, #2
 801a5b8:	220f      	movs	r2, #15
 801a5ba:	fa02 f303 	lsl.w	r3, r2, r3
 801a5be:	68fa      	ldr	r2, [r7, #12]
 801a5c0:	4013      	ands	r3, r2
 801a5c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801a5ca:	d019      	beq.n	801a600 <HAL_GPIO_DeInit+0x84>
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	4a55      	ldr	r2, [pc, #340]	; (801a724 <HAL_GPIO_DeInit+0x1a8>)
 801a5d0:	4293      	cmp	r3, r2
 801a5d2:	d013      	beq.n	801a5fc <HAL_GPIO_DeInit+0x80>
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	4a54      	ldr	r2, [pc, #336]	; (801a728 <HAL_GPIO_DeInit+0x1ac>)
 801a5d8:	4293      	cmp	r3, r2
 801a5da:	d00d      	beq.n	801a5f8 <HAL_GPIO_DeInit+0x7c>
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	4a53      	ldr	r2, [pc, #332]	; (801a72c <HAL_GPIO_DeInit+0x1b0>)
 801a5e0:	4293      	cmp	r3, r2
 801a5e2:	d007      	beq.n	801a5f4 <HAL_GPIO_DeInit+0x78>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	4a52      	ldr	r2, [pc, #328]	; (801a730 <HAL_GPIO_DeInit+0x1b4>)
 801a5e8:	4293      	cmp	r3, r2
 801a5ea:	d101      	bne.n	801a5f0 <HAL_GPIO_DeInit+0x74>
 801a5ec:	2304      	movs	r3, #4
 801a5ee:	e008      	b.n	801a602 <HAL_GPIO_DeInit+0x86>
 801a5f0:	2307      	movs	r3, #7
 801a5f2:	e006      	b.n	801a602 <HAL_GPIO_DeInit+0x86>
 801a5f4:	2303      	movs	r3, #3
 801a5f6:	e004      	b.n	801a602 <HAL_GPIO_DeInit+0x86>
 801a5f8:	2302      	movs	r3, #2
 801a5fa:	e002      	b.n	801a602 <HAL_GPIO_DeInit+0x86>
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	e000      	b.n	801a602 <HAL_GPIO_DeInit+0x86>
 801a600:	2300      	movs	r3, #0
 801a602:	697a      	ldr	r2, [r7, #20]
 801a604:	f002 0203 	and.w	r2, r2, #3
 801a608:	0092      	lsls	r2, r2, #2
 801a60a:	4093      	lsls	r3, r2
 801a60c:	68fa      	ldr	r2, [r7, #12]
 801a60e:	429a      	cmp	r2, r3
 801a610:	d136      	bne.n	801a680 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801a612:	4b48      	ldr	r3, [pc, #288]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a614:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	43db      	mvns	r3, r3
 801a61c:	4945      	ldr	r1, [pc, #276]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a61e:	4013      	ands	r3, r2
 801a620:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 801a624:	4b43      	ldr	r3, [pc, #268]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a626:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a62a:	693b      	ldr	r3, [r7, #16]
 801a62c:	43db      	mvns	r3, r3
 801a62e:	4941      	ldr	r1, [pc, #260]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a630:	4013      	ands	r3, r2
 801a632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 801a636:	4b3f      	ldr	r3, [pc, #252]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a638:	681a      	ldr	r2, [r3, #0]
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	43db      	mvns	r3, r3
 801a63e:	493d      	ldr	r1, [pc, #244]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a640:	4013      	ands	r3, r2
 801a642:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 801a644:	4b3b      	ldr	r3, [pc, #236]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a646:	685a      	ldr	r2, [r3, #4]
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	43db      	mvns	r3, r3
 801a64c:	4939      	ldr	r1, [pc, #228]	; (801a734 <HAL_GPIO_DeInit+0x1b8>)
 801a64e:	4013      	ands	r3, r2
 801a650:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	f003 0303 	and.w	r3, r3, #3
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	220f      	movs	r2, #15
 801a65c:	fa02 f303 	lsl.w	r3, r2, r3
 801a660:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801a662:	4a2f      	ldr	r2, [pc, #188]	; (801a720 <HAL_GPIO_DeInit+0x1a4>)
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	089b      	lsrs	r3, r3, #2
 801a668:	3302      	adds	r3, #2
 801a66a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	43da      	mvns	r2, r3
 801a672:	482b      	ldr	r0, [pc, #172]	; (801a720 <HAL_GPIO_DeInit+0x1a4>)
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	089b      	lsrs	r3, r3, #2
 801a678:	400a      	ands	r2, r1
 801a67a:	3302      	adds	r3, #2
 801a67c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681a      	ldr	r2, [r3, #0]
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	005b      	lsls	r3, r3, #1
 801a688:	2103      	movs	r1, #3
 801a68a:	fa01 f303 	lsl.w	r3, r1, r3
 801a68e:	431a      	orrs	r2, r3
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	08da      	lsrs	r2, r3, #3
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	3208      	adds	r2, #8
 801a69c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a6a0:	697b      	ldr	r3, [r7, #20]
 801a6a2:	f003 0307 	and.w	r3, r3, #7
 801a6a6:	009b      	lsls	r3, r3, #2
 801a6a8:	220f      	movs	r2, #15
 801a6aa:	fa02 f303 	lsl.w	r3, r2, r3
 801a6ae:	43db      	mvns	r3, r3
 801a6b0:	697a      	ldr	r2, [r7, #20]
 801a6b2:	08d2      	lsrs	r2, r2, #3
 801a6b4:	4019      	ands	r1, r3
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	3208      	adds	r2, #8
 801a6ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	68da      	ldr	r2, [r3, #12]
 801a6c2:	697b      	ldr	r3, [r7, #20]
 801a6c4:	005b      	lsls	r3, r3, #1
 801a6c6:	2103      	movs	r1, #3
 801a6c8:	fa01 f303 	lsl.w	r3, r1, r3
 801a6cc:	43db      	mvns	r3, r3
 801a6ce:	401a      	ands	r2, r3
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	685a      	ldr	r2, [r3, #4]
 801a6d8:	2101      	movs	r1, #1
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	fa01 f303 	lsl.w	r3, r1, r3
 801a6e0:	43db      	mvns	r3, r3
 801a6e2:	401a      	ands	r2, r3
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	689a      	ldr	r2, [r3, #8]
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	005b      	lsls	r3, r3, #1
 801a6f0:	2103      	movs	r1, #3
 801a6f2:	fa01 f303 	lsl.w	r3, r1, r3
 801a6f6:	43db      	mvns	r3, r3
 801a6f8:	401a      	ands	r2, r3
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	609a      	str	r2, [r3, #8]
    }

    position++;
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	3301      	adds	r3, #1
 801a702:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801a704:	683a      	ldr	r2, [r7, #0]
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	fa22 f303 	lsr.w	r3, r2, r3
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	f47f af3d 	bne.w	801a58c <HAL_GPIO_DeInit+0x10>
  }
}
 801a712:	bf00      	nop
 801a714:	bf00      	nop
 801a716:	371c      	adds	r7, #28
 801a718:	46bd      	mov	sp, r7
 801a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71e:	4770      	bx	lr
 801a720:	40010000 	.word	0x40010000
 801a724:	48000400 	.word	0x48000400
 801a728:	48000800 	.word	0x48000800
 801a72c:	48000c00 	.word	0x48000c00
 801a730:	48001000 	.word	0x48001000
 801a734:	58000800 	.word	0x58000800

0801a738 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a738:	b480      	push	{r7}
 801a73a:	b085      	sub	sp, #20
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]
 801a740:	460b      	mov	r3, r1
 801a742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	691a      	ldr	r2, [r3, #16]
 801a748:	887b      	ldrh	r3, [r7, #2]
 801a74a:	4013      	ands	r3, r2
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d002      	beq.n	801a756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801a750:	2301      	movs	r3, #1
 801a752:	73fb      	strb	r3, [r7, #15]
 801a754:	e001      	b.n	801a75a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801a756:	2300      	movs	r3, #0
 801a758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801a75a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3714      	adds	r7, #20
 801a760:	46bd      	mov	sp, r7
 801a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a766:	4770      	bx	lr

0801a768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a768:	b480      	push	{r7}
 801a76a:	b083      	sub	sp, #12
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
 801a770:	460b      	mov	r3, r1
 801a772:	807b      	strh	r3, [r7, #2]
 801a774:	4613      	mov	r3, r2
 801a776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801a778:	787b      	ldrb	r3, [r7, #1]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d003      	beq.n	801a786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801a77e:	887a      	ldrh	r2, [r7, #2]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801a784:	e002      	b.n	801a78c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801a786:	887a      	ldrh	r2, [r7, #2]
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801a78c:	bf00      	nop
 801a78e:	370c      	adds	r7, #12
 801a790:	46bd      	mov	sp, r7
 801a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a796:	4770      	bx	lr

0801a798 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a798:	b480      	push	{r7}
 801a79a:	b085      	sub	sp, #20
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	695b      	ldr	r3, [r3, #20]
 801a7a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801a7aa:	887a      	ldrh	r2, [r7, #2]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	4013      	ands	r3, r2
 801a7b0:	041a      	lsls	r2, r3, #16
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	43d9      	mvns	r1, r3
 801a7b6:	887b      	ldrh	r3, [r7, #2]
 801a7b8:	400b      	ands	r3, r1
 801a7ba:	431a      	orrs	r2, r3
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	619a      	str	r2, [r3, #24]
}
 801a7c0:	bf00      	nop
 801a7c2:	3714      	adds	r7, #20
 801a7c4:	46bd      	mov	sp, r7
 801a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ca:	4770      	bx	lr

0801a7cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b082      	sub	sp, #8
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801a7d6:	4b08      	ldr	r3, [pc, #32]	; (801a7f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801a7d8:	68da      	ldr	r2, [r3, #12]
 801a7da:	88fb      	ldrh	r3, [r7, #6]
 801a7dc:	4013      	ands	r3, r2
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d006      	beq.n	801a7f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801a7e2:	4a05      	ldr	r2, [pc, #20]	; (801a7f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801a7e4:	88fb      	ldrh	r3, [r7, #6]
 801a7e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801a7e8:	88fb      	ldrh	r3, [r7, #6]
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f000 f806 	bl	801a7fc <HAL_GPIO_EXTI_Callback>
  }
}
 801a7f0:	bf00      	nop
 801a7f2:	3708      	adds	r7, #8
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	58000800 	.word	0x58000800

0801a7fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801a7fc:	b480      	push	{r7}
 801a7fe:	b083      	sub	sp, #12
 801a800:	af00      	add	r7, sp, #0
 801a802:	4603      	mov	r3, r0
 801a804:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801a806:	bf00      	nop
 801a808:	370c      	adds	r7, #12
 801a80a:	46bd      	mov	sp, r7
 801a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a810:	4770      	bx	lr
	...

0801a814 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 801a81a:	4b0a      	ldr	r3, [pc, #40]	; (801a844 <HAL_HSEM_IRQHandler+0x30>)
 801a81c:	68db      	ldr	r3, [r3, #12]
 801a81e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 801a820:	4b08      	ldr	r3, [pc, #32]	; (801a844 <HAL_HSEM_IRQHandler+0x30>)
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	43db      	mvns	r3, r3
 801a828:	4906      	ldr	r1, [pc, #24]	; (801a844 <HAL_HSEM_IRQHandler+0x30>)
 801a82a:	4013      	ands	r3, r2
 801a82c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 801a82e:	4a05      	ldr	r2, [pc, #20]	; (801a844 <HAL_HSEM_IRQHandler+0x30>)
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 801a834:	6878      	ldr	r0, [r7, #4]
 801a836:	f000 f807 	bl	801a848 <HAL_HSEM_FreeCallback>
}
 801a83a:	bf00      	nop
 801a83c:	3708      	adds	r7, #8
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}
 801a842:	bf00      	nop
 801a844:	58001500 	.word	0x58001500

0801a848 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 801a848:	b480      	push	{r7}
 801a84a:	b083      	sub	sp, #12
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 801a850:	bf00      	nop
 801a852:	370c      	adds	r7, #12
 801a854:	46bd      	mov	sp, r7
 801a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a85a:	4770      	bx	lr

0801a85c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b082      	sub	sp, #8
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d101      	bne.n	801a86e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801a86a:	2301      	movs	r3, #1
 801a86c:	e081      	b.n	801a972 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a874:	b2db      	uxtb	r3, r3
 801a876:	2b00      	cmp	r3, #0
 801a878:	d106      	bne.n	801a888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	2200      	movs	r2, #0
 801a87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801a882:	6878      	ldr	r0, [r7, #4]
 801a884:	f7e7 ff92 	bl	80027ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2224      	movs	r2, #36	; 0x24
 801a88c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	681a      	ldr	r2, [r3, #0]
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	f022 0201 	bic.w	r2, r2, #1
 801a89e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	685a      	ldr	r2, [r3, #4]
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801a8ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	689a      	ldr	r2, [r3, #8]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a8bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	68db      	ldr	r3, [r3, #12]
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	d107      	bne.n	801a8d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	689a      	ldr	r2, [r3, #8]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a8d2:	609a      	str	r2, [r3, #8]
 801a8d4:	e006      	b.n	801a8e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	689a      	ldr	r2, [r3, #8]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801a8e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	68db      	ldr	r3, [r3, #12]
 801a8e8:	2b02      	cmp	r3, #2
 801a8ea:	d104      	bne.n	801a8f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a8f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	685b      	ldr	r3, [r3, #4]
 801a8fc:	687a      	ldr	r2, [r7, #4]
 801a8fe:	6812      	ldr	r2, [r2, #0]
 801a900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	68da      	ldr	r2, [r3, #12]
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	691a      	ldr	r2, [r3, #16]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	695b      	ldr	r3, [r3, #20]
 801a922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	699b      	ldr	r3, [r3, #24]
 801a92a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	430a      	orrs	r2, r1
 801a932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	69d9      	ldr	r1, [r3, #28]
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	6a1a      	ldr	r2, [r3, #32]
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	430a      	orrs	r2, r1
 801a942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	681a      	ldr	r2, [r3, #0]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	f042 0201 	orr.w	r2, r2, #1
 801a952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2200      	movs	r2, #0
 801a958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	2220      	movs	r2, #32
 801a95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2200      	movs	r2, #0
 801a966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2200      	movs	r2, #0
 801a96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801a970:	2300      	movs	r3, #0
}
 801a972:	4618      	mov	r0, r3
 801a974:	3708      	adds	r7, #8
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}

0801a97a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b082      	sub	sp, #8
 801a97e:	af00      	add	r7, sp, #0
 801a980:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d101      	bne.n	801a98c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801a988:	2301      	movs	r3, #1
 801a98a:	e021      	b.n	801a9d0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2224      	movs	r2, #36	; 0x24
 801a990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	681a      	ldr	r2, [r3, #0]
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	f022 0201 	bic.w	r2, r2, #1
 801a9a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	f7e7 ff5d 	bl	8002864 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801a9ce:	2300      	movs	r3, #0
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	3708      	adds	r7, #8
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b088      	sub	sp, #32
 801a9dc:	af02      	add	r7, sp, #8
 801a9de:	60f8      	str	r0, [r7, #12]
 801a9e0:	607a      	str	r2, [r7, #4]
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	817b      	strh	r3, [r7, #10]
 801a9e8:	4613      	mov	r3, r2
 801a9ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	2b20      	cmp	r3, #32
 801a9f6:	f040 80da 	bne.w	801abae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa00:	2b01      	cmp	r3, #1
 801aa02:	d101      	bne.n	801aa08 <HAL_I2C_Master_Transmit+0x30>
 801aa04:	2302      	movs	r3, #2
 801aa06:	e0d3      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	2201      	movs	r2, #1
 801aa0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801aa10:	f7fe ff54 	bl	80198bc <HAL_GetTick>
 801aa14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801aa16:	697b      	ldr	r3, [r7, #20]
 801aa18:	9300      	str	r3, [sp, #0]
 801aa1a:	2319      	movs	r3, #25
 801aa1c:	2201      	movs	r2, #1
 801aa1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801aa22:	68f8      	ldr	r0, [r7, #12]
 801aa24:	f000 fc76 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d001      	beq.n	801aa32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 801aa2e:	2301      	movs	r3, #1
 801aa30:	e0be      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	2221      	movs	r2, #33	; 0x21
 801aa36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	2210      	movs	r2, #16
 801aa3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	2200      	movs	r2, #0
 801aa46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	687a      	ldr	r2, [r7, #4]
 801aa4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	893a      	ldrh	r2, [r7, #8]
 801aa52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	2200      	movs	r2, #0
 801aa58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aa5e:	b29b      	uxth	r3, r3
 801aa60:	2bff      	cmp	r3, #255	; 0xff
 801aa62:	d90e      	bls.n	801aa82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	22ff      	movs	r2, #255	; 0xff
 801aa68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa6e:	b2da      	uxtb	r2, r3
 801aa70:	8979      	ldrh	r1, [r7, #10]
 801aa72:	4b51      	ldr	r3, [pc, #324]	; (801abb8 <HAL_I2C_Master_Transmit+0x1e0>)
 801aa74:	9300      	str	r3, [sp, #0]
 801aa76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801aa7a:	68f8      	ldr	r0, [r7, #12]
 801aa7c:	f000 fe86 	bl	801b78c <I2C_TransferConfig>
 801aa80:	e06c      	b.n	801ab5c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aa86:	b29a      	uxth	r2, r3
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa90:	b2da      	uxtb	r2, r3
 801aa92:	8979      	ldrh	r1, [r7, #10]
 801aa94:	4b48      	ldr	r3, [pc, #288]	; (801abb8 <HAL_I2C_Master_Transmit+0x1e0>)
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801aa9c:	68f8      	ldr	r0, [r7, #12]
 801aa9e:	f000 fe75 	bl	801b78c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801aaa2:	e05b      	b.n	801ab5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801aaa4:	697a      	ldr	r2, [r7, #20]
 801aaa6:	6a39      	ldr	r1, [r7, #32]
 801aaa8:	68f8      	ldr	r0, [r7, #12]
 801aaaa:	f000 fc82 	bl	801b3b2 <I2C_WaitOnTXISFlagUntilTimeout>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d001      	beq.n	801aab8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801aab4:	2301      	movs	r3, #1
 801aab6:	e07b      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aabc:	781a      	ldrb	r2, [r3, #0]
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aac8:	1c5a      	adds	r2, r3, #1
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	3b01      	subs	r3, #1
 801aad6:	b29a      	uxth	r2, r3
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aae0:	3b01      	subs	r3, #1
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d034      	beq.n	801ab5c <HAL_I2C_Master_Transmit+0x184>
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d130      	bne.n	801ab5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	9300      	str	r3, [sp, #0]
 801aafe:	6a3b      	ldr	r3, [r7, #32]
 801ab00:	2200      	movs	r2, #0
 801ab02:	2180      	movs	r1, #128	; 0x80
 801ab04:	68f8      	ldr	r0, [r7, #12]
 801ab06:	f000 fc05 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d001      	beq.n	801ab14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801ab10:	2301      	movs	r3, #1
 801ab12:	e04d      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ab18:	b29b      	uxth	r3, r3
 801ab1a:	2bff      	cmp	r3, #255	; 0xff
 801ab1c:	d90e      	bls.n	801ab3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	22ff      	movs	r2, #255	; 0xff
 801ab22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	8979      	ldrh	r1, [r7, #10]
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	9300      	str	r3, [sp, #0]
 801ab30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ab34:	68f8      	ldr	r0, [r7, #12]
 801ab36:	f000 fe29 	bl	801b78c <I2C_TransferConfig>
 801ab3a:	e00f      	b.n	801ab5c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ab40:	b29a      	uxth	r2, r3
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab4a:	b2da      	uxtb	r2, r3
 801ab4c:	8979      	ldrh	r1, [r7, #10]
 801ab4e:	2300      	movs	r3, #0
 801ab50:	9300      	str	r3, [sp, #0]
 801ab52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ab56:	68f8      	ldr	r0, [r7, #12]
 801ab58:	f000 fe18 	bl	801b78c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ab60:	b29b      	uxth	r3, r3
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d19e      	bne.n	801aaa4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ab66:	697a      	ldr	r2, [r7, #20]
 801ab68:	6a39      	ldr	r1, [r7, #32]
 801ab6a:	68f8      	ldr	r0, [r7, #12]
 801ab6c:	f000 fc68 	bl	801b440 <I2C_WaitOnSTOPFlagUntilTimeout>
 801ab70:	4603      	mov	r3, r0
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d001      	beq.n	801ab7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801ab76:	2301      	movs	r3, #1
 801ab78:	e01a      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2220      	movs	r2, #32
 801ab80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	6859      	ldr	r1, [r3, #4]
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	681a      	ldr	r2, [r3, #0]
 801ab8c:	4b0b      	ldr	r3, [pc, #44]	; (801abbc <HAL_I2C_Master_Transmit+0x1e4>)
 801ab8e:	400b      	ands	r3, r1
 801ab90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	2220      	movs	r2, #32
 801ab96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	2200      	movs	r2, #0
 801aba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801abaa:	2300      	movs	r3, #0
 801abac:	e000      	b.n	801abb0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801abae:	2302      	movs	r3, #2
  }
}
 801abb0:	4618      	mov	r0, r3
 801abb2:	3718      	adds	r7, #24
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}
 801abb8:	80002000 	.word	0x80002000
 801abbc:	fe00e800 	.word	0xfe00e800

0801abc0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b088      	sub	sp, #32
 801abc4:	af02      	add	r7, sp, #8
 801abc6:	60f8      	str	r0, [r7, #12]
 801abc8:	607a      	str	r2, [r7, #4]
 801abca:	461a      	mov	r2, r3
 801abcc:	460b      	mov	r3, r1
 801abce:	817b      	strh	r3, [r7, #10]
 801abd0:	4613      	mov	r3, r2
 801abd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	2b20      	cmp	r3, #32
 801abde:	f040 80db 	bne.w	801ad98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801abe8:	2b01      	cmp	r3, #1
 801abea:	d101      	bne.n	801abf0 <HAL_I2C_Master_Receive+0x30>
 801abec:	2302      	movs	r3, #2
 801abee:	e0d4      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	2201      	movs	r2, #1
 801abf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801abf8:	f7fe fe60 	bl	80198bc <HAL_GetTick>
 801abfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	9300      	str	r3, [sp, #0]
 801ac02:	2319      	movs	r3, #25
 801ac04:	2201      	movs	r2, #1
 801ac06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ac0a:	68f8      	ldr	r0, [r7, #12]
 801ac0c:	f000 fb82 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801ac10:	4603      	mov	r3, r0
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d001      	beq.n	801ac1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801ac16:	2301      	movs	r3, #1
 801ac18:	e0bf      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	2222      	movs	r2, #34	; 0x22
 801ac1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	2210      	movs	r2, #16
 801ac26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	687a      	ldr	r2, [r7, #4]
 801ac34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	893a      	ldrh	r2, [r7, #8]
 801ac3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	2200      	movs	r2, #0
 801ac40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	2bff      	cmp	r3, #255	; 0xff
 801ac4a:	d90e      	bls.n	801ac6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	22ff      	movs	r2, #255	; 0xff
 801ac50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac56:	b2da      	uxtb	r2, r3
 801ac58:	8979      	ldrh	r1, [r7, #10]
 801ac5a:	4b52      	ldr	r3, [pc, #328]	; (801ada4 <HAL_I2C_Master_Receive+0x1e4>)
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ac62:	68f8      	ldr	r0, [r7, #12]
 801ac64:	f000 fd92 	bl	801b78c <I2C_TransferConfig>
 801ac68:	e06d      	b.n	801ad46 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ac6e:	b29a      	uxth	r2, r3
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac78:	b2da      	uxtb	r2, r3
 801ac7a:	8979      	ldrh	r1, [r7, #10]
 801ac7c:	4b49      	ldr	r3, [pc, #292]	; (801ada4 <HAL_I2C_Master_Receive+0x1e4>)
 801ac7e:	9300      	str	r3, [sp, #0]
 801ac80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ac84:	68f8      	ldr	r0, [r7, #12]
 801ac86:	f000 fd81 	bl	801b78c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801ac8a:	e05c      	b.n	801ad46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ac8c:	697a      	ldr	r2, [r7, #20]
 801ac8e:	6a39      	ldr	r1, [r7, #32]
 801ac90:	68f8      	ldr	r0, [r7, #12]
 801ac92:	f000 fc19 	bl	801b4c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 801ac96:	4603      	mov	r3, r0
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d001      	beq.n	801aca0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801ac9c:	2301      	movs	r3, #1
 801ac9e:	e07c      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acaa:	b2d2      	uxtb	r2, r2
 801acac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acb2:	1c5a      	adds	r2, r3, #1
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acbc:	3b01      	subs	r3, #1
 801acbe:	b29a      	uxth	r2, r3
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801acc8:	b29b      	uxth	r3, r3
 801acca:	3b01      	subs	r3, #1
 801accc:	b29a      	uxth	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801acd6:	b29b      	uxth	r3, r3
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d034      	beq.n	801ad46 <HAL_I2C_Master_Receive+0x186>
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d130      	bne.n	801ad46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	9300      	str	r3, [sp, #0]
 801ace8:	6a3b      	ldr	r3, [r7, #32]
 801acea:	2200      	movs	r2, #0
 801acec:	2180      	movs	r1, #128	; 0x80
 801acee:	68f8      	ldr	r0, [r7, #12]
 801acf0:	f000 fb10 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d001      	beq.n	801acfe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801acfa:	2301      	movs	r3, #1
 801acfc:	e04d      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	2bff      	cmp	r3, #255	; 0xff
 801ad06:	d90e      	bls.n	801ad26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	22ff      	movs	r2, #255	; 0xff
 801ad0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad12:	b2da      	uxtb	r2, r3
 801ad14:	8979      	ldrh	r1, [r7, #10]
 801ad16:	2300      	movs	r3, #0
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ad1e:	68f8      	ldr	r0, [r7, #12]
 801ad20:	f000 fd34 	bl	801b78c <I2C_TransferConfig>
 801ad24:	e00f      	b.n	801ad46 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad2a:	b29a      	uxth	r2, r3
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad34:	b2da      	uxtb	r2, r3
 801ad36:	8979      	ldrh	r1, [r7, #10]
 801ad38:	2300      	movs	r3, #0
 801ad3a:	9300      	str	r3, [sp, #0]
 801ad3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ad40:	68f8      	ldr	r0, [r7, #12]
 801ad42:	f000 fd23 	bl	801b78c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d19d      	bne.n	801ac8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ad50:	697a      	ldr	r2, [r7, #20]
 801ad52:	6a39      	ldr	r1, [r7, #32]
 801ad54:	68f8      	ldr	r0, [r7, #12]
 801ad56:	f000 fb73 	bl	801b440 <I2C_WaitOnSTOPFlagUntilTimeout>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d001      	beq.n	801ad64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 801ad60:	2301      	movs	r3, #1
 801ad62:	e01a      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	2220      	movs	r2, #32
 801ad6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	6859      	ldr	r1, [r3, #4]
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	681a      	ldr	r2, [r3, #0]
 801ad76:	4b0c      	ldr	r3, [pc, #48]	; (801ada8 <HAL_I2C_Master_Receive+0x1e8>)
 801ad78:	400b      	ands	r3, r1
 801ad7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	2220      	movs	r2, #32
 801ad80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	2200      	movs	r2, #0
 801ad88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	2200      	movs	r2, #0
 801ad90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801ad94:	2300      	movs	r3, #0
 801ad96:	e000      	b.n	801ad9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801ad98:	2302      	movs	r3, #2
  }
}
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	3718      	adds	r7, #24
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	bf00      	nop
 801ada4:	80002400 	.word	0x80002400
 801ada8:	fe00e800 	.word	0xfe00e800

0801adac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b088      	sub	sp, #32
 801adb0:	af02      	add	r7, sp, #8
 801adb2:	60f8      	str	r0, [r7, #12]
 801adb4:	4608      	mov	r0, r1
 801adb6:	4611      	mov	r1, r2
 801adb8:	461a      	mov	r2, r3
 801adba:	4603      	mov	r3, r0
 801adbc:	817b      	strh	r3, [r7, #10]
 801adbe:	460b      	mov	r3, r1
 801adc0:	813b      	strh	r3, [r7, #8]
 801adc2:	4613      	mov	r3, r2
 801adc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801adcc:	b2db      	uxtb	r3, r3
 801adce:	2b20      	cmp	r3, #32
 801add0:	f040 80fd 	bne.w	801afce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801add4:	6a3b      	ldr	r3, [r7, #32]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d002      	beq.n	801ade0 <HAL_I2C_Mem_Read+0x34>
 801adda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801addc:	2b00      	cmp	r3, #0
 801adde:	d105      	bne.n	801adec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ade6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801ade8:	2301      	movs	r3, #1
 801adea:	e0f1      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801adf2:	2b01      	cmp	r3, #1
 801adf4:	d101      	bne.n	801adfa <HAL_I2C_Mem_Read+0x4e>
 801adf6:	2302      	movs	r3, #2
 801adf8:	e0ea      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
 801adfa:	68fb      	ldr	r3, [r7, #12]
 801adfc:	2201      	movs	r2, #1
 801adfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801ae02:	f7fe fd5b 	bl	80198bc <HAL_GetTick>
 801ae06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	9300      	str	r3, [sp, #0]
 801ae0c:	2319      	movs	r3, #25
 801ae0e:	2201      	movs	r2, #1
 801ae10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ae14:	68f8      	ldr	r0, [r7, #12]
 801ae16:	f000 fa7d 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d001      	beq.n	801ae24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801ae20:	2301      	movs	r3, #1
 801ae22:	e0d5      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	2222      	movs	r2, #34	; 0x22
 801ae28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	2240      	movs	r2, #64	; 0x40
 801ae30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	2200      	movs	r2, #0
 801ae38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	6a3a      	ldr	r2, [r7, #32]
 801ae3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	2200      	movs	r2, #0
 801ae4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801ae4c:	88f8      	ldrh	r0, [r7, #6]
 801ae4e:	893a      	ldrh	r2, [r7, #8]
 801ae50:	8979      	ldrh	r1, [r7, #10]
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	9301      	str	r3, [sp, #4]
 801ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae58:	9300      	str	r3, [sp, #0]
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	68f8      	ldr	r0, [r7, #12]
 801ae5e:	f000 f9e1 	bl	801b224 <I2C_RequestMemoryRead>
 801ae62:	4603      	mov	r3, r0
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d005      	beq.n	801ae74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801ae70:	2301      	movs	r3, #1
 801ae72:	e0ad      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	2bff      	cmp	r3, #255	; 0xff
 801ae7c:	d90e      	bls.n	801ae9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	22ff      	movs	r2, #255	; 0xff
 801ae82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ae88:	b2da      	uxtb	r2, r3
 801ae8a:	8979      	ldrh	r1, [r7, #10]
 801ae8c:	4b52      	ldr	r3, [pc, #328]	; (801afd8 <HAL_I2C_Mem_Read+0x22c>)
 801ae8e:	9300      	str	r3, [sp, #0]
 801ae90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ae94:	68f8      	ldr	r0, [r7, #12]
 801ae96:	f000 fc79 	bl	801b78c <I2C_TransferConfig>
 801ae9a:	e00f      	b.n	801aebc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aea0:	b29a      	uxth	r2, r3
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aeaa:	b2da      	uxtb	r2, r3
 801aeac:	8979      	ldrh	r1, [r7, #10]
 801aeae:	4b4a      	ldr	r3, [pc, #296]	; (801afd8 <HAL_I2C_Mem_Read+0x22c>)
 801aeb0:	9300      	str	r3, [sp, #0]
 801aeb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801aeb6:	68f8      	ldr	r0, [r7, #12]
 801aeb8:	f000 fc68 	bl	801b78c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801aebc:	697b      	ldr	r3, [r7, #20]
 801aebe:	9300      	str	r3, [sp, #0]
 801aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aec2:	2200      	movs	r2, #0
 801aec4:	2104      	movs	r1, #4
 801aec6:	68f8      	ldr	r0, [r7, #12]
 801aec8:	f000 fa24 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801aecc:	4603      	mov	r3, r0
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d001      	beq.n	801aed6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801aed2:	2301      	movs	r3, #1
 801aed4:	e07c      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aee0:	b2d2      	uxtb	r2, r2
 801aee2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aee8:	1c5a      	adds	r2, r3, #1
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aef2:	3b01      	subs	r3, #1
 801aef4:	b29a      	uxth	r2, r3
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aefe:	b29b      	uxth	r3, r3
 801af00:	3b01      	subs	r3, #1
 801af02:	b29a      	uxth	r2, r3
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af0c:	b29b      	uxth	r3, r3
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d034      	beq.n	801af7c <HAL_I2C_Mem_Read+0x1d0>
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801af16:	2b00      	cmp	r3, #0
 801af18:	d130      	bne.n	801af7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801af1a:	697b      	ldr	r3, [r7, #20]
 801af1c:	9300      	str	r3, [sp, #0]
 801af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af20:	2200      	movs	r2, #0
 801af22:	2180      	movs	r1, #128	; 0x80
 801af24:	68f8      	ldr	r0, [r7, #12]
 801af26:	f000 f9f5 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801af2a:	4603      	mov	r3, r0
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d001      	beq.n	801af34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801af30:	2301      	movs	r3, #1
 801af32:	e04d      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af38:	b29b      	uxth	r3, r3
 801af3a:	2bff      	cmp	r3, #255	; 0xff
 801af3c:	d90e      	bls.n	801af5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	22ff      	movs	r2, #255	; 0xff
 801af42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801af48:	b2da      	uxtb	r2, r3
 801af4a:	8979      	ldrh	r1, [r7, #10]
 801af4c:	2300      	movs	r3, #0
 801af4e:	9300      	str	r3, [sp, #0]
 801af50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801af54:	68f8      	ldr	r0, [r7, #12]
 801af56:	f000 fc19 	bl	801b78c <I2C_TransferConfig>
 801af5a:	e00f      	b.n	801af7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af60:	b29a      	uxth	r2, r3
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801af6a:	b2da      	uxtb	r2, r3
 801af6c:	8979      	ldrh	r1, [r7, #10]
 801af6e:	2300      	movs	r3, #0
 801af70:	9300      	str	r3, [sp, #0]
 801af72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801af76:	68f8      	ldr	r0, [r7, #12]
 801af78:	f000 fc08 	bl	801b78c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af80:	b29b      	uxth	r3, r3
 801af82:	2b00      	cmp	r3, #0
 801af84:	d19a      	bne.n	801aebc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801af86:	697a      	ldr	r2, [r7, #20]
 801af88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801af8a:	68f8      	ldr	r0, [r7, #12]
 801af8c:	f000 fa58 	bl	801b440 <I2C_WaitOnSTOPFlagUntilTimeout>
 801af90:	4603      	mov	r3, r0
 801af92:	2b00      	cmp	r3, #0
 801af94:	d001      	beq.n	801af9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801af96:	2301      	movs	r3, #1
 801af98:	e01a      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2220      	movs	r2, #32
 801afa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	6859      	ldr	r1, [r3, #4]
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	681a      	ldr	r2, [r3, #0]
 801afac:	4b0b      	ldr	r3, [pc, #44]	; (801afdc <HAL_I2C_Mem_Read+0x230>)
 801afae:	400b      	ands	r3, r1
 801afb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	2220      	movs	r2, #32
 801afb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	2200      	movs	r2, #0
 801afbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	2200      	movs	r2, #0
 801afc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801afca:	2300      	movs	r3, #0
 801afcc:	e000      	b.n	801afd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801afce:	2302      	movs	r3, #2
  }
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	3718      	adds	r7, #24
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}
 801afd8:	80002400 	.word	0x80002400
 801afdc:	fe00e800 	.word	0xfe00e800

0801afe0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b08a      	sub	sp, #40	; 0x28
 801afe4:	af02      	add	r7, sp, #8
 801afe6:	60f8      	str	r0, [r7, #12]
 801afe8:	607a      	str	r2, [r7, #4]
 801afea:	603b      	str	r3, [r7, #0]
 801afec:	460b      	mov	r3, r1
 801afee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801aff0:	2300      	movs	r3, #0
 801aff2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801affa:	b2db      	uxtb	r3, r3
 801affc:	2b20      	cmp	r3, #32
 801affe:	f040 80f1 	bne.w	801b1e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	699b      	ldr	r3, [r3, #24]
 801b008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b010:	d101      	bne.n	801b016 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801b012:	2302      	movs	r3, #2
 801b014:	e0e7      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b01c:	2b01      	cmp	r3, #1
 801b01e:	d101      	bne.n	801b024 <HAL_I2C_IsDeviceReady+0x44>
 801b020:	2302      	movs	r3, #2
 801b022:	e0e0      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	2201      	movs	r2, #1
 801b028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	2224      	movs	r2, #36	; 0x24
 801b030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	2200      	movs	r2, #0
 801b038:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	68db      	ldr	r3, [r3, #12]
 801b03e:	2b01      	cmp	r3, #1
 801b040:	d107      	bne.n	801b052 <HAL_I2C_IsDeviceReady+0x72>
 801b042:	897b      	ldrh	r3, [r7, #10]
 801b044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b04c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b050:	e004      	b.n	801b05c <HAL_I2C_IsDeviceReady+0x7c>
 801b052:	897b      	ldrh	r3, [r7, #10]
 801b054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b058:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 801b05c:	68fa      	ldr	r2, [r7, #12]
 801b05e:	6812      	ldr	r2, [r2, #0]
 801b060:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 801b062:	f7fe fc2b 	bl	80198bc <HAL_GetTick>
 801b066:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	699b      	ldr	r3, [r3, #24]
 801b06e:	f003 0320 	and.w	r3, r3, #32
 801b072:	2b20      	cmp	r3, #32
 801b074:	bf0c      	ite	eq
 801b076:	2301      	moveq	r3, #1
 801b078:	2300      	movne	r3, #0
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	699b      	ldr	r3, [r3, #24]
 801b084:	f003 0310 	and.w	r3, r3, #16
 801b088:	2b10      	cmp	r3, #16
 801b08a:	bf0c      	ite	eq
 801b08c:	2301      	moveq	r3, #1
 801b08e:	2300      	movne	r3, #0
 801b090:	b2db      	uxtb	r3, r3
 801b092:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801b094:	e034      	b.n	801b100 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b09c:	d01a      	beq.n	801b0d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b09e:	f7fe fc0d 	bl	80198bc <HAL_GetTick>
 801b0a2:	4602      	mov	r2, r0
 801b0a4:	69bb      	ldr	r3, [r7, #24]
 801b0a6:	1ad3      	subs	r3, r2, r3
 801b0a8:	683a      	ldr	r2, [r7, #0]
 801b0aa:	429a      	cmp	r2, r3
 801b0ac:	d302      	bcc.n	801b0b4 <HAL_I2C_IsDeviceReady+0xd4>
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d10f      	bne.n	801b0d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	2220      	movs	r2, #32
 801b0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0c0:	f043 0220 	orr.w	r2, r3, #32
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	e088      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	699b      	ldr	r3, [r3, #24]
 801b0da:	f003 0320 	and.w	r3, r3, #32
 801b0de:	2b20      	cmp	r3, #32
 801b0e0:	bf0c      	ite	eq
 801b0e2:	2301      	moveq	r3, #1
 801b0e4:	2300      	movne	r3, #0
 801b0e6:	b2db      	uxtb	r3, r3
 801b0e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	699b      	ldr	r3, [r3, #24]
 801b0f0:	f003 0310 	and.w	r3, r3, #16
 801b0f4:	2b10      	cmp	r3, #16
 801b0f6:	bf0c      	ite	eq
 801b0f8:	2301      	moveq	r3, #1
 801b0fa:	2300      	movne	r3, #0
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801b100:	7ffb      	ldrb	r3, [r7, #31]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d102      	bne.n	801b10c <HAL_I2C_IsDeviceReady+0x12c>
 801b106:	7fbb      	ldrb	r3, [r7, #30]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d0c4      	beq.n	801b096 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	699b      	ldr	r3, [r3, #24]
 801b112:	f003 0310 	and.w	r3, r3, #16
 801b116:	2b10      	cmp	r3, #16
 801b118:	d01a      	beq.n	801b150 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801b11a:	69bb      	ldr	r3, [r7, #24]
 801b11c:	9300      	str	r3, [sp, #0]
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	2200      	movs	r2, #0
 801b122:	2120      	movs	r1, #32
 801b124:	68f8      	ldr	r0, [r7, #12]
 801b126:	f000 f8f5 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801b12a:	4603      	mov	r3, r0
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d001      	beq.n	801b134 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 801b130:	2301      	movs	r3, #1
 801b132:	e058      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	2220      	movs	r2, #32
 801b13a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	2220      	movs	r2, #32
 801b140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	2200      	movs	r2, #0
 801b148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 801b14c:	2300      	movs	r3, #0
 801b14e:	e04a      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801b150:	69bb      	ldr	r3, [r7, #24]
 801b152:	9300      	str	r3, [sp, #0]
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	2200      	movs	r2, #0
 801b158:	2120      	movs	r1, #32
 801b15a:	68f8      	ldr	r0, [r7, #12]
 801b15c:	f000 f8da 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801b160:	4603      	mov	r3, r0
 801b162:	2b00      	cmp	r3, #0
 801b164:	d001      	beq.n	801b16a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 801b166:	2301      	movs	r3, #1
 801b168:	e03d      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	2210      	movs	r2, #16
 801b170:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	2220      	movs	r2, #32
 801b178:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 801b17a:	697b      	ldr	r3, [r7, #20]
 801b17c:	687a      	ldr	r2, [r7, #4]
 801b17e:	429a      	cmp	r2, r3
 801b180:	d118      	bne.n	801b1b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	685a      	ldr	r2, [r3, #4]
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b190:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801b192:	69bb      	ldr	r3, [r7, #24]
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	2200      	movs	r2, #0
 801b19a:	2120      	movs	r1, #32
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f000 f8b9 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d001      	beq.n	801b1ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	e01c      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	2220      	movs	r2, #32
 801b1b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	3301      	adds	r3, #1
 801b1b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 801b1ba:	697b      	ldr	r3, [r7, #20]
 801b1bc:	687a      	ldr	r2, [r7, #4]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	f63f af3b 	bhi.w	801b03a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	2220      	movs	r2, #32
 801b1c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1d0:	f043 0220 	orr.w	r2, r3, #32
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	2200      	movs	r2, #0
 801b1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801b1e0:	2301      	movs	r3, #1
 801b1e2:	e000      	b.n	801b1e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 801b1e4:	2302      	movs	r3, #2
  }
}
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	3720      	adds	r7, #32
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}

0801b1ee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801b1ee:	b480      	push	{r7}
 801b1f0:	b083      	sub	sp, #12
 801b1f2:	af00      	add	r7, sp, #0
 801b1f4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b1fc:	b2db      	uxtb	r3, r3
}
 801b1fe:	4618      	mov	r0, r3
 801b200:	370c      	adds	r7, #12
 801b202:	46bd      	mov	sp, r7
 801b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b208:	4770      	bx	lr

0801b20a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 801b20a:	b480      	push	{r7}
 801b20c:	b083      	sub	sp, #12
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 801b216:	4618      	mov	r0, r3
 801b218:	370c      	adds	r7, #12
 801b21a:	46bd      	mov	sp, r7
 801b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b220:	4770      	bx	lr
	...

0801b224 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b086      	sub	sp, #24
 801b228:	af02      	add	r7, sp, #8
 801b22a:	60f8      	str	r0, [r7, #12]
 801b22c:	4608      	mov	r0, r1
 801b22e:	4611      	mov	r1, r2
 801b230:	461a      	mov	r2, r3
 801b232:	4603      	mov	r3, r0
 801b234:	817b      	strh	r3, [r7, #10]
 801b236:	460b      	mov	r3, r1
 801b238:	813b      	strh	r3, [r7, #8]
 801b23a:	4613      	mov	r3, r2
 801b23c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801b23e:	88fb      	ldrh	r3, [r7, #6]
 801b240:	b2da      	uxtb	r2, r3
 801b242:	8979      	ldrh	r1, [r7, #10]
 801b244:	4b20      	ldr	r3, [pc, #128]	; (801b2c8 <I2C_RequestMemoryRead+0xa4>)
 801b246:	9300      	str	r3, [sp, #0]
 801b248:	2300      	movs	r3, #0
 801b24a:	68f8      	ldr	r0, [r7, #12]
 801b24c:	f000 fa9e 	bl	801b78c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b250:	69fa      	ldr	r2, [r7, #28]
 801b252:	69b9      	ldr	r1, [r7, #24]
 801b254:	68f8      	ldr	r0, [r7, #12]
 801b256:	f000 f8ac 	bl	801b3b2 <I2C_WaitOnTXISFlagUntilTimeout>
 801b25a:	4603      	mov	r3, r0
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d001      	beq.n	801b264 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801b260:	2301      	movs	r3, #1
 801b262:	e02c      	b.n	801b2be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801b264:	88fb      	ldrh	r3, [r7, #6]
 801b266:	2b01      	cmp	r3, #1
 801b268:	d105      	bne.n	801b276 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b26a:	893b      	ldrh	r3, [r7, #8]
 801b26c:	b2da      	uxtb	r2, r3
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	629a      	str	r2, [r3, #40]	; 0x28
 801b274:	e015      	b.n	801b2a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801b276:	893b      	ldrh	r3, [r7, #8]
 801b278:	0a1b      	lsrs	r3, r3, #8
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	b2da      	uxtb	r2, r3
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b284:	69fa      	ldr	r2, [r7, #28]
 801b286:	69b9      	ldr	r1, [r7, #24]
 801b288:	68f8      	ldr	r0, [r7, #12]
 801b28a:	f000 f892 	bl	801b3b2 <I2C_WaitOnTXISFlagUntilTimeout>
 801b28e:	4603      	mov	r3, r0
 801b290:	2b00      	cmp	r3, #0
 801b292:	d001      	beq.n	801b298 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801b294:	2301      	movs	r3, #1
 801b296:	e012      	b.n	801b2be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b298:	893b      	ldrh	r3, [r7, #8]
 801b29a:	b2da      	uxtb	r2, r3
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	9300      	str	r3, [sp, #0]
 801b2a6:	69bb      	ldr	r3, [r7, #24]
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	2140      	movs	r1, #64	; 0x40
 801b2ac:	68f8      	ldr	r0, [r7, #12]
 801b2ae:	f000 f831 	bl	801b314 <I2C_WaitOnFlagUntilTimeout>
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d001      	beq.n	801b2bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801b2b8:	2301      	movs	r3, #1
 801b2ba:	e000      	b.n	801b2be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801b2bc:	2300      	movs	r3, #0
}
 801b2be:	4618      	mov	r0, r3
 801b2c0:	3710      	adds	r7, #16
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}
 801b2c6:	bf00      	nop
 801b2c8:	80002000 	.word	0x80002000

0801b2cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801b2cc:	b480      	push	{r7}
 801b2ce:	b083      	sub	sp, #12
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	699b      	ldr	r3, [r3, #24]
 801b2da:	f003 0302 	and.w	r3, r3, #2
 801b2de:	2b02      	cmp	r3, #2
 801b2e0:	d103      	bne.n	801b2ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	699b      	ldr	r3, [r3, #24]
 801b2f0:	f003 0301 	and.w	r3, r3, #1
 801b2f4:	2b01      	cmp	r3, #1
 801b2f6:	d007      	beq.n	801b308 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	699a      	ldr	r2, [r3, #24]
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	f042 0201 	orr.w	r2, r2, #1
 801b306:	619a      	str	r2, [r3, #24]
  }
}
 801b308:	bf00      	nop
 801b30a:	370c      	adds	r7, #12
 801b30c:	46bd      	mov	sp, r7
 801b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b312:	4770      	bx	lr

0801b314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b084      	sub	sp, #16
 801b318:	af00      	add	r7, sp, #0
 801b31a:	60f8      	str	r0, [r7, #12]
 801b31c:	60b9      	str	r1, [r7, #8]
 801b31e:	603b      	str	r3, [r7, #0]
 801b320:	4613      	mov	r3, r2
 801b322:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b324:	e031      	b.n	801b38a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b326:	683b      	ldr	r3, [r7, #0]
 801b328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b32c:	d02d      	beq.n	801b38a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b32e:	f7fe fac5 	bl	80198bc <HAL_GetTick>
 801b332:	4602      	mov	r2, r0
 801b334:	69bb      	ldr	r3, [r7, #24]
 801b336:	1ad3      	subs	r3, r2, r3
 801b338:	683a      	ldr	r2, [r7, #0]
 801b33a:	429a      	cmp	r2, r3
 801b33c:	d302      	bcc.n	801b344 <I2C_WaitOnFlagUntilTimeout+0x30>
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d122      	bne.n	801b38a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	699a      	ldr	r2, [r3, #24]
 801b34a:	68bb      	ldr	r3, [r7, #8]
 801b34c:	4013      	ands	r3, r2
 801b34e:	68ba      	ldr	r2, [r7, #8]
 801b350:	429a      	cmp	r2, r3
 801b352:	bf0c      	ite	eq
 801b354:	2301      	moveq	r3, #1
 801b356:	2300      	movne	r3, #0
 801b358:	b2db      	uxtb	r3, r3
 801b35a:	461a      	mov	r2, r3
 801b35c:	79fb      	ldrb	r3, [r7, #7]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d113      	bne.n	801b38a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b366:	f043 0220 	orr.w	r2, r3, #32
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	2220      	movs	r2, #32
 801b372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	2200      	movs	r2, #0
 801b37a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	2200      	movs	r2, #0
 801b382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 801b386:	2301      	movs	r3, #1
 801b388:	e00f      	b.n	801b3aa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	699a      	ldr	r2, [r3, #24]
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	4013      	ands	r3, r2
 801b394:	68ba      	ldr	r2, [r7, #8]
 801b396:	429a      	cmp	r2, r3
 801b398:	bf0c      	ite	eq
 801b39a:	2301      	moveq	r3, #1
 801b39c:	2300      	movne	r3, #0
 801b39e:	b2db      	uxtb	r3, r3
 801b3a0:	461a      	mov	r2, r3
 801b3a2:	79fb      	ldrb	r3, [r7, #7]
 801b3a4:	429a      	cmp	r2, r3
 801b3a6:	d0be      	beq.n	801b326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b3a8:	2300      	movs	r3, #0
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	3710      	adds	r7, #16
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	bd80      	pop	{r7, pc}

0801b3b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b3b2:	b580      	push	{r7, lr}
 801b3b4:	b084      	sub	sp, #16
 801b3b6:	af00      	add	r7, sp, #0
 801b3b8:	60f8      	str	r0, [r7, #12]
 801b3ba:	60b9      	str	r1, [r7, #8]
 801b3bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b3be:	e033      	b.n	801b428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b3c0:	687a      	ldr	r2, [r7, #4]
 801b3c2:	68b9      	ldr	r1, [r7, #8]
 801b3c4:	68f8      	ldr	r0, [r7, #12]
 801b3c6:	f000 f901 	bl	801b5cc <I2C_IsErrorOccurred>
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d001      	beq.n	801b3d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b3d0:	2301      	movs	r3, #1
 801b3d2:	e031      	b.n	801b438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3da:	d025      	beq.n	801b428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b3dc:	f7fe fa6e 	bl	80198bc <HAL_GetTick>
 801b3e0:	4602      	mov	r2, r0
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	68ba      	ldr	r2, [r7, #8]
 801b3e8:	429a      	cmp	r2, r3
 801b3ea:	d302      	bcc.n	801b3f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801b3ec:	68bb      	ldr	r3, [r7, #8]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d11a      	bne.n	801b428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	699b      	ldr	r3, [r3, #24]
 801b3f8:	f003 0302 	and.w	r3, r3, #2
 801b3fc:	2b02      	cmp	r3, #2
 801b3fe:	d013      	beq.n	801b428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b404:	f043 0220 	orr.w	r2, r3, #32
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	2220      	movs	r2, #32
 801b410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	2200      	movs	r2, #0
 801b418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	2200      	movs	r2, #0
 801b420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801b424:	2301      	movs	r3, #1
 801b426:	e007      	b.n	801b438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	699b      	ldr	r3, [r3, #24]
 801b42e:	f003 0302 	and.w	r3, r3, #2
 801b432:	2b02      	cmp	r3, #2
 801b434:	d1c4      	bne.n	801b3c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801b436:	2300      	movs	r3, #0
}
 801b438:	4618      	mov	r0, r3
 801b43a:	3710      	adds	r7, #16
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}

0801b440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b084      	sub	sp, #16
 801b444:	af00      	add	r7, sp, #0
 801b446:	60f8      	str	r0, [r7, #12]
 801b448:	60b9      	str	r1, [r7, #8]
 801b44a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b44c:	e02f      	b.n	801b4ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b44e:	687a      	ldr	r2, [r7, #4]
 801b450:	68b9      	ldr	r1, [r7, #8]
 801b452:	68f8      	ldr	r0, [r7, #12]
 801b454:	f000 f8ba 	bl	801b5cc <I2C_IsErrorOccurred>
 801b458:	4603      	mov	r3, r0
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d001      	beq.n	801b462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b45e:	2301      	movs	r3, #1
 801b460:	e02d      	b.n	801b4be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b462:	f7fe fa2b 	bl	80198bc <HAL_GetTick>
 801b466:	4602      	mov	r2, r0
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	1ad3      	subs	r3, r2, r3
 801b46c:	68ba      	ldr	r2, [r7, #8]
 801b46e:	429a      	cmp	r2, r3
 801b470:	d302      	bcc.n	801b478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801b472:	68bb      	ldr	r3, [r7, #8]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d11a      	bne.n	801b4ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	699b      	ldr	r3, [r3, #24]
 801b47e:	f003 0320 	and.w	r3, r3, #32
 801b482:	2b20      	cmp	r3, #32
 801b484:	d013      	beq.n	801b4ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b48a:	f043 0220 	orr.w	r2, r3, #32
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	2220      	movs	r2, #32
 801b496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	2200      	movs	r2, #0
 801b49e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	e007      	b.n	801b4be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	699b      	ldr	r3, [r3, #24]
 801b4b4:	f003 0320 	and.w	r3, r3, #32
 801b4b8:	2b20      	cmp	r3, #32
 801b4ba:	d1c8      	bne.n	801b44e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b4bc:	2300      	movs	r3, #0
}
 801b4be:	4618      	mov	r0, r3
 801b4c0:	3710      	adds	r7, #16
 801b4c2:	46bd      	mov	sp, r7
 801b4c4:	bd80      	pop	{r7, pc}
	...

0801b4c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b084      	sub	sp, #16
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	60f8      	str	r0, [r7, #12]
 801b4d0:	60b9      	str	r1, [r7, #8]
 801b4d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b4d4:	e06b      	b.n	801b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b4d6:	687a      	ldr	r2, [r7, #4]
 801b4d8:	68b9      	ldr	r1, [r7, #8]
 801b4da:	68f8      	ldr	r0, [r7, #12]
 801b4dc:	f000 f876 	bl	801b5cc <I2C_IsErrorOccurred>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d001      	beq.n	801b4ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b4e6:	2301      	movs	r3, #1
 801b4e8:	e069      	b.n	801b5be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	699b      	ldr	r3, [r3, #24]
 801b4f0:	f003 0320 	and.w	r3, r3, #32
 801b4f4:	2b20      	cmp	r3, #32
 801b4f6:	d138      	bne.n	801b56a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	699b      	ldr	r3, [r3, #24]
 801b4fe:	f003 0304 	and.w	r3, r3, #4
 801b502:	2b04      	cmp	r3, #4
 801b504:	d105      	bne.n	801b512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d001      	beq.n	801b512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801b50e:	2300      	movs	r3, #0
 801b510:	e055      	b.n	801b5be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	699b      	ldr	r3, [r3, #24]
 801b518:	f003 0310 	and.w	r3, r3, #16
 801b51c:	2b10      	cmp	r3, #16
 801b51e:	d107      	bne.n	801b530 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	2210      	movs	r2, #16
 801b526:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	2204      	movs	r2, #4
 801b52c:	645a      	str	r2, [r3, #68]	; 0x44
 801b52e:	e002      	b.n	801b536 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2200      	movs	r2, #0
 801b534:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	2220      	movs	r2, #32
 801b53c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	6859      	ldr	r1, [r3, #4]
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	681a      	ldr	r2, [r3, #0]
 801b548:	4b1f      	ldr	r3, [pc, #124]	; (801b5c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801b54a:	400b      	ands	r3, r1
 801b54c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	2220      	movs	r2, #32
 801b552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	2200      	movs	r2, #0
 801b55a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	2200      	movs	r2, #0
 801b562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b566:	2301      	movs	r3, #1
 801b568:	e029      	b.n	801b5be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b56a:	f7fe f9a7 	bl	80198bc <HAL_GetTick>
 801b56e:	4602      	mov	r2, r0
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	1ad3      	subs	r3, r2, r3
 801b574:	68ba      	ldr	r2, [r7, #8]
 801b576:	429a      	cmp	r2, r3
 801b578:	d302      	bcc.n	801b580 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801b57a:	68bb      	ldr	r3, [r7, #8]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d116      	bne.n	801b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	699b      	ldr	r3, [r3, #24]
 801b586:	f003 0304 	and.w	r3, r3, #4
 801b58a:	2b04      	cmp	r3, #4
 801b58c:	d00f      	beq.n	801b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b592:	f043 0220 	orr.w	r2, r3, #32
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	2220      	movs	r2, #32
 801b59e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	e007      	b.n	801b5be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	699b      	ldr	r3, [r3, #24]
 801b5b4:	f003 0304 	and.w	r3, r3, #4
 801b5b8:	2b04      	cmp	r3, #4
 801b5ba:	d18c      	bne.n	801b4d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b5bc:	2300      	movs	r3, #0
}
 801b5be:	4618      	mov	r0, r3
 801b5c0:	3710      	adds	r7, #16
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	bd80      	pop	{r7, pc}
 801b5c6:	bf00      	nop
 801b5c8:	fe00e800 	.word	0xfe00e800

0801b5cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b08a      	sub	sp, #40	; 0x28
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	60f8      	str	r0, [r7, #12]
 801b5d4:	60b9      	str	r1, [r7, #8]
 801b5d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5d8:	2300      	movs	r3, #0
 801b5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	699b      	ldr	r3, [r3, #24]
 801b5e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801b5ee:	69bb      	ldr	r3, [r7, #24]
 801b5f0:	f003 0310 	and.w	r3, r3, #16
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d068      	beq.n	801b6ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	2210      	movs	r2, #16
 801b5fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801b600:	e049      	b.n	801b696 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b608:	d045      	beq.n	801b696 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b60a:	f7fe f957 	bl	80198bc <HAL_GetTick>
 801b60e:	4602      	mov	r2, r0
 801b610:	69fb      	ldr	r3, [r7, #28]
 801b612:	1ad3      	subs	r3, r2, r3
 801b614:	68ba      	ldr	r2, [r7, #8]
 801b616:	429a      	cmp	r2, r3
 801b618:	d302      	bcc.n	801b620 <I2C_IsErrorOccurred+0x54>
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d13a      	bne.n	801b696 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b62a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	699b      	ldr	r3, [r3, #24]
 801b63a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b63e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b642:	d121      	bne.n	801b688 <I2C_IsErrorOccurred+0xbc>
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b64a:	d01d      	beq.n	801b688 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801b64c:	7cfb      	ldrb	r3, [r7, #19]
 801b64e:	2b20      	cmp	r3, #32
 801b650:	d01a      	beq.n	801b688 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	685a      	ldr	r2, [r3, #4]
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b660:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801b662:	f7fe f92b 	bl	80198bc <HAL_GetTick>
 801b666:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b668:	e00e      	b.n	801b688 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801b66a:	f7fe f927 	bl	80198bc <HAL_GetTick>
 801b66e:	4602      	mov	r2, r0
 801b670:	69fb      	ldr	r3, [r7, #28]
 801b672:	1ad3      	subs	r3, r2, r3
 801b674:	2b19      	cmp	r3, #25
 801b676:	d907      	bls.n	801b688 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801b678:	6a3b      	ldr	r3, [r7, #32]
 801b67a:	f043 0320 	orr.w	r3, r3, #32
 801b67e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801b680:	2301      	movs	r3, #1
 801b682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801b686:	e006      	b.n	801b696 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	699b      	ldr	r3, [r3, #24]
 801b68e:	f003 0320 	and.w	r3, r3, #32
 801b692:	2b20      	cmp	r3, #32
 801b694:	d1e9      	bne.n	801b66a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	699b      	ldr	r3, [r3, #24]
 801b69c:	f003 0320 	and.w	r3, r3, #32
 801b6a0:	2b20      	cmp	r3, #32
 801b6a2:	d003      	beq.n	801b6ac <I2C_IsErrorOccurred+0xe0>
 801b6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d0aa      	beq.n	801b602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801b6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d103      	bne.n	801b6bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2220      	movs	r2, #32
 801b6ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801b6bc:	6a3b      	ldr	r3, [r7, #32]
 801b6be:	f043 0304 	orr.w	r3, r3, #4
 801b6c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801b6c4:	2301      	movs	r3, #1
 801b6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	699b      	ldr	r3, [r3, #24]
 801b6d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801b6d2:	69bb      	ldr	r3, [r7, #24]
 801b6d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d00b      	beq.n	801b6f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801b6dc:	6a3b      	ldr	r3, [r7, #32]
 801b6de:	f043 0301 	orr.w	r3, r3, #1
 801b6e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b6ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801b6f4:	69bb      	ldr	r3, [r7, #24]
 801b6f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d00b      	beq.n	801b716 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801b6fe:	6a3b      	ldr	r3, [r7, #32]
 801b700:	f043 0308 	orr.w	r3, r3, #8
 801b704:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b70e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b710:	2301      	movs	r3, #1
 801b712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801b716:	69bb      	ldr	r3, [r7, #24]
 801b718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d00b      	beq.n	801b738 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801b720:	6a3b      	ldr	r3, [r7, #32]
 801b722:	f043 0302 	orr.w	r3, r3, #2
 801b726:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b732:	2301      	movs	r3, #1
 801b734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801b738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d01c      	beq.n	801b77a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801b740:	68f8      	ldr	r0, [r7, #12]
 801b742:	f7ff fdc3 	bl	801b2cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	6859      	ldr	r1, [r3, #4]
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	681a      	ldr	r2, [r3, #0]
 801b750:	4b0d      	ldr	r3, [pc, #52]	; (801b788 <I2C_IsErrorOccurred+0x1bc>)
 801b752:	400b      	ands	r3, r1
 801b754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b75a:	6a3b      	ldr	r3, [r7, #32]
 801b75c:	431a      	orrs	r2, r3
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	2220      	movs	r2, #32
 801b766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	2200      	movs	r2, #0
 801b76e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	2200      	movs	r2, #0
 801b776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801b77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b77e:	4618      	mov	r0, r3
 801b780:	3728      	adds	r7, #40	; 0x28
 801b782:	46bd      	mov	sp, r7
 801b784:	bd80      	pop	{r7, pc}
 801b786:	bf00      	nop
 801b788:	fe00e800 	.word	0xfe00e800

0801b78c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801b78c:	b480      	push	{r7}
 801b78e:	b087      	sub	sp, #28
 801b790:	af00      	add	r7, sp, #0
 801b792:	60f8      	str	r0, [r7, #12]
 801b794:	607b      	str	r3, [r7, #4]
 801b796:	460b      	mov	r3, r1
 801b798:	817b      	strh	r3, [r7, #10]
 801b79a:	4613      	mov	r3, r2
 801b79c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b79e:	897b      	ldrh	r3, [r7, #10]
 801b7a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801b7a4:	7a7b      	ldrb	r3, [r7, #9]
 801b7a6:	041b      	lsls	r3, r3, #16
 801b7a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b7ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b7b2:	6a3b      	ldr	r3, [r7, #32]
 801b7b4:	4313      	orrs	r3, r2
 801b7b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b7ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	685a      	ldr	r2, [r3, #4]
 801b7c2:	6a3b      	ldr	r3, [r7, #32]
 801b7c4:	0d5b      	lsrs	r3, r3, #21
 801b7c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801b7ca:	4b08      	ldr	r3, [pc, #32]	; (801b7ec <I2C_TransferConfig+0x60>)
 801b7cc:	430b      	orrs	r3, r1
 801b7ce:	43db      	mvns	r3, r3
 801b7d0:	ea02 0103 	and.w	r1, r2, r3
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	697a      	ldr	r2, [r7, #20]
 801b7da:	430a      	orrs	r2, r1
 801b7dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801b7de:	bf00      	nop
 801b7e0:	371c      	adds	r7, #28
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e8:	4770      	bx	lr
 801b7ea:	bf00      	nop
 801b7ec:	03ff63ff 	.word	0x03ff63ff

0801b7f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b083      	sub	sp, #12
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
 801b7f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b800:	b2db      	uxtb	r3, r3
 801b802:	2b20      	cmp	r3, #32
 801b804:	d138      	bne.n	801b878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	d101      	bne.n	801b814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801b810:	2302      	movs	r3, #2
 801b812:	e032      	b.n	801b87a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2201      	movs	r2, #1
 801b818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	2224      	movs	r2, #36	; 0x24
 801b820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	681a      	ldr	r2, [r3, #0]
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f022 0201 	bic.w	r2, r2, #1
 801b832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801b842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	6819      	ldr	r1, [r3, #0]
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	683a      	ldr	r2, [r7, #0]
 801b850:	430a      	orrs	r2, r1
 801b852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	681a      	ldr	r2, [r3, #0]
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	f042 0201 	orr.w	r2, r2, #1
 801b862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	2220      	movs	r2, #32
 801b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	2200      	movs	r2, #0
 801b870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b874:	2300      	movs	r3, #0
 801b876:	e000      	b.n	801b87a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b878:	2302      	movs	r3, #2
  }
}
 801b87a:	4618      	mov	r0, r3
 801b87c:	370c      	adds	r7, #12
 801b87e:	46bd      	mov	sp, r7
 801b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b884:	4770      	bx	lr

0801b886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801b886:	b480      	push	{r7}
 801b888:	b085      	sub	sp, #20
 801b88a:	af00      	add	r7, sp, #0
 801b88c:	6078      	str	r0, [r7, #4]
 801b88e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b896:	b2db      	uxtb	r3, r3
 801b898:	2b20      	cmp	r3, #32
 801b89a:	d139      	bne.n	801b910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b8a2:	2b01      	cmp	r3, #1
 801b8a4:	d101      	bne.n	801b8aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801b8a6:	2302      	movs	r3, #2
 801b8a8:	e033      	b.n	801b912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2201      	movs	r2, #1
 801b8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	2224      	movs	r2, #36	; 0x24
 801b8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	f022 0201 	bic.w	r2, r2, #1
 801b8c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b8d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	021b      	lsls	r3, r3, #8
 801b8de:	68fa      	ldr	r2, [r7, #12]
 801b8e0:	4313      	orrs	r3, r2
 801b8e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	68fa      	ldr	r2, [r7, #12]
 801b8ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	681a      	ldr	r2, [r3, #0]
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	f042 0201 	orr.w	r2, r2, #1
 801b8fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	2220      	movs	r2, #32
 801b900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2200      	movs	r2, #0
 801b908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b90c:	2300      	movs	r3, #0
 801b90e:	e000      	b.n	801b912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801b910:	2302      	movs	r3, #2
  }
}
 801b912:	4618      	mov	r0, r3
 801b914:	3714      	adds	r7, #20
 801b916:	46bd      	mov	sp, r7
 801b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b91c:	4770      	bx	lr
	...

0801b920 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 801b928:	2300      	movs	r3, #0
 801b92a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d01e      	beq.n	801b970 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 801b932:	4b13      	ldr	r3, [pc, #76]	; (801b980 <HAL_IPCC_Init+0x60>)
 801b934:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b93c:	b2db      	uxtb	r3, r3
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d102      	bne.n	801b948 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 801b942:	6878      	ldr	r0, [r7, #4]
 801b944:	f7e6 ffdc 	bl	8002900 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 801b948:	68b8      	ldr	r0, [r7, #8]
 801b94a:	f000 f85b 	bl	801ba04 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 801b94e:	68bb      	ldr	r3, [r7, #8]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 801b95a:	6878      	ldr	r0, [r7, #4]
 801b95c:	f000 f82c 	bl	801b9b8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2200      	movs	r2, #0
 801b964:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	2201      	movs	r2, #1
 801b96a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 801b96e:	e001      	b.n	801b974 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 801b970:	2301      	movs	r3, #1
 801b972:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 801b974:	7bfb      	ldrb	r3, [r7, #15]
}
 801b976:	4618      	mov	r0, r3
 801b978:	3710      	adds	r7, #16
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	58000c00 	.word	0x58000c00

0801b984 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 801b984:	b480      	push	{r7}
 801b986:	b085      	sub	sp, #20
 801b988:	af00      	add	r7, sp, #0
 801b98a:	60f8      	str	r0, [r7, #12]
 801b98c:	60b9      	str	r1, [r7, #8]
 801b98e:	4613      	mov	r3, r2
 801b990:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 801b992:	bf00      	nop
 801b994:	3714      	adds	r7, #20
 801b996:	46bd      	mov	sp, r7
 801b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99c:	4770      	bx	lr

0801b99e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 801b99e:	b480      	push	{r7}
 801b9a0:	b085      	sub	sp, #20
 801b9a2:	af00      	add	r7, sp, #0
 801b9a4:	60f8      	str	r0, [r7, #12]
 801b9a6:	60b9      	str	r1, [r7, #8]
 801b9a8:	4613      	mov	r3, r2
 801b9aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 801b9ac:	bf00      	nop
 801b9ae:	3714      	adds	r7, #20
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b6:	4770      	bx	lr

0801b9b8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 801b9b8:	b480      	push	{r7}
 801b9ba:	b085      	sub	sp, #20
 801b9bc:	af00      	add	r7, sp, #0
 801b9be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	60fb      	str	r3, [r7, #12]
 801b9c4:	e00f      	b.n	801b9e6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 801b9c6:	687a      	ldr	r2, [r7, #4]
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	009b      	lsls	r3, r3, #2
 801b9cc:	4413      	add	r3, r2
 801b9ce:	4a0b      	ldr	r2, [pc, #44]	; (801b9fc <IPCC_SetDefaultCallbacks+0x44>)
 801b9d0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	3306      	adds	r3, #6
 801b9d8:	009b      	lsls	r3, r3, #2
 801b9da:	4413      	add	r3, r2
 801b9dc:	4a08      	ldr	r2, [pc, #32]	; (801ba00 <IPCC_SetDefaultCallbacks+0x48>)
 801b9de:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	3301      	adds	r3, #1
 801b9e4:	60fb      	str	r3, [r7, #12]
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	2b05      	cmp	r3, #5
 801b9ea:	d9ec      	bls.n	801b9c6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 801b9ec:	bf00      	nop
 801b9ee:	bf00      	nop
 801b9f0:	3714      	adds	r7, #20
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f8:	4770      	bx	lr
 801b9fa:	bf00      	nop
 801b9fc:	0801b985 	.word	0x0801b985
 801ba00:	0801b99f 	.word	0x0801b99f

0801ba04 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 801ba04:	b480      	push	{r7}
 801ba06:	b083      	sub	sp, #12
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 801ba18:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	223f      	movs	r2, #63	; 0x3f
 801ba1e:	609a      	str	r2, [r3, #8]
}
 801ba20:	bf00      	nop
 801ba22:	370c      	adds	r7, #12
 801ba24:	46bd      	mov	sp, r7
 801ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba2a:	4770      	bx	lr

0801ba2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801ba2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba2e:	b08b      	sub	sp, #44	; 0x2c
 801ba30:	af06      	add	r7, sp, #24
 801ba32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d101      	bne.n	801ba3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	e0cb      	b.n	801bbd6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801ba44:	b2db      	uxtb	r3, r3
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d106      	bne.n	801ba58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801ba52:	6878      	ldr	r0, [r7, #4]
 801ba54:	f7e9 fd5c 	bl	8005510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	2203      	movs	r2, #3
 801ba5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	4618      	mov	r0, r3
 801ba66:	f003 fc91 	bl	801f38c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	73fb      	strb	r3, [r7, #15]
 801ba6e:	e040      	b.n	801baf2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801ba70:	7bfb      	ldrb	r3, [r7, #15]
 801ba72:	6879      	ldr	r1, [r7, #4]
 801ba74:	1c5a      	adds	r2, r3, #1
 801ba76:	4613      	mov	r3, r2
 801ba78:	009b      	lsls	r3, r3, #2
 801ba7a:	4413      	add	r3, r2
 801ba7c:	00db      	lsls	r3, r3, #3
 801ba7e:	440b      	add	r3, r1
 801ba80:	3301      	adds	r3, #1
 801ba82:	2201      	movs	r2, #1
 801ba84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801ba86:	7bfb      	ldrb	r3, [r7, #15]
 801ba88:	6879      	ldr	r1, [r7, #4]
 801ba8a:	1c5a      	adds	r2, r3, #1
 801ba8c:	4613      	mov	r3, r2
 801ba8e:	009b      	lsls	r3, r3, #2
 801ba90:	4413      	add	r3, r2
 801ba92:	00db      	lsls	r3, r3, #3
 801ba94:	440b      	add	r3, r1
 801ba96:	7bfa      	ldrb	r2, [r7, #15]
 801ba98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801ba9a:	7bfb      	ldrb	r3, [r7, #15]
 801ba9c:	6879      	ldr	r1, [r7, #4]
 801ba9e:	1c5a      	adds	r2, r3, #1
 801baa0:	4613      	mov	r3, r2
 801baa2:	009b      	lsls	r3, r3, #2
 801baa4:	4413      	add	r3, r2
 801baa6:	00db      	lsls	r3, r3, #3
 801baa8:	440b      	add	r3, r1
 801baaa:	3303      	adds	r3, #3
 801baac:	2200      	movs	r2, #0
 801baae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801bab0:	7bfa      	ldrb	r2, [r7, #15]
 801bab2:	6879      	ldr	r1, [r7, #4]
 801bab4:	4613      	mov	r3, r2
 801bab6:	009b      	lsls	r3, r3, #2
 801bab8:	4413      	add	r3, r2
 801baba:	00db      	lsls	r3, r3, #3
 801babc:	440b      	add	r3, r1
 801babe:	3338      	adds	r3, #56	; 0x38
 801bac0:	2200      	movs	r2, #0
 801bac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801bac4:	7bfa      	ldrb	r2, [r7, #15]
 801bac6:	6879      	ldr	r1, [r7, #4]
 801bac8:	4613      	mov	r3, r2
 801baca:	009b      	lsls	r3, r3, #2
 801bacc:	4413      	add	r3, r2
 801bace:	00db      	lsls	r3, r3, #3
 801bad0:	440b      	add	r3, r1
 801bad2:	333c      	adds	r3, #60	; 0x3c
 801bad4:	2200      	movs	r2, #0
 801bad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801bad8:	7bfa      	ldrb	r2, [r7, #15]
 801bada:	6879      	ldr	r1, [r7, #4]
 801badc:	4613      	mov	r3, r2
 801bade:	009b      	lsls	r3, r3, #2
 801bae0:	4413      	add	r3, r2
 801bae2:	00db      	lsls	r3, r3, #3
 801bae4:	440b      	add	r3, r1
 801bae6:	3340      	adds	r3, #64	; 0x40
 801bae8:	2200      	movs	r2, #0
 801baea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801baec:	7bfb      	ldrb	r3, [r7, #15]
 801baee:	3301      	adds	r3, #1
 801baf0:	73fb      	strb	r3, [r7, #15]
 801baf2:	7bfa      	ldrb	r2, [r7, #15]
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	685b      	ldr	r3, [r3, #4]
 801baf8:	429a      	cmp	r2, r3
 801bafa:	d3b9      	bcc.n	801ba70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bafc:	2300      	movs	r3, #0
 801bafe:	73fb      	strb	r3, [r7, #15]
 801bb00:	e044      	b.n	801bb8c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801bb02:	7bfa      	ldrb	r2, [r7, #15]
 801bb04:	6879      	ldr	r1, [r7, #4]
 801bb06:	4613      	mov	r3, r2
 801bb08:	009b      	lsls	r3, r3, #2
 801bb0a:	4413      	add	r3, r2
 801bb0c:	00db      	lsls	r3, r3, #3
 801bb0e:	440b      	add	r3, r1
 801bb10:	f203 1369 	addw	r3, r3, #361	; 0x169
 801bb14:	2200      	movs	r2, #0
 801bb16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801bb18:	7bfa      	ldrb	r2, [r7, #15]
 801bb1a:	6879      	ldr	r1, [r7, #4]
 801bb1c:	4613      	mov	r3, r2
 801bb1e:	009b      	lsls	r3, r3, #2
 801bb20:	4413      	add	r3, r2
 801bb22:	00db      	lsls	r3, r3, #3
 801bb24:	440b      	add	r3, r1
 801bb26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801bb2a:	7bfa      	ldrb	r2, [r7, #15]
 801bb2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801bb2e:	7bfa      	ldrb	r2, [r7, #15]
 801bb30:	6879      	ldr	r1, [r7, #4]
 801bb32:	4613      	mov	r3, r2
 801bb34:	009b      	lsls	r3, r3, #2
 801bb36:	4413      	add	r3, r2
 801bb38:	00db      	lsls	r3, r3, #3
 801bb3a:	440b      	add	r3, r1
 801bb3c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 801bb40:	2200      	movs	r2, #0
 801bb42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801bb44:	7bfa      	ldrb	r2, [r7, #15]
 801bb46:	6879      	ldr	r1, [r7, #4]
 801bb48:	4613      	mov	r3, r2
 801bb4a:	009b      	lsls	r3, r3, #2
 801bb4c:	4413      	add	r3, r2
 801bb4e:	00db      	lsls	r3, r3, #3
 801bb50:	440b      	add	r3, r1
 801bb52:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801bb56:	2200      	movs	r2, #0
 801bb58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801bb5a:	7bfa      	ldrb	r2, [r7, #15]
 801bb5c:	6879      	ldr	r1, [r7, #4]
 801bb5e:	4613      	mov	r3, r2
 801bb60:	009b      	lsls	r3, r3, #2
 801bb62:	4413      	add	r3, r2
 801bb64:	00db      	lsls	r3, r3, #3
 801bb66:	440b      	add	r3, r1
 801bb68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801bb70:	7bfa      	ldrb	r2, [r7, #15]
 801bb72:	6879      	ldr	r1, [r7, #4]
 801bb74:	4613      	mov	r3, r2
 801bb76:	009b      	lsls	r3, r3, #2
 801bb78:	4413      	add	r3, r2
 801bb7a:	00db      	lsls	r3, r3, #3
 801bb7c:	440b      	add	r3, r1
 801bb7e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801bb82:	2200      	movs	r2, #0
 801bb84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bb86:	7bfb      	ldrb	r3, [r7, #15]
 801bb88:	3301      	adds	r3, #1
 801bb8a:	73fb      	strb	r3, [r7, #15]
 801bb8c:	7bfa      	ldrb	r2, [r7, #15]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d3b5      	bcc.n	801bb02 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	603b      	str	r3, [r7, #0]
 801bb9c:	687e      	ldr	r6, [r7, #4]
 801bb9e:	466d      	mov	r5, sp
 801bba0:	f106 0410 	add.w	r4, r6, #16
 801bba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bba8:	6823      	ldr	r3, [r4, #0]
 801bbaa:	602b      	str	r3, [r5, #0]
 801bbac:	1d33      	adds	r3, r6, #4
 801bbae:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bbb0:	6838      	ldr	r0, [r7, #0]
 801bbb2:	f003 fc06 	bl	801f3c2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2201      	movs	r2, #1
 801bbc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	69db      	ldr	r3, [r3, #28]
 801bbca:	2b01      	cmp	r3, #1
 801bbcc:	d102      	bne.n	801bbd4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801bbce:	6878      	ldr	r0, [r7, #4]
 801bbd0:	f000 f805 	bl	801bbde <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801bbd4:	2300      	movs	r3, #0
}
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	3714      	adds	r7, #20
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bbde <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801bbde:	b480      	push	{r7}
 801bbe0:	b085      	sub	sp, #20
 801bbe2:	af00      	add	r7, sp, #0
 801bbe4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	2201      	movs	r2, #1
 801bbf0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801bc02:	b29b      	uxth	r3, r3
 801bc04:	f043 0301 	orr.w	r3, r3, #1
 801bc08:	b29a      	uxth	r2, r3
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801bc16:	b29b      	uxth	r3, r3
 801bc18:	f043 0302 	orr.w	r3, r3, #2
 801bc1c:	b29a      	uxth	r2, r3
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801bc24:	2300      	movs	r3, #0
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	3714      	adds	r7, #20
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc30:	4770      	bx	lr
	...

0801bc34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801bc34:	b480      	push	{r7}
 801bc36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801bc38:	4b05      	ldr	r3, [pc, #20]	; (801bc50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	4a04      	ldr	r2, [pc, #16]	; (801bc50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801bc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bc42:	6013      	str	r3, [r2, #0]
}
 801bc44:	bf00      	nop
 801bc46:	46bd      	mov	sp, r7
 801bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc4c:	4770      	bx	lr
 801bc4e:	bf00      	nop
 801bc50:	58000400 	.word	0x58000400

0801bc54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801bc54:	b480      	push	{r7}
 801bc56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801bc58:	4b04      	ldr	r3, [pc, #16]	; (801bc6c <HAL_PWREx_GetVoltageRange+0x18>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801bc60:	4618      	mov	r0, r3
 801bc62:	46bd      	mov	sp, r7
 801bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc68:	4770      	bx	lr
 801bc6a:	bf00      	nop
 801bc6c:	58000400 	.word	0x58000400

0801bc70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 801bc70:	b480      	push	{r7}
 801bc72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801bc74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bc7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bc82:	d101      	bne.n	801bc88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801bc84:	2301      	movs	r3, #1
 801bc86:	e000      	b.n	801bc8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801bc88:	2300      	movs	r3, #0
}
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc92:	4770      	bx	lr

0801bc94 <LL_RCC_HSE_Enable>:
{
 801bc94:	b480      	push	{r7}
 801bc96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801bc98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bca6:	6013      	str	r3, [r2, #0]
}
 801bca8:	bf00      	nop
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb0:	4770      	bx	lr

0801bcb2 <LL_RCC_HSE_Disable>:
{
 801bcb2:	b480      	push	{r7}
 801bcb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801bcb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bcc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bcc4:	6013      	str	r3, [r2, #0]
}
 801bcc6:	bf00      	nop
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcce:	4770      	bx	lr

0801bcd0 <LL_RCC_HSE_IsReady>:
{
 801bcd0:	b480      	push	{r7}
 801bcd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801bcd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bcde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801bce2:	d101      	bne.n	801bce8 <LL_RCC_HSE_IsReady+0x18>
 801bce4:	2301      	movs	r3, #1
 801bce6:	e000      	b.n	801bcea <LL_RCC_HSE_IsReady+0x1a>
 801bce8:	2300      	movs	r3, #0
}
 801bcea:	4618      	mov	r0, r3
 801bcec:	46bd      	mov	sp, r7
 801bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf2:	4770      	bx	lr

0801bcf4 <LL_RCC_HSI_Enable>:
{
 801bcf4:	b480      	push	{r7}
 801bcf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801bcf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bd02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bd06:	6013      	str	r3, [r2, #0]
}
 801bd08:	bf00      	nop
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd10:	4770      	bx	lr

0801bd12 <LL_RCC_HSI_Disable>:
{
 801bd12:	b480      	push	{r7}
 801bd14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801bd16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bd20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bd24:	6013      	str	r3, [r2, #0]
}
 801bd26:	bf00      	nop
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd2e:	4770      	bx	lr

0801bd30 <LL_RCC_HSI_IsReady>:
{
 801bd30:	b480      	push	{r7}
 801bd32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801bd34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd42:	d101      	bne.n	801bd48 <LL_RCC_HSI_IsReady+0x18>
 801bd44:	2301      	movs	r3, #1
 801bd46:	e000      	b.n	801bd4a <LL_RCC_HSI_IsReady+0x1a>
 801bd48:	2300      	movs	r3, #0
}
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd52:	4770      	bx	lr

0801bd54 <LL_RCC_HSI_SetCalibTrimming>:
{
 801bd54:	b480      	push	{r7}
 801bd56:	b083      	sub	sp, #12
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801bd5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd60:	685b      	ldr	r3, [r3, #4]
 801bd62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	061b      	lsls	r3, r3, #24
 801bd6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	604b      	str	r3, [r1, #4]
}
 801bd72:	bf00      	nop
 801bd74:	370c      	adds	r7, #12
 801bd76:	46bd      	mov	sp, r7
 801bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7c:	4770      	bx	lr

0801bd7e <LL_RCC_HSI48_Enable>:
{
 801bd7e:	b480      	push	{r7}
 801bd80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801bd82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bd8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bd8e:	f043 0301 	orr.w	r3, r3, #1
 801bd92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801bd96:	bf00      	nop
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd9e:	4770      	bx	lr

0801bda0 <LL_RCC_HSI48_Disable>:
{
 801bda0:	b480      	push	{r7}
 801bda2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801bda4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bda8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bdac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bdb0:	f023 0301 	bic.w	r3, r3, #1
 801bdb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801bdb8:	bf00      	nop
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc0:	4770      	bx	lr

0801bdc2 <LL_RCC_HSI48_IsReady>:
{
 801bdc2:	b480      	push	{r7}
 801bdc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801bdc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bdca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bdce:	f003 0302 	and.w	r3, r3, #2
 801bdd2:	2b02      	cmp	r3, #2
 801bdd4:	d101      	bne.n	801bdda <LL_RCC_HSI48_IsReady+0x18>
 801bdd6:	2301      	movs	r3, #1
 801bdd8:	e000      	b.n	801bddc <LL_RCC_HSI48_IsReady+0x1a>
 801bdda:	2300      	movs	r3, #0
}
 801bddc:	4618      	mov	r0, r3
 801bdde:	46bd      	mov	sp, r7
 801bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde4:	4770      	bx	lr

0801bde6 <LL_RCC_LSE_Enable>:
{
 801bde6:	b480      	push	{r7}
 801bde8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801bdea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bdf6:	f043 0301 	orr.w	r3, r3, #1
 801bdfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801bdfe:	bf00      	nop
 801be00:	46bd      	mov	sp, r7
 801be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be06:	4770      	bx	lr

0801be08 <LL_RCC_LSE_Disable>:
{
 801be08:	b480      	push	{r7}
 801be0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801be0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801be18:	f023 0301 	bic.w	r3, r3, #1
 801be1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801be20:	bf00      	nop
 801be22:	46bd      	mov	sp, r7
 801be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be28:	4770      	bx	lr

0801be2a <LL_RCC_LSE_EnableBypass>:
{
 801be2a:	b480      	push	{r7}
 801be2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801be2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801be3a:	f043 0304 	orr.w	r3, r3, #4
 801be3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801be42:	bf00      	nop
 801be44:	46bd      	mov	sp, r7
 801be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4a:	4770      	bx	lr

0801be4c <LL_RCC_LSE_DisableBypass>:
{
 801be4c:	b480      	push	{r7}
 801be4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801be50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801be5c:	f023 0304 	bic.w	r3, r3, #4
 801be60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801be64:	bf00      	nop
 801be66:	46bd      	mov	sp, r7
 801be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be6c:	4770      	bx	lr

0801be6e <LL_RCC_LSE_IsReady>:
{
 801be6e:	b480      	push	{r7}
 801be70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801be72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be7a:	f003 0302 	and.w	r3, r3, #2
 801be7e:	2b02      	cmp	r3, #2
 801be80:	d101      	bne.n	801be86 <LL_RCC_LSE_IsReady+0x18>
 801be82:	2301      	movs	r3, #1
 801be84:	e000      	b.n	801be88 <LL_RCC_LSE_IsReady+0x1a>
 801be86:	2300      	movs	r3, #0
}
 801be88:	4618      	mov	r0, r3
 801be8a:	46bd      	mov	sp, r7
 801be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be90:	4770      	bx	lr

0801be92 <LL_RCC_LSI1_Enable>:
{
 801be92:	b480      	push	{r7}
 801be94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801be96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801be9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bea2:	f043 0301 	orr.w	r3, r3, #1
 801bea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801beaa:	bf00      	nop
 801beac:	46bd      	mov	sp, r7
 801beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb2:	4770      	bx	lr

0801beb4 <LL_RCC_LSI1_Disable>:
{
 801beb4:	b480      	push	{r7}
 801beb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801beb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bec4:	f023 0301 	bic.w	r3, r3, #1
 801bec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801becc:	bf00      	nop
 801bece:	46bd      	mov	sp, r7
 801bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed4:	4770      	bx	lr

0801bed6 <LL_RCC_LSI1_IsReady>:
{
 801bed6:	b480      	push	{r7}
 801bed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801beda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bee2:	f003 0302 	and.w	r3, r3, #2
 801bee6:	2b02      	cmp	r3, #2
 801bee8:	d101      	bne.n	801beee <LL_RCC_LSI1_IsReady+0x18>
 801beea:	2301      	movs	r3, #1
 801beec:	e000      	b.n	801bef0 <LL_RCC_LSI1_IsReady+0x1a>
 801beee:	2300      	movs	r3, #0
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	46bd      	mov	sp, r7
 801bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef8:	4770      	bx	lr

0801befa <LL_RCC_LSI2_Enable>:
{
 801befa:	b480      	push	{r7}
 801befc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801befe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bf0a:	f043 0304 	orr.w	r3, r3, #4
 801bf0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801bf12:	bf00      	nop
 801bf14:	46bd      	mov	sp, r7
 801bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf1a:	4770      	bx	lr

0801bf1c <LL_RCC_LSI2_Disable>:
{
 801bf1c:	b480      	push	{r7}
 801bf1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801bf20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bf2c:	f023 0304 	bic.w	r3, r3, #4
 801bf30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801bf34:	bf00      	nop
 801bf36:	46bd      	mov	sp, r7
 801bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3c:	4770      	bx	lr

0801bf3e <LL_RCC_LSI2_IsReady>:
{
 801bf3e:	b480      	push	{r7}
 801bf40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801bf42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf4a:	f003 0308 	and.w	r3, r3, #8
 801bf4e:	2b08      	cmp	r3, #8
 801bf50:	d101      	bne.n	801bf56 <LL_RCC_LSI2_IsReady+0x18>
 801bf52:	2301      	movs	r3, #1
 801bf54:	e000      	b.n	801bf58 <LL_RCC_LSI2_IsReady+0x1a>
 801bf56:	2300      	movs	r3, #0
}
 801bf58:	4618      	mov	r0, r3
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf60:	4770      	bx	lr

0801bf62 <LL_RCC_LSI2_SetTrimming>:
{
 801bf62:	b480      	push	{r7}
 801bf64:	b083      	sub	sp, #12
 801bf66:	af00      	add	r7, sp, #0
 801bf68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801bf6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	021b      	lsls	r3, r3, #8
 801bf7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bf7e:	4313      	orrs	r3, r2
 801bf80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801bf84:	bf00      	nop
 801bf86:	370c      	adds	r7, #12
 801bf88:	46bd      	mov	sp, r7
 801bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8e:	4770      	bx	lr

0801bf90 <LL_RCC_MSI_Enable>:
{
 801bf90:	b480      	push	{r7}
 801bf92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801bf94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bf9e:	f043 0301 	orr.w	r3, r3, #1
 801bfa2:	6013      	str	r3, [r2, #0]
}
 801bfa4:	bf00      	nop
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfac:	4770      	bx	lr

0801bfae <LL_RCC_MSI_Disable>:
{
 801bfae:	b480      	push	{r7}
 801bfb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801bfb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bfbc:	f023 0301 	bic.w	r3, r3, #1
 801bfc0:	6013      	str	r3, [r2, #0]
}
 801bfc2:	bf00      	nop
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfca:	4770      	bx	lr

0801bfcc <LL_RCC_MSI_IsReady>:
{
 801bfcc:	b480      	push	{r7}
 801bfce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801bfd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	f003 0302 	and.w	r3, r3, #2
 801bfda:	2b02      	cmp	r3, #2
 801bfdc:	d101      	bne.n	801bfe2 <LL_RCC_MSI_IsReady+0x16>
 801bfde:	2301      	movs	r3, #1
 801bfe0:	e000      	b.n	801bfe4 <LL_RCC_MSI_IsReady+0x18>
 801bfe2:	2300      	movs	r3, #0
}
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfec:	4770      	bx	lr

0801bfee <LL_RCC_MSI_SetRange>:
{
 801bfee:	b480      	push	{r7}
 801bff0:	b083      	sub	sp, #12
 801bff2:	af00      	add	r7, sp, #0
 801bff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801bff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	4313      	orrs	r3, r2
 801c008:	600b      	str	r3, [r1, #0]
}
 801c00a:	bf00      	nop
 801c00c:	370c      	adds	r7, #12
 801c00e:	46bd      	mov	sp, r7
 801c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c014:	4770      	bx	lr

0801c016 <LL_RCC_MSI_GetRange>:
{
 801c016:	b480      	push	{r7}
 801c018:	b083      	sub	sp, #12
 801c01a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801c01c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c026:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2bb0      	cmp	r3, #176	; 0xb0
 801c02c:	d901      	bls.n	801c032 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 801c02e:	23b0      	movs	r3, #176	; 0xb0
 801c030:	607b      	str	r3, [r7, #4]
  return msiRange;
 801c032:	687b      	ldr	r3, [r7, #4]
}
 801c034:	4618      	mov	r0, r3
 801c036:	370c      	adds	r7, #12
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr

0801c040 <LL_RCC_MSI_SetCalibTrimming>:
{
 801c040:	b480      	push	{r7}
 801c042:	b083      	sub	sp, #12
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801c048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	021b      	lsls	r3, r3, #8
 801c056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c05a:	4313      	orrs	r3, r2
 801c05c:	604b      	str	r3, [r1, #4]
}
 801c05e:	bf00      	nop
 801c060:	370c      	adds	r7, #12
 801c062:	46bd      	mov	sp, r7
 801c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c068:	4770      	bx	lr

0801c06a <LL_RCC_SetSysClkSource>:
{
 801c06a:	b480      	push	{r7}
 801c06c:	b083      	sub	sp, #12
 801c06e:	af00      	add	r7, sp, #0
 801c070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801c072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c076:	689b      	ldr	r3, [r3, #8]
 801c078:	f023 0203 	bic.w	r2, r3, #3
 801c07c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	4313      	orrs	r3, r2
 801c084:	608b      	str	r3, [r1, #8]
}
 801c086:	bf00      	nop
 801c088:	370c      	adds	r7, #12
 801c08a:	46bd      	mov	sp, r7
 801c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c090:	4770      	bx	lr

0801c092 <LL_RCC_GetSysClkSource>:
{
 801c092:	b480      	push	{r7}
 801c094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801c096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c09a:	689b      	ldr	r3, [r3, #8]
 801c09c:	f003 030c 	and.w	r3, r3, #12
}
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a8:	4770      	bx	lr

0801c0aa <LL_RCC_SetAHBPrescaler>:
{
 801c0aa:	b480      	push	{r7}
 801c0ac:	b083      	sub	sp, #12
 801c0ae:	af00      	add	r7, sp, #0
 801c0b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801c0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0b6:	689b      	ldr	r3, [r3, #8]
 801c0b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c0bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	4313      	orrs	r3, r2
 801c0c4:	608b      	str	r3, [r1, #8]
}
 801c0c6:	bf00      	nop
 801c0c8:	370c      	adds	r7, #12
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d0:	4770      	bx	lr

0801c0d2 <LL_C2_RCC_SetAHBPrescaler>:
{
 801c0d2:	b480      	push	{r7}
 801c0d4:	b083      	sub	sp, #12
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801c0da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801c0e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c0e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	4313      	orrs	r3, r2
 801c0ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801c0f2:	bf00      	nop
 801c0f4:	370c      	adds	r7, #12
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fc:	4770      	bx	lr

0801c0fe <LL_RCC_SetAHB4Prescaler>:
{
 801c0fe:	b480      	push	{r7}
 801c100:	b083      	sub	sp, #12
 801c102:	af00      	add	r7, sp, #0
 801c104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801c106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c10a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801c10e:	f023 020f 	bic.w	r2, r3, #15
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	091b      	lsrs	r3, r3, #4
 801c116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c11a:	4313      	orrs	r3, r2
 801c11c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801c120:	bf00      	nop
 801c122:	370c      	adds	r7, #12
 801c124:	46bd      	mov	sp, r7
 801c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c12a:	4770      	bx	lr

0801c12c <LL_RCC_SetAPB1Prescaler>:
{
 801c12c:	b480      	push	{r7}
 801c12e:	b083      	sub	sp, #12
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801c134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c138:	689b      	ldr	r3, [r3, #8]
 801c13a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c13e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	4313      	orrs	r3, r2
 801c146:	608b      	str	r3, [r1, #8]
}
 801c148:	bf00      	nop
 801c14a:	370c      	adds	r7, #12
 801c14c:	46bd      	mov	sp, r7
 801c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c152:	4770      	bx	lr

0801c154 <LL_RCC_SetAPB2Prescaler>:
{
 801c154:	b480      	push	{r7}
 801c156:	b083      	sub	sp, #12
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801c15c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c160:	689b      	ldr	r3, [r3, #8]
 801c162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	4313      	orrs	r3, r2
 801c16e:	608b      	str	r3, [r1, #8]
}
 801c170:	bf00      	nop
 801c172:	370c      	adds	r7, #12
 801c174:	46bd      	mov	sp, r7
 801c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c17a:	4770      	bx	lr

0801c17c <LL_RCC_GetAHBPrescaler>:
{
 801c17c:	b480      	push	{r7}
 801c17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801c180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c184:	689b      	ldr	r3, [r3, #8]
 801c186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	46bd      	mov	sp, r7
 801c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c192:	4770      	bx	lr

0801c194 <LL_RCC_GetAHB4Prescaler>:
{
 801c194:	b480      	push	{r7}
 801c196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801c198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c19c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801c1a0:	011b      	lsls	r3, r3, #4
 801c1a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801c1a6:	4618      	mov	r0, r3
 801c1a8:	46bd      	mov	sp, r7
 801c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ae:	4770      	bx	lr

0801c1b0 <LL_RCC_GetAPB1Prescaler>:
{
 801c1b0:	b480      	push	{r7}
 801c1b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801c1b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1b8:	689b      	ldr	r3, [r3, #8]
 801c1ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801c1be:	4618      	mov	r0, r3
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c6:	4770      	bx	lr

0801c1c8 <LL_RCC_GetAPB2Prescaler>:
{
 801c1c8:	b480      	push	{r7}
 801c1ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801c1cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1d0:	689b      	ldr	r3, [r3, #8]
 801c1d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1de:	4770      	bx	lr

0801c1e0 <LL_RCC_PLL_Enable>:
{
 801c1e0:	b480      	push	{r7}
 801c1e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801c1e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c1ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c1f2:	6013      	str	r3, [r2, #0]
}
 801c1f4:	bf00      	nop
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fc:	4770      	bx	lr

0801c1fe <LL_RCC_PLL_Disable>:
{
 801c1fe:	b480      	push	{r7}
 801c200:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801c202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c20c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c210:	6013      	str	r3, [r2, #0]
}
 801c212:	bf00      	nop
 801c214:	46bd      	mov	sp, r7
 801c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c21a:	4770      	bx	lr

0801c21c <LL_RCC_PLL_IsReady>:
{
 801c21c:	b480      	push	{r7}
 801c21e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801c220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c22a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c22e:	d101      	bne.n	801c234 <LL_RCC_PLL_IsReady+0x18>
 801c230:	2301      	movs	r3, #1
 801c232:	e000      	b.n	801c236 <LL_RCC_PLL_IsReady+0x1a>
 801c234:	2300      	movs	r3, #0
}
 801c236:	4618      	mov	r0, r3
 801c238:	46bd      	mov	sp, r7
 801c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23e:	4770      	bx	lr

0801c240 <LL_RCC_PLL_GetN>:
{
 801c240:	b480      	push	{r7}
 801c242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801c244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c248:	68db      	ldr	r3, [r3, #12]
 801c24a:	0a1b      	lsrs	r3, r3, #8
 801c24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801c250:	4618      	mov	r0, r3
 801c252:	46bd      	mov	sp, r7
 801c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c258:	4770      	bx	lr

0801c25a <LL_RCC_PLL_GetR>:
{
 801c25a:	b480      	push	{r7}
 801c25c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801c25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801c268:	4618      	mov	r0, r3
 801c26a:	46bd      	mov	sp, r7
 801c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c270:	4770      	bx	lr

0801c272 <LL_RCC_PLL_GetDivider>:
{
 801c272:	b480      	push	{r7}
 801c274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801c276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c27a:	68db      	ldr	r3, [r3, #12]
 801c27c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801c280:	4618      	mov	r0, r3
 801c282:	46bd      	mov	sp, r7
 801c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c288:	4770      	bx	lr

0801c28a <LL_RCC_PLL_GetMainSource>:
{
 801c28a:	b480      	push	{r7}
 801c28c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801c28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c292:	68db      	ldr	r3, [r3, #12]
 801c294:	f003 0303 	and.w	r3, r3, #3
}
 801c298:	4618      	mov	r0, r3
 801c29a:	46bd      	mov	sp, r7
 801c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a0:	4770      	bx	lr

0801c2a2 <LL_RCC_IsActiveFlag_HPRE>:
{
 801c2a2:	b480      	push	{r7}
 801c2a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801c2a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2aa:	689b      	ldr	r3, [r3, #8]
 801c2ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c2b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2b4:	d101      	bne.n	801c2ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 801c2b6:	2301      	movs	r3, #1
 801c2b8:	e000      	b.n	801c2bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801c2ba:	2300      	movs	r3, #0
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c4:	4770      	bx	lr

0801c2c6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 801c2c6:	b480      	push	{r7}
 801c2c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801c2ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801c2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c2da:	d101      	bne.n	801c2e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801c2dc:	2301      	movs	r3, #1
 801c2de:	e000      	b.n	801c2e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801c2e0:	2300      	movs	r3, #0
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ea:	4770      	bx	lr

0801c2ec <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 801c2ec:	b480      	push	{r7}
 801c2ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801c2f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801c2f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c300:	d101      	bne.n	801c306 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801c302:	2301      	movs	r3, #1
 801c304:	e000      	b.n	801c308 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801c306:	2300      	movs	r3, #0
}
 801c308:	4618      	mov	r0, r3
 801c30a:	46bd      	mov	sp, r7
 801c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c310:	4770      	bx	lr

0801c312 <LL_RCC_IsActiveFlag_PPRE1>:
{
 801c312:	b480      	push	{r7}
 801c314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801c316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c31a:	689b      	ldr	r3, [r3, #8]
 801c31c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c324:	d101      	bne.n	801c32a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801c326:	2301      	movs	r3, #1
 801c328:	e000      	b.n	801c32c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801c32a:	2300      	movs	r3, #0
}
 801c32c:	4618      	mov	r0, r3
 801c32e:	46bd      	mov	sp, r7
 801c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c334:	4770      	bx	lr

0801c336 <LL_RCC_IsActiveFlag_PPRE2>:
{
 801c336:	b480      	push	{r7}
 801c338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801c33a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c33e:	689b      	ldr	r3, [r3, #8]
 801c340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c348:	d101      	bne.n	801c34e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801c34a:	2301      	movs	r3, #1
 801c34c:	e000      	b.n	801c350 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801c34e:	2300      	movs	r3, #0
}
 801c350:	4618      	mov	r0, r3
 801c352:	46bd      	mov	sp, r7
 801c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c358:	4770      	bx	lr
	...

0801c35c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c35c:	b590      	push	{r4, r7, lr}
 801c35e:	b08d      	sub	sp, #52	; 0x34
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d101      	bne.n	801c36e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c36a:	2301      	movs	r3, #1
 801c36c:	e363      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	f003 0320 	and.w	r3, r3, #32
 801c376:	2b00      	cmp	r3, #0
 801c378:	f000 808d 	beq.w	801c496 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c37c:	f7ff fe89 	bl	801c092 <LL_RCC_GetSysClkSource>
 801c380:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c382:	f7ff ff82 	bl	801c28a <LL_RCC_PLL_GetMainSource>
 801c386:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d005      	beq.n	801c39a <HAL_RCC_OscConfig+0x3e>
 801c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c390:	2b0c      	cmp	r3, #12
 801c392:	d147      	bne.n	801c424 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c396:	2b01      	cmp	r3, #1
 801c398:	d144      	bne.n	801c424 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	69db      	ldr	r3, [r3, #28]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d101      	bne.n	801c3a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801c3a2:	2301      	movs	r3, #1
 801c3a4:	e347      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801c3aa:	f7ff fe34 	bl	801c016 <LL_RCC_MSI_GetRange>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	429c      	cmp	r4, r3
 801c3b2:	d914      	bls.n	801c3de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f000 fd2f 	bl	801ce1c <RCC_SetFlashLatencyFromMSIRange>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d001      	beq.n	801c3c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	e336      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7ff fe0e 	bl	801bfee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6a1b      	ldr	r3, [r3, #32]
 801c3d6:	4618      	mov	r0, r3
 801c3d8:	f7ff fe32 	bl	801c040 <LL_RCC_MSI_SetCalibTrimming>
 801c3dc:	e013      	b.n	801c406 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	f7ff fe03 	bl	801bfee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	6a1b      	ldr	r3, [r3, #32]
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f7ff fe27 	bl	801c040 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3f6:	4618      	mov	r0, r3
 801c3f8:	f000 fd10 	bl	801ce1c <RCC_SetFlashLatencyFromMSIRange>
 801c3fc:	4603      	mov	r3, r0
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d001      	beq.n	801c406 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801c402:	2301      	movs	r3, #1
 801c404:	e317      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801c406:	f000 fcc9 	bl	801cd9c <HAL_RCC_GetHCLKFreq>
 801c40a:	4603      	mov	r3, r0
 801c40c:	4aa4      	ldr	r2, [pc, #656]	; (801c6a0 <HAL_RCC_OscConfig+0x344>)
 801c40e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c410:	4ba4      	ldr	r3, [pc, #656]	; (801c6a4 <HAL_RCC_OscConfig+0x348>)
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	4618      	mov	r0, r3
 801c416:	f7fd fa03 	bl	8019820 <HAL_InitTick>
 801c41a:	4603      	mov	r3, r0
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d039      	beq.n	801c494 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801c420:	2301      	movs	r3, #1
 801c422:	e308      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	69db      	ldr	r3, [r3, #28]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d01e      	beq.n	801c46a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801c42c:	f7ff fdb0 	bl	801bf90 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c430:	f7fd fa44 	bl	80198bc <HAL_GetTick>
 801c434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801c436:	e008      	b.n	801c44a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c438:	f7fd fa40 	bl	80198bc <HAL_GetTick>
 801c43c:	4602      	mov	r2, r0
 801c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c440:	1ad3      	subs	r3, r2, r3
 801c442:	2b02      	cmp	r3, #2
 801c444:	d901      	bls.n	801c44a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801c446:	2303      	movs	r3, #3
 801c448:	e2f5      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 801c44a:	f7ff fdbf 	bl	801bfcc <LL_RCC_MSI_IsReady>
 801c44e:	4603      	mov	r3, r0
 801c450:	2b00      	cmp	r3, #0
 801c452:	d0f1      	beq.n	801c438 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c458:	4618      	mov	r0, r3
 801c45a:	f7ff fdc8 	bl	801bfee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6a1b      	ldr	r3, [r3, #32]
 801c462:	4618      	mov	r0, r3
 801c464:	f7ff fdec 	bl	801c040 <LL_RCC_MSI_SetCalibTrimming>
 801c468:	e015      	b.n	801c496 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801c46a:	f7ff fda0 	bl	801bfae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c46e:	f7fd fa25 	bl	80198bc <HAL_GetTick>
 801c472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801c474:	e008      	b.n	801c488 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c476:	f7fd fa21 	bl	80198bc <HAL_GetTick>
 801c47a:	4602      	mov	r2, r0
 801c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c47e:	1ad3      	subs	r3, r2, r3
 801c480:	2b02      	cmp	r3, #2
 801c482:	d901      	bls.n	801c488 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801c484:	2303      	movs	r3, #3
 801c486:	e2d6      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 801c488:	f7ff fda0 	bl	801bfcc <LL_RCC_MSI_IsReady>
 801c48c:	4603      	mov	r3, r0
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d1f1      	bne.n	801c476 <HAL_RCC_OscConfig+0x11a>
 801c492:	e000      	b.n	801c496 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801c494:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	f003 0301 	and.w	r3, r3, #1
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d047      	beq.n	801c532 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c4a2:	f7ff fdf6 	bl	801c092 <LL_RCC_GetSysClkSource>
 801c4a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c4a8:	f7ff feef 	bl	801c28a <LL_RCC_PLL_GetMainSource>
 801c4ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801c4ae:	6a3b      	ldr	r3, [r7, #32]
 801c4b0:	2b08      	cmp	r3, #8
 801c4b2:	d005      	beq.n	801c4c0 <HAL_RCC_OscConfig+0x164>
 801c4b4:	6a3b      	ldr	r3, [r7, #32]
 801c4b6:	2b0c      	cmp	r3, #12
 801c4b8:	d108      	bne.n	801c4cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801c4ba:	69fb      	ldr	r3, [r7, #28]
 801c4bc:	2b03      	cmp	r3, #3
 801c4be:	d105      	bne.n	801c4cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	685b      	ldr	r3, [r3, #4]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d134      	bne.n	801c532 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 801c4c8:	2301      	movs	r3, #1
 801c4ca:	e2b4      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	685b      	ldr	r3, [r3, #4]
 801c4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c4d4:	d102      	bne.n	801c4dc <HAL_RCC_OscConfig+0x180>
 801c4d6:	f7ff fbdd 	bl	801bc94 <LL_RCC_HSE_Enable>
 801c4da:	e001      	b.n	801c4e0 <HAL_RCC_OscConfig+0x184>
 801c4dc:	f7ff fbe9 	bl	801bcb2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	685b      	ldr	r3, [r3, #4]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d012      	beq.n	801c50e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4e8:	f7fd f9e8 	bl	80198bc <HAL_GetTick>
 801c4ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801c4ee:	e008      	b.n	801c502 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c4f0:	f7fd f9e4 	bl	80198bc <HAL_GetTick>
 801c4f4:	4602      	mov	r2, r0
 801c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f8:	1ad3      	subs	r3, r2, r3
 801c4fa:	2b64      	cmp	r3, #100	; 0x64
 801c4fc:	d901      	bls.n	801c502 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801c4fe:	2303      	movs	r3, #3
 801c500:	e299      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801c502:	f7ff fbe5 	bl	801bcd0 <LL_RCC_HSE_IsReady>
 801c506:	4603      	mov	r3, r0
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d0f1      	beq.n	801c4f0 <HAL_RCC_OscConfig+0x194>
 801c50c:	e011      	b.n	801c532 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c50e:	f7fd f9d5 	bl	80198bc <HAL_GetTick>
 801c512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801c514:	e008      	b.n	801c528 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c516:	f7fd f9d1 	bl	80198bc <HAL_GetTick>
 801c51a:	4602      	mov	r2, r0
 801c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c51e:	1ad3      	subs	r3, r2, r3
 801c520:	2b64      	cmp	r3, #100	; 0x64
 801c522:	d901      	bls.n	801c528 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801c524:	2303      	movs	r3, #3
 801c526:	e286      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 801c528:	f7ff fbd2 	bl	801bcd0 <LL_RCC_HSE_IsReady>
 801c52c:	4603      	mov	r3, r0
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d1f1      	bne.n	801c516 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	f003 0302 	and.w	r3, r3, #2
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d04c      	beq.n	801c5d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c53e:	f7ff fda8 	bl	801c092 <LL_RCC_GetSysClkSource>
 801c542:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c544:	f7ff fea1 	bl	801c28a <LL_RCC_PLL_GetMainSource>
 801c548:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	2b04      	cmp	r3, #4
 801c54e:	d005      	beq.n	801c55c <HAL_RCC_OscConfig+0x200>
 801c550:	69bb      	ldr	r3, [r7, #24]
 801c552:	2b0c      	cmp	r3, #12
 801c554:	d10e      	bne.n	801c574 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801c556:	697b      	ldr	r3, [r7, #20]
 801c558:	2b02      	cmp	r3, #2
 801c55a:	d10b      	bne.n	801c574 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	68db      	ldr	r3, [r3, #12]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d101      	bne.n	801c568 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801c564:	2301      	movs	r3, #1
 801c566:	e266      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	691b      	ldr	r3, [r3, #16]
 801c56c:	4618      	mov	r0, r3
 801c56e:	f7ff fbf1 	bl	801bd54 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801c572:	e031      	b.n	801c5d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	68db      	ldr	r3, [r3, #12]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d019      	beq.n	801c5b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c57c:	f7ff fbba 	bl	801bcf4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c580:	f7fd f99c 	bl	80198bc <HAL_GetTick>
 801c584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801c586:	e008      	b.n	801c59a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c588:	f7fd f998 	bl	80198bc <HAL_GetTick>
 801c58c:	4602      	mov	r2, r0
 801c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c590:	1ad3      	subs	r3, r2, r3
 801c592:	2b02      	cmp	r3, #2
 801c594:	d901      	bls.n	801c59a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c596:	2303      	movs	r3, #3
 801c598:	e24d      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801c59a:	f7ff fbc9 	bl	801bd30 <LL_RCC_HSI_IsReady>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d0f1      	beq.n	801c588 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	691b      	ldr	r3, [r3, #16]
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f7ff fbd3 	bl	801bd54 <LL_RCC_HSI_SetCalibTrimming>
 801c5ae:	e013      	b.n	801c5d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c5b0:	f7ff fbaf 	bl	801bd12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5b4:	f7fd f982 	bl	80198bc <HAL_GetTick>
 801c5b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801c5ba:	e008      	b.n	801c5ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c5bc:	f7fd f97e 	bl	80198bc <HAL_GetTick>
 801c5c0:	4602      	mov	r2, r0
 801c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c4:	1ad3      	subs	r3, r2, r3
 801c5c6:	2b02      	cmp	r3, #2
 801c5c8:	d901      	bls.n	801c5ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801c5ca:	2303      	movs	r3, #3
 801c5cc:	e233      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801c5ce:	f7ff fbaf 	bl	801bd30 <LL_RCC_HSI_IsReady>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d1f1      	bne.n	801c5bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	f003 0308 	and.w	r3, r3, #8
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d106      	bne.n	801c5f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	f000 80a3 	beq.w	801c738 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	695b      	ldr	r3, [r3, #20]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d076      	beq.n	801c6e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	f003 0310 	and.w	r3, r3, #16
 801c602:	2b00      	cmp	r3, #0
 801c604:	d046      	beq.n	801c694 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801c606:	f7ff fc66 	bl	801bed6 <LL_RCC_LSI1_IsReady>
 801c60a:	4603      	mov	r3, r0
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d113      	bne.n	801c638 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801c610:	f7ff fc3f 	bl	801be92 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c614:	f7fd f952 	bl	80198bc <HAL_GetTick>
 801c618:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801c61a:	e008      	b.n	801c62e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801c61c:	f7fd f94e 	bl	80198bc <HAL_GetTick>
 801c620:	4602      	mov	r2, r0
 801c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c624:	1ad3      	subs	r3, r2, r3
 801c626:	2b02      	cmp	r3, #2
 801c628:	d901      	bls.n	801c62e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801c62a:	2303      	movs	r3, #3
 801c62c:	e203      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801c62e:	f7ff fc52 	bl	801bed6 <LL_RCC_LSI1_IsReady>
 801c632:	4603      	mov	r3, r0
 801c634:	2b00      	cmp	r3, #0
 801c636:	d0f1      	beq.n	801c61c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801c638:	f7ff fc5f 	bl	801befa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c63c:	f7fd f93e 	bl	80198bc <HAL_GetTick>
 801c640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801c642:	e008      	b.n	801c656 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801c644:	f7fd f93a 	bl	80198bc <HAL_GetTick>
 801c648:	4602      	mov	r2, r0
 801c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c64c:	1ad3      	subs	r3, r2, r3
 801c64e:	2b03      	cmp	r3, #3
 801c650:	d901      	bls.n	801c656 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801c652:	2303      	movs	r3, #3
 801c654:	e1ef      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801c656:	f7ff fc72 	bl	801bf3e <LL_RCC_LSI2_IsReady>
 801c65a:	4603      	mov	r3, r0
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d0f1      	beq.n	801c644 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	699b      	ldr	r3, [r3, #24]
 801c664:	4618      	mov	r0, r3
 801c666:	f7ff fc7c 	bl	801bf62 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801c66a:	f7ff fc23 	bl	801beb4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c66e:	f7fd f925 	bl	80198bc <HAL_GetTick>
 801c672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801c674:	e008      	b.n	801c688 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801c676:	f7fd f921 	bl	80198bc <HAL_GetTick>
 801c67a:	4602      	mov	r2, r0
 801c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67e:	1ad3      	subs	r3, r2, r3
 801c680:	2b02      	cmp	r3, #2
 801c682:	d901      	bls.n	801c688 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801c684:	2303      	movs	r3, #3
 801c686:	e1d6      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801c688:	f7ff fc25 	bl	801bed6 <LL_RCC_LSI1_IsReady>
 801c68c:	4603      	mov	r3, r0
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d1f1      	bne.n	801c676 <HAL_RCC_OscConfig+0x31a>
 801c692:	e051      	b.n	801c738 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801c694:	f7ff fbfd 	bl	801be92 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c698:	f7fd f910 	bl	80198bc <HAL_GetTick>
 801c69c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801c69e:	e00c      	b.n	801c6ba <HAL_RCC_OscConfig+0x35e>
 801c6a0:	20000018 	.word	0x20000018
 801c6a4:	20000084 	.word	0x20000084
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801c6a8:	f7fd f908 	bl	80198bc <HAL_GetTick>
 801c6ac:	4602      	mov	r2, r0
 801c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6b0:	1ad3      	subs	r3, r2, r3
 801c6b2:	2b02      	cmp	r3, #2
 801c6b4:	d901      	bls.n	801c6ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801c6b6:	2303      	movs	r3, #3
 801c6b8:	e1bd      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801c6ba:	f7ff fc0c 	bl	801bed6 <LL_RCC_LSI1_IsReady>
 801c6be:	4603      	mov	r3, r0
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d0f1      	beq.n	801c6a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801c6c4:	f7ff fc2a 	bl	801bf1c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801c6c8:	e008      	b.n	801c6dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801c6ca:	f7fd f8f7 	bl	80198bc <HAL_GetTick>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d2:	1ad3      	subs	r3, r2, r3
 801c6d4:	2b03      	cmp	r3, #3
 801c6d6:	d901      	bls.n	801c6dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801c6d8:	2303      	movs	r3, #3
 801c6da:	e1ac      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801c6dc:	f7ff fc2f 	bl	801bf3e <LL_RCC_LSI2_IsReady>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d1f1      	bne.n	801c6ca <HAL_RCC_OscConfig+0x36e>
 801c6e6:	e027      	b.n	801c738 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801c6e8:	f7ff fc18 	bl	801bf1c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6ec:	f7fd f8e6 	bl	80198bc <HAL_GetTick>
 801c6f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801c6f2:	e008      	b.n	801c706 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801c6f4:	f7fd f8e2 	bl	80198bc <HAL_GetTick>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6fc:	1ad3      	subs	r3, r2, r3
 801c6fe:	2b03      	cmp	r3, #3
 801c700:	d901      	bls.n	801c706 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801c702:	2303      	movs	r3, #3
 801c704:	e197      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801c706:	f7ff fc1a 	bl	801bf3e <LL_RCC_LSI2_IsReady>
 801c70a:	4603      	mov	r3, r0
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d1f1      	bne.n	801c6f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801c710:	f7ff fbd0 	bl	801beb4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c714:	f7fd f8d2 	bl	80198bc <HAL_GetTick>
 801c718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801c71a:	e008      	b.n	801c72e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801c71c:	f7fd f8ce 	bl	80198bc <HAL_GetTick>
 801c720:	4602      	mov	r2, r0
 801c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	2b02      	cmp	r3, #2
 801c728:	d901      	bls.n	801c72e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801c72a:	2303      	movs	r3, #3
 801c72c:	e183      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801c72e:	f7ff fbd2 	bl	801bed6 <LL_RCC_LSI1_IsReady>
 801c732:	4603      	mov	r3, r0
 801c734:	2b00      	cmp	r3, #0
 801c736:	d1f1      	bne.n	801c71c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	f003 0304 	and.w	r3, r3, #4
 801c740:	2b00      	cmp	r3, #0
 801c742:	d05b      	beq.n	801c7fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c744:	4ba7      	ldr	r3, [pc, #668]	; (801c9e4 <HAL_RCC_OscConfig+0x688>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d114      	bne.n	801c77a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801c750:	f7ff fa70 	bl	801bc34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c754:	f7fd f8b2 	bl	80198bc <HAL_GetTick>
 801c758:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c75a:	e008      	b.n	801c76e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c75c:	f7fd f8ae 	bl	80198bc <HAL_GetTick>
 801c760:	4602      	mov	r2, r0
 801c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c764:	1ad3      	subs	r3, r2, r3
 801c766:	2b02      	cmp	r3, #2
 801c768:	d901      	bls.n	801c76e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801c76a:	2303      	movs	r3, #3
 801c76c:	e163      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c76e:	4b9d      	ldr	r3, [pc, #628]	; (801c9e4 <HAL_RCC_OscConfig+0x688>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c776:	2b00      	cmp	r3, #0
 801c778:	d0f0      	beq.n	801c75c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	689b      	ldr	r3, [r3, #8]
 801c77e:	2b01      	cmp	r3, #1
 801c780:	d102      	bne.n	801c788 <HAL_RCC_OscConfig+0x42c>
 801c782:	f7ff fb30 	bl	801bde6 <LL_RCC_LSE_Enable>
 801c786:	e00c      	b.n	801c7a2 <HAL_RCC_OscConfig+0x446>
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	689b      	ldr	r3, [r3, #8]
 801c78c:	2b05      	cmp	r3, #5
 801c78e:	d104      	bne.n	801c79a <HAL_RCC_OscConfig+0x43e>
 801c790:	f7ff fb4b 	bl	801be2a <LL_RCC_LSE_EnableBypass>
 801c794:	f7ff fb27 	bl	801bde6 <LL_RCC_LSE_Enable>
 801c798:	e003      	b.n	801c7a2 <HAL_RCC_OscConfig+0x446>
 801c79a:	f7ff fb35 	bl	801be08 <LL_RCC_LSE_Disable>
 801c79e:	f7ff fb55 	bl	801be4c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	689b      	ldr	r3, [r3, #8]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d014      	beq.n	801c7d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c7aa:	f7fd f887 	bl	80198bc <HAL_GetTick>
 801c7ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801c7b0:	e00a      	b.n	801c7c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c7b2:	f7fd f883 	bl	80198bc <HAL_GetTick>
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ba:	1ad3      	subs	r3, r2, r3
 801c7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 801c7c0:	4293      	cmp	r3, r2
 801c7c2:	d901      	bls.n	801c7c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801c7c4:	2303      	movs	r3, #3
 801c7c6:	e136      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801c7c8:	f7ff fb51 	bl	801be6e <LL_RCC_LSE_IsReady>
 801c7cc:	4603      	mov	r3, r0
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d0ef      	beq.n	801c7b2 <HAL_RCC_OscConfig+0x456>
 801c7d2:	e013      	b.n	801c7fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c7d4:	f7fd f872 	bl	80198bc <HAL_GetTick>
 801c7d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801c7da:	e00a      	b.n	801c7f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c7dc:	f7fd f86e 	bl	80198bc <HAL_GetTick>
 801c7e0:	4602      	mov	r2, r0
 801c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e4:	1ad3      	subs	r3, r2, r3
 801c7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c7ea:	4293      	cmp	r3, r2
 801c7ec:	d901      	bls.n	801c7f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801c7ee:	2303      	movs	r3, #3
 801c7f0:	e121      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801c7f2:	f7ff fb3c 	bl	801be6e <LL_RCC_LSE_IsReady>
 801c7f6:	4603      	mov	r3, r0
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d1ef      	bne.n	801c7dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c804:	2b00      	cmp	r3, #0
 801c806:	d02c      	beq.n	801c862 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d014      	beq.n	801c83a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c810:	f7ff fab5 	bl	801bd7e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c814:	f7fd f852 	bl	80198bc <HAL_GetTick>
 801c818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801c81a:	e008      	b.n	801c82e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c81c:	f7fd f84e 	bl	80198bc <HAL_GetTick>
 801c820:	4602      	mov	r2, r0
 801c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c824:	1ad3      	subs	r3, r2, r3
 801c826:	2b02      	cmp	r3, #2
 801c828:	d901      	bls.n	801c82e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801c82a:	2303      	movs	r3, #3
 801c82c:	e103      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801c82e:	f7ff fac8 	bl	801bdc2 <LL_RCC_HSI48_IsReady>
 801c832:	4603      	mov	r3, r0
 801c834:	2b00      	cmp	r3, #0
 801c836:	d0f1      	beq.n	801c81c <HAL_RCC_OscConfig+0x4c0>
 801c838:	e013      	b.n	801c862 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c83a:	f7ff fab1 	bl	801bda0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c83e:	f7fd f83d 	bl	80198bc <HAL_GetTick>
 801c842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801c844:	e008      	b.n	801c858 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c846:	f7fd f839 	bl	80198bc <HAL_GetTick>
 801c84a:	4602      	mov	r2, r0
 801c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c84e:	1ad3      	subs	r3, r2, r3
 801c850:	2b02      	cmp	r3, #2
 801c852:	d901      	bls.n	801c858 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801c854:	2303      	movs	r3, #3
 801c856:	e0ee      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801c858:	f7ff fab3 	bl	801bdc2 <LL_RCC_HSI48_IsReady>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1f1      	bne.n	801c846 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c866:	2b00      	cmp	r3, #0
 801c868:	f000 80e4 	beq.w	801ca34 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c86c:	f7ff fc11 	bl	801c092 <LL_RCC_GetSysClkSource>
 801c870:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801c872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c876:	68db      	ldr	r3, [r3, #12]
 801c878:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c87e:	2b02      	cmp	r3, #2
 801c880:	f040 80b4 	bne.w	801c9ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	f003 0203 	and.w	r2, r3, #3
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c88e:	429a      	cmp	r2, r3
 801c890:	d123      	bne.n	801c8da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d11c      	bne.n	801c8da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	0a1b      	lsrs	r3, r3, #8
 801c8a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d114      	bne.n	801c8da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	d10d      	bne.n	801c8da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801c8c8:	429a      	cmp	r2, r3
 801c8ca:	d106      	bne.n	801c8da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801c8d6:	429a      	cmp	r2, r3
 801c8d8:	d05d      	beq.n	801c996 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801c8da:	693b      	ldr	r3, [r7, #16]
 801c8dc:	2b0c      	cmp	r3, #12
 801c8de:	d058      	beq.n	801c992 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801c8e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d001      	beq.n	801c8f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801c8ee:	2301      	movs	r3, #1
 801c8f0:	e0a1      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801c8f2:	f7ff fc84 	bl	801c1fe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c8f6:	f7fc ffe1 	bl	80198bc <HAL_GetTick>
 801c8fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c8fc:	e008      	b.n	801c910 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c8fe:	f7fc ffdd 	bl	80198bc <HAL_GetTick>
 801c902:	4602      	mov	r2, r0
 801c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c906:	1ad3      	subs	r3, r2, r3
 801c908:	2b02      	cmp	r3, #2
 801c90a:	d901      	bls.n	801c910 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801c90c:	2303      	movs	r3, #3
 801c90e:	e092      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d1ef      	bne.n	801c8fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c91e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c922:	68da      	ldr	r2, [r3, #12]
 801c924:	4b30      	ldr	r3, [pc, #192]	; (801c9e8 <HAL_RCC_OscConfig+0x68c>)
 801c926:	4013      	ands	r3, r2
 801c928:	687a      	ldr	r2, [r7, #4]
 801c92a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801c92c:	687a      	ldr	r2, [r7, #4]
 801c92e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c930:	4311      	orrs	r1, r2
 801c932:	687a      	ldr	r2, [r7, #4]
 801c934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c936:	0212      	lsls	r2, r2, #8
 801c938:	4311      	orrs	r1, r2
 801c93a:	687a      	ldr	r2, [r7, #4]
 801c93c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c93e:	4311      	orrs	r1, r2
 801c940:	687a      	ldr	r2, [r7, #4]
 801c942:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801c944:	4311      	orrs	r1, r2
 801c946:	687a      	ldr	r2, [r7, #4]
 801c948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801c94a:	430a      	orrs	r2, r1
 801c94c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c950:	4313      	orrs	r3, r2
 801c952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801c954:	f7ff fc44 	bl	801c1e0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c95c:	68db      	ldr	r3, [r3, #12]
 801c95e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c968:	f7fc ffa8 	bl	80198bc <HAL_GetTick>
 801c96c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c96e:	e008      	b.n	801c982 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c970:	f7fc ffa4 	bl	80198bc <HAL_GetTick>
 801c974:	4602      	mov	r2, r0
 801c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c978:	1ad3      	subs	r3, r2, r3
 801c97a:	2b02      	cmp	r3, #2
 801c97c:	d901      	bls.n	801c982 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801c97e:	2303      	movs	r3, #3
 801c980:	e059      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d0ef      	beq.n	801c970 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801c990:	e050      	b.n	801ca34 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801c992:	2301      	movs	r3, #1
 801c994:	e04f      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d147      	bne.n	801ca34 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801c9a4:	f7ff fc1c 	bl	801c1e0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c9a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c9ac:	68db      	ldr	r3, [r3, #12]
 801c9ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c9b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c9b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c9b8:	f7fc ff80 	bl	80198bc <HAL_GetTick>
 801c9bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c9be:	e008      	b.n	801c9d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c9c0:	f7fc ff7c 	bl	80198bc <HAL_GetTick>
 801c9c4:	4602      	mov	r2, r0
 801c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9c8:	1ad3      	subs	r3, r2, r3
 801c9ca:	2b02      	cmp	r3, #2
 801c9cc:	d901      	bls.n	801c9d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801c9ce:	2303      	movs	r3, #3
 801c9d0:	e031      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c9d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d0ef      	beq.n	801c9c0 <HAL_RCC_OscConfig+0x664>
 801c9e0:	e028      	b.n	801ca34 <HAL_RCC_OscConfig+0x6d8>
 801c9e2:	bf00      	nop
 801c9e4:	58000400 	.word	0x58000400
 801c9e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801c9ec:	693b      	ldr	r3, [r7, #16]
 801c9ee:	2b0c      	cmp	r3, #12
 801c9f0:	d01e      	beq.n	801ca30 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c9f2:	f7ff fc04 	bl	801c1fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c9f6:	f7fc ff61 	bl	80198bc <HAL_GetTick>
 801c9fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c9fc:	e008      	b.n	801ca10 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c9fe:	f7fc ff5d 	bl	80198bc <HAL_GetTick>
 801ca02:	4602      	mov	r2, r0
 801ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca06:	1ad3      	subs	r3, r2, r3
 801ca08:	2b02      	cmp	r3, #2
 801ca0a:	d901      	bls.n	801ca10 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 801ca0c:	2303      	movs	r3, #3
 801ca0e:	e012      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ca10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d1ef      	bne.n	801c9fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801ca1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ca22:	68da      	ldr	r2, [r3, #12]
 801ca24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ca28:	4b05      	ldr	r3, [pc, #20]	; (801ca40 <HAL_RCC_OscConfig+0x6e4>)
 801ca2a:	4013      	ands	r3, r2
 801ca2c:	60cb      	str	r3, [r1, #12]
 801ca2e:	e001      	b.n	801ca34 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801ca30:	2301      	movs	r3, #1
 801ca32:	e000      	b.n	801ca36 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 801ca34:	2300      	movs	r3, #0
}
 801ca36:	4618      	mov	r0, r3
 801ca38:	3734      	adds	r7, #52	; 0x34
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd90      	pop	{r4, r7, pc}
 801ca3e:	bf00      	nop
 801ca40:	eefefffc 	.word	0xeefefffc

0801ca44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b084      	sub	sp, #16
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
 801ca4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d101      	bne.n	801ca58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ca54:	2301      	movs	r3, #1
 801ca56:	e12d      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ca58:	4b98      	ldr	r3, [pc, #608]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	f003 0307 	and.w	r3, r3, #7
 801ca60:	683a      	ldr	r2, [r7, #0]
 801ca62:	429a      	cmp	r2, r3
 801ca64:	d91b      	bls.n	801ca9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca66:	4b95      	ldr	r3, [pc, #596]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	f023 0207 	bic.w	r2, r3, #7
 801ca6e:	4993      	ldr	r1, [pc, #588]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801ca70:	683b      	ldr	r3, [r7, #0]
 801ca72:	4313      	orrs	r3, r2
 801ca74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ca76:	f7fc ff21 	bl	80198bc <HAL_GetTick>
 801ca7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca7c:	e008      	b.n	801ca90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801ca7e:	f7fc ff1d 	bl	80198bc <HAL_GetTick>
 801ca82:	4602      	mov	r2, r0
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	1ad3      	subs	r3, r2, r3
 801ca88:	2b02      	cmp	r3, #2
 801ca8a:	d901      	bls.n	801ca90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801ca8c:	2303      	movs	r3, #3
 801ca8e:	e111      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca90:	4b8a      	ldr	r3, [pc, #552]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	f003 0307 	and.w	r3, r3, #7
 801ca98:	683a      	ldr	r2, [r7, #0]
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d1ef      	bne.n	801ca7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	f003 0302 	and.w	r3, r3, #2
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d016      	beq.n	801cad8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	689b      	ldr	r3, [r3, #8]
 801caae:	4618      	mov	r0, r3
 801cab0:	f7ff fafb 	bl	801c0aa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801cab4:	f7fc ff02 	bl	80198bc <HAL_GetTick>
 801cab8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801caba:	e008      	b.n	801cace <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801cabc:	f7fc fefe 	bl	80198bc <HAL_GetTick>
 801cac0:	4602      	mov	r2, r0
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	1ad3      	subs	r3, r2, r3
 801cac6:	2b02      	cmp	r3, #2
 801cac8:	d901      	bls.n	801cace <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801caca:	2303      	movs	r3, #3
 801cacc:	e0f2      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801cace:	f7ff fbe8 	bl	801c2a2 <LL_RCC_IsActiveFlag_HPRE>
 801cad2:	4603      	mov	r3, r0
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d0f1      	beq.n	801cabc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f003 0320 	and.w	r3, r3, #32
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d016      	beq.n	801cb12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	695b      	ldr	r3, [r3, #20]
 801cae8:	4618      	mov	r0, r3
 801caea:	f7ff faf2 	bl	801c0d2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801caee:	f7fc fee5 	bl	80198bc <HAL_GetTick>
 801caf2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801caf4:	e008      	b.n	801cb08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801caf6:	f7fc fee1 	bl	80198bc <HAL_GetTick>
 801cafa:	4602      	mov	r2, r0
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	1ad3      	subs	r3, r2, r3
 801cb00:	2b02      	cmp	r3, #2
 801cb02:	d901      	bls.n	801cb08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801cb04:	2303      	movs	r3, #3
 801cb06:	e0d5      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801cb08:	f7ff fbdd 	bl	801c2c6 <LL_RCC_IsActiveFlag_C2HPRE>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d0f1      	beq.n	801caf6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d016      	beq.n	801cb4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	699b      	ldr	r3, [r3, #24]
 801cb22:	4618      	mov	r0, r3
 801cb24:	f7ff faeb 	bl	801c0fe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801cb28:	f7fc fec8 	bl	80198bc <HAL_GetTick>
 801cb2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801cb2e:	e008      	b.n	801cb42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801cb30:	f7fc fec4 	bl	80198bc <HAL_GetTick>
 801cb34:	4602      	mov	r2, r0
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	1ad3      	subs	r3, r2, r3
 801cb3a:	2b02      	cmp	r3, #2
 801cb3c:	d901      	bls.n	801cb42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801cb3e:	2303      	movs	r3, #3
 801cb40:	e0b8      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801cb42:	f7ff fbd3 	bl	801c2ec <LL_RCC_IsActiveFlag_SHDHPRE>
 801cb46:	4603      	mov	r3, r0
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d0f1      	beq.n	801cb30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	f003 0304 	and.w	r3, r3, #4
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d016      	beq.n	801cb86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	68db      	ldr	r3, [r3, #12]
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	f7ff fae5 	bl	801c12c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801cb62:	f7fc feab 	bl	80198bc <HAL_GetTick>
 801cb66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801cb68:	e008      	b.n	801cb7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801cb6a:	f7fc fea7 	bl	80198bc <HAL_GetTick>
 801cb6e:	4602      	mov	r2, r0
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	1ad3      	subs	r3, r2, r3
 801cb74:	2b02      	cmp	r3, #2
 801cb76:	d901      	bls.n	801cb7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801cb78:	2303      	movs	r3, #3
 801cb7a:	e09b      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801cb7c:	f7ff fbc9 	bl	801c312 <LL_RCC_IsActiveFlag_PPRE1>
 801cb80:	4603      	mov	r3, r0
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d0f1      	beq.n	801cb6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	f003 0308 	and.w	r3, r3, #8
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d017      	beq.n	801cbc2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	691b      	ldr	r3, [r3, #16]
 801cb96:	00db      	lsls	r3, r3, #3
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7ff fadb 	bl	801c154 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801cb9e:	f7fc fe8d 	bl	80198bc <HAL_GetTick>
 801cba2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801cba4:	e008      	b.n	801cbb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801cba6:	f7fc fe89 	bl	80198bc <HAL_GetTick>
 801cbaa:	4602      	mov	r2, r0
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	1ad3      	subs	r3, r2, r3
 801cbb0:	2b02      	cmp	r3, #2
 801cbb2:	d901      	bls.n	801cbb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801cbb4:	2303      	movs	r3, #3
 801cbb6:	e07d      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801cbb8:	f7ff fbbd 	bl	801c336 <LL_RCC_IsActiveFlag_PPRE2>
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d0f1      	beq.n	801cba6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	f003 0301 	and.w	r3, r3, #1
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d043      	beq.n	801cc56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	685b      	ldr	r3, [r3, #4]
 801cbd2:	2b02      	cmp	r3, #2
 801cbd4:	d106      	bne.n	801cbe4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801cbd6:	f7ff f87b 	bl	801bcd0 <LL_RCC_HSE_IsReady>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d11e      	bne.n	801cc1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801cbe0:	2301      	movs	r3, #1
 801cbe2:	e067      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	685b      	ldr	r3, [r3, #4]
 801cbe8:	2b03      	cmp	r3, #3
 801cbea:	d106      	bne.n	801cbfa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801cbec:	f7ff fb16 	bl	801c21c <LL_RCC_PLL_IsReady>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d113      	bne.n	801cc1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801cbf6:	2301      	movs	r3, #1
 801cbf8:	e05c      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	685b      	ldr	r3, [r3, #4]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d106      	bne.n	801cc10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801cc02:	f7ff f9e3 	bl	801bfcc <LL_RCC_MSI_IsReady>
 801cc06:	4603      	mov	r3, r0
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d108      	bne.n	801cc1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801cc0c:	2301      	movs	r3, #1
 801cc0e:	e051      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801cc10:	f7ff f88e 	bl	801bd30 <LL_RCC_HSI_IsReady>
 801cc14:	4603      	mov	r3, r0
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d101      	bne.n	801cc1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801cc1a:	2301      	movs	r3, #1
 801cc1c:	e04a      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	685b      	ldr	r3, [r3, #4]
 801cc22:	4618      	mov	r0, r3
 801cc24:	f7ff fa21 	bl	801c06a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cc28:	f7fc fe48 	bl	80198bc <HAL_GetTick>
 801cc2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cc2e:	e00a      	b.n	801cc46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cc30:	f7fc fe44 	bl	80198bc <HAL_GetTick>
 801cc34:	4602      	mov	r2, r0
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	1ad3      	subs	r3, r2, r3
 801cc3a:	f241 3288 	movw	r2, #5000	; 0x1388
 801cc3e:	4293      	cmp	r3, r2
 801cc40:	d901      	bls.n	801cc46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801cc42:	2303      	movs	r3, #3
 801cc44:	e036      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cc46:	f7ff fa24 	bl	801c092 <LL_RCC_GetSysClkSource>
 801cc4a:	4602      	mov	r2, r0
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	685b      	ldr	r3, [r3, #4]
 801cc50:	009b      	lsls	r3, r3, #2
 801cc52:	429a      	cmp	r2, r3
 801cc54:	d1ec      	bne.n	801cc30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cc56:	4b19      	ldr	r3, [pc, #100]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	f003 0307 	and.w	r3, r3, #7
 801cc5e:	683a      	ldr	r2, [r7, #0]
 801cc60:	429a      	cmp	r2, r3
 801cc62:	d21b      	bcs.n	801cc9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cc64:	4b15      	ldr	r3, [pc, #84]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	f023 0207 	bic.w	r2, r3, #7
 801cc6c:	4913      	ldr	r1, [pc, #76]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801cc6e:	683b      	ldr	r3, [r7, #0]
 801cc70:	4313      	orrs	r3, r2
 801cc72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cc74:	f7fc fe22 	bl	80198bc <HAL_GetTick>
 801cc78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cc7a:	e008      	b.n	801cc8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801cc7c:	f7fc fe1e 	bl	80198bc <HAL_GetTick>
 801cc80:	4602      	mov	r2, r0
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	1ad3      	subs	r3, r2, r3
 801cc86:	2b02      	cmp	r3, #2
 801cc88:	d901      	bls.n	801cc8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801cc8a:	2303      	movs	r3, #3
 801cc8c:	e012      	b.n	801ccb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cc8e:	4b0b      	ldr	r3, [pc, #44]	; (801ccbc <HAL_RCC_ClockConfig+0x278>)
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	f003 0307 	and.w	r3, r3, #7
 801cc96:	683a      	ldr	r2, [r7, #0]
 801cc98:	429a      	cmp	r2, r3
 801cc9a:	d1ef      	bne.n	801cc7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801cc9c:	f000 f87e 	bl	801cd9c <HAL_RCC_GetHCLKFreq>
 801cca0:	4603      	mov	r3, r0
 801cca2:	4a07      	ldr	r2, [pc, #28]	; (801ccc0 <HAL_RCC_ClockConfig+0x27c>)
 801cca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801cca6:	f7fc fe15 	bl	80198d4 <HAL_GetTickPrio>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	4618      	mov	r0, r3
 801ccae:	f7fc fdb7 	bl	8019820 <HAL_InitTick>
 801ccb2:	4603      	mov	r3, r0
}
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	3710      	adds	r7, #16
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	bd80      	pop	{r7, pc}
 801ccbc:	58004000 	.word	0x58004000
 801ccc0:	20000018 	.word	0x20000018

0801ccc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ccc4:	b590      	push	{r4, r7, lr}
 801ccc6:	b085      	sub	sp, #20
 801ccc8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ccca:	f7ff f9e2 	bl	801c092 <LL_RCC_GetSysClkSource>
 801ccce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d10a      	bne.n	801ccec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801ccd6:	f7ff f99e 	bl	801c016 <LL_RCC_MSI_GetRange>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	091b      	lsrs	r3, r3, #4
 801ccde:	f003 030f 	and.w	r3, r3, #15
 801cce2:	4a2b      	ldr	r2, [pc, #172]	; (801cd90 <HAL_RCC_GetSysClockFreq+0xcc>)
 801cce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cce8:	60fb      	str	r3, [r7, #12]
 801ccea:	e04b      	b.n	801cd84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2b04      	cmp	r3, #4
 801ccf0:	d102      	bne.n	801ccf8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801ccf2:	4b28      	ldr	r3, [pc, #160]	; (801cd94 <HAL_RCC_GetSysClockFreq+0xd0>)
 801ccf4:	60fb      	str	r3, [r7, #12]
 801ccf6:	e045      	b.n	801cd84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	2b08      	cmp	r3, #8
 801ccfc:	d10a      	bne.n	801cd14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801ccfe:	f7fe ffb7 	bl	801bc70 <LL_RCC_HSE_IsEnabledDiv2>
 801cd02:	4603      	mov	r3, r0
 801cd04:	2b01      	cmp	r3, #1
 801cd06:	d102      	bne.n	801cd0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801cd08:	4b22      	ldr	r3, [pc, #136]	; (801cd94 <HAL_RCC_GetSysClockFreq+0xd0>)
 801cd0a:	60fb      	str	r3, [r7, #12]
 801cd0c:	e03a      	b.n	801cd84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801cd0e:	4b22      	ldr	r3, [pc, #136]	; (801cd98 <HAL_RCC_GetSysClockFreq+0xd4>)
 801cd10:	60fb      	str	r3, [r7, #12]
 801cd12:	e037      	b.n	801cd84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801cd14:	f7ff fab9 	bl	801c28a <LL_RCC_PLL_GetMainSource>
 801cd18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801cd1a:	683b      	ldr	r3, [r7, #0]
 801cd1c:	2b02      	cmp	r3, #2
 801cd1e:	d003      	beq.n	801cd28 <HAL_RCC_GetSysClockFreq+0x64>
 801cd20:	683b      	ldr	r3, [r7, #0]
 801cd22:	2b03      	cmp	r3, #3
 801cd24:	d003      	beq.n	801cd2e <HAL_RCC_GetSysClockFreq+0x6a>
 801cd26:	e00d      	b.n	801cd44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801cd28:	4b1a      	ldr	r3, [pc, #104]	; (801cd94 <HAL_RCC_GetSysClockFreq+0xd0>)
 801cd2a:	60bb      	str	r3, [r7, #8]
        break;
 801cd2c:	e015      	b.n	801cd5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801cd2e:	f7fe ff9f 	bl	801bc70 <LL_RCC_HSE_IsEnabledDiv2>
 801cd32:	4603      	mov	r3, r0
 801cd34:	2b01      	cmp	r3, #1
 801cd36:	d102      	bne.n	801cd3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801cd38:	4b16      	ldr	r3, [pc, #88]	; (801cd94 <HAL_RCC_GetSysClockFreq+0xd0>)
 801cd3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801cd3c:	e00d      	b.n	801cd5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801cd3e:	4b16      	ldr	r3, [pc, #88]	; (801cd98 <HAL_RCC_GetSysClockFreq+0xd4>)
 801cd40:	60bb      	str	r3, [r7, #8]
        break;
 801cd42:	e00a      	b.n	801cd5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801cd44:	f7ff f967 	bl	801c016 <LL_RCC_MSI_GetRange>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	091b      	lsrs	r3, r3, #4
 801cd4c:	f003 030f 	and.w	r3, r3, #15
 801cd50:	4a0f      	ldr	r2, [pc, #60]	; (801cd90 <HAL_RCC_GetSysClockFreq+0xcc>)
 801cd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd56:	60bb      	str	r3, [r7, #8]
        break;
 801cd58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801cd5a:	f7ff fa71 	bl	801c240 <LL_RCC_PLL_GetN>
 801cd5e:	4602      	mov	r2, r0
 801cd60:	68bb      	ldr	r3, [r7, #8]
 801cd62:	fb03 f402 	mul.w	r4, r3, r2
 801cd66:	f7ff fa84 	bl	801c272 <LL_RCC_PLL_GetDivider>
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	091b      	lsrs	r3, r3, #4
 801cd6e:	3301      	adds	r3, #1
 801cd70:	fbb4 f4f3 	udiv	r4, r4, r3
 801cd74:	f7ff fa71 	bl	801c25a <LL_RCC_PLL_GetR>
 801cd78:	4603      	mov	r3, r0
 801cd7a:	0f5b      	lsrs	r3, r3, #29
 801cd7c:	3301      	adds	r3, #1
 801cd7e:	fbb4 f3f3 	udiv	r3, r4, r3
 801cd82:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801cd84:	68fb      	ldr	r3, [r7, #12]
}
 801cd86:	4618      	mov	r0, r3
 801cd88:	3714      	adds	r7, #20
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd90      	pop	{r4, r7, pc}
 801cd8e:	bf00      	nop
 801cd90:	0802a2fc 	.word	0x0802a2fc
 801cd94:	00f42400 	.word	0x00f42400
 801cd98:	01e84800 	.word	0x01e84800

0801cd9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cd9c:	b598      	push	{r3, r4, r7, lr}
 801cd9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801cda0:	f7ff ff90 	bl	801ccc4 <HAL_RCC_GetSysClockFreq>
 801cda4:	4604      	mov	r4, r0
 801cda6:	f7ff f9e9 	bl	801c17c <LL_RCC_GetAHBPrescaler>
 801cdaa:	4603      	mov	r3, r0
 801cdac:	091b      	lsrs	r3, r3, #4
 801cdae:	f003 030f 	and.w	r3, r3, #15
 801cdb2:	4a03      	ldr	r2, [pc, #12]	; (801cdc0 <HAL_RCC_GetHCLKFreq+0x24>)
 801cdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cdb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	bd98      	pop	{r3, r4, r7, pc}
 801cdc0:	0802a29c 	.word	0x0802a29c

0801cdc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cdc4:	b598      	push	{r3, r4, r7, lr}
 801cdc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801cdc8:	f7ff ffe8 	bl	801cd9c <HAL_RCC_GetHCLKFreq>
 801cdcc:	4604      	mov	r4, r0
 801cdce:	f7ff f9ef 	bl	801c1b0 <LL_RCC_GetAPB1Prescaler>
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	0a1b      	lsrs	r3, r3, #8
 801cdd6:	f003 0307 	and.w	r3, r3, #7
 801cdda:	4a04      	ldr	r2, [pc, #16]	; (801cdec <HAL_RCC_GetPCLK1Freq+0x28>)
 801cddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cde0:	f003 031f 	and.w	r3, r3, #31
 801cde4:	fa24 f303 	lsr.w	r3, r4, r3
}
 801cde8:	4618      	mov	r0, r3
 801cdea:	bd98      	pop	{r3, r4, r7, pc}
 801cdec:	0802a2dc 	.word	0x0802a2dc

0801cdf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cdf0:	b598      	push	{r3, r4, r7, lr}
 801cdf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801cdf4:	f7ff ffd2 	bl	801cd9c <HAL_RCC_GetHCLKFreq>
 801cdf8:	4604      	mov	r4, r0
 801cdfa:	f7ff f9e5 	bl	801c1c8 <LL_RCC_GetAPB2Prescaler>
 801cdfe:	4603      	mov	r3, r0
 801ce00:	0adb      	lsrs	r3, r3, #11
 801ce02:	f003 0307 	and.w	r3, r3, #7
 801ce06:	4a04      	ldr	r2, [pc, #16]	; (801ce18 <HAL_RCC_GetPCLK2Freq+0x28>)
 801ce08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce0c:	f003 031f 	and.w	r3, r3, #31
 801ce10:	fa24 f303 	lsr.w	r3, r4, r3
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	bd98      	pop	{r3, r4, r7, pc}
 801ce18:	0802a2dc 	.word	0x0802a2dc

0801ce1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801ce1c:	b590      	push	{r4, r7, lr}
 801ce1e:	b085      	sub	sp, #20
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	2bb0      	cmp	r3, #176	; 0xb0
 801ce28:	d903      	bls.n	801ce32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801ce2a:	4b15      	ldr	r3, [pc, #84]	; (801ce80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce2e:	60fb      	str	r3, [r7, #12]
 801ce30:	e007      	b.n	801ce42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	091b      	lsrs	r3, r3, #4
 801ce36:	f003 030f 	and.w	r3, r3, #15
 801ce3a:	4a11      	ldr	r2, [pc, #68]	; (801ce80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801ce42:	f7ff f9a7 	bl	801c194 <LL_RCC_GetAHB4Prescaler>
 801ce46:	4603      	mov	r3, r0
 801ce48:	091b      	lsrs	r3, r3, #4
 801ce4a:	f003 030f 	and.w	r3, r3, #15
 801ce4e:	4a0d      	ldr	r2, [pc, #52]	; (801ce84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce54:	68fa      	ldr	r2, [r7, #12]
 801ce56:	fbb2 f3f3 	udiv	r3, r2, r3
 801ce5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	4a0a      	ldr	r2, [pc, #40]	; (801ce88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801ce60:	fba2 2303 	umull	r2, r3, r2, r3
 801ce64:	0c9c      	lsrs	r4, r3, #18
 801ce66:	f7fe fef5 	bl	801bc54 <HAL_PWREx_GetVoltageRange>
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	4619      	mov	r1, r3
 801ce6e:	4620      	mov	r0, r4
 801ce70:	f000 f80c 	bl	801ce8c <RCC_SetFlashLatency>
 801ce74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801ce76:	4618      	mov	r0, r3
 801ce78:	3714      	adds	r7, #20
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	bd90      	pop	{r4, r7, pc}
 801ce7e:	bf00      	nop
 801ce80:	0802a2fc 	.word	0x0802a2fc
 801ce84:	0802a29c 	.word	0x0802a29c
 801ce88:	431bde83 	.word	0x431bde83

0801ce8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801ce8c:	b590      	push	{r4, r7, lr}
 801ce8e:	b093      	sub	sp, #76	; 0x4c
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801ce96:	4b37      	ldr	r3, [pc, #220]	; (801cf74 <RCC_SetFlashLatency+0xe8>)
 801ce98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801ce9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ce9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801cea2:	4a35      	ldr	r2, [pc, #212]	; (801cf78 <RCC_SetFlashLatency+0xec>)
 801cea4:	f107 031c 	add.w	r3, r7, #28
 801cea8:	ca07      	ldmia	r2, {r0, r1, r2}
 801ceaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801ceae:	4b33      	ldr	r3, [pc, #204]	; (801cf7c <RCC_SetFlashLatency+0xf0>)
 801ceb0:	f107 040c 	add.w	r4, r7, #12
 801ceb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ceb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801ceba:	2300      	movs	r3, #0
 801cebc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cebe:	683b      	ldr	r3, [r7, #0]
 801cec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cec4:	d11a      	bne.n	801cefc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801cec6:	2300      	movs	r3, #0
 801cec8:	643b      	str	r3, [r7, #64]	; 0x40
 801ceca:	e013      	b.n	801cef4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cece:	009b      	lsls	r3, r3, #2
 801ced0:	3348      	adds	r3, #72	; 0x48
 801ced2:	443b      	add	r3, r7
 801ced4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801ced8:	687a      	ldr	r2, [r7, #4]
 801ceda:	429a      	cmp	r2, r3
 801cedc:	d807      	bhi.n	801ceee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801cede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cee0:	009b      	lsls	r3, r3, #2
 801cee2:	3348      	adds	r3, #72	; 0x48
 801cee4:	443b      	add	r3, r7
 801cee6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801ceea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801ceec:	e020      	b.n	801cf30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801ceee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cef0:	3301      	adds	r3, #1
 801cef2:	643b      	str	r3, [r7, #64]	; 0x40
 801cef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cef6:	2b03      	cmp	r3, #3
 801cef8:	d9e8      	bls.n	801cecc <RCC_SetFlashLatency+0x40>
 801cefa:	e019      	b.n	801cf30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801cefc:	2300      	movs	r3, #0
 801cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf00:	e013      	b.n	801cf2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801cf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf04:	009b      	lsls	r3, r3, #2
 801cf06:	3348      	adds	r3, #72	; 0x48
 801cf08:	443b      	add	r3, r7
 801cf0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801cf0e:	687a      	ldr	r2, [r7, #4]
 801cf10:	429a      	cmp	r2, r3
 801cf12:	d807      	bhi.n	801cf24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf16:	009b      	lsls	r3, r3, #2
 801cf18:	3348      	adds	r3, #72	; 0x48
 801cf1a:	443b      	add	r3, r7
 801cf1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801cf20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801cf22:	e005      	b.n	801cf30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf26:	3301      	adds	r3, #1
 801cf28:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf2c:	2b02      	cmp	r3, #2
 801cf2e:	d9e8      	bls.n	801cf02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801cf30:	4b13      	ldr	r3, [pc, #76]	; (801cf80 <RCC_SetFlashLatency+0xf4>)
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	f023 0207 	bic.w	r2, r3, #7
 801cf38:	4911      	ldr	r1, [pc, #68]	; (801cf80 <RCC_SetFlashLatency+0xf4>)
 801cf3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf3c:	4313      	orrs	r3, r2
 801cf3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801cf40:	f7fc fcbc 	bl	80198bc <HAL_GetTick>
 801cf44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801cf46:	e008      	b.n	801cf5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801cf48:	f7fc fcb8 	bl	80198bc <HAL_GetTick>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf50:	1ad3      	subs	r3, r2, r3
 801cf52:	2b02      	cmp	r3, #2
 801cf54:	d901      	bls.n	801cf5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801cf56:	2303      	movs	r3, #3
 801cf58:	e007      	b.n	801cf6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801cf5a:	4b09      	ldr	r3, [pc, #36]	; (801cf80 <RCC_SetFlashLatency+0xf4>)
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	f003 0307 	and.w	r3, r3, #7
 801cf62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cf64:	429a      	cmp	r2, r3
 801cf66:	d1ef      	bne.n	801cf48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801cf68:	2300      	movs	r3, #0
}
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	374c      	adds	r7, #76	; 0x4c
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	bd90      	pop	{r4, r7, pc}
 801cf72:	bf00      	nop
 801cf74:	080285dc 	.word	0x080285dc
 801cf78:	080285ec 	.word	0x080285ec
 801cf7c:	080285f8 	.word	0x080285f8
 801cf80:	58004000 	.word	0x58004000

0801cf84 <LL_RCC_LSE_IsEnabled>:
{
 801cf84:	b480      	push	{r7}
 801cf86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801cf88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801cf8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf90:	f003 0301 	and.w	r3, r3, #1
 801cf94:	2b01      	cmp	r3, #1
 801cf96:	d101      	bne.n	801cf9c <LL_RCC_LSE_IsEnabled+0x18>
 801cf98:	2301      	movs	r3, #1
 801cf9a:	e000      	b.n	801cf9e <LL_RCC_LSE_IsEnabled+0x1a>
 801cf9c:	2300      	movs	r3, #0
}
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa6:	4770      	bx	lr

0801cfa8 <LL_RCC_LSE_IsReady>:
{
 801cfa8:	b480      	push	{r7}
 801cfaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801cfac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801cfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cfb4:	f003 0302 	and.w	r3, r3, #2
 801cfb8:	2b02      	cmp	r3, #2
 801cfba:	d101      	bne.n	801cfc0 <LL_RCC_LSE_IsReady+0x18>
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	e000      	b.n	801cfc2 <LL_RCC_LSE_IsReady+0x1a>
 801cfc0:	2300      	movs	r3, #0
}
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfca:	4770      	bx	lr

0801cfcc <LL_RCC_MSI_EnablePLLMode>:
{
 801cfcc:	b480      	push	{r7}
 801cfce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801cfd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801cfda:	f043 0304 	orr.w	r3, r3, #4
 801cfde:	6013      	str	r3, [r2, #0]
}
 801cfe0:	bf00      	nop
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe8:	4770      	bx	lr

0801cfea <LL_RCC_SetRFWKPClockSource>:
{
 801cfea:	b480      	push	{r7}
 801cfec:	b083      	sub	sp, #12
 801cfee:	af00      	add	r7, sp, #0
 801cff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801cff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801cff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	4313      	orrs	r3, r2
 801d006:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801d00a:	bf00      	nop
 801d00c:	370c      	adds	r7, #12
 801d00e:	46bd      	mov	sp, r7
 801d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d014:	4770      	bx	lr

0801d016 <LL_RCC_SetSMPSClockSource>:
{
 801d016:	b480      	push	{r7}
 801d018:	b083      	sub	sp, #12
 801d01a:	af00      	add	r7, sp, #0
 801d01c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801d01e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d024:	f023 0203 	bic.w	r2, r3, #3
 801d028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	4313      	orrs	r3, r2
 801d030:	624b      	str	r3, [r1, #36]	; 0x24
}
 801d032:	bf00      	nop
 801d034:	370c      	adds	r7, #12
 801d036:	46bd      	mov	sp, r7
 801d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d03c:	4770      	bx	lr

0801d03e <LL_RCC_SetSMPSPrescaler>:
{
 801d03e:	b480      	push	{r7}
 801d040:	b083      	sub	sp, #12
 801d042:	af00      	add	r7, sp, #0
 801d044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801d046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d04c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	4313      	orrs	r3, r2
 801d058:	624b      	str	r3, [r1, #36]	; 0x24
}
 801d05a:	bf00      	nop
 801d05c:	370c      	adds	r7, #12
 801d05e:	46bd      	mov	sp, r7
 801d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d064:	4770      	bx	lr

0801d066 <LL_RCC_SetUSARTClockSource>:
{
 801d066:	b480      	push	{r7}
 801d068:	b083      	sub	sp, #12
 801d06a:	af00      	add	r7, sp, #0
 801d06c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801d06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d076:	f023 0203 	bic.w	r2, r3, #3
 801d07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	4313      	orrs	r3, r2
 801d082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d086:	bf00      	nop
 801d088:	370c      	adds	r7, #12
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr

0801d092 <LL_RCC_SetLPUARTClockSource>:
{
 801d092:	b480      	push	{r7}
 801d094:	b083      	sub	sp, #12
 801d096:	af00      	add	r7, sp, #0
 801d098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801d09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d0a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	4313      	orrs	r3, r2
 801d0ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d0b2:	bf00      	nop
 801d0b4:	370c      	adds	r7, #12
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0bc:	4770      	bx	lr

0801d0be <LL_RCC_SetI2CClockSource>:
{
 801d0be:	b480      	push	{r7}
 801d0c0:	b083      	sub	sp, #12
 801d0c2:	af00      	add	r7, sp, #0
 801d0c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801d0c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d0ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	091b      	lsrs	r3, r3, #4
 801d0d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801d0d6:	43db      	mvns	r3, r3
 801d0d8:	401a      	ands	r2, r3
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	011b      	lsls	r3, r3, #4
 801d0de:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801d0e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d0e6:	4313      	orrs	r3, r2
 801d0e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d0ec:	bf00      	nop
 801d0ee:	370c      	adds	r7, #12
 801d0f0:	46bd      	mov	sp, r7
 801d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0f6:	4770      	bx	lr

0801d0f8 <LL_RCC_SetLPTIMClockSource>:
{
 801d0f8:	b480      	push	{r7}
 801d0fa:	b083      	sub	sp, #12
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801d100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d104:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	0c1b      	lsrs	r3, r3, #16
 801d10c:	041b      	lsls	r3, r3, #16
 801d10e:	43db      	mvns	r3, r3
 801d110:	401a      	ands	r2, r3
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	041b      	lsls	r3, r3, #16
 801d116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d11a:	4313      	orrs	r3, r2
 801d11c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d120:	bf00      	nop
 801d122:	370c      	adds	r7, #12
 801d124:	46bd      	mov	sp, r7
 801d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d12a:	4770      	bx	lr

0801d12c <LL_RCC_SetSAIClockSource>:
{
 801d12c:	b480      	push	{r7}
 801d12e:	b083      	sub	sp, #12
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801d134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d13c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	4313      	orrs	r3, r2
 801d148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d14c:	bf00      	nop
 801d14e:	370c      	adds	r7, #12
 801d150:	46bd      	mov	sp, r7
 801d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d156:	4770      	bx	lr

0801d158 <LL_RCC_SetRNGClockSource>:
{
 801d158:	b480      	push	{r7}
 801d15a:	b083      	sub	sp, #12
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801d160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d168:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801d16c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	4313      	orrs	r3, r2
 801d174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d178:	bf00      	nop
 801d17a:	370c      	adds	r7, #12
 801d17c:	46bd      	mov	sp, r7
 801d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d182:	4770      	bx	lr

0801d184 <LL_RCC_SetCLK48ClockSource>:
{
 801d184:	b480      	push	{r7}
 801d186:	b083      	sub	sp, #12
 801d188:	af00      	add	r7, sp, #0
 801d18a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801d18c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	4313      	orrs	r3, r2
 801d1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d1a4:	bf00      	nop
 801d1a6:	370c      	adds	r7, #12
 801d1a8:	46bd      	mov	sp, r7
 801d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1ae:	4770      	bx	lr

0801d1b0 <LL_RCC_SetUSBClockSource>:
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b082      	sub	sp, #8
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801d1b8:	6878      	ldr	r0, [r7, #4]
 801d1ba:	f7ff ffe3 	bl	801d184 <LL_RCC_SetCLK48ClockSource>
}
 801d1be:	bf00      	nop
 801d1c0:	3708      	adds	r7, #8
 801d1c2:	46bd      	mov	sp, r7
 801d1c4:	bd80      	pop	{r7, pc}

0801d1c6 <LL_RCC_SetADCClockSource>:
{
 801d1c6:	b480      	push	{r7}
 801d1c8:	b083      	sub	sp, #12
 801d1ca:	af00      	add	r7, sp, #0
 801d1cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801d1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d1da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	4313      	orrs	r3, r2
 801d1e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801d1e6:	bf00      	nop
 801d1e8:	370c      	adds	r7, #12
 801d1ea:	46bd      	mov	sp, r7
 801d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1f0:	4770      	bx	lr

0801d1f2 <LL_RCC_SetRTCClockSource>:
{
 801d1f2:	b480      	push	{r7}
 801d1f4:	b083      	sub	sp, #12
 801d1f6:	af00      	add	r7, sp, #0
 801d1f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801d1fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	4313      	orrs	r3, r2
 801d20e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801d212:	bf00      	nop
 801d214:	370c      	adds	r7, #12
 801d216:	46bd      	mov	sp, r7
 801d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d21c:	4770      	bx	lr

0801d21e <LL_RCC_GetRTCClockSource>:
{
 801d21e:	b480      	push	{r7}
 801d220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801d222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d22a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801d22e:	4618      	mov	r0, r3
 801d230:	46bd      	mov	sp, r7
 801d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d236:	4770      	bx	lr

0801d238 <LL_RCC_ForceBackupDomainReset>:
{
 801d238:	b480      	push	{r7}
 801d23a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801d23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d24c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801d250:	bf00      	nop
 801d252:	46bd      	mov	sp, r7
 801d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d258:	4770      	bx	lr

0801d25a <LL_RCC_ReleaseBackupDomainReset>:
{
 801d25a:	b480      	push	{r7}
 801d25c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801d25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d26e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801d272:	bf00      	nop
 801d274:	46bd      	mov	sp, r7
 801d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d27a:	4770      	bx	lr

0801d27c <LL_RCC_PLLSAI1_Enable>:
{
 801d27c:	b480      	push	{r7}
 801d27e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801d280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d28a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d28e:	6013      	str	r3, [r2, #0]
}
 801d290:	bf00      	nop
 801d292:	46bd      	mov	sp, r7
 801d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d298:	4770      	bx	lr

0801d29a <LL_RCC_PLLSAI1_Disable>:
{
 801d29a:	b480      	push	{r7}
 801d29c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801d29e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d2a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d2ac:	6013      	str	r3, [r2, #0]
}
 801d2ae:	bf00      	nop
 801d2b0:	46bd      	mov	sp, r7
 801d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b6:	4770      	bx	lr

0801d2b8 <LL_RCC_PLLSAI1_IsReady>:
{
 801d2b8:	b480      	push	{r7}
 801d2ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801d2bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d2c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d2ca:	d101      	bne.n	801d2d0 <LL_RCC_PLLSAI1_IsReady+0x18>
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	e000      	b.n	801d2d2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 801d2d0:	2300      	movs	r3, #0
}
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2da:	4770      	bx	lr

0801d2dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b088      	sub	sp, #32
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801d2e8:	2300      	movs	r3, #0
 801d2ea:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d034      	beq.n	801d362 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801d300:	d021      	beq.n	801d346 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801d302:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801d306:	d81b      	bhi.n	801d340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d30c:	d01d      	beq.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801d30e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d312:	d815      	bhi.n	801d340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d314:	2b00      	cmp	r3, #0
 801d316:	d00b      	beq.n	801d330 <HAL_RCCEx_PeriphCLKConfig+0x54>
 801d318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d31c:	d110      	bne.n	801d340 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801d31e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d322:	68db      	ldr	r3, [r3, #12]
 801d324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d32c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801d32e:	e00d      	b.n	801d34c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	3304      	adds	r3, #4
 801d334:	4618      	mov	r0, r3
 801d336:	f000 f94d 	bl	801d5d4 <RCCEx_PLLSAI1_ConfigNP>
 801d33a:	4603      	mov	r3, r0
 801d33c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801d33e:	e005      	b.n	801d34c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801d340:	2301      	movs	r3, #1
 801d342:	77fb      	strb	r3, [r7, #31]
        break;
 801d344:	e002      	b.n	801d34c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801d346:	bf00      	nop
 801d348:	e000      	b.n	801d34c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801d34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d34c:	7ffb      	ldrb	r3, [r7, #31]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d105      	bne.n	801d35e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d356:	4618      	mov	r0, r3
 801d358:	f7ff fee8 	bl	801d12c <LL_RCC_SetSAIClockSource>
 801d35c:	e001      	b.n	801d362 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d35e:	7ffb      	ldrb	r3, [r7, #31]
 801d360:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d046      	beq.n	801d3fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801d36e:	f7ff ff56 	bl	801d21e <LL_RCC_GetRTCClockSource>
 801d372:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d378:	69ba      	ldr	r2, [r7, #24]
 801d37a:	429a      	cmp	r2, r3
 801d37c:	d03c      	beq.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801d37e:	f7fe fc59 	bl	801bc34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801d382:	69bb      	ldr	r3, [r7, #24]
 801d384:	2b00      	cmp	r3, #0
 801d386:	d105      	bne.n	801d394 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d38c:	4618      	mov	r0, r3
 801d38e:	f7ff ff30 	bl	801d1f2 <LL_RCC_SetRTCClockSource>
 801d392:	e02e      	b.n	801d3f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801d394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d39c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801d39e:	f7ff ff4b 	bl	801d238 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801d3a2:	f7ff ff5a 	bl	801d25a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3b0:	4313      	orrs	r3, r2
 801d3b2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801d3b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801d3be:	f7ff fde1 	bl	801cf84 <LL_RCC_LSE_IsEnabled>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	2b01      	cmp	r3, #1
 801d3c6:	d114      	bne.n	801d3f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d3c8:	f7fc fa78 	bl	80198bc <HAL_GetTick>
 801d3cc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801d3ce:	e00b      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d3d0:	f7fc fa74 	bl	80198bc <HAL_GetTick>
 801d3d4:	4602      	mov	r2, r0
 801d3d6:	693b      	ldr	r3, [r7, #16]
 801d3d8:	1ad3      	subs	r3, r2, r3
 801d3da:	f241 3288 	movw	r2, #5000	; 0x1388
 801d3de:	4293      	cmp	r3, r2
 801d3e0:	d902      	bls.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801d3e2:	2303      	movs	r3, #3
 801d3e4:	77fb      	strb	r3, [r7, #31]
              break;
 801d3e6:	e004      	b.n	801d3f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801d3e8:	f7ff fdde 	bl	801cfa8 <LL_RCC_LSE_IsReady>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	2b01      	cmp	r3, #1
 801d3f0:	d1ee      	bne.n	801d3d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801d3f2:	7ffb      	ldrb	r3, [r7, #31]
 801d3f4:	77bb      	strb	r3, [r7, #30]
 801d3f6:	e001      	b.n	801d3fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d3f8:	7ffb      	ldrb	r3, [r7, #31]
 801d3fa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	f003 0301 	and.w	r3, r3, #1
 801d404:	2b00      	cmp	r3, #0
 801d406:	d004      	beq.n	801d412 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	699b      	ldr	r3, [r3, #24]
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7ff fe2a 	bl	801d066 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	f003 0302 	and.w	r3, r3, #2
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d004      	beq.n	801d428 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	69db      	ldr	r3, [r3, #28]
 801d422:	4618      	mov	r0, r3
 801d424:	f7ff fe35 	bl	801d092 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	f003 0310 	and.w	r3, r3, #16
 801d430:	2b00      	cmp	r3, #0
 801d432:	d004      	beq.n	801d43e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d438:	4618      	mov	r0, r3
 801d43a:	f7ff fe5d 	bl	801d0f8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f003 0320 	and.w	r3, r3, #32
 801d446:	2b00      	cmp	r3, #0
 801d448:	d004      	beq.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d44e:	4618      	mov	r0, r3
 801d450:	f7ff fe52 	bl	801d0f8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f003 0304 	and.w	r3, r3, #4
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d004      	beq.n	801d46a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	6a1b      	ldr	r3, [r3, #32]
 801d464:	4618      	mov	r0, r3
 801d466:	f7ff fe2a 	bl	801d0be <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	f003 0308 	and.w	r3, r3, #8
 801d472:	2b00      	cmp	r3, #0
 801d474:	d004      	beq.n	801d480 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d47a:	4618      	mov	r0, r3
 801d47c:	f7ff fe1f 	bl	801d0be <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d022      	beq.n	801d4d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d490:	4618      	mov	r0, r3
 801d492:	f7ff fe8d 	bl	801d1b0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d49a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d49e:	d107      	bne.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801d4a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d4a4:	68db      	ldr	r3, [r3, #12]
 801d4a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d4aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d4ae:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d4b8:	d10b      	bne.n	801d4d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	3304      	adds	r3, #4
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f000 f8e3 	bl	801d68a <RCCEx_PLLSAI1_ConfigNQ>
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801d4c8:	7ffb      	ldrb	r3, [r7, #31]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d001      	beq.n	801d4d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801d4ce:	7ffb      	ldrb	r3, [r7, #31]
 801d4d0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d02b      	beq.n	801d536 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4e6:	d008      	beq.n	801d4fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801d4f0:	d003      	beq.n	801d4fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d105      	bne.n	801d506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4fe:	4618      	mov	r0, r3
 801d500:	f7ff fe2a 	bl	801d158 <LL_RCC_SetRNGClockSource>
 801d504:	e00a      	b.n	801d51c <HAL_RCCEx_PeriphCLKConfig+0x240>
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d50a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d50e:	60fb      	str	r3, [r7, #12]
 801d510:	2000      	movs	r0, #0
 801d512:	f7ff fe21 	bl	801d158 <LL_RCC_SetRNGClockSource>
 801d516:	68f8      	ldr	r0, [r7, #12]
 801d518:	f7ff fe34 	bl	801d184 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d520:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801d524:	d107      	bne.n	801d536 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801d526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d52a:	68db      	ldr	r3, [r3, #12]
 801d52c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d534:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d022      	beq.n	801d588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d546:	4618      	mov	r0, r3
 801d548:	f7ff fe3d 	bl	801d1c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d554:	d107      	bne.n	801d566 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d55a:	68db      	ldr	r3, [r3, #12]
 801d55c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801d560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d564:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d56a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d56e:	d10b      	bne.n	801d588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	3304      	adds	r3, #4
 801d574:	4618      	mov	r0, r3
 801d576:	f000 f8e3 	bl	801d740 <RCCEx_PLLSAI1_ConfigNR>
 801d57a:	4603      	mov	r3, r0
 801d57c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801d57e:	7ffb      	ldrb	r3, [r7, #31]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d001      	beq.n	801d588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801d584:	7ffb      	ldrb	r3, [r7, #31]
 801d586:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d590:	2b00      	cmp	r3, #0
 801d592:	d004      	beq.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d598:	4618      	mov	r0, r3
 801d59a:	f7ff fd26 	bl	801cfea <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d009      	beq.n	801d5be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f7ff fd45 	bl	801d03e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	f7ff fd2c 	bl	801d016 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801d5be:	7fbb      	ldrb	r3, [r7, #30]
}
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	3720      	adds	r7, #32
 801d5c4:	46bd      	mov	sp, r7
 801d5c6:	bd80      	pop	{r7, pc}

0801d5c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801d5c8:	b580      	push	{r7, lr}
 801d5ca:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801d5cc:	f7ff fcfe 	bl	801cfcc <LL_RCC_MSI_EnablePLLMode>
}
 801d5d0:	bf00      	nop
 801d5d2:	bd80      	pop	{r7, pc}

0801d5d4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801d5d4:	b580      	push	{r7, lr}
 801d5d6:	b084      	sub	sp, #16
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d5dc:	2300      	movs	r3, #0
 801d5de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801d5e0:	f7ff fe5b 	bl	801d29a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801d5e4:	f7fc f96a 	bl	80198bc <HAL_GetTick>
 801d5e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d5ea:	e009      	b.n	801d600 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d5ec:	f7fc f966 	bl	80198bc <HAL_GetTick>
 801d5f0:	4602      	mov	r2, r0
 801d5f2:	68bb      	ldr	r3, [r7, #8]
 801d5f4:	1ad3      	subs	r3, r2, r3
 801d5f6:	2b02      	cmp	r3, #2
 801d5f8:	d902      	bls.n	801d600 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801d5fa:	2303      	movs	r3, #3
 801d5fc:	73fb      	strb	r3, [r7, #15]
      break;
 801d5fe:	e004      	b.n	801d60a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d600:	f7ff fe5a 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d604:	4603      	mov	r3, r0
 801d606:	2b00      	cmp	r3, #0
 801d608:	d1f0      	bne.n	801d5ec <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801d60a:	7bfb      	ldrb	r3, [r7, #15]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d137      	bne.n	801d680 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801d610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d614:	691b      	ldr	r3, [r3, #16]
 801d616:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	021b      	lsls	r3, r3, #8
 801d620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d624:	4313      	orrs	r3, r2
 801d626:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801d628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d62c:	691b      	ldr	r3, [r3, #16]
 801d62e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	685b      	ldr	r3, [r3, #4]
 801d636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d63a:	4313      	orrs	r3, r2
 801d63c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801d63e:	f7ff fe1d 	bl	801d27c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d642:	f7fc f93b 	bl	80198bc <HAL_GetTick>
 801d646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d648:	e009      	b.n	801d65e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d64a:	f7fc f937 	bl	80198bc <HAL_GetTick>
 801d64e:	4602      	mov	r2, r0
 801d650:	68bb      	ldr	r3, [r7, #8]
 801d652:	1ad3      	subs	r3, r2, r3
 801d654:	2b02      	cmp	r3, #2
 801d656:	d902      	bls.n	801d65e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801d658:	2303      	movs	r3, #3
 801d65a:	73fb      	strb	r3, [r7, #15]
        break;
 801d65c:	e004      	b.n	801d668 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d65e:	f7ff fe2b 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d662:	4603      	mov	r3, r0
 801d664:	2b01      	cmp	r3, #1
 801d666:	d1f0      	bne.n	801d64a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801d668:	7bfb      	ldrb	r3, [r7, #15]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d108      	bne.n	801d680 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801d66e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d672:	691a      	ldr	r2, [r3, #16]
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	691b      	ldr	r3, [r3, #16]
 801d678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d67c:	4313      	orrs	r3, r2
 801d67e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801d680:	7bfb      	ldrb	r3, [r7, #15]
}
 801d682:	4618      	mov	r0, r3
 801d684:	3710      	adds	r7, #16
 801d686:	46bd      	mov	sp, r7
 801d688:	bd80      	pop	{r7, pc}

0801d68a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801d68a:	b580      	push	{r7, lr}
 801d68c:	b084      	sub	sp, #16
 801d68e:	af00      	add	r7, sp, #0
 801d690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d692:	2300      	movs	r3, #0
 801d694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801d696:	f7ff fe00 	bl	801d29a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801d69a:	f7fc f90f 	bl	80198bc <HAL_GetTick>
 801d69e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d6a0:	e009      	b.n	801d6b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d6a2:	f7fc f90b 	bl	80198bc <HAL_GetTick>
 801d6a6:	4602      	mov	r2, r0
 801d6a8:	68bb      	ldr	r3, [r7, #8]
 801d6aa:	1ad3      	subs	r3, r2, r3
 801d6ac:	2b02      	cmp	r3, #2
 801d6ae:	d902      	bls.n	801d6b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801d6b0:	2303      	movs	r3, #3
 801d6b2:	73fb      	strb	r3, [r7, #15]
      break;
 801d6b4:	e004      	b.n	801d6c0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d6b6:	f7ff fdff 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d1f0      	bne.n	801d6a2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801d6c0:	7bfb      	ldrb	r3, [r7, #15]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d137      	bne.n	801d736 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801d6c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d6ca:	691b      	ldr	r3, [r3, #16]
 801d6cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	021b      	lsls	r3, r3, #8
 801d6d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d6da:	4313      	orrs	r3, r2
 801d6dc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801d6de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d6e2:	691b      	ldr	r3, [r3, #16]
 801d6e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	689b      	ldr	r3, [r3, #8]
 801d6ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d6f0:	4313      	orrs	r3, r2
 801d6f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801d6f4:	f7ff fdc2 	bl	801d27c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d6f8:	f7fc f8e0 	bl	80198bc <HAL_GetTick>
 801d6fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d6fe:	e009      	b.n	801d714 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d700:	f7fc f8dc 	bl	80198bc <HAL_GetTick>
 801d704:	4602      	mov	r2, r0
 801d706:	68bb      	ldr	r3, [r7, #8]
 801d708:	1ad3      	subs	r3, r2, r3
 801d70a:	2b02      	cmp	r3, #2
 801d70c:	d902      	bls.n	801d714 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801d70e:	2303      	movs	r3, #3
 801d710:	73fb      	strb	r3, [r7, #15]
        break;
 801d712:	e004      	b.n	801d71e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d714:	f7ff fdd0 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d718:	4603      	mov	r3, r0
 801d71a:	2b01      	cmp	r3, #1
 801d71c:	d1f0      	bne.n	801d700 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801d71e:	7bfb      	ldrb	r3, [r7, #15]
 801d720:	2b00      	cmp	r3, #0
 801d722:	d108      	bne.n	801d736 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801d724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d728:	691a      	ldr	r2, [r3, #16]
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	691b      	ldr	r3, [r3, #16]
 801d72e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d732:	4313      	orrs	r3, r2
 801d734:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801d736:	7bfb      	ldrb	r3, [r7, #15]
}
 801d738:	4618      	mov	r0, r3
 801d73a:	3710      	adds	r7, #16
 801d73c:	46bd      	mov	sp, r7
 801d73e:	bd80      	pop	{r7, pc}

0801d740 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b084      	sub	sp, #16
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d748:	2300      	movs	r3, #0
 801d74a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801d74c:	f7ff fda5 	bl	801d29a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801d750:	f7fc f8b4 	bl	80198bc <HAL_GetTick>
 801d754:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d756:	e009      	b.n	801d76c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d758:	f7fc f8b0 	bl	80198bc <HAL_GetTick>
 801d75c:	4602      	mov	r2, r0
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	1ad3      	subs	r3, r2, r3
 801d762:	2b02      	cmp	r3, #2
 801d764:	d902      	bls.n	801d76c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801d766:	2303      	movs	r3, #3
 801d768:	73fb      	strb	r3, [r7, #15]
      break;
 801d76a:	e004      	b.n	801d776 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801d76c:	f7ff fda4 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d770:	4603      	mov	r3, r0
 801d772:	2b00      	cmp	r3, #0
 801d774:	d1f0      	bne.n	801d758 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801d776:	7bfb      	ldrb	r3, [r7, #15]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d137      	bne.n	801d7ec <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801d77c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d780:	691b      	ldr	r3, [r3, #16]
 801d782:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	021b      	lsls	r3, r3, #8
 801d78c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d790:	4313      	orrs	r3, r2
 801d792:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801d794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d798:	691b      	ldr	r3, [r3, #16]
 801d79a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	68db      	ldr	r3, [r3, #12]
 801d7a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d7a6:	4313      	orrs	r3, r2
 801d7a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801d7aa:	f7ff fd67 	bl	801d27c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d7ae:	f7fc f885 	bl	80198bc <HAL_GetTick>
 801d7b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d7b4:	e009      	b.n	801d7ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d7b6:	f7fc f881 	bl	80198bc <HAL_GetTick>
 801d7ba:	4602      	mov	r2, r0
 801d7bc:	68bb      	ldr	r3, [r7, #8]
 801d7be:	1ad3      	subs	r3, r2, r3
 801d7c0:	2b02      	cmp	r3, #2
 801d7c2:	d902      	bls.n	801d7ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801d7c4:	2303      	movs	r3, #3
 801d7c6:	73fb      	strb	r3, [r7, #15]
        break;
 801d7c8:	e004      	b.n	801d7d4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801d7ca:	f7ff fd75 	bl	801d2b8 <LL_RCC_PLLSAI1_IsReady>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	2b01      	cmp	r3, #1
 801d7d2:	d1f0      	bne.n	801d7b6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801d7d4:	7bfb      	ldrb	r3, [r7, #15]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d108      	bne.n	801d7ec <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801d7da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d7de:	691a      	ldr	r2, [r3, #16]
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	691b      	ldr	r3, [r3, #16]
 801d7e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801d7e8:	4313      	orrs	r3, r2
 801d7ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801d7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	3710      	adds	r7, #16
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	bd80      	pop	{r7, pc}
	...

0801d7f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b084      	sub	sp, #16
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d101      	bne.n	801d80a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 801d806:	2301      	movs	r3, #1
 801d808:	e09f      	b.n	801d94a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d810:	b2db      	uxtb	r3, r3
 801d812:	2b00      	cmp	r3, #0
 801d814:	d106      	bne.n	801d824 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	2200      	movs	r2, #0
 801d81a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801d81e:	6878      	ldr	r0, [r7, #4]
 801d820:	f7e7 f94e 	bl	8004ac0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	2202      	movs	r2, #2
 801d828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801d82c:	4b49      	ldr	r3, [pc, #292]	; (801d954 <HAL_RTC_Init+0x15c>)
 801d82e:	68db      	ldr	r3, [r3, #12]
 801d830:	f003 0310 	and.w	r3, r3, #16
 801d834:	2b10      	cmp	r3, #16
 801d836:	d07e      	beq.n	801d936 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	22ca      	movs	r2, #202	; 0xca
 801d83e:	625a      	str	r2, [r3, #36]	; 0x24
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	2253      	movs	r2, #83	; 0x53
 801d846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801d848:	6878      	ldr	r0, [r7, #4]
 801d84a:	f000 f8ab 	bl	801d9a4 <RTC_EnterInitMode>
 801d84e:	4603      	mov	r3, r0
 801d850:	2b00      	cmp	r3, #0
 801d852:	d00a      	beq.n	801d86a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	22ff      	movs	r2, #255	; 0xff
 801d85a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	2204      	movs	r2, #4
 801d860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 801d864:	2301      	movs	r3, #1
 801d866:	73fb      	strb	r3, [r7, #15]
 801d868:	e067      	b.n	801d93a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	689b      	ldr	r3, [r3, #8]
 801d870:	687a      	ldr	r2, [r7, #4]
 801d872:	6812      	ldr	r2, [r2, #0]
 801d874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d87c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	6899      	ldr	r1, [r3, #8]
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	685a      	ldr	r2, [r3, #4]
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	691b      	ldr	r3, [r3, #16]
 801d88c:	431a      	orrs	r2, r3
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	699b      	ldr	r3, [r3, #24]
 801d892:	431a      	orrs	r2, r3
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	430a      	orrs	r2, r1
 801d89a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	687a      	ldr	r2, [r7, #4]
 801d8a2:	68d2      	ldr	r2, [r2, #12]
 801d8a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	6919      	ldr	r1, [r3, #16]
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	689b      	ldr	r3, [r3, #8]
 801d8b0:	041a      	lsls	r2, r3, #16
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	430a      	orrs	r2, r1
 801d8b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	68da      	ldr	r2, [r3, #12]
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d8c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	f022 0203 	bic.w	r2, r2, #3
 801d8d8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	69da      	ldr	r2, [r3, #28]
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	695b      	ldr	r3, [r3, #20]
 801d8e8:	431a      	orrs	r2, r3
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	430a      	orrs	r2, r1
 801d8f0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	689b      	ldr	r3, [r3, #8]
 801d8f8:	f003 0320 	and.w	r3, r3, #32
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d113      	bne.n	801d928 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801d900:	6878      	ldr	r0, [r7, #4]
 801d902:	f000 f829 	bl	801d958 <HAL_RTC_WaitForSynchro>
 801d906:	4603      	mov	r3, r0
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d00d      	beq.n	801d928 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	22ff      	movs	r2, #255	; 0xff
 801d912:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	2204      	movs	r2, #4
 801d918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	2200      	movs	r2, #0
 801d920:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 801d924:	2301      	movs	r3, #1
 801d926:	e010      	b.n	801d94a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	22ff      	movs	r2, #255	; 0xff
 801d92e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 801d930:	2300      	movs	r3, #0
 801d932:	73fb      	strb	r3, [r7, #15]
 801d934:	e001      	b.n	801d93a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 801d936:	2300      	movs	r3, #0
 801d938:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 801d93a:	7bfb      	ldrb	r3, [r7, #15]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d103      	bne.n	801d948 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2201      	movs	r2, #1
 801d944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 801d948:	7bfb      	ldrb	r3, [r7, #15]
}
 801d94a:	4618      	mov	r0, r3
 801d94c:	3710      	adds	r7, #16
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}
 801d952:	bf00      	nop
 801d954:	40002800 	.word	0x40002800

0801d958 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801d958:	b580      	push	{r7, lr}
 801d95a:	b084      	sub	sp, #16
 801d95c:	af00      	add	r7, sp, #0
 801d95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	68da      	ldr	r2, [r3, #12]
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801d96e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801d970:	f7fb ffa4 	bl	80198bc <HAL_GetTick>
 801d974:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801d976:	e009      	b.n	801d98c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801d978:	f7fb ffa0 	bl	80198bc <HAL_GetTick>
 801d97c:	4602      	mov	r2, r0
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	1ad3      	subs	r3, r2, r3
 801d982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d986:	d901      	bls.n	801d98c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801d988:	2303      	movs	r3, #3
 801d98a:	e007      	b.n	801d99c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	68db      	ldr	r3, [r3, #12]
 801d992:	f003 0320 	and.w	r3, r3, #32
 801d996:	2b00      	cmp	r3, #0
 801d998:	d0ee      	beq.n	801d978 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801d99a:	2300      	movs	r3, #0
}
 801d99c:	4618      	mov	r0, r3
 801d99e:	3710      	adds	r7, #16
 801d9a0:	46bd      	mov	sp, r7
 801d9a2:	bd80      	pop	{r7, pc}

0801d9a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b084      	sub	sp, #16
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	68db      	ldr	r3, [r3, #12]
 801d9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d119      	bne.n	801d9ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	f04f 32ff 	mov.w	r2, #4294967295
 801d9c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801d9c4:	f7fb ff7a 	bl	80198bc <HAL_GetTick>
 801d9c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801d9ca:	e009      	b.n	801d9e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801d9cc:	f7fb ff76 	bl	80198bc <HAL_GetTick>
 801d9d0:	4602      	mov	r2, r0
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	1ad3      	subs	r3, r2, r3
 801d9d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d9da:	d901      	bls.n	801d9e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 801d9dc:	2303      	movs	r3, #3
 801d9de:	e007      	b.n	801d9f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	68db      	ldr	r3, [r3, #12]
 801d9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d0ee      	beq.n	801d9cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 801d9ee:	2300      	movs	r3, #0
}
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	3710      	adds	r7, #16
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	bd80      	pop	{r7, pc}

0801d9f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b086      	sub	sp, #24
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	60f8      	str	r0, [r7, #12]
 801da00:	60b9      	str	r1, [r7, #8]
 801da02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	f893 3020 	ldrb.w	r3, [r3, #32]
 801da0a:	2b01      	cmp	r3, #1
 801da0c:	d101      	bne.n	801da12 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 801da0e:	2302      	movs	r3, #2
 801da10:	e0a8      	b.n	801db64 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 801da12:	68fb      	ldr	r3, [r7, #12]
 801da14:	2201      	movs	r2, #1
 801da16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	2202      	movs	r2, #2
 801da1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	22ca      	movs	r2, #202	; 0xca
 801da28:	625a      	str	r2, [r3, #36]	; 0x24
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	2253      	movs	r2, #83	; 0x53
 801da30:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	689b      	ldr	r3, [r3, #8]
 801da38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d020      	beq.n	801da82 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 801da40:	f7fb ff3c 	bl	80198bc <HAL_GetTick>
 801da44:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 801da46:	e015      	b.n	801da74 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801da48:	f7fb ff38 	bl	80198bc <HAL_GetTick>
 801da4c:	4602      	mov	r2, r0
 801da4e:	697b      	ldr	r3, [r7, #20]
 801da50:	1ad3      	subs	r3, r2, r3
 801da52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801da56:	d90d      	bls.n	801da74 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	22ff      	movs	r2, #255	; 0xff
 801da5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	2203      	movs	r2, #3
 801da64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2200      	movs	r2, #0
 801da6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801da70:	2303      	movs	r3, #3
 801da72:	e077      	b.n	801db64 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	68db      	ldr	r3, [r3, #12]
 801da7a:	f003 0304 	and.w	r3, r3, #4
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d1e2      	bne.n	801da48 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	681b      	ldr	r3, [r3, #0]
 801da86:	689a      	ldr	r2, [r3, #8]
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801da90:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	68db      	ldr	r3, [r3, #12]
 801da98:	b2da      	uxtb	r2, r3
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801daa2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801daa4:	f7fb ff0a 	bl	80198bc <HAL_GetTick>
 801daa8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801daaa:	e015      	b.n	801dad8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801daac:	f7fb ff06 	bl	80198bc <HAL_GetTick>
 801dab0:	4602      	mov	r2, r0
 801dab2:	697b      	ldr	r3, [r7, #20]
 801dab4:	1ad3      	subs	r3, r2, r3
 801dab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801daba:	d90d      	bls.n	801dad8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	22ff      	movs	r2, #255	; 0xff
 801dac2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	2203      	movs	r2, #3
 801dac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	2200      	movs	r2, #0
 801dad0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 801dad4:	2303      	movs	r3, #3
 801dad6:	e045      	b.n	801db64 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	68db      	ldr	r3, [r3, #12]
 801dade:	f003 0304 	and.w	r3, r3, #4
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d0e2      	beq.n	801daac <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	68ba      	ldr	r2, [r7, #8]
 801daec:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	689a      	ldr	r2, [r3, #8]
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	f022 0207 	bic.w	r2, r2, #7
 801dafc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	6899      	ldr	r1, [r3, #8]
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	687a      	ldr	r2, [r7, #4]
 801db0a:	430a      	orrs	r2, r1
 801db0c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801db0e:	4b17      	ldr	r3, [pc, #92]	; (801db6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 801db10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801db14:	4a15      	ldr	r2, [pc, #84]	; (801db6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 801db16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801db1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801db1e:	4b13      	ldr	r3, [pc, #76]	; (801db6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	4a12      	ldr	r2, [pc, #72]	; (801db6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 801db24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801db28:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	689a      	ldr	r2, [r3, #8]
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801db38:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	689a      	ldr	r2, [r3, #8]
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801db48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	22ff      	movs	r2, #255	; 0xff
 801db50:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	2201      	movs	r2, #1
 801db56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	2200      	movs	r2, #0
 801db5e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801db62:	2300      	movs	r3, #0
}
 801db64:	4618      	mov	r0, r3
 801db66:	3718      	adds	r7, #24
 801db68:	46bd      	mov	sp, r7
 801db6a:	bd80      	pop	{r7, pc}
 801db6c:	58000800 	.word	0x58000800

0801db70 <LL_RCC_GetUSARTClockSource>:
{
 801db70:	b480      	push	{r7}
 801db72:	b083      	sub	sp, #12
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801db78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801db7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	4013      	ands	r3, r2
}
 801db84:	4618      	mov	r0, r3
 801db86:	370c      	adds	r7, #12
 801db88:	46bd      	mov	sp, r7
 801db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db8e:	4770      	bx	lr

0801db90 <LL_RCC_GetLPUARTClockSource>:
{
 801db90:	b480      	push	{r7}
 801db92:	b083      	sub	sp, #12
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801db98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801db9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	4013      	ands	r3, r2
}
 801dba4:	4618      	mov	r0, r3
 801dba6:	370c      	adds	r7, #12
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbae:	4770      	bx	lr

0801dbb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b082      	sub	sp, #8
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d101      	bne.n	801dbc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801dbbe:	2301      	movs	r3, #1
 801dbc0:	e042      	b.n	801dc48 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d106      	bne.n	801dbda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	2200      	movs	r2, #0
 801dbd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801dbd4:	6878      	ldr	r0, [r7, #4]
 801dbd6:	f7e7 fbc7 	bl	8005368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	2224      	movs	r2, #36	; 0x24
 801dbde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	681a      	ldr	r2, [r3, #0]
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	681b      	ldr	r3, [r3, #0]
 801dbec:	f022 0201 	bic.w	r2, r2, #1
 801dbf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801dbf2:	6878      	ldr	r0, [r7, #4]
 801dbf4:	f000 fc4a 	bl	801e48c <UART_SetConfig>
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	2b01      	cmp	r3, #1
 801dbfc:	d101      	bne.n	801dc02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801dbfe:	2301      	movs	r3, #1
 801dc00:	e022      	b.n	801dc48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d002      	beq.n	801dc10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801dc0a:	6878      	ldr	r0, [r7, #4]
 801dc0c:	f000 fe66 	bl	801e8dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	685a      	ldr	r2, [r3, #4]
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801dc1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	689a      	ldr	r2, [r3, #8]
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801dc2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	681a      	ldr	r2, [r3, #0]
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	f042 0201 	orr.w	r2, r2, #1
 801dc3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801dc40:	6878      	ldr	r0, [r7, #4]
 801dc42:	f000 feed 	bl	801ea20 <UART_CheckIdleState>
 801dc46:	4603      	mov	r3, r0
}
 801dc48:	4618      	mov	r0, r3
 801dc4a:	3708      	adds	r7, #8
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	bd80      	pop	{r7, pc}

0801dc50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b08a      	sub	sp, #40	; 0x28
 801dc54:	af02      	add	r7, sp, #8
 801dc56:	60f8      	str	r0, [r7, #12]
 801dc58:	60b9      	str	r1, [r7, #8]
 801dc5a:	603b      	str	r3, [r7, #0]
 801dc5c:	4613      	mov	r3, r2
 801dc5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc66:	2b20      	cmp	r3, #32
 801dc68:	d17b      	bne.n	801dd62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801dc6a:	68bb      	ldr	r3, [r7, #8]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d002      	beq.n	801dc76 <HAL_UART_Transmit+0x26>
 801dc70:	88fb      	ldrh	r3, [r7, #6]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d101      	bne.n	801dc7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801dc76:	2301      	movs	r3, #1
 801dc78:	e074      	b.n	801dd64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	2221      	movs	r2, #33	; 0x21
 801dc86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801dc8a:	f7fb fe17 	bl	80198bc <HAL_GetTick>
 801dc8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	88fa      	ldrh	r2, [r7, #6]
 801dc94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	88fa      	ldrh	r2, [r7, #6]
 801dc9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	689b      	ldr	r3, [r3, #8]
 801dca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801dca8:	d108      	bne.n	801dcbc <HAL_UART_Transmit+0x6c>
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	691b      	ldr	r3, [r3, #16]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d104      	bne.n	801dcbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801dcb6:	68bb      	ldr	r3, [r7, #8]
 801dcb8:	61bb      	str	r3, [r7, #24]
 801dcba:	e003      	b.n	801dcc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801dcbc:	68bb      	ldr	r3, [r7, #8]
 801dcbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801dcc4:	e030      	b.n	801dd28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801dcc6:	683b      	ldr	r3, [r7, #0]
 801dcc8:	9300      	str	r3, [sp, #0]
 801dcca:	697b      	ldr	r3, [r7, #20]
 801dccc:	2200      	movs	r2, #0
 801dcce:	2180      	movs	r1, #128	; 0x80
 801dcd0:	68f8      	ldr	r0, [r7, #12]
 801dcd2:	f000 ff4f 	bl	801eb74 <UART_WaitOnFlagUntilTimeout>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d005      	beq.n	801dce8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	2220      	movs	r2, #32
 801dce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801dce4:	2303      	movs	r3, #3
 801dce6:	e03d      	b.n	801dd64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801dce8:	69fb      	ldr	r3, [r7, #28]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d10b      	bne.n	801dd06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801dcee:	69bb      	ldr	r3, [r7, #24]
 801dcf0:	881b      	ldrh	r3, [r3, #0]
 801dcf2:	461a      	mov	r2, r3
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801dcfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801dcfe:	69bb      	ldr	r3, [r7, #24]
 801dd00:	3302      	adds	r3, #2
 801dd02:	61bb      	str	r3, [r7, #24]
 801dd04:	e007      	b.n	801dd16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801dd06:	69fb      	ldr	r3, [r7, #28]
 801dd08:	781a      	ldrb	r2, [r3, #0]
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801dd10:	69fb      	ldr	r3, [r7, #28]
 801dd12:	3301      	adds	r3, #1
 801dd14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801dd1c:	b29b      	uxth	r3, r3
 801dd1e:	3b01      	subs	r3, #1
 801dd20:	b29a      	uxth	r2, r3
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801dd2e:	b29b      	uxth	r3, r3
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d1c8      	bne.n	801dcc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801dd34:	683b      	ldr	r3, [r7, #0]
 801dd36:	9300      	str	r3, [sp, #0]
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	2200      	movs	r2, #0
 801dd3c:	2140      	movs	r1, #64	; 0x40
 801dd3e:	68f8      	ldr	r0, [r7, #12]
 801dd40:	f000 ff18 	bl	801eb74 <UART_WaitOnFlagUntilTimeout>
 801dd44:	4603      	mov	r3, r0
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d005      	beq.n	801dd56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	2220      	movs	r2, #32
 801dd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801dd52:	2303      	movs	r3, #3
 801dd54:	e006      	b.n	801dd64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	2220      	movs	r2, #32
 801dd5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801dd5e:	2300      	movs	r3, #0
 801dd60:	e000      	b.n	801dd64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801dd62:	2302      	movs	r3, #2
  }
}
 801dd64:	4618      	mov	r0, r3
 801dd66:	3720      	adds	r7, #32
 801dd68:	46bd      	mov	sp, r7
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b08a      	sub	sp, #40	; 0x28
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	60b9      	str	r1, [r7, #8]
 801dd76:	4613      	mov	r3, r2
 801dd78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dd80:	2b20      	cmp	r3, #32
 801dd82:	d137      	bne.n	801ddf4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801dd84:	68bb      	ldr	r3, [r7, #8]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d002      	beq.n	801dd90 <HAL_UART_Receive_DMA+0x24>
 801dd8a:	88fb      	ldrh	r3, [r7, #6]
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d101      	bne.n	801dd94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801dd90:	2301      	movs	r3, #1
 801dd92:	e030      	b.n	801ddf6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	2200      	movs	r2, #0
 801dd98:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	4a18      	ldr	r2, [pc, #96]	; (801de00 <HAL_UART_Receive_DMA+0x94>)
 801dda0:	4293      	cmp	r3, r2
 801dda2:	d01f      	beq.n	801dde4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	685b      	ldr	r3, [r3, #4]
 801ddaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d018      	beq.n	801dde4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ddb8:	697b      	ldr	r3, [r7, #20]
 801ddba:	e853 3f00 	ldrex	r3, [r3]
 801ddbe:	613b      	str	r3, [r7, #16]
   return(result);
 801ddc0:	693b      	ldr	r3, [r7, #16]
 801ddc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801ddc6:	627b      	str	r3, [r7, #36]	; 0x24
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	461a      	mov	r2, r3
 801ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd0:	623b      	str	r3, [r7, #32]
 801ddd2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ddd4:	69f9      	ldr	r1, [r7, #28]
 801ddd6:	6a3a      	ldr	r2, [r7, #32]
 801ddd8:	e841 2300 	strex	r3, r2, [r1]
 801dddc:	61bb      	str	r3, [r7, #24]
   return(result);
 801ddde:	69bb      	ldr	r3, [r7, #24]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d1e6      	bne.n	801ddb2 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801dde4:	88fb      	ldrh	r3, [r7, #6]
 801dde6:	461a      	mov	r2, r3
 801dde8:	68b9      	ldr	r1, [r7, #8]
 801ddea:	68f8      	ldr	r0, [r7, #12]
 801ddec:	f000 ff2a 	bl	801ec44 <UART_Start_Receive_DMA>
 801ddf0:	4603      	mov	r3, r0
 801ddf2:	e000      	b.n	801ddf6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ddf4:	2302      	movs	r3, #2
  }
}
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	3728      	adds	r7, #40	; 0x28
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	bd80      	pop	{r7, pc}
 801ddfe:	bf00      	nop
 801de00:	40008000 	.word	0x40008000

0801de04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b0ba      	sub	sp, #232	; 0xe8
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	69db      	ldr	r3, [r3, #28]
 801de12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	689b      	ldr	r3, [r3, #8]
 801de26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801de2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801de2e:	f640 030f 	movw	r3, #2063	; 0x80f
 801de32:	4013      	ands	r3, r2
 801de34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801de38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d11b      	bne.n	801de78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801de40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801de44:	f003 0320 	and.w	r3, r3, #32
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d015      	beq.n	801de78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801de4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801de50:	f003 0320 	and.w	r3, r3, #32
 801de54:	2b00      	cmp	r3, #0
 801de56:	d105      	bne.n	801de64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801de58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801de5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801de60:	2b00      	cmp	r3, #0
 801de62:	d009      	beq.n	801de78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de68:	2b00      	cmp	r3, #0
 801de6a:	f000 82e3 	beq.w	801e434 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de72:	6878      	ldr	r0, [r7, #4]
 801de74:	4798      	blx	r3
      }
      return;
 801de76:	e2dd      	b.n	801e434 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801de78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	f000 8123 	beq.w	801e0c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801de82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801de86:	4b8d      	ldr	r3, [pc, #564]	; (801e0bc <HAL_UART_IRQHandler+0x2b8>)
 801de88:	4013      	ands	r3, r2
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d106      	bne.n	801de9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801de8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801de92:	4b8b      	ldr	r3, [pc, #556]	; (801e0c0 <HAL_UART_IRQHandler+0x2bc>)
 801de94:	4013      	ands	r3, r2
 801de96:	2b00      	cmp	r3, #0
 801de98:	f000 8116 	beq.w	801e0c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801de9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dea0:	f003 0301 	and.w	r3, r3, #1
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d011      	beq.n	801decc <HAL_UART_IRQHandler+0xc8>
 801dea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801deac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d00b      	beq.n	801decc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	2201      	movs	r2, #1
 801deba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dec2:	f043 0201 	orr.w	r2, r3, #1
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801decc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ded0:	f003 0302 	and.w	r3, r3, #2
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d011      	beq.n	801defc <HAL_UART_IRQHandler+0xf8>
 801ded8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801dedc:	f003 0301 	and.w	r3, r3, #1
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d00b      	beq.n	801defc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	2202      	movs	r2, #2
 801deea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801def2:	f043 0204 	orr.w	r2, r3, #4
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801defc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801df00:	f003 0304 	and.w	r3, r3, #4
 801df04:	2b00      	cmp	r3, #0
 801df06:	d011      	beq.n	801df2c <HAL_UART_IRQHandler+0x128>
 801df08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801df0c:	f003 0301 	and.w	r3, r3, #1
 801df10:	2b00      	cmp	r3, #0
 801df12:	d00b      	beq.n	801df2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	2204      	movs	r2, #4
 801df1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df22:	f043 0202 	orr.w	r2, r3, #2
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801df2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801df30:	f003 0308 	and.w	r3, r3, #8
 801df34:	2b00      	cmp	r3, #0
 801df36:	d017      	beq.n	801df68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801df38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801df3c:	f003 0320 	and.w	r3, r3, #32
 801df40:	2b00      	cmp	r3, #0
 801df42:	d105      	bne.n	801df50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801df44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801df48:	4b5c      	ldr	r3, [pc, #368]	; (801e0bc <HAL_UART_IRQHandler+0x2b8>)
 801df4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d00b      	beq.n	801df68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	2208      	movs	r2, #8
 801df56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df5e:	f043 0208 	orr.w	r2, r3, #8
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801df68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801df6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801df70:	2b00      	cmp	r3, #0
 801df72:	d012      	beq.n	801df9a <HAL_UART_IRQHandler+0x196>
 801df74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801df78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d00c      	beq.n	801df9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801df88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df90:	f043 0220 	orr.w	r2, r3, #32
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	f000 8249 	beq.w	801e438 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801dfa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dfaa:	f003 0320 	and.w	r3, r3, #32
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d013      	beq.n	801dfda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801dfb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dfb6:	f003 0320 	and.w	r3, r3, #32
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d105      	bne.n	801dfca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801dfbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801dfc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d007      	beq.n	801dfda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d003      	beq.n	801dfda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dfd6:	6878      	ldr	r0, [r7, #4]
 801dfd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	689b      	ldr	r3, [r3, #8]
 801dfea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dfee:	2b40      	cmp	r3, #64	; 0x40
 801dff0:	d005      	beq.n	801dffe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801dff6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d054      	beq.n	801e0a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dffe:	6878      	ldr	r0, [r7, #4]
 801e000:	f000 ff07 	bl	801ee12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	689b      	ldr	r3, [r3, #8]
 801e00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e00e:	2b40      	cmp	r3, #64	; 0x40
 801e010:	d146      	bne.n	801e0a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	3308      	adds	r3, #8
 801e018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e01c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e020:	e853 3f00 	ldrex	r3, [r3]
 801e024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801e028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	3308      	adds	r3, #8
 801e03a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e03e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801e042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801e04a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e04e:	e841 2300 	strex	r3, r2, [r1]
 801e052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801e056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d1d9      	bne.n	801e012 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e064:	2b00      	cmp	r3, #0
 801e066:	d017      	beq.n	801e098 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e06e:	4a15      	ldr	r2, [pc, #84]	; (801e0c4 <HAL_UART_IRQHandler+0x2c0>)
 801e070:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e078:	4618      	mov	r0, r3
 801e07a:	f7fb ff5f 	bl	8019f3c <HAL_DMA_Abort_IT>
 801e07e:	4603      	mov	r3, r0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d019      	beq.n	801e0b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e08c:	687a      	ldr	r2, [r7, #4]
 801e08e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801e092:	4610      	mov	r0, r2
 801e094:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e096:	e00f      	b.n	801e0b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f000 f9e1 	bl	801e460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e09e:	e00b      	b.n	801e0b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801e0a0:	6878      	ldr	r0, [r7, #4]
 801e0a2:	f000 f9dd 	bl	801e460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e0a6:	e007      	b.n	801e0b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801e0a8:	6878      	ldr	r0, [r7, #4]
 801e0aa:	f000 f9d9 	bl	801e460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	2200      	movs	r2, #0
 801e0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801e0b6:	e1bf      	b.n	801e438 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e0b8:	bf00      	nop
    return;
 801e0ba:	e1bd      	b.n	801e438 <HAL_UART_IRQHandler+0x634>
 801e0bc:	10000001 	.word	0x10000001
 801e0c0:	04000120 	.word	0x04000120
 801e0c4:	0801f0c9 	.word	0x0801f0c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0cc:	2b01      	cmp	r3, #1
 801e0ce:	f040 8153 	bne.w	801e378 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801e0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e0d6:	f003 0310 	and.w	r3, r3, #16
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	f000 814c 	beq.w	801e378 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801e0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e0e4:	f003 0310 	and.w	r3, r3, #16
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	f000 8145 	beq.w	801e378 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	2210      	movs	r2, #16
 801e0f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	689b      	ldr	r3, [r3, #8]
 801e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e100:	2b40      	cmp	r3, #64	; 0x40
 801e102:	f040 80bb 	bne.w	801e27c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	685b      	ldr	r3, [r3, #4]
 801e110:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801e114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801e118:	2b00      	cmp	r3, #0
 801e11a:	f000 818f 	beq.w	801e43c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e124:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e128:	429a      	cmp	r2, r3
 801e12a:	f080 8187 	bcs.w	801e43c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e134:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	f003 0320 	and.w	r3, r3, #32
 801e146:	2b00      	cmp	r3, #0
 801e148:	f040 8087 	bne.w	801e25a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e158:	e853 3f00 	ldrex	r3, [r3]
 801e15c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801e160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	461a      	mov	r2, r3
 801e172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801e17a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e17e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801e182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801e186:	e841 2300 	strex	r3, r2, [r1]
 801e18a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801e18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e192:	2b00      	cmp	r3, #0
 801e194:	d1da      	bne.n	801e14c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	3308      	adds	r3, #8
 801e19c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e19e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e1a0:	e853 3f00 	ldrex	r3, [r3]
 801e1a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801e1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e1a8:	f023 0301 	bic.w	r3, r3, #1
 801e1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	3308      	adds	r3, #8
 801e1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e1ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801e1be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e1c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801e1c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e1c6:	e841 2300 	strex	r3, r2, [r1]
 801e1ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801e1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d1e1      	bne.n	801e196 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	3308      	adds	r3, #8
 801e1d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e1da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e1dc:	e853 3f00 	ldrex	r3, [r3]
 801e1e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801e1e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	3308      	adds	r3, #8
 801e1f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801e1f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801e1f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e1fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801e1fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e1fe:	e841 2300 	strex	r3, r2, [r1]
 801e202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801e204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e206:	2b00      	cmp	r3, #0
 801e208:	d1e3      	bne.n	801e1d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	2220      	movs	r2, #32
 801e20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	2200      	movs	r2, #0
 801e216:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e220:	e853 3f00 	ldrex	r3, [r3]
 801e224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801e226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e228:	f023 0310 	bic.w	r3, r3, #16
 801e22c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	461a      	mov	r2, r3
 801e236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e23a:	65bb      	str	r3, [r7, #88]	; 0x58
 801e23c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e23e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e242:	e841 2300 	strex	r3, r2, [r1]
 801e246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801e248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d1e4      	bne.n	801e218 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e254:	4618      	mov	r0, r3
 801e256:	f7fb fe12 	bl	8019e7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	2202      	movs	r2, #2
 801e25e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e26c:	b29b      	uxth	r3, r3
 801e26e:	1ad3      	subs	r3, r2, r3
 801e270:	b29b      	uxth	r3, r3
 801e272:	4619      	mov	r1, r3
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f000 f8fd 	bl	801e474 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801e27a:	e0df      	b.n	801e43c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e288:	b29b      	uxth	r3, r3
 801e28a:	1ad3      	subs	r3, r2, r3
 801e28c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e296:	b29b      	uxth	r3, r3
 801e298:	2b00      	cmp	r3, #0
 801e29a:	f000 80d1 	beq.w	801e440 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801e29e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	f000 80cc 	beq.w	801e440 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e2b0:	e853 3f00 	ldrex	r3, [r3]
 801e2b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801e2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801e2bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	461a      	mov	r2, r3
 801e2c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2ca:	647b      	str	r3, [r7, #68]	; 0x44
 801e2cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e2ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e2d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e2d2:	e841 2300 	strex	r3, r2, [r1]
 801e2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801e2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d1e4      	bne.n	801e2a8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	3308      	adds	r3, #8
 801e2e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2e8:	e853 3f00 	ldrex	r3, [r3]
 801e2ec:	623b      	str	r3, [r7, #32]
   return(result);
 801e2ee:	6a3b      	ldr	r3, [r7, #32]
 801e2f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e2f4:	f023 0301 	bic.w	r3, r3, #1
 801e2f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	3308      	adds	r3, #8
 801e302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e306:	633a      	str	r2, [r7, #48]	; 0x30
 801e308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e30a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e30e:	e841 2300 	strex	r3, r2, [r1]
 801e312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e316:	2b00      	cmp	r3, #0
 801e318:	d1e1      	bne.n	801e2de <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	2220      	movs	r2, #32
 801e31e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	2200      	movs	r2, #0
 801e326:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2200      	movs	r2, #0
 801e32c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e334:	693b      	ldr	r3, [r7, #16]
 801e336:	e853 3f00 	ldrex	r3, [r3]
 801e33a:	60fb      	str	r3, [r7, #12]
   return(result);
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	f023 0310 	bic.w	r3, r3, #16
 801e342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	461a      	mov	r2, r3
 801e34c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e350:	61fb      	str	r3, [r7, #28]
 801e352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e354:	69b9      	ldr	r1, [r7, #24]
 801e356:	69fa      	ldr	r2, [r7, #28]
 801e358:	e841 2300 	strex	r3, r2, [r1]
 801e35c:	617b      	str	r3, [r7, #20]
   return(result);
 801e35e:	697b      	ldr	r3, [r7, #20]
 801e360:	2b00      	cmp	r3, #0
 801e362:	d1e4      	bne.n	801e32e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	2202      	movs	r2, #2
 801e368:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801e36a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801e36e:	4619      	mov	r1, r3
 801e370:	6878      	ldr	r0, [r7, #4]
 801e372:	f000 f87f 	bl	801e474 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801e376:	e063      	b.n	801e440 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801e378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e37c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e380:	2b00      	cmp	r3, #0
 801e382:	d00e      	beq.n	801e3a2 <HAL_UART_IRQHandler+0x59e>
 801e384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d008      	beq.n	801e3a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801e398:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801e39a:	6878      	ldr	r0, [r7, #4]
 801e39c:	f000 fed5 	bl	801f14a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e3a0:	e051      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801e3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d014      	beq.n	801e3d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801e3ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d105      	bne.n	801e3c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801e3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d008      	beq.n	801e3d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d03a      	beq.n	801e444 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e3d2:	6878      	ldr	r0, [r7, #4]
 801e3d4:	4798      	blx	r3
    }
    return;
 801e3d6:	e035      	b.n	801e444 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801e3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d009      	beq.n	801e3f8 <HAL_UART_IRQHandler+0x5f4>
 801e3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d003      	beq.n	801e3f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801e3f0:	6878      	ldr	r0, [r7, #4]
 801e3f2:	f000 fe7f 	bl	801f0f4 <UART_EndTransmit_IT>
    return;
 801e3f6:	e026      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801e3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e3fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e400:	2b00      	cmp	r3, #0
 801e402:	d009      	beq.n	801e418 <HAL_UART_IRQHandler+0x614>
 801e404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e408:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d003      	beq.n	801e418 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f000 feae 	bl	801f172 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e416:	e016      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801e418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e41c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e420:	2b00      	cmp	r3, #0
 801e422:	d010      	beq.n	801e446 <HAL_UART_IRQHandler+0x642>
 801e424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e428:	2b00      	cmp	r3, #0
 801e42a:	da0c      	bge.n	801e446 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801e42c:	6878      	ldr	r0, [r7, #4]
 801e42e:	f000 fe96 	bl	801f15e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e432:	e008      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
      return;
 801e434:	bf00      	nop
 801e436:	e006      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
    return;
 801e438:	bf00      	nop
 801e43a:	e004      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
      return;
 801e43c:	bf00      	nop
 801e43e:	e002      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
      return;
 801e440:	bf00      	nop
 801e442:	e000      	b.n	801e446 <HAL_UART_IRQHandler+0x642>
    return;
 801e444:	bf00      	nop
  }
}
 801e446:	37e8      	adds	r7, #232	; 0xe8
 801e448:	46bd      	mov	sp, r7
 801e44a:	bd80      	pop	{r7, pc}

0801e44c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e44c:	b480      	push	{r7}
 801e44e:	b083      	sub	sp, #12
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801e454:	bf00      	nop
 801e456:	370c      	adds	r7, #12
 801e458:	46bd      	mov	sp, r7
 801e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e45e:	4770      	bx	lr

0801e460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801e460:	b480      	push	{r7}
 801e462:	b083      	sub	sp, #12
 801e464:	af00      	add	r7, sp, #0
 801e466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801e468:	bf00      	nop
 801e46a:	370c      	adds	r7, #12
 801e46c:	46bd      	mov	sp, r7
 801e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e472:	4770      	bx	lr

0801e474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e474:	b480      	push	{r7}
 801e476:	b083      	sub	sp, #12
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
 801e47c:	460b      	mov	r3, r1
 801e47e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e480:	bf00      	nop
 801e482:	370c      	adds	r7, #12
 801e484:	46bd      	mov	sp, r7
 801e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48a:	4770      	bx	lr

0801e48c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e48c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e490:	b08c      	sub	sp, #48	; 0x30
 801e492:	af00      	add	r7, sp, #0
 801e494:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e496:	2300      	movs	r3, #0
 801e498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e49c:	697b      	ldr	r3, [r7, #20]
 801e49e:	689a      	ldr	r2, [r3, #8]
 801e4a0:	697b      	ldr	r3, [r7, #20]
 801e4a2:	691b      	ldr	r3, [r3, #16]
 801e4a4:	431a      	orrs	r2, r3
 801e4a6:	697b      	ldr	r3, [r7, #20]
 801e4a8:	695b      	ldr	r3, [r3, #20]
 801e4aa:	431a      	orrs	r2, r3
 801e4ac:	697b      	ldr	r3, [r7, #20]
 801e4ae:	69db      	ldr	r3, [r3, #28]
 801e4b0:	4313      	orrs	r3, r2
 801e4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e4b4:	697b      	ldr	r3, [r7, #20]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	681a      	ldr	r2, [r3, #0]
 801e4ba:	4baf      	ldr	r3, [pc, #700]	; (801e778 <UART_SetConfig+0x2ec>)
 801e4bc:	4013      	ands	r3, r2
 801e4be:	697a      	ldr	r2, [r7, #20]
 801e4c0:	6812      	ldr	r2, [r2, #0]
 801e4c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e4c4:	430b      	orrs	r3, r1
 801e4c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	685b      	ldr	r3, [r3, #4]
 801e4ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e4d2:	697b      	ldr	r3, [r7, #20]
 801e4d4:	68da      	ldr	r2, [r3, #12]
 801e4d6:	697b      	ldr	r3, [r7, #20]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	430a      	orrs	r2, r1
 801e4dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	699b      	ldr	r3, [r3, #24]
 801e4e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e4e4:	697b      	ldr	r3, [r7, #20]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	4aa4      	ldr	r2, [pc, #656]	; (801e77c <UART_SetConfig+0x2f0>)
 801e4ea:	4293      	cmp	r3, r2
 801e4ec:	d004      	beq.n	801e4f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	6a1b      	ldr	r3, [r3, #32]
 801e4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e4f4:	4313      	orrs	r3, r2
 801e4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e4f8:	697b      	ldr	r3, [r7, #20]
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	689b      	ldr	r3, [r3, #8]
 801e4fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e502:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e506:	697a      	ldr	r2, [r7, #20]
 801e508:	6812      	ldr	r2, [r2, #0]
 801e50a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e50c:	430b      	orrs	r3, r1
 801e50e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e510:	697b      	ldr	r3, [r7, #20]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e516:	f023 010f 	bic.w	r1, r3, #15
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e51e:	697b      	ldr	r3, [r7, #20]
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	430a      	orrs	r2, r1
 801e524:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e526:	697b      	ldr	r3, [r7, #20]
 801e528:	681b      	ldr	r3, [r3, #0]
 801e52a:	4a95      	ldr	r2, [pc, #596]	; (801e780 <UART_SetConfig+0x2f4>)
 801e52c:	4293      	cmp	r3, r2
 801e52e:	d125      	bne.n	801e57c <UART_SetConfig+0xf0>
 801e530:	2003      	movs	r0, #3
 801e532:	f7ff fb1d 	bl	801db70 <LL_RCC_GetUSARTClockSource>
 801e536:	4603      	mov	r3, r0
 801e538:	2b03      	cmp	r3, #3
 801e53a:	d81b      	bhi.n	801e574 <UART_SetConfig+0xe8>
 801e53c:	a201      	add	r2, pc, #4	; (adr r2, 801e544 <UART_SetConfig+0xb8>)
 801e53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e542:	bf00      	nop
 801e544:	0801e555 	.word	0x0801e555
 801e548:	0801e565 	.word	0x0801e565
 801e54c:	0801e55d 	.word	0x0801e55d
 801e550:	0801e56d 	.word	0x0801e56d
 801e554:	2301      	movs	r3, #1
 801e556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e55a:	e042      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e55c:	2302      	movs	r3, #2
 801e55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e562:	e03e      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e564:	2304      	movs	r3, #4
 801e566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e56a:	e03a      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e56c:	2308      	movs	r3, #8
 801e56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e572:	e036      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e574:	2310      	movs	r3, #16
 801e576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e57a:	e032      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e57c:	697b      	ldr	r3, [r7, #20]
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	4a7e      	ldr	r2, [pc, #504]	; (801e77c <UART_SetConfig+0x2f0>)
 801e582:	4293      	cmp	r3, r2
 801e584:	d12a      	bne.n	801e5dc <UART_SetConfig+0x150>
 801e586:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801e58a:	f7ff fb01 	bl	801db90 <LL_RCC_GetLPUARTClockSource>
 801e58e:	4603      	mov	r3, r0
 801e590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e594:	d01a      	beq.n	801e5cc <UART_SetConfig+0x140>
 801e596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e59a:	d81b      	bhi.n	801e5d4 <UART_SetConfig+0x148>
 801e59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e5a0:	d00c      	beq.n	801e5bc <UART_SetConfig+0x130>
 801e5a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e5a6:	d815      	bhi.n	801e5d4 <UART_SetConfig+0x148>
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d003      	beq.n	801e5b4 <UART_SetConfig+0x128>
 801e5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e5b0:	d008      	beq.n	801e5c4 <UART_SetConfig+0x138>
 801e5b2:	e00f      	b.n	801e5d4 <UART_SetConfig+0x148>
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5ba:	e012      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e5bc:	2302      	movs	r3, #2
 801e5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5c2:	e00e      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e5c4:	2304      	movs	r3, #4
 801e5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5ca:	e00a      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e5cc:	2308      	movs	r3, #8
 801e5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5d2:	e006      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e5d4:	2310      	movs	r3, #16
 801e5d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5da:	e002      	b.n	801e5e2 <UART_SetConfig+0x156>
 801e5dc:	2310      	movs	r3, #16
 801e5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e5e2:	697b      	ldr	r3, [r7, #20]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	4a65      	ldr	r2, [pc, #404]	; (801e77c <UART_SetConfig+0x2f0>)
 801e5e8:	4293      	cmp	r3, r2
 801e5ea:	f040 8097 	bne.w	801e71c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e5ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e5f2:	2b08      	cmp	r3, #8
 801e5f4:	d823      	bhi.n	801e63e <UART_SetConfig+0x1b2>
 801e5f6:	a201      	add	r2, pc, #4	; (adr r2, 801e5fc <UART_SetConfig+0x170>)
 801e5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5fc:	0801e621 	.word	0x0801e621
 801e600:	0801e63f 	.word	0x0801e63f
 801e604:	0801e629 	.word	0x0801e629
 801e608:	0801e63f 	.word	0x0801e63f
 801e60c:	0801e62f 	.word	0x0801e62f
 801e610:	0801e63f 	.word	0x0801e63f
 801e614:	0801e63f 	.word	0x0801e63f
 801e618:	0801e63f 	.word	0x0801e63f
 801e61c:	0801e637 	.word	0x0801e637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e620:	f7fe fbd0 	bl	801cdc4 <HAL_RCC_GetPCLK1Freq>
 801e624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e626:	e010      	b.n	801e64a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e628:	4b56      	ldr	r3, [pc, #344]	; (801e784 <UART_SetConfig+0x2f8>)
 801e62a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e62c:	e00d      	b.n	801e64a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e62e:	f7fe fb49 	bl	801ccc4 <HAL_RCC_GetSysClockFreq>
 801e632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e634:	e009      	b.n	801e64a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e63a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e63c:	e005      	b.n	801e64a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801e63e:	2300      	movs	r3, #0
 801e640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e642:	2301      	movs	r3, #1
 801e644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	f000 812b 	beq.w	801e8a8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e652:	697b      	ldr	r3, [r7, #20]
 801e654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e656:	4a4c      	ldr	r2, [pc, #304]	; (801e788 <UART_SetConfig+0x2fc>)
 801e658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e65c:	461a      	mov	r2, r3
 801e65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e660:	fbb3 f3f2 	udiv	r3, r3, r2
 801e664:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e666:	697b      	ldr	r3, [r7, #20]
 801e668:	685a      	ldr	r2, [r3, #4]
 801e66a:	4613      	mov	r3, r2
 801e66c:	005b      	lsls	r3, r3, #1
 801e66e:	4413      	add	r3, r2
 801e670:	69ba      	ldr	r2, [r7, #24]
 801e672:	429a      	cmp	r2, r3
 801e674:	d305      	bcc.n	801e682 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e676:	697b      	ldr	r3, [r7, #20]
 801e678:	685b      	ldr	r3, [r3, #4]
 801e67a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e67c:	69ba      	ldr	r2, [r7, #24]
 801e67e:	429a      	cmp	r2, r3
 801e680:	d903      	bls.n	801e68a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801e682:	2301      	movs	r3, #1
 801e684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e688:	e10e      	b.n	801e8a8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e68c:	2200      	movs	r2, #0
 801e68e:	60bb      	str	r3, [r7, #8]
 801e690:	60fa      	str	r2, [r7, #12]
 801e692:	697b      	ldr	r3, [r7, #20]
 801e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e696:	4a3c      	ldr	r2, [pc, #240]	; (801e788 <UART_SetConfig+0x2fc>)
 801e698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e69c:	b29b      	uxth	r3, r3
 801e69e:	2200      	movs	r2, #0
 801e6a0:	603b      	str	r3, [r7, #0]
 801e6a2:	607a      	str	r2, [r7, #4]
 801e6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e6ac:	f7e2 faa4 	bl	8000bf8 <__aeabi_uldivmod>
 801e6b0:	4602      	mov	r2, r0
 801e6b2:	460b      	mov	r3, r1
 801e6b4:	4610      	mov	r0, r2
 801e6b6:	4619      	mov	r1, r3
 801e6b8:	f04f 0200 	mov.w	r2, #0
 801e6bc:	f04f 0300 	mov.w	r3, #0
 801e6c0:	020b      	lsls	r3, r1, #8
 801e6c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e6c6:	0202      	lsls	r2, r0, #8
 801e6c8:	6979      	ldr	r1, [r7, #20]
 801e6ca:	6849      	ldr	r1, [r1, #4]
 801e6cc:	0849      	lsrs	r1, r1, #1
 801e6ce:	2000      	movs	r0, #0
 801e6d0:	460c      	mov	r4, r1
 801e6d2:	4605      	mov	r5, r0
 801e6d4:	eb12 0804 	adds.w	r8, r2, r4
 801e6d8:	eb43 0905 	adc.w	r9, r3, r5
 801e6dc:	697b      	ldr	r3, [r7, #20]
 801e6de:	685b      	ldr	r3, [r3, #4]
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	469a      	mov	sl, r3
 801e6e4:	4693      	mov	fp, r2
 801e6e6:	4652      	mov	r2, sl
 801e6e8:	465b      	mov	r3, fp
 801e6ea:	4640      	mov	r0, r8
 801e6ec:	4649      	mov	r1, r9
 801e6ee:	f7e2 fa83 	bl	8000bf8 <__aeabi_uldivmod>
 801e6f2:	4602      	mov	r2, r0
 801e6f4:	460b      	mov	r3, r1
 801e6f6:	4613      	mov	r3, r2
 801e6f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e6fa:	6a3b      	ldr	r3, [r7, #32]
 801e6fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e700:	d308      	bcc.n	801e714 <UART_SetConfig+0x288>
 801e702:	6a3b      	ldr	r3, [r7, #32]
 801e704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e708:	d204      	bcs.n	801e714 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801e70a:	697b      	ldr	r3, [r7, #20]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	6a3a      	ldr	r2, [r7, #32]
 801e710:	60da      	str	r2, [r3, #12]
 801e712:	e0c9      	b.n	801e8a8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801e714:	2301      	movs	r3, #1
 801e716:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e71a:	e0c5      	b.n	801e8a8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e71c:	697b      	ldr	r3, [r7, #20]
 801e71e:	69db      	ldr	r3, [r3, #28]
 801e720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e724:	d16d      	bne.n	801e802 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801e726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e72a:	3b01      	subs	r3, #1
 801e72c:	2b07      	cmp	r3, #7
 801e72e:	d82d      	bhi.n	801e78c <UART_SetConfig+0x300>
 801e730:	a201      	add	r2, pc, #4	; (adr r2, 801e738 <UART_SetConfig+0x2ac>)
 801e732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e736:	bf00      	nop
 801e738:	0801e759 	.word	0x0801e759
 801e73c:	0801e761 	.word	0x0801e761
 801e740:	0801e78d 	.word	0x0801e78d
 801e744:	0801e767 	.word	0x0801e767
 801e748:	0801e78d 	.word	0x0801e78d
 801e74c:	0801e78d 	.word	0x0801e78d
 801e750:	0801e78d 	.word	0x0801e78d
 801e754:	0801e76f 	.word	0x0801e76f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e758:	f7fe fb4a 	bl	801cdf0 <HAL_RCC_GetPCLK2Freq>
 801e75c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e75e:	e01b      	b.n	801e798 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e760:	4b08      	ldr	r3, [pc, #32]	; (801e784 <UART_SetConfig+0x2f8>)
 801e762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e764:	e018      	b.n	801e798 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e766:	f7fe faad 	bl	801ccc4 <HAL_RCC_GetSysClockFreq>
 801e76a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e76c:	e014      	b.n	801e798 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e774:	e010      	b.n	801e798 <UART_SetConfig+0x30c>
 801e776:	bf00      	nop
 801e778:	cfff69f3 	.word	0xcfff69f3
 801e77c:	40008000 	.word	0x40008000
 801e780:	40013800 	.word	0x40013800
 801e784:	00f42400 	.word	0x00f42400
 801e788:	0802a33c 	.word	0x0802a33c
      default:
        pclk = 0U;
 801e78c:	2300      	movs	r3, #0
 801e78e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e790:	2301      	movs	r3, #1
 801e792:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	f000 8084 	beq.w	801e8a8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e7a0:	697b      	ldr	r3, [r7, #20]
 801e7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7a4:	4a4b      	ldr	r2, [pc, #300]	; (801e8d4 <UART_SetConfig+0x448>)
 801e7a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e7aa:	461a      	mov	r2, r3
 801e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7ae:	fbb3 f3f2 	udiv	r3, r3, r2
 801e7b2:	005a      	lsls	r2, r3, #1
 801e7b4:	697b      	ldr	r3, [r7, #20]
 801e7b6:	685b      	ldr	r3, [r3, #4]
 801e7b8:	085b      	lsrs	r3, r3, #1
 801e7ba:	441a      	add	r2, r3
 801e7bc:	697b      	ldr	r3, [r7, #20]
 801e7be:	685b      	ldr	r3, [r3, #4]
 801e7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801e7c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e7c6:	6a3b      	ldr	r3, [r7, #32]
 801e7c8:	2b0f      	cmp	r3, #15
 801e7ca:	d916      	bls.n	801e7fa <UART_SetConfig+0x36e>
 801e7cc:	6a3b      	ldr	r3, [r7, #32]
 801e7ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e7d2:	d212      	bcs.n	801e7fa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e7d4:	6a3b      	ldr	r3, [r7, #32]
 801e7d6:	b29b      	uxth	r3, r3
 801e7d8:	f023 030f 	bic.w	r3, r3, #15
 801e7dc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e7de:	6a3b      	ldr	r3, [r7, #32]
 801e7e0:	085b      	lsrs	r3, r3, #1
 801e7e2:	b29b      	uxth	r3, r3
 801e7e4:	f003 0307 	and.w	r3, r3, #7
 801e7e8:	b29a      	uxth	r2, r3
 801e7ea:	8bfb      	ldrh	r3, [r7, #30]
 801e7ec:	4313      	orrs	r3, r2
 801e7ee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801e7f0:	697b      	ldr	r3, [r7, #20]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	8bfa      	ldrh	r2, [r7, #30]
 801e7f6:	60da      	str	r2, [r3, #12]
 801e7f8:	e056      	b.n	801e8a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801e7fa:	2301      	movs	r3, #1
 801e7fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e800:	e052      	b.n	801e8a8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e806:	3b01      	subs	r3, #1
 801e808:	2b07      	cmp	r3, #7
 801e80a:	d822      	bhi.n	801e852 <UART_SetConfig+0x3c6>
 801e80c:	a201      	add	r2, pc, #4	; (adr r2, 801e814 <UART_SetConfig+0x388>)
 801e80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e812:	bf00      	nop
 801e814:	0801e835 	.word	0x0801e835
 801e818:	0801e83d 	.word	0x0801e83d
 801e81c:	0801e853 	.word	0x0801e853
 801e820:	0801e843 	.word	0x0801e843
 801e824:	0801e853 	.word	0x0801e853
 801e828:	0801e853 	.word	0x0801e853
 801e82c:	0801e853 	.word	0x0801e853
 801e830:	0801e84b 	.word	0x0801e84b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e834:	f7fe fadc 	bl	801cdf0 <HAL_RCC_GetPCLK2Freq>
 801e838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e83a:	e010      	b.n	801e85e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e83c:	4b26      	ldr	r3, [pc, #152]	; (801e8d8 <UART_SetConfig+0x44c>)
 801e83e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e840:	e00d      	b.n	801e85e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e842:	f7fe fa3f 	bl	801ccc4 <HAL_RCC_GetSysClockFreq>
 801e846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e848:	e009      	b.n	801e85e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e84a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e84e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e850:	e005      	b.n	801e85e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801e852:	2300      	movs	r3, #0
 801e854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e856:	2301      	movs	r3, #1
 801e858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e85c:	bf00      	nop
    }

    if (pclk != 0U)
 801e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e860:	2b00      	cmp	r3, #0
 801e862:	d021      	beq.n	801e8a8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e864:	697b      	ldr	r3, [r7, #20]
 801e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e868:	4a1a      	ldr	r2, [pc, #104]	; (801e8d4 <UART_SetConfig+0x448>)
 801e86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e86e:	461a      	mov	r2, r3
 801e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e872:	fbb3 f2f2 	udiv	r2, r3, r2
 801e876:	697b      	ldr	r3, [r7, #20]
 801e878:	685b      	ldr	r3, [r3, #4]
 801e87a:	085b      	lsrs	r3, r3, #1
 801e87c:	441a      	add	r2, r3
 801e87e:	697b      	ldr	r3, [r7, #20]
 801e880:	685b      	ldr	r3, [r3, #4]
 801e882:	fbb2 f3f3 	udiv	r3, r2, r3
 801e886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e888:	6a3b      	ldr	r3, [r7, #32]
 801e88a:	2b0f      	cmp	r3, #15
 801e88c:	d909      	bls.n	801e8a2 <UART_SetConfig+0x416>
 801e88e:	6a3b      	ldr	r3, [r7, #32]
 801e890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e894:	d205      	bcs.n	801e8a2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e896:	6a3b      	ldr	r3, [r7, #32]
 801e898:	b29a      	uxth	r2, r3
 801e89a:	697b      	ldr	r3, [r7, #20]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	60da      	str	r2, [r3, #12]
 801e8a0:	e002      	b.n	801e8a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801e8a2:	2301      	movs	r3, #1
 801e8a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801e8a8:	697b      	ldr	r3, [r7, #20]
 801e8aa:	2201      	movs	r2, #1
 801e8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801e8b0:	697b      	ldr	r3, [r7, #20]
 801e8b2:	2201      	movs	r2, #1
 801e8b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e8b8:	697b      	ldr	r3, [r7, #20]
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801e8be:	697b      	ldr	r3, [r7, #20]
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801e8c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801e8c8:	4618      	mov	r0, r3
 801e8ca:	3730      	adds	r7, #48	; 0x30
 801e8cc:	46bd      	mov	sp, r7
 801e8ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e8d2:	bf00      	nop
 801e8d4:	0802a33c 	.word	0x0802a33c
 801e8d8:	00f42400 	.word	0x00f42400

0801e8dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e8dc:	b480      	push	{r7}
 801e8de:	b083      	sub	sp, #12
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8e8:	f003 0301 	and.w	r3, r3, #1
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d00a      	beq.n	801e906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	685b      	ldr	r3, [r3, #4]
 801e8f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	430a      	orrs	r2, r1
 801e904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e90a:	f003 0302 	and.w	r3, r3, #2
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d00a      	beq.n	801e928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	685b      	ldr	r3, [r3, #4]
 801e918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	430a      	orrs	r2, r1
 801e926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e92c:	f003 0304 	and.w	r3, r3, #4
 801e930:	2b00      	cmp	r3, #0
 801e932:	d00a      	beq.n	801e94a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	681b      	ldr	r3, [r3, #0]
 801e938:	685b      	ldr	r3, [r3, #4]
 801e93a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	430a      	orrs	r2, r1
 801e948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e94e:	f003 0308 	and.w	r3, r3, #8
 801e952:	2b00      	cmp	r3, #0
 801e954:	d00a      	beq.n	801e96c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	685b      	ldr	r3, [r3, #4]
 801e95c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	430a      	orrs	r2, r1
 801e96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e970:	f003 0310 	and.w	r3, r3, #16
 801e974:	2b00      	cmp	r3, #0
 801e976:	d00a      	beq.n	801e98e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	689b      	ldr	r3, [r3, #8]
 801e97e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	430a      	orrs	r2, r1
 801e98c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e992:	f003 0320 	and.w	r3, r3, #32
 801e996:	2b00      	cmp	r3, #0
 801e998:	d00a      	beq.n	801e9b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	689b      	ldr	r3, [r3, #8]
 801e9a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	430a      	orrs	r2, r1
 801e9ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d01a      	beq.n	801e9f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	685b      	ldr	r3, [r3, #4]
 801e9c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	430a      	orrs	r2, r1
 801e9d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e9da:	d10a      	bne.n	801e9f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	685b      	ldr	r3, [r3, #4]
 801e9e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	430a      	orrs	r2, r1
 801e9f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d00a      	beq.n	801ea14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	685b      	ldr	r3, [r3, #4]
 801ea04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	430a      	orrs	r2, r1
 801ea12:	605a      	str	r2, [r3, #4]
  }
}
 801ea14:	bf00      	nop
 801ea16:	370c      	adds	r7, #12
 801ea18:	46bd      	mov	sp, r7
 801ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea1e:	4770      	bx	lr

0801ea20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ea20:	b580      	push	{r7, lr}
 801ea22:	b098      	sub	sp, #96	; 0x60
 801ea24:	af02      	add	r7, sp, #8
 801ea26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ea30:	f7fa ff44 	bl	80198bc <HAL_GetTick>
 801ea34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	f003 0308 	and.w	r3, r3, #8
 801ea40:	2b08      	cmp	r3, #8
 801ea42:	d12f      	bne.n	801eaa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ea44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ea48:	9300      	str	r3, [sp, #0]
 801ea4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea4c:	2200      	movs	r2, #0
 801ea4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ea52:	6878      	ldr	r0, [r7, #4]
 801ea54:	f000 f88e 	bl	801eb74 <UART_WaitOnFlagUntilTimeout>
 801ea58:	4603      	mov	r3, r0
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d022      	beq.n	801eaa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea66:	e853 3f00 	ldrex	r3, [r3]
 801ea6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801ea6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ea72:	653b      	str	r3, [r7, #80]	; 0x50
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	461a      	mov	r2, r3
 801ea7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea7c:	647b      	str	r3, [r7, #68]	; 0x44
 801ea7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ea82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ea84:	e841 2300 	strex	r3, r2, [r1]
 801ea88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ea8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	d1e6      	bne.n	801ea5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2220      	movs	r2, #32
 801ea94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801eaa0:	2303      	movs	r3, #3
 801eaa2:	e063      	b.n	801eb6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	f003 0304 	and.w	r3, r3, #4
 801eaae:	2b04      	cmp	r3, #4
 801eab0:	d149      	bne.n	801eb46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801eab2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801eab6:	9300      	str	r3, [sp, #0]
 801eab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eaba:	2200      	movs	r2, #0
 801eabc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801eac0:	6878      	ldr	r0, [r7, #4]
 801eac2:	f000 f857 	bl	801eb74 <UART_WaitOnFlagUntilTimeout>
 801eac6:	4603      	mov	r3, r0
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d03c      	beq.n	801eb46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ead4:	e853 3f00 	ldrex	r3, [r3]
 801ead8:	623b      	str	r3, [r7, #32]
   return(result);
 801eada:	6a3b      	ldr	r3, [r7, #32]
 801eadc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801eae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	681b      	ldr	r3, [r3, #0]
 801eae6:	461a      	mov	r2, r3
 801eae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eaea:	633b      	str	r3, [r7, #48]	; 0x30
 801eaec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eaee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eaf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eaf2:	e841 2300 	strex	r3, r2, [r1]
 801eaf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801eaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d1e6      	bne.n	801eacc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	3308      	adds	r3, #8
 801eb04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb06:	693b      	ldr	r3, [r7, #16]
 801eb08:	e853 3f00 	ldrex	r3, [r3]
 801eb0c:	60fb      	str	r3, [r7, #12]
   return(result);
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	f023 0301 	bic.w	r3, r3, #1
 801eb14:	64bb      	str	r3, [r7, #72]	; 0x48
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	3308      	adds	r3, #8
 801eb1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eb1e:	61fa      	str	r2, [r7, #28]
 801eb20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb22:	69b9      	ldr	r1, [r7, #24]
 801eb24:	69fa      	ldr	r2, [r7, #28]
 801eb26:	e841 2300 	strex	r3, r2, [r1]
 801eb2a:	617b      	str	r3, [r7, #20]
   return(result);
 801eb2c:	697b      	ldr	r3, [r7, #20]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d1e5      	bne.n	801eafe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	2220      	movs	r2, #32
 801eb36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	2200      	movs	r2, #0
 801eb3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801eb42:	2303      	movs	r3, #3
 801eb44:	e012      	b.n	801eb6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	2220      	movs	r2, #32
 801eb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	2220      	movs	r2, #32
 801eb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	2200      	movs	r2, #0
 801eb5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	2200      	movs	r2, #0
 801eb60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	2200      	movs	r2, #0
 801eb66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801eb6a:	2300      	movs	r3, #0
}
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	3758      	adds	r7, #88	; 0x58
 801eb70:	46bd      	mov	sp, r7
 801eb72:	bd80      	pop	{r7, pc}

0801eb74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b084      	sub	sp, #16
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	60f8      	str	r0, [r7, #12]
 801eb7c:	60b9      	str	r1, [r7, #8]
 801eb7e:	603b      	str	r3, [r7, #0]
 801eb80:	4613      	mov	r3, r2
 801eb82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801eb84:	e049      	b.n	801ec1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801eb86:	69bb      	ldr	r3, [r7, #24]
 801eb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb8c:	d045      	beq.n	801ec1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801eb8e:	f7fa fe95 	bl	80198bc <HAL_GetTick>
 801eb92:	4602      	mov	r2, r0
 801eb94:	683b      	ldr	r3, [r7, #0]
 801eb96:	1ad3      	subs	r3, r2, r3
 801eb98:	69ba      	ldr	r2, [r7, #24]
 801eb9a:	429a      	cmp	r2, r3
 801eb9c:	d302      	bcc.n	801eba4 <UART_WaitOnFlagUntilTimeout+0x30>
 801eb9e:	69bb      	ldr	r3, [r7, #24]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d101      	bne.n	801eba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801eba4:	2303      	movs	r3, #3
 801eba6:	e048      	b.n	801ec3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	f003 0304 	and.w	r3, r3, #4
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d031      	beq.n	801ec1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	69db      	ldr	r3, [r3, #28]
 801ebbc:	f003 0308 	and.w	r3, r3, #8
 801ebc0:	2b08      	cmp	r3, #8
 801ebc2:	d110      	bne.n	801ebe6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ebc4:	68fb      	ldr	r3, [r7, #12]
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	2208      	movs	r2, #8
 801ebca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ebcc:	68f8      	ldr	r0, [r7, #12]
 801ebce:	f000 f920 	bl	801ee12 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ebd2:	68fb      	ldr	r3, [r7, #12]
 801ebd4:	2208      	movs	r2, #8
 801ebd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	2200      	movs	r2, #0
 801ebde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801ebe2:	2301      	movs	r3, #1
 801ebe4:	e029      	b.n	801ec3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	69db      	ldr	r3, [r3, #28]
 801ebec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ebf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ebf4:	d111      	bne.n	801ec1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ebfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ec00:	68f8      	ldr	r0, [r7, #12]
 801ec02:	f000 f906 	bl	801ee12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	2220      	movs	r2, #32
 801ec0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	2200      	movs	r2, #0
 801ec12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801ec16:	2303      	movs	r3, #3
 801ec18:	e00f      	b.n	801ec3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	69da      	ldr	r2, [r3, #28]
 801ec20:	68bb      	ldr	r3, [r7, #8]
 801ec22:	4013      	ands	r3, r2
 801ec24:	68ba      	ldr	r2, [r7, #8]
 801ec26:	429a      	cmp	r2, r3
 801ec28:	bf0c      	ite	eq
 801ec2a:	2301      	moveq	r3, #1
 801ec2c:	2300      	movne	r3, #0
 801ec2e:	b2db      	uxtb	r3, r3
 801ec30:	461a      	mov	r2, r3
 801ec32:	79fb      	ldrb	r3, [r7, #7]
 801ec34:	429a      	cmp	r2, r3
 801ec36:	d0a6      	beq.n	801eb86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ec38:	2300      	movs	r3, #0
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	3710      	adds	r7, #16
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bd80      	pop	{r7, pc}
	...

0801ec44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b096      	sub	sp, #88	; 0x58
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	60f8      	str	r0, [r7, #12]
 801ec4c:	60b9      	str	r1, [r7, #8]
 801ec4e:	4613      	mov	r3, r2
 801ec50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	68ba      	ldr	r2, [r7, #8]
 801ec56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	88fa      	ldrh	r2, [r7, #6]
 801ec5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	2200      	movs	r2, #0
 801ec64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	2222      	movs	r2, #34	; 0x22
 801ec6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d02d      	beq.n	801ecd6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ec80:	4a40      	ldr	r2, [pc, #256]	; (801ed84 <UART_Start_Receive_DMA+0x140>)
 801ec82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ec8a:	4a3f      	ldr	r2, [pc, #252]	; (801ed88 <UART_Start_Receive_DMA+0x144>)
 801ec8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ec94:	4a3d      	ldr	r2, [pc, #244]	; (801ed8c <UART_Start_Receive_DMA+0x148>)
 801ec96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801ec98:	68fb      	ldr	r3, [r7, #12]
 801ec9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ec9e:	2200      	movs	r2, #0
 801eca0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	3324      	adds	r3, #36	; 0x24
 801ecae:	4619      	mov	r1, r3
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ecb4:	461a      	mov	r2, r3
 801ecb6:	88fb      	ldrh	r3, [r7, #6]
 801ecb8:	f7fb f866 	bl	8019d88 <HAL_DMA_Start_IT>
 801ecbc:	4603      	mov	r3, r0
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d009      	beq.n	801ecd6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	2210      	movs	r2, #16
 801ecc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ecca:	68fb      	ldr	r3, [r7, #12]
 801eccc:	2220      	movs	r2, #32
 801ecce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 801ecd2:	2301      	movs	r3, #1
 801ecd4:	e051      	b.n	801ed7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	691b      	ldr	r3, [r3, #16]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d018      	beq.n	801ed10 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ecde:	68fb      	ldr	r3, [r7, #12]
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ece4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ece6:	e853 3f00 	ldrex	r3, [r3]
 801ecea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ecee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ecf2:	657b      	str	r3, [r7, #84]	; 0x54
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	461a      	mov	r2, r3
 801ecfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ecfc:	64bb      	str	r3, [r7, #72]	; 0x48
 801ecfe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ed02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed04:	e841 2300 	strex	r3, r2, [r1]
 801ed08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ed0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d1e6      	bne.n	801ecde <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	3308      	adds	r3, #8
 801ed16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed1a:	e853 3f00 	ldrex	r3, [r3]
 801ed1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed22:	f043 0301 	orr.w	r3, r3, #1
 801ed26:	653b      	str	r3, [r7, #80]	; 0x50
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	3308      	adds	r3, #8
 801ed2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ed30:	637a      	str	r2, [r7, #52]	; 0x34
 801ed32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ed36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ed38:	e841 2300 	strex	r3, r2, [r1]
 801ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d1e5      	bne.n	801ed10 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	3308      	adds	r3, #8
 801ed4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	e853 3f00 	ldrex	r3, [r3]
 801ed52:	613b      	str	r3, [r7, #16]
   return(result);
 801ed54:	693b      	ldr	r3, [r7, #16]
 801ed56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	3308      	adds	r3, #8
 801ed62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ed64:	623a      	str	r2, [r7, #32]
 801ed66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed68:	69f9      	ldr	r1, [r7, #28]
 801ed6a:	6a3a      	ldr	r2, [r7, #32]
 801ed6c:	e841 2300 	strex	r3, r2, [r1]
 801ed70:	61bb      	str	r3, [r7, #24]
   return(result);
 801ed72:	69bb      	ldr	r3, [r7, #24]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d1e5      	bne.n	801ed44 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801ed78:	2300      	movs	r3, #0
}
 801ed7a:	4618      	mov	r0, r3
 801ed7c:	3758      	adds	r7, #88	; 0x58
 801ed7e:	46bd      	mov	sp, r7
 801ed80:	bd80      	pop	{r7, pc}
 801ed82:	bf00      	nop
 801ed84:	0801eedf 	.word	0x0801eedf
 801ed88:	0801f00b 	.word	0x0801f00b
 801ed8c:	0801f049 	.word	0x0801f049

0801ed90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ed90:	b480      	push	{r7}
 801ed92:	b08f      	sub	sp, #60	; 0x3c
 801ed94:	af00      	add	r7, sp, #0
 801ed96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ed9e:	6a3b      	ldr	r3, [r7, #32]
 801eda0:	e853 3f00 	ldrex	r3, [r3]
 801eda4:	61fb      	str	r3, [r7, #28]
   return(result);
 801eda6:	69fb      	ldr	r3, [r7, #28]
 801eda8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801edac:	637b      	str	r3, [r7, #52]	; 0x34
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	461a      	mov	r2, r3
 801edb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801edb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801edb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801edba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801edbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801edbe:	e841 2300 	strex	r3, r2, [r1]
 801edc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d1e6      	bne.n	801ed98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	3308      	adds	r3, #8
 801edd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	e853 3f00 	ldrex	r3, [r3]
 801edd8:	60bb      	str	r3, [r7, #8]
   return(result);
 801edda:	68bb      	ldr	r3, [r7, #8]
 801eddc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801ede0:	633b      	str	r3, [r7, #48]	; 0x30
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	3308      	adds	r3, #8
 801ede8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801edea:	61ba      	str	r2, [r7, #24]
 801edec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801edee:	6979      	ldr	r1, [r7, #20]
 801edf0:	69ba      	ldr	r2, [r7, #24]
 801edf2:	e841 2300 	strex	r3, r2, [r1]
 801edf6:	613b      	str	r3, [r7, #16]
   return(result);
 801edf8:	693b      	ldr	r3, [r7, #16]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d1e5      	bne.n	801edca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2220      	movs	r2, #32
 801ee02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801ee06:	bf00      	nop
 801ee08:	373c      	adds	r7, #60	; 0x3c
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee10:	4770      	bx	lr

0801ee12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ee12:	b480      	push	{r7}
 801ee14:	b095      	sub	sp, #84	; 0x54
 801ee16:	af00      	add	r7, sp, #0
 801ee18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee22:	e853 3f00 	ldrex	r3, [r3]
 801ee26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ee2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	461a      	mov	r2, r3
 801ee36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee38:	643b      	str	r3, [r7, #64]	; 0x40
 801ee3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ee3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ee40:	e841 2300 	strex	r3, r2, [r1]
 801ee44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d1e6      	bne.n	801ee1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	3308      	adds	r3, #8
 801ee52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee54:	6a3b      	ldr	r3, [r7, #32]
 801ee56:	e853 3f00 	ldrex	r3, [r3]
 801ee5a:	61fb      	str	r3, [r7, #28]
   return(result);
 801ee5c:	69fb      	ldr	r3, [r7, #28]
 801ee5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ee62:	f023 0301 	bic.w	r3, r3, #1
 801ee66:	64bb      	str	r3, [r7, #72]	; 0x48
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	3308      	adds	r3, #8
 801ee6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ee70:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ee72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ee76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ee78:	e841 2300 	strex	r3, r2, [r1]
 801ee7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ee7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d1e3      	bne.n	801ee4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ee88:	2b01      	cmp	r3, #1
 801ee8a:	d118      	bne.n	801eebe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee92:	68fb      	ldr	r3, [r7, #12]
 801ee94:	e853 3f00 	ldrex	r3, [r3]
 801ee98:	60bb      	str	r3, [r7, #8]
   return(result);
 801ee9a:	68bb      	ldr	r3, [r7, #8]
 801ee9c:	f023 0310 	bic.w	r3, r3, #16
 801eea0:	647b      	str	r3, [r7, #68]	; 0x44
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	461a      	mov	r2, r3
 801eea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeaa:	61bb      	str	r3, [r7, #24]
 801eeac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eeae:	6979      	ldr	r1, [r7, #20]
 801eeb0:	69ba      	ldr	r2, [r7, #24]
 801eeb2:	e841 2300 	strex	r3, r2, [r1]
 801eeb6:	613b      	str	r3, [r7, #16]
   return(result);
 801eeb8:	693b      	ldr	r3, [r7, #16]
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d1e6      	bne.n	801ee8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	2220      	movs	r2, #32
 801eec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	2200      	movs	r2, #0
 801eeca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	2200      	movs	r2, #0
 801eed0:	675a      	str	r2, [r3, #116]	; 0x74
}
 801eed2:	bf00      	nop
 801eed4:	3754      	adds	r7, #84	; 0x54
 801eed6:	46bd      	mov	sp, r7
 801eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eedc:	4770      	bx	lr

0801eede <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801eede:	b580      	push	{r7, lr}
 801eee0:	b09c      	sub	sp, #112	; 0x70
 801eee2:	af00      	add	r7, sp, #0
 801eee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eeea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	f003 0320 	and.w	r3, r3, #32
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d171      	bne.n	801efde <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801eefa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eefc:	2200      	movs	r2, #0
 801eefe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ef02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef0a:	e853 3f00 	ldrex	r3, [r3]
 801ef0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ef10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ef12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ef16:	66bb      	str	r3, [r7, #104]	; 0x68
 801ef18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	461a      	mov	r2, r3
 801ef1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ef20:	65bb      	str	r3, [r7, #88]	; 0x58
 801ef22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ef26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ef28:	e841 2300 	strex	r3, r2, [r1]
 801ef2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801ef2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d1e6      	bne.n	801ef02 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	3308      	adds	r3, #8
 801ef3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef3e:	e853 3f00 	ldrex	r3, [r3]
 801ef42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801ef44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef46:	f023 0301 	bic.w	r3, r3, #1
 801ef4a:	667b      	str	r3, [r7, #100]	; 0x64
 801ef4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	3308      	adds	r3, #8
 801ef52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ef54:	647a      	str	r2, [r7, #68]	; 0x44
 801ef56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ef5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef5c:	e841 2300 	strex	r3, r2, [r1]
 801ef60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ef62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d1e5      	bne.n	801ef34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ef68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	3308      	adds	r3, #8
 801ef6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef72:	e853 3f00 	ldrex	r3, [r3]
 801ef76:	623b      	str	r3, [r7, #32]
   return(result);
 801ef78:	6a3b      	ldr	r3, [r7, #32]
 801ef7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ef7e:	663b      	str	r3, [r7, #96]	; 0x60
 801ef80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	3308      	adds	r3, #8
 801ef86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ef88:	633a      	str	r2, [r7, #48]	; 0x30
 801ef8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ef8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef90:	e841 2300 	strex	r3, r2, [r1]
 801ef94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d1e5      	bne.n	801ef68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ef9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef9e:	2220      	movs	r2, #32
 801efa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801efa8:	2b01      	cmp	r3, #1
 801efaa:	d118      	bne.n	801efde <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801efac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801efb2:	693b      	ldr	r3, [r7, #16]
 801efb4:	e853 3f00 	ldrex	r3, [r3]
 801efb8:	60fb      	str	r3, [r7, #12]
   return(result);
 801efba:	68fb      	ldr	r3, [r7, #12]
 801efbc:	f023 0310 	bic.w	r3, r3, #16
 801efc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801efc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efc4:	681b      	ldr	r3, [r3, #0]
 801efc6:	461a      	mov	r2, r3
 801efc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801efca:	61fb      	str	r3, [r7, #28]
 801efcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801efce:	69b9      	ldr	r1, [r7, #24]
 801efd0:	69fa      	ldr	r2, [r7, #28]
 801efd2:	e841 2300 	strex	r3, r2, [r1]
 801efd6:	617b      	str	r3, [r7, #20]
   return(result);
 801efd8:	697b      	ldr	r3, [r7, #20]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d1e6      	bne.n	801efac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801efde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efe0:	2200      	movs	r2, #0
 801efe2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801efe8:	2b01      	cmp	r3, #1
 801efea:	d107      	bne.n	801effc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801efec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801eff2:	4619      	mov	r1, r3
 801eff4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801eff6:	f7ff fa3d 	bl	801e474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801effa:	e002      	b.n	801f002 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801effc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801effe:	f7e3 fb13 	bl	8002628 <HAL_UART_RxCpltCallback>
}
 801f002:	bf00      	nop
 801f004:	3770      	adds	r7, #112	; 0x70
 801f006:	46bd      	mov	sp, r7
 801f008:	bd80      	pop	{r7, pc}

0801f00a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801f00a:	b580      	push	{r7, lr}
 801f00c:	b084      	sub	sp, #16
 801f00e:	af00      	add	r7, sp, #0
 801f010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f016:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801f018:	68fb      	ldr	r3, [r7, #12]
 801f01a:	2201      	movs	r2, #1
 801f01c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f022:	2b01      	cmp	r3, #1
 801f024:	d109      	bne.n	801f03a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801f02c:	085b      	lsrs	r3, r3, #1
 801f02e:	b29b      	uxth	r3, r3
 801f030:	4619      	mov	r1, r3
 801f032:	68f8      	ldr	r0, [r7, #12]
 801f034:	f7ff fa1e 	bl	801e474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f038:	e002      	b.n	801f040 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801f03a:	68f8      	ldr	r0, [r7, #12]
 801f03c:	f7ff fa06 	bl	801e44c <HAL_UART_RxHalfCpltCallback>
}
 801f040:	bf00      	nop
 801f042:	3710      	adds	r7, #16
 801f044:	46bd      	mov	sp, r7
 801f046:	bd80      	pop	{r7, pc}

0801f048 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801f048:	b580      	push	{r7, lr}
 801f04a:	b086      	sub	sp, #24
 801f04c:	af00      	add	r7, sp, #0
 801f04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f054:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801f056:	697b      	ldr	r3, [r7, #20]
 801f058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f05c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801f05e:	697b      	ldr	r3, [r7, #20]
 801f060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f064:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801f066:	697b      	ldr	r3, [r7, #20]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	689b      	ldr	r3, [r3, #8]
 801f06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f070:	2b80      	cmp	r3, #128	; 0x80
 801f072:	d109      	bne.n	801f088 <UART_DMAError+0x40>
 801f074:	693b      	ldr	r3, [r7, #16]
 801f076:	2b21      	cmp	r3, #33	; 0x21
 801f078:	d106      	bne.n	801f088 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801f07a:	697b      	ldr	r3, [r7, #20]
 801f07c:	2200      	movs	r2, #0
 801f07e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801f082:	6978      	ldr	r0, [r7, #20]
 801f084:	f7ff fe84 	bl	801ed90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801f088:	697b      	ldr	r3, [r7, #20]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	689b      	ldr	r3, [r3, #8]
 801f08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f092:	2b40      	cmp	r3, #64	; 0x40
 801f094:	d109      	bne.n	801f0aa <UART_DMAError+0x62>
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	2b22      	cmp	r3, #34	; 0x22
 801f09a:	d106      	bne.n	801f0aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801f09c:	697b      	ldr	r3, [r7, #20]
 801f09e:	2200      	movs	r2, #0
 801f0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801f0a4:	6978      	ldr	r0, [r7, #20]
 801f0a6:	f7ff feb4 	bl	801ee12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801f0aa:	697b      	ldr	r3, [r7, #20]
 801f0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f0b0:	f043 0210 	orr.w	r2, r3, #16
 801f0b4:	697b      	ldr	r3, [r7, #20]
 801f0b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801f0ba:	6978      	ldr	r0, [r7, #20]
 801f0bc:	f7ff f9d0 	bl	801e460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f0c0:	bf00      	nop
 801f0c2:	3718      	adds	r7, #24
 801f0c4:	46bd      	mov	sp, r7
 801f0c6:	bd80      	pop	{r7, pc}

0801f0c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f0c8:	b580      	push	{r7, lr}
 801f0ca:	b084      	sub	sp, #16
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	2200      	movs	r2, #0
 801f0da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801f0e6:	68f8      	ldr	r0, [r7, #12]
 801f0e8:	f7ff f9ba 	bl	801e460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f0ec:	bf00      	nop
 801f0ee:	3710      	adds	r7, #16
 801f0f0:	46bd      	mov	sp, r7
 801f0f2:	bd80      	pop	{r7, pc}

0801f0f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b088      	sub	sp, #32
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	e853 3f00 	ldrex	r3, [r3]
 801f108:	60bb      	str	r3, [r7, #8]
   return(result);
 801f10a:	68bb      	ldr	r3, [r7, #8]
 801f10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f110:	61fb      	str	r3, [r7, #28]
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	461a      	mov	r2, r3
 801f118:	69fb      	ldr	r3, [r7, #28]
 801f11a:	61bb      	str	r3, [r7, #24]
 801f11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f11e:	6979      	ldr	r1, [r7, #20]
 801f120:	69ba      	ldr	r2, [r7, #24]
 801f122:	e841 2300 	strex	r3, r2, [r1]
 801f126:	613b      	str	r3, [r7, #16]
   return(result);
 801f128:	693b      	ldr	r3, [r7, #16]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d1e6      	bne.n	801f0fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	2220      	movs	r2, #32
 801f132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	2200      	movs	r2, #0
 801f13a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801f13c:	6878      	ldr	r0, [r7, #4]
 801f13e:	f7e3 fa91 	bl	8002664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f142:	bf00      	nop
 801f144:	3720      	adds	r7, #32
 801f146:	46bd      	mov	sp, r7
 801f148:	bd80      	pop	{r7, pc}

0801f14a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f14a:	b480      	push	{r7}
 801f14c:	b083      	sub	sp, #12
 801f14e:	af00      	add	r7, sp, #0
 801f150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f152:	bf00      	nop
 801f154:	370c      	adds	r7, #12
 801f156:	46bd      	mov	sp, r7
 801f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f15c:	4770      	bx	lr

0801f15e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801f15e:	b480      	push	{r7}
 801f160:	b083      	sub	sp, #12
 801f162:	af00      	add	r7, sp, #0
 801f164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801f166:	bf00      	nop
 801f168:	370c      	adds	r7, #12
 801f16a:	46bd      	mov	sp, r7
 801f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f170:	4770      	bx	lr

0801f172 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801f172:	b480      	push	{r7}
 801f174:	b083      	sub	sp, #12
 801f176:	af00      	add	r7, sp, #0
 801f178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801f17a:	bf00      	nop
 801f17c:	370c      	adds	r7, #12
 801f17e:	46bd      	mov	sp, r7
 801f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f184:	4770      	bx	lr

0801f186 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801f186:	b480      	push	{r7}
 801f188:	b085      	sub	sp, #20
 801f18a:	af00      	add	r7, sp, #0
 801f18c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f194:	2b01      	cmp	r3, #1
 801f196:	d101      	bne.n	801f19c <HAL_UARTEx_DisableFifoMode+0x16>
 801f198:	2302      	movs	r3, #2
 801f19a:	e027      	b.n	801f1ec <HAL_UARTEx_DisableFifoMode+0x66>
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	2201      	movs	r2, #1
 801f1a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	2224      	movs	r2, #36	; 0x24
 801f1a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	681a      	ldr	r2, [r3, #0]
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	f022 0201 	bic.w	r2, r2, #1
 801f1c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801f1ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2200      	movs	r2, #0
 801f1d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	68fa      	ldr	r2, [r7, #12]
 801f1d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2220      	movs	r2, #32
 801f1de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f1ea:	2300      	movs	r3, #0
}
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	3714      	adds	r7, #20
 801f1f0:	46bd      	mov	sp, r7
 801f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1f6:	4770      	bx	lr

0801f1f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f1f8:	b580      	push	{r7, lr}
 801f1fa:	b084      	sub	sp, #16
 801f1fc:	af00      	add	r7, sp, #0
 801f1fe:	6078      	str	r0, [r7, #4]
 801f200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f208:	2b01      	cmp	r3, #1
 801f20a:	d101      	bne.n	801f210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801f20c:	2302      	movs	r3, #2
 801f20e:	e02d      	b.n	801f26c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2201      	movs	r2, #1
 801f214:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	2224      	movs	r2, #36	; 0x24
 801f21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	681a      	ldr	r2, [r3, #0]
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	f022 0201 	bic.w	r2, r2, #1
 801f236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	689b      	ldr	r3, [r3, #8]
 801f23e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	683a      	ldr	r2, [r7, #0]
 801f248:	430a      	orrs	r2, r1
 801f24a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f24c:	6878      	ldr	r0, [r7, #4]
 801f24e:	f000 f84f 	bl	801f2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	68fa      	ldr	r2, [r7, #12]
 801f258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	2220      	movs	r2, #32
 801f25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	2200      	movs	r2, #0
 801f266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f26a:	2300      	movs	r3, #0
}
 801f26c:	4618      	mov	r0, r3
 801f26e:	3710      	adds	r7, #16
 801f270:	46bd      	mov	sp, r7
 801f272:	bd80      	pop	{r7, pc}

0801f274 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f274:	b580      	push	{r7, lr}
 801f276:	b084      	sub	sp, #16
 801f278:	af00      	add	r7, sp, #0
 801f27a:	6078      	str	r0, [r7, #4]
 801f27c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f284:	2b01      	cmp	r3, #1
 801f286:	d101      	bne.n	801f28c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801f288:	2302      	movs	r3, #2
 801f28a:	e02d      	b.n	801f2e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	2201      	movs	r2, #1
 801f290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	2224      	movs	r2, #36	; 0x24
 801f298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	681a      	ldr	r2, [r3, #0]
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	f022 0201 	bic.w	r2, r2, #1
 801f2b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	689b      	ldr	r3, [r3, #8]
 801f2ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	683a      	ldr	r2, [r7, #0]
 801f2c4:	430a      	orrs	r2, r1
 801f2c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	f000 f811 	bl	801f2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	68fa      	ldr	r2, [r7, #12]
 801f2d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	2220      	movs	r2, #32
 801f2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	2200      	movs	r2, #0
 801f2e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f2e6:	2300      	movs	r3, #0
}
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	3710      	adds	r7, #16
 801f2ec:	46bd      	mov	sp, r7
 801f2ee:	bd80      	pop	{r7, pc}

0801f2f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801f2f0:	b480      	push	{r7}
 801f2f2:	b085      	sub	sp, #20
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d108      	bne.n	801f312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	2201      	movs	r2, #1
 801f304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	2201      	movs	r2, #1
 801f30c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801f310:	e031      	b.n	801f376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801f312:	2308      	movs	r3, #8
 801f314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801f316:	2308      	movs	r3, #8
 801f318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	689b      	ldr	r3, [r3, #8]
 801f320:	0e5b      	lsrs	r3, r3, #25
 801f322:	b2db      	uxtb	r3, r3
 801f324:	f003 0307 	and.w	r3, r3, #7
 801f328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	689b      	ldr	r3, [r3, #8]
 801f330:	0f5b      	lsrs	r3, r3, #29
 801f332:	b2db      	uxtb	r3, r3
 801f334:	f003 0307 	and.w	r3, r3, #7
 801f338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f33a:	7bbb      	ldrb	r3, [r7, #14]
 801f33c:	7b3a      	ldrb	r2, [r7, #12]
 801f33e:	4911      	ldr	r1, [pc, #68]	; (801f384 <UARTEx_SetNbDataToProcess+0x94>)
 801f340:	5c8a      	ldrb	r2, [r1, r2]
 801f342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801f346:	7b3a      	ldrb	r2, [r7, #12]
 801f348:	490f      	ldr	r1, [pc, #60]	; (801f388 <UARTEx_SetNbDataToProcess+0x98>)
 801f34a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f34c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f350:	b29a      	uxth	r2, r3
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f358:	7bfb      	ldrb	r3, [r7, #15]
 801f35a:	7b7a      	ldrb	r2, [r7, #13]
 801f35c:	4909      	ldr	r1, [pc, #36]	; (801f384 <UARTEx_SetNbDataToProcess+0x94>)
 801f35e:	5c8a      	ldrb	r2, [r1, r2]
 801f360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801f364:	7b7a      	ldrb	r2, [r7, #13]
 801f366:	4908      	ldr	r1, [pc, #32]	; (801f388 <UARTEx_SetNbDataToProcess+0x98>)
 801f368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f36a:	fb93 f3f2 	sdiv	r3, r3, r2
 801f36e:	b29a      	uxth	r2, r3
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801f376:	bf00      	nop
 801f378:	3714      	adds	r7, #20
 801f37a:	46bd      	mov	sp, r7
 801f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f380:	4770      	bx	lr
 801f382:	bf00      	nop
 801f384:	0802a354 	.word	0x0802a354
 801f388:	0802a35c 	.word	0x0802a35c

0801f38c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f38c:	b480      	push	{r7}
 801f38e:	b085      	sub	sp, #20
 801f390:	af00      	add	r7, sp, #0
 801f392:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f394:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801f398:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801f3a0:	b29a      	uxth	r2, r3
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	b29b      	uxth	r3, r3
 801f3a6:	43db      	mvns	r3, r3
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	4013      	ands	r3, r2
 801f3ac:	b29a      	uxth	r2, r3
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801f3b4:	2300      	movs	r3, #0
}
 801f3b6:	4618      	mov	r0, r3
 801f3b8:	3714      	adds	r7, #20
 801f3ba:	46bd      	mov	sp, r7
 801f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c0:	4770      	bx	lr

0801f3c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f3c2:	b084      	sub	sp, #16
 801f3c4:	b480      	push	{r7}
 801f3c6:	b083      	sub	sp, #12
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
 801f3cc:	f107 0014 	add.w	r0, r7, #20
 801f3d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	2201      	movs	r2, #1
 801f3d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	2200      	movs	r2, #0
 801f3e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	2200      	movs	r2, #0
 801f3e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	2200      	movs	r2, #0
 801f3f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801f3f4:	2300      	movs	r3, #0
}
 801f3f6:	4618      	mov	r0, r3
 801f3f8:	370c      	adds	r7, #12
 801f3fa:	46bd      	mov	sp, r7
 801f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f400:	b004      	add	sp, #16
 801f402:	4770      	bx	lr

0801f404 <init_done>:

void init_done();
void Send_Tof();

void init_done()
{
 801f404:	b580      	push	{r7, lr}
 801f406:	b082      	sub	sp, #8
 801f408:	af00      	add	r7, sp, #0
	for(int i=0; i<5; i++)
 801f40a:	2300      	movs	r3, #0
 801f40c:	607b      	str	r3, [r7, #4]
 801f40e:	e017      	b.n	801f440 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 801f410:	2120      	movs	r1, #32
 801f412:	4816      	ldr	r0, [pc, #88]	; (801f46c <init_done+0x68>)
 801f414:	f7fb f9c0 	bl	801a798 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801f418:	20c8      	movs	r0, #200	; 0xc8
 801f41a:	f7e2 f9d7 	bl	80017cc <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801f41e:	2101      	movs	r1, #1
 801f420:	4812      	ldr	r0, [pc, #72]	; (801f46c <init_done+0x68>)
 801f422:	f7fb f9b9 	bl	801a798 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801f426:	20c8      	movs	r0, #200	; 0xc8
 801f428:	f7e2 f9d0 	bl	80017cc <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801f42c:	2102      	movs	r1, #2
 801f42e:	480f      	ldr	r0, [pc, #60]	; (801f46c <init_done+0x68>)
 801f430:	f7fb f9b2 	bl	801a798 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801f434:	20c8      	movs	r0, #200	; 0xc8
 801f436:	f7e2 f9c9 	bl	80017cc <HAL_Delay>
	for(int i=0; i<5; i++)
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	3301      	adds	r3, #1
 801f43e:	607b      	str	r3, [r7, #4]
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	2b04      	cmp	r3, #4
 801f444:	dde4      	ble.n	801f410 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 801f446:	2200      	movs	r2, #0
 801f448:	2120      	movs	r1, #32
 801f44a:	4808      	ldr	r0, [pc, #32]	; (801f46c <init_done+0x68>)
 801f44c:	f7fb f98c 	bl	801a768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 801f450:	2200      	movs	r2, #0
 801f452:	2101      	movs	r1, #1
 801f454:	4805      	ldr	r0, [pc, #20]	; (801f46c <init_done+0x68>)
 801f456:	f7fb f987 	bl	801a768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 801f45a:	2200      	movs	r2, #0
 801f45c:	2102      	movs	r1, #2
 801f45e:	4803      	ldr	r0, [pc, #12]	; (801f46c <init_done+0x68>)
 801f460:	f7fb f982 	bl	801a768 <HAL_GPIO_WritePin>
}
 801f464:	bf00      	nop
 801f466:	3708      	adds	r7, #8
 801f468:	46bd      	mov	sp, r7
 801f46a:	bd80      	pop	{r7, pc}
 801f46c:	48000400 	.word	0x48000400

0801f470 <formate_json_tof>:

static char* formate_json_tof(int id, int value)
{
 801f470:	b580      	push	{r7, lr}
 801f472:	b086      	sub	sp, #24
 801f474:	af00      	add	r7, sp, #0
 801f476:	6078      	str	r0, [r7, #4]
 801f478:	6039      	str	r1, [r7, #0]
	JSON_Value *val = json_value_init_object();
 801f47a:	f7e5 f8e1 	bl	8004640 <json_value_init_object>
 801f47e:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801f480:	697b      	ldr	r3, [r7, #20]
 801f482:	2b00      	cmp	r3, #0
 801f484:	d101      	bne.n	801f48a <formate_json_tof+0x1a>
		return NULL;
 801f486:	2300      	movs	r3, #0
 801f488:	e049      	b.n	801f51e <formate_json_tof+0xae>

	JSON_Object *obj = json_value_get_object(val);
 801f48a:	6978      	ldr	r0, [r7, #20]
 801f48c:	f7e5 f820 	bl	80044d0 <json_value_get_object>
 801f490:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801f492:	693b      	ldr	r3, [r7, #16]
 801f494:	2b00      	cmp	r3, #0
 801f496:	d101      	bne.n	801f49c <formate_json_tof+0x2c>
		return NULL;
 801f498:	2300      	movs	r3, #0
 801f49a:	e040      	b.n	801f51e <formate_json_tof+0xae>

	if(id == 0){
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d10f      	bne.n	801f4c2 <formate_json_tof+0x52>
		if(json_object_set_number(obj, "tof_left", value) != JSONSuccess)
 801f4a2:	6838      	ldr	r0, [r7, #0]
 801f4a4:	f7e1 f816 	bl	80004d4 <__aeabi_i2d>
 801f4a8:	4602      	mov	r2, r0
 801f4aa:	460b      	mov	r3, r1
 801f4ac:	ec43 2b10 	vmov	d0, r2, r3
 801f4b0:	491d      	ldr	r1, [pc, #116]	; (801f528 <formate_json_tof+0xb8>)
 801f4b2:	6938      	ldr	r0, [r7, #16]
 801f4b4:	f7e5 fa82 	bl	80049bc <json_object_set_number>
 801f4b8:	4603      	mov	r3, r0
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d001      	beq.n	801f4c2 <formate_json_tof+0x52>
			return NULL;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	e02d      	b.n	801f51e <formate_json_tof+0xae>
	}
	if(id == 1){
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	2b01      	cmp	r3, #1
 801f4c6:	d10f      	bne.n	801f4e8 <formate_json_tof+0x78>
		if(json_object_set_number(obj, "tof_center", value) != JSONSuccess)
 801f4c8:	6838      	ldr	r0, [r7, #0]
 801f4ca:	f7e1 f803 	bl	80004d4 <__aeabi_i2d>
 801f4ce:	4602      	mov	r2, r0
 801f4d0:	460b      	mov	r3, r1
 801f4d2:	ec43 2b10 	vmov	d0, r2, r3
 801f4d6:	4915      	ldr	r1, [pc, #84]	; (801f52c <formate_json_tof+0xbc>)
 801f4d8:	6938      	ldr	r0, [r7, #16]
 801f4da:	f7e5 fa6f 	bl	80049bc <json_object_set_number>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d001      	beq.n	801f4e8 <formate_json_tof+0x78>
			return NULL;
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	e01a      	b.n	801f51e <formate_json_tof+0xae>
	}
	if(id == 2){
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	2b02      	cmp	r3, #2
 801f4ec:	d10f      	bne.n	801f50e <formate_json_tof+0x9e>
		if(json_object_set_number(obj, "tof_right", value) != JSONSuccess)
 801f4ee:	6838      	ldr	r0, [r7, #0]
 801f4f0:	f7e0 fff0 	bl	80004d4 <__aeabi_i2d>
 801f4f4:	4602      	mov	r2, r0
 801f4f6:	460b      	mov	r3, r1
 801f4f8:	ec43 2b10 	vmov	d0, r2, r3
 801f4fc:	490c      	ldr	r1, [pc, #48]	; (801f530 <formate_json_tof+0xc0>)
 801f4fe:	6938      	ldr	r0, [r7, #16]
 801f500:	f7e5 fa5c 	bl	80049bc <json_object_set_number>
 801f504:	4603      	mov	r3, r0
 801f506:	2b00      	cmp	r3, #0
 801f508:	d001      	beq.n	801f50e <formate_json_tof+0x9e>
			return NULL;
 801f50a:	2300      	movs	r3, #0
 801f50c:	e007      	b.n	801f51e <formate_json_tof+0xae>
	}

	char* serialized_string = json_serialize_to_string(val);
 801f50e:	6978      	ldr	r0, [r7, #20]
 801f510:	f7e5 f958 	bl	80047c4 <json_serialize_to_string>
 801f514:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801f516:	6978      	ldr	r0, [r7, #20]
 801f518:	f7e5 f864 	bl	80045e4 <json_value_free>

	return serialized_string;
 801f51c:	68fb      	ldr	r3, [r7, #12]
}
 801f51e:	4618      	mov	r0, r3
 801f520:	3718      	adds	r7, #24
 801f522:	46bd      	mov	sp, r7
 801f524:	bd80      	pop	{r7, pc}
 801f526:	bf00      	nop
 801f528:	08028608 	.word	0x08028608
 801f52c:	08028614 	.word	0x08028614
 801f530:	08028620 	.word	0x08028620

0801f534 <wifi_init>:
	json_value_free(val);

	return serialized_string;
}

void wifi_init(){
 801f534:	b580      	push	{r7, lr}
 801f536:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 801f538:	f000 fb1c 	bl	801fb74 <esp8266_SetupIP>
 801f53c:	4603      	mov	r3, r0
 801f53e:	2b01      	cmp	r3, #1
 801f540:	d006      	beq.n	801f550 <wifi_init+0x1c>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 801f542:	4808      	ldr	r0, [pc, #32]	; (801f564 <wifi_init+0x30>)
 801f544:	f006 fd8c 	bl	8026060 <puts>
	  {
		  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
	  }
	  init_done();
  }
}
 801f548:	e009      	b.n	801f55e <wifi_init+0x2a>
		  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 801f54a:	4807      	ldr	r0, [pc, #28]	; (801f568 <wifi_init+0x34>)
 801f54c:	f006 fd88 	bl	8026060 <puts>
	  while(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 801f550:	f000 fdd2 	bl	80200f8 <esp8266_SetupConnect_BrokerMQTT>
 801f554:	4603      	mov	r3, r0
 801f556:	2b01      	cmp	r3, #1
 801f558:	d1f7      	bne.n	801f54a <wifi_init+0x16>
	  init_done();
 801f55a:	f7ff ff53 	bl	801f404 <init_done>
}
 801f55e:	bf00      	nop
 801f560:	bd80      	pop	{r7, pc}
 801f562:	bf00      	nop
 801f564:	08028634 	.word	0x08028634
 801f568:	08028670 	.word	0x08028670

0801f56c <wifi_process>:
void wifi_process(){
 801f56c:	b580      	push	{r7, lr}
 801f56e:	af00      	add	r7, sp, #0
	// app part
	//subscribe to the necessary subscriptions
	  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 801f570:	f000 ff8c 	bl	802048c <get_mqtt_state>
 801f574:	4603      	mov	r3, r0
 801f576:	2b07      	cmp	r3, #7
 801f578:	d807      	bhi.n	801f58a <wifi_process+0x1e>
	  {
		  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 801f57a:	f000 fe27 	bl	80201cc <esp8266_Subscribe_Temp_BrokerMQTT>
 801f57e:	4603      	mov	r3, r0
 801f580:	2b08      	cmp	r3, #8
 801f582:	d002      	beq.n	801f58a <wifi_process+0x1e>
			printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 801f584:	4809      	ldr	r0, [pc, #36]	; (801f5ac <wifi_process+0x40>)
 801f586:	f006 fd6b 	bl	8026060 <puts>
	  }
	 if(get_mqtt_state() < _SUBSCRIBED_TOF_MQTT)
 801f58a:	f000 ff7f 	bl	802048c <get_mqtt_state>
 801f58e:	4603      	mov	r3, r0
 801f590:	2b08      	cmp	r3, #8
 801f592:	d807      	bhi.n	801f5a4 <wifi_process+0x38>
	  {
		  if(esp8266_Subscribe_ToF_BrokerMQTT() != _SUBSCRIBED_TOF_MQTT)
 801f594:	f000 fe6e 	bl	8020274 <esp8266_Subscribe_ToF_BrokerMQTT>
 801f598:	4603      	mov	r3, r0
 801f59a:	2b09      	cmp	r3, #9
 801f59c:	d002      	beq.n	801f5a4 <wifi_process+0x38>
			printf("APP: esp8266_Subscribe_ToF_BrokerMQTT() failed\n");
 801f59e:	4804      	ldr	r0, [pc, #16]	; (801f5b0 <wifi_process+0x44>)
 801f5a0:	f006 fd5e 	bl	8026060 <puts>
	  }

	 Send_Tof();
 801f5a4:	f000 f806 	bl	801f5b4 <Send_Tof>

}
 801f5a8:	bf00      	nop
 801f5aa:	bd80      	pop	{r7, pc}
 801f5ac:	080286b4 	.word	0x080286b4
 801f5b0:	080286e4 	.word	0x080286e4

0801f5b4 <Send_Tof>:
//send tof data when necessary
void Send_Tof()
{
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	b086      	sub	sp, #24
 801f5b8:	af00      	add	r7, sp, #0
	//check sending left tof data
	 if(LeftPos == 1 && AlreadyLeftPos == 1){
 801f5ba:	4b74      	ldr	r3, [pc, #464]	; (801f78c <Send_Tof+0x1d8>)
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	2b01      	cmp	r3, #1
 801f5c0:	d120      	bne.n	801f604 <Send_Tof+0x50>
 801f5c2:	4b73      	ldr	r3, [pc, #460]	; (801f790 <Send_Tof+0x1dc>)
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	2b01      	cmp	r3, #1
 801f5c8:	d11c      	bne.n	801f604 <Send_Tof+0x50>
		 char *data = formate_json_tof(0,1);
 801f5ca:	2101      	movs	r1, #1
 801f5cc:	2000      	movs	r0, #0
 801f5ce:	f7ff ff4f 	bl	801f470 <formate_json_tof>
 801f5d2:	6178      	str	r0, [r7, #20]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f5d4:	6978      	ldr	r0, [r7, #20]
 801f5d6:	f7e0 fdd3 	bl	8000180 <strlen>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	4619      	mov	r1, r3
 801f5de:	6978      	ldr	r0, [r7, #20]
 801f5e0:	f000 fef8 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	2b0b      	cmp	r3, #11
 801f5e8:	d002      	beq.n	801f5f0 <Send_Tof+0x3c>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f5ea:	486a      	ldr	r0, [pc, #424]	; (801f794 <Send_Tof+0x1e0>)
 801f5ec:	f006 fd38 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f5f0:	6978      	ldr	r0, [r7, #20]
 801f5f2:	f7e5 f919 	bl	8004828 <json_free_serialized_string>
		 LeftPos = 2;
 801f5f6:	4b65      	ldr	r3, [pc, #404]	; (801f78c <Send_Tof+0x1d8>)
 801f5f8:	2202      	movs	r2, #2
 801f5fa:	601a      	str	r2, [r3, #0]
		 AlreadyLeftPos = 0;
 801f5fc:	4b64      	ldr	r3, [pc, #400]	; (801f790 <Send_Tof+0x1dc>)
 801f5fe:	2200      	movs	r2, #0
 801f600:	601a      	str	r2, [r3, #0]
	 if(LeftPos == 1 && AlreadyLeftPos == 1){
 801f602:	e027      	b.n	801f654 <Send_Tof+0xa0>
	 } else if (LeftPos == 0 && AlreadyLeftPos == 0){
 801f604:	4b61      	ldr	r3, [pc, #388]	; (801f78c <Send_Tof+0x1d8>)
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d120      	bne.n	801f64e <Send_Tof+0x9a>
 801f60c:	4b60      	ldr	r3, [pc, #384]	; (801f790 <Send_Tof+0x1dc>)
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	2b00      	cmp	r3, #0
 801f612:	d11c      	bne.n	801f64e <Send_Tof+0x9a>
		 char *data = formate_json_tof(0,0);
 801f614:	2100      	movs	r1, #0
 801f616:	2000      	movs	r0, #0
 801f618:	f7ff ff2a 	bl	801f470 <formate_json_tof>
 801f61c:	6138      	str	r0, [r7, #16]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f61e:	6938      	ldr	r0, [r7, #16]
 801f620:	f7e0 fdae 	bl	8000180 <strlen>
 801f624:	4603      	mov	r3, r0
 801f626:	4619      	mov	r1, r3
 801f628:	6938      	ldr	r0, [r7, #16]
 801f62a:	f000 fed3 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f62e:	4603      	mov	r3, r0
 801f630:	2b0b      	cmp	r3, #11
 801f632:	d002      	beq.n	801f63a <Send_Tof+0x86>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f634:	4857      	ldr	r0, [pc, #348]	; (801f794 <Send_Tof+0x1e0>)
 801f636:	f006 fd13 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f63a:	6938      	ldr	r0, [r7, #16]
 801f63c:	f7e5 f8f4 	bl	8004828 <json_free_serialized_string>
		  LeftPos = 3 ;
 801f640:	4b52      	ldr	r3, [pc, #328]	; (801f78c <Send_Tof+0x1d8>)
 801f642:	2203      	movs	r2, #3
 801f644:	601a      	str	r2, [r3, #0]
		  AlreadyLeftPos = 1 ;
 801f646:	4b52      	ldr	r3, [pc, #328]	; (801f790 <Send_Tof+0x1dc>)
 801f648:	2201      	movs	r2, #1
 801f64a:	601a      	str	r2, [r3, #0]
	 } else if (LeftPos == 0 && AlreadyLeftPos == 0){
 801f64c:	e002      	b.n	801f654 <Send_Tof+0xa0>
	 } else {
		 printf("left postion nothing to publish\n");
 801f64e:	4852      	ldr	r0, [pc, #328]	; (801f798 <Send_Tof+0x1e4>)
 801f650:	f006 fd06 	bl	8026060 <puts>
	 }

	 //check sending center tof data
	 if(CenterPos == 1 && AlreadyCenterPos == 1 ){
 801f654:	4b51      	ldr	r3, [pc, #324]	; (801f79c <Send_Tof+0x1e8>)
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	2b01      	cmp	r3, #1
 801f65a:	d120      	bne.n	801f69e <Send_Tof+0xea>
 801f65c:	4b50      	ldr	r3, [pc, #320]	; (801f7a0 <Send_Tof+0x1ec>)
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	2b01      	cmp	r3, #1
 801f662:	d11c      	bne.n	801f69e <Send_Tof+0xea>
		 char *data = formate_json_tof(1,1);
 801f664:	2101      	movs	r1, #1
 801f666:	2001      	movs	r0, #1
 801f668:	f7ff ff02 	bl	801f470 <formate_json_tof>
 801f66c:	60f8      	str	r0, [r7, #12]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f66e:	68f8      	ldr	r0, [r7, #12]
 801f670:	f7e0 fd86 	bl	8000180 <strlen>
 801f674:	4603      	mov	r3, r0
 801f676:	4619      	mov	r1, r3
 801f678:	68f8      	ldr	r0, [r7, #12]
 801f67a:	f000 feab 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f67e:	4603      	mov	r3, r0
 801f680:	2b0b      	cmp	r3, #11
 801f682:	d002      	beq.n	801f68a <Send_Tof+0xd6>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f684:	4843      	ldr	r0, [pc, #268]	; (801f794 <Send_Tof+0x1e0>)
 801f686:	f006 fceb 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f68a:	68f8      	ldr	r0, [r7, #12]
 801f68c:	f7e5 f8cc 	bl	8004828 <json_free_serialized_string>
		 CenterPos = 2;
 801f690:	4b42      	ldr	r3, [pc, #264]	; (801f79c <Send_Tof+0x1e8>)
 801f692:	2202      	movs	r2, #2
 801f694:	601a      	str	r2, [r3, #0]
		 AlreadyCenterPos = 0;
 801f696:	4b42      	ldr	r3, [pc, #264]	; (801f7a0 <Send_Tof+0x1ec>)
 801f698:	2200      	movs	r2, #0
 801f69a:	601a      	str	r2, [r3, #0]
	 if(CenterPos == 1 && AlreadyCenterPos == 1 ){
 801f69c:	e027      	b.n	801f6ee <Send_Tof+0x13a>
	 } else if (CenterPos == 0 && AlreadyCenterPos == 0){
 801f69e:	4b3f      	ldr	r3, [pc, #252]	; (801f79c <Send_Tof+0x1e8>)
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d120      	bne.n	801f6e8 <Send_Tof+0x134>
 801f6a6:	4b3e      	ldr	r3, [pc, #248]	; (801f7a0 <Send_Tof+0x1ec>)
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d11c      	bne.n	801f6e8 <Send_Tof+0x134>
		 char *data = formate_json_tof(1,0);
 801f6ae:	2100      	movs	r1, #0
 801f6b0:	2001      	movs	r0, #1
 801f6b2:	f7ff fedd 	bl	801f470 <formate_json_tof>
 801f6b6:	60b8      	str	r0, [r7, #8]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f6b8:	68b8      	ldr	r0, [r7, #8]
 801f6ba:	f7e0 fd61 	bl	8000180 <strlen>
 801f6be:	4603      	mov	r3, r0
 801f6c0:	4619      	mov	r1, r3
 801f6c2:	68b8      	ldr	r0, [r7, #8]
 801f6c4:	f000 fe86 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f6c8:	4603      	mov	r3, r0
 801f6ca:	2b0b      	cmp	r3, #11
 801f6cc:	d002      	beq.n	801f6d4 <Send_Tof+0x120>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f6ce:	4831      	ldr	r0, [pc, #196]	; (801f794 <Send_Tof+0x1e0>)
 801f6d0:	f006 fcc6 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f6d4:	68b8      	ldr	r0, [r7, #8]
 801f6d6:	f7e5 f8a7 	bl	8004828 <json_free_serialized_string>
		  CenterPos = 3 ;
 801f6da:	4b30      	ldr	r3, [pc, #192]	; (801f79c <Send_Tof+0x1e8>)
 801f6dc:	2203      	movs	r2, #3
 801f6de:	601a      	str	r2, [r3, #0]
		  AlreadyCenterPos = 1 ;
 801f6e0:	4b2f      	ldr	r3, [pc, #188]	; (801f7a0 <Send_Tof+0x1ec>)
 801f6e2:	2201      	movs	r2, #1
 801f6e4:	601a      	str	r2, [r3, #0]
	 } else if (CenterPos == 0 && AlreadyCenterPos == 0){
 801f6e6:	e002      	b.n	801f6ee <Send_Tof+0x13a>
	 } else {
		 printf("center postion nothing to publish\n");
 801f6e8:	482e      	ldr	r0, [pc, #184]	; (801f7a4 <Send_Tof+0x1f0>)
 801f6ea:	f006 fcb9 	bl	8026060 <puts>
	 }

	 //check sending right tof data
	 if(RightPos == 1 && AlreadyRightPos == 1){
 801f6ee:	4b2e      	ldr	r3, [pc, #184]	; (801f7a8 <Send_Tof+0x1f4>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	2b01      	cmp	r3, #1
 801f6f4:	d120      	bne.n	801f738 <Send_Tof+0x184>
 801f6f6:	4b2d      	ldr	r3, [pc, #180]	; (801f7ac <Send_Tof+0x1f8>)
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	2b01      	cmp	r3, #1
 801f6fc:	d11c      	bne.n	801f738 <Send_Tof+0x184>
		 char *data = formate_json_tof(2,1);
 801f6fe:	2101      	movs	r1, #1
 801f700:	2002      	movs	r0, #2
 801f702:	f7ff feb5 	bl	801f470 <formate_json_tof>
 801f706:	6078      	str	r0, [r7, #4]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f708:	6878      	ldr	r0, [r7, #4]
 801f70a:	f7e0 fd39 	bl	8000180 <strlen>
 801f70e:	4603      	mov	r3, r0
 801f710:	4619      	mov	r1, r3
 801f712:	6878      	ldr	r0, [r7, #4]
 801f714:	f000 fe5e 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f718:	4603      	mov	r3, r0
 801f71a:	2b0b      	cmp	r3, #11
 801f71c:	d002      	beq.n	801f724 <Send_Tof+0x170>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f71e:	481d      	ldr	r0, [pc, #116]	; (801f794 <Send_Tof+0x1e0>)
 801f720:	f006 fc9e 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f724:	6878      	ldr	r0, [r7, #4]
 801f726:	f7e5 f87f 	bl	8004828 <json_free_serialized_string>
		 RightPos = 2;
 801f72a:	4b1f      	ldr	r3, [pc, #124]	; (801f7a8 <Send_Tof+0x1f4>)
 801f72c:	2202      	movs	r2, #2
 801f72e:	601a      	str	r2, [r3, #0]
		 AlreadyRightPos = 0;
 801f730:	4b1e      	ldr	r3, [pc, #120]	; (801f7ac <Send_Tof+0x1f8>)
 801f732:	2200      	movs	r2, #0
 801f734:	601a      	str	r2, [r3, #0]
	 if(RightPos == 1 && AlreadyRightPos == 1){
 801f736:	e025      	b.n	801f784 <Send_Tof+0x1d0>
	 } else if (RightPos == 0 && AlreadyRightPos == 0){
 801f738:	4b1b      	ldr	r3, [pc, #108]	; (801f7a8 <Send_Tof+0x1f4>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d11d      	bne.n	801f77c <Send_Tof+0x1c8>
 801f740:	4b1a      	ldr	r3, [pc, #104]	; (801f7ac <Send_Tof+0x1f8>)
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	2b00      	cmp	r3, #0
 801f746:	d119      	bne.n	801f77c <Send_Tof+0x1c8>
		 char *data = formate_json_tof(2,0);
 801f748:	2100      	movs	r1, #0
 801f74a:	2002      	movs	r0, #2
 801f74c:	f7ff fe90 	bl	801f470 <formate_json_tof>
 801f750:	6038      	str	r0, [r7, #0]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801f752:	6838      	ldr	r0, [r7, #0]
 801f754:	f7e0 fd14 	bl	8000180 <strlen>
 801f758:	4603      	mov	r3, r0
 801f75a:	4619      	mov	r1, r3
 801f75c:	6838      	ldr	r0, [r7, #0]
 801f75e:	f000 fe39 	bl	80203d4 <esp8266_Publish_ToF_BrokerMQTT>
 801f762:	4603      	mov	r3, r0
 801f764:	2b0b      	cmp	r3, #11
 801f766:	d002      	beq.n	801f76e <Send_Tof+0x1ba>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801f768:	480a      	ldr	r0, [pc, #40]	; (801f794 <Send_Tof+0x1e0>)
 801f76a:	f006 fc79 	bl	8026060 <puts>
		  json_free_serialized_string(data);
 801f76e:	6838      	ldr	r0, [r7, #0]
 801f770:	f7e5 f85a 	bl	8004828 <json_free_serialized_string>
		  AlreadyRightPos = 1 ;
 801f774:	4b0d      	ldr	r3, [pc, #52]	; (801f7ac <Send_Tof+0x1f8>)
 801f776:	2201      	movs	r2, #1
 801f778:	601a      	str	r2, [r3, #0]
	 } else if (RightPos == 0 && AlreadyRightPos == 0){
 801f77a:	e003      	b.n	801f784 <Send_Tof+0x1d0>
	 } else {
		 printf("right postion nothing to publish\n");
 801f77c:	480c      	ldr	r0, [pc, #48]	; (801f7b0 <Send_Tof+0x1fc>)
 801f77e:	f006 fc6f 	bl	8026060 <puts>
	 }
}
 801f782:	bf00      	nop
 801f784:	bf00      	nop
 801f786:	3718      	adds	r7, #24
 801f788:	46bd      	mov	sp, r7
 801f78a:	bd80      	pop	{r7, pc}
 801f78c:	20000cac 	.word	0x20000cac
 801f790:	20000cb8 	.word	0x20000cb8
 801f794:	08028714 	.word	0x08028714
 801f798:	08028744 	.word	0x08028744
 801f79c:	20000cb4 	.word	0x20000cb4
 801f7a0:	20000cc0 	.word	0x20000cc0
 801f7a4:	08028764 	.word	0x08028764
 801f7a8:	20000cb0 	.word	0x20000cb0
 801f7ac:	20000cbc 	.word	0x20000cbc
 801f7b0:	08028788 	.word	0x08028788

0801f7b4 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 801f7b4:	b40f      	push	{r0, r1, r2, r3}
 801f7b6:	b580      	push	{r7, lr}
 801f7b8:	b082      	sub	sp, #8
 801f7ba:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 801f7bc:	f107 0314 	add.w	r3, r7, #20
 801f7c0:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 801f7c2:	683a      	ldr	r2, [r7, #0]
 801f7c4:	6939      	ldr	r1, [r7, #16]
 801f7c6:	4822      	ldr	r0, [pc, #136]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f7c8:	f006 fd3a 	bl	8026240 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	80fb      	strh	r3, [r7, #6]
 801f7d0:	e019      	b.n	801f806 <uart_esp32_transmit+0x52>
		j = i + 1;
 801f7d2:	88fb      	ldrh	r3, [r7, #6]
 801f7d4:	3301      	adds	r3, #1
 801f7d6:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 801f7d8:	88fb      	ldrh	r3, [r7, #6]
 801f7da:	4a1d      	ldr	r2, [pc, #116]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f7dc:	5cd3      	ldrb	r3, [r2, r3]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d10e      	bne.n	801f800 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801f7e2:	e009      	b.n	801f7f8 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 801f7e4:	88ba      	ldrh	r2, [r7, #4]
 801f7e6:	88bb      	ldrh	r3, [r7, #4]
 801f7e8:	3b01      	subs	r3, #1
 801f7ea:	4919      	ldr	r1, [pc, #100]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f7ec:	5c89      	ldrb	r1, [r1, r2]
 801f7ee:	4a18      	ldr	r2, [pc, #96]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f7f0:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801f7f2:	88bb      	ldrh	r3, [r7, #4]
 801f7f4:	3301      	adds	r3, #1
 801f7f6:	80bb      	strh	r3, [r7, #4]
 801f7f8:	88bb      	ldrh	r3, [r7, #4]
 801f7fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f7fe:	d3f1      	bcc.n	801f7e4 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801f800:	88fb      	ldrh	r3, [r7, #6]
 801f802:	3301      	adds	r3, #1
 801f804:	80fb      	strh	r3, [r7, #6]
 801f806:	88fb      	ldrh	r3, [r7, #6]
 801f808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f80c:	d3e1      	bcc.n	801f7d2 <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 801f80e:	4810      	ldr	r0, [pc, #64]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f810:	f7e0 fcb6 	bl	8000180 <strlen>
 801f814:	4603      	mov	r3, r0
 801f816:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 801f818:	88fa      	ldrh	r2, [r7, #6]
 801f81a:	2364      	movs	r3, #100	; 0x64
 801f81c:	490c      	ldr	r1, [pc, #48]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f81e:	480d      	ldr	r0, [pc, #52]	; (801f854 <uart_esp32_transmit+0xa0>)
 801f820:	f7fe fa16 	bl	801dc50 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 801f824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f828:	2100      	movs	r1, #0
 801f82a:	4809      	ldr	r0, [pc, #36]	; (801f850 <uart_esp32_transmit+0x9c>)
 801f82c:	f005 fe2a 	bl	8025484 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801f830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f834:	2100      	movs	r1, #0
 801f836:	4808      	ldr	r0, [pc, #32]	; (801f858 <uart_esp32_transmit+0xa4>)
 801f838:	f005 fe24 	bl	8025484 <memset>
	UART_ESP32_RecvEndFlag = 0;
 801f83c:	4b07      	ldr	r3, [pc, #28]	; (801f85c <uart_esp32_transmit+0xa8>)
 801f83e:	2200      	movs	r2, #0
 801f840:	701a      	strb	r2, [r3, #0]
}
 801f842:	bf00      	nop
 801f844:	3708      	adds	r7, #8
 801f846:	46bd      	mov	sp, r7
 801f848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801f84c:	b004      	add	sp, #16
 801f84e:	4770      	bx	lr
 801f850:	200093cc 	.word	0x200093cc
 801f854:	20000d48 	.word	0x20000d48
 801f858:	20009bcc 	.word	0x20009bcc
 801f85c:	2000a3cd 	.word	0x2000a3cd

0801f860 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 801f860:	b580      	push	{r7, lr}
 801f862:	b082      	sub	sp, #8
 801f864:	af00      	add	r7, sp, #0
 801f866:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 801f868:	4910      	ldr	r1, [pc, #64]	; (801f8ac <esp8266_CheckRespond+0x4c>)
 801f86a:	4811      	ldr	r0, [pc, #68]	; (801f8b0 <esp8266_CheckRespond+0x50>)
 801f86c:	f006 fb5c 	bl	8025f28 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 801f870:	6879      	ldr	r1, [r7, #4]
 801f872:	480e      	ldr	r0, [pc, #56]	; (801f8ac <esp8266_CheckRespond+0x4c>)
 801f874:	f006 fcb7 	bl	80261e6 <strstr>
 801f878:	4603      	mov	r3, r0
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d00a      	beq.n	801f894 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 801f87e:	480d      	ldr	r0, [pc, #52]	; (801f8b4 <esp8266_CheckRespond+0x54>)
 801f880:	f006 fbee 	bl	8026060 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801f884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f888:	2100      	movs	r1, #0
 801f88a:	4808      	ldr	r0, [pc, #32]	; (801f8ac <esp8266_CheckRespond+0x4c>)
 801f88c:	f005 fdfa 	bl	8025484 <memset>
		return _MATCHOK;
 801f890:	2304      	movs	r3, #4
 801f892:	e006      	b.n	801f8a2 <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801f894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f898:	2100      	movs	r1, #0
 801f89a:	4804      	ldr	r0, [pc, #16]	; (801f8ac <esp8266_CheckRespond+0x4c>)
 801f89c:	f005 fdf2 	bl	8025484 <memset>
	return _MATCHERROR;
 801f8a0:	2303      	movs	r3, #3
}
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	3708      	adds	r7, #8
 801f8a6:	46bd      	mov	sp, r7
 801f8a8:	bd80      	pop	{r7, pc}
 801f8aa:	bf00      	nop
 801f8ac:	20009bcc 	.word	0x20009bcc
 801f8b0:	080287ac 	.word	0x080287ac
 801f8b4:	080287c0 	.word	0x080287c0

0801f8b8 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 801f8b8:	b580      	push	{r7, lr}
 801f8ba:	b086      	sub	sp, #24
 801f8bc:	af00      	add	r7, sp, #0
 801f8be:	60f8      	str	r0, [r7, #12]
 801f8c0:	60b9      	str	r1, [r7, #8]
 801f8c2:	607a      	str	r2, [r7, #4]
 801f8c4:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801f8ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f8d2:	2100      	movs	r1, #0
 801f8d4:	4826      	ldr	r0, [pc, #152]	; (801f970 <esp8266_TransmitCmd+0xb8>)
 801f8d6:	f005 fdd5 	bl	8025484 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 801f8da:	68f9      	ldr	r1, [r7, #12]
 801f8dc:	4825      	ldr	r0, [pc, #148]	; (801f974 <esp8266_TransmitCmd+0xbc>)
 801f8de:	f006 fb23 	bl	8025f28 <iprintf>
	if (newline == 0)
 801f8e2:	78fb      	ldrb	r3, [r7, #3]
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d104      	bne.n	801f8f2 <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 801f8e8:	68f9      	ldr	r1, [r7, #12]
 801f8ea:	4823      	ldr	r0, [pc, #140]	; (801f978 <esp8266_TransmitCmd+0xc0>)
 801f8ec:	f7ff ff62 	bl	801f7b4 <uart_esp32_transmit>
 801f8f0:	e01e      	b.n	801f930 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 801f8f2:	68f9      	ldr	r1, [r7, #12]
 801f8f4:	4821      	ldr	r0, [pc, #132]	; (801f97c <esp8266_TransmitCmd+0xc4>)
 801f8f6:	f7ff ff5d 	bl	801f7b4 <uart_esp32_transmit>

	while (timeout--) {
 801f8fa:	e019      	b.n	801f930 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 801f8fc:	4b20      	ldr	r3, [pc, #128]	; (801f980 <esp8266_TransmitCmd+0xc8>)
 801f8fe:	781b      	ldrb	r3, [r3, #0]
 801f900:	b2db      	uxtb	r3, r3
 801f902:	2b01      	cmp	r3, #1
 801f904:	d111      	bne.n	801f92a <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 801f906:	68b8      	ldr	r0, [r7, #8]
 801f908:	f7ff ffaa 	bl	801f860 <esp8266_CheckRespond>
 801f90c:	4603      	mov	r3, r0
 801f90e:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 801f910:	4b1c      	ldr	r3, [pc, #112]	; (801f984 <esp8266_TransmitCmd+0xcc>)
 801f912:	2200      	movs	r2, #0
 801f914:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801f916:	4b1a      	ldr	r3, [pc, #104]	; (801f980 <esp8266_TransmitCmd+0xc8>)
 801f918:	2200      	movs	r2, #0
 801f91a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801f91c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f920:	4913      	ldr	r1, [pc, #76]	; (801f970 <esp8266_TransmitCmd+0xb8>)
 801f922:	4819      	ldr	r0, [pc, #100]	; (801f988 <esp8266_TransmitCmd+0xd0>)
 801f924:	f7fe fa22 	bl	801dd6c <HAL_UART_Receive_DMA>

			break;
 801f928:	e007      	b.n	801f93a <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 801f92a:	2001      	movs	r0, #1
 801f92c:	f7e1 ff4e 	bl	80017cc <HAL_Delay>
	while (timeout--) {
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	1e5a      	subs	r2, r3, #1
 801f934:	617a      	str	r2, [r7, #20]
 801f936:	2b00      	cmp	r3, #0
 801f938:	d1e0      	bne.n	801f8fc <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 801f93a:	7cfb      	ldrb	r3, [r7, #19]
 801f93c:	2b03      	cmp	r3, #3
 801f93e:	d104      	bne.n	801f94a <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 801f940:	4812      	ldr	r0, [pc, #72]	; (801f98c <esp8266_TransmitCmd+0xd4>)
 801f942:	f006 fb8d 	bl	8026060 <puts>
		return check;
 801f946:	7cfb      	ldrb	r3, [r7, #19]
 801f948:	e00e      	b.n	801f968 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 801f94a:	697b      	ldr	r3, [r7, #20]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dc07      	bgt.n	801f960 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 801f950:	480f      	ldr	r0, [pc, #60]	; (801f990 <esp8266_TransmitCmd+0xd8>)
 801f952:	f006 fb85 	bl	8026060 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801f956:	480f      	ldr	r0, [pc, #60]	; (801f994 <esp8266_TransmitCmd+0xdc>)
 801f958:	f006 fb82 	bl	8026060 <puts>
		return _TIMEOUT;
 801f95c:	2302      	movs	r3, #2
 801f95e:	e003      	b.n	801f968 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 801f960:	480d      	ldr	r0, [pc, #52]	; (801f998 <esp8266_TransmitCmd+0xe0>)
 801f962:	f006 fb7d 	bl	8026060 <puts>
	return _SUCCEED;
 801f966:	2301      	movs	r3, #1
}
 801f968:	4618      	mov	r0, r3
 801f96a:	3718      	adds	r7, #24
 801f96c:	46bd      	mov	sp, r7
 801f96e:	bd80      	pop	{r7, pc}
 801f970:	20009bcc 	.word	0x20009bcc
 801f974:	080287d8 	.word	0x080287d8
 801f978:	080287f8 	.word	0x080287f8
 801f97c:	080287fc 	.word	0x080287fc
 801f980:	2000a3cd 	.word	0x2000a3cd
 801f984:	2000a3cc 	.word	0x2000a3cc
 801f988:	20000d48 	.word	0x20000d48
 801f98c:	08028804 	.word	0x08028804
 801f990:	08028820 	.word	0x08028820
 801f994:	08028838 	.word	0x08028838
 801f998:	0802884c 	.word	0x0802884c

0801f99c <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b084      	sub	sp, #16
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 801f9a8:	2200      	movs	r2, #0
 801f9aa:	2108      	movs	r1, #8
 801f9ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801f9b0:	f7fa feda 	bl	801a768 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801f9b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801f9b8:	f7e1 ff08 	bl	80017cc <HAL_Delay>
	WIFI_RST_Disable();
 801f9bc:	2201      	movs	r2, #1
 801f9be:	2108      	movs	r1, #8
 801f9c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801f9c4:	f7fa fed0 	bl	801a768 <HAL_GPIO_WritePin>
	while (timeout--) {
 801f9c8:	e01b      	b.n	801fa02 <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 801f9ca:	4b18      	ldr	r3, [pc, #96]	; (801fa2c <esp8266_HardwareReset+0x90>)
 801f9cc:	781b      	ldrb	r3, [r3, #0]
 801f9ce:	b2db      	uxtb	r3, r3
 801f9d0:	2b01      	cmp	r3, #1
 801f9d2:	d113      	bne.n	801f9fc <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 801f9d4:	4816      	ldr	r0, [pc, #88]	; (801fa30 <esp8266_HardwareReset+0x94>)
 801f9d6:	f006 fb43 	bl	8026060 <puts>
			HAL_Delay(100);
 801f9da:	2064      	movs	r0, #100	; 0x64
 801f9dc:	f7e1 fef6 	bl	80017cc <HAL_Delay>

			UART_ESP32_RxLen = 0;
 801f9e0:	4b14      	ldr	r3, [pc, #80]	; (801fa34 <esp8266_HardwareReset+0x98>)
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801f9e6:	4b11      	ldr	r3, [pc, #68]	; (801fa2c <esp8266_HardwareReset+0x90>)
 801f9e8:	2200      	movs	r2, #0
 801f9ea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801f9ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f9f0:	4911      	ldr	r1, [pc, #68]	; (801fa38 <esp8266_HardwareReset+0x9c>)
 801f9f2:	4812      	ldr	r0, [pc, #72]	; (801fa3c <esp8266_HardwareReset+0xa0>)
 801f9f4:	f7fe f9ba 	bl	801dd6c <HAL_UART_Receive_DMA>

			return _SUCCEED;
 801f9f8:	2301      	movs	r3, #1
 801f9fa:	e013      	b.n	801fa24 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 801f9fc:	2001      	movs	r0, #1
 801f9fe:	f7e1 fee5 	bl	80017cc <HAL_Delay>
	while (timeout--) {
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	1e5a      	subs	r2, r3, #1
 801fa06:	60fa      	str	r2, [r7, #12]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d1de      	bne.n	801f9ca <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	dc07      	bgt.n	801fa22 <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 801fa12:	480b      	ldr	r0, [pc, #44]	; (801fa40 <esp8266_HardwareReset+0xa4>)
 801fa14:	f006 fb24 	bl	8026060 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801fa18:	480a      	ldr	r0, [pc, #40]	; (801fa44 <esp8266_HardwareReset+0xa8>)
 801fa1a:	f006 fb21 	bl	8026060 <puts>
		return _TIMEOUT;
 801fa1e:	2302      	movs	r3, #2
 801fa20:	e000      	b.n	801fa24 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 801fa22:	23ff      	movs	r3, #255	; 0xff
}
 801fa24:	4618      	mov	r0, r3
 801fa26:	3710      	adds	r7, #16
 801fa28:	46bd      	mov	sp, r7
 801fa2a:	bd80      	pop	{r7, pc}
 801fa2c:	2000a3cd 	.word	0x2000a3cd
 801fa30:	0802885c 	.word	0x0802885c
 801fa34:	2000a3cc 	.word	0x2000a3cc
 801fa38:	20009bcc 	.word	0x20009bcc
 801fa3c:	20000d48 	.word	0x20000d48
 801fa40:	08028820 	.word	0x08028820
 801fa44:	08028838 	.word	0x08028838

0801fa48 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 801fa48:	b590      	push	{r4, r7, lr}
 801fa4a:	b085      	sub	sp, #20
 801fa4c:	af00      	add	r7, sp, #0

	memset(AP_SSID, 0, sizeof(char)*30);
 801fa4e:	221e      	movs	r2, #30
 801fa50:	2100      	movs	r1, #0
 801fa52:	483d      	ldr	r0, [pc, #244]	; (801fb48 <esp8266_ConnectAP+0x100>)
 801fa54:	f005 fd16 	bl	8025484 <memset>
	for(int i = 0 ; i < strlen(ssid) ; i++){
 801fa58:	2300      	movs	r3, #0
 801fa5a:	60fb      	str	r3, [r7, #12]
 801fa5c:	e00b      	b.n	801fa76 <esp8266_ConnectAP+0x2e>
		AP_SSID[i] = ssid[i];
 801fa5e:	4a3b      	ldr	r2, [pc, #236]	; (801fb4c <esp8266_ConnectAP+0x104>)
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	4413      	add	r3, r2
 801fa64:	7819      	ldrb	r1, [r3, #0]
 801fa66:	4a38      	ldr	r2, [pc, #224]	; (801fb48 <esp8266_ConnectAP+0x100>)
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	4413      	add	r3, r2
 801fa6c:	460a      	mov	r2, r1
 801fa6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(ssid) ; i++){
 801fa70:	68fb      	ldr	r3, [r7, #12]
 801fa72:	3301      	adds	r3, #1
 801fa74:	60fb      	str	r3, [r7, #12]
 801fa76:	4835      	ldr	r0, [pc, #212]	; (801fb4c <esp8266_ConnectAP+0x104>)
 801fa78:	f7e0 fb82 	bl	8000180 <strlen>
 801fa7c:	4602      	mov	r2, r0
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	429a      	cmp	r2, r3
 801fa82:	d8ec      	bhi.n	801fa5e <esp8266_ConnectAP+0x16>
	}
	printf("(DBG:)  ap_ssid : %s \n",AP_SSID);
 801fa84:	4930      	ldr	r1, [pc, #192]	; (801fb48 <esp8266_ConnectAP+0x100>)
 801fa86:	4832      	ldr	r0, [pc, #200]	; (801fb50 <esp8266_ConnectAP+0x108>)
 801fa88:	f006 fa4e 	bl	8025f28 <iprintf>
	printf("(DBG:)  ble_ssid : %s \n",ssid);
 801fa8c:	492f      	ldr	r1, [pc, #188]	; (801fb4c <esp8266_ConnectAP+0x104>)
 801fa8e:	4831      	ldr	r0, [pc, #196]	; (801fb54 <esp8266_ConnectAP+0x10c>)
 801fa90:	f006 fa4a 	bl	8025f28 <iprintf>
	memset(AP_PSWD, 0, sizeof(char)*30);
 801fa94:	221e      	movs	r2, #30
 801fa96:	2100      	movs	r1, #0
 801fa98:	482f      	ldr	r0, [pc, #188]	; (801fb58 <esp8266_ConnectAP+0x110>)
 801fa9a:	f005 fcf3 	bl	8025484 <memset>
	for(int i = 0 ; i < strlen(password) ; i++){
 801fa9e:	2300      	movs	r3, #0
 801faa0:	60bb      	str	r3, [r7, #8]
 801faa2:	e00b      	b.n	801fabc <esp8266_ConnectAP+0x74>
		AP_PSWD[i] = password[i];
 801faa4:	4a2d      	ldr	r2, [pc, #180]	; (801fb5c <esp8266_ConnectAP+0x114>)
 801faa6:	68bb      	ldr	r3, [r7, #8]
 801faa8:	4413      	add	r3, r2
 801faaa:	7819      	ldrb	r1, [r3, #0]
 801faac:	4a2a      	ldr	r2, [pc, #168]	; (801fb58 <esp8266_ConnectAP+0x110>)
 801faae:	68bb      	ldr	r3, [r7, #8]
 801fab0:	4413      	add	r3, r2
 801fab2:	460a      	mov	r2, r1
 801fab4:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(password) ; i++){
 801fab6:	68bb      	ldr	r3, [r7, #8]
 801fab8:	3301      	adds	r3, #1
 801faba:	60bb      	str	r3, [r7, #8]
 801fabc:	4827      	ldr	r0, [pc, #156]	; (801fb5c <esp8266_ConnectAP+0x114>)
 801fabe:	f7e0 fb5f 	bl	8000180 <strlen>
 801fac2:	4602      	mov	r2, r0
 801fac4:	68bb      	ldr	r3, [r7, #8]
 801fac6:	429a      	cmp	r2, r3
 801fac8:	d8ec      	bhi.n	801faa4 <esp8266_ConnectAP+0x5c>
	}
	printf("(DBG:)  ap_pswd : %s \n",AP_PSWD);
 801faca:	4923      	ldr	r1, [pc, #140]	; (801fb58 <esp8266_ConnectAP+0x110>)
 801facc:	4824      	ldr	r0, [pc, #144]	; (801fb60 <esp8266_ConnectAP+0x118>)
 801face:	f006 fa2b 	bl	8025f28 <iprintf>
	printf("(DBG:)  ble_pswd : %s \n",password);
 801fad2:	4922      	ldr	r1, [pc, #136]	; (801fb5c <esp8266_ConnectAP+0x114>)
 801fad4:	4823      	ldr	r0, [pc, #140]	; (801fb64 <esp8266_ConnectAP+0x11c>)
 801fad6:	f006 fa27 	bl	8025f28 <iprintf>

	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 801fada:	481b      	ldr	r0, [pc, #108]	; (801fb48 <esp8266_ConnectAP+0x100>)
 801fadc:	f7e0 fb50 	bl	8000180 <strlen>
 801fae0:	4603      	mov	r3, r0
 801fae2:	b29c      	uxth	r4, r3
 801fae4:	481c      	ldr	r0, [pc, #112]	; (801fb58 <esp8266_ConnectAP+0x110>)
 801fae6:	f7e0 fb4b 	bl	8000180 <strlen>
 801faea:	4603      	mov	r3, r0
 801faec:	b29b      	uxth	r3, r3
 801faee:	4423      	add	r3, r4
 801faf0:	b29b      	uxth	r3, r3
 801faf2:	331e      	adds	r3, #30
 801faf4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801faf6:	88fb      	ldrh	r3, [r7, #6]
 801faf8:	4618      	mov	r0, r3
 801fafa:	f005 fc8b 	bl	8025414 <malloc>
 801fafe:	4603      	mov	r3, r0
 801fb00:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 801fb02:	88fb      	ldrh	r3, [r7, #6]
 801fb04:	461a      	mov	r2, r3
 801fb06:	2100      	movs	r1, #0
 801fb08:	6838      	ldr	r0, [r7, #0]
 801fb0a:	f005 fcbb 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 801fb0e:	4b12      	ldr	r3, [pc, #72]	; (801fb58 <esp8266_ConnectAP+0x110>)
 801fb10:	4a0d      	ldr	r2, [pc, #52]	; (801fb48 <esp8266_ConnectAP+0x100>)
 801fb12:	4915      	ldr	r1, [pc, #84]	; (801fb68 <esp8266_ConnectAP+0x120>)
 801fb14:	6838      	ldr	r0, [r7, #0]
 801fb16:	f006 fabb 	bl	8026090 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fb20:	4912      	ldr	r1, [pc, #72]	; (801fb6c <esp8266_ConnectAP+0x124>)
 801fb22:	6838      	ldr	r0, [r7, #0]
 801fb24:	f7ff fec8 	bl	801f8b8 <esp8266_TransmitCmd>
 801fb28:	4603      	mov	r3, r0
 801fb2a:	2b01      	cmp	r3, #1
 801fb2c:	d103      	bne.n	801fb36 <esp8266_ConnectAP+0xee>
		wifi_state = _ONLINE;
 801fb2e:	4b10      	ldr	r3, [pc, #64]	; (801fb70 <esp8266_ConnectAP+0x128>)
 801fb30:	2205      	movs	r2, #5
 801fb32:	701a      	strb	r2, [r3, #0]
 801fb34:	e002      	b.n	801fb3c <esp8266_ConnectAP+0xf4>
	else
		wifi_state = _OFFLINE;
 801fb36:	4b0e      	ldr	r3, [pc, #56]	; (801fb70 <esp8266_ConnectAP+0x128>)
 801fb38:	2206      	movs	r2, #6
 801fb3a:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 801fb3c:	4b0c      	ldr	r3, [pc, #48]	; (801fb70 <esp8266_ConnectAP+0x128>)
 801fb3e:	781b      	ldrb	r3, [r3, #0]
}
 801fb40:	4618      	mov	r0, r3
 801fb42:	3714      	adds	r7, #20
 801fb44:	46bd      	mov	sp, r7
 801fb46:	bd90      	pop	{r4, r7, pc}
 801fb48:	2000938c 	.word	0x2000938c
 801fb4c:	2000a8e0 	.word	0x2000a8e0
 801fb50:	08028878 	.word	0x08028878
 801fb54:	08028890 	.word	0x08028890
 801fb58:	200093ac 	.word	0x200093ac
 801fb5c:	2000a900 	.word	0x2000a900
 801fb60:	080288a8 	.word	0x080288a8
 801fb64:	080288c0 	.word	0x080288c0
 801fb68:	080288d8 	.word	0x080288d8
 801fb6c:	080288ec 	.word	0x080288ec
 801fb70:	20000089 	.word	0x20000089

0801fb74 <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 801fb74:	b580      	push	{r7, lr}
 801fb76:	b082      	sub	sp, #8
 801fb78:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 801fb7e:	48a8      	ldr	r0, [pc, #672]	; (801fe20 <esp8266_SetupIP+0x2ac>)
 801fb80:	f006 fa6e 	bl	8026060 <puts>
	wifi_config_step++;
 801fb84:	4ba7      	ldr	r3, [pc, #668]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fb86:	781b      	ldrb	r3, [r3, #0]
 801fb88:	3301      	adds	r3, #1
 801fb8a:	b2da      	uxtb	r2, r3
 801fb8c:	4ba5      	ldr	r3, [pc, #660]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fb8e:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801fb90:	e019      	b.n	801fbc6 <esp8266_SetupIP+0x52>
		retry_count++;
 801fb92:	79fb      	ldrb	r3, [r7, #7]
 801fb94:	3301      	adds	r3, #1
 801fb96:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fb98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fb9c:	f7e1 fe16 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fba0:	79fb      	ldrb	r3, [r7, #7]
 801fba2:	2b03      	cmp	r3, #3
 801fba4:	d90f      	bls.n	801fbc6 <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 801fba6:	48a0      	ldr	r0, [pc, #640]	; (801fe28 <esp8266_SetupIP+0x2b4>)
 801fba8:	f006 fa5a 	bl	8026060 <puts>
			retry_count = 0;
 801fbac:	2300      	movs	r3, #0
 801fbae:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 801fbb0:	4b9e      	ldr	r3, [pc, #632]	; (801fe2c <esp8266_SetupIP+0x2b8>)
 801fbb2:	22ee      	movs	r2, #238	; 0xee
 801fbb4:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 801fbb6:	4b9b      	ldr	r3, [pc, #620]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	3b01      	subs	r3, #1
 801fbbc:	b2da      	uxtb	r2, r3
 801fbbe:	4b99      	ldr	r3, [pc, #612]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fbc0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	e1e1      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801fbc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801fbca:	f7ff fee7 	bl	801f99c <esp8266_HardwareReset>
 801fbce:	4603      	mov	r3, r0
 801fbd0:	2b01      	cmp	r3, #1
 801fbd2:	d1de      	bne.n	801fb92 <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 801fbd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801fbd8:	f7e1 fdf8 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fbdc:	2300      	movs	r3, #0
 801fbde:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 801fbe0:	4893      	ldr	r0, [pc, #588]	; (801fe30 <esp8266_SetupIP+0x2bc>)
 801fbe2:	f006 fa3d 	bl	8026060 <puts>
	wifi_config_step++;
 801fbe6:	4b8f      	ldr	r3, [pc, #572]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	3301      	adds	r3, #1
 801fbec:	b2da      	uxtb	r2, r3
 801fbee:	4b8d      	ldr	r3, [pc, #564]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fbf0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801fbf2:	e016      	b.n	801fc22 <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 801fbf4:	79fb      	ldrb	r3, [r7, #7]
 801fbf6:	3301      	adds	r3, #1
 801fbf8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fbfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fbfe:	f7e1 fde5 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fc02:	79fb      	ldrb	r3, [r7, #7]
 801fc04:	2b03      	cmp	r3, #3
 801fc06:	d90c      	bls.n	801fc22 <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 801fc08:	488a      	ldr	r0, [pc, #552]	; (801fe34 <esp8266_SetupIP+0x2c0>)
 801fc0a:	f006 fa29 	bl	8026060 <puts>
			retry_count = 0;
 801fc0e:	2300      	movs	r3, #0
 801fc10:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fc12:	4b84      	ldr	r3, [pc, #528]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc14:	781b      	ldrb	r3, [r3, #0]
 801fc16:	3b01      	subs	r3, #1
 801fc18:	b2da      	uxtb	r2, r3
 801fc1a:	4b82      	ldr	r3, [pc, #520]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc1c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	e1b3      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801fc22:	2301      	movs	r3, #1
 801fc24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801fc28:	4983      	ldr	r1, [pc, #524]	; (801fe38 <esp8266_SetupIP+0x2c4>)
 801fc2a:	4884      	ldr	r0, [pc, #528]	; (801fe3c <esp8266_SetupIP+0x2c8>)
 801fc2c:	f7ff fe44 	bl	801f8b8 <esp8266_TransmitCmd>
 801fc30:	4603      	mov	r3, r0
 801fc32:	2b01      	cmp	r3, #1
 801fc34:	d1de      	bne.n	801fbf4 <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 801fc36:	2064      	movs	r0, #100	; 0x64
 801fc38:	f7e1 fdc8 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 801fc40:	487f      	ldr	r0, [pc, #508]	; (801fe40 <esp8266_SetupIP+0x2cc>)
 801fc42:	f006 fa0d 	bl	8026060 <puts>
	wifi_config_step++;
 801fc46:	4b77      	ldr	r3, [pc, #476]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc48:	781b      	ldrb	r3, [r3, #0]
 801fc4a:	3301      	adds	r3, #1
 801fc4c:	b2da      	uxtb	r2, r3
 801fc4e:	4b75      	ldr	r3, [pc, #468]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc50:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801fc52:	e016      	b.n	801fc82 <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801fc54:	79fb      	ldrb	r3, [r7, #7]
 801fc56:	3301      	adds	r3, #1
 801fc58:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fc5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fc5e:	f7e1 fdb5 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fc62:	79fb      	ldrb	r3, [r7, #7]
 801fc64:	2b03      	cmp	r3, #3
 801fc66:	d90c      	bls.n	801fc82 <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 801fc68:	4876      	ldr	r0, [pc, #472]	; (801fe44 <esp8266_SetupIP+0x2d0>)
 801fc6a:	f006 f9f9 	bl	8026060 <puts>
			retry_count = 0;
 801fc6e:	2300      	movs	r3, #0
 801fc70:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fc72:	4b6c      	ldr	r3, [pc, #432]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc74:	781b      	ldrb	r3, [r3, #0]
 801fc76:	3b01      	subs	r3, #1
 801fc78:	b2da      	uxtb	r2, r3
 801fc7a:	4b6a      	ldr	r3, [pc, #424]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fc7c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fc7e:	2300      	movs	r3, #0
 801fc80:	e183      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801fc82:	2301      	movs	r3, #1
 801fc84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801fc88:	496b      	ldr	r1, [pc, #428]	; (801fe38 <esp8266_SetupIP+0x2c4>)
 801fc8a:	486f      	ldr	r0, [pc, #444]	; (801fe48 <esp8266_SetupIP+0x2d4>)
 801fc8c:	f7ff fe14 	bl	801f8b8 <esp8266_TransmitCmd>
 801fc90:	4603      	mov	r3, r0
 801fc92:	2b01      	cmp	r3, #1
 801fc94:	d1de      	bne.n	801fc54 <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 801fc96:	2064      	movs	r0, #100	; 0x64
 801fc98:	f7e1 fd98 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fc9c:	2300      	movs	r3, #0
 801fc9e:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 801fca0:	486a      	ldr	r0, [pc, #424]	; (801fe4c <esp8266_SetupIP+0x2d8>)
 801fca2:	f006 f9dd 	bl	8026060 <puts>
	wifi_config_step++;
 801fca6:	4b5f      	ldr	r3, [pc, #380]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fca8:	781b      	ldrb	r3, [r3, #0]
 801fcaa:	3301      	adds	r3, #1
 801fcac:	b2da      	uxtb	r2, r3
 801fcae:	4b5d      	ldr	r3, [pc, #372]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fcb0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801fcb2:	e016      	b.n	801fce2 <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801fcb4:	79fb      	ldrb	r3, [r7, #7]
 801fcb6:	3301      	adds	r3, #1
 801fcb8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fcba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fcbe:	f7e1 fd85 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fcc2:	79fb      	ldrb	r3, [r7, #7]
 801fcc4:	2b03      	cmp	r3, #3
 801fcc6:	d90c      	bls.n	801fce2 <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 801fcc8:	4861      	ldr	r0, [pc, #388]	; (801fe50 <esp8266_SetupIP+0x2dc>)
 801fcca:	f006 f9c9 	bl	8026060 <puts>
			retry_count = 0;
 801fcce:	2300      	movs	r3, #0
 801fcd0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fcd2:	4b54      	ldr	r3, [pc, #336]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fcd4:	781b      	ldrb	r3, [r3, #0]
 801fcd6:	3b01      	subs	r3, #1
 801fcd8:	b2da      	uxtb	r2, r3
 801fcda:	4b52      	ldr	r3, [pc, #328]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fcdc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fcde:	2300      	movs	r3, #0
 801fce0:	e153      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801fce2:	2301      	movs	r3, #1
 801fce4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801fce8:	4953      	ldr	r1, [pc, #332]	; (801fe38 <esp8266_SetupIP+0x2c4>)
 801fcea:	485a      	ldr	r0, [pc, #360]	; (801fe54 <esp8266_SetupIP+0x2e0>)
 801fcec:	f7ff fde4 	bl	801f8b8 <esp8266_TransmitCmd>
 801fcf0:	4603      	mov	r3, r0
 801fcf2:	2b01      	cmp	r3, #1
 801fcf4:	d1de      	bne.n	801fcb4 <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 801fcf6:	2064      	movs	r0, #100	; 0x64
 801fcf8:	f7e1 fd68 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fcfc:	2300      	movs	r3, #0
 801fcfe:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 801fd00:	4855      	ldr	r0, [pc, #340]	; (801fe58 <esp8266_SetupIP+0x2e4>)
 801fd02:	f006 f9ad 	bl	8026060 <puts>
	wifi_config_step++;
 801fd06:	4b47      	ldr	r3, [pc, #284]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd08:	781b      	ldrb	r3, [r3, #0]
 801fd0a:	3301      	adds	r3, #1
 801fd0c:	b2da      	uxtb	r2, r3
 801fd0e:	4b45      	ldr	r3, [pc, #276]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd10:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 801fd12:	e016      	b.n	801fd42 <esp8266_SetupIP+0x1ce>
		retry_count++;
 801fd14:	79fb      	ldrb	r3, [r7, #7]
 801fd16:	3301      	adds	r3, #1
 801fd18:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fd1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fd1e:	f7e1 fd55 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fd22:	79fb      	ldrb	r3, [r7, #7]
 801fd24:	2b03      	cmp	r3, #3
 801fd26:	d90c      	bls.n	801fd42 <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 801fd28:	484c      	ldr	r0, [pc, #304]	; (801fe5c <esp8266_SetupIP+0x2e8>)
 801fd2a:	f006 f999 	bl	8026060 <puts>
			retry_count = 0;
 801fd2e:	2300      	movs	r3, #0
 801fd30:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fd32:	4b3c      	ldr	r3, [pc, #240]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd34:	781b      	ldrb	r3, [r3, #0]
 801fd36:	3b01      	subs	r3, #1
 801fd38:	b2da      	uxtb	r2, r3
 801fd3a:	4b3a      	ldr	r3, [pc, #232]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd3c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fd3e:	2300      	movs	r3, #0
 801fd40:	e123      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 801fd42:	f7ff fe81 	bl	801fa48 <esp8266_ConnectAP>
 801fd46:	4603      	mov	r3, r0
 801fd48:	2b05      	cmp	r3, #5
 801fd4a:	d1e3      	bne.n	801fd14 <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 801fd4c:	2064      	movs	r0, #100	; 0x64
 801fd4e:	f7e1 fd3d 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fd52:	2300      	movs	r3, #0
 801fd54:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 801fd56:	4b42      	ldr	r3, [pc, #264]	; (801fe60 <esp8266_SetupIP+0x2ec>)
 801fd58:	781b      	ldrb	r3, [r3, #0]
 801fd5a:	2b05      	cmp	r3, #5
 801fd5c:	d123      	bne.n	801fda6 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801fd5e:	e018      	b.n	801fd92 <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801fd60:	79fb      	ldrb	r3, [r7, #7]
 801fd62:	3301      	adds	r3, #1
 801fd64:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801fd66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fd6a:	f7e1 fd2f 	bl	80017cc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801fd6e:	79fb      	ldrb	r3, [r7, #7]
 801fd70:	2b01      	cmp	r3, #1
 801fd72:	d90e      	bls.n	801fd92 <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 801fd74:	483b      	ldr	r0, [pc, #236]	; (801fe64 <esp8266_SetupIP+0x2f0>)
 801fd76:	f006 f973 	bl	8026060 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801fd7a:	483b      	ldr	r0, [pc, #236]	; (801fe68 <esp8266_SetupIP+0x2f4>)
 801fd7c:	f006 f8d4 	bl	8025f28 <iprintf>
				retry_count = 0;
 801fd80:	2300      	movs	r3, #0
 801fd82:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801fd84:	4b27      	ldr	r3, [pc, #156]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd86:	781b      	ldrb	r3, [r3, #0]
 801fd88:	3b01      	subs	r3, #1
 801fd8a:	b2da      	uxtb	r2, r3
 801fd8c:	4b25      	ldr	r3, [pc, #148]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fd8e:	701a      	strb	r2, [r3, #0]
				break;
 801fd90:	e009      	b.n	801fda6 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801fd92:	2301      	movs	r3, #1
 801fd94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd98:	4927      	ldr	r1, [pc, #156]	; (801fe38 <esp8266_SetupIP+0x2c4>)
 801fd9a:	4834      	ldr	r0, [pc, #208]	; (801fe6c <esp8266_SetupIP+0x2f8>)
 801fd9c:	f7ff fd8c 	bl	801f8b8 <esp8266_TransmitCmd>
 801fda0:	4603      	mov	r3, r0
 801fda2:	2b01      	cmp	r3, #1
 801fda4:	d1dc      	bne.n	801fd60 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 801fda6:	2064      	movs	r0, #100	; 0x64
 801fda8:	f7e1 fd10 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fdac:	2300      	movs	r3, #0
 801fdae:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 801fdb0:	4b2b      	ldr	r3, [pc, #172]	; (801fe60 <esp8266_SetupIP+0x2ec>)
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	2b05      	cmp	r3, #5
 801fdb6:	d123      	bne.n	801fe00 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801fdb8:	e018      	b.n	801fdec <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801fdba:	79fb      	ldrb	r3, [r7, #7]
 801fdbc:	3301      	adds	r3, #1
 801fdbe:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801fdc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fdc4:	f7e1 fd02 	bl	80017cc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801fdc8:	79fb      	ldrb	r3, [r7, #7]
 801fdca:	2b01      	cmp	r3, #1
 801fdcc:	d90e      	bls.n	801fdec <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 801fdce:	4828      	ldr	r0, [pc, #160]	; (801fe70 <esp8266_SetupIP+0x2fc>)
 801fdd0:	f006 f946 	bl	8026060 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801fdd4:	4824      	ldr	r0, [pc, #144]	; (801fe68 <esp8266_SetupIP+0x2f4>)
 801fdd6:	f006 f8a7 	bl	8025f28 <iprintf>
				retry_count = 0;
 801fdda:	2300      	movs	r3, #0
 801fddc:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801fdde:	4b11      	ldr	r3, [pc, #68]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fde0:	781b      	ldrb	r3, [r3, #0]
 801fde2:	3b01      	subs	r3, #1
 801fde4:	b2da      	uxtb	r2, r3
 801fde6:	4b0f      	ldr	r3, [pc, #60]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fde8:	701a      	strb	r2, [r3, #0]
				break;
 801fdea:	e009      	b.n	801fe00 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801fdec:	2301      	movs	r3, #1
 801fdee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fdf2:	4911      	ldr	r1, [pc, #68]	; (801fe38 <esp8266_SetupIP+0x2c4>)
 801fdf4:	481f      	ldr	r0, [pc, #124]	; (801fe74 <esp8266_SetupIP+0x300>)
 801fdf6:	f7ff fd5f 	bl	801f8b8 <esp8266_TransmitCmd>
 801fdfa:	4603      	mov	r3, r0
 801fdfc:	2b01      	cmp	r3, #1
 801fdfe:	d1dc      	bne.n	801fdba <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 801fe00:	2064      	movs	r0, #100	; 0x64
 801fe02:	f7e1 fce3 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801fe06:	2300      	movs	r3, #0
 801fe08:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 801fe0a:	481b      	ldr	r0, [pc, #108]	; (801fe78 <esp8266_SetupIP+0x304>)
 801fe0c:	f006 f928 	bl	8026060 <puts>
	wifi_config_step++;
 801fe10:	4b04      	ldr	r3, [pc, #16]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fe12:	781b      	ldrb	r3, [r3, #0]
 801fe14:	3301      	adds	r3, #1
 801fe16:	b2da      	uxtb	r2, r3
 801fe18:	4b02      	ldr	r3, [pc, #8]	; (801fe24 <esp8266_SetupIP+0x2b0>)
 801fe1a:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801fe1c:	e045      	b.n	801feaa <esp8266_SetupIP+0x336>
 801fe1e:	bf00      	nop
 801fe20:	0802893c 	.word	0x0802893c
 801fe24:	20009388 	.word	0x20009388
 801fe28:	0802895c 	.word	0x0802895c
 801fe2c:	2000008a 	.word	0x2000008a
 801fe30:	080289a8 	.word	0x080289a8
 801fe34:	080289c8 	.word	0x080289c8
 801fe38:	080289e4 	.word	0x080289e4
 801fe3c:	080289e8 	.word	0x080289e8
 801fe40:	080289f0 	.word	0x080289f0
 801fe44:	08028a10 	.word	0x08028a10
 801fe48:	08028a30 	.word	0x08028a30
 801fe4c:	08028a3c 	.word	0x08028a3c
 801fe50:	08028a64 	.word	0x08028a64
 801fe54:	08028a88 	.word	0x08028a88
 801fe58:	08028a98 	.word	0x08028a98
 801fe5c:	08028ab8 	.word	0x08028ab8
 801fe60:	20000089 	.word	0x20000089
 801fe64:	08028ad8 	.word	0x08028ad8
 801fe68:	08028af4 	.word	0x08028af4
 801fe6c:	08028b2c 	.word	0x08028b2c
 801fe70:	08028b38 	.word	0x08028b38
 801fe74:	08028b54 	.word	0x08028b54
 801fe78:	08028b60 	.word	0x08028b60
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801fe7c:	79fb      	ldrb	r3, [r7, #7]
 801fe7e:	3301      	adds	r3, #1
 801fe80:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fe82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fe86:	f7e1 fca1 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801fe8a:	79fb      	ldrb	r3, [r7, #7]
 801fe8c:	2b03      	cmp	r3, #3
 801fe8e:	d90c      	bls.n	801feaa <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 801fe90:	4840      	ldr	r0, [pc, #256]	; (801ff94 <esp8266_SetupIP+0x420>)
 801fe92:	f006 f8e5 	bl	8026060 <puts>
			retry_count = 0;
 801fe96:	2300      	movs	r3, #0
 801fe98:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fe9a:	4b3f      	ldr	r3, [pc, #252]	; (801ff98 <esp8266_SetupIP+0x424>)
 801fe9c:	781b      	ldrb	r3, [r3, #0]
 801fe9e:	3b01      	subs	r3, #1
 801fea0:	b2da      	uxtb	r2, r3
 801fea2:	4b3d      	ldr	r3, [pc, #244]	; (801ff98 <esp8266_SetupIP+0x424>)
 801fea4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801fea6:	2300      	movs	r3, #0
 801fea8:	e06f      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801feaa:	2301      	movs	r3, #1
 801feac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801feb0:	493a      	ldr	r1, [pc, #232]	; (801ff9c <esp8266_SetupIP+0x428>)
 801feb2:	483b      	ldr	r0, [pc, #236]	; (801ffa0 <esp8266_SetupIP+0x42c>)
 801feb4:	f7ff fd00 	bl	801f8b8 <esp8266_TransmitCmd>
 801feb8:	4603      	mov	r3, r0
 801feba:	2b01      	cmp	r3, #1
 801febc:	d1de      	bne.n	801fe7c <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 801febe:	2064      	movs	r0, #100	; 0x64
 801fec0:	f7e1 fc84 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 801fec4:	2300      	movs	r3, #0
 801fec6:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 801fec8:	4836      	ldr	r0, [pc, #216]	; (801ffa4 <esp8266_SetupIP+0x430>)
 801feca:	f006 f8c9 	bl	8026060 <puts>
	wifi_config_step++;
 801fece:	4b32      	ldr	r3, [pc, #200]	; (801ff98 <esp8266_SetupIP+0x424>)
 801fed0:	781b      	ldrb	r3, [r3, #0]
 801fed2:	3301      	adds	r3, #1
 801fed4:	b2da      	uxtb	r2, r3
 801fed6:	4b30      	ldr	r3, [pc, #192]	; (801ff98 <esp8266_SetupIP+0x424>)
 801fed8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801feda:	e016      	b.n	801ff0a <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801fedc:	79fb      	ldrb	r3, [r7, #7]
 801fede:	3301      	adds	r3, #1
 801fee0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801fee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fee6:	f7e1 fc71 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801feea:	79fb      	ldrb	r3, [r7, #7]
 801feec:	2b03      	cmp	r3, #3
 801feee:	d90c      	bls.n	801ff0a <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 801fef0:	482d      	ldr	r0, [pc, #180]	; (801ffa8 <esp8266_SetupIP+0x434>)
 801fef2:	f006 f8b5 	bl	8026060 <puts>
			retry_count = 0;
 801fef6:	2300      	movs	r3, #0
 801fef8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801fefa:	4b27      	ldr	r3, [pc, #156]	; (801ff98 <esp8266_SetupIP+0x424>)
 801fefc:	781b      	ldrb	r3, [r3, #0]
 801fefe:	3b01      	subs	r3, #1
 801ff00:	b2da      	uxtb	r2, r3
 801ff02:	4b25      	ldr	r3, [pc, #148]	; (801ff98 <esp8266_SetupIP+0x424>)
 801ff04:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801ff06:	2300      	movs	r3, #0
 801ff08:	e03f      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801ff0a:	2301      	movs	r3, #1
 801ff0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ff10:	4922      	ldr	r1, [pc, #136]	; (801ff9c <esp8266_SetupIP+0x428>)
 801ff12:	4826      	ldr	r0, [pc, #152]	; (801ffac <esp8266_SetupIP+0x438>)
 801ff14:	f7ff fcd0 	bl	801f8b8 <esp8266_TransmitCmd>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	2b01      	cmp	r3, #1
 801ff1c:	d1de      	bne.n	801fedc <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 801ff1e:	2064      	movs	r0, #100	; 0x64
 801ff20:	f7e1 fc54 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 801ff24:	2300      	movs	r3, #0
 801ff26:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 801ff28:	4821      	ldr	r0, [pc, #132]	; (801ffb0 <esp8266_SetupIP+0x43c>)
 801ff2a:	f006 f899 	bl	8026060 <puts>
	wifi_config_step++;
 801ff2e:	4b1a      	ldr	r3, [pc, #104]	; (801ff98 <esp8266_SetupIP+0x424>)
 801ff30:	781b      	ldrb	r3, [r3, #0]
 801ff32:	3301      	adds	r3, #1
 801ff34:	b2da      	uxtb	r2, r3
 801ff36:	4b18      	ldr	r3, [pc, #96]	; (801ff98 <esp8266_SetupIP+0x424>)
 801ff38:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801ff3a:	e016      	b.n	801ff6a <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801ff3c:	79fb      	ldrb	r3, [r7, #7]
 801ff3e:	3301      	adds	r3, #1
 801ff40:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801ff42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ff46:	f7e1 fc41 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801ff4a:	79fb      	ldrb	r3, [r7, #7]
 801ff4c:	2b03      	cmp	r3, #3
 801ff4e:	d90c      	bls.n	801ff6a <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 801ff50:	4818      	ldr	r0, [pc, #96]	; (801ffb4 <esp8266_SetupIP+0x440>)
 801ff52:	f006 f885 	bl	8026060 <puts>
			retry_count = 0;
 801ff56:	2300      	movs	r3, #0
 801ff58:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801ff5a:	4b0f      	ldr	r3, [pc, #60]	; (801ff98 <esp8266_SetupIP+0x424>)
 801ff5c:	781b      	ldrb	r3, [r3, #0]
 801ff5e:	3b01      	subs	r3, #1
 801ff60:	b2da      	uxtb	r2, r3
 801ff62:	4b0d      	ldr	r3, [pc, #52]	; (801ff98 <esp8266_SetupIP+0x424>)
 801ff64:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801ff66:	2300      	movs	r3, #0
 801ff68:	e00f      	b.n	801ff8a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801ff6a:	2301      	movs	r3, #1
 801ff6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ff70:	490a      	ldr	r1, [pc, #40]	; (801ff9c <esp8266_SetupIP+0x428>)
 801ff72:	4811      	ldr	r0, [pc, #68]	; (801ffb8 <esp8266_SetupIP+0x444>)
 801ff74:	f7ff fca0 	bl	801f8b8 <esp8266_TransmitCmd>
 801ff78:	4603      	mov	r3, r0
 801ff7a:	2b01      	cmp	r3, #1
 801ff7c:	d1de      	bne.n	801ff3c <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 801ff7e:	2064      	movs	r0, #100	; 0x64
 801ff80:	f7e1 fc24 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 801ff84:	2300      	movs	r3, #0
 801ff86:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 801ff88:	2301      	movs	r3, #1

}
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	3708      	adds	r7, #8
 801ff8e:	46bd      	mov	sp, r7
 801ff90:	bd80      	pop	{r7, pc}
 801ff92:	bf00      	nop
 801ff94:	08028b80 	.word	0x08028b80
 801ff98:	20009388 	.word	0x20009388
 801ff9c:	080289e4 	.word	0x080289e4
 801ffa0:	08028ba0 	.word	0x08028ba0
 801ffa4:	08028bb0 	.word	0x08028bb0
 801ffa8:	08028bd8 	.word	0x08028bd8
 801ffac:	08028c04 	.word	0x08028c04
 801ffb0:	08028c10 	.word	0x08028c10
 801ffb4:	08028c44 	.word	0x08028c44
 801ffb8:	08028c78 	.word	0x08028c78

0801ffbc <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 801ffbc:	b580      	push	{r7, lr}
 801ffbe:	b086      	sub	sp, #24
 801ffc0:	af02      	add	r7, sp, #8
	int retry_count = 0;
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 801ffc6:	232d      	movs	r3, #45	; 0x2d
 801ffc8:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801ffca:	897b      	ldrh	r3, [r7, #10]
 801ffcc:	4618      	mov	r0, r3
 801ffce:	f005 fa21 	bl	8025414 <malloc>
 801ffd2:	4603      	mov	r3, r0
 801ffd4:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801ffd6:	897b      	ldrh	r3, [r7, #10]
 801ffd8:	461a      	mov	r2, r3
 801ffda:	2100      	movs	r1, #0
 801ffdc:	6878      	ldr	r0, [r7, #4]
 801ffde:	f005 fa51 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 801ffe2:	4b19      	ldr	r3, [pc, #100]	; (8020048 <esp8266_ConfigAccessBroker+0x8c>)
 801ffe4:	9300      	str	r3, [sp, #0]
 801ffe6:	4b18      	ldr	r3, [pc, #96]	; (8020048 <esp8266_ConfigAccessBroker+0x8c>)
 801ffe8:	4a18      	ldr	r2, [pc, #96]	; (802004c <esp8266_ConfigAccessBroker+0x90>)
 801ffea:	4919      	ldr	r1, [pc, #100]	; (8020050 <esp8266_ConfigAccessBroker+0x94>)
 801ffec:	6878      	ldr	r0, [r7, #4]
 801ffee:	f006 f84f 	bl	8026090 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801fff2:	e011      	b.n	8020018 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 801fff4:	68fb      	ldr	r3, [r7, #12]
 801fff6:	3301      	adds	r3, #1
 801fff8:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801fffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fffe:	f7e1 fbe5 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8020002:	68fb      	ldr	r3, [r7, #12]
 8020004:	2b03      	cmp	r3, #3
 8020006:	dd07      	ble.n	8020018 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 8020008:	4812      	ldr	r0, [pc, #72]	; (8020054 <esp8266_ConfigAccessBroker+0x98>)
 802000a:	f006 f829 	bl	8026060 <puts>
			retry_count = 0;
 802000e:	2300      	movs	r3, #0
 8020010:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 8020012:	4b11      	ldr	r3, [pc, #68]	; (8020058 <esp8266_ConfigAccessBroker+0x9c>)
 8020014:	2204      	movs	r2, #4
 8020016:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020018:	2301      	movs	r3, #1
 802001a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802001e:	490f      	ldr	r1, [pc, #60]	; (802005c <esp8266_ConfigAccessBroker+0xa0>)
 8020020:	6878      	ldr	r0, [r7, #4]
 8020022:	f7ff fc49 	bl	801f8b8 <esp8266_TransmitCmd>
 8020026:	4603      	mov	r3, r0
 8020028:	2b01      	cmp	r3, #1
 802002a:	d1e3      	bne.n	801fff4 <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 802002c:	4b0a      	ldr	r3, [pc, #40]	; (8020058 <esp8266_ConfigAccessBroker+0x9c>)
 802002e:	2205      	movs	r2, #5
 8020030:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8020032:	2064      	movs	r0, #100	; 0x64
 8020034:	f7e1 fbca 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 8020038:	2300      	movs	r3, #0
 802003a:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 802003c:	4b06      	ldr	r3, [pc, #24]	; (8020058 <esp8266_ConfigAccessBroker+0x9c>)
 802003e:	781b      	ldrb	r3, [r3, #0]
}
 8020040:	4618      	mov	r0, r3
 8020042:	3710      	adds	r7, #16
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}
 8020048:	08028d04 	.word	0x08028d04
 802004c:	08028d08 	.word	0x08028d08
 8020050:	08028d10 	.word	0x08028d10
 8020054:	08028d3c 	.word	0x08028d3c
 8020058:	2000008b 	.word	0x2000008b
 802005c:	080289e4 	.word	0x080289e4

08020060 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 8020060:	b580      	push	{r7, lr}
 8020062:	b084      	sub	sp, #16
 8020064:	af00      	add	r7, sp, #0
	int retry_count = 0;
 8020066:	2300      	movs	r3, #0
 8020068:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 802006a:	232e      	movs	r3, #46	; 0x2e
 802006c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 802006e:	897b      	ldrh	r3, [r7, #10]
 8020070:	4618      	mov	r0, r3
 8020072:	f005 f9cf 	bl	8025414 <malloc>
 8020076:	4603      	mov	r3, r0
 8020078:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 802007a:	897b      	ldrh	r3, [r7, #10]
 802007c:	461a      	mov	r2, r3
 802007e:	2100      	movs	r1, #0
 8020080:	6878      	ldr	r0, [r7, #4]
 8020082:	f005 f9ff 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 8020086:	4b16      	ldr	r3, [pc, #88]	; (80200e0 <esp8266_ConnectBroker+0x80>)
 8020088:	4a16      	ldr	r2, [pc, #88]	; (80200e4 <esp8266_ConnectBroker+0x84>)
 802008a:	4917      	ldr	r1, [pc, #92]	; (80200e8 <esp8266_ConnectBroker+0x88>)
 802008c:	6878      	ldr	r0, [r7, #4]
 802008e:	f005 ffff 	bl	8026090 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020092:	e011      	b.n	80200b8 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 8020094:	68fb      	ldr	r3, [r7, #12]
 8020096:	3301      	adds	r3, #1
 8020098:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 802009a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802009e:	f7e1 fb95 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80200a2:	68fb      	ldr	r3, [r7, #12]
 80200a4:	2b03      	cmp	r3, #3
 80200a6:	dd07      	ble.n	80200b8 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 80200a8:	4810      	ldr	r0, [pc, #64]	; (80200ec <esp8266_ConnectBroker+0x8c>)
 80200aa:	f005 ffd9 	bl	8026060 <puts>
			retry_count = 0;
 80200ae:	2300      	movs	r3, #0
 80200b0:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 80200b2:	4b0f      	ldr	r3, [pc, #60]	; (80200f0 <esp8266_ConnectBroker+0x90>)
 80200b4:	2206      	movs	r2, #6
 80200b6:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80200b8:	2301      	movs	r3, #1
 80200ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80200be:	490d      	ldr	r1, [pc, #52]	; (80200f4 <esp8266_ConnectBroker+0x94>)
 80200c0:	6878      	ldr	r0, [r7, #4]
 80200c2:	f7ff fbf9 	bl	801f8b8 <esp8266_TransmitCmd>
 80200c6:	4603      	mov	r3, r0
 80200c8:	2b01      	cmp	r3, #1
 80200ca:	d1e3      	bne.n	8020094 <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 80200cc:	4b08      	ldr	r3, [pc, #32]	; (80200f0 <esp8266_ConnectBroker+0x90>)
 80200ce:	2207      	movs	r2, #7
 80200d0:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 80200d2:	4b07      	ldr	r3, [pc, #28]	; (80200f0 <esp8266_ConnectBroker+0x90>)
 80200d4:	781b      	ldrb	r3, [r3, #0]
}
 80200d6:	4618      	mov	r0, r3
 80200d8:	3710      	adds	r7, #16
 80200da:	46bd      	mov	sp, r7
 80200dc:	bd80      	pop	{r7, pc}
 80200de:	bf00      	nop
 80200e0:	080288fc 	.word	0x080288fc
 80200e4:	08028904 	.word	0x08028904
 80200e8:	08028d90 	.word	0x08028d90
 80200ec:	08028da8 	.word	0x08028da8
 80200f0:	2000008b 	.word	0x2000008b
 80200f4:	080289e4 	.word	0x080289e4

080200f8 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 80200f8:	b580      	push	{r7, lr}
 80200fa:	b082      	sub	sp, #8
 80200fc:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 80200fe:	2300      	movs	r3, #0
 8020100:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 8020102:	482d      	ldr	r0, [pc, #180]	; (80201b8 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 8020104:	f005 ffac 	bl	8026060 <puts>
	mqtt_config_step++;
 8020108:	4b2c      	ldr	r3, [pc, #176]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 802010a:	781b      	ldrb	r3, [r3, #0]
 802010c:	3301      	adds	r3, #1
 802010e:	b2da      	uxtb	r2, r3
 8020110:	4b2a      	ldr	r3, [pc, #168]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8020112:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 8020114:	e016      	b.n	8020144 <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 8020116:	79fb      	ldrb	r3, [r7, #7]
 8020118:	3301      	adds	r3, #1
 802011a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 802011c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020120:	f7e1 fb54 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8020124:	79fb      	ldrb	r3, [r7, #7]
 8020126:	2b03      	cmp	r3, #3
 8020128:	d90c      	bls.n	8020144 <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 802012a:	4825      	ldr	r0, [pc, #148]	; (80201c0 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 802012c:	f005 ff98 	bl	8026060 <puts>
			retry_count = 0;
 8020130:	2300      	movs	r3, #0
 8020132:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 8020134:	4b21      	ldr	r3, [pc, #132]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8020136:	781b      	ldrb	r3, [r3, #0]
 8020138:	3b01      	subs	r3, #1
 802013a:	b2da      	uxtb	r2, r3
 802013c:	4b1f      	ldr	r3, [pc, #124]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 802013e:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8020140:	2300      	movs	r3, #0
 8020142:	e035      	b.n	80201b0 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 8020144:	f7ff ff3a 	bl	801ffbc <esp8266_ConfigAccessBroker>
 8020148:	4603      	mov	r3, r0
 802014a:	2b05      	cmp	r3, #5
 802014c:	d1e3      	bne.n	8020116 <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 802014e:	2064      	movs	r0, #100	; 0x64
 8020150:	f7e1 fb3c 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 8020154:	2300      	movs	r3, #0
 8020156:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 8020158:	481a      	ldr	r0, [pc, #104]	; (80201c4 <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 802015a:	f005 ff81 	bl	8026060 <puts>
	mqtt_config_step++;
 802015e:	4b17      	ldr	r3, [pc, #92]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8020160:	781b      	ldrb	r3, [r3, #0]
 8020162:	3301      	adds	r3, #1
 8020164:	b2da      	uxtb	r2, r3
 8020166:	4b15      	ldr	r3, [pc, #84]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8020168:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 802016a:	e016      	b.n	802019a <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 802016c:	79fb      	ldrb	r3, [r7, #7]
 802016e:	3301      	adds	r3, #1
 8020170:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 8020172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020176:	f7e1 fb29 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 802017a:	79fb      	ldrb	r3, [r7, #7]
 802017c:	2b03      	cmp	r3, #3
 802017e:	d90c      	bls.n	802019a <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 8020180:	4811      	ldr	r0, [pc, #68]	; (80201c8 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 8020182:	f005 ff6d 	bl	8026060 <puts>
			retry_count = 0;
 8020186:	2300      	movs	r3, #0
 8020188:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 802018a:	4b0c      	ldr	r3, [pc, #48]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 802018c:	781b      	ldrb	r3, [r3, #0]
 802018e:	3b01      	subs	r3, #1
 8020190:	b2da      	uxtb	r2, r3
 8020192:	4b0a      	ldr	r3, [pc, #40]	; (80201bc <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8020194:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8020196:	2300      	movs	r3, #0
 8020198:	e00a      	b.n	80201b0 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 802019a:	f7ff ff61 	bl	8020060 <esp8266_ConnectBroker>
 802019e:	4603      	mov	r3, r0
 80201a0:	2b06      	cmp	r3, #6
 80201a2:	d9e3      	bls.n	802016c <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 80201a4:	2064      	movs	r0, #100	; 0x64
 80201a6:	f7e1 fb11 	bl	80017cc <HAL_Delay>
	retry_count = 0;		// reset retry count
 80201aa:	2300      	movs	r3, #0
 80201ac:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 80201ae:	2301      	movs	r3, #1
}
 80201b0:	4618      	mov	r0, r3
 80201b2:	3708      	adds	r7, #8
 80201b4:	46bd      	mov	sp, r7
 80201b6:	bd80      	pop	{r7, pc}
 80201b8:	08028dd0 	.word	0x08028dd0
 80201bc:	20009389 	.word	0x20009389
 80201c0:	08028e08 	.word	0x08028e08
 80201c4:	08028e34 	.word	0x08028e34
 80201c8:	08028e68 	.word	0x08028e68

080201cc <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b084      	sub	sp, #16
 80201d0:	af00      	add	r7, sp, #0
	int retry_count = 0;
 80201d2:	2300      	movs	r3, #0
 80201d4:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 80201d6:	4b22      	ldr	r3, [pc, #136]	; (8020260 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 80201d8:	781b      	ldrb	r3, [r3, #0]
 80201da:	2b06      	cmp	r3, #6
 80201dc:	d801      	bhi.n	80201e2 <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 80201de:	2300      	movs	r3, #0
 80201e0:	e039      	b.n	8020256 <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 80201e2:	2328      	movs	r3, #40	; 0x28
 80201e4:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80201e6:	897b      	ldrh	r3, [r7, #10]
 80201e8:	4618      	mov	r0, r3
 80201ea:	f005 f913 	bl	8025414 <malloc>
 80201ee:	4603      	mov	r3, r0
 80201f0:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 80201f2:	897b      	ldrh	r3, [r7, #10]
 80201f4:	461a      	mov	r2, r3
 80201f6:	2100      	movs	r1, #0
 80201f8:	6878      	ldr	r0, [r7, #4]
 80201fa:	f005 f943 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 80201fe:	4a19      	ldr	r2, [pc, #100]	; (8020264 <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 8020200:	4919      	ldr	r1, [pc, #100]	; (8020268 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 8020202:	6878      	ldr	r0, [r7, #4]
 8020204:	f005 ff44 	bl	8026090 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020208:	e011      	b.n	802022e <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	3301      	adds	r3, #1
 802020e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8020210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020214:	f7e1 fada 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8020218:	68fb      	ldr	r3, [r7, #12]
 802021a:	2b03      	cmp	r3, #3
 802021c:	dd07      	ble.n	802022e <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 802021e:	4813      	ldr	r0, [pc, #76]	; (802026c <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 8020220:	f005 ff1e 	bl	8026060 <puts>
			retry_count = 0;
 8020224:	2300      	movs	r3, #0
 8020226:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 8020228:	4b0d      	ldr	r3, [pc, #52]	; (8020260 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 802022a:	2200      	movs	r2, #0
 802022c:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 802022e:	2301      	movs	r3, #1
 8020230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020234:	490e      	ldr	r1, [pc, #56]	; (8020270 <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 8020236:	6878      	ldr	r0, [r7, #4]
 8020238:	f7ff fb3e 	bl	801f8b8 <esp8266_TransmitCmd>
 802023c:	4603      	mov	r3, r0
 802023e:	2b01      	cmp	r3, #1
 8020240:	d1e3      	bne.n	802020a <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 8020242:	2064      	movs	r0, #100	; 0x64
 8020244:	f7e1 fac2 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 8020248:	2300      	movs	r3, #0
 802024a:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 802024c:	4b04      	ldr	r3, [pc, #16]	; (8020260 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 802024e:	2208      	movs	r2, #8
 8020250:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 8020252:	4b03      	ldr	r3, [pc, #12]	; (8020260 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 8020254:	781b      	ldrb	r3, [r3, #0]
}
 8020256:	4618      	mov	r0, r3
 8020258:	3710      	adds	r7, #16
 802025a:	46bd      	mov	sp, r7
 802025c:	bd80      	pop	{r7, pc}
 802025e:	bf00      	nop
 8020260:	2000008b 	.word	0x2000008b
 8020264:	08028d08 	.word	0x08028d08
 8020268:	08028e90 	.word	0x08028e90
 802026c:	08028eac 	.word	0x08028eac
 8020270:	080289e4 	.word	0x080289e4

08020274 <esp8266_Subscribe_ToF_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_ToF_BrokerMQTT()
{
 8020274:	b580      	push	{r7, lr}
 8020276:	b084      	sub	sp, #16
 8020278:	af00      	add	r7, sp, #0
	int retry_count = 0;
 802027a:	2300      	movs	r3, #0
 802027c:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 802027e:	4b22      	ldr	r3, [pc, #136]	; (8020308 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 8020280:	781b      	ldrb	r3, [r3, #0]
 8020282:	2b06      	cmp	r3, #6
 8020284:	d801      	bhi.n	802028a <esp8266_Subscribe_ToF_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 8020286:	2300      	movs	r3, #0
 8020288:	e039      	b.n	80202fe <esp8266_Subscribe_ToF_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 802028a:	2328      	movs	r3, #40	; 0x28
 802028c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 802028e:	897b      	ldrh	r3, [r7, #10]
 8020290:	4618      	mov	r0, r3
 8020292:	f005 f8bf 	bl	8025414 <malloc>
 8020296:	4603      	mov	r3, r0
 8020298:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 802029a:	897b      	ldrh	r3, [r7, #10]
 802029c:	461a      	mov	r2, r3
 802029e:	2100      	movs	r1, #0
 80202a0:	6878      	ldr	r0, [r7, #4]
 80202a2:	f005 f8ef 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTof\",1", MQTT_CLIENTID);
 80202a6:	4a19      	ldr	r2, [pc, #100]	; (802030c <esp8266_Subscribe_ToF_BrokerMQTT+0x98>)
 80202a8:	4919      	ldr	r1, [pc, #100]	; (8020310 <esp8266_Subscribe_ToF_BrokerMQTT+0x9c>)
 80202aa:	6878      	ldr	r0, [r7, #4]
 80202ac:	f005 fef0 	bl	8026090 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80202b0:	e011      	b.n	80202d6 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
	{
		retry_count++;
 80202b2:	68fb      	ldr	r3, [r7, #12]
 80202b4:	3301      	adds	r3, #1
 80202b6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 80202b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80202bc:	f7e1 fa86 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80202c0:	68fb      	ldr	r3, [r7, #12]
 80202c2:	2b03      	cmp	r3, #3
 80202c4:	dd07      	ble.n	80202d6 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 80202c6:	4813      	ldr	r0, [pc, #76]	; (8020314 <esp8266_Subscribe_ToF_BrokerMQTT+0xa0>)
 80202c8:	f005 feca 	bl	8026060 <puts>
			retry_count = 0;
 80202cc:	2300      	movs	r3, #0
 80202ce:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 80202d0:	4b0d      	ldr	r3, [pc, #52]	; (8020308 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 80202d2:	2200      	movs	r2, #0
 80202d4:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80202d6:	2301      	movs	r3, #1
 80202d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80202dc:	490e      	ldr	r1, [pc, #56]	; (8020318 <esp8266_Subscribe_ToF_BrokerMQTT+0xa4>)
 80202de:	6878      	ldr	r0, [r7, #4]
 80202e0:	f7ff faea 	bl	801f8b8 <esp8266_TransmitCmd>
 80202e4:	4603      	mov	r3, r0
 80202e6:	2b01      	cmp	r3, #1
 80202e8:	d1e3      	bne.n	80202b2 <esp8266_Subscribe_ToF_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 80202ea:	2064      	movs	r0, #100	; 0x64
 80202ec:	f7e1 fa6e 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 80202f0:	2300      	movs	r3, #0
 80202f2:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TOF_MQTT;
 80202f4:	4b04      	ldr	r3, [pc, #16]	; (8020308 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 80202f6:	2209      	movs	r2, #9
 80202f8:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 80202fa:	4b03      	ldr	r3, [pc, #12]	; (8020308 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 80202fc:	781b      	ldrb	r3, [r3, #0]
}
 80202fe:	4618      	mov	r0, r3
 8020300:	3710      	adds	r7, #16
 8020302:	46bd      	mov	sp, r7
 8020304:	bd80      	pop	{r7, pc}
 8020306:	bf00      	nop
 8020308:	2000008b 	.word	0x2000008b
 802030c:	08028d08 	.word	0x08028d08
 8020310:	08028ee0 	.word	0x08028ee0
 8020314:	08028eac 	.word	0x08028eac
 8020318:	080289e4 	.word	0x080289e4

0802031c <esp8266_Publish_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 802031c:	b580      	push	{r7, lr}
 802031e:	b086      	sub	sp, #24
 8020320:	af00      	add	r7, sp, #0
 8020322:	6078      	str	r0, [r7, #4]
 8020324:	460b      	mov	r3, r1
 8020326:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 8020328:	2300      	movs	r3, #0
 802032a:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 802032c:	4b24      	ldr	r3, [pc, #144]	; (80203c0 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 802032e:	781b      	ldrb	r3, [r3, #0]
 8020330:	2b06      	cmp	r3, #6
 8020332:	d902      	bls.n	802033a <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	2b00      	cmp	r3, #0
 8020338:	d101      	bne.n	802033e <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 802033a:	2300      	movs	r3, #0
 802033c:	e03b      	b.n	80203b6 <esp8266_Publish_Temp_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 802033e:	887b      	ldrh	r3, [r7, #2]
 8020340:	3328      	adds	r3, #40	; 0x28
 8020342:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8020344:	8a7b      	ldrh	r3, [r7, #18]
 8020346:	4618      	mov	r0, r3
 8020348:	f005 f864 	bl	8025414 <malloc>
 802034c:	4603      	mov	r3, r0
 802034e:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 8020350:	8a7b      	ldrh	r3, [r7, #18]
 8020352:	461a      	mov	r2, r3
 8020354:	2100      	movs	r1, #0
 8020356:	68f8      	ldr	r0, [r7, #12]
 8020358:	f005 f894 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/Temp\",\"%s\",1,0", MQTT_CLIENTID, data);
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	4a19      	ldr	r2, [pc, #100]	; (80203c4 <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 8020360:	4919      	ldr	r1, [pc, #100]	; (80203c8 <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 8020362:	68f8      	ldr	r0, [r7, #12]
 8020364:	f005 fe94 	bl	8026090 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020368:	e011      	b.n	802038e <esp8266_Publish_Temp_BrokerMQTT+0x72>
	{
		retry_count++;
 802036a:	697b      	ldr	r3, [r7, #20]
 802036c:	3301      	adds	r3, #1
 802036e:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 8020370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020374:	f7e1 fa2a 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8020378:	697b      	ldr	r3, [r7, #20]
 802037a:	2b03      	cmp	r3, #3
 802037c:	dd07      	ble.n	802038e <esp8266_Publish_Temp_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 802037e:	4813      	ldr	r0, [pc, #76]	; (80203cc <esp8266_Publish_Temp_BrokerMQTT+0xb0>)
 8020380:	f005 fe6e 	bl	8026060 <puts>
			retry_count = 0;
 8020384:	2300      	movs	r3, #0
 8020386:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 8020388:	4b0d      	ldr	r3, [pc, #52]	; (80203c0 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 802038a:	2200      	movs	r2, #0
 802038c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 802038e:	2301      	movs	r3, #1
 8020390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020394:	490e      	ldr	r1, [pc, #56]	; (80203d0 <esp8266_Publish_Temp_BrokerMQTT+0xb4>)
 8020396:	68f8      	ldr	r0, [r7, #12]
 8020398:	f7ff fa8e 	bl	801f8b8 <esp8266_TransmitCmd>
 802039c:	4603      	mov	r3, r0
 802039e:	2b01      	cmp	r3, #1
 80203a0:	d1e3      	bne.n	802036a <esp8266_Publish_Temp_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 80203a2:	2064      	movs	r0, #100	; 0x64
 80203a4:	f7e1 fa12 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 80203a8:	2300      	movs	r3, #0
 80203aa:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 80203ac:	4b04      	ldr	r3, [pc, #16]	; (80203c0 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 80203ae:	220a      	movs	r2, #10
 80203b0:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 80203b2:	4b03      	ldr	r3, [pc, #12]	; (80203c0 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 80203b4:	781b      	ldrb	r3, [r3, #0]
}
 80203b6:	4618      	mov	r0, r3
 80203b8:	3718      	adds	r7, #24
 80203ba:	46bd      	mov	sp, r7
 80203bc:	bd80      	pop	{r7, pc}
 80203be:	bf00      	nop
 80203c0:	2000008b 	.word	0x2000008b
 80203c4:	08028d08 	.word	0x08028d08
 80203c8:	08028efc 	.word	0x08028efc
 80203cc:	08028eac 	.word	0x08028eac
 80203d0:	080289e4 	.word	0x080289e4

080203d4 <esp8266_Publish_ToF_BrokerMQTT>:
MQTT_StateTypeDef esp8266_Publish_ToF_BrokerMQTT(uint8_t *data, uint16_t size)
{
 80203d4:	b580      	push	{r7, lr}
 80203d6:	b086      	sub	sp, #24
 80203d8:	af00      	add	r7, sp, #0
 80203da:	6078      	str	r0, [r7, #4]
 80203dc:	460b      	mov	r3, r1
 80203de:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 80203e0:	2300      	movs	r3, #0
 80203e2:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT  || data == NULL)
 80203e4:	4b24      	ldr	r3, [pc, #144]	; (8020478 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 80203e6:	781b      	ldrb	r3, [r3, #0]
 80203e8:	2b06      	cmp	r3, #6
 80203ea:	d902      	bls.n	80203f2 <esp8266_Publish_ToF_BrokerMQTT+0x1e>
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d101      	bne.n	80203f6 <esp8266_Publish_ToF_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 80203f2:	2300      	movs	r3, #0
 80203f4:	e03b      	b.n	802046e <esp8266_Publish_ToF_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 80203f6:	887b      	ldrh	r3, [r7, #2]
 80203f8:	3328      	adds	r3, #40	; 0x28
 80203fa:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80203fc:	8a7b      	ldrh	r3, [r7, #18]
 80203fe:	4618      	mov	r0, r3
 8020400:	f005 f808 	bl	8025414 <malloc>
 8020404:	4603      	mov	r3, r0
 8020406:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 8020408:	8a7b      	ldrh	r3, [r7, #18]
 802040a:	461a      	mov	r2, r3
 802040c:	2100      	movs	r1, #0
 802040e:	68f8      	ldr	r0, [r7, #12]
 8020410:	f005 f838 	bl	8025484 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/ToF\",\"%s\",1,0", MQTT_CLIENTID, data);
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	4a19      	ldr	r2, [pc, #100]	; (802047c <esp8266_Publish_ToF_BrokerMQTT+0xa8>)
 8020418:	4919      	ldr	r1, [pc, #100]	; (8020480 <esp8266_Publish_ToF_BrokerMQTT+0xac>)
 802041a:	68f8      	ldr	r0, [r7, #12]
 802041c:	f005 fe38 	bl	8026090 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020420:	e011      	b.n	8020446 <esp8266_Publish_ToF_BrokerMQTT+0x72>
	{
		retry_count++;
 8020422:	697b      	ldr	r3, [r7, #20]
 8020424:	3301      	adds	r3, #1
 8020426:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 8020428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802042c:	f7e1 f9ce 	bl	80017cc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8020430:	697b      	ldr	r3, [r7, #20]
 8020432:	2b03      	cmp	r3, #3
 8020434:	dd07      	ble.n	8020446 <esp8266_Publish_ToF_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_ToF_BrokerMQTT() failed\r\n");
 8020436:	4813      	ldr	r0, [pc, #76]	; (8020484 <esp8266_Publish_ToF_BrokerMQTT+0xb0>)
 8020438:	f005 fe12 	bl	8026060 <puts>
			retry_count = 0;
 802043c:	2300      	movs	r3, #0
 802043e:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 8020440:	4b0d      	ldr	r3, [pc, #52]	; (8020478 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 8020442:	2200      	movs	r2, #0
 8020444:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8020446:	2301      	movs	r3, #1
 8020448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802044c:	490e      	ldr	r1, [pc, #56]	; (8020488 <esp8266_Publish_ToF_BrokerMQTT+0xb4>)
 802044e:	68f8      	ldr	r0, [r7, #12]
 8020450:	f7ff fa32 	bl	801f8b8 <esp8266_TransmitCmd>
 8020454:	4603      	mov	r3, r0
 8020456:	2b01      	cmp	r3, #1
 8020458:	d1e3      	bne.n	8020422 <esp8266_Publish_ToF_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 802045a:	2064      	movs	r0, #100	; 0x64
 802045c:	f7e1 f9b6 	bl	80017cc <HAL_Delay>
	retry_count = 0;
 8020460:	2300      	movs	r3, #0
 8020462:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TOF_MQTT;
 8020464:	4b04      	ldr	r3, [pc, #16]	; (8020478 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 8020466:	220b      	movs	r2, #11
 8020468:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 802046a:	4b03      	ldr	r3, [pc, #12]	; (8020478 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 802046c:	781b      	ldrb	r3, [r3, #0]
}
 802046e:	4618      	mov	r0, r3
 8020470:	3718      	adds	r7, #24
 8020472:	46bd      	mov	sp, r7
 8020474:	bd80      	pop	{r7, pc}
 8020476:	bf00      	nop
 8020478:	2000008b 	.word	0x2000008b
 802047c:	08028d08 	.word	0x08028d08
 8020480:	08028f1c 	.word	0x08028f1c
 8020484:	08028f3c 	.word	0x08028f3c
 8020488:	080289e4 	.word	0x080289e4

0802048c <get_mqtt_state>:


uint8_t get_mqtt_state()
{
 802048c:	b480      	push	{r7}
 802048e:	af00      	add	r7, sp, #0
	return mqtt_state;
 8020490:	4b03      	ldr	r3, [pc, #12]	; (80204a0 <get_mqtt_state+0x14>)
 8020492:	781b      	ldrb	r3, [r3, #0]
}
 8020494:	4618      	mov	r0, r3
 8020496:	46bd      	mov	sp, r7
 8020498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802049c:	4770      	bx	lr
 802049e:	bf00      	nop
 80204a0:	2000008b 	.word	0x2000008b

080204a4 <formate_json_temp>:
#include "esp8266.h"
#include "parson.h"
#include <stdio.h>

static char* formate_json_temp(int value)
{
 80204a4:	b580      	push	{r7, lr}
 80204a6:	b086      	sub	sp, #24
 80204a8:	af00      	add	r7, sp, #0
 80204aa:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 80204ac:	f7e4 f8c8 	bl	8004640 <json_value_init_object>
 80204b0:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d101      	bne.n	80204bc <formate_json_temp+0x18>
		return NULL;
 80204b8:	2300      	movs	r3, #0
 80204ba:	e020      	b.n	80204fe <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 80204bc:	6978      	ldr	r0, [r7, #20]
 80204be:	f7e4 f807 	bl	80044d0 <json_value_get_object>
 80204c2:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 80204c4:	693b      	ldr	r3, [r7, #16]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d101      	bne.n	80204ce <formate_json_temp+0x2a>
		return NULL;
 80204ca:	2300      	movs	r3, #0
 80204cc:	e017      	b.n	80204fe <formate_json_temp+0x5a>
	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 80204ce:	6878      	ldr	r0, [r7, #4]
 80204d0:	f7e0 f800 	bl	80004d4 <__aeabi_i2d>
 80204d4:	4602      	mov	r2, r0
 80204d6:	460b      	mov	r3, r1
 80204d8:	ec43 2b10 	vmov	d0, r2, r3
 80204dc:	490a      	ldr	r1, [pc, #40]	; (8020508 <formate_json_temp+0x64>)
 80204de:	6938      	ldr	r0, [r7, #16]
 80204e0:	f7e4 fa6c 	bl	80049bc <json_object_set_number>
 80204e4:	4603      	mov	r3, r0
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d001      	beq.n	80204ee <formate_json_temp+0x4a>
		return NULL;
 80204ea:	2300      	movs	r3, #0
 80204ec:	e007      	b.n	80204fe <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 80204ee:	6978      	ldr	r0, [r7, #20]
 80204f0:	f7e4 f968 	bl	80047c4 <json_serialize_to_string>
 80204f4:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 80204f6:	6978      	ldr	r0, [r7, #20]
 80204f8:	f7e4 f874 	bl	80045e4 <json_value_free>

	return serialized_string;
 80204fc:	68fb      	ldr	r3, [r7, #12]
}
 80204fe:	4618      	mov	r0, r3
 8020500:	3718      	adds	r7, #24
 8020502:	46bd      	mov	sp, r7
 8020504:	bd80      	pop	{r7, pc}
 8020506:	bf00      	nop
 8020508:	08028f70 	.word	0x08028f70

0802050c <IR_Init>:

void IR_Init()
{
 802050c:	b580      	push	{r7, lr}
 802050e:	af00      	add	r7, sp, #0
	if(mlx90614_init() == true)printf("Initialization IR OK ! \n");
 8020510:	f000 f8ea 	bl	80206e8 <mlx90614_init>
 8020514:	4603      	mov	r3, r0
 8020516:	2b00      	cmp	r3, #0
 8020518:	d003      	beq.n	8020522 <IR_Init+0x16>
 802051a:	4810      	ldr	r0, [pc, #64]	; (802055c <IR_Init+0x50>)
 802051c:	f005 fda0 	bl	8026060 <puts>
 8020520:	e002      	b.n	8020528 <IR_Init+0x1c>
	  else printf("Initialization IR Failed ! \n");
 8020522:	480f      	ldr	r0, [pc, #60]	; (8020560 <IR_Init+0x54>)
 8020524:	f005 fd9c 	bl	8026060 <puts>

	  mlx90614.configReg.DualIRSensor = 0;
 8020528:	4a0e      	ldr	r2, [pc, #56]	; (8020564 <IR_Init+0x58>)
 802052a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 802052e:	f36f 1386 	bfc	r3, #6, #1
 8020532:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.SelectObjAmb = 1;
 8020536:	4a0b      	ldr	r2, [pc, #44]	; (8020564 <IR_Init+0x58>)
 8020538:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 802053c:	2101      	movs	r1, #1
 802053e:	f361 1305 	bfi	r3, r1, #4, #2
 8020542:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.FIR = 4;
 8020546:	4a07      	ldr	r2, [pc, #28]	; (8020564 <IR_Init+0x58>)
 8020548:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 802054c:	2104      	movs	r1, #4
 802054e:	f361 0302 	bfi	r3, r1, #0, #3
 8020552:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
}
 8020556:	bf00      	nop
 8020558:	bd80      	pop	{r7, pc}
 802055a:	bf00      	nop
 802055c:	08028f78 	.word	0x08028f78
 8020560:	08028f90 	.word	0x08028f90
 8020564:	2000a3d0 	.word	0x2000a3d0

08020568 <IR_Process>:

void IR_Process()
{
 8020568:	b580      	push	{r7, lr}
 802056a:	b082      	sub	sp, #8
 802056c:	af00      	add	r7, sp, #0
	float temp = 0.0f;
 802056e:	f04f 0300 	mov.w	r3, #0
 8020572:	603b      	str	r3, [r7, #0]
	  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 8020574:	463b      	mov	r3, r7
 8020576:	4618      	mov	r0, r3
 8020578:	f000 f9c0 	bl	80208fc <mlx90614_getAmbient>
 802057c:	4603      	mov	r3, r0
 802057e:	2b00      	cmp	r3, #0
 8020580:	d009      	beq.n	8020596 <IR_Process+0x2e>
 8020582:	683b      	ldr	r3, [r7, #0]
 8020584:	4618      	mov	r0, r3
 8020586:	f7df ffb7 	bl	80004f8 <__aeabi_f2d>
 802058a:	4602      	mov	r2, r0
 802058c:	460b      	mov	r3, r1
 802058e:	4814      	ldr	r0, [pc, #80]	; (80205e0 <IR_Process+0x78>)
 8020590:	f005 fcca 	bl	8025f28 <iprintf>
 8020594:	e002      	b.n	802059c <IR_Process+0x34>
	  else printf("Failed to read ambient temperature\n");
 8020596:	4813      	ldr	r0, [pc, #76]	; (80205e4 <IR_Process+0x7c>)
 8020598:	f005 fd62 	bl	8026060 <puts>

	  HAL_Delay(200);
 802059c:	20c8      	movs	r0, #200	; 0xc8
 802059e:	f7e1 f915 	bl	80017cc <HAL_Delay>
	//Send Temperature data
	 char *data = formate_json_temp(temp);
 80205a2:	edd7 7a00 	vldr	s15, [r7]
 80205a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205aa:	ee17 0a90 	vmov	r0, s15
 80205ae:	f7ff ff79 	bl	80204a4 <formate_json_temp>
 80205b2:	6078      	str	r0, [r7, #4]
	  if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 80205b4:	6878      	ldr	r0, [r7, #4]
 80205b6:	f7df fde3 	bl	8000180 <strlen>
 80205ba:	4603      	mov	r3, r0
 80205bc:	4619      	mov	r1, r3
 80205be:	6878      	ldr	r0, [r7, #4]
 80205c0:	f7ff feac 	bl	802031c <esp8266_Publish_Temp_BrokerMQTT>
 80205c4:	4603      	mov	r3, r0
 80205c6:	2b0a      	cmp	r3, #10
 80205c8:	d002      	beq.n	80205d0 <IR_Process+0x68>
		printf("APP: B1 esp8266_Publish_Temp_BrokerMQTT() failed\n");
 80205ca:	4807      	ldr	r0, [pc, #28]	; (80205e8 <IR_Process+0x80>)
 80205cc:	f005 fd48 	bl	8026060 <puts>
	  json_free_serialized_string(data);
 80205d0:	6878      	ldr	r0, [r7, #4]
 80205d2:	f7e4 f929 	bl	8004828 <json_free_serialized_string>
}
 80205d6:	bf00      	nop
 80205d8:	3708      	adds	r7, #8
 80205da:	46bd      	mov	sp, r7
 80205dc:	bd80      	pop	{r7, pc}
 80205de:	bf00      	nop
 80205e0:	08028fac 	.word	0x08028fac
 80205e4:	08028fc8 	.word	0x08028fc8
 80205e8:	08028fec 	.word	0x08028fec

080205ec <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80205ec:	b580      	push	{r7, lr}
 80205ee:	b088      	sub	sp, #32
 80205f0:	af04      	add	r7, sp, #16
 80205f2:	4603      	mov	r3, r0
 80205f4:	6039      	str	r1, [r7, #0]
 80205f6:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80205f8:	79fb      	ldrb	r3, [r7, #7]
 80205fa:	b29a      	uxth	r2, r3
 80205fc:	2364      	movs	r3, #100	; 0x64
 80205fe:	9302      	str	r3, [sp, #8]
 8020600:	2303      	movs	r3, #3
 8020602:	9301      	str	r3, [sp, #4]
 8020604:	f107 030c 	add.w	r3, r7, #12
 8020608:	9300      	str	r3, [sp, #0]
 802060a:	2301      	movs	r3, #1
 802060c:	21b4      	movs	r1, #180	; 0xb4
 802060e:	480b      	ldr	r0, [pc, #44]	; (802063c <mlx90614_read16+0x50>)
 8020610:	f7fa fbcc 	bl	801adac <HAL_I2C_Mem_Read>
 8020614:	4603      	mov	r3, r0
 8020616:	2b00      	cmp	r3, #0
 8020618:	d001      	beq.n	802061e <mlx90614_read16+0x32>
    return false;
 802061a:	2300      	movs	r3, #0
 802061c:	e009      	b.n	8020632 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 802061e:	7b3b      	ldrb	r3, [r7, #12]
 8020620:	b21a      	sxth	r2, r3
 8020622:	7b7b      	ldrb	r3, [r7, #13]
 8020624:	021b      	lsls	r3, r3, #8
 8020626:	b21b      	sxth	r3, r3
 8020628:	4313      	orrs	r3, r2
 802062a:	b21a      	sxth	r2, r3
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	801a      	strh	r2, [r3, #0]
  return true;
 8020630:	2301      	movs	r3, #1
}
 8020632:	4618      	mov	r0, r3
 8020634:	3710      	adds	r7, #16
 8020636:	46bd      	mov	sp, r7
 8020638:	bd80      	pop	{r7, pc}
 802063a:	bf00      	nop
 802063c:	20000c1c 	.word	0x20000c1c

08020640 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8020640:	b580      	push	{r7, lr}
 8020642:	b084      	sub	sp, #16
 8020644:	af00      	add	r7, sp, #0
 8020646:	4603      	mov	r3, r0
 8020648:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 802064a:	4b22      	ldr	r3, [pc, #136]	; (80206d4 <mlx90614_calcTemperature+0x94>)
 802064c:	781b      	ldrb	r3, [r3, #0]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d108      	bne.n	8020664 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 8020652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020656:	ee07 3a90 	vmov	s15, r3
 802065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802065e:	edc7 7a03 	vstr	s15, [r7, #12]
 8020662:	e02e      	b.n	80206c2 <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8020664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020668:	ee07 3a90 	vmov	s15, r3
 802066c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020670:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80206d8 <mlx90614_calcTemperature+0x98>
 8020674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020678:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 802067c:	4b15      	ldr	r3, [pc, #84]	; (80206d4 <mlx90614_calcTemperature+0x94>)
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	2b01      	cmp	r3, #1
 8020682:	d01e      	beq.n	80206c2 <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 8020684:	edd7 7a03 	vldr	s15, [r7, #12]
 8020688:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80206dc <mlx90614_calcTemperature+0x9c>
 802068c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020690:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 8020694:	4b0f      	ldr	r3, [pc, #60]	; (80206d4 <mlx90614_calcTemperature+0x94>)
 8020696:	781b      	ldrb	r3, [r3, #0]
 8020698:	2b03      	cmp	r3, #3
 802069a:	d112      	bne.n	80206c2 <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 802069c:	edd7 7a03 	vldr	s15, [r7, #12]
 80206a0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80206a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80206a8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80206ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80206b0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80206e0 <mlx90614_calcTemperature+0xa0>
 80206b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80206b8:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 80206bc:	4809      	ldr	r0, [pc, #36]	; (80206e4 <mlx90614_calcTemperature+0xa4>)
 80206be:	f005 fccf 	bl	8026060 <puts>

			}
		}
	}
	return retTemp;
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	ee07 3a90 	vmov	s15, r3
}
 80206c8:	eeb0 0a67 	vmov.f32	s0, s15
 80206cc:	3710      	adds	r7, #16
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}
 80206d2:	bf00      	nop
 80206d4:	2000a3d0 	.word	0x2000a3d0
 80206d8:	3ca3d70a 	.word	0x3ca3d70a
 80206dc:	43889333 	.word	0x43889333
 80206e0:	42000000 	.word	0x42000000
 80206e4:	08029020 	.word	0x08029020

080206e8 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80206ec:	2234      	movs	r2, #52	; 0x34
 80206ee:	2100      	movs	r1, #0
 80206f0:	4821      	ldr	r0, [pc, #132]	; (8020778 <mlx90614_init+0x90>)
 80206f2:	f004 fec7 	bl	8025484 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80206f6:	4b20      	ldr	r3, [pc, #128]	; (8020778 <mlx90614_init+0x90>)
 80206f8:	2202      	movs	r2, #2
 80206fa:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80206fc:	2364      	movs	r3, #100	; 0x64
 80206fe:	2201      	movs	r2, #1
 8020700:	21b4      	movs	r1, #180	; 0xb4
 8020702:	481e      	ldr	r0, [pc, #120]	; (802077c <mlx90614_init+0x94>)
 8020704:	f7fa fc6c 	bl	801afe0 <HAL_I2C_IsDeviceReady>
 8020708:	4603      	mov	r3, r0
 802070a:	2b00      	cmp	r3, #0
 802070c:	d001      	beq.n	8020712 <mlx90614_init+0x2a>
    return false;
 802070e:	2300      	movs	r3, #0
 8020710:	e030      	b.n	8020774 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8020712:	491b      	ldr	r1, [pc, #108]	; (8020780 <mlx90614_init+0x98>)
 8020714:	2025      	movs	r0, #37	; 0x25
 8020716:	f7ff ff69 	bl	80205ec <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 802071a:	2000      	movs	r0, #0
 802071c:	f000 f832 	bl	8020784 <mlx90614_readID>
 8020720:	4603      	mov	r3, r0
 8020722:	f083 0301 	eor.w	r3, r3, #1
 8020726:	b2db      	uxtb	r3, r3
 8020728:	2b00      	cmp	r3, #0
 802072a:	d001      	beq.n	8020730 <mlx90614_init+0x48>
    return false;
 802072c:	2300      	movs	r3, #0
 802072e:	e021      	b.n	8020774 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8020730:	2000      	movs	r0, #0
 8020732:	f000 f861 	bl	80207f8 <mlx90614_getEmissivity>
 8020736:	4603      	mov	r3, r0
 8020738:	f083 0301 	eor.w	r3, r3, #1
 802073c:	b2db      	uxtb	r3, r3
 802073e:	2b00      	cmp	r3, #0
 8020740:	d001      	beq.n	8020746 <mlx90614_init+0x5e>
    return false;
 8020742:	2300      	movs	r3, #0
 8020744:	e016      	b.n	8020774 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 8020746:	2000      	movs	r0, #0
 8020748:	f000 f890 	bl	802086c <mlx90614_getMax>
 802074c:	4603      	mov	r3, r0
 802074e:	f083 0301 	eor.w	r3, r3, #1
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <mlx90614_init+0x74>
    return false;
 8020758:	2300      	movs	r3, #0
 802075a:	e00b      	b.n	8020774 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 802075c:	2000      	movs	r0, #0
 802075e:	f000 f8a9 	bl	80208b4 <mlx90614_getMin>
 8020762:	4603      	mov	r3, r0
 8020764:	f083 0301 	eor.w	r3, r3, #1
 8020768:	b2db      	uxtb	r3, r3
 802076a:	2b00      	cmp	r3, #0
 802076c:	d001      	beq.n	8020772 <mlx90614_init+0x8a>
    return false;
 802076e:	2300      	movs	r3, #0
 8020770:	e000      	b.n	8020774 <mlx90614_init+0x8c>

  return true;
 8020772:	2301      	movs	r3, #1
}
 8020774:	4618      	mov	r0, r3
 8020776:	bd80      	pop	{r7, pc}
 8020778:	2000a3d0 	.word	0x2000a3d0
 802077c:	20000c1c 	.word	0x20000c1c
 8020780:	2000a400 	.word	0x2000a400

08020784 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8020784:	b580      	push	{r7, lr}
 8020786:	b084      	sub	sp, #16
 8020788:	af00      	add	r7, sp, #0
 802078a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 802078c:	2300      	movs	r3, #0
 802078e:	60fb      	str	r3, [r7, #12]
 8020790:	e028      	b.n	80207e4 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8020792:	2300      	movs	r3, #0
 8020794:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	b2db      	uxtb	r3, r3
 802079a:	333c      	adds	r3, #60	; 0x3c
 802079c:	b2db      	uxtb	r3, r3
 802079e:	f107 020a 	add.w	r2, r7, #10
 80207a2:	4611      	mov	r1, r2
 80207a4:	4618      	mov	r0, r3
 80207a6:	f7ff ff21 	bl	80205ec <mlx90614_read16>
 80207aa:	4603      	mov	r3, r0
 80207ac:	f083 0301 	eor.w	r3, r3, #1
 80207b0:	b2db      	uxtb	r3, r3
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d001      	beq.n	80207ba <mlx90614_readID+0x36>
			return false;
 80207b6:	2300      	movs	r3, #0
 80207b8:	e018      	b.n	80207ec <mlx90614_readID+0x68>
		if(id != NULL)
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d006      	beq.n	80207ce <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	005b      	lsls	r3, r3, #1
 80207c4:	687a      	ldr	r2, [r7, #4]
 80207c6:	4413      	add	r3, r2
 80207c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80207cc:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 80207ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80207d2:	b299      	uxth	r1, r3
 80207d4:	4a07      	ldr	r2, [pc, #28]	; (80207f4 <mlx90614_readID+0x70>)
 80207d6:	68fb      	ldr	r3, [r7, #12]
 80207d8:	3314      	adds	r3, #20
 80207da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	3301      	adds	r3, #1
 80207e2:	60fb      	str	r3, [r7, #12]
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	2b03      	cmp	r3, #3
 80207e8:	ddd3      	ble.n	8020792 <mlx90614_readID+0xe>
	}
	return true;
 80207ea:	2301      	movs	r3, #1
}
 80207ec:	4618      	mov	r0, r3
 80207ee:	3710      	adds	r7, #16
 80207f0:	46bd      	mov	sp, r7
 80207f2:	bd80      	pop	{r7, pc}
 80207f4:	2000a3d0 	.word	0x2000a3d0

080207f8 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 80207f8:	b580      	push	{r7, lr}
 80207fa:	b082      	sub	sp, #8
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8020800:	4917      	ldr	r1, [pc, #92]	; (8020860 <mlx90614_getEmissivity+0x68>)
 8020802:	2024      	movs	r0, #36	; 0x24
 8020804:	f7ff fef2 	bl	80205ec <mlx90614_read16>
 8020808:	4603      	mov	r3, r0
 802080a:	2b00      	cmp	r3, #0
 802080c:	d022      	beq.n	8020854 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 802080e:	4b15      	ldr	r3, [pc, #84]	; (8020864 <mlx90614_getEmissivity+0x6c>)
 8020810:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020814:	b29b      	uxth	r3, r3
 8020816:	ee07 3a90 	vmov	s15, r3
 802081a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802081e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8020868 <mlx90614_getEmissivity+0x70>
 8020822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020826:	4b0f      	ldr	r3, [pc, #60]	; (8020864 <mlx90614_getEmissivity+0x6c>)
 8020828:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	2b00      	cmp	r3, #0
 8020830:	d00e      	beq.n	8020850 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8020832:	4b0c      	ldr	r3, [pc, #48]	; (8020864 <mlx90614_getEmissivity+0x6c>)
 8020834:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020838:	b29b      	uxth	r3, r3
 802083a:	ee07 3a90 	vmov	s15, r3
 802083e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020842:	eddf 6a09 	vldr	s13, [pc, #36]	; 8020868 <mlx90614_getEmissivity+0x70>
 8020846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8020850:	2301      	movs	r3, #1
 8020852:	e000      	b.n	8020856 <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8020854:	2300      	movs	r3, #0
}
 8020856:	4618      	mov	r0, r3
 8020858:	3708      	adds	r7, #8
 802085a:	46bd      	mov	sp, r7
 802085c:	bd80      	pop	{r7, pc}
 802085e:	bf00      	nop
 8020860:	2000a3d2 	.word	0x2000a3d2
 8020864:	2000a3d0 	.word	0x2000a3d0
 8020868:	477fff00 	.word	0x477fff00

0802086c <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 802086c:	b580      	push	{r7, lr}
 802086e:	b082      	sub	sp, #8
 8020870:	af00      	add	r7, sp, #0
 8020872:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8020874:	490d      	ldr	r1, [pc, #52]	; (80208ac <mlx90614_getMax+0x40>)
 8020876:	2020      	movs	r0, #32
 8020878:	f7ff feb8 	bl	80205ec <mlx90614_read16>
 802087c:	4603      	mov	r3, r0
 802087e:	2b00      	cmp	r3, #0
 8020880:	d00e      	beq.n	80208a0 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d009      	beq.n	802089c <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8020888:	4b09      	ldr	r3, [pc, #36]	; (80208b0 <mlx90614_getMax+0x44>)
 802088a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802088e:	ee07 3a90 	vmov	s15, r3
 8020892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	edc3 7a00 	vstr	s15, [r3]
		return true;
 802089c:	2301      	movs	r3, #1
 802089e:	e000      	b.n	80208a2 <mlx90614_getMax+0x36>
	}
	return false;
 80208a0:	2300      	movs	r3, #0
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	3708      	adds	r7, #8
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd80      	pop	{r7, pc}
 80208aa:	bf00      	nop
 80208ac:	2000a3da 	.word	0x2000a3da
 80208b0:	2000a3d0 	.word	0x2000a3d0

080208b4 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 80208b4:	b580      	push	{r7, lr}
 80208b6:	b082      	sub	sp, #8
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 80208bc:	490d      	ldr	r1, [pc, #52]	; (80208f4 <mlx90614_getMin+0x40>)
 80208be:	2021      	movs	r0, #33	; 0x21
 80208c0:	f7ff fe94 	bl	80205ec <mlx90614_read16>
 80208c4:	4603      	mov	r3, r0
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d00e      	beq.n	80208e8 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	d009      	beq.n	80208e4 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80208d0:	4b09      	ldr	r3, [pc, #36]	; (80208f8 <mlx90614_getMin+0x44>)
 80208d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80208d6:	ee07 3a90 	vmov	s15, r3
 80208da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80208e4:	2301      	movs	r3, #1
 80208e6:	e000      	b.n	80208ea <mlx90614_getMin+0x36>
	}
	return false;
 80208e8:	2300      	movs	r3, #0
}
 80208ea:	4618      	mov	r0, r3
 80208ec:	3708      	adds	r7, #8
 80208ee:	46bd      	mov	sp, r7
 80208f0:	bd80      	pop	{r7, pc}
 80208f2:	bf00      	nop
 80208f4:	2000a3dc 	.word	0x2000a3dc
 80208f8:	2000a3d0 	.word	0x2000a3d0

080208fc <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b082      	sub	sp, #8
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 8020904:	4912      	ldr	r1, [pc, #72]	; (8020950 <mlx90614_getAmbient+0x54>)
 8020906:	2006      	movs	r0, #6
 8020908:	f7ff fe70 	bl	80205ec <mlx90614_read16>
 802090c:	4603      	mov	r3, r0
 802090e:	2b00      	cmp	r3, #0
 8020910:	d019      	beq.n	8020946 <mlx90614_getAmbient+0x4a>
	{
    if(ambientTemp != NULL)
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d00a      	beq.n	802092e <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 8020918:	4b0e      	ldr	r3, [pc, #56]	; (8020954 <mlx90614_getAmbient+0x58>)
 802091a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802091e:	4618      	mov	r0, r3
 8020920:	f7ff fe8e 	bl	8020640 <mlx90614_calcTemperature>
 8020924:	eef0 7a40 	vmov.f32	s15, s0
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	edc3 7a00 	vstr	s15, [r3]
    *ambientTemp -= 3;
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	edd3 7a00 	vldr	s15, [r3]
 8020934:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8020938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8020942:	2301      	movs	r3, #1
 8020944:	e000      	b.n	8020948 <mlx90614_getAmbient+0x4c>
	}
	return false;
 8020946:	2300      	movs	r3, #0
}
 8020948:	4618      	mov	r0, r3
 802094a:	3708      	adds	r7, #8
 802094c:	46bd      	mov	sp, r7
 802094e:	bd80      	pop	{r7, pc}
 8020950:	2000a3d4 	.word	0x2000a3d4
 8020954:	2000a3d0 	.word	0x2000a3d0

08020958 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8020958:	b580      	push	{r7, lr}
 802095a:	b088      	sub	sp, #32
 802095c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 802095e:	2300      	movs	r3, #0
 8020960:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020962:	f107 0308 	add.w	r3, r7, #8
 8020966:	2218      	movs	r2, #24
 8020968:	2100      	movs	r1, #0
 802096a:	4618      	mov	r0, r3
 802096c:	f001 f8d8 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020970:	233f      	movs	r3, #63	; 0x3f
 8020972:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8020974:	2381      	movs	r3, #129	; 0x81
 8020976:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8020978:	1dfb      	adds	r3, r7, #7
 802097a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 802097c:	2301      	movs	r3, #1
 802097e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020980:	f107 0308 	add.w	r3, r7, #8
 8020984:	2100      	movs	r1, #0
 8020986:	4618      	mov	r0, r3
 8020988:	f001 fb54 	bl	8022034 <hci_send_req>
 802098c:	4603      	mov	r3, r0
 802098e:	2b00      	cmp	r3, #0
 8020990:	da01      	bge.n	8020996 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8020992:	23ff      	movs	r3, #255	; 0xff
 8020994:	e000      	b.n	8020998 <aci_gap_set_non_discoverable+0x40>
  return status;
 8020996:	79fb      	ldrb	r3, [r7, #7]
}
 8020998:	4618      	mov	r0, r3
 802099a:	3720      	adds	r7, #32
 802099c:	46bd      	mov	sp, r7
 802099e:	bd80      	pop	{r7, pc}

080209a0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80209a0:	b5b0      	push	{r4, r5, r7, lr}
 80209a2:	b0ce      	sub	sp, #312	; 0x138
 80209a4:	af00      	add	r7, sp, #0
 80209a6:	4605      	mov	r5, r0
 80209a8:	460c      	mov	r4, r1
 80209aa:	4610      	mov	r0, r2
 80209ac:	4619      	mov	r1, r3
 80209ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80209b2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80209b6:	462a      	mov	r2, r5
 80209b8:	701a      	strb	r2, [r3, #0]
 80209ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80209be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80209c2:	4622      	mov	r2, r4
 80209c4:	801a      	strh	r2, [r3, #0]
 80209c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80209ca:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80209ce:	4602      	mov	r2, r0
 80209d0:	801a      	strh	r2, [r3, #0]
 80209d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80209d6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80209da:	460a      	mov	r2, r1
 80209dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80209de:	f107 0310 	add.w	r3, r7, #16
 80209e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80209e6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80209ea:	3308      	adds	r3, #8
 80209ec:	f107 0210 	add.w	r2, r7, #16
 80209f0:	4413      	add	r3, r2
 80209f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80209f6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80209fa:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80209fe:	4413      	add	r3, r2
 8020a00:	3309      	adds	r3, #9
 8020a02:	f107 0210 	add.w	r2, r7, #16
 8020a06:	4413      	add	r3, r2
 8020a08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8020a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020a10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8020a14:	2200      	movs	r2, #0
 8020a16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8020a18:	2300      	movs	r3, #0
 8020a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8020a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020a22:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020a26:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8020a2a:	7812      	ldrb	r2, [r2, #0]
 8020a2c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8020a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a32:	3301      	adds	r3, #1
 8020a34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8020a38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020a3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020a40:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8020a44:	8812      	ldrh	r2, [r2, #0]
 8020a46:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8020a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a4e:	3302      	adds	r3, #2
 8020a50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8020a54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020a58:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020a5c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8020a60:	8812      	ldrh	r2, [r2, #0]
 8020a62:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8020a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a6a:	3302      	adds	r3, #2
 8020a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8020a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020a74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020a78:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8020a7c:	7812      	ldrb	r2, [r2, #0]
 8020a7e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8020a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a84:	3301      	adds	r3, #1
 8020a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8020a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020a8e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8020a92:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8020a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a98:	3301      	adds	r3, #1
 8020a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8020a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020aa2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8020aa6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8020aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020aac:	3301      	adds	r3, #1
 8020aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8020ab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020ab6:	3308      	adds	r3, #8
 8020ab8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8020abc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	f001 f81d 	bl	8021b00 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8020ac6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8020aca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8020ace:	4413      	add	r3, r2
 8020ad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8020ad4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8020ad8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8020adc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8020ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020ae2:	3301      	adds	r3, #1
 8020ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8020ae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8020aec:	3301      	adds	r3, #1
 8020aee:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8020af2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8020af6:	4618      	mov	r0, r3
 8020af8:	f001 f802 	bl	8021b00 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8020afc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8020b00:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8020b04:	4413      	add	r3, r2
 8020b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8020b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020b0e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8020b12:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8020b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020b18:	3302      	adds	r3, #2
 8020b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8020b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020b22:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8020b26:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8020b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020b2c:	3302      	adds	r3, #2
 8020b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020b36:	2218      	movs	r2, #24
 8020b38:	2100      	movs	r1, #0
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	f000 fff0 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020b40:	233f      	movs	r3, #63	; 0x3f
 8020b42:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8020b46:	2383      	movs	r3, #131	; 0x83
 8020b48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8020b4c:	f107 0310 	add.w	r3, r7, #16
 8020b50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8020b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8020b5c:	f107 030f 	add.w	r3, r7, #15
 8020b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8020b64:	2301      	movs	r3, #1
 8020b66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020b6e:	2100      	movs	r1, #0
 8020b70:	4618      	mov	r0, r3
 8020b72:	f001 fa5f 	bl	8022034 <hci_send_req>
 8020b76:	4603      	mov	r3, r0
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	da01      	bge.n	8020b80 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8020b7c:	23ff      	movs	r3, #255	; 0xff
 8020b7e:	e004      	b.n	8020b8a <aci_gap_set_discoverable+0x1ea>
  return status;
 8020b80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020b84:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8020b88:	781b      	ldrb	r3, [r3, #0]
}
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8020b90:	46bd      	mov	sp, r7
 8020b92:	bdb0      	pop	{r4, r5, r7, pc}

08020b94 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b0cc      	sub	sp, #304	; 0x130
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	4602      	mov	r2, r0
 8020b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020ba0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8020ba4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8020ba6:	f107 0310 	add.w	r3, r7, #16
 8020baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8020bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020bb2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8020bba:	2300      	movs	r3, #0
 8020bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8020bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020bc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020bc8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8020bcc:	7812      	ldrb	r2, [r2, #0]
 8020bce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8020bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020bd4:	3301      	adds	r3, #1
 8020bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020bde:	2218      	movs	r2, #24
 8020be0:	2100      	movs	r1, #0
 8020be2:	4618      	mov	r0, r3
 8020be4:	f000 ff9c 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020be8:	233f      	movs	r3, #63	; 0x3f
 8020bea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8020bee:	2385      	movs	r3, #133	; 0x85
 8020bf0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8020bf4:	f107 0310 	add.w	r3, r7, #16
 8020bf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8020bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020c00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8020c04:	f107 030f 	add.w	r3, r7, #15
 8020c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8020c0c:	2301      	movs	r3, #1
 8020c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020c16:	2100      	movs	r1, #0
 8020c18:	4618      	mov	r0, r3
 8020c1a:	f001 fa0b 	bl	8022034 <hci_send_req>
 8020c1e:	4603      	mov	r3, r0
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	da01      	bge.n	8020c28 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8020c24:	23ff      	movs	r3, #255	; 0xff
 8020c26:	e004      	b.n	8020c32 <aci_gap_set_io_capability+0x9e>
  return status;
 8020c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c2c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020c30:	781b      	ldrb	r3, [r3, #0]
}
 8020c32:	4618      	mov	r0, r3
 8020c34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8020c38:	46bd      	mov	sp, r7
 8020c3a:	bd80      	pop	{r7, pc}

08020c3c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8020c3c:	b5b0      	push	{r4, r5, r7, lr}
 8020c3e:	b0cc      	sub	sp, #304	; 0x130
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	4605      	mov	r5, r0
 8020c44:	460c      	mov	r4, r1
 8020c46:	4610      	mov	r0, r2
 8020c48:	4619      	mov	r1, r3
 8020c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c4e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8020c52:	462a      	mov	r2, r5
 8020c54:	701a      	strb	r2, [r3, #0]
 8020c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8020c5e:	4622      	mov	r2, r4
 8020c60:	701a      	strb	r2, [r3, #0]
 8020c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c66:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8020c6a:	4602      	mov	r2, r0
 8020c6c:	701a      	strb	r2, [r3, #0]
 8020c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8020c76:	460a      	mov	r2, r1
 8020c78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8020c7a:	f107 0310 	add.w	r3, r7, #16
 8020c7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8020c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020c86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8020c8e:	2300      	movs	r3, #0
 8020c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8020c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020c98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020c9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8020ca0:	7812      	ldrb	r2, [r2, #0]
 8020ca2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8020ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020ca8:	3301      	adds	r3, #1
 8020caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8020cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020cb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8020cba:	7812      	ldrb	r2, [r2, #0]
 8020cbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8020cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020cc2:	3301      	adds	r3, #1
 8020cc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8020cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020ccc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020cd0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8020cd4:	7812      	ldrb	r2, [r2, #0]
 8020cd6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8020cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020cdc:	3301      	adds	r3, #1
 8020cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8020ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020ce6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020cea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8020cee:	7812      	ldrb	r2, [r2, #0]
 8020cf0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8020cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020cf6:	3301      	adds	r3, #1
 8020cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8020cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020d00:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8020d04:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8020d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d0a:	3301      	adds	r3, #1
 8020d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8020d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020d14:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8020d18:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8020d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d1e:	3301      	adds	r3, #1
 8020d20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8020d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020d28:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8020d2c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8020d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d32:	3301      	adds	r3, #1
 8020d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8020d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020d3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8020d40:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8020d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d48:	3304      	adds	r3, #4
 8020d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8020d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020d52:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8020d56:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8020d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d5c:	3301      	adds	r3, #1
 8020d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020d66:	2218      	movs	r2, #24
 8020d68:	2100      	movs	r1, #0
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f000 fed8 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020d70:	233f      	movs	r3, #63	; 0x3f
 8020d72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8020d76:	2386      	movs	r3, #134	; 0x86
 8020d78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8020d7c:	f107 0310 	add.w	r3, r7, #16
 8020d80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8020d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020d88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8020d8c:	f107 030f 	add.w	r3, r7, #15
 8020d90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8020d94:	2301      	movs	r3, #1
 8020d96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020d9e:	2100      	movs	r1, #0
 8020da0:	4618      	mov	r0, r3
 8020da2:	f001 f947 	bl	8022034 <hci_send_req>
 8020da6:	4603      	mov	r3, r0
 8020da8:	2b00      	cmp	r3, #0
 8020daa:	da01      	bge.n	8020db0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8020dac:	23ff      	movs	r3, #255	; 0xff
 8020dae:	e004      	b.n	8020dba <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8020db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020db4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020db8:	781b      	ldrb	r3, [r3, #0]
}
 8020dba:	4618      	mov	r0, r3
 8020dbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8020dc0:	46bd      	mov	sp, r7
 8020dc2:	bdb0      	pop	{r4, r5, r7, pc}

08020dc4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8020dc4:	b580      	push	{r7, lr}
 8020dc6:	b0cc      	sub	sp, #304	; 0x130
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	4602      	mov	r2, r0
 8020dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8020dd4:	6019      	str	r1, [r3, #0]
 8020dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020dda:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8020dde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8020de0:	f107 0310 	add.w	r3, r7, #16
 8020de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8020de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020dec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020df0:	2200      	movs	r2, #0
 8020df2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8020df4:	2300      	movs	r3, #0
 8020df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8020dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020dfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020e02:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8020e06:	8812      	ldrh	r2, [r2, #0]
 8020e08:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8020e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020e0e:	3302      	adds	r3, #2
 8020e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8020e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020e18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020e1c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8020e20:	6812      	ldr	r2, [r2, #0]
 8020e22:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8020e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020e2a:	3304      	adds	r3, #4
 8020e2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020e30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020e34:	2218      	movs	r2, #24
 8020e36:	2100      	movs	r1, #0
 8020e38:	4618      	mov	r0, r3
 8020e3a:	f000 fe71 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020e3e:	233f      	movs	r3, #63	; 0x3f
 8020e40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8020e44:	2388      	movs	r3, #136	; 0x88
 8020e46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8020e4a:	f107 0310 	add.w	r3, r7, #16
 8020e4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8020e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020e56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8020e5a:	f107 030f 	add.w	r3, r7, #15
 8020e5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8020e62:	2301      	movs	r3, #1
 8020e64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020e6c:	2100      	movs	r1, #0
 8020e6e:	4618      	mov	r0, r3
 8020e70:	f001 f8e0 	bl	8022034 <hci_send_req>
 8020e74:	4603      	mov	r3, r0
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	da01      	bge.n	8020e7e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8020e7a:	23ff      	movs	r3, #255	; 0xff
 8020e7c:	e004      	b.n	8020e88 <aci_gap_pass_key_resp+0xc4>
  return status;
 8020e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020e82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8020e86:	781b      	ldrb	r3, [r3, #0]
}
 8020e88:	4618      	mov	r0, r3
 8020e8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8020e8e:	46bd      	mov	sp, r7
 8020e90:	bd80      	pop	{r7, pc}

08020e92 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8020e92:	b590      	push	{r4, r7, lr}
 8020e94:	b0cd      	sub	sp, #308	; 0x134
 8020e96:	af00      	add	r7, sp, #0
 8020e98:	4604      	mov	r4, r0
 8020e9a:	4608      	mov	r0, r1
 8020e9c:	4611      	mov	r1, r2
 8020e9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020ea2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8020ea6:	6013      	str	r3, [r2, #0]
 8020ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020eac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8020eb0:	4622      	mov	r2, r4
 8020eb2:	701a      	strb	r2, [r3, #0]
 8020eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020eb8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8020ebc:	4602      	mov	r2, r0
 8020ebe:	701a      	strb	r2, [r3, #0]
 8020ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020ec4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8020ec8:	460a      	mov	r2, r1
 8020eca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8020ecc:	f107 0310 	add.w	r3, r7, #16
 8020ed0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8020ed4:	f107 0308 	add.w	r3, r7, #8
 8020ed8:	2207      	movs	r2, #7
 8020eda:	2100      	movs	r1, #0
 8020edc:	4618      	mov	r0, r3
 8020ede:	f000 fe1f 	bl	8021b20 <Osal_MemSet>
  int index_input = 0;
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8020ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020eec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020ef0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8020ef4:	7812      	ldrb	r2, [r2, #0]
 8020ef6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8020ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020efc:	3301      	adds	r3, #1
 8020efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8020f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020f06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020f0a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8020f0e:	7812      	ldrb	r2, [r2, #0]
 8020f10:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8020f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020f16:	3301      	adds	r3, #1
 8020f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8020f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020f20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020f24:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8020f28:	7812      	ldrb	r2, [r2, #0]
 8020f2a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8020f2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020f30:	3301      	adds	r3, #1
 8020f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8020f36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020f3a:	2218      	movs	r2, #24
 8020f3c:	2100      	movs	r1, #0
 8020f3e:	4618      	mov	r0, r3
 8020f40:	f000 fdee 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8020f44:	233f      	movs	r3, #63	; 0x3f
 8020f46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8020f4a:	238a      	movs	r3, #138	; 0x8a
 8020f4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8020f50:	f107 0310 	add.w	r3, r7, #16
 8020f54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8020f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020f5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8020f60:	f107 0308 	add.w	r3, r7, #8
 8020f64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8020f68:	2307      	movs	r3, #7
 8020f6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8020f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020f72:	2100      	movs	r1, #0
 8020f74:	4618      	mov	r0, r3
 8020f76:	f001 f85d 	bl	8022034 <hci_send_req>
 8020f7a:	4603      	mov	r3, r0
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	da01      	bge.n	8020f84 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8020f80:	23ff      	movs	r3, #255	; 0xff
 8020f82:	e02e      	b.n	8020fe2 <aci_gap_init+0x150>
  if ( resp.Status )
 8020f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020f88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020f8c:	781b      	ldrb	r3, [r3, #0]
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d005      	beq.n	8020f9e <aci_gap_init+0x10c>
    return resp.Status;
 8020f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020f96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020f9a:	781b      	ldrb	r3, [r3, #0]
 8020f9c:	e021      	b.n	8020fe2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8020f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020fa2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020fa6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8020faa:	b29a      	uxth	r2, r3
 8020fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8020fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020fbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020fc0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8020fc4:	b29a      	uxth	r2, r3
 8020fc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8020fca:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8020fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020fd0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020fd4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8020fd8:	b29a      	uxth	r2, r3
 8020fda:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8020fde:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8020fe0:	2300      	movs	r3, #0
}
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8020fe8:	46bd      	mov	sp, r7
 8020fea:	bd90      	pop	{r4, r7, pc}

08020fec <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b0cc      	sub	sp, #304	; 0x130
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	4602      	mov	r2, r0
 8020ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8020ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8020ffc:	6019      	str	r1, [r3, #0]
 8020ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021002:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8021006:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8021008:	f107 0310 	add.w	r3, r7, #16
 802100c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8021010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021014:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021018:	2200      	movs	r2, #0
 802101a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802101c:	2300      	movs	r3, #0
 802101e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8021022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021026:	f507 7298 	add.w	r2, r7, #304	; 0x130
 802102a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 802102e:	7812      	ldrb	r2, [r2, #0]
 8021030:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8021032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021036:	3301      	adds	r3, #1
 8021038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 802103c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021040:	1c58      	adds	r0, r3, #1
 8021042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021046:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 802104a:	781a      	ldrb	r2, [r3, #0]
 802104c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8021054:	6819      	ldr	r1, [r3, #0]
 8021056:	f000 fd53 	bl	8021b00 <Osal_MemCpy>
  index_input += AdvDataLen;
 802105a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802105e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8021062:	781b      	ldrb	r3, [r3, #0]
 8021064:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8021068:	4413      	add	r3, r2
 802106a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 802106e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021072:	2218      	movs	r2, #24
 8021074:	2100      	movs	r1, #0
 8021076:	4618      	mov	r0, r3
 8021078:	f000 fd52 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 802107c:	233f      	movs	r3, #63	; 0x3f
 802107e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8021082:	238e      	movs	r3, #142	; 0x8e
 8021084:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8021088:	f107 0310 	add.w	r3, r7, #16
 802108c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8021090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021094:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8021098:	f107 030f 	add.w	r3, r7, #15
 802109c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80210a0:	2301      	movs	r3, #1
 80210a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80210a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80210aa:	2100      	movs	r1, #0
 80210ac:	4618      	mov	r0, r3
 80210ae:	f000 ffc1 	bl	8022034 <hci_send_req>
 80210b2:	4603      	mov	r3, r0
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	da01      	bge.n	80210bc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80210b8:	23ff      	movs	r3, #255	; 0xff
 80210ba:	e004      	b.n	80210c6 <aci_gap_update_adv_data+0xda>
  return status;
 80210bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80210c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80210c4:	781b      	ldrb	r3, [r3, #0]
}
 80210c6:	4618      	mov	r0, r3
 80210c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80210cc:	46bd      	mov	sp, r7
 80210ce:	bd80      	pop	{r7, pc}

080210d0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b088      	sub	sp, #32
 80210d4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80210d6:	2300      	movs	r3, #0
 80210d8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80210da:	f107 0308 	add.w	r3, r7, #8
 80210de:	2218      	movs	r2, #24
 80210e0:	2100      	movs	r1, #0
 80210e2:	4618      	mov	r0, r3
 80210e4:	f000 fd1c 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80210e8:	233f      	movs	r3, #63	; 0x3f
 80210ea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80210ec:	2392      	movs	r3, #146	; 0x92
 80210ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80210f0:	1dfb      	adds	r3, r7, #7
 80210f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80210f4:	2301      	movs	r3, #1
 80210f6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80210f8:	f107 0308 	add.w	r3, r7, #8
 80210fc:	2100      	movs	r1, #0
 80210fe:	4618      	mov	r0, r3
 8021100:	f000 ff98 	bl	8022034 <hci_send_req>
 8021104:	4603      	mov	r3, r0
 8021106:	2b00      	cmp	r3, #0
 8021108:	da01      	bge.n	802110e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 802110a:	23ff      	movs	r3, #255	; 0xff
 802110c:	e000      	b.n	8021110 <aci_gap_configure_whitelist+0x40>
  return status;
 802110e:	79fb      	ldrb	r3, [r7, #7]
}
 8021110:	4618      	mov	r0, r3
 8021112:	3720      	adds	r7, #32
 8021114:	46bd      	mov	sp, r7
 8021116:	bd80      	pop	{r7, pc}

08021118 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8021118:	b580      	push	{r7, lr}
 802111a:	b0cc      	sub	sp, #304	; 0x130
 802111c:	af00      	add	r7, sp, #0
 802111e:	4602      	mov	r2, r0
 8021120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021124:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021128:	801a      	strh	r2, [r3, #0]
 802112a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802112e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8021132:	460a      	mov	r2, r1
 8021134:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8021136:	f107 0310 	add.w	r3, r7, #16
 802113a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 802113e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021142:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021146:	2200      	movs	r2, #0
 8021148:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802114a:	2300      	movs	r3, #0
 802114c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8021150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021154:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021158:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 802115c:	8812      	ldrh	r2, [r2, #0]
 802115e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8021160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021164:	3302      	adds	r3, #2
 8021166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 802116a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802116e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021172:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8021176:	7812      	ldrb	r2, [r2, #0]
 8021178:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 802117a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802117e:	3301      	adds	r3, #1
 8021180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8021184:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021188:	2218      	movs	r2, #24
 802118a:	2100      	movs	r1, #0
 802118c:	4618      	mov	r0, r3
 802118e:	f000 fcc7 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8021192:	233f      	movs	r3, #63	; 0x3f
 8021194:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8021198:	23a5      	movs	r3, #165	; 0xa5
 802119a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 802119e:	f107 0310 	add.w	r3, r7, #16
 80211a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80211a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80211aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80211ae:	f107 030f 	add.w	r3, r7, #15
 80211b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80211b6:	2301      	movs	r3, #1
 80211b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80211bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211c0:	2100      	movs	r1, #0
 80211c2:	4618      	mov	r0, r3
 80211c4:	f000 ff36 	bl	8022034 <hci_send_req>
 80211c8:	4603      	mov	r3, r0
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	da01      	bge.n	80211d2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80211ce:	23ff      	movs	r3, #255	; 0xff
 80211d0:	e004      	b.n	80211dc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80211d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80211d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80211da:	781b      	ldrb	r3, [r3, #0]
}
 80211dc:	4618      	mov	r0, r3
 80211de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd80      	pop	{r7, pc}

080211e6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80211e6:	b580      	push	{r7, lr}
 80211e8:	b088      	sub	sp, #32
 80211ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80211ec:	2300      	movs	r3, #0
 80211ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80211f0:	f107 0308 	add.w	r3, r7, #8
 80211f4:	2218      	movs	r2, #24
 80211f6:	2100      	movs	r1, #0
 80211f8:	4618      	mov	r0, r3
 80211fa:	f000 fc91 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80211fe:	233f      	movs	r3, #63	; 0x3f
 8021200:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8021202:	f240 1301 	movw	r3, #257	; 0x101
 8021206:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8021208:	1dfb      	adds	r3, r7, #7
 802120a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 802120c:	2301      	movs	r3, #1
 802120e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8021210:	f107 0308 	add.w	r3, r7, #8
 8021214:	2100      	movs	r1, #0
 8021216:	4618      	mov	r0, r3
 8021218:	f000 ff0c 	bl	8022034 <hci_send_req>
 802121c:	4603      	mov	r3, r0
 802121e:	2b00      	cmp	r3, #0
 8021220:	da01      	bge.n	8021226 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8021222:	23ff      	movs	r3, #255	; 0xff
 8021224:	e000      	b.n	8021228 <aci_gatt_init+0x42>
  return status;
 8021226:	79fb      	ldrb	r3, [r7, #7]
}
 8021228:	4618      	mov	r0, r3
 802122a:	3720      	adds	r7, #32
 802122c:	46bd      	mov	sp, r7
 802122e:	bd80      	pop	{r7, pc}

08021230 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8021230:	b590      	push	{r4, r7, lr}
 8021232:	b0cf      	sub	sp, #316	; 0x13c
 8021234:	af00      	add	r7, sp, #0
 8021236:	4604      	mov	r4, r0
 8021238:	f507 709c 	add.w	r0, r7, #312	; 0x138
 802123c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8021240:	6001      	str	r1, [r0, #0]
 8021242:	4610      	mov	r0, r2
 8021244:	4619      	mov	r1, r3
 8021246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802124a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 802124e:	4622      	mov	r2, r4
 8021250:	701a      	strb	r2, [r3, #0]
 8021252:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021256:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802125a:	4602      	mov	r2, r0
 802125c:	701a      	strb	r2, [r3, #0]
 802125e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021262:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8021266:	460a      	mov	r2, r1
 8021268:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 802126a:	f107 0310 	add.w	r3, r7, #16
 802126e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8021272:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021276:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 802127a:	781b      	ldrb	r3, [r3, #0]
 802127c:	2b01      	cmp	r3, #1
 802127e:	d00a      	beq.n	8021296 <aci_gatt_add_service+0x66>
 8021280:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021284:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8021288:	781b      	ldrb	r3, [r3, #0]
 802128a:	2b02      	cmp	r3, #2
 802128c:	d101      	bne.n	8021292 <aci_gatt_add_service+0x62>
 802128e:	2311      	movs	r3, #17
 8021290:	e002      	b.n	8021298 <aci_gatt_add_service+0x68>
 8021292:	2301      	movs	r3, #1
 8021294:	e000      	b.n	8021298 <aci_gatt_add_service+0x68>
 8021296:	2303      	movs	r3, #3
 8021298:	f107 0210 	add.w	r2, r7, #16
 802129c:	4413      	add	r3, r2
 802129e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80212a2:	f107 030c 	add.w	r3, r7, #12
 80212a6:	2203      	movs	r2, #3
 80212a8:	2100      	movs	r1, #0
 80212aa:	4618      	mov	r0, r3
 80212ac:	f000 fc38 	bl	8021b20 <Osal_MemSet>
  int index_input = 0;
 80212b0:	2300      	movs	r3, #0
 80212b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80212b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80212ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80212be:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80212c2:	7812      	ldrb	r2, [r2, #0]
 80212c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80212c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80212ca:	3301      	adds	r3, #1
 80212cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80212d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80212d4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80212d8:	781b      	ldrb	r3, [r3, #0]
 80212da:	2b01      	cmp	r3, #1
 80212dc:	d002      	beq.n	80212e4 <aci_gatt_add_service+0xb4>
 80212de:	2b02      	cmp	r3, #2
 80212e0:	d004      	beq.n	80212ec <aci_gatt_add_service+0xbc>
 80212e2:	e007      	b.n	80212f4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80212e4:	2302      	movs	r3, #2
 80212e6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80212ea:	e005      	b.n	80212f8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80212ec:	2310      	movs	r3, #16
 80212ee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80212f2:	e001      	b.n	80212f8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80212f4:	2397      	movs	r3, #151	; 0x97
 80212f6:	e06c      	b.n	80213d2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80212f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80212fc:	1c58      	adds	r0, r3, #1
 80212fe:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8021302:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021306:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802130a:	6819      	ldr	r1, [r3, #0]
 802130c:	f000 fbf8 	bl	8021b00 <Osal_MemCpy>
    index_input += size;
 8021310:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8021314:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8021318:	4413      	add	r3, r2
 802131a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 802131e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021322:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8021326:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 802132a:	7812      	ldrb	r2, [r2, #0]
 802132c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 802132e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021332:	3301      	adds	r3, #1
 8021334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8021338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802133c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8021340:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8021344:	7812      	ldrb	r2, [r2, #0]
 8021346:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8021348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802134c:	3301      	adds	r3, #1
 802134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8021352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021356:	2218      	movs	r2, #24
 8021358:	2100      	movs	r1, #0
 802135a:	4618      	mov	r0, r3
 802135c:	f000 fbe0 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8021360:	233f      	movs	r3, #63	; 0x3f
 8021362:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8021366:	f44f 7381 	mov.w	r3, #258	; 0x102
 802136a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 802136e:	f107 0310 	add.w	r3, r7, #16
 8021372:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8021376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802137a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 802137e:	f107 030c 	add.w	r3, r7, #12
 8021382:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8021386:	2303      	movs	r3, #3
 8021388:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 802138c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021390:	2100      	movs	r1, #0
 8021392:	4618      	mov	r0, r3
 8021394:	f000 fe4e 	bl	8022034 <hci_send_req>
 8021398:	4603      	mov	r3, r0
 802139a:	2b00      	cmp	r3, #0
 802139c:	da01      	bge.n	80213a2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 802139e:	23ff      	movs	r3, #255	; 0xff
 80213a0:	e017      	b.n	80213d2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80213a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80213a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80213aa:	781b      	ldrb	r3, [r3, #0]
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d005      	beq.n	80213bc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80213b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80213b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80213b8:	781b      	ldrb	r3, [r3, #0]
 80213ba:	e00a      	b.n	80213d2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80213bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80213c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80213c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80213c8:	b29a      	uxth	r2, r3
 80213ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80213ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80213d0:	2300      	movs	r3, #0
}
 80213d2:	4618      	mov	r0, r3
 80213d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80213d8:	46bd      	mov	sp, r7
 80213da:	bd90      	pop	{r4, r7, pc}

080213dc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80213dc:	b590      	push	{r4, r7, lr}
 80213de:	b0d1      	sub	sp, #324	; 0x144
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	4604      	mov	r4, r0
 80213e4:	4608      	mov	r0, r1
 80213e6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80213ea:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80213ee:	600a      	str	r2, [r1, #0]
 80213f0:	4619      	mov	r1, r3
 80213f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80213f6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80213fa:	4622      	mov	r2, r4
 80213fc:	801a      	strh	r2, [r3, #0]
 80213fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021402:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8021406:	4602      	mov	r2, r0
 8021408:	701a      	strb	r2, [r3, #0]
 802140a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802140e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8021412:	460a      	mov	r2, r1
 8021414:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8021416:	f107 0318 	add.w	r3, r7, #24
 802141a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 802141e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021422:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8021426:	781b      	ldrb	r3, [r3, #0]
 8021428:	2b01      	cmp	r3, #1
 802142a:	d00a      	beq.n	8021442 <aci_gatt_add_char+0x66>
 802142c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021430:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8021434:	781b      	ldrb	r3, [r3, #0]
 8021436:	2b02      	cmp	r3, #2
 8021438:	d101      	bne.n	802143e <aci_gatt_add_char+0x62>
 802143a:	2313      	movs	r3, #19
 802143c:	e002      	b.n	8021444 <aci_gatt_add_char+0x68>
 802143e:	2303      	movs	r3, #3
 8021440:	e000      	b.n	8021444 <aci_gatt_add_char+0x68>
 8021442:	2305      	movs	r3, #5
 8021444:	f107 0218 	add.w	r2, r7, #24
 8021448:	4413      	add	r3, r2
 802144a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 802144e:	f107 0314 	add.w	r3, r7, #20
 8021452:	2203      	movs	r2, #3
 8021454:	2100      	movs	r1, #0
 8021456:	4618      	mov	r0, r3
 8021458:	f000 fb62 	bl	8021b20 <Osal_MemSet>
  int index_input = 0;
 802145c:	2300      	movs	r3, #0
 802145e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8021462:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8021466:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 802146a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 802146e:	8812      	ldrh	r2, [r2, #0]
 8021470:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8021472:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021476:	3302      	adds	r3, #2
 8021478:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 802147c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8021480:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8021484:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8021488:	7812      	ldrb	r2, [r2, #0]
 802148a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 802148c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021490:	3301      	adds	r3, #1
 8021492:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8021496:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802149a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	2b01      	cmp	r3, #1
 80214a2:	d002      	beq.n	80214aa <aci_gatt_add_char+0xce>
 80214a4:	2b02      	cmp	r3, #2
 80214a6:	d004      	beq.n	80214b2 <aci_gatt_add_char+0xd6>
 80214a8:	e007      	b.n	80214ba <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80214aa:	2302      	movs	r3, #2
 80214ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80214b0:	e005      	b.n	80214be <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80214b2:	2310      	movs	r3, #16
 80214b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80214b8:	e001      	b.n	80214be <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80214ba:	2397      	movs	r3, #151	; 0x97
 80214bc:	e091      	b.n	80215e2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80214be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80214c2:	1cd8      	adds	r0, r3, #3
 80214c4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80214c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80214cc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80214d0:	6819      	ldr	r1, [r3, #0]
 80214d2:	f000 fb15 	bl	8021b00 <Osal_MemCpy>
    index_input += size;
 80214d6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80214da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80214de:	4413      	add	r3, r2
 80214e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80214e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80214e8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80214ec:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80214f0:	8812      	ldrh	r2, [r2, #0]
 80214f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80214f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80214f8:	3302      	adds	r3, #2
 80214fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80214fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8021502:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8021506:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8021508:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802150c:	3301      	adds	r3, #1
 802150e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8021512:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8021516:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 802151a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 802151c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021520:	3301      	adds	r3, #1
 8021522:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8021526:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 802152a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 802152e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8021530:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021534:	3301      	adds	r3, #1
 8021536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 802153a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 802153e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8021542:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8021544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021548:	3301      	adds	r3, #1
 802154a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 802154e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8021552:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8021556:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8021558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802155c:	3301      	adds	r3, #1
 802155e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8021562:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021566:	2218      	movs	r2, #24
 8021568:	2100      	movs	r1, #0
 802156a:	4618      	mov	r0, r3
 802156c:	f000 fad8 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8021570:	233f      	movs	r3, #63	; 0x3f
 8021572:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8021576:	f44f 7382 	mov.w	r3, #260	; 0x104
 802157a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 802157e:	f107 0318 	add.w	r3, r7, #24
 8021582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8021586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802158a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 802158e:	f107 0314 	add.w	r3, r7, #20
 8021592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8021596:	2303      	movs	r3, #3
 8021598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 802159c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80215a0:	2100      	movs	r1, #0
 80215a2:	4618      	mov	r0, r3
 80215a4:	f000 fd46 	bl	8022034 <hci_send_req>
 80215a8:	4603      	mov	r3, r0
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	da01      	bge.n	80215b2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80215ae:	23ff      	movs	r3, #255	; 0xff
 80215b0:	e017      	b.n	80215e2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80215b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80215b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80215ba:	781b      	ldrb	r3, [r3, #0]
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d005      	beq.n	80215cc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80215c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80215c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80215c8:	781b      	ldrb	r3, [r3, #0]
 80215ca:	e00a      	b.n	80215e2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80215cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80215d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80215d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80215d8:	b29a      	uxth	r2, r3
 80215da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80215de:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80215e0:	2300      	movs	r3, #0
}
 80215e2:	4618      	mov	r0, r3
 80215e4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80215e8:	46bd      	mov	sp, r7
 80215ea:	bd90      	pop	{r4, r7, pc}

080215ec <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80215ec:	b5b0      	push	{r4, r5, r7, lr}
 80215ee:	b0cc      	sub	sp, #304	; 0x130
 80215f0:	af00      	add	r7, sp, #0
 80215f2:	4605      	mov	r5, r0
 80215f4:	460c      	mov	r4, r1
 80215f6:	4610      	mov	r0, r2
 80215f8:	4619      	mov	r1, r3
 80215fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80215fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021602:	462a      	mov	r2, r5
 8021604:	801a      	strh	r2, [r3, #0]
 8021606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802160a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802160e:	4622      	mov	r2, r4
 8021610:	801a      	strh	r2, [r3, #0]
 8021612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021616:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 802161a:	4602      	mov	r2, r0
 802161c:	701a      	strb	r2, [r3, #0]
 802161e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021622:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8021626:	460a      	mov	r2, r1
 8021628:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 802162a:	f107 0310 	add.w	r3, r7, #16
 802162e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8021632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021636:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 802163a:	2200      	movs	r2, #0
 802163c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802163e:	2300      	movs	r3, #0
 8021640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8021644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021648:	f507 7298 	add.w	r2, r7, #304	; 0x130
 802164c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8021650:	8812      	ldrh	r2, [r2, #0]
 8021652:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8021654:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021658:	3302      	adds	r3, #2
 802165a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 802165e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021662:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021666:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 802166a:	8812      	ldrh	r2, [r2, #0]
 802166c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 802166e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021672:	3302      	adds	r3, #2
 8021674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8021678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802167c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021680:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8021684:	7812      	ldrb	r2, [r2, #0]
 8021686:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8021688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802168c:	3301      	adds	r3, #1
 802168e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8021692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021696:	f507 7298 	add.w	r2, r7, #304	; 0x130
 802169a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 802169e:	7812      	ldrb	r2, [r2, #0]
 80216a0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80216a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80216a6:	3301      	adds	r3, #1
 80216a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80216ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80216b0:	1d98      	adds	r0, r3, #6
 80216b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80216b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80216ba:	781b      	ldrb	r3, [r3, #0]
 80216bc:	461a      	mov	r2, r3
 80216be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80216c2:	f000 fa1d 	bl	8021b00 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80216c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80216ca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80216ce:	781b      	ldrb	r3, [r3, #0]
 80216d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80216d4:	4413      	add	r3, r2
 80216d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80216da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80216de:	2218      	movs	r2, #24
 80216e0:	2100      	movs	r1, #0
 80216e2:	4618      	mov	r0, r3
 80216e4:	f000 fa1c 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80216e8:	233f      	movs	r3, #63	; 0x3f
 80216ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80216ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80216f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80216f6:	f107 0310 	add.w	r3, r7, #16
 80216fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80216fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8021706:	f107 030f 	add.w	r3, r7, #15
 802170a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 802170e:	2301      	movs	r3, #1
 8021710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8021714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021718:	2100      	movs	r1, #0
 802171a:	4618      	mov	r0, r3
 802171c:	f000 fc8a 	bl	8022034 <hci_send_req>
 8021720:	4603      	mov	r3, r0
 8021722:	2b00      	cmp	r3, #0
 8021724:	da01      	bge.n	802172a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8021726:	23ff      	movs	r3, #255	; 0xff
 8021728:	e004      	b.n	8021734 <aci_gatt_update_char_value+0x148>
  return status;
 802172a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802172e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021732:	781b      	ldrb	r3, [r3, #0]
}
 8021734:	4618      	mov	r0, r3
 8021736:	f507 7798 	add.w	r7, r7, #304	; 0x130
 802173a:	46bd      	mov	sp, r7
 802173c:	bdb0      	pop	{r4, r5, r7, pc}

0802173e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 802173e:	b580      	push	{r7, lr}
 8021740:	b0cc      	sub	sp, #304	; 0x130
 8021742:	af00      	add	r7, sp, #0
 8021744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802174c:	601a      	str	r2, [r3, #0]
 802174e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021752:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8021756:	4602      	mov	r2, r0
 8021758:	701a      	strb	r2, [r3, #0]
 802175a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802175e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021762:	460a      	mov	r2, r1
 8021764:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8021766:	f107 0310 	add.w	r3, r7, #16
 802176a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 802176e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021772:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021776:	2200      	movs	r2, #0
 8021778:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802177a:	2300      	movs	r3, #0
 802177c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8021780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021784:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021788:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 802178c:	7812      	ldrb	r2, [r2, #0]
 802178e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8021790:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021794:	3301      	adds	r3, #1
 8021796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 802179a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802179e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80217a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80217a6:	7812      	ldrb	r2, [r2, #0]
 80217a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80217aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80217ae:	3301      	adds	r3, #1
 80217b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80217b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80217b8:	1c98      	adds	r0, r3, #2
 80217ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80217be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80217c2:	781a      	ldrb	r2, [r3, #0]
 80217c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80217c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80217cc:	6819      	ldr	r1, [r3, #0]
 80217ce:	f000 f997 	bl	8021b00 <Osal_MemCpy>
  index_input += Length;
 80217d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80217d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80217da:	781b      	ldrb	r3, [r3, #0]
 80217dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80217e0:	4413      	add	r3, r2
 80217e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80217e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80217ea:	2218      	movs	r2, #24
 80217ec:	2100      	movs	r1, #0
 80217ee:	4618      	mov	r0, r3
 80217f0:	f000 f996 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80217f4:	233f      	movs	r3, #63	; 0x3f
 80217f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80217fa:	230c      	movs	r3, #12
 80217fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8021800:	f107 0310 	add.w	r3, r7, #16
 8021804:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8021808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802180c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8021810:	f107 030f 	add.w	r3, r7, #15
 8021814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8021818:	2301      	movs	r3, #1
 802181a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 802181e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021822:	2100      	movs	r1, #0
 8021824:	4618      	mov	r0, r3
 8021826:	f000 fc05 	bl	8022034 <hci_send_req>
 802182a:	4603      	mov	r3, r0
 802182c:	2b00      	cmp	r3, #0
 802182e:	da01      	bge.n	8021834 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8021830:	23ff      	movs	r3, #255	; 0xff
 8021832:	e004      	b.n	802183e <aci_hal_write_config_data+0x100>
  return status;
 8021834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021838:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 802183c:	781b      	ldrb	r3, [r3, #0]
}
 802183e:	4618      	mov	r0, r3
 8021840:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8021844:	46bd      	mov	sp, r7
 8021846:	bd80      	pop	{r7, pc}

08021848 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8021848:	b580      	push	{r7, lr}
 802184a:	b0cc      	sub	sp, #304	; 0x130
 802184c:	af00      	add	r7, sp, #0
 802184e:	4602      	mov	r2, r0
 8021850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021854:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8021858:	701a      	strb	r2, [r3, #0]
 802185a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802185e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021862:	460a      	mov	r2, r1
 8021864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8021866:	f107 0310 	add.w	r3, r7, #16
 802186a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 802186e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021872:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021876:	2200      	movs	r2, #0
 8021878:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802187a:	2300      	movs	r3, #0
 802187c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8021880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021884:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021888:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 802188c:	7812      	ldrb	r2, [r2, #0]
 802188e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8021890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021894:	3301      	adds	r3, #1
 8021896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 802189a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802189e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80218a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80218a6:	7812      	ldrb	r2, [r2, #0]
 80218a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80218aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80218ae:	3301      	adds	r3, #1
 80218b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80218b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218b8:	2218      	movs	r2, #24
 80218ba:	2100      	movs	r1, #0
 80218bc:	4618      	mov	r0, r3
 80218be:	f000 f92f 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80218c2:	233f      	movs	r3, #63	; 0x3f
 80218c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80218c8:	230f      	movs	r3, #15
 80218ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80218ce:	f107 0310 	add.w	r3, r7, #16
 80218d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80218d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80218da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80218de:	f107 030f 	add.w	r3, r7, #15
 80218e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80218e6:	2301      	movs	r3, #1
 80218e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80218ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218f0:	2100      	movs	r1, #0
 80218f2:	4618      	mov	r0, r3
 80218f4:	f000 fb9e 	bl	8022034 <hci_send_req>
 80218f8:	4603      	mov	r3, r0
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	da01      	bge.n	8021902 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80218fe:	23ff      	movs	r3, #255	; 0xff
 8021900:	e004      	b.n	802190c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8021902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021906:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 802190a:	781b      	ldrb	r3, [r3, #0]
}
 802190c:	4618      	mov	r0, r3
 802190e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8021912:	46bd      	mov	sp, r7
 8021914:	bd80      	pop	{r7, pc}

08021916 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8021916:	b580      	push	{r7, lr}
 8021918:	b0cc      	sub	sp, #304	; 0x130
 802191a:	af00      	add	r7, sp, #0
 802191c:	4602      	mov	r2, r0
 802191e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021922:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021926:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8021928:	f107 0310 	add.w	r3, r7, #16
 802192c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8021930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021934:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021938:	2200      	movs	r2, #0
 802193a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 802193c:	2300      	movs	r3, #0
 802193e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8021942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 802194a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 802194e:	8812      	ldrh	r2, [r2, #0]
 8021950:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8021952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021956:	3302      	adds	r3, #2
 8021958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 802195c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021960:	2218      	movs	r2, #24
 8021962:	2100      	movs	r1, #0
 8021964:	4618      	mov	r0, r3
 8021966:	f000 f8db 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x3f;
 802196a:	233f      	movs	r3, #63	; 0x3f
 802196c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8021970:	2318      	movs	r3, #24
 8021972:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8021976:	f107 0310 	add.w	r3, r7, #16
 802197a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 802197e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8021986:	f107 030f 	add.w	r3, r7, #15
 802198a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 802198e:	2301      	movs	r3, #1
 8021990:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8021994:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021998:	2100      	movs	r1, #0
 802199a:	4618      	mov	r0, r3
 802199c:	f000 fb4a 	bl	8022034 <hci_send_req>
 80219a0:	4603      	mov	r3, r0
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	da01      	bge.n	80219aa <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80219a6:	23ff      	movs	r3, #255	; 0xff
 80219a8:	e004      	b.n	80219b4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80219aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80219ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80219b2:	781b      	ldrb	r3, [r3, #0]
}
 80219b4:	4618      	mov	r0, r3
 80219b6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}

080219be <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80219be:	b580      	push	{r7, lr}
 80219c0:	b088      	sub	sp, #32
 80219c2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80219c4:	2300      	movs	r3, #0
 80219c6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80219c8:	f107 0308 	add.w	r3, r7, #8
 80219cc:	2218      	movs	r2, #24
 80219ce:	2100      	movs	r1, #0
 80219d0:	4618      	mov	r0, r3
 80219d2:	f000 f8a5 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x03;
 80219d6:	2303      	movs	r3, #3
 80219d8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80219da:	2303      	movs	r3, #3
 80219dc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80219de:	1dfb      	adds	r3, r7, #7
 80219e0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80219e2:	2301      	movs	r3, #1
 80219e4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80219e6:	f107 0308 	add.w	r3, r7, #8
 80219ea:	2100      	movs	r1, #0
 80219ec:	4618      	mov	r0, r3
 80219ee:	f000 fb21 	bl	8022034 <hci_send_req>
 80219f2:	4603      	mov	r3, r0
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	da01      	bge.n	80219fc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80219f8:	23ff      	movs	r3, #255	; 0xff
 80219fa:	e000      	b.n	80219fe <hci_reset+0x40>
  return status;
 80219fc:	79fb      	ldrb	r3, [r7, #7]
}
 80219fe:	4618      	mov	r0, r3
 8021a00:	3720      	adds	r7, #32
 8021a02:	46bd      	mov	sp, r7
 8021a04:	bd80      	pop	{r7, pc}

08021a06 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8021a06:	b590      	push	{r4, r7, lr}
 8021a08:	b0cd      	sub	sp, #308	; 0x134
 8021a0a:	af00      	add	r7, sp, #0
 8021a0c:	4604      	mov	r4, r0
 8021a0e:	4608      	mov	r0, r1
 8021a10:	4611      	mov	r1, r2
 8021a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021a16:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8021a1a:	4622      	mov	r2, r4
 8021a1c:	701a      	strb	r2, [r3, #0]
 8021a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021a22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8021a26:	4602      	mov	r2, r0
 8021a28:	701a      	strb	r2, [r3, #0]
 8021a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021a2e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8021a32:	460a      	mov	r2, r1
 8021a34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8021a36:	f107 0310 	add.w	r3, r7, #16
 8021a3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8021a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021a42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021a46:	2200      	movs	r2, #0
 8021a48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8021a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021a54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021a58:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8021a5c:	7812      	ldrb	r2, [r2, #0]
 8021a5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8021a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021a64:	3301      	adds	r3, #1
 8021a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8021a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021a72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8021a76:	7812      	ldrb	r2, [r2, #0]
 8021a78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8021a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021a7e:	3301      	adds	r3, #1
 8021a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8021a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8021a88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021a8c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8021a90:	7812      	ldrb	r2, [r2, #0]
 8021a92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8021a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021a98:	3301      	adds	r3, #1
 8021a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8021a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021aa2:	2218      	movs	r2, #24
 8021aa4:	2100      	movs	r1, #0
 8021aa6:	4618      	mov	r0, r3
 8021aa8:	f000 f83a 	bl	8021b20 <Osal_MemSet>
  rq.ogf = 0x08;
 8021aac:	2308      	movs	r3, #8
 8021aae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8021ab2:	2331      	movs	r3, #49	; 0x31
 8021ab4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8021ab8:	f107 0310 	add.w	r3, r7, #16
 8021abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8021ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8021ac8:	f107 030f 	add.w	r3, r7, #15
 8021acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8021ad0:	2301      	movs	r3, #1
 8021ad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8021ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021ada:	2100      	movs	r1, #0
 8021adc:	4618      	mov	r0, r3
 8021ade:	f000 faa9 	bl	8022034 <hci_send_req>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	da01      	bge.n	8021aec <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8021ae8:	23ff      	movs	r3, #255	; 0xff
 8021aea:	e004      	b.n	8021af6 <hci_le_set_default_phy+0xf0>
  return status;
 8021aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8021af0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8021af4:	781b      	ldrb	r3, [r3, #0]
}
 8021af6:	4618      	mov	r0, r3
 8021af8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8021afc:	46bd      	mov	sp, r7
 8021afe:	bd90      	pop	{r4, r7, pc}

08021b00 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8021b00:	b580      	push	{r7, lr}
 8021b02:	b084      	sub	sp, #16
 8021b04:	af00      	add	r7, sp, #0
 8021b06:	60f8      	str	r0, [r7, #12]
 8021b08:	60b9      	str	r1, [r7, #8]
 8021b0a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8021b0c:	687a      	ldr	r2, [r7, #4]
 8021b0e:	68b9      	ldr	r1, [r7, #8]
 8021b10:	68f8      	ldr	r0, [r7, #12]
 8021b12:	f003 fc8f 	bl	8025434 <memcpy>
 8021b16:	4603      	mov	r3, r0
}
 8021b18:	4618      	mov	r0, r3
 8021b1a:	3710      	adds	r7, #16
 8021b1c:	46bd      	mov	sp, r7
 8021b1e:	bd80      	pop	{r7, pc}

08021b20 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	b084      	sub	sp, #16
 8021b24:	af00      	add	r7, sp, #0
 8021b26:	60f8      	str	r0, [r7, #12]
 8021b28:	60b9      	str	r1, [r7, #8]
 8021b2a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8021b2c:	687a      	ldr	r2, [r7, #4]
 8021b2e:	68b9      	ldr	r1, [r7, #8]
 8021b30:	68f8      	ldr	r0, [r7, #12]
 8021b32:	f003 fca7 	bl	8025484 <memset>
 8021b36:	4603      	mov	r3, r0
}
 8021b38:	4618      	mov	r0, r3
 8021b3a:	3710      	adds	r7, #16
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8021b40:	b480      	push	{r7}
 8021b42:	af00      	add	r7, sp, #0
  return;
 8021b44:	bf00      	nop
}
 8021b46:	46bd      	mov	sp, r7
 8021b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b4c:	4770      	bx	lr

08021b4e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8021b4e:	b480      	push	{r7}
 8021b50:	af00      	add	r7, sp, #0
  return;
 8021b52:	bf00      	nop
}
 8021b54:	46bd      	mov	sp, r7
 8021b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b5a:	4770      	bx	lr

08021b5c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8021b5c:	b480      	push	{r7}
 8021b5e:	af00      	add	r7, sp, #0
  return;
 8021b60:	bf00      	nop
}
 8021b62:	46bd      	mov	sp, r7
 8021b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b68:	4770      	bx	lr

08021b6a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8021b6a:	b480      	push	{r7}
 8021b6c:	af00      	add	r7, sp, #0
  return;
 8021b6e:	bf00      	nop
}
 8021b70:	46bd      	mov	sp, r7
 8021b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b76:	4770      	bx	lr

08021b78 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8021b78:	b480      	push	{r7}
 8021b7a:	af00      	add	r7, sp, #0
  return;
 8021b7c:	bf00      	nop
}
 8021b7e:	46bd      	mov	sp, r7
 8021b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b84:	4770      	bx	lr

08021b86 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8021b86:	b480      	push	{r7}
 8021b88:	af00      	add	r7, sp, #0
  return;
 8021b8a:	bf00      	nop
}
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b92:	4770      	bx	lr

08021b94 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8021b94:	b480      	push	{r7}
 8021b96:	af00      	add	r7, sp, #0
  return;
 8021b98:	bf00      	nop
}
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba0:	4770      	bx	lr

08021ba2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8021ba2:	b480      	push	{r7}
 8021ba4:	af00      	add	r7, sp, #0
  return;
 8021ba6:	bf00      	nop
}
 8021ba8:	46bd      	mov	sp, r7
 8021baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bae:	4770      	bx	lr

08021bb0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8021bb0:	b480      	push	{r7}
 8021bb2:	af00      	add	r7, sp, #0
  return;
 8021bb4:	bf00      	nop
}
 8021bb6:	46bd      	mov	sp, r7
 8021bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bbc:	4770      	bx	lr

08021bbe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8021bbe:	b480      	push	{r7}
 8021bc0:	af00      	add	r7, sp, #0
  return;
 8021bc2:	bf00      	nop
}
 8021bc4:	46bd      	mov	sp, r7
 8021bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bca:	4770      	bx	lr

08021bcc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8021bcc:	b480      	push	{r7}
 8021bce:	af00      	add	r7, sp, #0
  return;
 8021bd0:	bf00      	nop
}
 8021bd2:	46bd      	mov	sp, r7
 8021bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bd8:	4770      	bx	lr

08021bda <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8021bda:	b480      	push	{r7}
 8021bdc:	af00      	add	r7, sp, #0
  return;
 8021bde:	bf00      	nop
}
 8021be0:	46bd      	mov	sp, r7
 8021be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021be6:	4770      	bx	lr

08021be8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8021be8:	b480      	push	{r7}
 8021bea:	af00      	add	r7, sp, #0
  return;
 8021bec:	bf00      	nop
}
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bf4:	4770      	bx	lr

08021bf6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8021bf6:	b480      	push	{r7}
 8021bf8:	af00      	add	r7, sp, #0
  return;
 8021bfa:	bf00      	nop
}
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c02:	4770      	bx	lr

08021c04 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8021c04:	b480      	push	{r7}
 8021c06:	af00      	add	r7, sp, #0
  return;
 8021c08:	bf00      	nop
}
 8021c0a:	46bd      	mov	sp, r7
 8021c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c10:	4770      	bx	lr

08021c12 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8021c12:	b480      	push	{r7}
 8021c14:	af00      	add	r7, sp, #0
  return;
 8021c16:	bf00      	nop
}
 8021c18:	46bd      	mov	sp, r7
 8021c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c1e:	4770      	bx	lr

08021c20 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8021c20:	b480      	push	{r7}
 8021c22:	af00      	add	r7, sp, #0
  return;
 8021c24:	bf00      	nop
}
 8021c26:	46bd      	mov	sp, r7
 8021c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c2c:	4770      	bx	lr
	...

08021c30 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8021c30:	b580      	push	{r7, lr}
 8021c32:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8021c34:	4b04      	ldr	r3, [pc, #16]	; (8021c48 <SVCCTL_Init+0x18>)
 8021c36:	2200      	movs	r2, #0
 8021c38:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8021c3a:	4b04      	ldr	r3, [pc, #16]	; (8021c4c <SVCCTL_Init+0x1c>)
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8021c40:	f000 f806 	bl	8021c50 <SVCCTL_SvcInit>

  return;
 8021c44:	bf00      	nop
}
 8021c46:	bd80      	pop	{r7, pc}
 8021c48:	20000b0c 	.word	0x20000b0c
 8021c4c:	20000b2c 	.word	0x20000b2c

08021c50 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8021c50:	b580      	push	{r7, lr}
 8021c52:	af00      	add	r7, sp, #0
  BAS_Init();
 8021c54:	f7ff ff74 	bl	8021b40 <BAS_Init>

  BLS_Init();
 8021c58:	f7ff ff79 	bl	8021b4e <BLS_Init>

  CRS_STM_Init();
 8021c5c:	f7ff ff7e 	bl	8021b5c <CRS_STM_Init>

  DIS_Init();
 8021c60:	f7ff ff83 	bl	8021b6a <DIS_Init>

  EDS_STM_Init();
 8021c64:	f7ff ff88 	bl	8021b78 <EDS_STM_Init>

  HIDS_Init();
 8021c68:	f7ff ff8d 	bl	8021b86 <HIDS_Init>

  HRS_Init();
 8021c6c:	f7ff ff92 	bl	8021b94 <HRS_Init>

  HTS_Init();
 8021c70:	f7ff ff97 	bl	8021ba2 <HTS_Init>

  IAS_Init();
 8021c74:	f7ff ff9c 	bl	8021bb0 <IAS_Init>

  LLS_Init();
 8021c78:	f7ff ffa1 	bl	8021bbe <LLS_Init>

  TPS_Init();
 8021c7c:	f7ff ffa6 	bl	8021bcc <TPS_Init>

  MOTENV_STM_Init();
 8021c80:	f7ff ffab 	bl	8021bda <MOTENV_STM_Init>

  P2PS_STM_Init();
 8021c84:	f7ff ffb0 	bl	8021be8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8021c88:	f7ff ffb5 	bl	8021bf6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8021c8c:	f7ff ffba 	bl	8021c04 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8021c90:	f7ff ffc6 	bl	8021c20 <BVOPUS_STM_Init>

  MESH_Init();
 8021c94:	f7ff ffbd 	bl	8021c12 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8021c98:	f002 f8ea 	bl	8023e70 <SVCCTL_InitCustomSvc>
  
  return;
 8021c9c:	bf00      	nop
}
 8021c9e:	bd80      	pop	{r7, pc}

08021ca0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8021ca0:	b480      	push	{r7}
 8021ca2:	b083      	sub	sp, #12
 8021ca4:	af00      	add	r7, sp, #0
 8021ca6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8021ca8:	4b09      	ldr	r3, [pc, #36]	; (8021cd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8021caa:	7f1b      	ldrb	r3, [r3, #28]
 8021cac:	4619      	mov	r1, r3
 8021cae:	4a08      	ldr	r2, [pc, #32]	; (8021cd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8021cb6:	4b06      	ldr	r3, [pc, #24]	; (8021cd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8021cb8:	7f1b      	ldrb	r3, [r3, #28]
 8021cba:	3301      	adds	r3, #1
 8021cbc:	b2da      	uxtb	r2, r3
 8021cbe:	4b04      	ldr	r3, [pc, #16]	; (8021cd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8021cc0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8021cc2:	bf00      	nop
}
 8021cc4:	370c      	adds	r7, #12
 8021cc6:	46bd      	mov	sp, r7
 8021cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ccc:	4770      	bx	lr
 8021cce:	bf00      	nop
 8021cd0:	20000b0c 	.word	0x20000b0c

08021cd4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8021cd4:	b580      	push	{r7, lr}
 8021cd6:	b086      	sub	sp, #24
 8021cd8:	af00      	add	r7, sp, #0
 8021cda:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	3301      	adds	r3, #1
 8021ce0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8021ce2:	2300      	movs	r3, #0
 8021ce4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8021ce6:	693b      	ldr	r3, [r7, #16]
 8021ce8:	781b      	ldrb	r3, [r3, #0]
 8021cea:	2bff      	cmp	r3, #255	; 0xff
 8021cec:	d125      	bne.n	8021d3a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8021cee:	693b      	ldr	r3, [r7, #16]
 8021cf0:	3302      	adds	r3, #2
 8021cf2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	881b      	ldrh	r3, [r3, #0]
 8021cf8:	b29b      	uxth	r3, r3
 8021cfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8021d02:	d118      	bne.n	8021d36 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8021d04:	2300      	movs	r3, #0
 8021d06:	757b      	strb	r3, [r7, #21]
 8021d08:	e00d      	b.n	8021d26 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8021d0a:	7d7b      	ldrb	r3, [r7, #21]
 8021d0c:	4a1a      	ldr	r2, [pc, #104]	; (8021d78 <SVCCTL_UserEvtRx+0xa4>)
 8021d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021d12:	6878      	ldr	r0, [r7, #4]
 8021d14:	4798      	blx	r3
 8021d16:	4603      	mov	r3, r0
 8021d18:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8021d1a:	7dfb      	ldrb	r3, [r7, #23]
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d108      	bne.n	8021d32 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8021d20:	7d7b      	ldrb	r3, [r7, #21]
 8021d22:	3301      	adds	r3, #1
 8021d24:	757b      	strb	r3, [r7, #21]
 8021d26:	4b14      	ldr	r3, [pc, #80]	; (8021d78 <SVCCTL_UserEvtRx+0xa4>)
 8021d28:	7f1b      	ldrb	r3, [r3, #28]
 8021d2a:	7d7a      	ldrb	r2, [r7, #21]
 8021d2c:	429a      	cmp	r2, r3
 8021d2e:	d3ec      	bcc.n	8021d0a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8021d30:	e002      	b.n	8021d38 <SVCCTL_UserEvtRx+0x64>
              break;
 8021d32:	bf00      	nop
          break;
 8021d34:	e000      	b.n	8021d38 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8021d36:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8021d38:	e000      	b.n	8021d3c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8021d3a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8021d3c:	7dfb      	ldrb	r3, [r7, #23]
 8021d3e:	2b02      	cmp	r3, #2
 8021d40:	d00f      	beq.n	8021d62 <SVCCTL_UserEvtRx+0x8e>
 8021d42:	2b02      	cmp	r3, #2
 8021d44:	dc10      	bgt.n	8021d68 <SVCCTL_UserEvtRx+0x94>
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d002      	beq.n	8021d50 <SVCCTL_UserEvtRx+0x7c>
 8021d4a:	2b01      	cmp	r3, #1
 8021d4c:	d006      	beq.n	8021d5c <SVCCTL_UserEvtRx+0x88>
 8021d4e:	e00b      	b.n	8021d68 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8021d50:	6878      	ldr	r0, [r7, #4]
 8021d52:	f000 fff1 	bl	8022d38 <SVCCTL_App_Notification>
 8021d56:	4603      	mov	r3, r0
 8021d58:	75bb      	strb	r3, [r7, #22]
      break;
 8021d5a:	e008      	b.n	8021d6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8021d5c:	2301      	movs	r3, #1
 8021d5e:	75bb      	strb	r3, [r7, #22]
      break;
 8021d60:	e005      	b.n	8021d6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8021d62:	2300      	movs	r3, #0
 8021d64:	75bb      	strb	r3, [r7, #22]
      break;
 8021d66:	e002      	b.n	8021d6e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8021d68:	2301      	movs	r3, #1
 8021d6a:	75bb      	strb	r3, [r7, #22]
      break;
 8021d6c:	bf00      	nop
  }

  return (return_status);
 8021d6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8021d70:	4618      	mov	r0, r3
 8021d72:	3718      	adds	r7, #24
 8021d74:	46bd      	mov	sp, r7
 8021d76:	bd80      	pop	{r7, pc}
 8021d78:	20000b0c 	.word	0x20000b0c

08021d7c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8021d7c:	b580      	push	{r7, lr}
 8021d7e:	b088      	sub	sp, #32
 8021d80:	af00      	add	r7, sp, #0
 8021d82:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8021d84:	f107 030c 	add.w	r3, r7, #12
 8021d88:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8021d90:	69fb      	ldr	r3, [r7, #28]
 8021d92:	212e      	movs	r1, #46	; 0x2e
 8021d94:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8021d98:	f000 fae2 	bl	8022360 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8021d9c:	69fb      	ldr	r3, [r7, #28]
 8021d9e:	330b      	adds	r3, #11
 8021da0:	78db      	ldrb	r3, [r3, #3]
}
 8021da2:	4618      	mov	r0, r3
 8021da4:	3720      	adds	r7, #32
 8021da6:	46bd      	mov	sp, r7
 8021da8:	bd80      	pop	{r7, pc}

08021daa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8021daa:	b580      	push	{r7, lr}
 8021dac:	b088      	sub	sp, #32
 8021dae:	af00      	add	r7, sp, #0
 8021db0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8021db2:	f107 030c 	add.w	r3, r7, #12
 8021db6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8021dbe:	69fb      	ldr	r3, [r7, #28]
 8021dc0:	210f      	movs	r1, #15
 8021dc2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8021dc6:	f000 facb 	bl	8022360 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8021dca:	69fb      	ldr	r3, [r7, #28]
 8021dcc:	330b      	adds	r3, #11
 8021dce:	78db      	ldrb	r3, [r3, #3]
}
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	3720      	adds	r7, #32
 8021dd4:	46bd      	mov	sp, r7
 8021dd6:	bd80      	pop	{r7, pc}

08021dd8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b088      	sub	sp, #32
 8021ddc:	af00      	add	r7, sp, #0
 8021dde:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8021de0:	f107 030c 	add.w	r3, r7, #12
 8021de4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8021de6:	69fb      	ldr	r3, [r7, #28]
 8021de8:	687a      	ldr	r2, [r7, #4]
 8021dea:	2110      	movs	r1, #16
 8021dec:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8021df0:	f000 fab6 	bl	8022360 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8021df4:	69fb      	ldr	r3, [r7, #28]
 8021df6:	330b      	adds	r3, #11
 8021df8:	78db      	ldrb	r3, [r3, #3]
}
 8021dfa:	4618      	mov	r0, r3
 8021dfc:	3720      	adds	r7, #32
 8021dfe:	46bd      	mov	sp, r7
 8021e00:	bd80      	pop	{r7, pc}
	...

08021e04 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8021e04:	b480      	push	{r7}
 8021e06:	b08b      	sub	sp, #44	; 0x2c
 8021e08:	af00      	add	r7, sp, #0
 8021e0a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8021e0c:	2300      	movs	r3, #0
 8021e0e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8021e10:	2300      	movs	r3, #0
 8021e12:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8021e14:	2300      	movs	r3, #0
 8021e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8021e18:	2300      	movs	r3, #0
 8021e1a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8021e1c:	2300      	movs	r3, #0
 8021e1e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8021e20:	2300      	movs	r3, #0
 8021e22:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8021e24:	2300      	movs	r3, #0
 8021e26:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8021e28:	2300      	movs	r3, #0
 8021e2a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8021e2c:	4b4a      	ldr	r3, [pc, #296]	; (8021f58 <SHCI_GetWirelessFwInfo+0x154>)
 8021e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021e30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021e34:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8021e36:	693b      	ldr	r3, [r7, #16]
 8021e38:	009b      	lsls	r3, r3, #2
 8021e3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021e3e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8021e46:	68bb      	ldr	r3, [r7, #8]
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	4a44      	ldr	r2, [pc, #272]	; (8021f5c <SHCI_GetWirelessFwInfo+0x158>)
 8021e4c:	4293      	cmp	r3, r2
 8021e4e:	d10f      	bne.n	8021e70 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8021e50:	68bb      	ldr	r3, [r7, #8]
 8021e52:	695b      	ldr	r3, [r3, #20]
 8021e54:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8021e56:	68bb      	ldr	r3, [r7, #8]
 8021e58:	699b      	ldr	r3, [r3, #24]
 8021e5a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8021e5c:	68bb      	ldr	r3, [r7, #8]
 8021e5e:	69db      	ldr	r3, [r3, #28]
 8021e60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8021e62:	68bb      	ldr	r3, [r7, #8]
 8021e64:	68db      	ldr	r3, [r3, #12]
 8021e66:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8021e68:	68bb      	ldr	r3, [r7, #8]
 8021e6a:	691b      	ldr	r3, [r3, #16]
 8021e6c:	617b      	str	r3, [r7, #20]
 8021e6e:	e01a      	b.n	8021ea6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8021e70:	693b      	ldr	r3, [r7, #16]
 8021e72:	009b      	lsls	r3, r3, #2
 8021e74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021e78:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8021e7c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8021e7e:	68fb      	ldr	r3, [r7, #12]
 8021e80:	681b      	ldr	r3, [r3, #0]
 8021e82:	691b      	ldr	r3, [r3, #16]
 8021e84:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	695b      	ldr	r3, [r3, #20]
 8021e8c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	699b      	ldr	r3, [r3, #24]
 8021e94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	685b      	ldr	r3, [r3, #4]
 8021e9c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	681b      	ldr	r3, [r3, #0]
 8021ea2:	689b      	ldr	r3, [r3, #8]
 8021ea4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8021ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ea8:	0e1b      	lsrs	r3, r3, #24
 8021eaa:	b2da      	uxtb	r2, r3
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8021eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021eb2:	0c1b      	lsrs	r3, r3, #16
 8021eb4:	b2da      	uxtb	r2, r3
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8021eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ebc:	0a1b      	lsrs	r3, r3, #8
 8021ebe:	b2da      	uxtb	r2, r3
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8021ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ec6:	091b      	lsrs	r3, r3, #4
 8021ec8:	b2db      	uxtb	r3, r3
 8021eca:	f003 030f 	and.w	r3, r3, #15
 8021ece:	b2da      	uxtb	r2, r3
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8021ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ed6:	b2db      	uxtb	r3, r3
 8021ed8:	f003 030f 	and.w	r3, r3, #15
 8021edc:	b2da      	uxtb	r2, r3
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8021ee2:	6a3b      	ldr	r3, [r7, #32]
 8021ee4:	0e1b      	lsrs	r3, r3, #24
 8021ee6:	b2da      	uxtb	r2, r3
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8021eec:	6a3b      	ldr	r3, [r7, #32]
 8021eee:	0c1b      	lsrs	r3, r3, #16
 8021ef0:	b2da      	uxtb	r2, r3
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8021ef6:	6a3b      	ldr	r3, [r7, #32]
 8021ef8:	0a1b      	lsrs	r3, r3, #8
 8021efa:	b2da      	uxtb	r2, r3
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8021f00:	6a3b      	ldr	r3, [r7, #32]
 8021f02:	b2da      	uxtb	r2, r3
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8021f08:	69fb      	ldr	r3, [r7, #28]
 8021f0a:	b2da      	uxtb	r2, r3
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8021f10:	69bb      	ldr	r3, [r7, #24]
 8021f12:	0e1b      	lsrs	r3, r3, #24
 8021f14:	b2da      	uxtb	r2, r3
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8021f1a:	69bb      	ldr	r3, [r7, #24]
 8021f1c:	0c1b      	lsrs	r3, r3, #16
 8021f1e:	b2da      	uxtb	r2, r3
 8021f20:	687b      	ldr	r3, [r7, #4]
 8021f22:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8021f24:	69bb      	ldr	r3, [r7, #24]
 8021f26:	0a1b      	lsrs	r3, r3, #8
 8021f28:	b2da      	uxtb	r2, r3
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8021f2e:	697b      	ldr	r3, [r7, #20]
 8021f30:	0e1b      	lsrs	r3, r3, #24
 8021f32:	b2da      	uxtb	r2, r3
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8021f38:	697b      	ldr	r3, [r7, #20]
 8021f3a:	0c1b      	lsrs	r3, r3, #16
 8021f3c:	b2da      	uxtb	r2, r3
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8021f42:	697b      	ldr	r3, [r7, #20]
 8021f44:	b2da      	uxtb	r2, r3
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8021f4a:	2300      	movs	r3, #0
}
 8021f4c:	4618      	mov	r0, r3
 8021f4e:	372c      	adds	r7, #44	; 0x2c
 8021f50:	46bd      	mov	sp, r7
 8021f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f56:	4770      	bx	lr
 8021f58:	58004000 	.word	0x58004000
 8021f5c:	a94656b9 	.word	0xa94656b9

08021f60 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b082      	sub	sp, #8
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	6078      	str	r0, [r7, #4]
 8021f68:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8021f6a:	683b      	ldr	r3, [r7, #0]
 8021f6c:	685b      	ldr	r3, [r3, #4]
 8021f6e:	4a08      	ldr	r2, [pc, #32]	; (8021f90 <hci_init+0x30>)
 8021f70:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8021f72:	4a08      	ldr	r2, [pc, #32]	; (8021f94 <hci_init+0x34>)
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8021f78:	4806      	ldr	r0, [pc, #24]	; (8021f94 <hci_init+0x34>)
 8021f7a:	f000 f973 	bl	8022264 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8021f7e:	683b      	ldr	r3, [r7, #0]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	4618      	mov	r0, r3
 8021f84:	f000 f8d4 	bl	8022130 <TlInit>

  return;
 8021f88:	bf00      	nop
}
 8021f8a:	3708      	adds	r7, #8
 8021f8c:	46bd      	mov	sp, r7
 8021f8e:	bd80      	pop	{r7, pc}
 8021f90:	2000a42c 	.word	0x2000a42c
 8021f94:	2000a404 	.word	0x2000a404

08021f98 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8021f98:	b580      	push	{r7, lr}
 8021f9a:	b084      	sub	sp, #16
 8021f9c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8021f9e:	4822      	ldr	r0, [pc, #136]	; (8022028 <hci_user_evt_proc+0x90>)
 8021fa0:	f000 fd50 	bl	8022a44 <LST_is_empty>
 8021fa4:	4603      	mov	r3, r0
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d12b      	bne.n	8022002 <hci_user_evt_proc+0x6a>
 8021faa:	4b20      	ldr	r3, [pc, #128]	; (802202c <hci_user_evt_proc+0x94>)
 8021fac:	781b      	ldrb	r3, [r3, #0]
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d027      	beq.n	8022002 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8021fb2:	f107 030c 	add.w	r3, r7, #12
 8021fb6:	4619      	mov	r1, r3
 8021fb8:	481b      	ldr	r0, [pc, #108]	; (8022028 <hci_user_evt_proc+0x90>)
 8021fba:	f000 fdd2 	bl	8022b62 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8021fbe:	4b1c      	ldr	r3, [pc, #112]	; (8022030 <hci_user_evt_proc+0x98>)
 8021fc0:	69db      	ldr	r3, [r3, #28]
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d00c      	beq.n	8021fe0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8021fc6:	68fb      	ldr	r3, [r7, #12]
 8021fc8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8021fca:	2301      	movs	r3, #1
 8021fcc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8021fce:	4b18      	ldr	r3, [pc, #96]	; (8022030 <hci_user_evt_proc+0x98>)
 8021fd0:	69db      	ldr	r3, [r3, #28]
 8021fd2:	1d3a      	adds	r2, r7, #4
 8021fd4:	4610      	mov	r0, r2
 8021fd6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8021fd8:	793a      	ldrb	r2, [r7, #4]
 8021fda:	4b14      	ldr	r3, [pc, #80]	; (802202c <hci_user_evt_proc+0x94>)
 8021fdc:	701a      	strb	r2, [r3, #0]
 8021fde:	e002      	b.n	8021fe6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8021fe0:	4b12      	ldr	r3, [pc, #72]	; (802202c <hci_user_evt_proc+0x94>)
 8021fe2:	2201      	movs	r2, #1
 8021fe4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8021fe6:	4b11      	ldr	r3, [pc, #68]	; (802202c <hci_user_evt_proc+0x94>)
 8021fe8:	781b      	ldrb	r3, [r3, #0]
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d004      	beq.n	8021ff8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8021fee:	68fb      	ldr	r3, [r7, #12]
 8021ff0:	4618      	mov	r0, r3
 8021ff2:	f000 fc03 	bl	80227fc <TL_MM_EvtDone>
 8021ff6:	e004      	b.n	8022002 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8021ff8:	68fb      	ldr	r3, [r7, #12]
 8021ffa:	4619      	mov	r1, r3
 8021ffc:	480a      	ldr	r0, [pc, #40]	; (8022028 <hci_user_evt_proc+0x90>)
 8021ffe:	f000 fd43 	bl	8022a88 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8022002:	4809      	ldr	r0, [pc, #36]	; (8022028 <hci_user_evt_proc+0x90>)
 8022004:	f000 fd1e 	bl	8022a44 <LST_is_empty>
 8022008:	4603      	mov	r3, r0
 802200a:	2b00      	cmp	r3, #0
 802200c:	d107      	bne.n	802201e <hci_user_evt_proc+0x86>
 802200e:	4b07      	ldr	r3, [pc, #28]	; (802202c <hci_user_evt_proc+0x94>)
 8022010:	781b      	ldrb	r3, [r3, #0]
 8022012:	2b00      	cmp	r3, #0
 8022014:	d003      	beq.n	802201e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8022016:	4804      	ldr	r0, [pc, #16]	; (8022028 <hci_user_evt_proc+0x90>)
 8022018:	f001 fcee 	bl	80239f8 <hci_notify_asynch_evt>
  }


  return;
 802201c:	bf00      	nop
 802201e:	bf00      	nop
}
 8022020:	3710      	adds	r7, #16
 8022022:	46bd      	mov	sp, r7
 8022024:	bd80      	pop	{r7, pc}
 8022026:	bf00      	nop
 8022028:	20000b34 	.word	0x20000b34
 802202c:	20000b40 	.word	0x20000b40
 8022030:	2000a404 	.word	0x2000a404

08022034 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b088      	sub	sp, #32
 8022038:	af00      	add	r7, sp, #0
 802203a:	6078      	str	r0, [r7, #4]
 802203c:	460b      	mov	r3, r1
 802203e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8022040:	2000      	movs	r0, #0
 8022042:	f000 f8cb 	bl	80221dc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8022046:	2300      	movs	r3, #0
 8022048:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	885b      	ldrh	r3, [r3, #2]
 802204e:	b21b      	sxth	r3, r3
 8022050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8022054:	b21a      	sxth	r2, r3
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	881b      	ldrh	r3, [r3, #0]
 802205a:	029b      	lsls	r3, r3, #10
 802205c:	b21b      	sxth	r3, r3
 802205e:	4313      	orrs	r3, r2
 8022060:	b21b      	sxth	r3, r3
 8022062:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	68db      	ldr	r3, [r3, #12]
 8022068:	b2d9      	uxtb	r1, r3
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	689a      	ldr	r2, [r3, #8]
 802206e:	8bbb      	ldrh	r3, [r7, #28]
 8022070:	4618      	mov	r0, r3
 8022072:	f000 f88d 	bl	8022190 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8022076:	e04e      	b.n	8022116 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8022078:	f248 00e8 	movw	r0, #33000	; 0x80e8
 802207c:	f001 fcd3 	bl	8023a26 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8022080:	e043      	b.n	802210a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8022082:	f107 030c 	add.w	r3, r7, #12
 8022086:	4619      	mov	r1, r3
 8022088:	4828      	ldr	r0, [pc, #160]	; (802212c <hci_send_req+0xf8>)
 802208a:	f000 fd6a 	bl	8022b62 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 802208e:	68fb      	ldr	r3, [r7, #12]
 8022090:	7a5b      	ldrb	r3, [r3, #9]
 8022092:	2b0f      	cmp	r3, #15
 8022094:	d114      	bne.n	80220c0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8022096:	68fb      	ldr	r3, [r7, #12]
 8022098:	330b      	adds	r3, #11
 802209a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 802209c:	693b      	ldr	r3, [r7, #16]
 802209e:	885b      	ldrh	r3, [r3, #2]
 80220a0:	b29b      	uxth	r3, r3
 80220a2:	8bba      	ldrh	r2, [r7, #28]
 80220a4:	429a      	cmp	r2, r3
 80220a6:	d104      	bne.n	80220b2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	691b      	ldr	r3, [r3, #16]
 80220ac:	693a      	ldr	r2, [r7, #16]
 80220ae:	7812      	ldrb	r2, [r2, #0]
 80220b0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80220b2:	693b      	ldr	r3, [r7, #16]
 80220b4:	785b      	ldrb	r3, [r3, #1]
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d027      	beq.n	802210a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80220ba:	2301      	movs	r3, #1
 80220bc:	77fb      	strb	r3, [r7, #31]
 80220be:	e024      	b.n	802210a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	330b      	adds	r3, #11
 80220c4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80220c6:	69bb      	ldr	r3, [r7, #24]
 80220c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80220cc:	b29b      	uxth	r3, r3
 80220ce:	8bba      	ldrh	r2, [r7, #28]
 80220d0:	429a      	cmp	r2, r3
 80220d2:	d114      	bne.n	80220fe <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80220d4:	68fb      	ldr	r3, [r7, #12]
 80220d6:	7a9b      	ldrb	r3, [r3, #10]
 80220d8:	3b03      	subs	r3, #3
 80220da:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	695a      	ldr	r2, [r3, #20]
 80220e0:	7dfb      	ldrb	r3, [r7, #23]
 80220e2:	429a      	cmp	r2, r3
 80220e4:	bfa8      	it	ge
 80220e6:	461a      	movge	r2, r3
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	6918      	ldr	r0, [r3, #16]
 80220f0:	69bb      	ldr	r3, [r7, #24]
 80220f2:	1cd9      	adds	r1, r3, #3
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	695b      	ldr	r3, [r3, #20]
 80220f8:	461a      	mov	r2, r3
 80220fa:	f003 f99b 	bl	8025434 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80220fe:	69bb      	ldr	r3, [r7, #24]
 8022100:	781b      	ldrb	r3, [r3, #0]
 8022102:	2b00      	cmp	r3, #0
 8022104:	d001      	beq.n	802210a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8022106:	2301      	movs	r3, #1
 8022108:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 802210a:	4808      	ldr	r0, [pc, #32]	; (802212c <hci_send_req+0xf8>)
 802210c:	f000 fc9a 	bl	8022a44 <LST_is_empty>
 8022110:	4603      	mov	r3, r0
 8022112:	2b00      	cmp	r3, #0
 8022114:	d0b5      	beq.n	8022082 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8022116:	7ffb      	ldrb	r3, [r7, #31]
 8022118:	2b00      	cmp	r3, #0
 802211a:	d0ad      	beq.n	8022078 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 802211c:	2001      	movs	r0, #1
 802211e:	f000 f85d 	bl	80221dc <NotifyCmdStatus>

  return 0;
 8022122:	2300      	movs	r3, #0
}
 8022124:	4618      	mov	r0, r3
 8022126:	3720      	adds	r7, #32
 8022128:	46bd      	mov	sp, r7
 802212a:	bd80      	pop	{r7, pc}
 802212c:	2000a424 	.word	0x2000a424

08022130 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8022130:	b580      	push	{r7, lr}
 8022132:	b086      	sub	sp, #24
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8022138:	480f      	ldr	r0, [pc, #60]	; (8022178 <TlInit+0x48>)
 802213a:	f000 fc73 	bl	8022a24 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 802213e:	4a0f      	ldr	r2, [pc, #60]	; (802217c <TlInit+0x4c>)
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8022144:	480e      	ldr	r0, [pc, #56]	; (8022180 <TlInit+0x50>)
 8022146:	f000 fc6d 	bl	8022a24 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 802214a:	4b0e      	ldr	r3, [pc, #56]	; (8022184 <TlInit+0x54>)
 802214c:	2201      	movs	r2, #1
 802214e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8022150:	4b0d      	ldr	r3, [pc, #52]	; (8022188 <TlInit+0x58>)
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	2b00      	cmp	r3, #0
 8022156:	d00a      	beq.n	802216e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 802215c:	4b0b      	ldr	r3, [pc, #44]	; (802218c <TlInit+0x5c>)
 802215e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8022160:	4b09      	ldr	r3, [pc, #36]	; (8022188 <TlInit+0x58>)
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	f107 0208 	add.w	r2, r7, #8
 8022168:	4610      	mov	r0, r2
 802216a:	4798      	blx	r3
  }

  return;
 802216c:	bf00      	nop
 802216e:	bf00      	nop
}
 8022170:	3718      	adds	r7, #24
 8022172:	46bd      	mov	sp, r7
 8022174:	bd80      	pop	{r7, pc}
 8022176:	bf00      	nop
 8022178:	2000a424 	.word	0x2000a424
 802217c:	20000b3c 	.word	0x20000b3c
 8022180:	20000b34 	.word	0x20000b34
 8022184:	20000b40 	.word	0x20000b40
 8022188:	2000a404 	.word	0x2000a404
 802218c:	0802221d 	.word	0x0802221d

08022190 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8022190:	b580      	push	{r7, lr}
 8022192:	b082      	sub	sp, #8
 8022194:	af00      	add	r7, sp, #0
 8022196:	4603      	mov	r3, r0
 8022198:	603a      	str	r2, [r7, #0]
 802219a:	80fb      	strh	r3, [r7, #6]
 802219c:	460b      	mov	r3, r1
 802219e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80221a0:	4b0c      	ldr	r3, [pc, #48]	; (80221d4 <SendCmd+0x44>)
 80221a2:	681b      	ldr	r3, [r3, #0]
 80221a4:	88fa      	ldrh	r2, [r7, #6]
 80221a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80221aa:	4b0a      	ldr	r3, [pc, #40]	; (80221d4 <SendCmd+0x44>)
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	797a      	ldrb	r2, [r7, #5]
 80221b0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80221b2:	4b08      	ldr	r3, [pc, #32]	; (80221d4 <SendCmd+0x44>)
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	330c      	adds	r3, #12
 80221b8:	797a      	ldrb	r2, [r7, #5]
 80221ba:	6839      	ldr	r1, [r7, #0]
 80221bc:	4618      	mov	r0, r3
 80221be:	f003 f939 	bl	8025434 <memcpy>

  hciContext.io.Send(0,0);
 80221c2:	4b05      	ldr	r3, [pc, #20]	; (80221d8 <SendCmd+0x48>)
 80221c4:	691b      	ldr	r3, [r3, #16]
 80221c6:	2100      	movs	r1, #0
 80221c8:	2000      	movs	r0, #0
 80221ca:	4798      	blx	r3

  return;
 80221cc:	bf00      	nop
}
 80221ce:	3708      	adds	r7, #8
 80221d0:	46bd      	mov	sp, r7
 80221d2:	bd80      	pop	{r7, pc}
 80221d4:	20000b3c 	.word	0x20000b3c
 80221d8:	2000a404 	.word	0x2000a404

080221dc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80221dc:	b580      	push	{r7, lr}
 80221de:	b082      	sub	sp, #8
 80221e0:	af00      	add	r7, sp, #0
 80221e2:	4603      	mov	r3, r0
 80221e4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80221e6:	79fb      	ldrb	r3, [r7, #7]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d108      	bne.n	80221fe <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80221ec:	4b0a      	ldr	r3, [pc, #40]	; (8022218 <NotifyCmdStatus+0x3c>)
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d00d      	beq.n	8022210 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80221f4:	4b08      	ldr	r3, [pc, #32]	; (8022218 <NotifyCmdStatus+0x3c>)
 80221f6:	681b      	ldr	r3, [r3, #0]
 80221f8:	2000      	movs	r0, #0
 80221fa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80221fc:	e008      	b.n	8022210 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80221fe:	4b06      	ldr	r3, [pc, #24]	; (8022218 <NotifyCmdStatus+0x3c>)
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d004      	beq.n	8022210 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8022206:	4b04      	ldr	r3, [pc, #16]	; (8022218 <NotifyCmdStatus+0x3c>)
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	2001      	movs	r0, #1
 802220c:	4798      	blx	r3
  return;
 802220e:	bf00      	nop
 8022210:	bf00      	nop
}
 8022212:	3708      	adds	r7, #8
 8022214:	46bd      	mov	sp, r7
 8022216:	bd80      	pop	{r7, pc}
 8022218:	2000a42c 	.word	0x2000a42c

0802221c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 802221c:	b580      	push	{r7, lr}
 802221e:	b082      	sub	sp, #8
 8022220:	af00      	add	r7, sp, #0
 8022222:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	7a5b      	ldrb	r3, [r3, #9]
 8022228:	2b0f      	cmp	r3, #15
 802222a:	d003      	beq.n	8022234 <TlEvtReceived+0x18>
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	7a5b      	ldrb	r3, [r3, #9]
 8022230:	2b0e      	cmp	r3, #14
 8022232:	d107      	bne.n	8022244 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8022234:	6879      	ldr	r1, [r7, #4]
 8022236:	4809      	ldr	r0, [pc, #36]	; (802225c <TlEvtReceived+0x40>)
 8022238:	f000 fc4c 	bl	8022ad4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 802223c:	2000      	movs	r0, #0
 802223e:	f001 fbe7 	bl	8023a10 <hci_cmd_resp_release>
 8022242:	e006      	b.n	8022252 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8022244:	6879      	ldr	r1, [r7, #4]
 8022246:	4806      	ldr	r0, [pc, #24]	; (8022260 <TlEvtReceived+0x44>)
 8022248:	f000 fc44 	bl	8022ad4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 802224c:	4804      	ldr	r0, [pc, #16]	; (8022260 <TlEvtReceived+0x44>)
 802224e:	f001 fbd3 	bl	80239f8 <hci_notify_asynch_evt>
  }

  return;
 8022252:	bf00      	nop
}
 8022254:	3708      	adds	r7, #8
 8022256:	46bd      	mov	sp, r7
 8022258:	bd80      	pop	{r7, pc}
 802225a:	bf00      	nop
 802225c:	2000a424 	.word	0x2000a424
 8022260:	20000b34 	.word	0x20000b34

08022264 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8022264:	b480      	push	{r7}
 8022266:	b083      	sub	sp, #12
 8022268:	af00      	add	r7, sp, #0
 802226a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	4a05      	ldr	r2, [pc, #20]	; (8022284 <hci_register_io_bus+0x20>)
 8022270:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	4a04      	ldr	r2, [pc, #16]	; (8022288 <hci_register_io_bus+0x24>)
 8022276:	611a      	str	r2, [r3, #16]

  return;
 8022278:	bf00      	nop
}
 802227a:	370c      	adds	r7, #12
 802227c:	46bd      	mov	sp, r7
 802227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022282:	4770      	bx	lr
 8022284:	08022575 	.word	0x08022575
 8022288:	080225dd 	.word	0x080225dd

0802228c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 802228c:	b580      	push	{r7, lr}
 802228e:	b082      	sub	sp, #8
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
 8022294:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8022296:	683b      	ldr	r3, [r7, #0]
 8022298:	685b      	ldr	r3, [r3, #4]
 802229a:	4a08      	ldr	r2, [pc, #32]	; (80222bc <shci_init+0x30>)
 802229c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 802229e:	4a08      	ldr	r2, [pc, #32]	; (80222c0 <shci_init+0x34>)
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80222a4:	4806      	ldr	r0, [pc, #24]	; (80222c0 <shci_init+0x34>)
 80222a6:	f000 f911 	bl	80224cc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80222aa:	683b      	ldr	r3, [r7, #0]
 80222ac:	681b      	ldr	r3, [r3, #0]
 80222ae:	4618      	mov	r0, r3
 80222b0:	f000 f894 	bl	80223dc <TlInit>

  return;
 80222b4:	bf00      	nop
}
 80222b6:	3708      	adds	r7, #8
 80222b8:	46bd      	mov	sp, r7
 80222ba:	bd80      	pop	{r7, pc}
 80222bc:	2000a450 	.word	0x2000a450
 80222c0:	2000a430 	.word	0x2000a430

080222c4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b084      	sub	sp, #16
 80222c8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80222ca:	4822      	ldr	r0, [pc, #136]	; (8022354 <shci_user_evt_proc+0x90>)
 80222cc:	f000 fbba 	bl	8022a44 <LST_is_empty>
 80222d0:	4603      	mov	r3, r0
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d12b      	bne.n	802232e <shci_user_evt_proc+0x6a>
 80222d6:	4b20      	ldr	r3, [pc, #128]	; (8022358 <shci_user_evt_proc+0x94>)
 80222d8:	781b      	ldrb	r3, [r3, #0]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d027      	beq.n	802232e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80222de:	f107 030c 	add.w	r3, r7, #12
 80222e2:	4619      	mov	r1, r3
 80222e4:	481b      	ldr	r0, [pc, #108]	; (8022354 <shci_user_evt_proc+0x90>)
 80222e6:	f000 fc3c 	bl	8022b62 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80222ea:	4b1c      	ldr	r3, [pc, #112]	; (802235c <shci_user_evt_proc+0x98>)
 80222ec:	69db      	ldr	r3, [r3, #28]
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	d00c      	beq.n	802230c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80222f2:	68fb      	ldr	r3, [r7, #12]
 80222f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80222f6:	2301      	movs	r3, #1
 80222f8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80222fa:	4b18      	ldr	r3, [pc, #96]	; (802235c <shci_user_evt_proc+0x98>)
 80222fc:	69db      	ldr	r3, [r3, #28]
 80222fe:	1d3a      	adds	r2, r7, #4
 8022300:	4610      	mov	r0, r2
 8022302:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8022304:	793a      	ldrb	r2, [r7, #4]
 8022306:	4b14      	ldr	r3, [pc, #80]	; (8022358 <shci_user_evt_proc+0x94>)
 8022308:	701a      	strb	r2, [r3, #0]
 802230a:	e002      	b.n	8022312 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 802230c:	4b12      	ldr	r3, [pc, #72]	; (8022358 <shci_user_evt_proc+0x94>)
 802230e:	2201      	movs	r2, #1
 8022310:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8022312:	4b11      	ldr	r3, [pc, #68]	; (8022358 <shci_user_evt_proc+0x94>)
 8022314:	781b      	ldrb	r3, [r3, #0]
 8022316:	2b00      	cmp	r3, #0
 8022318:	d004      	beq.n	8022324 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 802231a:	68fb      	ldr	r3, [r7, #12]
 802231c:	4618      	mov	r0, r3
 802231e:	f000 fa6d 	bl	80227fc <TL_MM_EvtDone>
 8022322:	e004      	b.n	802232e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8022324:	68fb      	ldr	r3, [r7, #12]
 8022326:	4619      	mov	r1, r3
 8022328:	480a      	ldr	r0, [pc, #40]	; (8022354 <shci_user_evt_proc+0x90>)
 802232a:	f000 fbad 	bl	8022a88 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 802232e:	4809      	ldr	r0, [pc, #36]	; (8022354 <shci_user_evt_proc+0x90>)
 8022330:	f000 fb88 	bl	8022a44 <LST_is_empty>
 8022334:	4603      	mov	r3, r0
 8022336:	2b00      	cmp	r3, #0
 8022338:	d107      	bne.n	802234a <shci_user_evt_proc+0x86>
 802233a:	4b07      	ldr	r3, [pc, #28]	; (8022358 <shci_user_evt_proc+0x94>)
 802233c:	781b      	ldrb	r3, [r3, #0]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d003      	beq.n	802234a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8022342:	4804      	ldr	r0, [pc, #16]	; (8022354 <shci_user_evt_proc+0x90>)
 8022344:	f7df fa83 	bl	800184e <shci_notify_asynch_evt>
  }


  return;
 8022348:	bf00      	nop
 802234a:	bf00      	nop
}
 802234c:	3710      	adds	r7, #16
 802234e:	46bd      	mov	sp, r7
 8022350:	bd80      	pop	{r7, pc}
 8022352:	bf00      	nop
 8022354:	20000b44 	.word	0x20000b44
 8022358:	20000b54 	.word	0x20000b54
 802235c:	2000a430 	.word	0x2000a430

08022360 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8022360:	b580      	push	{r7, lr}
 8022362:	b084      	sub	sp, #16
 8022364:	af00      	add	r7, sp, #0
 8022366:	60ba      	str	r2, [r7, #8]
 8022368:	607b      	str	r3, [r7, #4]
 802236a:	4603      	mov	r3, r0
 802236c:	81fb      	strh	r3, [r7, #14]
 802236e:	460b      	mov	r3, r1
 8022370:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8022372:	2000      	movs	r0, #0
 8022374:	f000 f864 	bl	8022440 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8022378:	4b16      	ldr	r3, [pc, #88]	; (80223d4 <shci_send+0x74>)
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	89fa      	ldrh	r2, [r7, #14]
 802237e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8022382:	4b14      	ldr	r3, [pc, #80]	; (80223d4 <shci_send+0x74>)
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	7b7a      	ldrb	r2, [r7, #13]
 8022388:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 802238a:	4b12      	ldr	r3, [pc, #72]	; (80223d4 <shci_send+0x74>)
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	330c      	adds	r3, #12
 8022390:	7b7a      	ldrb	r2, [r7, #13]
 8022392:	68b9      	ldr	r1, [r7, #8]
 8022394:	4618      	mov	r0, r3
 8022396:	f003 f84d 	bl	8025434 <memcpy>

  shciContext.io.Send(0,0);
 802239a:	4b0f      	ldr	r3, [pc, #60]	; (80223d8 <shci_send+0x78>)
 802239c:	691b      	ldr	r3, [r3, #16]
 802239e:	2100      	movs	r1, #0
 80223a0:	2000      	movs	r0, #0
 80223a2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80223a4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80223a8:	f7df fa68 	bl	800187c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	f103 0008 	add.w	r0, r3, #8
 80223b2:	4b08      	ldr	r3, [pc, #32]	; (80223d4 <shci_send+0x74>)
 80223b4:	6819      	ldr	r1, [r3, #0]
 80223b6:	4b07      	ldr	r3, [pc, #28]	; (80223d4 <shci_send+0x74>)
 80223b8:	681b      	ldr	r3, [r3, #0]
 80223ba:	789b      	ldrb	r3, [r3, #2]
 80223bc:	3303      	adds	r3, #3
 80223be:	461a      	mov	r2, r3
 80223c0:	f003 f838 	bl	8025434 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80223c4:	2001      	movs	r0, #1
 80223c6:	f000 f83b 	bl	8022440 <Cmd_SetStatus>

  return;
 80223ca:	bf00      	nop
}
 80223cc:	3710      	adds	r7, #16
 80223ce:	46bd      	mov	sp, r7
 80223d0:	bd80      	pop	{r7, pc}
 80223d2:	bf00      	nop
 80223d4:	20000b50 	.word	0x20000b50
 80223d8:	2000a430 	.word	0x2000a430

080223dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80223dc:	b580      	push	{r7, lr}
 80223de:	b086      	sub	sp, #24
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80223e4:	4a10      	ldr	r2, [pc, #64]	; (8022428 <TlInit+0x4c>)
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80223ea:	4810      	ldr	r0, [pc, #64]	; (802242c <TlInit+0x50>)
 80223ec:	f000 fb1a 	bl	8022a24 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80223f0:	2001      	movs	r0, #1
 80223f2:	f000 f825 	bl	8022440 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80223f6:	4b0e      	ldr	r3, [pc, #56]	; (8022430 <TlInit+0x54>)
 80223f8:	2201      	movs	r2, #1
 80223fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80223fc:	4b0d      	ldr	r3, [pc, #52]	; (8022434 <TlInit+0x58>)
 80223fe:	681b      	ldr	r3, [r3, #0]
 8022400:	2b00      	cmp	r3, #0
 8022402:	d00c      	beq.n	802241e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8022408:	4b0b      	ldr	r3, [pc, #44]	; (8022438 <TlInit+0x5c>)
 802240a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 802240c:	4b0b      	ldr	r3, [pc, #44]	; (802243c <TlInit+0x60>)
 802240e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8022410:	4b08      	ldr	r3, [pc, #32]	; (8022434 <TlInit+0x58>)
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	f107 020c 	add.w	r2, r7, #12
 8022418:	4610      	mov	r0, r2
 802241a:	4798      	blx	r3
  }

  return;
 802241c:	bf00      	nop
 802241e:	bf00      	nop
}
 8022420:	3718      	adds	r7, #24
 8022422:	46bd      	mov	sp, r7
 8022424:	bd80      	pop	{r7, pc}
 8022426:	bf00      	nop
 8022428:	20000b50 	.word	0x20000b50
 802242c:	20000b44 	.word	0x20000b44
 8022430:	20000b54 	.word	0x20000b54
 8022434:	2000a430 	.word	0x2000a430
 8022438:	08022491 	.word	0x08022491
 802243c:	080224a9 	.word	0x080224a9

08022440 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8022440:	b580      	push	{r7, lr}
 8022442:	b082      	sub	sp, #8
 8022444:	af00      	add	r7, sp, #0
 8022446:	4603      	mov	r3, r0
 8022448:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 802244a:	79fb      	ldrb	r3, [r7, #7]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d10b      	bne.n	8022468 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8022450:	4b0d      	ldr	r3, [pc, #52]	; (8022488 <Cmd_SetStatus+0x48>)
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	2b00      	cmp	r3, #0
 8022456:	d003      	beq.n	8022460 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8022458:	4b0b      	ldr	r3, [pc, #44]	; (8022488 <Cmd_SetStatus+0x48>)
 802245a:	681b      	ldr	r3, [r3, #0]
 802245c:	2000      	movs	r0, #0
 802245e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8022460:	4b0a      	ldr	r3, [pc, #40]	; (802248c <Cmd_SetStatus+0x4c>)
 8022462:	2200      	movs	r2, #0
 8022464:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8022466:	e00b      	b.n	8022480 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8022468:	4b08      	ldr	r3, [pc, #32]	; (802248c <Cmd_SetStatus+0x4c>)
 802246a:	2201      	movs	r2, #1
 802246c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 802246e:	4b06      	ldr	r3, [pc, #24]	; (8022488 <Cmd_SetStatus+0x48>)
 8022470:	681b      	ldr	r3, [r3, #0]
 8022472:	2b00      	cmp	r3, #0
 8022474:	d004      	beq.n	8022480 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8022476:	4b04      	ldr	r3, [pc, #16]	; (8022488 <Cmd_SetStatus+0x48>)
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	2001      	movs	r0, #1
 802247c:	4798      	blx	r3
  return;
 802247e:	bf00      	nop
 8022480:	bf00      	nop
}
 8022482:	3708      	adds	r7, #8
 8022484:	46bd      	mov	sp, r7
 8022486:	bd80      	pop	{r7, pc}
 8022488:	2000a450 	.word	0x2000a450
 802248c:	20000b4c 	.word	0x20000b4c

08022490 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8022490:	b580      	push	{r7, lr}
 8022492:	b082      	sub	sp, #8
 8022494:	af00      	add	r7, sp, #0
 8022496:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8022498:	2000      	movs	r0, #0
 802249a:	f7df f9e4 	bl	8001866 <shci_cmd_resp_release>

  return;
 802249e:	bf00      	nop
}
 80224a0:	3708      	adds	r7, #8
 80224a2:	46bd      	mov	sp, r7
 80224a4:	bd80      	pop	{r7, pc}
	...

080224a8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b082      	sub	sp, #8
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80224b0:	6879      	ldr	r1, [r7, #4]
 80224b2:	4805      	ldr	r0, [pc, #20]	; (80224c8 <TlUserEvtReceived+0x20>)
 80224b4:	f000 fb0e 	bl	8022ad4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80224b8:	4803      	ldr	r0, [pc, #12]	; (80224c8 <TlUserEvtReceived+0x20>)
 80224ba:	f7df f9c8 	bl	800184e <shci_notify_asynch_evt>

  return;
 80224be:	bf00      	nop
}
 80224c0:	3708      	adds	r7, #8
 80224c2:	46bd      	mov	sp, r7
 80224c4:	bd80      	pop	{r7, pc}
 80224c6:	bf00      	nop
 80224c8:	20000b44 	.word	0x20000b44

080224cc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80224cc:	b480      	push	{r7}
 80224ce:	b083      	sub	sp, #12
 80224d0:	af00      	add	r7, sp, #0
 80224d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	4a05      	ldr	r2, [pc, #20]	; (80224ec <shci_register_io_bus+0x20>)
 80224d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	4a04      	ldr	r2, [pc, #16]	; (80224f0 <shci_register_io_bus+0x24>)
 80224de:	611a      	str	r2, [r3, #16]

  return;
 80224e0:	bf00      	nop
}
 80224e2:	370c      	adds	r7, #12
 80224e4:	46bd      	mov	sp, r7
 80224e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224ea:	4770      	bx	lr
 80224ec:	08022689 	.word	0x08022689
 80224f0:	080226dd 	.word	0x080226dd

080224f4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80224f4:	b580      	push	{r7, lr}
 80224f6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80224f8:	f002 f880 	bl	80245fc <HW_IPCC_Enable>

  return;
 80224fc:	bf00      	nop
}
 80224fe:	bd80      	pop	{r7, pc}

08022500 <TL_Init>:


void TL_Init( void )
{
 8022500:	b580      	push	{r7, lr}
 8022502:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8022504:	4b10      	ldr	r3, [pc, #64]	; (8022548 <TL_Init+0x48>)
 8022506:	4a11      	ldr	r2, [pc, #68]	; (802254c <TL_Init+0x4c>)
 8022508:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 802250a:	4b0f      	ldr	r3, [pc, #60]	; (8022548 <TL_Init+0x48>)
 802250c:	4a10      	ldr	r2, [pc, #64]	; (8022550 <TL_Init+0x50>)
 802250e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8022510:	4b0d      	ldr	r3, [pc, #52]	; (8022548 <TL_Init+0x48>)
 8022512:	4a10      	ldr	r2, [pc, #64]	; (8022554 <TL_Init+0x54>)
 8022514:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8022516:	4b0c      	ldr	r3, [pc, #48]	; (8022548 <TL_Init+0x48>)
 8022518:	4a0f      	ldr	r2, [pc, #60]	; (8022558 <TL_Init+0x58>)
 802251a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 802251c:	4b0a      	ldr	r3, [pc, #40]	; (8022548 <TL_Init+0x48>)
 802251e:	4a0f      	ldr	r2, [pc, #60]	; (802255c <TL_Init+0x5c>)
 8022520:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8022522:	4b09      	ldr	r3, [pc, #36]	; (8022548 <TL_Init+0x48>)
 8022524:	4a0e      	ldr	r2, [pc, #56]	; (8022560 <TL_Init+0x60>)
 8022526:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8022528:	4b07      	ldr	r3, [pc, #28]	; (8022548 <TL_Init+0x48>)
 802252a:	4a0e      	ldr	r2, [pc, #56]	; (8022564 <TL_Init+0x64>)
 802252c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 802252e:	4b06      	ldr	r3, [pc, #24]	; (8022548 <TL_Init+0x48>)
 8022530:	4a0d      	ldr	r2, [pc, #52]	; (8022568 <TL_Init+0x68>)
 8022532:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8022534:	4b04      	ldr	r3, [pc, #16]	; (8022548 <TL_Init+0x48>)
 8022536:	4a0d      	ldr	r2, [pc, #52]	; (802256c <TL_Init+0x6c>)
 8022538:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 802253a:	4b03      	ldr	r3, [pc, #12]	; (8022548 <TL_Init+0x48>)
 802253c:	4a0c      	ldr	r2, [pc, #48]	; (8022570 <TL_Init+0x70>)
 802253e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8022540:	f002 f870 	bl	8024624 <HW_IPCC_Init>

  return;
 8022544:	bf00      	nop
}
 8022546:	bd80      	pop	{r7, pc}
 8022548:	20030000 	.word	0x20030000
 802254c:	20030028 	.word	0x20030028
 8022550:	20030048 	.word	0x20030048
 8022554:	20030058 	.word	0x20030058
 8022558:	20030068 	.word	0x20030068
 802255c:	20030070 	.word	0x20030070
 8022560:	20030078 	.word	0x20030078
 8022564:	20030080 	.word	0x20030080
 8022568:	2003009c 	.word	0x2003009c
 802256c:	200300a0 	.word	0x200300a0
 8022570:	200300ac 	.word	0x200300ac

08022574 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b084      	sub	sp, #16
 8022578:	af00      	add	r7, sp, #0
 802257a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8022580:	4811      	ldr	r0, [pc, #68]	; (80225c8 <TL_BLE_Init+0x54>)
 8022582:	f000 fa4f 	bl	8022a24 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8022586:	4b11      	ldr	r3, [pc, #68]	; (80225cc <TL_BLE_Init+0x58>)
 8022588:	685b      	ldr	r3, [r3, #4]
 802258a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 802258c:	68fb      	ldr	r3, [r7, #12]
 802258e:	689a      	ldr	r2, [r3, #8]
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8022594:	68fb      	ldr	r3, [r7, #12]
 8022596:	68da      	ldr	r2, [r3, #12]
 8022598:	68bb      	ldr	r3, [r7, #8]
 802259a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 802259c:	68bb      	ldr	r3, [r7, #8]
 802259e:	4a0c      	ldr	r2, [pc, #48]	; (80225d0 <TL_BLE_Init+0x5c>)
 80225a0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80225a2:	68bb      	ldr	r3, [r7, #8]
 80225a4:	4a08      	ldr	r2, [pc, #32]	; (80225c8 <TL_BLE_Init+0x54>)
 80225a6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80225a8:	f002 f852 	bl	8024650 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80225ac:	68fb      	ldr	r3, [r7, #12]
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	4a08      	ldr	r2, [pc, #32]	; (80225d4 <TL_BLE_Init+0x60>)
 80225b2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80225b4:	68fb      	ldr	r3, [r7, #12]
 80225b6:	685b      	ldr	r3, [r3, #4]
 80225b8:	4a07      	ldr	r2, [pc, #28]	; (80225d8 <TL_BLE_Init+0x64>)
 80225ba:	6013      	str	r3, [r2, #0]

  return 0;
 80225bc:	2300      	movs	r3, #0
}
 80225be:	4618      	mov	r0, r3
 80225c0:	3710      	adds	r7, #16
 80225c2:	46bd      	mov	sp, r7
 80225c4:	bd80      	pop	{r7, pc}
 80225c6:	bf00      	nop
 80225c8:	200300c8 	.word	0x200300c8
 80225cc:	20030000 	.word	0x20030000
 80225d0:	20000afc 	.word	0x20000afc
 80225d4:	2000a45c 	.word	0x2000a45c
 80225d8:	2000a460 	.word	0x2000a460

080225dc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80225dc:	b580      	push	{r7, lr}
 80225de:	b082      	sub	sp, #8
 80225e0:	af00      	add	r7, sp, #0
 80225e2:	6078      	str	r0, [r7, #4]
 80225e4:	460b      	mov	r3, r1
 80225e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80225e8:	4b09      	ldr	r3, [pc, #36]	; (8022610 <TL_BLE_SendCmd+0x34>)
 80225ea:	685b      	ldr	r3, [r3, #4]
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	2201      	movs	r2, #1
 80225f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80225f2:	4b07      	ldr	r3, [pc, #28]	; (8022610 <TL_BLE_SendCmd+0x34>)
 80225f4:	685b      	ldr	r3, [r3, #4]
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	4619      	mov	r1, r3
 80225fa:	2001      	movs	r0, #1
 80225fc:	f000 f96c 	bl	80228d8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8022600:	f002 f830 	bl	8024664 <HW_IPCC_BLE_SendCmd>

  return 0;
 8022604:	2300      	movs	r3, #0
}
 8022606:	4618      	mov	r0, r3
 8022608:	3708      	adds	r7, #8
 802260a:	46bd      	mov	sp, r7
 802260c:	bd80      	pop	{r7, pc}
 802260e:	bf00      	nop
 8022610:	20030000 	.word	0x20030000

08022614 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8022614:	b580      	push	{r7, lr}
 8022616:	b082      	sub	sp, #8
 8022618:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 802261a:	e01c      	b.n	8022656 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 802261c:	1d3b      	adds	r3, r7, #4
 802261e:	4619      	mov	r1, r3
 8022620:	4812      	ldr	r0, [pc, #72]	; (802266c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8022622:	f000 fa9e 	bl	8022b62 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	7a5b      	ldrb	r3, [r3, #9]
 802262a:	2b0f      	cmp	r3, #15
 802262c:	d003      	beq.n	8022636 <HW_IPCC_BLE_RxEvtNot+0x22>
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	7a5b      	ldrb	r3, [r3, #9]
 8022632:	2b0e      	cmp	r3, #14
 8022634:	d105      	bne.n	8022642 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	4619      	mov	r1, r3
 802263a:	2002      	movs	r0, #2
 802263c:	f000 f94c 	bl	80228d8 <OutputDbgTrace>
 8022640:	e004      	b.n	802264c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	4619      	mov	r1, r3
 8022646:	2003      	movs	r0, #3
 8022648:	f000 f946 	bl	80228d8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 802264c:	4b08      	ldr	r3, [pc, #32]	; (8022670 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	687a      	ldr	r2, [r7, #4]
 8022652:	4610      	mov	r0, r2
 8022654:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8022656:	4805      	ldr	r0, [pc, #20]	; (802266c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8022658:	f000 f9f4 	bl	8022a44 <LST_is_empty>
 802265c:	4603      	mov	r3, r0
 802265e:	2b00      	cmp	r3, #0
 8022660:	d0dc      	beq.n	802261c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8022662:	bf00      	nop
}
 8022664:	3708      	adds	r7, #8
 8022666:	46bd      	mov	sp, r7
 8022668:	bd80      	pop	{r7, pc}
 802266a:	bf00      	nop
 802266c:	200300c8 	.word	0x200300c8
 8022670:	2000a45c 	.word	0x2000a45c

08022674 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8022674:	b580      	push	{r7, lr}
 8022676:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8022678:	4b02      	ldr	r3, [pc, #8]	; (8022684 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 802267a:	681b      	ldr	r3, [r3, #0]
 802267c:	4798      	blx	r3

  return;
 802267e:	bf00      	nop
}
 8022680:	bd80      	pop	{r7, pc}
 8022682:	bf00      	nop
 8022684:	2000a460 	.word	0x2000a460

08022688 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b084      	sub	sp, #16
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8022694:	480d      	ldr	r0, [pc, #52]	; (80226cc <TL_SYS_Init+0x44>)
 8022696:	f000 f9c5 	bl	8022a24 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 802269a:	4b0d      	ldr	r3, [pc, #52]	; (80226d0 <TL_SYS_Init+0x48>)
 802269c:	68db      	ldr	r3, [r3, #12]
 802269e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	689a      	ldr	r2, [r3, #8]
 80226a4:	68bb      	ldr	r3, [r7, #8]
 80226a6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80226a8:	68bb      	ldr	r3, [r7, #8]
 80226aa:	4a08      	ldr	r2, [pc, #32]	; (80226cc <TL_SYS_Init+0x44>)
 80226ac:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80226ae:	f001 fffb 	bl	80246a8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80226b2:	68fb      	ldr	r3, [r7, #12]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	4a07      	ldr	r2, [pc, #28]	; (80226d4 <TL_SYS_Init+0x4c>)
 80226b8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80226ba:	68fb      	ldr	r3, [r7, #12]
 80226bc:	685b      	ldr	r3, [r3, #4]
 80226be:	4a06      	ldr	r2, [pc, #24]	; (80226d8 <TL_SYS_Init+0x50>)
 80226c0:	6013      	str	r3, [r2, #0]

  return 0;
 80226c2:	2300      	movs	r3, #0
}
 80226c4:	4618      	mov	r0, r3
 80226c6:	3710      	adds	r7, #16
 80226c8:	46bd      	mov	sp, r7
 80226ca:	bd80      	pop	{r7, pc}
 80226cc:	200300d0 	.word	0x200300d0
 80226d0:	20030000 	.word	0x20030000
 80226d4:	2000a464 	.word	0x2000a464
 80226d8:	2000a468 	.word	0x2000a468

080226dc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80226dc:	b580      	push	{r7, lr}
 80226de:	b082      	sub	sp, #8
 80226e0:	af00      	add	r7, sp, #0
 80226e2:	6078      	str	r0, [r7, #4]
 80226e4:	460b      	mov	r3, r1
 80226e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80226e8:	4b09      	ldr	r3, [pc, #36]	; (8022710 <TL_SYS_SendCmd+0x34>)
 80226ea:	68db      	ldr	r3, [r3, #12]
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	2210      	movs	r2, #16
 80226f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80226f2:	4b07      	ldr	r3, [pc, #28]	; (8022710 <TL_SYS_SendCmd+0x34>)
 80226f4:	68db      	ldr	r3, [r3, #12]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	4619      	mov	r1, r3
 80226fa:	2004      	movs	r0, #4
 80226fc:	f000 f8ec 	bl	80228d8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8022700:	f001 ffdc 	bl	80246bc <HW_IPCC_SYS_SendCmd>

  return 0;
 8022704:	2300      	movs	r3, #0
}
 8022706:	4618      	mov	r0, r3
 8022708:	3708      	adds	r7, #8
 802270a:	46bd      	mov	sp, r7
 802270c:	bd80      	pop	{r7, pc}
 802270e:	bf00      	nop
 8022710:	20030000 	.word	0x20030000

08022714 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8022714:	b580      	push	{r7, lr}
 8022716:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8022718:	4b07      	ldr	r3, [pc, #28]	; (8022738 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 802271a:	68db      	ldr	r3, [r3, #12]
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	4619      	mov	r1, r3
 8022720:	2005      	movs	r0, #5
 8022722:	f000 f8d9 	bl	80228d8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8022726:	4b05      	ldr	r3, [pc, #20]	; (802273c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	4a03      	ldr	r2, [pc, #12]	; (8022738 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 802272c:	68d2      	ldr	r2, [r2, #12]
 802272e:	6812      	ldr	r2, [r2, #0]
 8022730:	4610      	mov	r0, r2
 8022732:	4798      	blx	r3

  return;
 8022734:	bf00      	nop
}
 8022736:	bd80      	pop	{r7, pc}
 8022738:	20030000 	.word	0x20030000
 802273c:	2000a464 	.word	0x2000a464

08022740 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8022740:	b580      	push	{r7, lr}
 8022742:	b082      	sub	sp, #8
 8022744:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8022746:	e00e      	b.n	8022766 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8022748:	1d3b      	adds	r3, r7, #4
 802274a:	4619      	mov	r1, r3
 802274c:	480b      	ldr	r0, [pc, #44]	; (802277c <HW_IPCC_SYS_EvtNot+0x3c>)
 802274e:	f000 fa08 	bl	8022b62 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	4619      	mov	r1, r3
 8022756:	2006      	movs	r0, #6
 8022758:	f000 f8be 	bl	80228d8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 802275c:	4b08      	ldr	r3, [pc, #32]	; (8022780 <HW_IPCC_SYS_EvtNot+0x40>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	687a      	ldr	r2, [r7, #4]
 8022762:	4610      	mov	r0, r2
 8022764:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8022766:	4805      	ldr	r0, [pc, #20]	; (802277c <HW_IPCC_SYS_EvtNot+0x3c>)
 8022768:	f000 f96c 	bl	8022a44 <LST_is_empty>
 802276c:	4603      	mov	r3, r0
 802276e:	2b00      	cmp	r3, #0
 8022770:	d0ea      	beq.n	8022748 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8022772:	bf00      	nop
}
 8022774:	3708      	adds	r7, #8
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	bf00      	nop
 802277c:	200300d0 	.word	0x200300d0
 8022780:	2000a468 	.word	0x2000a468

08022784 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b082      	sub	sp, #8
 8022788:	af00      	add	r7, sp, #0
 802278a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 802278c:	4817      	ldr	r0, [pc, #92]	; (80227ec <TL_MM_Init+0x68>)
 802278e:	f000 f949 	bl	8022a24 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8022792:	4817      	ldr	r0, [pc, #92]	; (80227f0 <TL_MM_Init+0x6c>)
 8022794:	f000 f946 	bl	8022a24 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8022798:	4b16      	ldr	r3, [pc, #88]	; (80227f4 <TL_MM_Init+0x70>)
 802279a:	691b      	ldr	r3, [r3, #16]
 802279c:	4a16      	ldr	r2, [pc, #88]	; (80227f8 <TL_MM_Init+0x74>)
 802279e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80227a0:	4b15      	ldr	r3, [pc, #84]	; (80227f8 <TL_MM_Init+0x74>)
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	687a      	ldr	r2, [r7, #4]
 80227a6:	6892      	ldr	r2, [r2, #8]
 80227a8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80227aa:	4b13      	ldr	r3, [pc, #76]	; (80227f8 <TL_MM_Init+0x74>)
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	687a      	ldr	r2, [r7, #4]
 80227b0:	68d2      	ldr	r2, [r2, #12]
 80227b2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80227b4:	4b10      	ldr	r3, [pc, #64]	; (80227f8 <TL_MM_Init+0x74>)
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	4a0c      	ldr	r2, [pc, #48]	; (80227ec <TL_MM_Init+0x68>)
 80227ba:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80227bc:	4b0e      	ldr	r3, [pc, #56]	; (80227f8 <TL_MM_Init+0x74>)
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	687a      	ldr	r2, [r7, #4]
 80227c2:	6812      	ldr	r2, [r2, #0]
 80227c4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80227c6:	4b0c      	ldr	r3, [pc, #48]	; (80227f8 <TL_MM_Init+0x74>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	687a      	ldr	r2, [r7, #4]
 80227cc:	6852      	ldr	r2, [r2, #4]
 80227ce:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80227d0:	4b09      	ldr	r3, [pc, #36]	; (80227f8 <TL_MM_Init+0x74>)
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	687a      	ldr	r2, [r7, #4]
 80227d6:	6912      	ldr	r2, [r2, #16]
 80227d8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80227da:	4b07      	ldr	r3, [pc, #28]	; (80227f8 <TL_MM_Init+0x74>)
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	687a      	ldr	r2, [r7, #4]
 80227e0:	6952      	ldr	r2, [r2, #20]
 80227e2:	619a      	str	r2, [r3, #24]

  return;
 80227e4:	bf00      	nop
}
 80227e6:	3708      	adds	r7, #8
 80227e8:	46bd      	mov	sp, r7
 80227ea:	bd80      	pop	{r7, pc}
 80227ec:	200300b8 	.word	0x200300b8
 80227f0:	2000a454 	.word	0x2000a454
 80227f4:	20030000 	.word	0x20030000
 80227f8:	2000a46c 	.word	0x2000a46c

080227fc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80227fc:	b580      	push	{r7, lr}
 80227fe:	b082      	sub	sp, #8
 8022800:	af00      	add	r7, sp, #0
 8022802:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8022804:	6879      	ldr	r1, [r7, #4]
 8022806:	4807      	ldr	r0, [pc, #28]	; (8022824 <TL_MM_EvtDone+0x28>)
 8022808:	f000 f964 	bl	8022ad4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 802280c:	6879      	ldr	r1, [r7, #4]
 802280e:	2000      	movs	r0, #0
 8022810:	f000 f862 	bl	80228d8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8022814:	4804      	ldr	r0, [pc, #16]	; (8022828 <TL_MM_EvtDone+0x2c>)
 8022816:	f001 ff77 	bl	8024708 <HW_IPCC_MM_SendFreeBuf>

  return;
 802281a:	bf00      	nop
}
 802281c:	3708      	adds	r7, #8
 802281e:	46bd      	mov	sp, r7
 8022820:	bd80      	pop	{r7, pc}
 8022822:	bf00      	nop
 8022824:	2000a454 	.word	0x2000a454
 8022828:	0802282d 	.word	0x0802282d

0802282c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b082      	sub	sp, #8
 8022830:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8022832:	e00c      	b.n	802284e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8022834:	1d3b      	adds	r3, r7, #4
 8022836:	4619      	mov	r1, r3
 8022838:	480a      	ldr	r0, [pc, #40]	; (8022864 <SendFreeBuf+0x38>)
 802283a:	f000 f992 	bl	8022b62 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 802283e:	4b0a      	ldr	r3, [pc, #40]	; (8022868 <SendFreeBuf+0x3c>)
 8022840:	691b      	ldr	r3, [r3, #16]
 8022842:	691b      	ldr	r3, [r3, #16]
 8022844:	687a      	ldr	r2, [r7, #4]
 8022846:	4611      	mov	r1, r2
 8022848:	4618      	mov	r0, r3
 802284a:	f000 f943 	bl	8022ad4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 802284e:	4805      	ldr	r0, [pc, #20]	; (8022864 <SendFreeBuf+0x38>)
 8022850:	f000 f8f8 	bl	8022a44 <LST_is_empty>
 8022854:	4603      	mov	r3, r0
 8022856:	2b00      	cmp	r3, #0
 8022858:	d0ec      	beq.n	8022834 <SendFreeBuf+0x8>
  }

  return;
 802285a:	bf00      	nop
}
 802285c:	3708      	adds	r7, #8
 802285e:	46bd      	mov	sp, r7
 8022860:	bd80      	pop	{r7, pc}
 8022862:	bf00      	nop
 8022864:	2000a454 	.word	0x2000a454
 8022868:	20030000 	.word	0x20030000

0802286c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 802286c:	b580      	push	{r7, lr}
 802286e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8022870:	4805      	ldr	r0, [pc, #20]	; (8022888 <TL_TRACES_Init+0x1c>)
 8022872:	f000 f8d7 	bl	8022a24 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8022876:	4b05      	ldr	r3, [pc, #20]	; (802288c <TL_TRACES_Init+0x20>)
 8022878:	695b      	ldr	r3, [r3, #20]
 802287a:	4a03      	ldr	r2, [pc, #12]	; (8022888 <TL_TRACES_Init+0x1c>)
 802287c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 802287e:	f001 ff79 	bl	8024774 <HW_IPCC_TRACES_Init>

  return;
 8022882:	bf00      	nop
}
 8022884:	bd80      	pop	{r7, pc}
 8022886:	bf00      	nop
 8022888:	200300c0 	.word	0x200300c0
 802288c:	20030000 	.word	0x20030000

08022890 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8022890:	b580      	push	{r7, lr}
 8022892:	b082      	sub	sp, #8
 8022894:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8022896:	e008      	b.n	80228aa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8022898:	1d3b      	adds	r3, r7, #4
 802289a:	4619      	mov	r1, r3
 802289c:	4808      	ldr	r0, [pc, #32]	; (80228c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 802289e:	f000 f960 	bl	8022b62 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	4618      	mov	r0, r3
 80228a6:	f000 f80d 	bl	80228c4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80228aa:	4805      	ldr	r0, [pc, #20]	; (80228c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80228ac:	f000 f8ca 	bl	8022a44 <LST_is_empty>
 80228b0:	4603      	mov	r3, r0
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d0f0      	beq.n	8022898 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80228b6:	bf00      	nop
}
 80228b8:	3708      	adds	r7, #8
 80228ba:	46bd      	mov	sp, r7
 80228bc:	bd80      	pop	{r7, pc}
 80228be:	bf00      	nop
 80228c0:	200300c0 	.word	0x200300c0

080228c4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80228c4:	b480      	push	{r7}
 80228c6:	b083      	sub	sp, #12
 80228c8:	af00      	add	r7, sp, #0
 80228ca:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80228cc:	bf00      	nop
 80228ce:	370c      	adds	r7, #12
 80228d0:	46bd      	mov	sp, r7
 80228d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d6:	4770      	bx	lr

080228d8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80228d8:	b480      	push	{r7}
 80228da:	b085      	sub	sp, #20
 80228dc:	af00      	add	r7, sp, #0
 80228de:	4603      	mov	r3, r0
 80228e0:	6039      	str	r1, [r7, #0]
 80228e2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80228e4:	79fb      	ldrb	r3, [r7, #7]
 80228e6:	2b06      	cmp	r3, #6
 80228e8:	d845      	bhi.n	8022976 <OutputDbgTrace+0x9e>
 80228ea:	a201      	add	r2, pc, #4	; (adr r2, 80228f0 <OutputDbgTrace+0x18>)
 80228ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80228f0:	0802290d 	.word	0x0802290d
 80228f4:	08022931 	.word	0x08022931
 80228f8:	08022937 	.word	0x08022937
 80228fc:	0802294b 	.word	0x0802294b
 8022900:	08022957 	.word	0x08022957
 8022904:	0802295d 	.word	0x0802295d
 8022908:	0802296b 	.word	0x0802296b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 802290c:	683b      	ldr	r3, [r7, #0]
 802290e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	7a5b      	ldrb	r3, [r3, #9]
 8022914:	2bff      	cmp	r3, #255	; 0xff
 8022916:	d005      	beq.n	8022924 <OutputDbgTrace+0x4c>
 8022918:	2bff      	cmp	r3, #255	; 0xff
 802291a:	dc05      	bgt.n	8022928 <OutputDbgTrace+0x50>
 802291c:	2b0e      	cmp	r3, #14
 802291e:	d005      	beq.n	802292c <OutputDbgTrace+0x54>
 8022920:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8022922:	e001      	b.n	8022928 <OutputDbgTrace+0x50>
          break;
 8022924:	bf00      	nop
 8022926:	e027      	b.n	8022978 <OutputDbgTrace+0xa0>
          break;
 8022928:	bf00      	nop
 802292a:	e025      	b.n	8022978 <OutputDbgTrace+0xa0>
          break;
 802292c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 802292e:	e023      	b.n	8022978 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8022930:	683b      	ldr	r3, [r7, #0]
 8022932:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8022934:	e020      	b.n	8022978 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8022936:	683b      	ldr	r3, [r7, #0]
 8022938:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	7a5b      	ldrb	r3, [r3, #9]
 802293e:	2b0e      	cmp	r3, #14
 8022940:	d001      	beq.n	8022946 <OutputDbgTrace+0x6e>
 8022942:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8022944:	e000      	b.n	8022948 <OutputDbgTrace+0x70>
          break;
 8022946:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8022948:	e016      	b.n	8022978 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 802294a:	683b      	ldr	r3, [r7, #0]
 802294c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 802294e:	68fb      	ldr	r3, [r7, #12]
 8022950:	7a5b      	ldrb	r3, [r3, #9]
 8022952:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8022954:	e010      	b.n	8022978 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8022956:	683b      	ldr	r3, [r7, #0]
 8022958:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 802295a:	e00d      	b.n	8022978 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 802295c:	683b      	ldr	r3, [r7, #0]
 802295e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	7a5b      	ldrb	r3, [r3, #9]
 8022964:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8022966:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8022968:	e006      	b.n	8022978 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 802296a:	683b      	ldr	r3, [r7, #0]
 802296c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 802296e:	68fb      	ldr	r3, [r7, #12]
 8022970:	7a5b      	ldrb	r3, [r3, #9]
 8022972:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8022974:	e000      	b.n	8022978 <OutputDbgTrace+0xa0>

    default:
      break;
 8022976:	bf00      	nop
  }

  return;
 8022978:	bf00      	nop
}
 802297a:	3714      	adds	r7, #20
 802297c:	46bd      	mov	sp, r7
 802297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022982:	4770      	bx	lr

08022984 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8022984:	b580      	push	{r7, lr}
 8022986:	b084      	sub	sp, #16
 8022988:	af00      	add	r7, sp, #0
 802298a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8022990:	215c      	movs	r1, #92	; 0x5c
 8022992:	6878      	ldr	r0, [r7, #4]
 8022994:	f003 fc13 	bl	80261be <strrchr>
 8022998:	4603      	mov	r3, r0
 802299a:	2b00      	cmp	r3, #0
 802299c:	d007      	beq.n	80229ae <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 802299e:	215c      	movs	r1, #92	; 0x5c
 80229a0:	6878      	ldr	r0, [r7, #4]
 80229a2:	f003 fc0c 	bl	80261be <strrchr>
 80229a6:	4603      	mov	r3, r0
 80229a8:	3301      	adds	r3, #1
 80229aa:	60fb      	str	r3, [r7, #12]
 80229ac:	e00d      	b.n	80229ca <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80229ae:	212f      	movs	r1, #47	; 0x2f
 80229b0:	6878      	ldr	r0, [r7, #4]
 80229b2:	f003 fc04 	bl	80261be <strrchr>
 80229b6:	4603      	mov	r3, r0
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d006      	beq.n	80229ca <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80229bc:	212f      	movs	r1, #47	; 0x2f
 80229be:	6878      	ldr	r0, [r7, #4]
 80229c0:	f003 fbfd 	bl	80261be <strrchr>
 80229c4:	4603      	mov	r3, r0
 80229c6:	3301      	adds	r3, #1
 80229c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80229ca:	68fb      	ldr	r3, [r7, #12]
}
 80229cc:	4618      	mov	r0, r3
 80229ce:	3710      	adds	r7, #16
 80229d0:	46bd      	mov	sp, r7
 80229d2:	bd80      	pop	{r7, pc}

080229d4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80229d4:	b480      	push	{r7}
 80229d6:	b085      	sub	sp, #20
 80229d8:	af00      	add	r7, sp, #0
 80229da:	4603      	mov	r3, r0
 80229dc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80229de:	4b0f      	ldr	r3, [pc, #60]	; (8022a1c <OTP_Read+0x48>)
 80229e0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80229e2:	e002      	b.n	80229ea <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	3b08      	subs	r3, #8
 80229e8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80229ea:	68fb      	ldr	r3, [r7, #12]
 80229ec:	3307      	adds	r3, #7
 80229ee:	781b      	ldrb	r3, [r3, #0]
 80229f0:	79fa      	ldrb	r2, [r7, #7]
 80229f2:	429a      	cmp	r2, r3
 80229f4:	d003      	beq.n	80229fe <OTP_Read+0x2a>
 80229f6:	68fb      	ldr	r3, [r7, #12]
 80229f8:	4a09      	ldr	r2, [pc, #36]	; (8022a20 <OTP_Read+0x4c>)
 80229fa:	4293      	cmp	r3, r2
 80229fc:	d1f2      	bne.n	80229e4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	3307      	adds	r3, #7
 8022a02:	781b      	ldrb	r3, [r3, #0]
 8022a04:	79fa      	ldrb	r2, [r7, #7]
 8022a06:	429a      	cmp	r2, r3
 8022a08:	d001      	beq.n	8022a0e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8022a0e:	68fb      	ldr	r3, [r7, #12]
}
 8022a10:	4618      	mov	r0, r3
 8022a12:	3714      	adds	r7, #20
 8022a14:	46bd      	mov	sp, r7
 8022a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a1a:	4770      	bx	lr
 8022a1c:	1fff73f8 	.word	0x1fff73f8
 8022a20:	1fff7000 	.word	0x1fff7000

08022a24 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8022a24:	b480      	push	{r7}
 8022a26:	b083      	sub	sp, #12
 8022a28:	af00      	add	r7, sp, #0
 8022a2a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	687a      	ldr	r2, [r7, #4]
 8022a30:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	687a      	ldr	r2, [r7, #4]
 8022a36:	605a      	str	r2, [r3, #4]
}
 8022a38:	bf00      	nop
 8022a3a:	370c      	adds	r7, #12
 8022a3c:	46bd      	mov	sp, r7
 8022a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a42:	4770      	bx	lr

08022a44 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8022a44:	b480      	push	{r7}
 8022a46:	b087      	sub	sp, #28
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8022a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8022a52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8022a54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8022a56:	b672      	cpsid	i
}
 8022a58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	687a      	ldr	r2, [r7, #4]
 8022a60:	429a      	cmp	r2, r3
 8022a62:	d102      	bne.n	8022a6a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8022a64:	2301      	movs	r3, #1
 8022a66:	75fb      	strb	r3, [r7, #23]
 8022a68:	e001      	b.n	8022a6e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	75fb      	strb	r3, [r7, #23]
 8022a6e:	693b      	ldr	r3, [r7, #16]
 8022a70:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a72:	68bb      	ldr	r3, [r7, #8]
 8022a74:	f383 8810 	msr	PRIMASK, r3
}
 8022a78:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8022a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	371c      	adds	r7, #28
 8022a80:	46bd      	mov	sp, r7
 8022a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a86:	4770      	bx	lr

08022a88 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8022a88:	b480      	push	{r7}
 8022a8a:	b087      	sub	sp, #28
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	6078      	str	r0, [r7, #4]
 8022a90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a92:	f3ef 8310 	mrs	r3, PRIMASK
 8022a96:	60fb      	str	r3, [r7, #12]
  return(result);
 8022a98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8022a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022a9c:	b672      	cpsid	i
}
 8022a9e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	681a      	ldr	r2, [r3, #0]
 8022aa4:	683b      	ldr	r3, [r7, #0]
 8022aa6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8022aa8:	683b      	ldr	r3, [r7, #0]
 8022aaa:	687a      	ldr	r2, [r7, #4]
 8022aac:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	683a      	ldr	r2, [r7, #0]
 8022ab2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8022ab4:	683b      	ldr	r3, [r7, #0]
 8022ab6:	681b      	ldr	r3, [r3, #0]
 8022ab8:	683a      	ldr	r2, [r7, #0]
 8022aba:	605a      	str	r2, [r3, #4]
 8022abc:	697b      	ldr	r3, [r7, #20]
 8022abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ac0:	693b      	ldr	r3, [r7, #16]
 8022ac2:	f383 8810 	msr	PRIMASK, r3
}
 8022ac6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8022ac8:	bf00      	nop
 8022aca:	371c      	adds	r7, #28
 8022acc:	46bd      	mov	sp, r7
 8022ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ad2:	4770      	bx	lr

08022ad4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8022ad4:	b480      	push	{r7}
 8022ad6:	b087      	sub	sp, #28
 8022ad8:	af00      	add	r7, sp, #0
 8022ada:	6078      	str	r0, [r7, #4]
 8022adc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022ade:	f3ef 8310 	mrs	r3, PRIMASK
 8022ae2:	60fb      	str	r3, [r7, #12]
  return(result);
 8022ae4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8022ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022ae8:	b672      	cpsid	i
}
 8022aea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8022aec:	683b      	ldr	r3, [r7, #0]
 8022aee:	687a      	ldr	r2, [r7, #4]
 8022af0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	685a      	ldr	r2, [r3, #4]
 8022af6:	683b      	ldr	r3, [r7, #0]
 8022af8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	683a      	ldr	r2, [r7, #0]
 8022afe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8022b00:	683b      	ldr	r3, [r7, #0]
 8022b02:	685b      	ldr	r3, [r3, #4]
 8022b04:	683a      	ldr	r2, [r7, #0]
 8022b06:	601a      	str	r2, [r3, #0]
 8022b08:	697b      	ldr	r3, [r7, #20]
 8022b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022b0c:	693b      	ldr	r3, [r7, #16]
 8022b0e:	f383 8810 	msr	PRIMASK, r3
}
 8022b12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8022b14:	bf00      	nop
 8022b16:	371c      	adds	r7, #28
 8022b18:	46bd      	mov	sp, r7
 8022b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b1e:	4770      	bx	lr

08022b20 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8022b20:	b480      	push	{r7}
 8022b22:	b087      	sub	sp, #28
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022b28:	f3ef 8310 	mrs	r3, PRIMASK
 8022b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8022b2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8022b30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022b32:	b672      	cpsid	i
}
 8022b34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	685b      	ldr	r3, [r3, #4]
 8022b3a:	687a      	ldr	r2, [r7, #4]
 8022b3c:	6812      	ldr	r2, [r2, #0]
 8022b3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	687a      	ldr	r2, [r7, #4]
 8022b46:	6852      	ldr	r2, [r2, #4]
 8022b48:	605a      	str	r2, [r3, #4]
 8022b4a:	697b      	ldr	r3, [r7, #20]
 8022b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022b4e:	693b      	ldr	r3, [r7, #16]
 8022b50:	f383 8810 	msr	PRIMASK, r3
}
 8022b54:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8022b56:	bf00      	nop
 8022b58:	371c      	adds	r7, #28
 8022b5a:	46bd      	mov	sp, r7
 8022b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b60:	4770      	bx	lr

08022b62 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8022b62:	b580      	push	{r7, lr}
 8022b64:	b086      	sub	sp, #24
 8022b66:	af00      	add	r7, sp, #0
 8022b68:	6078      	str	r0, [r7, #4]
 8022b6a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8022b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8022b72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8022b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022b76:	b672      	cpsid	i
}
 8022b78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	681a      	ldr	r2, [r3, #0]
 8022b7e:	683b      	ldr	r3, [r7, #0]
 8022b80:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	681b      	ldr	r3, [r3, #0]
 8022b86:	4618      	mov	r0, r3
 8022b88:	f7ff ffca 	bl	8022b20 <LST_remove_node>
 8022b8c:	697b      	ldr	r3, [r7, #20]
 8022b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022b90:	693b      	ldr	r3, [r7, #16]
 8022b92:	f383 8810 	msr	PRIMASK, r3
}
 8022b96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8022b98:	bf00      	nop
 8022b9a:	3718      	adds	r7, #24
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}

08022ba0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8022ba0:	b480      	push	{r7}
 8022ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8022ba4:	4b03      	ldr	r3, [pc, #12]	; (8022bb4 <LL_FLASH_GetUDN+0x14>)
 8022ba6:	681b      	ldr	r3, [r3, #0]
}
 8022ba8:	4618      	mov	r0, r3
 8022baa:	46bd      	mov	sp, r7
 8022bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bb0:	4770      	bx	lr
 8022bb2:	bf00      	nop
 8022bb4:	1fff7580 	.word	0x1fff7580

08022bb8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8022bb8:	b480      	push	{r7}
 8022bba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8022bbc:	4b03      	ldr	r3, [pc, #12]	; (8022bcc <LL_FLASH_GetDeviceID+0x14>)
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	b2db      	uxtb	r3, r3
}
 8022bc2:	4618      	mov	r0, r3
 8022bc4:	46bd      	mov	sp, r7
 8022bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bca:	4770      	bx	lr
 8022bcc:	1fff7584 	.word	0x1fff7584

08022bd0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8022bd0:	b480      	push	{r7}
 8022bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8022bd4:	4b03      	ldr	r3, [pc, #12]	; (8022be4 <LL_FLASH_GetSTCompanyID+0x14>)
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	0a1b      	lsrs	r3, r3, #8
}
 8022bda:	4618      	mov	r0, r3
 8022bdc:	46bd      	mov	sp, r7
 8022bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022be2:	4770      	bx	lr
 8022be4:	1fff7584 	.word	0x1fff7584

08022be8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8022be8:	b5b0      	push	{r4, r5, r7, lr}
 8022bea:	b090      	sub	sp, #64	; 0x40
 8022bec:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8022bee:	2392      	movs	r3, #146	; 0x92
 8022bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8022bf4:	4b45      	ldr	r3, [pc, #276]	; (8022d0c <APP_BLE_Init+0x124>)
 8022bf6:	1d3c      	adds	r4, r7, #4
 8022bf8:	461d      	mov	r5, r3
 8022bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022c06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8022c0a:	c403      	stmia	r4!, {r0, r1}
 8022c0c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8022c0e:	f000 fb37 	bl	8023280 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8022c12:	2101      	movs	r1, #1
 8022c14:	2002      	movs	r0, #2
 8022c16:	f001 ff45 	bl	8024aa4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8022c1a:	4a3d      	ldr	r2, [pc, #244]	; (8022d10 <APP_BLE_Init+0x128>)
 8022c1c:	2100      	movs	r1, #0
 8022c1e:	2002      	movs	r0, #2
 8022c20:	f002 f86c 	bl	8024cfc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8022c24:	1d3b      	adds	r3, r7, #4
 8022c26:	4618      	mov	r0, r3
 8022c28:	f7ff f8a8 	bl	8021d7c <SHCI_C2_BLE_Init>
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8022c32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	d012      	beq.n	8022c60 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8022c3a:	4836      	ldr	r0, [pc, #216]	; (8022d14 <APP_BLE_Init+0x12c>)
 8022c3c:	f7ff fea2 	bl	8022984 <DbgTraceGetFileName>
 8022c40:	4601      	mov	r1, r0
 8022c42:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8022c46:	4a34      	ldr	r2, [pc, #208]	; (8022d18 <APP_BLE_Init+0x130>)
 8022c48:	4834      	ldr	r0, [pc, #208]	; (8022d1c <APP_BLE_Init+0x134>)
 8022c4a:	f003 f96d 	bl	8025f28 <iprintf>
 8022c4e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8022c52:	4619      	mov	r1, r3
 8022c54:	4832      	ldr	r0, [pc, #200]	; (8022d20 <APP_BLE_Init+0x138>)
 8022c56:	f003 f967 	bl	8025f28 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8022c5a:	f7df ffa7 	bl	8002bac <Error_Handler>
 8022c5e:	e00c      	b.n	8022c7a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8022c60:	482c      	ldr	r0, [pc, #176]	; (8022d14 <APP_BLE_Init+0x12c>)
 8022c62:	f7ff fe8f 	bl	8022984 <DbgTraceGetFileName>
 8022c66:	4601      	mov	r1, r0
 8022c68:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8022c6c:	4a2a      	ldr	r2, [pc, #168]	; (8022d18 <APP_BLE_Init+0x130>)
 8022c6e:	482b      	ldr	r0, [pc, #172]	; (8022d1c <APP_BLE_Init+0x134>)
 8022c70:	f003 f95a 	bl	8025f28 <iprintf>
 8022c74:	482b      	ldr	r0, [pc, #172]	; (8022d24 <APP_BLE_Init+0x13c>)
 8022c76:	f003 f957 	bl	8025f28 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8022c7a:	f000 fb17 	bl	80232ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8022c7e:	f7fe ffd7 	bl	8021c30 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8022c82:	4b29      	ldr	r3, [pc, #164]	; (8022d28 <APP_BLE_Init+0x140>)
 8022c84:	2200      	movs	r2, #0
 8022c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8022c8a:	4b27      	ldr	r3, [pc, #156]	; (8022d28 <APP_BLE_Init+0x140>)
 8022c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022c90:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8022c92:	4a26      	ldr	r2, [pc, #152]	; (8022d2c <APP_BLE_Init+0x144>)
 8022c94:	2100      	movs	r1, #0
 8022c96:	2001      	movs	r0, #1
 8022c98:	f002 f830 	bl	8024cfc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8022c9c:	2006      	movs	r0, #6
 8022c9e:	f7fe fe3a 	bl	8021916 <aci_hal_set_radio_activity_mask>
 8022ca2:	4603      	mov	r3, r0
 8022ca4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8022ca8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d010      	beq.n	8022cd2 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8022cb0:	4818      	ldr	r0, [pc, #96]	; (8022d14 <APP_BLE_Init+0x12c>)
 8022cb2:	f7ff fe67 	bl	8022984 <DbgTraceGetFileName>
 8022cb6:	4601      	mov	r1, r0
 8022cb8:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8022cbc:	4a16      	ldr	r2, [pc, #88]	; (8022d18 <APP_BLE_Init+0x130>)
 8022cbe:	4817      	ldr	r0, [pc, #92]	; (8022d1c <APP_BLE_Init+0x134>)
 8022cc0:	f003 f932 	bl	8025f28 <iprintf>
 8022cc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8022cc8:	4619      	mov	r1, r3
 8022cca:	4819      	ldr	r0, [pc, #100]	; (8022d30 <APP_BLE_Init+0x148>)
 8022ccc:	f003 f92c 	bl	8025f28 <iprintf>
 8022cd0:	e00c      	b.n	8022cec <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8022cd2:	4810      	ldr	r0, [pc, #64]	; (8022d14 <APP_BLE_Init+0x12c>)
 8022cd4:	f7ff fe56 	bl	8022984 <DbgTraceGetFileName>
 8022cd8:	4601      	mov	r1, r0
 8022cda:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8022cde:	4a0e      	ldr	r2, [pc, #56]	; (8022d18 <APP_BLE_Init+0x130>)
 8022ce0:	480e      	ldr	r0, [pc, #56]	; (8022d1c <APP_BLE_Init+0x134>)
 8022ce2:	f003 f921 	bl	8025f28 <iprintf>
 8022ce6:	4813      	ldr	r0, [pc, #76]	; (8022d34 <APP_BLE_Init+0x14c>)
 8022ce8:	f003 f91e 	bl	8025f28 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8022cec:	f000 ffc6 	bl	8023c7c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8022cf0:	4b0d      	ldr	r3, [pc, #52]	; (8022d28 <APP_BLE_Init+0x140>)
 8022cf2:	2200      	movs	r2, #0
 8022cf4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8022cf6:	4b0c      	ldr	r3, [pc, #48]	; (8022d28 <APP_BLE_Init+0x140>)
 8022cf8:	2200      	movs	r2, #0
 8022cfa:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8022cfc:	2001      	movs	r0, #1
 8022cfe:	f000 fd69 	bl	80237d4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8022d02:	bf00      	nop
}
 8022d04:	3740      	adds	r7, #64	; 0x40
 8022d06:	46bd      	mov	sp, r7
 8022d08:	bdb0      	pop	{r4, r5, r7, pc}
 8022d0a:	bf00      	nop
 8022d0c:	0802914c 	.word	0x0802914c
 8022d10:	08021f99 	.word	0x08021f99
 8022d14:	08029040 	.word	0x08029040
 8022d18:	0802a38c 	.word	0x0802a38c
 8022d1c:	0802905c 	.word	0x0802905c
 8022d20:	08029070 	.word	0x08029070
 8022d24:	080290a8 	.word	0x080290a8
 8022d28:	2000a478 	.word	0x2000a478
 8022d2c:	08023959 	.word	0x08023959
 8022d30:	080290d0 	.word	0x080290d0
 8022d34:	08029114 	.word	0x08029114

08022d38 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8022d38:	b5b0      	push	{r4, r5, r7, lr}
 8022d3a:	b08e      	sub	sp, #56	; 0x38
 8022d3c:	af04      	add	r7, sp, #16
 8022d3e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8022d40:	2392      	movs	r3, #146	; 0x92
 8022d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	3301      	adds	r3, #1
 8022d4a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8022d4c:	6a3b      	ldr	r3, [r7, #32]
 8022d4e:	781b      	ldrb	r3, [r3, #0]
 8022d50:	2bff      	cmp	r3, #255	; 0xff
 8022d52:	f000 811d 	beq.w	8022f90 <SVCCTL_App_Notification+0x258>
 8022d56:	2bff      	cmp	r3, #255	; 0xff
 8022d58:	f300 8269 	bgt.w	802322e <SVCCTL_App_Notification+0x4f6>
 8022d5c:	2b05      	cmp	r3, #5
 8022d5e:	d002      	beq.n	8022d66 <SVCCTL_App_Notification+0x2e>
 8022d60:	2b3e      	cmp	r3, #62	; 0x3e
 8022d62:	d042      	beq.n	8022dea <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8022d64:	e263      	b.n	802322e <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8022d66:	6a3b      	ldr	r3, [r7, #32]
 8022d68:	3302      	adds	r3, #2
 8022d6a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8022d6c:	68bb      	ldr	r3, [r7, #8]
 8022d6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8022d72:	b29a      	uxth	r2, r3
 8022d74:	4bb1      	ldr	r3, [pc, #708]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022d76:	8adb      	ldrh	r3, [r3, #22]
 8022d78:	429a      	cmp	r2, r3
 8022d7a:	d128      	bne.n	8022dce <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8022d7c:	4baf      	ldr	r3, [pc, #700]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022d7e:	2200      	movs	r2, #0
 8022d80:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8022d82:	4bae      	ldr	r3, [pc, #696]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022d84:	2200      	movs	r2, #0
 8022d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8022d8a:	48ad      	ldr	r0, [pc, #692]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022d8c:	f7ff fdfa 	bl	8022984 <DbgTraceGetFileName>
 8022d90:	4601      	mov	r1, r0
 8022d92:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8022d96:	4aab      	ldr	r2, [pc, #684]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022d98:	48ab      	ldr	r0, [pc, #684]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022d9a:	f003 f8c5 	bl	8025f28 <iprintf>
 8022d9e:	48ab      	ldr	r0, [pc, #684]	; (802304c <SVCCTL_App_Notification+0x314>)
 8022da0:	f003 f95e 	bl	8026060 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8022da4:	48a6      	ldr	r0, [pc, #664]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022da6:	f7ff fded 	bl	8022984 <DbgTraceGetFileName>
 8022daa:	4601      	mov	r1, r0
 8022dac:	f240 13bb 	movw	r3, #443	; 0x1bb
 8022db0:	4aa4      	ldr	r2, [pc, #656]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022db2:	48a5      	ldr	r0, [pc, #660]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022db4:	f003 f8b8 	bl	8025f28 <iprintf>
 8022db8:	68bb      	ldr	r3, [r7, #8]
 8022dba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8022dbe:	b29b      	uxth	r3, r3
 8022dc0:	4619      	mov	r1, r3
 8022dc2:	68bb      	ldr	r3, [r7, #8]
 8022dc4:	78db      	ldrb	r3, [r3, #3]
 8022dc6:	461a      	mov	r2, r3
 8022dc8:	48a1      	ldr	r0, [pc, #644]	; (8023050 <SVCCTL_App_Notification+0x318>)
 8022dca:	f003 f8ad 	bl	8025f28 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8022dce:	2001      	movs	r0, #1
 8022dd0:	f000 fd00 	bl	80237d4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8022dd4:	4b9f      	ldr	r3, [pc, #636]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022dd6:	2201      	movs	r2, #1
 8022dd8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8022dda:	4b98      	ldr	r3, [pc, #608]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022ddc:	8ada      	ldrh	r2, [r3, #22]
 8022dde:	4b9d      	ldr	r3, [pc, #628]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022de0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8022de2:	489c      	ldr	r0, [pc, #624]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022de4:	f000 ff36 	bl	8023c54 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8022de8:	e224      	b.n	8023234 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8022dea:	6a3b      	ldr	r3, [r7, #32]
 8022dec:	3302      	adds	r3, #2
 8022dee:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8022df0:	697b      	ldr	r3, [r7, #20]
 8022df2:	781b      	ldrb	r3, [r3, #0]
 8022df4:	2b01      	cmp	r3, #1
 8022df6:	d042      	beq.n	8022e7e <SVCCTL_App_Notification+0x146>
 8022df8:	2b03      	cmp	r3, #3
 8022dfa:	f040 80c7 	bne.w	8022f8c <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8022dfe:	697b      	ldr	r3, [r7, #20]
 8022e00:	3301      	adds	r3, #1
 8022e02:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8022e04:	488e      	ldr	r0, [pc, #568]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022e06:	f7ff fdbd 	bl	8022984 <DbgTraceGetFileName>
 8022e0a:	4601      	mov	r1, r0
 8022e0c:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8022e10:	4a8c      	ldr	r2, [pc, #560]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022e12:	488d      	ldr	r0, [pc, #564]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022e14:	f003 f888 	bl	8025f28 <iprintf>
 8022e18:	488f      	ldr	r0, [pc, #572]	; (8023058 <SVCCTL_App_Notification+0x320>)
 8022e1a:	f003 f921 	bl	8026060 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8022e1e:	4888      	ldr	r0, [pc, #544]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022e20:	f7ff fdb0 	bl	8022984 <DbgTraceGetFileName>
 8022e24:	4601      	mov	r1, r0
 8022e26:	f240 13e3 	movw	r3, #483	; 0x1e3
 8022e2a:	4a86      	ldr	r2, [pc, #536]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022e2c:	4886      	ldr	r0, [pc, #536]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022e2e:	f003 f87b 	bl	8025f28 <iprintf>
 8022e32:	693b      	ldr	r3, [r7, #16]
 8022e34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8022e38:	b29b      	uxth	r3, r3
 8022e3a:	4618      	mov	r0, r3
 8022e3c:	f7dd fb4a 	bl	80004d4 <__aeabi_i2d>
 8022e40:	f04f 0200 	mov.w	r2, #0
 8022e44:	4b85      	ldr	r3, [pc, #532]	; (802305c <SVCCTL_App_Notification+0x324>)
 8022e46:	f7dd fbaf 	bl	80005a8 <__aeabi_dmul>
 8022e4a:	4602      	mov	r2, r0
 8022e4c:	460b      	mov	r3, r1
 8022e4e:	4610      	mov	r0, r2
 8022e50:	4619      	mov	r1, r3
 8022e52:	693b      	ldr	r3, [r7, #16]
 8022e54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8022e58:	b29b      	uxth	r3, r3
 8022e5a:	461c      	mov	r4, r3
 8022e5c:	693b      	ldr	r3, [r7, #16]
 8022e5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8022e62:	b29b      	uxth	r3, r3
 8022e64:	461a      	mov	r2, r3
 8022e66:	4613      	mov	r3, r2
 8022e68:	009b      	lsls	r3, r3, #2
 8022e6a:	4413      	add	r3, r2
 8022e6c:	005b      	lsls	r3, r3, #1
 8022e6e:	9301      	str	r3, [sp, #4]
 8022e70:	9400      	str	r4, [sp, #0]
 8022e72:	4602      	mov	r2, r0
 8022e74:	460b      	mov	r3, r1
 8022e76:	487a      	ldr	r0, [pc, #488]	; (8023060 <SVCCTL_App_Notification+0x328>)
 8022e78:	f003 f856 	bl	8025f28 <iprintf>
          break;
 8022e7c:	e087      	b.n	8022f8e <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8022e7e:	697b      	ldr	r3, [r7, #20]
 8022e80:	3301      	adds	r3, #1
 8022e82:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8022e84:	486e      	ldr	r0, [pc, #440]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022e86:	f7ff fd7d 	bl	8022984 <DbgTraceGetFileName>
 8022e8a:	4601      	mov	r1, r0
 8022e8c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8022e90:	4a6c      	ldr	r2, [pc, #432]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022e92:	486d      	ldr	r0, [pc, #436]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022e94:	f003 f848 	bl	8025f28 <iprintf>
 8022e98:	68fb      	ldr	r3, [r7, #12]
 8022e9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8022e9e:	b29b      	uxth	r3, r3
 8022ea0:	4619      	mov	r1, r3
 8022ea2:	4870      	ldr	r0, [pc, #448]	; (8023064 <SVCCTL_App_Notification+0x32c>)
 8022ea4:	f003 f840 	bl	8025f28 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8022ea8:	4865      	ldr	r0, [pc, #404]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022eaa:	f7ff fd6b 	bl	8022984 <DbgTraceGetFileName>
 8022eae:	4601      	mov	r1, r0
 8022eb0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8022eb4:	4a63      	ldr	r2, [pc, #396]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022eb6:	4864      	ldr	r0, [pc, #400]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022eb8:	f003 f836 	bl	8025f28 <iprintf>
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	7a9b      	ldrb	r3, [r3, #10]
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	7a5b      	ldrb	r3, [r3, #9]
 8022ec6:	461c      	mov	r4, r3
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	7a1b      	ldrb	r3, [r3, #8]
 8022ecc:	461d      	mov	r5, r3
 8022ece:	68fb      	ldr	r3, [r7, #12]
 8022ed0:	79db      	ldrb	r3, [r3, #7]
 8022ed2:	461a      	mov	r2, r3
 8022ed4:	68fb      	ldr	r3, [r7, #12]
 8022ed6:	799b      	ldrb	r3, [r3, #6]
 8022ed8:	4619      	mov	r1, r3
 8022eda:	68fb      	ldr	r3, [r7, #12]
 8022edc:	795b      	ldrb	r3, [r3, #5]
 8022ede:	9302      	str	r3, [sp, #8]
 8022ee0:	9101      	str	r1, [sp, #4]
 8022ee2:	9200      	str	r2, [sp, #0]
 8022ee4:	462b      	mov	r3, r5
 8022ee6:	4622      	mov	r2, r4
 8022ee8:	4601      	mov	r1, r0
 8022eea:	485f      	ldr	r0, [pc, #380]	; (8023068 <SVCCTL_App_Notification+0x330>)
 8022eec:	f003 f81c 	bl	8025f28 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8022ef0:	4853      	ldr	r0, [pc, #332]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8022ef2:	f7ff fd47 	bl	8022984 <DbgTraceGetFileName>
 8022ef6:	4601      	mov	r1, r0
 8022ef8:	f240 13fd 	movw	r3, #509	; 0x1fd
 8022efc:	4a51      	ldr	r2, [pc, #324]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8022efe:	4852      	ldr	r0, [pc, #328]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8022f00:	f003 f812 	bl	8025f28 <iprintf>
 8022f04:	68fb      	ldr	r3, [r7, #12]
 8022f06:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8022f0a:	b29b      	uxth	r3, r3
 8022f0c:	4618      	mov	r0, r3
 8022f0e:	f7dd fae1 	bl	80004d4 <__aeabi_i2d>
 8022f12:	f04f 0200 	mov.w	r2, #0
 8022f16:	4b51      	ldr	r3, [pc, #324]	; (802305c <SVCCTL_App_Notification+0x324>)
 8022f18:	f7dd fb46 	bl	80005a8 <__aeabi_dmul>
 8022f1c:	4602      	mov	r2, r0
 8022f1e:	460b      	mov	r3, r1
 8022f20:	4610      	mov	r0, r2
 8022f22:	4619      	mov	r1, r3
 8022f24:	68fb      	ldr	r3, [r7, #12]
 8022f26:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8022f2a:	b29b      	uxth	r3, r3
 8022f2c:	461c      	mov	r4, r3
 8022f2e:	68fb      	ldr	r3, [r7, #12]
 8022f30:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8022f34:	b29b      	uxth	r3, r3
 8022f36:	461a      	mov	r2, r3
 8022f38:	4613      	mov	r3, r2
 8022f3a:	009b      	lsls	r3, r3, #2
 8022f3c:	4413      	add	r3, r2
 8022f3e:	005b      	lsls	r3, r3, #1
 8022f40:	9301      	str	r3, [sp, #4]
 8022f42:	9400      	str	r4, [sp, #0]
 8022f44:	4602      	mov	r2, r0
 8022f46:	460b      	mov	r3, r1
 8022f48:	4845      	ldr	r0, [pc, #276]	; (8023060 <SVCCTL_App_Notification+0x328>)
 8022f4a:	f002 ffed 	bl	8025f28 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8022f4e:	4b3b      	ldr	r3, [pc, #236]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022f50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8022f54:	2b04      	cmp	r3, #4
 8022f56:	d104      	bne.n	8022f62 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8022f58:	4b38      	ldr	r3, [pc, #224]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022f5a:	2206      	movs	r2, #6
 8022f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8022f60:	e003      	b.n	8022f6a <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8022f62:	4b36      	ldr	r3, [pc, #216]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022f64:	2205      	movs	r2, #5
 8022f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8022f6a:	68fb      	ldr	r3, [r7, #12]
 8022f6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8022f70:	b29a      	uxth	r2, r3
 8022f72:	4b32      	ldr	r3, [pc, #200]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022f74:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8022f76:	4b37      	ldr	r3, [pc, #220]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022f78:	2200      	movs	r2, #0
 8022f7a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8022f7c:	4b2f      	ldr	r3, [pc, #188]	; (802303c <SVCCTL_App_Notification+0x304>)
 8022f7e:	8ada      	ldrh	r2, [r3, #22]
 8022f80:	4b34      	ldr	r3, [pc, #208]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022f82:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8022f84:	4833      	ldr	r0, [pc, #204]	; (8023054 <SVCCTL_App_Notification+0x31c>)
 8022f86:	f000 fe65 	bl	8023c54 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8022f8a:	e000      	b.n	8022f8e <SVCCTL_App_Notification+0x256>
          break;
 8022f8c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8022f8e:	e151      	b.n	8023234 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8022f90:	6a3b      	ldr	r3, [r7, #32]
 8022f92:	3302      	adds	r3, #2
 8022f94:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8022f96:	69fb      	ldr	r3, [r7, #28]
 8022f98:	881b      	ldrh	r3, [r3, #0]
 8022f9a:	b29b      	uxth	r3, r3
 8022f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022fa0:	f000 8141 	beq.w	8023226 <SVCCTL_App_Notification+0x4ee>
 8022fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022fa8:	f300 8143 	bgt.w	8023232 <SVCCTL_App_Notification+0x4fa>
 8022fac:	2b04      	cmp	r3, #4
 8022fae:	f000 813c 	beq.w	802322a <SVCCTL_App_Notification+0x4f2>
 8022fb2:	2b04      	cmp	r3, #4
 8022fb4:	f2c0 813d 	blt.w	8023232 <SVCCTL_App_Notification+0x4fa>
 8022fb8:	f240 420a 	movw	r2, #1034	; 0x40a
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	f300 8138 	bgt.w	8023232 <SVCCTL_App_Notification+0x4fa>
 8022fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022fc6:	f340 8134 	ble.w	8023232 <SVCCTL_App_Notification+0x4fa>
 8022fca:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8022fce:	2b09      	cmp	r3, #9
 8022fd0:	f200 812f 	bhi.w	8023232 <SVCCTL_App_Notification+0x4fa>
 8022fd4:	a201      	add	r2, pc, #4	; (adr r2, 8022fdc <SVCCTL_App_Notification+0x2a4>)
 8022fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fda:	bf00      	nop
 8022fdc:	080231a1 	.word	0x080231a1
 8022fe0:	08023075 	.word	0x08023075
 8022fe4:	08023233 	.word	0x08023233
 8022fe8:	08023233 	.word	0x08023233
 8022fec:	08023233 	.word	0x08023233
 8022ff0:	08023233 	.word	0x08023233
 8022ff4:	08023005 	.word	0x08023005
 8022ff8:	08023233 	.word	0x08023233
 8022ffc:	080230e7 	.word	0x080230e7
 8023000:	08023021 	.word	0x08023021
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8023004:	480e      	ldr	r0, [pc, #56]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8023006:	f7ff fcbd 	bl	8022984 <DbgTraceGetFileName>
 802300a:	4601      	mov	r1, r0
 802300c:	f240 233f 	movw	r3, #575	; 0x23f
 8023010:	4a0c      	ldr	r2, [pc, #48]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 8023012:	480d      	ldr	r0, [pc, #52]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8023014:	f002 ff88 	bl	8025f28 <iprintf>
 8023018:	4814      	ldr	r0, [pc, #80]	; (802306c <SVCCTL_App_Notification+0x334>)
 802301a:	f002 ff85 	bl	8025f28 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 802301e:	e105      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8023020:	4807      	ldr	r0, [pc, #28]	; (8023040 <SVCCTL_App_Notification+0x308>)
 8023022:	f7ff fcaf 	bl	8022984 <DbgTraceGetFileName>
 8023026:	4601      	mov	r1, r0
 8023028:	f240 234f 	movw	r3, #591	; 0x24f
 802302c:	4a05      	ldr	r2, [pc, #20]	; (8023044 <SVCCTL_App_Notification+0x30c>)
 802302e:	4806      	ldr	r0, [pc, #24]	; (8023048 <SVCCTL_App_Notification+0x310>)
 8023030:	f002 ff7a 	bl	8025f28 <iprintf>
 8023034:	480e      	ldr	r0, [pc, #56]	; (8023070 <SVCCTL_App_Notification+0x338>)
 8023036:	f003 f813 	bl	8026060 <puts>
          break;
 802303a:	e0f7      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
 802303c:	2000a478 	.word	0x2000a478
 8023040:	08029040 	.word	0x08029040
 8023044:	0802a39c 	.word	0x0802a39c
 8023048:	0802905c 	.word	0x0802905c
 802304c:	08029188 	.word	0x08029188
 8023050:	080291b4 	.word	0x080291b4
 8023054:	2000a4fc 	.word	0x2000a4fc
 8023058:	080291f0 	.word	0x080291f0
 802305c:	3ff40000 	.word	0x3ff40000
 8023060:	08029224 	.word	0x08029224
 8023064:	08029290 	.word	0x08029290
 8023068:	080292d8 	.word	0x080292d8
 802306c:	08029328 	.word	0x08029328
 8023070:	08029350 	.word	0x08029350
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8023074:	4872      	ldr	r0, [pc, #456]	; (8023240 <SVCCTL_App_Notification+0x508>)
 8023076:	f7ff fc85 	bl	8022984 <DbgTraceGetFileName>
 802307a:	4601      	mov	r1, r0
 802307c:	f240 2356 	movw	r3, #598	; 0x256
 8023080:	4a70      	ldr	r2, [pc, #448]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 8023082:	4871      	ldr	r0, [pc, #452]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023084:	f002 ff50 	bl	8025f28 <iprintf>
 8023088:	4870      	ldr	r0, [pc, #448]	; (802324c <SVCCTL_App_Notification+0x514>)
 802308a:	f002 ffe9 	bl	8026060 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 802308e:	4b70      	ldr	r3, [pc, #448]	; (8023250 <SVCCTL_App_Notification+0x518>)
 8023090:	8adb      	ldrh	r3, [r3, #22]
 8023092:	4970      	ldr	r1, [pc, #448]	; (8023254 <SVCCTL_App_Notification+0x51c>)
 8023094:	4618      	mov	r0, r3
 8023096:	f7fd fe95 	bl	8020dc4 <aci_gap_pass_key_resp>
 802309a:	4603      	mov	r3, r0
 802309c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80230a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d010      	beq.n	80230ca <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80230a8:	4865      	ldr	r0, [pc, #404]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80230aa:	f7ff fc6b 	bl	8022984 <DbgTraceGetFileName>
 80230ae:	4601      	mov	r1, r0
 80230b0:	f240 235b 	movw	r3, #603	; 0x25b
 80230b4:	4a63      	ldr	r2, [pc, #396]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80230b6:	4864      	ldr	r0, [pc, #400]	; (8023248 <SVCCTL_App_Notification+0x510>)
 80230b8:	f002 ff36 	bl	8025f28 <iprintf>
 80230bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80230c0:	4619      	mov	r1, r3
 80230c2:	4865      	ldr	r0, [pc, #404]	; (8023258 <SVCCTL_App_Notification+0x520>)
 80230c4:	f002 ff30 	bl	8025f28 <iprintf>
          break;
 80230c8:	e0b0      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80230ca:	485d      	ldr	r0, [pc, #372]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80230cc:	f7ff fc5a 	bl	8022984 <DbgTraceGetFileName>
 80230d0:	4601      	mov	r1, r0
 80230d2:	f240 235f 	movw	r3, #607	; 0x25f
 80230d6:	4a5b      	ldr	r2, [pc, #364]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80230d8:	485b      	ldr	r0, [pc, #364]	; (8023248 <SVCCTL_App_Notification+0x510>)
 80230da:	f002 ff25 	bl	8025f28 <iprintf>
 80230de:	485f      	ldr	r0, [pc, #380]	; (802325c <SVCCTL_App_Notification+0x524>)
 80230e0:	f002 ffbe 	bl	8026060 <puts>
          break;
 80230e4:	e0a2      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80230e6:	4856      	ldr	r0, [pc, #344]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80230e8:	f7ff fc4c 	bl	8022984 <DbgTraceGetFileName>
 80230ec:	4601      	mov	r1, r0
 80230ee:	f240 2367 	movw	r3, #615	; 0x267
 80230f2:	4a54      	ldr	r2, [pc, #336]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80230f4:	4854      	ldr	r0, [pc, #336]	; (8023248 <SVCCTL_App_Notification+0x510>)
 80230f6:	f002 ff17 	bl	8025f28 <iprintf>
 80230fa:	4859      	ldr	r0, [pc, #356]	; (8023260 <SVCCTL_App_Notification+0x528>)
 80230fc:	f002 ffb0 	bl	8026060 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8023100:	484f      	ldr	r0, [pc, #316]	; (8023240 <SVCCTL_App_Notification+0x508>)
 8023102:	f7ff fc3f 	bl	8022984 <DbgTraceGetFileName>
 8023106:	4601      	mov	r1, r0
 8023108:	f44f 731a 	mov.w	r3, #616	; 0x268
 802310c:	4a4d      	ldr	r2, [pc, #308]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 802310e:	484e      	ldr	r0, [pc, #312]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023110:	f002 ff0a 	bl	8025f28 <iprintf>
 8023114:	69fb      	ldr	r3, [r7, #28]
 8023116:	3302      	adds	r3, #2
 8023118:	f8d3 3002 	ldr.w	r3, [r3, #2]
 802311c:	4619      	mov	r1, r3
 802311e:	4851      	ldr	r0, [pc, #324]	; (8023264 <SVCCTL_App_Notification+0x52c>)
 8023120:	f002 ff02 	bl	8025f28 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8023124:	4846      	ldr	r0, [pc, #280]	; (8023240 <SVCCTL_App_Notification+0x508>)
 8023126:	f7ff fc2d 	bl	8022984 <DbgTraceGetFileName>
 802312a:	4601      	mov	r1, r0
 802312c:	f240 236a 	movw	r3, #618	; 0x26a
 8023130:	4a44      	ldr	r2, [pc, #272]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 8023132:	4845      	ldr	r0, [pc, #276]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023134:	f002 fef8 	bl	8025f28 <iprintf>
 8023138:	69fb      	ldr	r3, [r7, #28]
 802313a:	3302      	adds	r3, #2
 802313c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8023140:	4619      	mov	r1, r3
 8023142:	4849      	ldr	r0, [pc, #292]	; (8023268 <SVCCTL_App_Notification+0x530>)
 8023144:	f002 fef0 	bl	8025f28 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8023148:	4b41      	ldr	r3, [pc, #260]	; (8023250 <SVCCTL_App_Notification+0x518>)
 802314a:	8adb      	ldrh	r3, [r3, #22]
 802314c:	2101      	movs	r1, #1
 802314e:	4618      	mov	r0, r3
 8023150:	f7fd ffe2 	bl	8021118 <aci_gap_numeric_comparison_value_confirm_yesno>
 8023154:	4603      	mov	r3, r0
 8023156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 802315a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802315e:	2b00      	cmp	r3, #0
 8023160:	d010      	beq.n	8023184 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8023162:	4837      	ldr	r0, [pc, #220]	; (8023240 <SVCCTL_App_Notification+0x508>)
 8023164:	f7ff fc0e 	bl	8022984 <DbgTraceGetFileName>
 8023168:	4601      	mov	r1, r0
 802316a:	f240 236f 	movw	r3, #623	; 0x26f
 802316e:	4a35      	ldr	r2, [pc, #212]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 8023170:	4835      	ldr	r0, [pc, #212]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023172:	f002 fed9 	bl	8025f28 <iprintf>
 8023176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802317a:	4619      	mov	r1, r3
 802317c:	483b      	ldr	r0, [pc, #236]	; (802326c <SVCCTL_App_Notification+0x534>)
 802317e:	f002 fed3 	bl	8025f28 <iprintf>
          break;
 8023182:	e053      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8023184:	482e      	ldr	r0, [pc, #184]	; (8023240 <SVCCTL_App_Notification+0x508>)
 8023186:	f7ff fbfd 	bl	8022984 <DbgTraceGetFileName>
 802318a:	4601      	mov	r1, r0
 802318c:	f240 2373 	movw	r3, #627	; 0x273
 8023190:	4a2c      	ldr	r2, [pc, #176]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 8023192:	482d      	ldr	r0, [pc, #180]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023194:	f002 fec8 	bl	8025f28 <iprintf>
 8023198:	4835      	ldr	r0, [pc, #212]	; (8023270 <SVCCTL_App_Notification+0x538>)
 802319a:	f002 ff61 	bl	8026060 <puts>
          break;
 802319e:	e045      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80231a0:	69fb      	ldr	r3, [r7, #28]
 80231a2:	3302      	adds	r3, #2
 80231a4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80231a6:	4826      	ldr	r0, [pc, #152]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80231a8:	f7ff fbec 	bl	8022984 <DbgTraceGetFileName>
 80231ac:	4601      	mov	r1, r0
 80231ae:	f240 237d 	movw	r3, #637	; 0x27d
 80231b2:	4a24      	ldr	r2, [pc, #144]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80231b4:	4824      	ldr	r0, [pc, #144]	; (8023248 <SVCCTL_App_Notification+0x510>)
 80231b6:	f002 feb7 	bl	8025f28 <iprintf>
 80231ba:	482e      	ldr	r0, [pc, #184]	; (8023274 <SVCCTL_App_Notification+0x53c>)
 80231bc:	f002 ff50 	bl	8026060 <puts>
          if (p_pairing_complete->Status != 0)
 80231c0:	69bb      	ldr	r3, [r7, #24]
 80231c2:	789b      	ldrb	r3, [r3, #2]
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	d013      	beq.n	80231f0 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80231c8:	481d      	ldr	r0, [pc, #116]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80231ca:	f7ff fbdb 	bl	8022984 <DbgTraceGetFileName>
 80231ce:	4601      	mov	r1, r0
 80231d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80231d4:	4a1b      	ldr	r2, [pc, #108]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80231d6:	481c      	ldr	r0, [pc, #112]	; (8023248 <SVCCTL_App_Notification+0x510>)
 80231d8:	f002 fea6 	bl	8025f28 <iprintf>
 80231dc:	69bb      	ldr	r3, [r7, #24]
 80231de:	789b      	ldrb	r3, [r3, #2]
 80231e0:	4619      	mov	r1, r3
 80231e2:	69bb      	ldr	r3, [r7, #24]
 80231e4:	78db      	ldrb	r3, [r3, #3]
 80231e6:	461a      	mov	r2, r3
 80231e8:	4823      	ldr	r0, [pc, #140]	; (8023278 <SVCCTL_App_Notification+0x540>)
 80231ea:	f002 fe9d 	bl	8025f28 <iprintf>
 80231ee:	e00c      	b.n	802320a <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 80231f0:	4813      	ldr	r0, [pc, #76]	; (8023240 <SVCCTL_App_Notification+0x508>)
 80231f2:	f7ff fbc7 	bl	8022984 <DbgTraceGetFileName>
 80231f6:	4601      	mov	r1, r0
 80231f8:	f44f 7321 	mov.w	r3, #644	; 0x284
 80231fc:	4a11      	ldr	r2, [pc, #68]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 80231fe:	4812      	ldr	r0, [pc, #72]	; (8023248 <SVCCTL_App_Notification+0x510>)
 8023200:	f002 fe92 	bl	8025f28 <iprintf>
 8023204:	481d      	ldr	r0, [pc, #116]	; (802327c <SVCCTL_App_Notification+0x544>)
 8023206:	f002 ff2b 	bl	8026060 <puts>
          APP_DBG_MSG("\n");
 802320a:	480d      	ldr	r0, [pc, #52]	; (8023240 <SVCCTL_App_Notification+0x508>)
 802320c:	f7ff fbba 	bl	8022984 <DbgTraceGetFileName>
 8023210:	4601      	mov	r1, r0
 8023212:	f240 2386 	movw	r3, #646	; 0x286
 8023216:	4a0b      	ldr	r2, [pc, #44]	; (8023244 <SVCCTL_App_Notification+0x50c>)
 8023218:	480b      	ldr	r0, [pc, #44]	; (8023248 <SVCCTL_App_Notification+0x510>)
 802321a:	f002 fe85 	bl	8025f28 <iprintf>
 802321e:	200a      	movs	r0, #10
 8023220:	f002 fe9a 	bl	8025f58 <putchar>
          break;
 8023224:	e002      	b.n	802322c <SVCCTL_App_Notification+0x4f4>
          break;
 8023226:	bf00      	nop
 8023228:	e003      	b.n	8023232 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 802322a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 802322c:	e001      	b.n	8023232 <SVCCTL_App_Notification+0x4fa>
      break;
 802322e:	bf00      	nop
 8023230:	e000      	b.n	8023234 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8023232:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8023234:	2301      	movs	r3, #1
}
 8023236:	4618      	mov	r0, r3
 8023238:	3728      	adds	r7, #40	; 0x28
 802323a:	46bd      	mov	sp, r7
 802323c:	bdb0      	pop	{r4, r5, r7, pc}
 802323e:	bf00      	nop
 8023240:	08029040 	.word	0x08029040
 8023244:	0802a39c 	.word	0x0802a39c
 8023248:	0802905c 	.word	0x0802905c
 802324c:	08029380 	.word	0x08029380
 8023250:	2000a478 	.word	0x2000a478
 8023254:	0001b207 	.word	0x0001b207
 8023258:	080293a8 	.word	0x080293a8
 802325c:	080293dc 	.word	0x080293dc
 8023260:	08029404 	.word	0x08029404
 8023264:	08029438 	.word	0x08029438
 8023268:	08029454 	.word	0x08029454
 802326c:	0802946c 	.word	0x0802946c
 8023270:	080294bc 	.word	0x080294bc
 8023274:	08029504 	.word	0x08029504
 8023278:	08029530 	.word	0x08029530
 802327c:	0802956c 	.word	0x0802956c

08023280 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8023280:	b580      	push	{r7, lr}
 8023282:	b082      	sub	sp, #8
 8023284:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8023286:	4b06      	ldr	r3, [pc, #24]	; (80232a0 <Ble_Tl_Init+0x20>)
 8023288:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 802328a:	4b06      	ldr	r3, [pc, #24]	; (80232a4 <Ble_Tl_Init+0x24>)
 802328c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 802328e:	463b      	mov	r3, r7
 8023290:	4619      	mov	r1, r3
 8023292:	4805      	ldr	r0, [pc, #20]	; (80232a8 <Ble_Tl_Init+0x28>)
 8023294:	f7fe fe64 	bl	8021f60 <hci_init>

  return;
 8023298:	bf00      	nop
}
 802329a:	3708      	adds	r7, #8
 802329c:	46bd      	mov	sp, r7
 802329e:	bd80      	pop	{r7, pc}
 80232a0:	200300d8 	.word	0x200300d8
 80232a4:	08023a75 	.word	0x08023a75
 80232a8:	08023a3d 	.word	0x08023a3d

080232ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80232ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232ae:	b08d      	sub	sp, #52	; 0x34
 80232b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80232b2:	2300      	movs	r3, #0
 80232b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80232b6:	2392      	movs	r3, #146	; 0x92
 80232b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80232ba:	48a3      	ldr	r0, [pc, #652]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80232bc:	f7ff fb62 	bl	8022984 <DbgTraceGetFileName>
 80232c0:	4601      	mov	r1, r0
 80232c2:	f240 23c6 	movw	r3, #710	; 0x2c6
 80232c6:	4aa1      	ldr	r2, [pc, #644]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80232c8:	48a1      	ldr	r0, [pc, #644]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80232ca:	f002 fe2d 	bl	8025f28 <iprintf>
 80232ce:	48a1      	ldr	r0, [pc, #644]	; (8023554 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80232d0:	f002 fec6 	bl	8026060 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80232d4:	f7fe fb73 	bl	80219be <hci_reset>
 80232d8:	4603      	mov	r3, r0
 80232da:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80232dc:	7dfb      	ldrb	r3, [r7, #23]
 80232de:	2b00      	cmp	r3, #0
 80232e0:	d00f      	beq.n	8023302 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80232e2:	4899      	ldr	r0, [pc, #612]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80232e4:	f7ff fb4e 	bl	8022984 <DbgTraceGetFileName>
 80232e8:	4601      	mov	r1, r0
 80232ea:	f240 23cf 	movw	r3, #719	; 0x2cf
 80232ee:	4a97      	ldr	r2, [pc, #604]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80232f0:	4897      	ldr	r0, [pc, #604]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80232f2:	f002 fe19 	bl	8025f28 <iprintf>
 80232f6:	7dfb      	ldrb	r3, [r7, #23]
 80232f8:	4619      	mov	r1, r3
 80232fa:	4897      	ldr	r0, [pc, #604]	; (8023558 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80232fc:	f002 fe14 	bl	8025f28 <iprintf>
 8023300:	e00c      	b.n	802331c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8023302:	4891      	ldr	r0, [pc, #580]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023304:	f7ff fb3e 	bl	8022984 <DbgTraceGetFileName>
 8023308:	4601      	mov	r1, r0
 802330a:	f240 23d3 	movw	r3, #723	; 0x2d3
 802330e:	4a8f      	ldr	r2, [pc, #572]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023310:	488f      	ldr	r0, [pc, #572]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023312:	f002 fe09 	bl	8025f28 <iprintf>
 8023316:	4891      	ldr	r0, [pc, #580]	; (802355c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8023318:	f002 fea2 	bl	8026060 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 802331c:	f000 fad8 	bl	80238d0 <BleGetBdAddress>
 8023320:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8023322:	693a      	ldr	r2, [r7, #16]
 8023324:	2106      	movs	r1, #6
 8023326:	2000      	movs	r0, #0
 8023328:	f7fe fa09 	bl	802173e <aci_hal_write_config_data>
 802332c:	4603      	mov	r3, r0
 802332e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8023330:	7dfb      	ldrb	r3, [r7, #23]
 8023332:	2b00      	cmp	r3, #0
 8023334:	d00f      	beq.n	8023356 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8023336:	4884      	ldr	r0, [pc, #528]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023338:	f7ff fb24 	bl	8022984 <DbgTraceGetFileName>
 802333c:	4601      	mov	r1, r0
 802333e:	f240 23dd 	movw	r3, #733	; 0x2dd
 8023342:	4a82      	ldr	r2, [pc, #520]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023344:	4882      	ldr	r0, [pc, #520]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023346:	f002 fdef 	bl	8025f28 <iprintf>
 802334a:	7dfb      	ldrb	r3, [r7, #23]
 802334c:	4619      	mov	r1, r3
 802334e:	4884      	ldr	r0, [pc, #528]	; (8023560 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8023350:	f002 fdea 	bl	8025f28 <iprintf>
 8023354:	e035      	b.n	80233c2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8023356:	487c      	ldr	r0, [pc, #496]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023358:	f7ff fb14 	bl	8022984 <DbgTraceGetFileName>
 802335c:	4601      	mov	r1, r0
 802335e:	f240 23e1 	movw	r3, #737	; 0x2e1
 8023362:	4a7a      	ldr	r2, [pc, #488]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023364:	487a      	ldr	r0, [pc, #488]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023366:	f002 fddf 	bl	8025f28 <iprintf>
 802336a:	487e      	ldr	r0, [pc, #504]	; (8023564 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 802336c:	f002 fe78 	bl	8026060 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8023370:	4875      	ldr	r0, [pc, #468]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023372:	f7ff fb07 	bl	8022984 <DbgTraceGetFileName>
 8023376:	4601      	mov	r1, r0
 8023378:	f240 23e2 	movw	r3, #738	; 0x2e2
 802337c:	4a73      	ldr	r2, [pc, #460]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 802337e:	4874      	ldr	r0, [pc, #464]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023380:	f002 fdd2 	bl	8025f28 <iprintf>
 8023384:	693b      	ldr	r3, [r7, #16]
 8023386:	3305      	adds	r3, #5
 8023388:	781b      	ldrb	r3, [r3, #0]
 802338a:	4618      	mov	r0, r3
 802338c:	693b      	ldr	r3, [r7, #16]
 802338e:	3304      	adds	r3, #4
 8023390:	781b      	ldrb	r3, [r3, #0]
 8023392:	461c      	mov	r4, r3
 8023394:	693b      	ldr	r3, [r7, #16]
 8023396:	3303      	adds	r3, #3
 8023398:	781b      	ldrb	r3, [r3, #0]
 802339a:	461d      	mov	r5, r3
 802339c:	693b      	ldr	r3, [r7, #16]
 802339e:	3302      	adds	r3, #2
 80233a0:	781b      	ldrb	r3, [r3, #0]
 80233a2:	461a      	mov	r2, r3
 80233a4:	693b      	ldr	r3, [r7, #16]
 80233a6:	3301      	adds	r3, #1
 80233a8:	781b      	ldrb	r3, [r3, #0]
 80233aa:	4619      	mov	r1, r3
 80233ac:	693b      	ldr	r3, [r7, #16]
 80233ae:	781b      	ldrb	r3, [r3, #0]
 80233b0:	9302      	str	r3, [sp, #8]
 80233b2:	9101      	str	r1, [sp, #4]
 80233b4:	9200      	str	r2, [sp, #0]
 80233b6:	462b      	mov	r3, r5
 80233b8:	4622      	mov	r2, r4
 80233ba:	4601      	mov	r1, r0
 80233bc:	486a      	ldr	r0, [pc, #424]	; (8023568 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80233be:	f002 fdb3 	bl	8025f28 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80233c2:	4a6a      	ldr	r2, [pc, #424]	; (802356c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80233c4:	2110      	movs	r1, #16
 80233c6:	2018      	movs	r0, #24
 80233c8:	f7fe f9b9 	bl	802173e <aci_hal_write_config_data>
 80233cc:	4603      	mov	r3, r0
 80233ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80233d0:	7dfb      	ldrb	r3, [r7, #23]
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	d00f      	beq.n	80233f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80233d6:	485c      	ldr	r0, [pc, #368]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80233d8:	f7ff fad4 	bl	8022984 <DbgTraceGetFileName>
 80233dc:	4601      	mov	r1, r0
 80233de:	f44f 734b 	mov.w	r3, #812	; 0x32c
 80233e2:	4a5a      	ldr	r2, [pc, #360]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80233e4:	485a      	ldr	r0, [pc, #360]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80233e6:	f002 fd9f 	bl	8025f28 <iprintf>
 80233ea:	7dfb      	ldrb	r3, [r7, #23]
 80233ec:	4619      	mov	r1, r3
 80233ee:	4860      	ldr	r0, [pc, #384]	; (8023570 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 80233f0:	f002 fd9a 	bl	8025f28 <iprintf>
 80233f4:	e00c      	b.n	8023410 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80233f6:	4854      	ldr	r0, [pc, #336]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80233f8:	f7ff fac4 	bl	8022984 <DbgTraceGetFileName>
 80233fc:	4601      	mov	r1, r0
 80233fe:	f44f 734c 	mov.w	r3, #816	; 0x330
 8023402:	4a52      	ldr	r2, [pc, #328]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023404:	4852      	ldr	r0, [pc, #328]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023406:	f002 fd8f 	bl	8025f28 <iprintf>
 802340a:	485a      	ldr	r0, [pc, #360]	; (8023574 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 802340c:	f002 fe28 	bl	8026060 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8023410:	4a59      	ldr	r2, [pc, #356]	; (8023578 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8023412:	2110      	movs	r1, #16
 8023414:	2008      	movs	r0, #8
 8023416:	f7fe f992 	bl	802173e <aci_hal_write_config_data>
 802341a:	4603      	mov	r3, r0
 802341c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 802341e:	7dfb      	ldrb	r3, [r7, #23]
 8023420:	2b00      	cmp	r3, #0
 8023422:	d00f      	beq.n	8023444 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8023424:	4848      	ldr	r0, [pc, #288]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023426:	f7ff faad 	bl	8022984 <DbgTraceGetFileName>
 802342a:	4601      	mov	r1, r0
 802342c:	f240 3339 	movw	r3, #825	; 0x339
 8023430:	4a46      	ldr	r2, [pc, #280]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023432:	4847      	ldr	r0, [pc, #284]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023434:	f002 fd78 	bl	8025f28 <iprintf>
 8023438:	7dfb      	ldrb	r3, [r7, #23]
 802343a:	4619      	mov	r1, r3
 802343c:	484f      	ldr	r0, [pc, #316]	; (802357c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 802343e:	f002 fd73 	bl	8025f28 <iprintf>
 8023442:	e00c      	b.n	802345e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8023444:	4840      	ldr	r0, [pc, #256]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023446:	f7ff fa9d 	bl	8022984 <DbgTraceGetFileName>
 802344a:	4601      	mov	r1, r0
 802344c:	f240 333d 	movw	r3, #829	; 0x33d
 8023450:	4a3e      	ldr	r2, [pc, #248]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023452:	483f      	ldr	r0, [pc, #252]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023454:	f002 fd68 	bl	8025f28 <iprintf>
 8023458:	4849      	ldr	r0, [pc, #292]	; (8023580 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 802345a:	f002 fe01 	bl	8026060 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 802345e:	2118      	movs	r1, #24
 8023460:	2001      	movs	r0, #1
 8023462:	f7fe f9f1 	bl	8021848 <aci_hal_set_tx_power_level>
 8023466:	4603      	mov	r3, r0
 8023468:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 802346a:	7dfb      	ldrb	r3, [r7, #23]
 802346c:	2b00      	cmp	r3, #0
 802346e:	d00f      	beq.n	8023490 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8023470:	4835      	ldr	r0, [pc, #212]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023472:	f7ff fa87 	bl	8022984 <DbgTraceGetFileName>
 8023476:	4601      	mov	r1, r0
 8023478:	f240 3346 	movw	r3, #838	; 0x346
 802347c:	4a33      	ldr	r2, [pc, #204]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 802347e:	4834      	ldr	r0, [pc, #208]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023480:	f002 fd52 	bl	8025f28 <iprintf>
 8023484:	7dfb      	ldrb	r3, [r7, #23]
 8023486:	4619      	mov	r1, r3
 8023488:	483e      	ldr	r0, [pc, #248]	; (8023584 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 802348a:	f002 fd4d 	bl	8025f28 <iprintf>
 802348e:	e00c      	b.n	80234aa <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8023490:	482d      	ldr	r0, [pc, #180]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8023492:	f7ff fa77 	bl	8022984 <DbgTraceGetFileName>
 8023496:	4601      	mov	r1, r0
 8023498:	f240 334a 	movw	r3, #842	; 0x34a
 802349c:	4a2b      	ldr	r2, [pc, #172]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 802349e:	482c      	ldr	r0, [pc, #176]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80234a0:	f002 fd42 	bl	8025f28 <iprintf>
 80234a4:	4838      	ldr	r0, [pc, #224]	; (8023588 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80234a6:	f002 fddb 	bl	8026060 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80234aa:	f7fd fe9c 	bl	80211e6 <aci_gatt_init>
 80234ae:	4603      	mov	r3, r0
 80234b0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80234b2:	7dfb      	ldrb	r3, [r7, #23]
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	d00f      	beq.n	80234d8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80234b8:	4823      	ldr	r0, [pc, #140]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80234ba:	f7ff fa63 	bl	8022984 <DbgTraceGetFileName>
 80234be:	4601      	mov	r1, r0
 80234c0:	f240 3353 	movw	r3, #851	; 0x353
 80234c4:	4a21      	ldr	r2, [pc, #132]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80234c6:	4822      	ldr	r0, [pc, #136]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80234c8:	f002 fd2e 	bl	8025f28 <iprintf>
 80234cc:	7dfb      	ldrb	r3, [r7, #23]
 80234ce:	4619      	mov	r1, r3
 80234d0:	482e      	ldr	r0, [pc, #184]	; (802358c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80234d2:	f002 fd29 	bl	8025f28 <iprintf>
 80234d6:	e00c      	b.n	80234f2 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80234d8:	481b      	ldr	r0, [pc, #108]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80234da:	f7ff fa53 	bl	8022984 <DbgTraceGetFileName>
 80234de:	4601      	mov	r1, r0
 80234e0:	f240 3357 	movw	r3, #855	; 0x357
 80234e4:	4a19      	ldr	r2, [pc, #100]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80234e6:	481a      	ldr	r0, [pc, #104]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80234e8:	f002 fd1e 	bl	8025f28 <iprintf>
 80234ec:	4828      	ldr	r0, [pc, #160]	; (8023590 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80234ee:	f002 fdb7 	bl	8026060 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80234f2:	2300      	movs	r3, #0
 80234f4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80234f6:	7bfb      	ldrb	r3, [r7, #15]
 80234f8:	f043 0301 	orr.w	r3, r3, #1
 80234fc:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80234fe:	7bfb      	ldrb	r3, [r7, #15]
 8023500:	2b00      	cmp	r3, #0
 8023502:	d069      	beq.n	80235d8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8023504:	4b23      	ldr	r3, [pc, #140]	; (8023594 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8023506:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8023508:	1dba      	adds	r2, r7, #6
 802350a:	7bf8      	ldrb	r0, [r7, #15]
 802350c:	1cbb      	adds	r3, r7, #2
 802350e:	9301      	str	r3, [sp, #4]
 8023510:	1d3b      	adds	r3, r7, #4
 8023512:	9300      	str	r3, [sp, #0]
 8023514:	4613      	mov	r3, r2
 8023516:	2205      	movs	r2, #5
 8023518:	2100      	movs	r1, #0
 802351a:	f7fd fcba 	bl	8020e92 <aci_gap_init>
 802351e:	4603      	mov	r3, r0
 8023520:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8023522:	7dfb      	ldrb	r3, [r7, #23]
 8023524:	2b00      	cmp	r3, #0
 8023526:	d039      	beq.n	802359c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8023528:	4807      	ldr	r0, [pc, #28]	; (8023548 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 802352a:	f7ff fa2b 	bl	8022984 <DbgTraceGetFileName>
 802352e:	4601      	mov	r1, r0
 8023530:	f240 3377 	movw	r3, #887	; 0x377
 8023534:	4a05      	ldr	r2, [pc, #20]	; (802354c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8023536:	4806      	ldr	r0, [pc, #24]	; (8023550 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8023538:	f002 fcf6 	bl	8025f28 <iprintf>
 802353c:	7dfb      	ldrb	r3, [r7, #23]
 802353e:	4619      	mov	r1, r3
 8023540:	4815      	ldr	r0, [pc, #84]	; (8023598 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8023542:	f002 fcf1 	bl	8025f28 <iprintf>
 8023546:	e036      	b.n	80235b6 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8023548:	08029040 	.word	0x08029040
 802354c:	0802a3b4 	.word	0x0802a3b4
 8023550:	0802905c 	.word	0x0802905c
 8023554:	08029584 	.word	0x08029584
 8023558:	080295b0 	.word	0x080295b0
 802355c:	080295e0 	.word	0x080295e0
 8023560:	08029600 	.word	0x08029600
 8023564:	0802965c 	.word	0x0802965c
 8023568:	080296a8 	.word	0x080296a8
 802356c:	0802a36c 	.word	0x0802a36c
 8023570:	080296e4 	.word	0x080296e4
 8023574:	0802973c 	.word	0x0802973c
 8023578:	0802a37c 	.word	0x0802a37c
 802357c:	08029784 	.word	0x08029784
 8023580:	080297dc 	.word	0x080297dc
 8023584:	08029824 	.word	0x08029824
 8023588:	08029864 	.word	0x08029864
 802358c:	08029894 	.word	0x08029894
 8023590:	080298c8 	.word	0x080298c8
 8023594:	080298ec 	.word	0x080298ec
 8023598:	080298f4 	.word	0x080298f4
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 802359c:	487e      	ldr	r0, [pc, #504]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 802359e:	f7ff f9f1 	bl	8022984 <DbgTraceGetFileName>
 80235a2:	4601      	mov	r1, r0
 80235a4:	f240 337b 	movw	r3, #891	; 0x37b
 80235a8:	4a7c      	ldr	r2, [pc, #496]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80235aa:	487d      	ldr	r0, [pc, #500]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80235ac:	f002 fcbc 	bl	8025f28 <iprintf>
 80235b0:	487c      	ldr	r0, [pc, #496]	; (80237a4 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 80235b2:	f002 fd55 	bl	8026060 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80235b6:	88fc      	ldrh	r4, [r7, #6]
 80235b8:	88bd      	ldrh	r5, [r7, #4]
 80235ba:	68b8      	ldr	r0, [r7, #8]
 80235bc:	f7dc fde0 	bl	8000180 <strlen>
 80235c0:	4603      	mov	r3, r0
 80235c2:	b2da      	uxtb	r2, r3
 80235c4:	68bb      	ldr	r3, [r7, #8]
 80235c6:	9300      	str	r3, [sp, #0]
 80235c8:	4613      	mov	r3, r2
 80235ca:	2200      	movs	r2, #0
 80235cc:	4629      	mov	r1, r5
 80235ce:	4620      	mov	r0, r4
 80235d0:	f7fe f80c 	bl	80215ec <aci_gatt_update_char_value>
 80235d4:	4603      	mov	r3, r0
 80235d6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80235d8:	88f8      	ldrh	r0, [r7, #6]
 80235da:	8879      	ldrh	r1, [r7, #2]
 80235dc:	463b      	mov	r3, r7
 80235de:	9300      	str	r3, [sp, #0]
 80235e0:	2302      	movs	r3, #2
 80235e2:	2200      	movs	r2, #0
 80235e4:	f7fe f802 	bl	80215ec <aci_gatt_update_char_value>
 80235e8:	4603      	mov	r3, r0
 80235ea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80235ec:	2202      	movs	r2, #2
 80235ee:	2102      	movs	r1, #2
 80235f0:	2000      	movs	r0, #0
 80235f2:	f7fe fa08 	bl	8021a06 <hci_le_set_default_phy>
 80235f6:	4603      	mov	r3, r0
 80235f8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80235fa:	7dfb      	ldrb	r3, [r7, #23]
 80235fc:	2b00      	cmp	r3, #0
 80235fe:	d00f      	beq.n	8023620 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8023600:	4865      	ldr	r0, [pc, #404]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8023602:	f7ff f9bf 	bl	8022984 <DbgTraceGetFileName>
 8023606:	4601      	mov	r1, r0
 8023608:	f240 339d 	movw	r3, #925	; 0x39d
 802360c:	4a63      	ldr	r2, [pc, #396]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 802360e:	4864      	ldr	r0, [pc, #400]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8023610:	f002 fc8a 	bl	8025f28 <iprintf>
 8023614:	7dfb      	ldrb	r3, [r7, #23]
 8023616:	4619      	mov	r1, r3
 8023618:	4863      	ldr	r0, [pc, #396]	; (80237a8 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 802361a:	f002 fc85 	bl	8025f28 <iprintf>
 802361e:	e00c      	b.n	802363a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8023620:	485d      	ldr	r0, [pc, #372]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8023622:	f7ff f9af 	bl	8022984 <DbgTraceGetFileName>
 8023626:	4601      	mov	r1, r0
 8023628:	f240 33a1 	movw	r3, #929	; 0x3a1
 802362c:	4a5b      	ldr	r2, [pc, #364]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 802362e:	485c      	ldr	r0, [pc, #368]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8023630:	f002 fc7a 	bl	8025f28 <iprintf>
 8023634:	485d      	ldr	r0, [pc, #372]	; (80237ac <Ble_Hci_Gap_Gatt_Init+0x500>)
 8023636:	f002 fd13 	bl	8026060 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 802363a:	4b5d      	ldr	r3, [pc, #372]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 802363c:	2201      	movs	r2, #1
 802363e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8023640:	4b5b      	ldr	r3, [pc, #364]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8023642:	781b      	ldrb	r3, [r3, #0]
 8023644:	4618      	mov	r0, r3
 8023646:	f7fd faa5 	bl	8020b94 <aci_gap_set_io_capability>
 802364a:	4603      	mov	r3, r0
 802364c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 802364e:	7dfb      	ldrb	r3, [r7, #23]
 8023650:	2b00      	cmp	r3, #0
 8023652:	d00f      	beq.n	8023674 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8023654:	4850      	ldr	r0, [pc, #320]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8023656:	f7ff f995 	bl	8022984 <DbgTraceGetFileName>
 802365a:	4601      	mov	r1, r0
 802365c:	f240 33ab 	movw	r3, #939	; 0x3ab
 8023660:	4a4e      	ldr	r2, [pc, #312]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8023662:	484f      	ldr	r0, [pc, #316]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8023664:	f002 fc60 	bl	8025f28 <iprintf>
 8023668:	7dfb      	ldrb	r3, [r7, #23]
 802366a:	4619      	mov	r1, r3
 802366c:	4851      	ldr	r0, [pc, #324]	; (80237b4 <Ble_Hci_Gap_Gatt_Init+0x508>)
 802366e:	f002 fc5b 	bl	8025f28 <iprintf>
 8023672:	e00c      	b.n	802368e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8023674:	4848      	ldr	r0, [pc, #288]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8023676:	f7ff f985 	bl	8022984 <DbgTraceGetFileName>
 802367a:	4601      	mov	r1, r0
 802367c:	f240 33af 	movw	r3, #943	; 0x3af
 8023680:	4a46      	ldr	r2, [pc, #280]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8023682:	4847      	ldr	r0, [pc, #284]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8023684:	f002 fc50 	bl	8025f28 <iprintf>
 8023688:	484b      	ldr	r0, [pc, #300]	; (80237b8 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 802368a:	f002 fce9 	bl	8026060 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 802368e:	4b48      	ldr	r3, [pc, #288]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8023690:	2201      	movs	r2, #1
 8023692:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8023694:	4b46      	ldr	r3, [pc, #280]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8023696:	2208      	movs	r2, #8
 8023698:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 802369a:	4b45      	ldr	r3, [pc, #276]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 802369c:	2210      	movs	r2, #16
 802369e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80236a0:	4b43      	ldr	r3, [pc, #268]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236a2:	2200      	movs	r2, #0
 80236a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80236a6:	4b42      	ldr	r3, [pc, #264]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236a8:	4a44      	ldr	r2, [pc, #272]	; (80237bc <Ble_Hci_Gap_Gatt_Init+0x510>)
 80236aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80236ac:	4b40      	ldr	r3, [pc, #256]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236ae:	2200      	movs	r2, #0
 80236b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80236b2:	4b3f      	ldr	r3, [pc, #252]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236b4:	789c      	ldrb	r4, [r3, #2]
 80236b6:	4b3e      	ldr	r3, [pc, #248]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236b8:	785d      	ldrb	r5, [r3, #1]
 80236ba:	4b3d      	ldr	r3, [pc, #244]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236bc:	791b      	ldrb	r3, [r3, #4]
 80236be:	4a3c      	ldr	r2, [pc, #240]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236c0:	7952      	ldrb	r2, [r2, #5]
 80236c2:	493b      	ldr	r1, [pc, #236]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236c4:	78c9      	ldrb	r1, [r1, #3]
 80236c6:	483a      	ldr	r0, [pc, #232]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80236c8:	6880      	ldr	r0, [r0, #8]
 80236ca:	2600      	movs	r6, #0
 80236cc:	9604      	str	r6, [sp, #16]
 80236ce:	9003      	str	r0, [sp, #12]
 80236d0:	9102      	str	r1, [sp, #8]
 80236d2:	9201      	str	r2, [sp, #4]
 80236d4:	9300      	str	r3, [sp, #0]
 80236d6:	2300      	movs	r3, #0
 80236d8:	2201      	movs	r2, #1
 80236da:	4629      	mov	r1, r5
 80236dc:	4620      	mov	r0, r4
 80236de:	f7fd faad 	bl	8020c3c <aci_gap_set_authentication_requirement>
 80236e2:	4603      	mov	r3, r0
 80236e4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80236e6:	7dfb      	ldrb	r3, [r7, #23]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d00f      	beq.n	802370c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80236ec:	482a      	ldr	r0, [pc, #168]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80236ee:	f7ff f949 	bl	8022984 <DbgTraceGetFileName>
 80236f2:	4601      	mov	r1, r0
 80236f4:	f240 33ca 	movw	r3, #970	; 0x3ca
 80236f8:	4a28      	ldr	r2, [pc, #160]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80236fa:	4829      	ldr	r0, [pc, #164]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80236fc:	f002 fc14 	bl	8025f28 <iprintf>
 8023700:	7dfb      	ldrb	r3, [r7, #23]
 8023702:	4619      	mov	r1, r3
 8023704:	482e      	ldr	r0, [pc, #184]	; (80237c0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 8023706:	f002 fc0f 	bl	8025f28 <iprintf>
 802370a:	e00c      	b.n	8023726 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 802370c:	4822      	ldr	r0, [pc, #136]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 802370e:	f7ff f939 	bl	8022984 <DbgTraceGetFileName>
 8023712:	4601      	mov	r1, r0
 8023714:	f240 33ce 	movw	r3, #974	; 0x3ce
 8023718:	4a20      	ldr	r2, [pc, #128]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 802371a:	4821      	ldr	r0, [pc, #132]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 802371c:	f002 fc04 	bl	8025f28 <iprintf>
 8023720:	4828      	ldr	r0, [pc, #160]	; (80237c4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8023722:	f002 fc9d 	bl	8026060 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8023726:	4b22      	ldr	r3, [pc, #136]	; (80237b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8023728:	789b      	ldrb	r3, [r3, #2]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d023      	beq.n	8023776 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 802372e:	f7fd fccf 	bl	80210d0 <aci_gap_configure_whitelist>
 8023732:	4603      	mov	r3, r0
 8023734:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8023736:	7dfb      	ldrb	r3, [r7, #23]
 8023738:	2b00      	cmp	r3, #0
 802373a:	d00f      	beq.n	802375c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 802373c:	4816      	ldr	r0, [pc, #88]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 802373e:	f7ff f921 	bl	8022984 <DbgTraceGetFileName>
 8023742:	4601      	mov	r1, r0
 8023744:	f240 33d9 	movw	r3, #985	; 0x3d9
 8023748:	4a14      	ldr	r2, [pc, #80]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 802374a:	4815      	ldr	r0, [pc, #84]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 802374c:	f002 fbec 	bl	8025f28 <iprintf>
 8023750:	7dfb      	ldrb	r3, [r7, #23]
 8023752:	4619      	mov	r1, r3
 8023754:	481c      	ldr	r0, [pc, #112]	; (80237c8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8023756:	f002 fbe7 	bl	8025f28 <iprintf>
 802375a:	e00c      	b.n	8023776 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 802375c:	480e      	ldr	r0, [pc, #56]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 802375e:	f7ff f911 	bl	8022984 <DbgTraceGetFileName>
 8023762:	4601      	mov	r1, r0
 8023764:	f240 33dd 	movw	r3, #989	; 0x3dd
 8023768:	4a0c      	ldr	r2, [pc, #48]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 802376a:	480d      	ldr	r0, [pc, #52]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 802376c:	f002 fbdc 	bl	8025f28 <iprintf>
 8023770:	4816      	ldr	r0, [pc, #88]	; (80237cc <Ble_Hci_Gap_Gatt_Init+0x520>)
 8023772:	f002 fc75 	bl	8026060 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8023776:	4808      	ldr	r0, [pc, #32]	; (8023798 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8023778:	f7ff f904 	bl	8022984 <DbgTraceGetFileName>
 802377c:	4601      	mov	r1, r0
 802377e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8023782:	4a06      	ldr	r2, [pc, #24]	; (802379c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8023784:	4806      	ldr	r0, [pc, #24]	; (80237a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8023786:	f002 fbcf 	bl	8025f28 <iprintf>
 802378a:	4811      	ldr	r0, [pc, #68]	; (80237d0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 802378c:	f002 fbcc 	bl	8025f28 <iprintf>
}
 8023790:	bf00      	nop
 8023792:	371c      	adds	r7, #28
 8023794:	46bd      	mov	sp, r7
 8023796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023798:	08029040 	.word	0x08029040
 802379c:	0802a3b4 	.word	0x0802a3b4
 80237a0:	0802905c 	.word	0x0802905c
 80237a4:	08029924 	.word	0x08029924
 80237a8:	08029944 	.word	0x08029944
 80237ac:	08029980 	.word	0x08029980
 80237b0:	2000a478 	.word	0x2000a478
 80237b4:	080299ac 	.word	0x080299ac
 80237b8:	080299ec 	.word	0x080299ec
 80237bc:	0001b207 	.word	0x0001b207
 80237c0:	08029a1c 	.word	0x08029a1c
 80237c4:	08029a68 	.word	0x08029a68
 80237c8:	08029aa4 	.word	0x08029aa4
 80237cc:	08029ae4 	.word	0x08029ae4
 80237d0:	08029b14 	.word	0x08029b14

080237d4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b08c      	sub	sp, #48	; 0x30
 80237d8:	af08      	add	r7, sp, #32
 80237da:	4603      	mov	r3, r0
 80237dc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80237de:	2392      	movs	r3, #146	; 0x92
 80237e0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80237e2:	4a32      	ldr	r2, [pc, #200]	; (80238ac <Adv_Request+0xd8>)
 80237e4:	79fb      	ldrb	r3, [r7, #7]
 80237e6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80237ea:	2300      	movs	r3, #0
 80237ec:	9306      	str	r3, [sp, #24]
 80237ee:	2300      	movs	r3, #0
 80237f0:	9305      	str	r3, [sp, #20]
 80237f2:	2300      	movs	r3, #0
 80237f4:	9304      	str	r3, [sp, #16]
 80237f6:	2300      	movs	r3, #0
 80237f8:	9303      	str	r3, [sp, #12]
 80237fa:	2300      	movs	r3, #0
 80237fc:	9302      	str	r3, [sp, #8]
 80237fe:	2300      	movs	r3, #0
 8023800:	9301      	str	r3, [sp, #4]
 8023802:	2300      	movs	r3, #0
 8023804:	9300      	str	r3, [sp, #0]
 8023806:	2300      	movs	r3, #0
 8023808:	22a0      	movs	r2, #160	; 0xa0
 802380a:	2180      	movs	r1, #128	; 0x80
 802380c:	2000      	movs	r0, #0
 802380e:	f7fd f8c7 	bl	80209a0 <aci_gap_set_discoverable>
 8023812:	4603      	mov	r3, r0
 8023814:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8023816:	7bfb      	ldrb	r3, [r7, #15]
 8023818:	2b00      	cmp	r3, #0
 802381a:	d00f      	beq.n	802383c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 802381c:	4824      	ldr	r0, [pc, #144]	; (80238b0 <Adv_Request+0xdc>)
 802381e:	f7ff f8b1 	bl	8022984 <DbgTraceGetFileName>
 8023822:	4601      	mov	r1, r0
 8023824:	f240 33f6 	movw	r3, #1014	; 0x3f6
 8023828:	4a22      	ldr	r2, [pc, #136]	; (80238b4 <Adv_Request+0xe0>)
 802382a:	4823      	ldr	r0, [pc, #140]	; (80238b8 <Adv_Request+0xe4>)
 802382c:	f002 fb7c 	bl	8025f28 <iprintf>
 8023830:	7bfb      	ldrb	r3, [r7, #15]
 8023832:	4619      	mov	r1, r3
 8023834:	4821      	ldr	r0, [pc, #132]	; (80238bc <Adv_Request+0xe8>)
 8023836:	f002 fb77 	bl	8025f28 <iprintf>
 802383a:	e00c      	b.n	8023856 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 802383c:	481c      	ldr	r0, [pc, #112]	; (80238b0 <Adv_Request+0xdc>)
 802383e:	f7ff f8a1 	bl	8022984 <DbgTraceGetFileName>
 8023842:	4601      	mov	r1, r0
 8023844:	f240 33fa 	movw	r3, #1018	; 0x3fa
 8023848:	4a1a      	ldr	r2, [pc, #104]	; (80238b4 <Adv_Request+0xe0>)
 802384a:	481b      	ldr	r0, [pc, #108]	; (80238b8 <Adv_Request+0xe4>)
 802384c:	f002 fb6c 	bl	8025f28 <iprintf>
 8023850:	481b      	ldr	r0, [pc, #108]	; (80238c0 <Adv_Request+0xec>)
 8023852:	f002 fc05 	bl	8026060 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8023856:	491b      	ldr	r1, [pc, #108]	; (80238c4 <Adv_Request+0xf0>)
 8023858:	2015      	movs	r0, #21
 802385a:	f7fd fbc7 	bl	8020fec <aci_gap_update_adv_data>
 802385e:	4603      	mov	r3, r0
 8023860:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8023862:	7bfb      	ldrb	r3, [r7, #15]
 8023864:	2b00      	cmp	r3, #0
 8023866:	d00f      	beq.n	8023888 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8023868:	4811      	ldr	r0, [pc, #68]	; (80238b0 <Adv_Request+0xdc>)
 802386a:	f7ff f88b 	bl	8022984 <DbgTraceGetFileName>
 802386e:	4601      	mov	r1, r0
 8023870:	f240 4301 	movw	r3, #1025	; 0x401
 8023874:	4a0f      	ldr	r2, [pc, #60]	; (80238b4 <Adv_Request+0xe0>)
 8023876:	4810      	ldr	r0, [pc, #64]	; (80238b8 <Adv_Request+0xe4>)
 8023878:	f002 fb56 	bl	8025f28 <iprintf>
 802387c:	7bfb      	ldrb	r3, [r7, #15]
 802387e:	4619      	mov	r1, r3
 8023880:	4811      	ldr	r0, [pc, #68]	; (80238c8 <Adv_Request+0xf4>)
 8023882:	f002 fb51 	bl	8025f28 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8023886:	e00d      	b.n	80238a4 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8023888:	4809      	ldr	r0, [pc, #36]	; (80238b0 <Adv_Request+0xdc>)
 802388a:	f7ff f87b 	bl	8022984 <DbgTraceGetFileName>
 802388e:	4601      	mov	r1, r0
 8023890:	f240 4305 	movw	r3, #1029	; 0x405
 8023894:	4a07      	ldr	r2, [pc, #28]	; (80238b4 <Adv_Request+0xe0>)
 8023896:	4808      	ldr	r0, [pc, #32]	; (80238b8 <Adv_Request+0xe4>)
 8023898:	f002 fb46 	bl	8025f28 <iprintf>
 802389c:	480b      	ldr	r0, [pc, #44]	; (80238cc <Adv_Request+0xf8>)
 802389e:	f002 fb43 	bl	8025f28 <iprintf>
  return;
 80238a2:	bf00      	nop
}
 80238a4:	3710      	adds	r7, #16
 80238a6:	46bd      	mov	sp, r7
 80238a8:	bd80      	pop	{r7, pc}
 80238aa:	bf00      	nop
 80238ac:	2000a478 	.word	0x2000a478
 80238b0:	08029040 	.word	0x08029040
 80238b4:	0802a3cc 	.word	0x0802a3cc
 80238b8:	0802905c 	.word	0x0802905c
 80238bc:	08029b40 	.word	0x08029b40
 80238c0:	08029b78 	.word	0x08029b78
 80238c4:	2000008c 	.word	0x2000008c
 80238c8:	08029ba0 	.word	0x08029ba0
 80238cc:	08029bd4 	.word	0x08029bd4

080238d0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80238d0:	b580      	push	{r7, lr}
 80238d2:	b086      	sub	sp, #24
 80238d4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80238d6:	f7ff f963 	bl	8022ba0 <LL_FLASH_GetUDN>
 80238da:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80238dc:	693b      	ldr	r3, [r7, #16]
 80238de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80238e2:	d023      	beq.n	802392c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80238e4:	f7ff f974 	bl	8022bd0 <LL_FLASH_GetSTCompanyID>
 80238e8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80238ea:	f7ff f965 	bl	8022bb8 <LL_FLASH_GetDeviceID>
 80238ee:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80238f0:	693b      	ldr	r3, [r7, #16]
 80238f2:	b2da      	uxtb	r2, r3
 80238f4:	4b16      	ldr	r3, [pc, #88]	; (8023950 <BleGetBdAddress+0x80>)
 80238f6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80238f8:	693b      	ldr	r3, [r7, #16]
 80238fa:	0a1b      	lsrs	r3, r3, #8
 80238fc:	b2da      	uxtb	r2, r3
 80238fe:	4b14      	ldr	r3, [pc, #80]	; (8023950 <BleGetBdAddress+0x80>)
 8023900:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	b2da      	uxtb	r2, r3
 8023906:	4b12      	ldr	r3, [pc, #72]	; (8023950 <BleGetBdAddress+0x80>)
 8023908:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 802390a:	68bb      	ldr	r3, [r7, #8]
 802390c:	b2da      	uxtb	r2, r3
 802390e:	4b10      	ldr	r3, [pc, #64]	; (8023950 <BleGetBdAddress+0x80>)
 8023910:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8023912:	68bb      	ldr	r3, [r7, #8]
 8023914:	0a1b      	lsrs	r3, r3, #8
 8023916:	b2da      	uxtb	r2, r3
 8023918:	4b0d      	ldr	r3, [pc, #52]	; (8023950 <BleGetBdAddress+0x80>)
 802391a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 802391c:	68bb      	ldr	r3, [r7, #8]
 802391e:	0c1b      	lsrs	r3, r3, #16
 8023920:	b2da      	uxtb	r2, r3
 8023922:	4b0b      	ldr	r3, [pc, #44]	; (8023950 <BleGetBdAddress+0x80>)
 8023924:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8023926:	4b0a      	ldr	r3, [pc, #40]	; (8023950 <BleGetBdAddress+0x80>)
 8023928:	617b      	str	r3, [r7, #20]
 802392a:	e00b      	b.n	8023944 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 802392c:	2000      	movs	r0, #0
 802392e:	f7ff f851 	bl	80229d4 <OTP_Read>
 8023932:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8023934:	68fb      	ldr	r3, [r7, #12]
 8023936:	2b00      	cmp	r3, #0
 8023938:	d002      	beq.n	8023940 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	617b      	str	r3, [r7, #20]
 802393e:	e001      	b.n	8023944 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8023940:	4b04      	ldr	r3, [pc, #16]	; (8023954 <BleGetBdAddress+0x84>)
 8023942:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8023944:	697b      	ldr	r3, [r7, #20]
}
 8023946:	4618      	mov	r0, r3
 8023948:	3718      	adds	r7, #24
 802394a:	46bd      	mov	sp, r7
 802394c:	bd80      	pop	{r7, pc}
 802394e:	bf00      	nop
 8023950:	2000a470 	.word	0x2000a470
 8023954:	0802a364 	.word	0x0802a364

08023958 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8023958:	b580      	push	{r7, lr}
 802395a:	b082      	sub	sp, #8
 802395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 802395e:	4b1f      	ldr	r3, [pc, #124]	; (80239dc <Adv_Cancel+0x84>)
 8023960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8023964:	2b05      	cmp	r3, #5
 8023966:	d035      	beq.n	80239d4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8023968:	2392      	movs	r3, #146	; 0x92
 802396a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 802396c:	f7fc fff4 	bl	8020958 <aci_gap_set_non_discoverable>
 8023970:	4603      	mov	r3, r0
 8023972:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8023974:	4b19      	ldr	r3, [pc, #100]	; (80239dc <Adv_Cancel+0x84>)
 8023976:	2200      	movs	r2, #0
 8023978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 802397c:	79fb      	ldrb	r3, [r7, #7]
 802397e:	2b00      	cmp	r3, #0
 8023980:	d00d      	beq.n	802399e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8023982:	4817      	ldr	r0, [pc, #92]	; (80239e0 <Adv_Cancel+0x88>)
 8023984:	f7fe fffe 	bl	8022984 <DbgTraceGetFileName>
 8023988:	4601      	mov	r1, r0
 802398a:	f240 4353 	movw	r3, #1107	; 0x453
 802398e:	4a15      	ldr	r2, [pc, #84]	; (80239e4 <Adv_Cancel+0x8c>)
 8023990:	4815      	ldr	r0, [pc, #84]	; (80239e8 <Adv_Cancel+0x90>)
 8023992:	f002 fac9 	bl	8025f28 <iprintf>
 8023996:	4815      	ldr	r0, [pc, #84]	; (80239ec <Adv_Cancel+0x94>)
 8023998:	f002 fac6 	bl	8025f28 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 802399c:	e01a      	b.n	80239d4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 802399e:	4810      	ldr	r0, [pc, #64]	; (80239e0 <Adv_Cancel+0x88>)
 80239a0:	f7fe fff0 	bl	8022984 <DbgTraceGetFileName>
 80239a4:	4601      	mov	r1, r0
 80239a6:	f240 4357 	movw	r3, #1111	; 0x457
 80239aa:	4a0e      	ldr	r2, [pc, #56]	; (80239e4 <Adv_Cancel+0x8c>)
 80239ac:	480e      	ldr	r0, [pc, #56]	; (80239e8 <Adv_Cancel+0x90>)
 80239ae:	f002 fabb 	bl	8025f28 <iprintf>
 80239b2:	480f      	ldr	r0, [pc, #60]	; (80239f0 <Adv_Cancel+0x98>)
 80239b4:	f002 fab8 	bl	8025f28 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80239b8:	4809      	ldr	r0, [pc, #36]	; (80239e0 <Adv_Cancel+0x88>)
 80239ba:	f7fe ffe3 	bl	8022984 <DbgTraceGetFileName>
 80239be:	4601      	mov	r1, r0
 80239c0:	f44f 638b 	mov.w	r3, #1112	; 0x458
 80239c4:	4a07      	ldr	r2, [pc, #28]	; (80239e4 <Adv_Cancel+0x8c>)
 80239c6:	4808      	ldr	r0, [pc, #32]	; (80239e8 <Adv_Cancel+0x90>)
 80239c8:	f002 faae 	bl	8025f28 <iprintf>
 80239cc:	4809      	ldr	r0, [pc, #36]	; (80239f4 <Adv_Cancel+0x9c>)
 80239ce:	f002 faab 	bl	8025f28 <iprintf>
  return;
 80239d2:	bf00      	nop
 80239d4:	bf00      	nop
}
 80239d6:	3708      	adds	r7, #8
 80239d8:	46bd      	mov	sp, r7
 80239da:	bd80      	pop	{r7, pc}
 80239dc:	2000a478 	.word	0x2000a478
 80239e0:	08029040 	.word	0x08029040
 80239e4:	0802a3d8 	.word	0x0802a3d8
 80239e8:	0802905c 	.word	0x0802905c
 80239ec:	08029bfc 	.word	0x08029bfc
 80239f0:	08029c20 	.word	0x08029c20
 80239f4:	08029c28 	.word	0x08029c28

080239f8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80239f8:	b580      	push	{r7, lr}
 80239fa:	b082      	sub	sp, #8
 80239fc:	af00      	add	r7, sp, #0
 80239fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8023a00:	2100      	movs	r1, #0
 8023a02:	2002      	movs	r0, #2
 8023a04:	f001 f99c 	bl	8024d40 <UTIL_SEQ_SetTask>

  return;
 8023a08:	bf00      	nop
}
 8023a0a:	3708      	adds	r7, #8
 8023a0c:	46bd      	mov	sp, r7
 8023a0e:	bd80      	pop	{r7, pc}

08023a10 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8023a10:	b580      	push	{r7, lr}
 8023a12:	b082      	sub	sp, #8
 8023a14:	af00      	add	r7, sp, #0
 8023a16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8023a18:	2001      	movs	r0, #1
 8023a1a:	f001 f9fd 	bl	8024e18 <UTIL_SEQ_SetEvt>

  return;
 8023a1e:	bf00      	nop
}
 8023a20:	3708      	adds	r7, #8
 8023a22:	46bd      	mov	sp, r7
 8023a24:	bd80      	pop	{r7, pc}

08023a26 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8023a26:	b580      	push	{r7, lr}
 8023a28:	b082      	sub	sp, #8
 8023a2a:	af00      	add	r7, sp, #0
 8023a2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8023a2e:	2001      	movs	r0, #1
 8023a30:	f001 fa12 	bl	8024e58 <UTIL_SEQ_WaitEvt>

  return;
 8023a34:	bf00      	nop
}
 8023a36:	3708      	adds	r7, #8
 8023a38:	46bd      	mov	sp, r7
 8023a3a:	bd80      	pop	{r7, pc}

08023a3c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8023a3c:	b580      	push	{r7, lr}
 8023a3e:	b084      	sub	sp, #16
 8023a40:	af00      	add	r7, sp, #0
 8023a42:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8023a48:	68fb      	ldr	r3, [r7, #12]
 8023a4a:	685b      	ldr	r3, [r3, #4]
 8023a4c:	3308      	adds	r3, #8
 8023a4e:	4618      	mov	r0, r3
 8023a50:	f7fe f940 	bl	8021cd4 <SVCCTL_UserEvtRx>
 8023a54:	4603      	mov	r3, r0
 8023a56:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8023a58:	7afb      	ldrb	r3, [r7, #11]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d003      	beq.n	8023a66 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	2201      	movs	r2, #1
 8023a62:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8023a64:	e003      	b.n	8023a6e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8023a66:	68fb      	ldr	r3, [r7, #12]
 8023a68:	2200      	movs	r2, #0
 8023a6a:	701a      	strb	r2, [r3, #0]
  return;
 8023a6c:	bf00      	nop
}
 8023a6e:	3710      	adds	r7, #16
 8023a70:	46bd      	mov	sp, r7
 8023a72:	bd80      	pop	{r7, pc}

08023a74 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8023a74:	b580      	push	{r7, lr}
 8023a76:	b084      	sub	sp, #16
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	4603      	mov	r3, r0
 8023a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8023a7e:	79fb      	ldrb	r3, [r7, #7]
 8023a80:	2b00      	cmp	r3, #0
 8023a82:	d002      	beq.n	8023a8a <BLE_StatusNot+0x16>
 8023a84:	2b01      	cmp	r3, #1
 8023a86:	d006      	beq.n	8023a96 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8023a88:	e00b      	b.n	8023aa2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8023a8a:	2307      	movs	r3, #7
 8023a8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8023a8e:	68f8      	ldr	r0, [r7, #12]
 8023a90:	f001 f982 	bl	8024d98 <UTIL_SEQ_PauseTask>
      break;
 8023a94:	e005      	b.n	8023aa2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8023a96:	2307      	movs	r3, #7
 8023a98:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8023a9a:	68f8      	ldr	r0, [r7, #12]
 8023a9c:	f001 f99c 	bl	8024dd8 <UTIL_SEQ_ResumeTask>
      break;
 8023aa0:	bf00      	nop
  }

  return;
 8023aa2:	bf00      	nop
}
 8023aa4:	3710      	adds	r7, #16
 8023aa6:	46bd      	mov	sp, r7
 8023aa8:	bd80      	pop	{r7, pc}
	...

08023aac <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8023aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023ab0:	b088      	sub	sp, #32
 8023ab2:	af00      	add	r7, sp, #0
 8023ab4:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	int i = 0;
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	61fb      	str	r3, [r7, #28]
	int j = 0;
 8023aba:	2300      	movs	r3, #0
 8023abc:	61bb      	str	r3, [r7, #24]
	memset(UpdateCharData, 0, sizeof(uint8_t) * 247);
 8023abe:	22f7      	movs	r2, #247	; 0xf7
 8023ac0:	2100      	movs	r1, #0
 8023ac2:	485c      	ldr	r0, [pc, #368]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023ac4:	f001 fcde 	bl	8025484 <memset>
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 8023ac8:	68fb      	ldr	r3, [r7, #12]
 8023aca:	6859      	ldr	r1, [r3, #4]
 8023acc:	68fb      	ldr	r3, [r7, #12]
 8023ace:	7a1b      	ldrb	r3, [r3, #8]
 8023ad0:	461a      	mov	r2, r3
 8023ad2:	4858      	ldr	r0, [pc, #352]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023ad4:	f001 fcae 	bl	8025434 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8023ad8:	68fb      	ldr	r3, [r7, #12]
 8023ada:	781b      	ldrb	r3, [r3, #0]
 8023adc:	2b05      	cmp	r3, #5
 8023ade:	f200 80a3 	bhi.w	8023c28 <Custom_STM_App_Notification+0x17c>
 8023ae2:	a201      	add	r2, pc, #4	; (adr r2, 8023ae8 <Custom_STM_App_Notification+0x3c>)
 8023ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023ae8:	08023c29 	.word	0x08023c29
 8023aec:	08023b01 	.word	0x08023b01
 8023af0:	08023c29 	.word	0x08023c29
 8023af4:	08023b89 	.word	0x08023b89
 8023af8:	08023c15 	.word	0x08023c15
 8023afc:	08023c21 	.word	0x08023c21
      break;

    case CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */

    	memset(Custom_App_Context.ssid, 0x00, sizeof(uint64_t)*30);
 8023b00:	22f0      	movs	r2, #240	; 0xf0
 8023b02:	2100      	movs	r1, #0
 8023b04:	484c      	ldr	r0, [pc, #304]	; (8023c38 <Custom_STM_App_Notification+0x18c>)
 8023b06:	f001 fcbd 	bl	8025484 <memset>
    	while(UpdateCharData[i] != 0x00) {
 8023b0a:	e013      	b.n	8023b34 <Custom_STM_App_Notification+0x88>
    		Custom_App_Context.ssid[i] = (uint64_t)UpdateCharData[i];
 8023b0c:	4a49      	ldr	r2, [pc, #292]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023b0e:	69fb      	ldr	r3, [r7, #28]
 8023b10:	4413      	add	r3, r2
 8023b12:	781b      	ldrb	r3, [r3, #0]
 8023b14:	b2db      	uxtb	r3, r3
 8023b16:	2200      	movs	r2, #0
 8023b18:	603b      	str	r3, [r7, #0]
 8023b1a:	607a      	str	r2, [r7, #4]
 8023b1c:	4a47      	ldr	r2, [pc, #284]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023b1e:	69fb      	ldr	r3, [r7, #28]
 8023b20:	3301      	adds	r3, #1
 8023b22:	00db      	lsls	r3, r3, #3
 8023b24:	4413      	add	r3, r2
 8023b26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8023b2a:	e9c3 1200 	strd	r1, r2, [r3]
    		i++;
 8023b2e:	69fb      	ldr	r3, [r7, #28]
 8023b30:	3301      	adds	r3, #1
 8023b32:	61fb      	str	r3, [r7, #28]
    	while(UpdateCharData[i] != 0x00) {
 8023b34:	4a3f      	ldr	r2, [pc, #252]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023b36:	69fb      	ldr	r3, [r7, #28]
 8023b38:	4413      	add	r3, r2
 8023b3a:	781b      	ldrb	r3, [r3, #0]
 8023b3c:	2b00      	cmp	r3, #0
 8023b3e:	d1e5      	bne.n	8023b0c <Custom_STM_App_Notification+0x60>
    	}
    	memset(ssid, NULL, sizeof(char)*30);
 8023b40:	221e      	movs	r2, #30
 8023b42:	2100      	movs	r1, #0
 8023b44:	483e      	ldr	r0, [pc, #248]	; (8023c40 <Custom_STM_App_Notification+0x194>)
 8023b46:	f001 fc9d 	bl	8025484 <memset>
    	for(int pos=0;pos<i; pos++) {
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	617b      	str	r3, [r7, #20]
 8023b4e:	e00f      	b.n	8023b70 <Custom_STM_App_Notification+0xc4>
    		ssid[pos] = (char)Custom_App_Context.ssid[pos];
 8023b50:	4a3a      	ldr	r2, [pc, #232]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023b52:	697b      	ldr	r3, [r7, #20]
 8023b54:	3301      	adds	r3, #1
 8023b56:	00db      	lsls	r3, r3, #3
 8023b58:	4413      	add	r3, r2
 8023b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b5e:	b2d1      	uxtb	r1, r2
 8023b60:	4a37      	ldr	r2, [pc, #220]	; (8023c40 <Custom_STM_App_Notification+0x194>)
 8023b62:	697b      	ldr	r3, [r7, #20]
 8023b64:	4413      	add	r3, r2
 8023b66:	460a      	mov	r2, r1
 8023b68:	701a      	strb	r2, [r3, #0]
    	for(int pos=0;pos<i; pos++) {
 8023b6a:	697b      	ldr	r3, [r7, #20]
 8023b6c:	3301      	adds	r3, #1
 8023b6e:	617b      	str	r3, [r7, #20]
 8023b70:	697a      	ldr	r2, [r7, #20]
 8023b72:	69fb      	ldr	r3, [r7, #28]
 8023b74:	429a      	cmp	r2, r3
 8023b76:	dbeb      	blt.n	8023b50 <Custom_STM_App_Notification+0xa4>
    	}
    	dataSsid = (uint64_t)ssid;
 8023b78:	4b31      	ldr	r3, [pc, #196]	; (8023c40 <Custom_STM_App_Notification+0x194>)
 8023b7a:	17da      	asrs	r2, r3, #31
 8023b7c:	469a      	mov	sl, r3
 8023b7e:	4693      	mov	fp, r2
 8023b80:	4b30      	ldr	r3, [pc, #192]	; (8023c44 <Custom_STM_App_Notification+0x198>)
 8023b82:	e9c3 ab00 	strd	sl, fp, [r3]
//			   /* Error detected. Switch on LED1*/
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//			 }

      /* USER CODE END CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
      break;
 8023b86:	e050      	b.n	8023c2a <Custom_STM_App_Notification+0x17e>
      /* USER CODE END CUSTOM_STM_GPASS_READ_EVT */
      break;

    case CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
		memset(Custom_App_Context.password, 0x00, sizeof(uint64_t)*30);
 8023b88:	22f0      	movs	r2, #240	; 0xf0
 8023b8a:	2100      	movs	r1, #0
 8023b8c:	482e      	ldr	r0, [pc, #184]	; (8023c48 <Custom_STM_App_Notification+0x19c>)
 8023b8e:	f001 fc79 	bl	8025484 <memset>
		while(UpdateCharData[j] != 0x00) {
 8023b92:	e011      	b.n	8023bb8 <Custom_STM_App_Notification+0x10c>
			Custom_App_Context.password[j] = (uint64_t)UpdateCharData[j];
 8023b94:	4a27      	ldr	r2, [pc, #156]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023b96:	69bb      	ldr	r3, [r7, #24]
 8023b98:	4413      	add	r3, r2
 8023b9a:	781b      	ldrb	r3, [r3, #0]
 8023b9c:	b2db      	uxtb	r3, r3
 8023b9e:	2200      	movs	r2, #0
 8023ba0:	4698      	mov	r8, r3
 8023ba2:	4691      	mov	r9, r2
 8023ba4:	4a25      	ldr	r2, [pc, #148]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023ba6:	69bb      	ldr	r3, [r7, #24]
 8023ba8:	331f      	adds	r3, #31
 8023baa:	00db      	lsls	r3, r3, #3
 8023bac:	4413      	add	r3, r2
 8023bae:	e9c3 8900 	strd	r8, r9, [r3]
			j++;
 8023bb2:	69bb      	ldr	r3, [r7, #24]
 8023bb4:	3301      	adds	r3, #1
 8023bb6:	61bb      	str	r3, [r7, #24]
		while(UpdateCharData[j] != 0x00) {
 8023bb8:	4a1e      	ldr	r2, [pc, #120]	; (8023c34 <Custom_STM_App_Notification+0x188>)
 8023bba:	69bb      	ldr	r3, [r7, #24]
 8023bbc:	4413      	add	r3, r2
 8023bbe:	781b      	ldrb	r3, [r3, #0]
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d1e7      	bne.n	8023b94 <Custom_STM_App_Notification+0xe8>
		}
		memset(password, NULL, sizeof(char)*30);
 8023bc4:	221e      	movs	r2, #30
 8023bc6:	2100      	movs	r1, #0
 8023bc8:	4820      	ldr	r0, [pc, #128]	; (8023c4c <Custom_STM_App_Notification+0x1a0>)
 8023bca:	f001 fc5b 	bl	8025484 <memset>
		for(int pos=0;pos<j; pos++) {
 8023bce:	2300      	movs	r3, #0
 8023bd0:	613b      	str	r3, [r7, #16]
 8023bd2:	e00f      	b.n	8023bf4 <Custom_STM_App_Notification+0x148>
			password[pos] = (char)Custom_App_Context.password[pos];
 8023bd4:	4a19      	ldr	r2, [pc, #100]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023bd6:	693b      	ldr	r3, [r7, #16]
 8023bd8:	331f      	adds	r3, #31
 8023bda:	00db      	lsls	r3, r3, #3
 8023bdc:	4413      	add	r3, r2
 8023bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be2:	b2d1      	uxtb	r1, r2
 8023be4:	4a19      	ldr	r2, [pc, #100]	; (8023c4c <Custom_STM_App_Notification+0x1a0>)
 8023be6:	693b      	ldr	r3, [r7, #16]
 8023be8:	4413      	add	r3, r2
 8023bea:	460a      	mov	r2, r1
 8023bec:	701a      	strb	r2, [r3, #0]
		for(int pos=0;pos<j; pos++) {
 8023bee:	693b      	ldr	r3, [r7, #16]
 8023bf0:	3301      	adds	r3, #1
 8023bf2:	613b      	str	r3, [r7, #16]
 8023bf4:	693a      	ldr	r2, [r7, #16]
 8023bf6:	69bb      	ldr	r3, [r7, #24]
 8023bf8:	429a      	cmp	r2, r3
 8023bfa:	dbeb      	blt.n	8023bd4 <Custom_STM_App_Notification+0x128>
		}
		dataPass = (uint64_t)password;
 8023bfc:	4b13      	ldr	r3, [pc, #76]	; (8023c4c <Custom_STM_App_Notification+0x1a0>)
 8023bfe:	17da      	asrs	r2, r3, #31
 8023c00:	461c      	mov	r4, r3
 8023c02:	4615      	mov	r5, r2
 8023c04:	4b12      	ldr	r3, [pc, #72]	; (8023c50 <Custom_STM_App_Notification+0x1a4>)
 8023c06:	e9c3 4500 	strd	r4, r5, [r3]
		wifi_init();
 8023c0a:	f7fb fc93 	bl	801f534 <wifi_init>
		Custom_Ack_Send_Notification();
 8023c0e:	f000 f85b 	bl	8023cc8 <Custom_Ack_Send_Notification>
//			 {
//			   /* Error detected. Switch on LED1*/
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//			 }
      /* USER CODE END CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
      break;
 8023c12:	e00a      	b.n	8023c2a <Custom_STM_App_Notification+0x17e>

    case CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Ack_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 8023c14:	4b09      	ldr	r3, [pc, #36]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023c16:	2201      	movs	r2, #1
 8023c18:	701a      	strb	r2, [r3, #0]
    	Custom_Ack_Send_Notification();
 8023c1a:	f000 f855 	bl	8023cc8 <Custom_Ack_Send_Notification>
      /* USER CODE END CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT */
      break;
 8023c1e:	e004      	b.n	8023c2a <Custom_STM_App_Notification+0x17e>

    case CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Ack_Notification_Status = 0;
 8023c20:	4b06      	ldr	r3, [pc, #24]	; (8023c3c <Custom_STM_App_Notification+0x190>)
 8023c22:	2200      	movs	r2, #0
 8023c24:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT */
      break;
 8023c26:	e000      	b.n	8023c2a <Custom_STM_App_Notification+0x17e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8023c28:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8023c2a:	bf00      	nop
}
 8023c2c:	3720      	adds	r7, #32
 8023c2e:	46bd      	mov	sp, r7
 8023c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023c34:	2000a6f0 	.word	0x2000a6f0
 8023c38:	2000a508 	.word	0x2000a508
 8023c3c:	2000a500 	.word	0x2000a500
 8023c40:	2000a8e0 	.word	0x2000a8e0
 8023c44:	2000a920 	.word	0x2000a920
 8023c48:	2000a5f8 	.word	0x2000a5f8
 8023c4c:	2000a900 	.word	0x2000a900
 8023c50:	2000a928 	.word	0x2000a928

08023c54 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8023c54:	b480      	push	{r7}
 8023c56:	b083      	sub	sp, #12
 8023c58:	af00      	add	r7, sp, #0
 8023c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	781b      	ldrb	r3, [r3, #0]
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	d002      	beq.n	8023c6a <Custom_APP_Notification+0x16>
 8023c64:	2b01      	cmp	r3, #1
 8023c66:	d002      	beq.n	8023c6e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8023c68:	e002      	b.n	8023c70 <Custom_APP_Notification+0x1c>
      break;
 8023c6a:	bf00      	nop
 8023c6c:	e000      	b.n	8023c70 <Custom_APP_Notification+0x1c>
      break;
 8023c6e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8023c70:	bf00      	nop
}
 8023c72:	370c      	adds	r7, #12
 8023c74:	46bd      	mov	sp, r7
 8023c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c7a:	4770      	bx	lr

08023c7c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8023c7c:	b580      	push	{r7, lr}
 8023c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.Ack_Notification_Status = 0;
 8023c80:	4b05      	ldr	r3, [pc, #20]	; (8023c98 <Custom_APP_Init+0x1c>)
 8023c82:	2200      	movs	r2, #0
 8023c84:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1<<CFG_SEND_WIFI_ACK, UTIL_SEQ_RFU, Custom_Ack_Send_Notification);
 8023c86:	4a05      	ldr	r2, [pc, #20]	; (8023c9c <Custom_APP_Init+0x20>)
 8023c88:	2100      	movs	r1, #0
 8023c8a:	2004      	movs	r0, #4
 8023c8c:	f001 f836 	bl	8024cfc <UTIL_SEQ_RegTask>
	Custom_Ack_Update_Char();
 8023c90:	f000 f806 	bl	8023ca0 <Custom_Ack_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8023c94:	bf00      	nop
}
 8023c96:	bd80      	pop	{r7, pc}
 8023c98:	2000a500 	.word	0x2000a500
 8023c9c:	08023cc9 	.word	0x08023cc9

08023ca0 <Custom_Ack_Update_Char>:
 *
 *************************************************************/

/* First_service */
void Custom_Ack_Update_Char(void) /* Property Read */
{
 8023ca0:	b580      	push	{r7, lr}
 8023ca2:	b082      	sub	sp, #8
 8023ca4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Ack_UC_1*/

  /* USER CODE END Ack_UC_1*/

  if (updateflag != 0)
 8023caa:	79fb      	ldrb	r3, [r7, #7]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d004      	beq.n	8023cba <Custom_Ack_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACK, (uint8_t *)UpdateCharData);
 8023cb0:	4904      	ldr	r1, [pc, #16]	; (8023cc4 <Custom_Ack_Update_Char+0x24>)
 8023cb2:	2002      	movs	r0, #2
 8023cb4:	f000 fa5e 	bl	8024174 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Ack_UC_Last*/

  /* USER CODE END Ack_UC_Last*/
  return;
 8023cb8:	bf00      	nop
 8023cba:	bf00      	nop
}
 8023cbc:	3708      	adds	r7, #8
 8023cbe:	46bd      	mov	sp, r7
 8023cc0:	bd80      	pop	{r7, pc}
 8023cc2:	bf00      	nop
 8023cc4:	2000a6f0 	.word	0x2000a6f0

08023cc8 <Custom_Ack_Send_Notification>:

void Custom_Ack_Send_Notification(void) /* Property Notification */
{
 8023cc8:	b580      	push	{r7, lr}
 8023cca:	b082      	sub	sp, #8
 8023ccc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8023cce:	2300      	movs	r3, #0
 8023cd0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Ack_NS_1*/
  if (Custom_App_Context.Ack_Notification_Status == 1)
 8023cd2:	4b17      	ldr	r3, [pc, #92]	; (8023d30 <Custom_Ack_Send_Notification+0x68>)
 8023cd4:	781b      	ldrb	r3, [r3, #0]
 8023cd6:	2b01      	cmp	r3, #1
 8023cd8:	d111      	bne.n	8023cfe <Custom_Ack_Send_Notification+0x36>
  {
	  updateflag = 1;
 8023cda:	2301      	movs	r3, #1
 8023cdc:	71fb      	strb	r3, [r7, #7]

	  if(wifi_state == _ONLINE)
 8023cde:	4b15      	ldr	r3, [pc, #84]	; (8023d34 <Custom_Ack_Send_Notification+0x6c>)
 8023ce0:	781b      	ldrb	r3, [r3, #0]
 8023ce2:	2b05      	cmp	r3, #5
 8023ce4:	d105      	bne.n	8023cf2 <Custom_Ack_Send_Notification+0x2a>
	  {
		  uint8_t value = 0x01;
 8023ce6:	2301      	movs	r3, #1
 8023ce8:	71bb      	strb	r3, [r7, #6]
 8023cea:	79ba      	ldrb	r2, [r7, #6]
		  memcpy(&NotifyCharData[0],&value,sizeof(uint8_t));
 8023cec:	4b12      	ldr	r3, [pc, #72]	; (8023d38 <Custom_Ack_Send_Notification+0x70>)
 8023cee:	701a      	strb	r2, [r3, #0]
 8023cf0:	e012      	b.n	8023d18 <Custom_Ack_Send_Notification+0x50>
	  } else {
		  uint8_t value = 0x00;
 8023cf2:	2300      	movs	r3, #0
 8023cf4:	717b      	strb	r3, [r7, #5]
 8023cf6:	797a      	ldrb	r2, [r7, #5]
		  memcpy(&NotifyCharData[0],&value,sizeof(uint8_t));
 8023cf8:	4b0f      	ldr	r3, [pc, #60]	; (8023d38 <Custom_Ack_Send_Notification+0x70>)
 8023cfa:	701a      	strb	r2, [r3, #0]
 8023cfc:	e00c      	b.n	8023d18 <Custom_Ack_Send_Notification+0x50>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8023cfe:	480f      	ldr	r0, [pc, #60]	; (8023d3c <Custom_Ack_Send_Notification+0x74>)
 8023d00:	f7fe fe40 	bl	8022984 <DbgTraceGetFileName>
 8023d04:	4601      	mov	r1, r0
 8023d06:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8023d0a:	4a0d      	ldr	r2, [pc, #52]	; (8023d40 <Custom_Ack_Send_Notification+0x78>)
 8023d0c:	480d      	ldr	r0, [pc, #52]	; (8023d44 <Custom_Ack_Send_Notification+0x7c>)
 8023d0e:	f002 f90b 	bl	8025f28 <iprintf>
 8023d12:	480d      	ldr	r0, [pc, #52]	; (8023d48 <Custom_Ack_Send_Notification+0x80>)
 8023d14:	f002 f9a4 	bl	8026060 <puts>
  }
  /* USER CODE END Ack_NS_1*/

  if (updateflag != 0)
 8023d18:	79fb      	ldrb	r3, [r7, #7]
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	d004      	beq.n	8023d28 <Custom_Ack_Send_Notification+0x60>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACK, (uint8_t *)NotifyCharData);
 8023d1e:	4906      	ldr	r1, [pc, #24]	; (8023d38 <Custom_Ack_Send_Notification+0x70>)
 8023d20:	2002      	movs	r0, #2
 8023d22:	f000 fa27 	bl	8024174 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Ack_NS_Last*/

  /* USER CODE END Ack_NS_Last*/

  return;
 8023d26:	bf00      	nop
 8023d28:	bf00      	nop
}
 8023d2a:	3708      	adds	r7, #8
 8023d2c:	46bd      	mov	sp, r7
 8023d2e:	bd80      	pop	{r7, pc}
 8023d30:	2000a500 	.word	0x2000a500
 8023d34:	20000089 	.word	0x20000089
 8023d38:	2000a7e8 	.word	0x2000a7e8
 8023d3c:	08029c44 	.word	0x08029c44
 8023d40:	0802a3e4 	.word	0x0802a3e4
 8023d44:	08029c64 	.word	0x08029c64
 8023d48:	08029c78 	.word	0x08029c78

08023d4c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8023d4c:	b580      	push	{r7, lr}
 8023d4e:	b08a      	sub	sp, #40	; 0x28
 8023d50:	af00      	add	r7, sp, #0
 8023d52:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8023d54:	2300      	movs	r3, #0
 8023d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	3301      	adds	r3, #1
 8023d5e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8023d60:	6a3b      	ldr	r3, [r7, #32]
 8023d62:	781b      	ldrb	r3, [r3, #0]
 8023d64:	2bff      	cmp	r3, #255	; 0xff
 8023d66:	d17a      	bne.n	8023e5e <Custom_STM_Event_Handler+0x112>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8023d68:	6a3b      	ldr	r3, [r7, #32]
 8023d6a:	3302      	adds	r3, #2
 8023d6c:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8023d6e:	69fb      	ldr	r3, [r7, #28]
 8023d70:	881b      	ldrh	r3, [r3, #0]
 8023d72:	b29b      	uxth	r3, r3
 8023d74:	f640 4214 	movw	r2, #3092	; 0xc14
 8023d78:	4293      	cmp	r3, r2
 8023d7a:	d06a      	beq.n	8023e52 <Custom_STM_Event_Handler+0x106>
 8023d7c:	f640 4214 	movw	r2, #3092	; 0xc14
 8023d80:	4293      	cmp	r3, r2
 8023d82:	dc68      	bgt.n	8023e56 <Custom_STM_Event_Handler+0x10a>
 8023d84:	f640 4201 	movw	r2, #3073	; 0xc01
 8023d88:	4293      	cmp	r3, r2
 8023d8a:	d003      	beq.n	8023d94 <Custom_STM_Event_Handler+0x48>
 8023d8c:	f640 4213 	movw	r2, #3091	; 0xc13
 8023d90:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8023d92:	e063      	b.n	8023e5c <Custom_STM_Event_Handler+0x110>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8023d94:	69fb      	ldr	r3, [r7, #28]
 8023d96:	3302      	adds	r3, #2
 8023d98:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAckHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8023d9a:	69bb      	ldr	r3, [r7, #24]
 8023d9c:	885b      	ldrh	r3, [r3, #2]
 8023d9e:	b29b      	uxth	r3, r3
 8023da0:	461a      	mov	r2, r3
 8023da2:	4b32      	ldr	r3, [pc, #200]	; (8023e6c <Custom_STM_Event_Handler+0x120>)
 8023da4:	88db      	ldrh	r3, [r3, #6]
 8023da6:	3302      	adds	r3, #2
 8023da8:	429a      	cmp	r2, r3
 8023daa:	d119      	bne.n	8023de0 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8023dac:	2301      	movs	r3, #1
 8023dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8023db2:	69bb      	ldr	r3, [r7, #24]
 8023db4:	7a1b      	ldrb	r3, [r3, #8]
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	d002      	beq.n	8023dc0 <Custom_STM_Event_Handler+0x74>
 8023dba:	2b01      	cmp	r3, #1
 8023dbc:	d008      	beq.n	8023dd0 <Custom_STM_Event_Handler+0x84>
              break;
 8023dbe:	e047      	b.n	8023e50 <Custom_STM_Event_Handler+0x104>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT;
 8023dc0:	2305      	movs	r3, #5
 8023dc2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8023dc4:	f107 0308 	add.w	r3, r7, #8
 8023dc8:	4618      	mov	r0, r3
 8023dca:	f7ff fe6f 	bl	8023aac <Custom_STM_App_Notification>
                break;
 8023dce:	e03f      	b.n	8023e50 <Custom_STM_Event_Handler+0x104>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT;
 8023dd0:	2304      	movs	r3, #4
 8023dd2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8023dd4:	f107 0308 	add.w	r3, r7, #8
 8023dd8:	4618      	mov	r0, r3
 8023dda:	f7ff fe67 	bl	8023aac <Custom_STM_App_Notification>
                break;
 8023dde:	e037      	b.n	8023e50 <Custom_STM_Event_Handler+0x104>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGssidHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8023de0:	69bb      	ldr	r3, [r7, #24]
 8023de2:	885b      	ldrh	r3, [r3, #2]
 8023de4:	b29b      	uxth	r3, r3
 8023de6:	461a      	mov	r2, r3
 8023de8:	4b20      	ldr	r3, [pc, #128]	; (8023e6c <Custom_STM_Event_Handler+0x120>)
 8023dea:	885b      	ldrh	r3, [r3, #2]
 8023dec:	3301      	adds	r3, #1
 8023dee:	429a      	cmp	r2, r3
 8023df0:	d112      	bne.n	8023e18 <Custom_STM_Event_Handler+0xcc>
            return_value = SVCCTL_EvtAckFlowEnable;
 8023df2:	2301      	movs	r3, #1
 8023df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT;
 8023df8:	2301      	movs	r3, #1
 8023dfa:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8023dfc:	69bb      	ldr	r3, [r7, #24]
 8023dfe:	88db      	ldrh	r3, [r3, #6]
 8023e00:	b29b      	uxth	r3, r3
 8023e02:	b2db      	uxtb	r3, r3
 8023e04:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8023e06:	69bb      	ldr	r3, [r7, #24]
 8023e08:	3308      	adds	r3, #8
 8023e0a:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8023e0c:	f107 0308 	add.w	r3, r7, #8
 8023e10:	4618      	mov	r0, r3
 8023e12:	f7ff fe4b 	bl	8023aac <Custom_STM_App_Notification>
          break;
 8023e16:	e020      	b.n	8023e5a <Custom_STM_Event_Handler+0x10e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGpassHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8023e18:	69bb      	ldr	r3, [r7, #24]
 8023e1a:	885b      	ldrh	r3, [r3, #2]
 8023e1c:	b29b      	uxth	r3, r3
 8023e1e:	461a      	mov	r2, r3
 8023e20:	4b12      	ldr	r3, [pc, #72]	; (8023e6c <Custom_STM_Event_Handler+0x120>)
 8023e22:	889b      	ldrh	r3, [r3, #4]
 8023e24:	3301      	adds	r3, #1
 8023e26:	429a      	cmp	r2, r3
 8023e28:	d117      	bne.n	8023e5a <Custom_STM_Event_Handler+0x10e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8023e2a:	2301      	movs	r3, #1
 8023e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT;
 8023e30:	2303      	movs	r3, #3
 8023e32:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8023e34:	69bb      	ldr	r3, [r7, #24]
 8023e36:	88db      	ldrh	r3, [r3, #6]
 8023e38:	b29b      	uxth	r3, r3
 8023e3a:	b2db      	uxtb	r3, r3
 8023e3c:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8023e3e:	69bb      	ldr	r3, [r7, #24]
 8023e40:	3308      	adds	r3, #8
 8023e42:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8023e44:	f107 0308 	add.w	r3, r7, #8
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f7ff fe2f 	bl	8023aac <Custom_STM_App_Notification>
          break;
 8023e4e:	e004      	b.n	8023e5a <Custom_STM_Event_Handler+0x10e>
 8023e50:	e003      	b.n	8023e5a <Custom_STM_Event_Handler+0x10e>
          break;
 8023e52:	bf00      	nop
 8023e54:	e004      	b.n	8023e60 <Custom_STM_Event_Handler+0x114>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8023e56:	bf00      	nop
 8023e58:	e002      	b.n	8023e60 <Custom_STM_Event_Handler+0x114>
          break;
 8023e5a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8023e5c:	e000      	b.n	8023e60 <Custom_STM_Event_Handler+0x114>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8023e5e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8023e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8023e64:	4618      	mov	r0, r3
 8023e66:	3728      	adds	r7, #40	; 0x28
 8023e68:	46bd      	mov	sp, r7
 8023e6a:	bd80      	pop	{r7, pc}
 8023e6c:	2000a930 	.word	0x2000a930

08023e70 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8023e70:	b580      	push	{r7, lr}
 8023e72:	b08c      	sub	sp, #48	; 0x30
 8023e74:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8023e76:	2392      	movs	r3, #146	; 0x92
 8023e78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8023e7a:	48ab      	ldr	r0, [pc, #684]	; (8024128 <SVCCTL_InitCustomSvc+0x2b8>)
 8023e7c:	f7fd ff10 	bl	8021ca0 <SVCCTL_RegisterSvcHandler>
   *                                2 for status_connection +
   *                                1 for status_connection configuration descriptor +
   *                              = 8
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 8023e80:	238f      	movs	r3, #143	; 0x8f
 8023e82:	713b      	strb	r3, [r7, #4]
 8023e84:	23e5      	movs	r3, #229	; 0xe5
 8023e86:	717b      	strb	r3, [r7, #5]
 8023e88:	23b3      	movs	r3, #179	; 0xb3
 8023e8a:	71bb      	strb	r3, [r7, #6]
 8023e8c:	23d5      	movs	r3, #213	; 0xd5
 8023e8e:	71fb      	strb	r3, [r7, #7]
 8023e90:	232e      	movs	r3, #46	; 0x2e
 8023e92:	723b      	strb	r3, [r7, #8]
 8023e94:	237f      	movs	r3, #127	; 0x7f
 8023e96:	727b      	strb	r3, [r7, #9]
 8023e98:	234a      	movs	r3, #74	; 0x4a
 8023e9a:	72bb      	strb	r3, [r7, #10]
 8023e9c:	2398      	movs	r3, #152	; 0x98
 8023e9e:	72fb      	strb	r3, [r7, #11]
 8023ea0:	232a      	movs	r3, #42	; 0x2a
 8023ea2:	733b      	strb	r3, [r7, #12]
 8023ea4:	2348      	movs	r3, #72	; 0x48
 8023ea6:	737b      	strb	r3, [r7, #13]
 8023ea8:	237a      	movs	r3, #122	; 0x7a
 8023eaa:	73bb      	strb	r3, [r7, #14]
 8023eac:	23cc      	movs	r3, #204	; 0xcc
 8023eae:	73fb      	strb	r3, [r7, #15]
 8023eb0:	23ed      	movs	r3, #237	; 0xed
 8023eb2:	743b      	strb	r3, [r7, #16]
 8023eb4:	23fe      	movs	r3, #254	; 0xfe
 8023eb6:	747b      	strb	r3, [r7, #17]
 8023eb8:	2300      	movs	r3, #0
 8023eba:	74bb      	strb	r3, [r7, #18]
 8023ebc:	2300      	movs	r3, #0
 8023ebe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8023ec0:	1d39      	adds	r1, r7, #4
 8023ec2:	4b9a      	ldr	r3, [pc, #616]	; (802412c <SVCCTL_InitCustomSvc+0x2bc>)
 8023ec4:	9300      	str	r3, [sp, #0]
 8023ec6:	2308      	movs	r3, #8
 8023ec8:	2201      	movs	r2, #1
 8023eca:	2002      	movs	r0, #2
 8023ecc:	f7fd f9b0 	bl	8021230 <aci_gatt_add_service>
 8023ed0:	4603      	mov	r3, r0
 8023ed2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             8,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8023ed4:	7dfb      	ldrb	r3, [r7, #23]
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	d00f      	beq.n	8023efa <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 8023eda:	4895      	ldr	r0, [pc, #596]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8023edc:	f7fe fd52 	bl	8022984 <DbgTraceGetFileName>
 8023ee0:	4601      	mov	r1, r0
 8023ee2:	f240 1335 	movw	r3, #309	; 0x135
 8023ee6:	4a93      	ldr	r2, [pc, #588]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8023ee8:	4893      	ldr	r0, [pc, #588]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8023eea:	f002 f81d 	bl	8025f28 <iprintf>
 8023eee:	7dfb      	ldrb	r3, [r7, #23]
 8023ef0:	4619      	mov	r1, r3
 8023ef2:	4892      	ldr	r0, [pc, #584]	; (802413c <SVCCTL_InitCustomSvc+0x2cc>)
 8023ef4:	f002 f818 	bl	8025f28 <iprintf>
 8023ef8:	e00c      	b.n	8023f14 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 8023efa:	488d      	ldr	r0, [pc, #564]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8023efc:	f7fe fd42 	bl	8022984 <DbgTraceGetFileName>
 8023f00:	4601      	mov	r1, r0
 8023f02:	f240 1339 	movw	r3, #313	; 0x139
 8023f06:	4a8b      	ldr	r2, [pc, #556]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8023f08:	488b      	ldr	r0, [pc, #556]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8023f0a:	f002 f80d 	bl	8025f28 <iprintf>
 8023f0e:	488c      	ldr	r0, [pc, #560]	; (8024140 <SVCCTL_InitCustomSvc+0x2d0>)
 8023f10:	f002 f80a 	bl	8025f28 <iprintf>
  }

  /**
   *  get_ssid
   */
  COPY_GET_SSID_UUID(uuid.Char_UUID_128);
 8023f14:	2319      	movs	r3, #25
 8023f16:	713b      	strb	r3, [r7, #4]
 8023f18:	23ed      	movs	r3, #237	; 0xed
 8023f1a:	717b      	strb	r3, [r7, #5]
 8023f1c:	2382      	movs	r3, #130	; 0x82
 8023f1e:	71bb      	strb	r3, [r7, #6]
 8023f20:	23ae      	movs	r3, #174	; 0xae
 8023f22:	71fb      	strb	r3, [r7, #7]
 8023f24:	23ed      	movs	r3, #237	; 0xed
 8023f26:	723b      	strb	r3, [r7, #8]
 8023f28:	2321      	movs	r3, #33	; 0x21
 8023f2a:	727b      	strb	r3, [r7, #9]
 8023f2c:	234c      	movs	r3, #76	; 0x4c
 8023f2e:	72bb      	strb	r3, [r7, #10]
 8023f30:	239d      	movs	r3, #157	; 0x9d
 8023f32:	72fb      	strb	r3, [r7, #11]
 8023f34:	2341      	movs	r3, #65	; 0x41
 8023f36:	733b      	strb	r3, [r7, #12]
 8023f38:	2345      	movs	r3, #69	; 0x45
 8023f3a:	737b      	strb	r3, [r7, #13]
 8023f3c:	2322      	movs	r3, #34	; 0x22
 8023f3e:	73bb      	strb	r3, [r7, #14]
 8023f40:	238e      	movs	r3, #142	; 0x8e
 8023f42:	73fb      	strb	r3, [r7, #15]
 8023f44:	23cd      	movs	r3, #205	; 0xcd
 8023f46:	743b      	strb	r3, [r7, #16]
 8023f48:	23ab      	movs	r3, #171	; 0xab
 8023f4a:	747b      	strb	r3, [r7, #17]
 8023f4c:	2300      	movs	r3, #0
 8023f4e:	74bb      	strb	r3, [r7, #18]
 8023f50:	2300      	movs	r3, #0
 8023f52:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8023f54:	4b75      	ldr	r3, [pc, #468]	; (802412c <SVCCTL_InitCustomSvc+0x2bc>)
 8023f56:	8818      	ldrh	r0, [r3, #0]
 8023f58:	4b7a      	ldr	r3, [pc, #488]	; (8024144 <SVCCTL_InitCustomSvc+0x2d4>)
 8023f5a:	781b      	ldrb	r3, [r3, #0]
 8023f5c:	b29b      	uxth	r3, r3
 8023f5e:	1d3a      	adds	r2, r7, #4
 8023f60:	4979      	ldr	r1, [pc, #484]	; (8024148 <SVCCTL_InitCustomSvc+0x2d8>)
 8023f62:	9105      	str	r1, [sp, #20]
 8023f64:	2101      	movs	r1, #1
 8023f66:	9104      	str	r1, [sp, #16]
 8023f68:	2110      	movs	r1, #16
 8023f6a:	9103      	str	r1, [sp, #12]
 8023f6c:	2101      	movs	r1, #1
 8023f6e:	9102      	str	r1, [sp, #8]
 8023f70:	2100      	movs	r1, #0
 8023f72:	9101      	str	r1, [sp, #4]
 8023f74:	2106      	movs	r1, #6
 8023f76:	9100      	str	r1, [sp, #0]
 8023f78:	2102      	movs	r1, #2
 8023f7a:	f7fd fa2f 	bl	80213dc <aci_gatt_add_char>
 8023f7e:	4603      	mov	r3, r0
 8023f80:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGssidHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8023f82:	7dfb      	ldrb	r3, [r7, #23]
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	d00f      	beq.n	8023fa8 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GSSID, error code: 0x%x \n\r", ret);
 8023f88:	4869      	ldr	r0, [pc, #420]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8023f8a:	f7fe fcfb 	bl	8022984 <DbgTraceGetFileName>
 8023f8e:	4601      	mov	r1, r0
 8023f90:	f240 134b 	movw	r3, #331	; 0x14b
 8023f94:	4a67      	ldr	r2, [pc, #412]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8023f96:	4868      	ldr	r0, [pc, #416]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8023f98:	f001 ffc6 	bl	8025f28 <iprintf>
 8023f9c:	7dfb      	ldrb	r3, [r7, #23]
 8023f9e:	4619      	mov	r1, r3
 8023fa0:	486a      	ldr	r0, [pc, #424]	; (802414c <SVCCTL_InitCustomSvc+0x2dc>)
 8023fa2:	f001 ffc1 	bl	8025f28 <iprintf>
 8023fa6:	e00c      	b.n	8023fc2 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GSSID \n\r");
 8023fa8:	4861      	ldr	r0, [pc, #388]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8023faa:	f7fe fceb 	bl	8022984 <DbgTraceGetFileName>
 8023fae:	4601      	mov	r1, r0
 8023fb0:	f240 134f 	movw	r3, #335	; 0x14f
 8023fb4:	4a5f      	ldr	r2, [pc, #380]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8023fb6:	4860      	ldr	r0, [pc, #384]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8023fb8:	f001 ffb6 	bl	8025f28 <iprintf>
 8023fbc:	4864      	ldr	r0, [pc, #400]	; (8024150 <SVCCTL_InitCustomSvc+0x2e0>)
 8023fbe:	f001 ffb3 	bl	8025f28 <iprintf>
  }
  /**
   *  get_password
   */
  COPY_GET_PASSWORD_UUID(uuid.Char_UUID_128);
 8023fc2:	2319      	movs	r3, #25
 8023fc4:	713b      	strb	r3, [r7, #4]
 8023fc6:	23ed      	movs	r3, #237	; 0xed
 8023fc8:	717b      	strb	r3, [r7, #5]
 8023fca:	2382      	movs	r3, #130	; 0x82
 8023fcc:	71bb      	strb	r3, [r7, #6]
 8023fce:	23ae      	movs	r3, #174	; 0xae
 8023fd0:	71fb      	strb	r3, [r7, #7]
 8023fd2:	23ed      	movs	r3, #237	; 0xed
 8023fd4:	723b      	strb	r3, [r7, #8]
 8023fd6:	2321      	movs	r3, #33	; 0x21
 8023fd8:	727b      	strb	r3, [r7, #9]
 8023fda:	234c      	movs	r3, #76	; 0x4c
 8023fdc:	72bb      	strb	r3, [r7, #10]
 8023fde:	239d      	movs	r3, #157	; 0x9d
 8023fe0:	72fb      	strb	r3, [r7, #11]
 8023fe2:	2341      	movs	r3, #65	; 0x41
 8023fe4:	733b      	strb	r3, [r7, #12]
 8023fe6:	2345      	movs	r3, #69	; 0x45
 8023fe8:	737b      	strb	r3, [r7, #13]
 8023fea:	2322      	movs	r3, #34	; 0x22
 8023fec:	73bb      	strb	r3, [r7, #14]
 8023fee:	238e      	movs	r3, #142	; 0x8e
 8023ff0:	73fb      	strb	r3, [r7, #15]
 8023ff2:	2334      	movs	r3, #52	; 0x34
 8023ff4:	743b      	strb	r3, [r7, #16]
 8023ff6:	2312      	movs	r3, #18
 8023ff8:	747b      	strb	r3, [r7, #17]
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	74bb      	strb	r3, [r7, #18]
 8023ffe:	2300      	movs	r3, #0
 8024000:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8024002:	4b4a      	ldr	r3, [pc, #296]	; (802412c <SVCCTL_InitCustomSvc+0x2bc>)
 8024004:	8818      	ldrh	r0, [r3, #0]
 8024006:	4b53      	ldr	r3, [pc, #332]	; (8024154 <SVCCTL_InitCustomSvc+0x2e4>)
 8024008:	781b      	ldrb	r3, [r3, #0]
 802400a:	b29b      	uxth	r3, r3
 802400c:	1d3a      	adds	r2, r7, #4
 802400e:	4952      	ldr	r1, [pc, #328]	; (8024158 <SVCCTL_InitCustomSvc+0x2e8>)
 8024010:	9105      	str	r1, [sp, #20]
 8024012:	2101      	movs	r1, #1
 8024014:	9104      	str	r1, [sp, #16]
 8024016:	2110      	movs	r1, #16
 8024018:	9103      	str	r1, [sp, #12]
 802401a:	2101      	movs	r1, #1
 802401c:	9102      	str	r1, [sp, #8]
 802401e:	2100      	movs	r1, #0
 8024020:	9101      	str	r1, [sp, #4]
 8024022:	2106      	movs	r1, #6
 8024024:	9100      	str	r1, [sp, #0]
 8024026:	2102      	movs	r1, #2
 8024028:	f7fd f9d8 	bl	80213dc <aci_gatt_add_char>
 802402c:	4603      	mov	r3, r0
 802402e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGpassHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8024030:	7dfb      	ldrb	r3, [r7, #23]
 8024032:	2b00      	cmp	r3, #0
 8024034:	d00f      	beq.n	8024056 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GPASS, error code: 0x%x \n\r", ret);
 8024036:	483e      	ldr	r0, [pc, #248]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8024038:	f7fe fca4 	bl	8022984 <DbgTraceGetFileName>
 802403c:	4601      	mov	r1, r0
 802403e:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8024042:	4a3c      	ldr	r2, [pc, #240]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8024044:	483c      	ldr	r0, [pc, #240]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8024046:	f001 ff6f 	bl	8025f28 <iprintf>
 802404a:	7dfb      	ldrb	r3, [r7, #23]
 802404c:	4619      	mov	r1, r3
 802404e:	4843      	ldr	r0, [pc, #268]	; (802415c <SVCCTL_InitCustomSvc+0x2ec>)
 8024050:	f001 ff6a 	bl	8025f28 <iprintf>
 8024054:	e00c      	b.n	8024070 <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GPASS \n\r");
 8024056:	4836      	ldr	r0, [pc, #216]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8024058:	f7fe fc94 	bl	8022984 <DbgTraceGetFileName>
 802405c:	4601      	mov	r1, r0
 802405e:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8024062:	4a34      	ldr	r2, [pc, #208]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8024064:	4834      	ldr	r0, [pc, #208]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8024066:	f001 ff5f 	bl	8025f28 <iprintf>
 802406a:	483d      	ldr	r0, [pc, #244]	; (8024160 <SVCCTL_InitCustomSvc+0x2f0>)
 802406c:	f001 ff5c 	bl	8025f28 <iprintf>
  }
  /**
   *  status_connection
   */
  COPY_STATUS_CONNECTION_UUID(uuid.Char_UUID_128);
 8024070:	2319      	movs	r3, #25
 8024072:	713b      	strb	r3, [r7, #4]
 8024074:	23ed      	movs	r3, #237	; 0xed
 8024076:	717b      	strb	r3, [r7, #5]
 8024078:	2382      	movs	r3, #130	; 0x82
 802407a:	71bb      	strb	r3, [r7, #6]
 802407c:	23ae      	movs	r3, #174	; 0xae
 802407e:	71fb      	strb	r3, [r7, #7]
 8024080:	23ed      	movs	r3, #237	; 0xed
 8024082:	723b      	strb	r3, [r7, #8]
 8024084:	2321      	movs	r3, #33	; 0x21
 8024086:	727b      	strb	r3, [r7, #9]
 8024088:	234c      	movs	r3, #76	; 0x4c
 802408a:	72bb      	strb	r3, [r7, #10]
 802408c:	239d      	movs	r3, #157	; 0x9d
 802408e:	72fb      	strb	r3, [r7, #11]
 8024090:	2341      	movs	r3, #65	; 0x41
 8024092:	733b      	strb	r3, [r7, #12]
 8024094:	2345      	movs	r3, #69	; 0x45
 8024096:	737b      	strb	r3, [r7, #13]
 8024098:	2322      	movs	r3, #34	; 0x22
 802409a:	73bb      	strb	r3, [r7, #14]
 802409c:	238e      	movs	r3, #142	; 0x8e
 802409e:	73fb      	strb	r3, [r7, #15]
 80240a0:	23ad      	movs	r3, #173	; 0xad
 80240a2:	743b      	strb	r3, [r7, #16]
 80240a4:	23de      	movs	r3, #222	; 0xde
 80240a6:	747b      	strb	r3, [r7, #17]
 80240a8:	2300      	movs	r3, #0
 80240aa:	74bb      	strb	r3, [r7, #18]
 80240ac:	2300      	movs	r3, #0
 80240ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 80240b0:	4b1e      	ldr	r3, [pc, #120]	; (802412c <SVCCTL_InitCustomSvc+0x2bc>)
 80240b2:	8818      	ldrh	r0, [r3, #0]
 80240b4:	4b2b      	ldr	r3, [pc, #172]	; (8024164 <SVCCTL_InitCustomSvc+0x2f4>)
 80240b6:	781b      	ldrb	r3, [r3, #0]
 80240b8:	b29b      	uxth	r3, r3
 80240ba:	1d3a      	adds	r2, r7, #4
 80240bc:	492a      	ldr	r1, [pc, #168]	; (8024168 <SVCCTL_InitCustomSvc+0x2f8>)
 80240be:	9105      	str	r1, [sp, #20]
 80240c0:	2100      	movs	r1, #0
 80240c2:	9104      	str	r1, [sp, #16]
 80240c4:	2110      	movs	r1, #16
 80240c6:	9103      	str	r1, [sp, #12]
 80240c8:	2101      	movs	r1, #1
 80240ca:	9102      	str	r1, [sp, #8]
 80240cc:	2100      	movs	r1, #0
 80240ce:	9101      	str	r1, [sp, #4]
 80240d0:	2110      	movs	r1, #16
 80240d2:	9100      	str	r1, [sp, #0]
 80240d4:	2102      	movs	r1, #2
 80240d6:	f7fd f981 	bl	80213dc <aci_gatt_add_char>
 80240da:	4603      	mov	r3, r0
 80240dc:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAckHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80240de:	7dfb      	ldrb	r3, [r7, #23]
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	d00f      	beq.n	8024104 <SVCCTL_InitCustomSvc+0x294>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACK, error code: 0x%x \n\r", ret);
 80240e4:	4812      	ldr	r0, [pc, #72]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 80240e6:	f7fe fc4d 	bl	8022984 <DbgTraceGetFileName>
 80240ea:	4601      	mov	r1, r0
 80240ec:	f240 1375 	movw	r3, #373	; 0x175
 80240f0:	4a10      	ldr	r2, [pc, #64]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 80240f2:	4811      	ldr	r0, [pc, #68]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 80240f4:	f001 ff18 	bl	8025f28 <iprintf>
 80240f8:	7dfb      	ldrb	r3, [r7, #23]
 80240fa:	4619      	mov	r1, r3
 80240fc:	481b      	ldr	r0, [pc, #108]	; (802416c <SVCCTL_InitCustomSvc+0x2fc>)
 80240fe:	f001 ff13 	bl	8025f28 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8024102:	e00d      	b.n	8024120 <SVCCTL_InitCustomSvc+0x2b0>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACK \n\r");
 8024104:	480a      	ldr	r0, [pc, #40]	; (8024130 <SVCCTL_InitCustomSvc+0x2c0>)
 8024106:	f7fe fc3d 	bl	8022984 <DbgTraceGetFileName>
 802410a:	4601      	mov	r1, r0
 802410c:	f240 1379 	movw	r3, #377	; 0x179
 8024110:	4a08      	ldr	r2, [pc, #32]	; (8024134 <SVCCTL_InitCustomSvc+0x2c4>)
 8024112:	4809      	ldr	r0, [pc, #36]	; (8024138 <SVCCTL_InitCustomSvc+0x2c8>)
 8024114:	f001 ff08 	bl	8025f28 <iprintf>
 8024118:	4815      	ldr	r0, [pc, #84]	; (8024170 <SVCCTL_InitCustomSvc+0x300>)
 802411a:	f001 ff05 	bl	8025f28 <iprintf>
  return;
 802411e:	bf00      	nop
}
 8024120:	3718      	adds	r7, #24
 8024122:	46bd      	mov	sp, r7
 8024124:	bd80      	pop	{r7, pc}
 8024126:	bf00      	nop
 8024128:	08023d4d 	.word	0x08023d4d
 802412c:	2000a930 	.word	0x2000a930
 8024130:	08029cc0 	.word	0x08029cc0
 8024134:	0802a404 	.word	0x0802a404
 8024138:	08029ce0 	.word	0x08029ce0
 802413c:	08029cf4 	.word	0x08029cf4
 8024140:	08029d38 	.word	0x08029d38
 8024144:	200000a1 	.word	0x200000a1
 8024148:	2000a932 	.word	0x2000a932
 802414c:	08029d68 	.word	0x08029d68
 8024150:	08029dac 	.word	0x08029dac
 8024154:	200000a2 	.word	0x200000a2
 8024158:	2000a934 	.word	0x2000a934
 802415c:	08029de0 	.word	0x08029de0
 8024160:	08029e24 	.word	0x08029e24
 8024164:	200000a3 	.word	0x200000a3
 8024168:	2000a936 	.word	0x2000a936
 802416c:	08029e58 	.word	0x08029e58
 8024170:	08029e9c 	.word	0x08029e9c

08024174 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8024174:	b580      	push	{r7, lr}
 8024176:	b086      	sub	sp, #24
 8024178:	af02      	add	r7, sp, #8
 802417a:	4603      	mov	r3, r0
 802417c:	6039      	str	r1, [r7, #0]
 802417e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8024180:	2392      	movs	r3, #146	; 0x92
 8024182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8024184:	79fb      	ldrb	r3, [r7, #7]
 8024186:	2b02      	cmp	r3, #2
 8024188:	d06a      	beq.n	8024260 <Custom_STM_App_Update_Char+0xec>
 802418a:	2b02      	cmp	r3, #2
 802418c:	f300 8097 	bgt.w	80242be <Custom_STM_App_Update_Char+0x14a>
 8024190:	2b00      	cmp	r3, #0
 8024192:	d002      	beq.n	802419a <Custom_STM_App_Update_Char+0x26>
 8024194:	2b01      	cmp	r3, #1
 8024196:	d034      	beq.n	8024202 <Custom_STM_App_Update_Char+0x8e>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 8024198:	e091      	b.n	80242be <Custom_STM_App_Update_Char+0x14a>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 802419a:	4b4c      	ldr	r3, [pc, #304]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 802419c:	8818      	ldrh	r0, [r3, #0]
 802419e:	4b4b      	ldr	r3, [pc, #300]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 80241a0:	8859      	ldrh	r1, [r3, #2]
 80241a2:	4b4b      	ldr	r3, [pc, #300]	; (80242d0 <Custom_STM_App_Update_Char+0x15c>)
 80241a4:	781a      	ldrb	r2, [r3, #0]
 80241a6:	683b      	ldr	r3, [r7, #0]
 80241a8:	9300      	str	r3, [sp, #0]
 80241aa:	4613      	mov	r3, r2
 80241ac:	2200      	movs	r2, #0
 80241ae:	f7fd fa1d 	bl	80215ec <aci_gatt_update_char_value>
 80241b2:	4603      	mov	r3, r0
 80241b4:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80241b6:	7bfb      	ldrb	r3, [r7, #15]
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d00f      	beq.n	80241dc <Custom_STM_App_Update_Char+0x68>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GSSID command, result : 0x%x \n\r", ret);
 80241bc:	4845      	ldr	r0, [pc, #276]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 80241be:	f7fe fbe1 	bl	8022984 <DbgTraceGetFileName>
 80241c2:	4601      	mov	r1, r0
 80241c4:	f240 139b 	movw	r3, #411	; 0x19b
 80241c8:	4a43      	ldr	r2, [pc, #268]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 80241ca:	4844      	ldr	r0, [pc, #272]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 80241cc:	f001 feac 	bl	8025f28 <iprintf>
 80241d0:	7bfb      	ldrb	r3, [r7, #15]
 80241d2:	4619      	mov	r1, r3
 80241d4:	4842      	ldr	r0, [pc, #264]	; (80242e0 <Custom_STM_App_Update_Char+0x16c>)
 80241d6:	f001 fea7 	bl	8025f28 <iprintf>
 80241da:	e00c      	b.n	80241f6 <Custom_STM_App_Update_Char+0x82>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GSSID command\n\r");
 80241dc:	483d      	ldr	r0, [pc, #244]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 80241de:	f7fe fbd1 	bl	8022984 <DbgTraceGetFileName>
 80241e2:	4601      	mov	r1, r0
 80241e4:	f240 139f 	movw	r3, #415	; 0x19f
 80241e8:	4a3b      	ldr	r2, [pc, #236]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 80241ea:	483c      	ldr	r0, [pc, #240]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 80241ec:	f001 fe9c 	bl	8025f28 <iprintf>
 80241f0:	483c      	ldr	r0, [pc, #240]	; (80242e4 <Custom_STM_App_Update_Char+0x170>)
 80241f2:	f001 fe99 	bl	8025f28 <iprintf>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80241f6:	2201      	movs	r2, #1
 80241f8:	2120      	movs	r1, #32
 80241fa:	483b      	ldr	r0, [pc, #236]	; (80242e8 <Custom_STM_App_Update_Char+0x174>)
 80241fc:	f7f6 fab4 	bl	801a768 <HAL_GPIO_WritePin>
      break;
 8024200:	e05e      	b.n	80242c0 <Custom_STM_App_Update_Char+0x14c>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 8024202:	4b32      	ldr	r3, [pc, #200]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 8024204:	8818      	ldrh	r0, [r3, #0]
 8024206:	4b31      	ldr	r3, [pc, #196]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 8024208:	8899      	ldrh	r1, [r3, #4]
 802420a:	4b38      	ldr	r3, [pc, #224]	; (80242ec <Custom_STM_App_Update_Char+0x178>)
 802420c:	781a      	ldrb	r2, [r3, #0]
 802420e:	683b      	ldr	r3, [r7, #0]
 8024210:	9300      	str	r3, [sp, #0]
 8024212:	4613      	mov	r3, r2
 8024214:	2200      	movs	r2, #0
 8024216:	f7fd f9e9 	bl	80215ec <aci_gatt_update_char_value>
 802421a:	4603      	mov	r3, r0
 802421c:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 802421e:	7bfb      	ldrb	r3, [r7, #15]
 8024220:	2b00      	cmp	r3, #0
 8024222:	d00f      	beq.n	8024244 <Custom_STM_App_Update_Char+0xd0>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GPASS command, result : 0x%x \n\r", ret);
 8024224:	482b      	ldr	r0, [pc, #172]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 8024226:	f7fe fbad 	bl	8022984 <DbgTraceGetFileName>
 802422a:	4601      	mov	r1, r0
 802422c:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8024230:	4a29      	ldr	r2, [pc, #164]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 8024232:	482a      	ldr	r0, [pc, #168]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 8024234:	f001 fe78 	bl	8025f28 <iprintf>
 8024238:	7bfb      	ldrb	r3, [r7, #15]
 802423a:	4619      	mov	r1, r3
 802423c:	482c      	ldr	r0, [pc, #176]	; (80242f0 <Custom_STM_App_Update_Char+0x17c>)
 802423e:	f001 fe73 	bl	8025f28 <iprintf>
      break;
 8024242:	e03d      	b.n	80242c0 <Custom_STM_App_Update_Char+0x14c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GPASS command\n\r");
 8024244:	4823      	ldr	r0, [pc, #140]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 8024246:	f7fe fb9d 	bl	8022984 <DbgTraceGetFileName>
 802424a:	4601      	mov	r1, r0
 802424c:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8024250:	4a21      	ldr	r2, [pc, #132]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 8024252:	4822      	ldr	r0, [pc, #136]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 8024254:	f001 fe68 	bl	8025f28 <iprintf>
 8024258:	4826      	ldr	r0, [pc, #152]	; (80242f4 <Custom_STM_App_Update_Char+0x180>)
 802425a:	f001 fe65 	bl	8025f28 <iprintf>
      break;
 802425e:	e02f      	b.n	80242c0 <Custom_STM_App_Update_Char+0x14c>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 8024260:	4b1a      	ldr	r3, [pc, #104]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 8024262:	8818      	ldrh	r0, [r3, #0]
 8024264:	4b19      	ldr	r3, [pc, #100]	; (80242cc <Custom_STM_App_Update_Char+0x158>)
 8024266:	88d9      	ldrh	r1, [r3, #6]
 8024268:	4b23      	ldr	r3, [pc, #140]	; (80242f8 <Custom_STM_App_Update_Char+0x184>)
 802426a:	781a      	ldrb	r2, [r3, #0]
 802426c:	683b      	ldr	r3, [r7, #0]
 802426e:	9300      	str	r3, [sp, #0]
 8024270:	4613      	mov	r3, r2
 8024272:	2200      	movs	r2, #0
 8024274:	f7fd f9ba 	bl	80215ec <aci_gatt_update_char_value>
 8024278:	4603      	mov	r3, r0
 802427a:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 802427c:	7bfb      	ldrb	r3, [r7, #15]
 802427e:	2b00      	cmp	r3, #0
 8024280:	d00f      	beq.n	80242a2 <Custom_STM_App_Update_Char+0x12e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACK command, result : 0x%x \n\r", ret);
 8024282:	4814      	ldr	r0, [pc, #80]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 8024284:	f7fe fb7e 	bl	8022984 <DbgTraceGetFileName>
 8024288:	4601      	mov	r1, r0
 802428a:	f240 13c1 	movw	r3, #449	; 0x1c1
 802428e:	4a12      	ldr	r2, [pc, #72]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 8024290:	4812      	ldr	r0, [pc, #72]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 8024292:	f001 fe49 	bl	8025f28 <iprintf>
 8024296:	7bfb      	ldrb	r3, [r7, #15]
 8024298:	4619      	mov	r1, r3
 802429a:	4818      	ldr	r0, [pc, #96]	; (80242fc <Custom_STM_App_Update_Char+0x188>)
 802429c:	f001 fe44 	bl	8025f28 <iprintf>
      break;
 80242a0:	e00e      	b.n	80242c0 <Custom_STM_App_Update_Char+0x14c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACK command\n\r");
 80242a2:	480c      	ldr	r0, [pc, #48]	; (80242d4 <Custom_STM_App_Update_Char+0x160>)
 80242a4:	f7fe fb6e 	bl	8022984 <DbgTraceGetFileName>
 80242a8:	4601      	mov	r1, r0
 80242aa:	f240 13c5 	movw	r3, #453	; 0x1c5
 80242ae:	4a0a      	ldr	r2, [pc, #40]	; (80242d8 <Custom_STM_App_Update_Char+0x164>)
 80242b0:	480a      	ldr	r0, [pc, #40]	; (80242dc <Custom_STM_App_Update_Char+0x168>)
 80242b2:	f001 fe39 	bl	8025f28 <iprintf>
 80242b6:	4812      	ldr	r0, [pc, #72]	; (8024300 <Custom_STM_App_Update_Char+0x18c>)
 80242b8:	f001 fe36 	bl	8025f28 <iprintf>
      break;
 80242bc:	e000      	b.n	80242c0 <Custom_STM_App_Update_Char+0x14c>
      break;
 80242be:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80242c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80242c2:	4618      	mov	r0, r3
 80242c4:	3710      	adds	r7, #16
 80242c6:	46bd      	mov	sp, r7
 80242c8:	bd80      	pop	{r7, pc}
 80242ca:	bf00      	nop
 80242cc:	2000a930 	.word	0x2000a930
 80242d0:	200000a1 	.word	0x200000a1
 80242d4:	08029cc0 	.word	0x08029cc0
 80242d8:	0802a41c 	.word	0x0802a41c
 80242dc:	08029ce0 	.word	0x08029ce0
 80242e0:	08029ecc 	.word	0x08029ecc
 80242e4:	08029f14 	.word	0x08029f14
 80242e8:	48000400 	.word	0x48000400
 80242ec:	200000a2 	.word	0x200000a2
 80242f0:	08029f4c 	.word	0x08029f4c
 80242f4:	08029f94 	.word	0x08029f94
 80242f8:	200000a3 	.word	0x200000a3
 80242fc:	08029fcc 	.word	0x08029fcc
 8024300:	0802a010 	.word	0x0802a010

08024304 <LL_PWR_EnableBootC2>:
{
 8024304:	b480      	push	{r7}
 8024306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8024308:	4b05      	ldr	r3, [pc, #20]	; (8024320 <LL_PWR_EnableBootC2+0x1c>)
 802430a:	68db      	ldr	r3, [r3, #12]
 802430c:	4a04      	ldr	r2, [pc, #16]	; (8024320 <LL_PWR_EnableBootC2+0x1c>)
 802430e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024312:	60d3      	str	r3, [r2, #12]
}
 8024314:	bf00      	nop
 8024316:	46bd      	mov	sp, r7
 8024318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431c:	4770      	bx	lr
 802431e:	bf00      	nop
 8024320:	58000400 	.word	0x58000400

08024324 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8024324:	b480      	push	{r7}
 8024326:	b083      	sub	sp, #12
 8024328:	af00      	add	r7, sp, #0
 802432a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 802432c:	4b06      	ldr	r3, [pc, #24]	; (8024348 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 802432e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8024332:	4905      	ldr	r1, [pc, #20]	; (8024348 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	4313      	orrs	r3, r2
 8024338:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 802433c:	bf00      	nop
 802433e:	370c      	adds	r7, #12
 8024340:	46bd      	mov	sp, r7
 8024342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024346:	4770      	bx	lr
 8024348:	58000800 	.word	0x58000800

0802434c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 802434c:	b480      	push	{r7}
 802434e:	b083      	sub	sp, #12
 8024350:	af00      	add	r7, sp, #0
 8024352:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8024354:	4b05      	ldr	r3, [pc, #20]	; (802436c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8024356:	6a1a      	ldr	r2, [r3, #32]
 8024358:	4904      	ldr	r1, [pc, #16]	; (802436c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	4313      	orrs	r3, r2
 802435e:	620b      	str	r3, [r1, #32]
}
 8024360:	bf00      	nop
 8024362:	370c      	adds	r7, #12
 8024364:	46bd      	mov	sp, r7
 8024366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802436a:	4770      	bx	lr
 802436c:	58000800 	.word	0x58000800

08024370 <LL_AHB3_GRP1_EnableClock>:
{
 8024370:	b480      	push	{r7}
 8024372:	b085      	sub	sp, #20
 8024374:	af00      	add	r7, sp, #0
 8024376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8024378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802437c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802437e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	4313      	orrs	r3, r2
 8024386:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8024388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802438c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	4013      	ands	r3, r2
 8024392:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8024394:	68fb      	ldr	r3, [r7, #12]
}
 8024396:	bf00      	nop
 8024398:	3714      	adds	r7, #20
 802439a:	46bd      	mov	sp, r7
 802439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243a0:	4770      	bx	lr

080243a2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80243a2:	b480      	push	{r7}
 80243a4:	b085      	sub	sp, #20
 80243a6:	af00      	add	r7, sp, #0
 80243a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80243aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80243ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80243b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	4313      	orrs	r3, r2
 80243ba:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80243be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80243c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	4013      	ands	r3, r2
 80243ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80243cc:	68fb      	ldr	r3, [r7, #12]
}
 80243ce:	bf00      	nop
 80243d0:	3714      	adds	r7, #20
 80243d2:	46bd      	mov	sp, r7
 80243d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243d8:	4770      	bx	lr

080243da <LL_C1_IPCC_EnableIT_TXF>:
{
 80243da:	b480      	push	{r7}
 80243dc:	b083      	sub	sp, #12
 80243de:	af00      	add	r7, sp, #0
 80243e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	681b      	ldr	r3, [r3, #0]
 80243e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80243ea:	687b      	ldr	r3, [r7, #4]
 80243ec:	601a      	str	r2, [r3, #0]
}
 80243ee:	bf00      	nop
 80243f0:	370c      	adds	r7, #12
 80243f2:	46bd      	mov	sp, r7
 80243f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243f8:	4770      	bx	lr

080243fa <LL_C1_IPCC_EnableIT_RXO>:
{
 80243fa:	b480      	push	{r7}
 80243fc:	b083      	sub	sp, #12
 80243fe:	af00      	add	r7, sp, #0
 8024400:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	681b      	ldr	r3, [r3, #0]
 8024406:	f043 0201 	orr.w	r2, r3, #1
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	601a      	str	r2, [r3, #0]
}
 802440e:	bf00      	nop
 8024410:	370c      	adds	r7, #12
 8024412:	46bd      	mov	sp, r7
 8024414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024418:	4770      	bx	lr

0802441a <LL_C1_IPCC_EnableTransmitChannel>:
{
 802441a:	b480      	push	{r7}
 802441c:	b083      	sub	sp, #12
 802441e:	af00      	add	r7, sp, #0
 8024420:	6078      	str	r0, [r7, #4]
 8024422:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	685a      	ldr	r2, [r3, #4]
 8024428:	683b      	ldr	r3, [r7, #0]
 802442a:	041b      	lsls	r3, r3, #16
 802442c:	43db      	mvns	r3, r3
 802442e:	401a      	ands	r2, r3
 8024430:	687b      	ldr	r3, [r7, #4]
 8024432:	605a      	str	r2, [r3, #4]
}
 8024434:	bf00      	nop
 8024436:	370c      	adds	r7, #12
 8024438:	46bd      	mov	sp, r7
 802443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802443e:	4770      	bx	lr

08024440 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8024440:	b480      	push	{r7}
 8024442:	b083      	sub	sp, #12
 8024444:	af00      	add	r7, sp, #0
 8024446:	6078      	str	r0, [r7, #4]
 8024448:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	685a      	ldr	r2, [r3, #4]
 802444e:	683b      	ldr	r3, [r7, #0]
 8024450:	041b      	lsls	r3, r3, #16
 8024452:	431a      	orrs	r2, r3
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	605a      	str	r2, [r3, #4]
}
 8024458:	bf00      	nop
 802445a:	370c      	adds	r7, #12
 802445c:	46bd      	mov	sp, r7
 802445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024462:	4770      	bx	lr

08024464 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8024464:	b480      	push	{r7}
 8024466:	b083      	sub	sp, #12
 8024468:	af00      	add	r7, sp, #0
 802446a:	6078      	str	r0, [r7, #4]
 802446c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	685a      	ldr	r2, [r3, #4]
 8024472:	683b      	ldr	r3, [r7, #0]
 8024474:	43db      	mvns	r3, r3
 8024476:	401a      	ands	r2, r3
 8024478:	687b      	ldr	r3, [r7, #4]
 802447a:	605a      	str	r2, [r3, #4]
}
 802447c:	bf00      	nop
 802447e:	370c      	adds	r7, #12
 8024480:	46bd      	mov	sp, r7
 8024482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024486:	4770      	bx	lr

08024488 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8024488:	b480      	push	{r7}
 802448a:	b083      	sub	sp, #12
 802448c:	af00      	add	r7, sp, #0
 802448e:	6078      	str	r0, [r7, #4]
 8024490:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	683a      	ldr	r2, [r7, #0]
 8024496:	609a      	str	r2, [r3, #8]
}
 8024498:	bf00      	nop
 802449a:	370c      	adds	r7, #12
 802449c:	46bd      	mov	sp, r7
 802449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244a2:	4770      	bx	lr

080244a4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80244a4:	b480      	push	{r7}
 80244a6:	b083      	sub	sp, #12
 80244a8:	af00      	add	r7, sp, #0
 80244aa:	6078      	str	r0, [r7, #4]
 80244ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80244ae:	683b      	ldr	r3, [r7, #0]
 80244b0:	041a      	lsls	r2, r3, #16
 80244b2:	687b      	ldr	r3, [r7, #4]
 80244b4:	609a      	str	r2, [r3, #8]
}
 80244b6:	bf00      	nop
 80244b8:	370c      	adds	r7, #12
 80244ba:	46bd      	mov	sp, r7
 80244bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244c0:	4770      	bx	lr

080244c2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80244c2:	b480      	push	{r7}
 80244c4:	b083      	sub	sp, #12
 80244c6:	af00      	add	r7, sp, #0
 80244c8:	6078      	str	r0, [r7, #4]
 80244ca:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	68da      	ldr	r2, [r3, #12]
 80244d0:	683b      	ldr	r3, [r7, #0]
 80244d2:	4013      	ands	r3, r2
 80244d4:	683a      	ldr	r2, [r7, #0]
 80244d6:	429a      	cmp	r2, r3
 80244d8:	d101      	bne.n	80244de <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80244da:	2301      	movs	r3, #1
 80244dc:	e000      	b.n	80244e0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80244de:	2300      	movs	r3, #0
}
 80244e0:	4618      	mov	r0, r3
 80244e2:	370c      	adds	r7, #12
 80244e4:	46bd      	mov	sp, r7
 80244e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ea:	4770      	bx	lr

080244ec <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80244ec:	b480      	push	{r7}
 80244ee:	b083      	sub	sp, #12
 80244f0:	af00      	add	r7, sp, #0
 80244f2:	6078      	str	r0, [r7, #4]
 80244f4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	69da      	ldr	r2, [r3, #28]
 80244fa:	683b      	ldr	r3, [r7, #0]
 80244fc:	4013      	ands	r3, r2
 80244fe:	683a      	ldr	r2, [r7, #0]
 8024500:	429a      	cmp	r2, r3
 8024502:	d101      	bne.n	8024508 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8024504:	2301      	movs	r3, #1
 8024506:	e000      	b.n	802450a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8024508:	2300      	movs	r3, #0
}
 802450a:	4618      	mov	r0, r3
 802450c:	370c      	adds	r7, #12
 802450e:	46bd      	mov	sp, r7
 8024510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024514:	4770      	bx	lr
	...

08024518 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8024518:	b580      	push	{r7, lr}
 802451a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 802451c:	2102      	movs	r1, #2
 802451e:	4819      	ldr	r0, [pc, #100]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 8024520:	f7ff ffe4 	bl	80244ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8024524:	4603      	mov	r3, r0
 8024526:	2b00      	cmp	r3, #0
 8024528:	d009      	beq.n	802453e <HW_IPCC_Rx_Handler+0x26>
 802452a:	4b16      	ldr	r3, [pc, #88]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 802452c:	685b      	ldr	r3, [r3, #4]
 802452e:	43db      	mvns	r3, r3
 8024530:	f003 0302 	and.w	r3, r3, #2
 8024534:	2b00      	cmp	r3, #0
 8024536:	d002      	beq.n	802453e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8024538:	f000 f8da 	bl	80246f0 <HW_IPCC_SYS_EvtHandler>
 802453c:	e01f      	b.n	802457e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 802453e:	2101      	movs	r1, #1
 8024540:	4810      	ldr	r0, [pc, #64]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 8024542:	f7ff ffd3 	bl	80244ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8024546:	4603      	mov	r3, r0
 8024548:	2b00      	cmp	r3, #0
 802454a:	d008      	beq.n	802455e <HW_IPCC_Rx_Handler+0x46>
 802454c:	4b0d      	ldr	r3, [pc, #52]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 802454e:	685b      	ldr	r3, [r3, #4]
 8024550:	f003 0301 	and.w	r3, r3, #1
 8024554:	2b00      	cmp	r3, #0
 8024556:	d102      	bne.n	802455e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8024558:	f000 f88e 	bl	8024678 <HW_IPCC_BLE_EvtHandler>
 802455c:	e00f      	b.n	802457e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 802455e:	2108      	movs	r1, #8
 8024560:	4808      	ldr	r0, [pc, #32]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 8024562:	f7ff ffc3 	bl	80244ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8024566:	4603      	mov	r3, r0
 8024568:	2b00      	cmp	r3, #0
 802456a:	d009      	beq.n	8024580 <HW_IPCC_Rx_Handler+0x68>
 802456c:	4b05      	ldr	r3, [pc, #20]	; (8024584 <HW_IPCC_Rx_Handler+0x6c>)
 802456e:	685b      	ldr	r3, [r3, #4]
 8024570:	43db      	mvns	r3, r3
 8024572:	f003 0308 	and.w	r3, r3, #8
 8024576:	2b00      	cmp	r3, #0
 8024578:	d002      	beq.n	8024580 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 802457a:	f000 f905 	bl	8024788 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 802457e:	bf00      	nop
 8024580:	bf00      	nop
}
 8024582:	bd80      	pop	{r7, pc}
 8024584:	58000c00 	.word	0x58000c00

08024588 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8024588:	b580      	push	{r7, lr}
 802458a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 802458c:	2102      	movs	r1, #2
 802458e:	481a      	ldr	r0, [pc, #104]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 8024590:	f7ff ff97 	bl	80244c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8024594:	4603      	mov	r3, r0
 8024596:	2b00      	cmp	r3, #0
 8024598:	d109      	bne.n	80245ae <HW_IPCC_Tx_Handler+0x26>
 802459a:	4b17      	ldr	r3, [pc, #92]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 802459c:	685b      	ldr	r3, [r3, #4]
 802459e:	43db      	mvns	r3, r3
 80245a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80245a4:	2b00      	cmp	r3, #0
 80245a6:	d002      	beq.n	80245ae <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80245a8:	f000 f896 	bl	80246d8 <HW_IPCC_SYS_CmdEvtHandler>
 80245ac:	e020      	b.n	80245f0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80245ae:	2108      	movs	r1, #8
 80245b0:	4811      	ldr	r0, [pc, #68]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 80245b2:	f7ff ff86 	bl	80244c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80245b6:	4603      	mov	r3, r0
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d109      	bne.n	80245d0 <HW_IPCC_Tx_Handler+0x48>
 80245bc:	4b0e      	ldr	r3, [pc, #56]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 80245be:	685b      	ldr	r3, [r3, #4]
 80245c0:	43db      	mvns	r3, r3
 80245c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d002      	beq.n	80245d0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80245ca:	f000 f8bf 	bl	802474c <HW_IPCC_MM_FreeBufHandler>
 80245ce:	e00f      	b.n	80245f0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80245d0:	2120      	movs	r1, #32
 80245d2:	4809      	ldr	r0, [pc, #36]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 80245d4:	f7ff ff75 	bl	80244c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80245d8:	4603      	mov	r3, r0
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d109      	bne.n	80245f2 <HW_IPCC_Tx_Handler+0x6a>
 80245de:	4b06      	ldr	r3, [pc, #24]	; (80245f8 <HW_IPCC_Tx_Handler+0x70>)
 80245e0:	685b      	ldr	r3, [r3, #4]
 80245e2:	43db      	mvns	r3, r3
 80245e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	d002      	beq.n	80245f2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80245ec:	f000 f850 	bl	8024690 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80245f0:	bf00      	nop
 80245f2:	bf00      	nop
}
 80245f4:	bd80      	pop	{r7, pc}
 80245f6:	bf00      	nop
 80245f8:	58000c00 	.word	0x58000c00

080245fc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80245fc:	b580      	push	{r7, lr}
 80245fe:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8024600:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8024604:	f7ff fecd 	bl	80243a2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8024608:	f44f 7000 	mov.w	r0, #512	; 0x200
 802460c:	f7ff fe9e 	bl	802434c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8024610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8024614:	f7ff fe86 	bl	8024324 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8024618:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 802461a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 802461c:	f7ff fe72 	bl	8024304 <LL_PWR_EnableBootC2>

  return;
 8024620:	bf00      	nop
}
 8024622:	bd80      	pop	{r7, pc}

08024624 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8024624:	b580      	push	{r7, lr}
 8024626:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8024628:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802462c:	f7ff fea0 	bl	8024370 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8024630:	4806      	ldr	r0, [pc, #24]	; (802464c <HW_IPCC_Init+0x28>)
 8024632:	f7ff fee2 	bl	80243fa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8024636:	4805      	ldr	r0, [pc, #20]	; (802464c <HW_IPCC_Init+0x28>)
 8024638:	f7ff fecf 	bl	80243da <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 802463c:	202c      	movs	r0, #44	; 0x2c
 802463e:	f7f5 fab6 	bl	8019bae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8024642:	202d      	movs	r0, #45	; 0x2d
 8024644:	f7f5 fab3 	bl	8019bae <HAL_NVIC_EnableIRQ>

  return;
 8024648:	bf00      	nop
}
 802464a:	bd80      	pop	{r7, pc}
 802464c:	58000c00 	.word	0x58000c00

08024650 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8024650:	b580      	push	{r7, lr}
 8024652:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8024654:	2101      	movs	r1, #1
 8024656:	4802      	ldr	r0, [pc, #8]	; (8024660 <HW_IPCC_BLE_Init+0x10>)
 8024658:	f7ff ff04 	bl	8024464 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 802465c:	bf00      	nop
}
 802465e:	bd80      	pop	{r7, pc}
 8024660:	58000c00 	.word	0x58000c00

08024664 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8024664:	b580      	push	{r7, lr}
 8024666:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8024668:	2101      	movs	r1, #1
 802466a:	4802      	ldr	r0, [pc, #8]	; (8024674 <HW_IPCC_BLE_SendCmd+0x10>)
 802466c:	f7ff ff1a 	bl	80244a4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8024670:	bf00      	nop
}
 8024672:	bd80      	pop	{r7, pc}
 8024674:	58000c00 	.word	0x58000c00

08024678 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8024678:	b580      	push	{r7, lr}
 802467a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 802467c:	f7fd ffca 	bl	8022614 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8024680:	2101      	movs	r1, #1
 8024682:	4802      	ldr	r0, [pc, #8]	; (802468c <HW_IPCC_BLE_EvtHandler+0x14>)
 8024684:	f7ff ff00 	bl	8024488 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8024688:	bf00      	nop
}
 802468a:	bd80      	pop	{r7, pc}
 802468c:	58000c00 	.word	0x58000c00

08024690 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8024690:	b580      	push	{r7, lr}
 8024692:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8024694:	2120      	movs	r1, #32
 8024696:	4803      	ldr	r0, [pc, #12]	; (80246a4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8024698:	f7ff fed2 	bl	8024440 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 802469c:	f7fd ffea 	bl	8022674 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80246a0:	bf00      	nop
}
 80246a2:	bd80      	pop	{r7, pc}
 80246a4:	58000c00 	.word	0x58000c00

080246a8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80246a8:	b580      	push	{r7, lr}
 80246aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80246ac:	2102      	movs	r1, #2
 80246ae:	4802      	ldr	r0, [pc, #8]	; (80246b8 <HW_IPCC_SYS_Init+0x10>)
 80246b0:	f7ff fed8 	bl	8024464 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80246b4:	bf00      	nop
}
 80246b6:	bd80      	pop	{r7, pc}
 80246b8:	58000c00 	.word	0x58000c00

080246bc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80246bc:	b580      	push	{r7, lr}
 80246be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80246c0:	2102      	movs	r1, #2
 80246c2:	4804      	ldr	r0, [pc, #16]	; (80246d4 <HW_IPCC_SYS_SendCmd+0x18>)
 80246c4:	f7ff feee 	bl	80244a4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80246c8:	2102      	movs	r1, #2
 80246ca:	4802      	ldr	r0, [pc, #8]	; (80246d4 <HW_IPCC_SYS_SendCmd+0x18>)
 80246cc:	f7ff fea5 	bl	802441a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80246d0:	bf00      	nop
}
 80246d2:	bd80      	pop	{r7, pc}
 80246d4:	58000c00 	.word	0x58000c00

080246d8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80246d8:	b580      	push	{r7, lr}
 80246da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80246dc:	2102      	movs	r1, #2
 80246de:	4803      	ldr	r0, [pc, #12]	; (80246ec <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80246e0:	f7ff feae 	bl	8024440 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80246e4:	f7fe f816 	bl	8022714 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80246e8:	bf00      	nop
}
 80246ea:	bd80      	pop	{r7, pc}
 80246ec:	58000c00 	.word	0x58000c00

080246f0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80246f0:	b580      	push	{r7, lr}
 80246f2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80246f4:	f7fe f824 	bl	8022740 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80246f8:	2102      	movs	r1, #2
 80246fa:	4802      	ldr	r0, [pc, #8]	; (8024704 <HW_IPCC_SYS_EvtHandler+0x14>)
 80246fc:	f7ff fec4 	bl	8024488 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8024700:	bf00      	nop
}
 8024702:	bd80      	pop	{r7, pc}
 8024704:	58000c00 	.word	0x58000c00

08024708 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8024708:	b580      	push	{r7, lr}
 802470a:	b082      	sub	sp, #8
 802470c:	af00      	add	r7, sp, #0
 802470e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8024710:	2108      	movs	r1, #8
 8024712:	480c      	ldr	r0, [pc, #48]	; (8024744 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8024714:	f7ff fed5 	bl	80244c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8024718:	4603      	mov	r3, r0
 802471a:	2b00      	cmp	r3, #0
 802471c:	d007      	beq.n	802472e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 802471e:	4a0a      	ldr	r2, [pc, #40]	; (8024748 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8024720:	687b      	ldr	r3, [r7, #4]
 8024722:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8024724:	2108      	movs	r1, #8
 8024726:	4807      	ldr	r0, [pc, #28]	; (8024744 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8024728:	f7ff fe77 	bl	802441a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 802472c:	e006      	b.n	802473c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8024732:	2108      	movs	r1, #8
 8024734:	4803      	ldr	r0, [pc, #12]	; (8024744 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8024736:	f7ff feb5 	bl	80244a4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 802473a:	bf00      	nop
}
 802473c:	3708      	adds	r7, #8
 802473e:	46bd      	mov	sp, r7
 8024740:	bd80      	pop	{r7, pc}
 8024742:	bf00      	nop
 8024744:	58000c00 	.word	0x58000c00
 8024748:	2000a938 	.word	0x2000a938

0802474c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 802474c:	b580      	push	{r7, lr}
 802474e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8024750:	2108      	movs	r1, #8
 8024752:	4806      	ldr	r0, [pc, #24]	; (802476c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8024754:	f7ff fe74 	bl	8024440 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8024758:	4b05      	ldr	r3, [pc, #20]	; (8024770 <HW_IPCC_MM_FreeBufHandler+0x24>)
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 802475e:	2108      	movs	r1, #8
 8024760:	4802      	ldr	r0, [pc, #8]	; (802476c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8024762:	f7ff fe9f 	bl	80244a4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8024766:	bf00      	nop
}
 8024768:	bd80      	pop	{r7, pc}
 802476a:	bf00      	nop
 802476c:	58000c00 	.word	0x58000c00
 8024770:	2000a938 	.word	0x2000a938

08024774 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8024774:	b580      	push	{r7, lr}
 8024776:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8024778:	2108      	movs	r1, #8
 802477a:	4802      	ldr	r0, [pc, #8]	; (8024784 <HW_IPCC_TRACES_Init+0x10>)
 802477c:	f7ff fe72 	bl	8024464 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8024780:	bf00      	nop
}
 8024782:	bd80      	pop	{r7, pc}
 8024784:	58000c00 	.word	0x58000c00

08024788 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8024788:	b580      	push	{r7, lr}
 802478a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 802478c:	f7fe f880 	bl	8022890 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8024790:	2108      	movs	r1, #8
 8024792:	4802      	ldr	r0, [pc, #8]	; (802479c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8024794:	f7ff fe78 	bl	8024488 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8024798:	bf00      	nop
}
 802479a:	bd80      	pop	{r7, pc}
 802479c:	58000c00 	.word	0x58000c00

080247a0 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 80247a4:	f000 f808 	bl	80247b8 <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80247a8:	bf00      	nop
 80247aa:	bd80      	pop	{r7, pc}

080247ac <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80247ac:	b580      	push	{r7, lr}
 80247ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 80247b0:	f000 f866 	bl	8024880 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80247b4:	bf00      	nop
 80247b6:	bd80      	pop	{r7, pc}

080247b8 <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 80247b8:	b580      	push	{r7, lr}
 80247ba:	b082      	sub	sp, #8
 80247bc:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80247be:	2000      	movs	r0, #0
 80247c0:	f7f4 ff18 	bl	80195f4 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 80247c4:	482a      	ldr	r0, [pc, #168]	; (8024870 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 80247c6:	f001 fc4b 	bl	8026060 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80247ca:	2300      	movs	r3, #0
 80247cc:	71fb      	strb	r3, [r7, #7]
 80247ce:	e007      	b.n	80247e0 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80247d0:	79fb      	ldrb	r3, [r7, #7]
 80247d2:	2101      	movs	r1, #1
 80247d4:	4618      	mov	r0, r3
 80247d6:	f7e1 fa25 	bl	8005c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80247da:	79fb      	ldrb	r3, [r7, #7]
 80247dc:	3301      	adds	r3, #1
 80247de:	71fb      	strb	r3, [r7, #7]
 80247e0:	79fb      	ldrb	r3, [r7, #7]
 80247e2:	2b02      	cmp	r3, #2
 80247e4:	d9f4      	bls.n	80247d0 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80247e6:	2300      	movs	r3, #0
 80247e8:	71fb      	strb	r3, [r7, #7]
 80247ea:	e039      	b.n	8024860 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 80247ec:	79fb      	ldrb	r3, [r7, #7]
 80247ee:	2100      	movs	r1, #0
 80247f0:	4618      	mov	r0, r3
 80247f2:	f7e1 fa17 	bl	8005c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 80247f6:	79fb      	ldrb	r3, [r7, #7]
 80247f8:	4618      	mov	r0, r3
 80247fa:	f7e1 f8ff 	bl	80059fc <VL53L1A2_RANGING_SENSOR_Init>
 80247fe:	4603      	mov	r3, r0
 8024800:	4a1c      	ldr	r2, [pc, #112]	; (8024874 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8024802:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8024804:	4b1b      	ldr	r3, [pc, #108]	; (8024874 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8024806:	681b      	ldr	r3, [r3, #0]
 8024808:	2b00      	cmp	r3, #0
 802480a:	bf0c      	ite	eq
 802480c:	2301      	moveq	r3, #1
 802480e:	2300      	movne	r3, #0
 8024810:	b2da      	uxtb	r2, r3
 8024812:	79fb      	ldrb	r3, [r7, #7]
 8024814:	4611      	mov	r1, r2
 8024816:	4a18      	ldr	r2, [pc, #96]	; (8024878 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8024818:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 802481a:	79fb      	ldrb	r3, [r7, #7]
 802481c:	4a16      	ldr	r2, [pc, #88]	; (8024878 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 802481e:	5cd3      	ldrb	r3, [r2, r3]
 8024820:	2b00      	cmp	r3, #0
 8024822:	d019      	beq.n	8024858 <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 8024824:	79fb      	ldrb	r3, [r7, #7]
 8024826:	3301      	adds	r3, #1
 8024828:	b29b      	uxth	r3, r3
 802482a:	3329      	adds	r3, #41	; 0x29
 802482c:	b29b      	uxth	r3, r3
 802482e:	005b      	lsls	r3, r3, #1
 8024830:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8024832:	79fb      	ldrb	r3, [r7, #7]
 8024834:	88ba      	ldrh	r2, [r7, #4]
 8024836:	4611      	mov	r1, r2
 8024838:	4618      	mov	r0, r3
 802483a:	f7e1 f9cb 	bl	8005bd4 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 802483e:	79fb      	ldrb	r3, [r7, #7]
 8024840:	463a      	mov	r2, r7
 8024842:	4611      	mov	r1, r2
 8024844:	4618      	mov	r0, r3
 8024846:	f7e1 f8ff 	bl	8005a48 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 802484a:	79fb      	ldrb	r3, [r7, #7]
 802484c:	683a      	ldr	r2, [r7, #0]
 802484e:	4619      	mov	r1, r3
 8024850:	480a      	ldr	r0, [pc, #40]	; (802487c <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 8024852:	f001 fb69 	bl	8025f28 <iprintf>
 8024856:	e000      	b.n	802485a <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8024858:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 802485a:	79fb      	ldrb	r3, [r7, #7]
 802485c:	3301      	adds	r3, #1
 802485e:	71fb      	strb	r3, [r7, #7]
 8024860:	79fb      	ldrb	r3, [r7, #7]
 8024862:	2b02      	cmp	r3, #2
 8024864:	d9c2      	bls.n	80247ec <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 8024866:	bf00      	nop
 8024868:	bf00      	nop
 802486a:	3708      	adds	r7, #8
 802486c:	46bd      	mov	sp, r7
 802486e:	bd80      	pop	{r7, pc}
 8024870:	0802a05c 	.word	0x0802a05c
 8024874:	2000a93c 	.word	0x2000a93c
 8024878:	2000a940 	.word	0x2000a940
 802487c:	0802a08c 	.word	0x0802a08c

08024880 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b082      	sub	sp, #8
 8024884:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8024886:	4b3d      	ldr	r3, [pc, #244]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 8024888:	2202      	movs	r2, #2
 802488a:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 802488c:	4b3b      	ldr	r3, [pc, #236]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 802488e:	221e      	movs	r2, #30
 8024890:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 8024892:	4b3a      	ldr	r3, [pc, #232]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 8024894:	2200      	movs	r2, #0
 8024896:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8024898:	4b38      	ldr	r3, [pc, #224]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 802489a:	2200      	movs	r2, #0
 802489c:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 802489e:	4b37      	ldr	r3, [pc, #220]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 80248a0:	2200      	movs	r2, #0
 80248a2:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80248a4:	2300      	movs	r3, #0
 80248a6:	71fb      	strb	r3, [r7, #7]
 80248a8:	e01d      	b.n	80248e6 <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 80248aa:	79fb      	ldrb	r3, [r7, #7]
 80248ac:	4a34      	ldr	r2, [pc, #208]	; (8024980 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 80248ae:	5cd3      	ldrb	r3, [r2, r3]
 80248b0:	2b01      	cmp	r3, #1
 80248b2:	d114      	bne.n	80248de <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 80248b4:	79fb      	ldrb	r3, [r7, #7]
 80248b6:	4931      	ldr	r1, [pc, #196]	; (802497c <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 80248b8:	4618      	mov	r0, r3
 80248ba:	f7e1 f8ed 	bl	8005a98 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 80248be:	79fb      	ldrb	r3, [r7, #7]
 80248c0:	2101      	movs	r1, #1
 80248c2:	4618      	mov	r0, r3
 80248c4:	f7e1 f938 	bl	8005b38 <VL53L1A2_RANGING_SENSOR_Start>
 80248c8:	4603      	mov	r3, r0
 80248ca:	4a2e      	ldr	r2, [pc, #184]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 80248cc:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 80248ce:	4b2d      	ldr	r3, [pc, #180]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 80248d0:	681b      	ldr	r3, [r3, #0]
 80248d2:	2b00      	cmp	r3, #0
 80248d4:	d004      	beq.n	80248e0 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 80248d6:	482c      	ldr	r0, [pc, #176]	; (8024988 <MX_53L1A2_MultiSensorRanging_Process+0x108>)
 80248d8:	f001 fbc2 	bl	8026060 <puts>
      while(1);
 80248dc:	e7fe      	b.n	80248dc <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 80248de:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80248e0:	79fb      	ldrb	r3, [r7, #7]
 80248e2:	3301      	adds	r3, #1
 80248e4:	71fb      	strb	r3, [r7, #7]
 80248e6:	79fb      	ldrb	r3, [r7, #7]
 80248e8:	2b02      	cmp	r3, #2
 80248ea:	d9de      	bls.n	80248aa <MX_53L1A2_MultiSensorRanging_Process+0x2a>
    }
  }

  int k = 0 ;
 80248ec:	2300      	movs	r3, #0
 80248ee:	603b      	str	r3, [r7, #0]
    while (k < 4)
 80248f0:	e02a      	b.n	8024948 <MX_53L1A2_MultiSensorRanging_Process+0xc8>
    {
      /* polling mode */
      for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80248f2:	2300      	movs	r3, #0
 80248f4:	71fb      	strb	r3, [r7, #7]
 80248f6:	e01e      	b.n	8024936 <MX_53L1A2_MultiSensorRanging_Process+0xb6>
      {
        status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 80248f8:	79fb      	ldrb	r3, [r7, #7]
 80248fa:	4924      	ldr	r1, [pc, #144]	; (802498c <MX_53L1A2_MultiSensorRanging_Process+0x10c>)
 80248fc:	4618      	mov	r0, r3
 80248fe:	f7e1 f8f3 	bl	8005ae8 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8024902:	4603      	mov	r3, r0
 8024904:	4a1f      	ldr	r2, [pc, #124]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 8024906:	6013      	str	r3, [r2, #0]

        if (status == BSP_ERROR_NONE)
 8024908:	4b1e      	ldr	r3, [pc, #120]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	2b00      	cmp	r3, #0
 802490e:	d10f      	bne.n	8024930 <MX_53L1A2_MultiSensorRanging_Process+0xb0>
        {
          printf("%s\t - ", TofDevStr[i]);
 8024910:	79fb      	ldrb	r3, [r7, #7]
 8024912:	4a1f      	ldr	r2, [pc, #124]	; (8024990 <MX_53L1A2_MultiSensorRanging_Process+0x110>)
 8024914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024918:	4619      	mov	r1, r3
 802491a:	481e      	ldr	r0, [pc, #120]	; (8024994 <MX_53L1A2_MultiSensorRanging_Process+0x114>)
 802491c:	f001 fb04 	bl	8025f28 <iprintf>
          print_result(i,&Result);
 8024920:	79fb      	ldrb	r3, [r7, #7]
 8024922:	491a      	ldr	r1, [pc, #104]	; (802498c <MX_53L1A2_MultiSensorRanging_Process+0x10c>)
 8024924:	4618      	mov	r0, r3
 8024926:	f000 f837 	bl	8024998 <print_result>
          HAL_Delay(POLLING_PERIOD);
 802492a:	20fa      	movs	r0, #250	; 0xfa
 802492c:	f7dc ff4e 	bl	80017cc <HAL_Delay>
      for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8024930:	79fb      	ldrb	r3, [r7, #7]
 8024932:	3301      	adds	r3, #1
 8024934:	71fb      	strb	r3, [r7, #7]
 8024936:	79fb      	ldrb	r3, [r7, #7]
 8024938:	2b02      	cmp	r3, #2
 802493a:	d9dd      	bls.n	80248f8 <MX_53L1A2_MultiSensorRanging_Process+0x78>
        }
      }
      printf ("\n");
 802493c:	200a      	movs	r0, #10
 802493e:	f001 fb0b 	bl	8025f58 <putchar>
      k++;
 8024942:	683b      	ldr	r3, [r7, #0]
 8024944:	3301      	adds	r3, #1
 8024946:	603b      	str	r3, [r7, #0]
    while (k < 4)
 8024948:	683b      	ldr	r3, [r7, #0]
 802494a:	2b03      	cmp	r3, #3
 802494c:	ddd1      	ble.n	80248f2 <MX_53L1A2_MultiSensorRanging_Process+0x72>
    }
    status = VL53L1A2_RANGING_SENSOR_Stop(0);
 802494e:	2000      	movs	r0, #0
 8024950:	f7e1 f91a 	bl	8005b88 <VL53L1A2_RANGING_SENSOR_Stop>
 8024954:	4603      	mov	r3, r0
 8024956:	4a0b      	ldr	r2, [pc, #44]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 8024958:	6013      	str	r3, [r2, #0]
    status = VL53L1A2_RANGING_SENSOR_Stop(1);
 802495a:	2001      	movs	r0, #1
 802495c:	f7e1 f914 	bl	8005b88 <VL53L1A2_RANGING_SENSOR_Stop>
 8024960:	4603      	mov	r3, r0
 8024962:	4a08      	ldr	r2, [pc, #32]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 8024964:	6013      	str	r3, [r2, #0]
    status = VL53L1A2_RANGING_SENSOR_Stop(2);
 8024966:	2002      	movs	r0, #2
 8024968:	f7e1 f90e 	bl	8005b88 <VL53L1A2_RANGING_SENSOR_Stop>
 802496c:	4603      	mov	r3, r0
 802496e:	4a05      	ldr	r2, [pc, #20]	; (8024984 <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 8024970:	6013      	str	r3, [r2, #0]
}
 8024972:	bf00      	nop
 8024974:	3708      	adds	r7, #8
 8024976:	46bd      	mov	sp, r7
 8024978:	bd80      	pop	{r7, pc}
 802497a:	bf00      	nop
 802497c:	2000a944 	.word	0x2000a944
 8024980:	2000a940 	.word	0x2000a940
 8024984:	2000a93c 	.word	0x2000a93c
 8024988:	0802a0a8 	.word	0x0802a0a8
 802498c:	2000a958 	.word	0x2000a958
 8024990:	200000a4 	.word	0x200000a4
 8024994:	0802a0d0 	.word	0x0802a0d0

08024998 <print_result>:

static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result)
{
 8024998:	b580      	push	{r7, lr}
 802499a:	b084      	sub	sp, #16
 802499c:	af00      	add	r7, sp, #0
 802499e:	6078      	str	r0, [r7, #4]
 80249a0:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80249a2:	2300      	movs	r3, #0
 80249a4:	73fb      	strb	r3, [r7, #15]
 80249a6:	e054      	b.n	8024a52 <print_result+0xba>
  {
	  //JN
	  if((long)Result->ZoneResult[i].Distance[0] > 10 && (long)Result->ZoneResult[i].Distance[0] < 100){
 80249a8:	7bfa      	ldrb	r2, [r7, #15]
 80249aa:	6839      	ldr	r1, [r7, #0]
 80249ac:	4613      	mov	r3, r2
 80249ae:	011b      	lsls	r3, r3, #4
 80249b0:	4413      	add	r3, r2
 80249b2:	009b      	lsls	r3, r3, #2
 80249b4:	440b      	add	r3, r1
 80249b6:	3308      	adds	r3, #8
 80249b8:	681b      	ldr	r3, [r3, #0]
 80249ba:	2b0a      	cmp	r3, #10
 80249bc:	dd32      	ble.n	8024a24 <print_result+0x8c>
 80249be:	7bfa      	ldrb	r2, [r7, #15]
 80249c0:	6839      	ldr	r1, [r7, #0]
 80249c2:	4613      	mov	r3, r2
 80249c4:	011b      	lsls	r3, r3, #4
 80249c6:	4413      	add	r3, r2
 80249c8:	009b      	lsls	r3, r3, #2
 80249ca:	440b      	add	r3, r1
 80249cc:	3308      	adds	r3, #8
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	2b63      	cmp	r3, #99	; 0x63
 80249d2:	dc27      	bgt.n	8024a24 <print_result+0x8c>
		if(Instance == 0){
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d109      	bne.n	80249ee <print_result+0x56>
			printf ("Bottle in left position\n");
 80249da:	4823      	ldr	r0, [pc, #140]	; (8024a68 <print_result+0xd0>)
 80249dc:	f001 fb40 	bl	8026060 <puts>
			if(LeftPos != 2){ LeftPos = 1; }
 80249e0:	4b22      	ldr	r3, [pc, #136]	; (8024a6c <print_result+0xd4>)
 80249e2:	681b      	ldr	r3, [r3, #0]
 80249e4:	2b02      	cmp	r3, #2
 80249e6:	d002      	beq.n	80249ee <print_result+0x56>
 80249e8:	4b20      	ldr	r3, [pc, #128]	; (8024a6c <print_result+0xd4>)
 80249ea:	2201      	movs	r2, #1
 80249ec:	601a      	str	r2, [r3, #0]
		}
		if(Instance == 1){
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	2b01      	cmp	r3, #1
 80249f2:	d109      	bne.n	8024a08 <print_result+0x70>
			printf ("Bottle in center position\n");
 80249f4:	481e      	ldr	r0, [pc, #120]	; (8024a70 <print_result+0xd8>)
 80249f6:	f001 fb33 	bl	8026060 <puts>
			if(CenterPos != 2){ CenterPos = 1; }
 80249fa:	4b1e      	ldr	r3, [pc, #120]	; (8024a74 <print_result+0xdc>)
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	2b02      	cmp	r3, #2
 8024a00:	d002      	beq.n	8024a08 <print_result+0x70>
 8024a02:	4b1c      	ldr	r3, [pc, #112]	; (8024a74 <print_result+0xdc>)
 8024a04:	2201      	movs	r2, #1
 8024a06:	601a      	str	r2, [r3, #0]
		}
		if(Instance == 2){
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	2b02      	cmp	r3, #2
 8024a0c:	d11d      	bne.n	8024a4a <print_result+0xb2>
			printf ("Bottle in right position\n");
 8024a0e:	481a      	ldr	r0, [pc, #104]	; (8024a78 <print_result+0xe0>)
 8024a10:	f001 fb26 	bl	8026060 <puts>
			if(RightPos != 2){ RightPos = 1; }
 8024a14:	4b19      	ldr	r3, [pc, #100]	; (8024a7c <print_result+0xe4>)
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	2b02      	cmp	r3, #2
 8024a1a:	d016      	beq.n	8024a4a <print_result+0xb2>
 8024a1c:	4b17      	ldr	r3, [pc, #92]	; (8024a7c <print_result+0xe4>)
 8024a1e:	2201      	movs	r2, #1
 8024a20:	601a      	str	r2, [r3, #0]
		if(Instance == 2){
 8024a22:	e012      	b.n	8024a4a <print_result+0xb2>
		}
	 } else {
		 if(Instance == 0){ LeftPos = 0; }
 8024a24:	687b      	ldr	r3, [r7, #4]
 8024a26:	2b00      	cmp	r3, #0
 8024a28:	d102      	bne.n	8024a30 <print_result+0x98>
 8024a2a:	4b10      	ldr	r3, [pc, #64]	; (8024a6c <print_result+0xd4>)
 8024a2c:	2200      	movs	r2, #0
 8024a2e:	601a      	str	r2, [r3, #0]
		 if(Instance == 1){CenterPos = 0; }
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	2b01      	cmp	r3, #1
 8024a34:	d102      	bne.n	8024a3c <print_result+0xa4>
 8024a36:	4b0f      	ldr	r3, [pc, #60]	; (8024a74 <print_result+0xdc>)
 8024a38:	2200      	movs	r2, #0
 8024a3a:	601a      	str	r2, [r3, #0]
		 if(Instance == 2){ RightPos = 0; }
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	2b02      	cmp	r3, #2
 8024a40:	d104      	bne.n	8024a4c <print_result+0xb4>
 8024a42:	4b0e      	ldr	r3, [pc, #56]	; (8024a7c <print_result+0xe4>)
 8024a44:	2200      	movs	r2, #0
 8024a46:	601a      	str	r2, [r3, #0]
 8024a48:	e000      	b.n	8024a4c <print_result+0xb4>
		if(Instance == 2){
 8024a4a:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8024a4c:	7bfb      	ldrb	r3, [r7, #15]
 8024a4e:	3301      	adds	r3, #1
 8024a50:	73fb      	strb	r3, [r7, #15]
 8024a52:	7bfb      	ldrb	r3, [r7, #15]
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d0a7      	beq.n	80249a8 <print_result+0x10>
	 }
  }
  printf ("\n");
 8024a58:	200a      	movs	r0, #10
 8024a5a:	f001 fa7d 	bl	8025f58 <putchar>
}
 8024a5e:	bf00      	nop
 8024a60:	3710      	adds	r7, #16
 8024a62:	46bd      	mov	sp, r7
 8024a64:	bd80      	pop	{r7, pc}
 8024a66:	bf00      	nop
 8024a68:	0802a0d8 	.word	0x0802a0d8
 8024a6c:	20000cac 	.word	0x20000cac
 8024a70:	0802a0f0 	.word	0x0802a0f0
 8024a74:	20000cb4 	.word	0x20000cb4
 8024a78:	0802a10c 	.word	0x0802a10c
 8024a7c:	20000cb0 	.word	0x20000cb0

08024a80 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8024a80:	b480      	push	{r7}
 8024a82:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8024a84:	4b05      	ldr	r3, [pc, #20]	; (8024a9c <UTIL_LPM_Init+0x1c>)
 8024a86:	2200      	movs	r2, #0
 8024a88:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8024a8a:	4b05      	ldr	r3, [pc, #20]	; (8024aa0 <UTIL_LPM_Init+0x20>)
 8024a8c:	2200      	movs	r2, #0
 8024a8e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8024a90:	bf00      	nop
 8024a92:	46bd      	mov	sp, r7
 8024a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a98:	4770      	bx	lr
 8024a9a:	bf00      	nop
 8024a9c:	2000a9a0 	.word	0x2000a9a0
 8024aa0:	2000a9a4 	.word	0x2000a9a4

08024aa4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8024aa4:	b480      	push	{r7}
 8024aa6:	b087      	sub	sp, #28
 8024aa8:	af00      	add	r7, sp, #0
 8024aaa:	6078      	str	r0, [r7, #4]
 8024aac:	460b      	mov	r3, r1
 8024aae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8024ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8024ab6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8024ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024aba:	b672      	cpsid	i
}
 8024abc:	bf00      	nop
  
  switch(state)
 8024abe:	78fb      	ldrb	r3, [r7, #3]
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	d008      	beq.n	8024ad6 <UTIL_LPM_SetOffMode+0x32>
 8024ac4:	2b01      	cmp	r3, #1
 8024ac6:	d10e      	bne.n	8024ae6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8024ac8:	4b0d      	ldr	r3, [pc, #52]	; (8024b00 <UTIL_LPM_SetOffMode+0x5c>)
 8024aca:	681a      	ldr	r2, [r3, #0]
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	4313      	orrs	r3, r2
 8024ad0:	4a0b      	ldr	r2, [pc, #44]	; (8024b00 <UTIL_LPM_SetOffMode+0x5c>)
 8024ad2:	6013      	str	r3, [r2, #0]
      break;
 8024ad4:	e008      	b.n	8024ae8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8024ad6:	687b      	ldr	r3, [r7, #4]
 8024ad8:	43da      	mvns	r2, r3
 8024ada:	4b09      	ldr	r3, [pc, #36]	; (8024b00 <UTIL_LPM_SetOffMode+0x5c>)
 8024adc:	681b      	ldr	r3, [r3, #0]
 8024ade:	4013      	ands	r3, r2
 8024ae0:	4a07      	ldr	r2, [pc, #28]	; (8024b00 <UTIL_LPM_SetOffMode+0x5c>)
 8024ae2:	6013      	str	r3, [r2, #0]
      break;
 8024ae4:	e000      	b.n	8024ae8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8024ae6:	bf00      	nop
 8024ae8:	697b      	ldr	r3, [r7, #20]
 8024aea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024aec:	68fb      	ldr	r3, [r7, #12]
 8024aee:	f383 8810 	msr	PRIMASK, r3
}
 8024af2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8024af4:	bf00      	nop
 8024af6:	371c      	adds	r7, #28
 8024af8:	46bd      	mov	sp, r7
 8024afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024afe:	4770      	bx	lr
 8024b00:	2000a9a4 	.word	0x2000a9a4

08024b04 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8024b04:	b580      	push	{r7, lr}
 8024b06:	b090      	sub	sp, #64	; 0x40
 8024b08:	af00      	add	r7, sp, #0
 8024b0a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8024b0c:	4b73      	ldr	r3, [pc, #460]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8024b12:	4b72      	ldr	r3, [pc, #456]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024b14:	681a      	ldr	r2, [r3, #0]
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	4013      	ands	r3, r2
 8024b1a:	4a70      	ldr	r2, [pc, #448]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024b1c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8024b1e:	4b70      	ldr	r3, [pc, #448]	; (8024ce0 <UTIL_SEQ_Run+0x1dc>)
 8024b20:	681b      	ldr	r3, [r3, #0]
 8024b22:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8024b24:	4b6f      	ldr	r3, [pc, #444]	; (8024ce4 <UTIL_SEQ_Run+0x1e0>)
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8024b2a:	4b6f      	ldr	r3, [pc, #444]	; (8024ce8 <UTIL_SEQ_Run+0x1e4>)
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8024b30:	4b6e      	ldr	r3, [pc, #440]	; (8024cec <UTIL_SEQ_Run+0x1e8>)
 8024b32:	681b      	ldr	r3, [r3, #0]
 8024b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8024b36:	e08d      	b.n	8024c54 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8024b38:	2300      	movs	r3, #0
 8024b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8024b3c:	e002      	b.n	8024b44 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8024b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b40:	3301      	adds	r3, #1
 8024b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8024b44:	4a6a      	ldr	r2, [pc, #424]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8024b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b4e:	401a      	ands	r2, r3
 8024b50:	4b62      	ldr	r3, [pc, #392]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	4013      	ands	r3, r2
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d0f1      	beq.n	8024b3e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8024b5a:	4a65      	ldr	r2, [pc, #404]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b5e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8024b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b64:	401a      	ands	r2, r3
 8024b66:	4b5d      	ldr	r3, [pc, #372]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024b68:	681b      	ldr	r3, [r3, #0]
 8024b6a:	4013      	ands	r3, r2
 8024b6c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8024b6e:	4a60      	ldr	r2, [pc, #384]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b72:	00db      	lsls	r3, r3, #3
 8024b74:	4413      	add	r3, r2
 8024b76:	685a      	ldr	r2, [r3, #4]
 8024b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b7a:	4013      	ands	r3, r2
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d106      	bne.n	8024b8e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8024b80:	4a5b      	ldr	r2, [pc, #364]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b84:	00db      	lsls	r3, r3, #3
 8024b86:	4413      	add	r3, r2
 8024b88:	f04f 32ff 	mov.w	r2, #4294967295
 8024b8c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8024b8e:	4a58      	ldr	r2, [pc, #352]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b92:	00db      	lsls	r3, r3, #3
 8024b94:	4413      	add	r3, r2
 8024b96:	685a      	ldr	r2, [r3, #4]
 8024b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b9a:	4013      	ands	r3, r2
 8024b9c:	4618      	mov	r0, r3
 8024b9e:	f000 f9b3 	bl	8024f08 <SEQ_BitPosition>
 8024ba2:	4603      	mov	r3, r0
 8024ba4:	461a      	mov	r2, r3
 8024ba6:	4b53      	ldr	r3, [pc, #332]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024ba8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8024baa:	4a51      	ldr	r2, [pc, #324]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bae:	00db      	lsls	r3, r3, #3
 8024bb0:	4413      	add	r3, r2
 8024bb2:	685a      	ldr	r2, [r3, #4]
 8024bb4:	4b4f      	ldr	r3, [pc, #316]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024bb6:	681b      	ldr	r3, [r3, #0]
 8024bb8:	2101      	movs	r1, #1
 8024bba:	fa01 f303 	lsl.w	r3, r1, r3
 8024bbe:	43db      	mvns	r3, r3
 8024bc0:	401a      	ands	r2, r3
 8024bc2:	494b      	ldr	r1, [pc, #300]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bc6:	00db      	lsls	r3, r3, #3
 8024bc8:	440b      	add	r3, r1
 8024bca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8024bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8024bd2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8024bd6:	b672      	cpsid	i
}
 8024bd8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8024bda:	4b46      	ldr	r3, [pc, #280]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	2201      	movs	r2, #1
 8024be0:	fa02 f303 	lsl.w	r3, r2, r3
 8024be4:	43da      	mvns	r2, r3
 8024be6:	4b3e      	ldr	r3, [pc, #248]	; (8024ce0 <UTIL_SEQ_Run+0x1dc>)
 8024be8:	681b      	ldr	r3, [r3, #0]
 8024bea:	4013      	ands	r3, r2
 8024bec:	4a3c      	ldr	r2, [pc, #240]	; (8024ce0 <UTIL_SEQ_Run+0x1dc>)
 8024bee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8024bf0:	2302      	movs	r3, #2
 8024bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024bf4:	e013      	b.n	8024c1e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8024bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bf8:	3b01      	subs	r3, #1
 8024bfa:	4a3d      	ldr	r2, [pc, #244]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024bfc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8024c00:	4b3c      	ldr	r3, [pc, #240]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	2201      	movs	r2, #1
 8024c06:	fa02 f303 	lsl.w	r3, r2, r3
 8024c0a:	43da      	mvns	r2, r3
 8024c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c0e:	3b01      	subs	r3, #1
 8024c10:	400a      	ands	r2, r1
 8024c12:	4937      	ldr	r1, [pc, #220]	; (8024cf0 <UTIL_SEQ_Run+0x1ec>)
 8024c14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8024c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c1a:	3b01      	subs	r3, #1
 8024c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	d1e8      	bne.n	8024bf6 <UTIL_SEQ_Run+0xf2>
 8024c24:	6a3b      	ldr	r3, [r7, #32]
 8024c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024c28:	697b      	ldr	r3, [r7, #20]
 8024c2a:	f383 8810 	msr	PRIMASK, r3
}
 8024c2e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8024c30:	4b30      	ldr	r3, [pc, #192]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024c32:	681b      	ldr	r3, [r3, #0]
 8024c34:	4a30      	ldr	r2, [pc, #192]	; (8024cf8 <UTIL_SEQ_Run+0x1f4>)
 8024c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024c3a:	4798      	blx	r3

    local_taskset = TaskSet;
 8024c3c:	4b28      	ldr	r3, [pc, #160]	; (8024ce0 <UTIL_SEQ_Run+0x1dc>)
 8024c3e:	681b      	ldr	r3, [r3, #0]
 8024c40:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8024c42:	4b28      	ldr	r3, [pc, #160]	; (8024ce4 <UTIL_SEQ_Run+0x1e0>)
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8024c48:	4b27      	ldr	r3, [pc, #156]	; (8024ce8 <UTIL_SEQ_Run+0x1e4>)
 8024c4a:	681b      	ldr	r3, [r3, #0]
 8024c4c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8024c4e:	4b27      	ldr	r3, [pc, #156]	; (8024cec <UTIL_SEQ_Run+0x1e8>)
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8024c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c58:	401a      	ands	r2, r3
 8024c5a:	4b20      	ldr	r3, [pc, #128]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024c5c:	681b      	ldr	r3, [r3, #0]
 8024c5e:	4013      	ands	r3, r2
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	d005      	beq.n	8024c70 <UTIL_SEQ_Run+0x16c>
 8024c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c68:	4013      	ands	r3, r2
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	f43f af64 	beq.w	8024b38 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8024c70:	4b20      	ldr	r3, [pc, #128]	; (8024cf4 <UTIL_SEQ_Run+0x1f0>)
 8024c72:	f04f 32ff 	mov.w	r2, #4294967295
 8024c76:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8024c78:	f000 f938 	bl	8024eec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8024c80:	613b      	str	r3, [r7, #16]
  return(result);
 8024c82:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8024c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8024c86:	b672      	cpsid	i
}
 8024c88:	bf00      	nop
  local_taskset = TaskSet;
 8024c8a:	4b15      	ldr	r3, [pc, #84]	; (8024ce0 <UTIL_SEQ_Run+0x1dc>)
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8024c90:	4b14      	ldr	r3, [pc, #80]	; (8024ce4 <UTIL_SEQ_Run+0x1e0>)
 8024c92:	681b      	ldr	r3, [r3, #0]
 8024c94:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8024c96:	4b14      	ldr	r3, [pc, #80]	; (8024ce8 <UTIL_SEQ_Run+0x1e4>)
 8024c98:	681b      	ldr	r3, [r3, #0]
 8024c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8024c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ca0:	401a      	ands	r2, r3
 8024ca2:	4b0e      	ldr	r3, [pc, #56]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	4013      	ands	r3, r2
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	d107      	bne.n	8024cbc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8024cac:	4b0f      	ldr	r3, [pc, #60]	; (8024cec <UTIL_SEQ_Run+0x1e8>)
 8024cae:	681a      	ldr	r2, [r3, #0]
 8024cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024cb2:	4013      	ands	r3, r2
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	d101      	bne.n	8024cbc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8024cb8:	f7dc fdb5 	bl	8001826 <UTIL_SEQ_Idle>
 8024cbc:	69fb      	ldr	r3, [r7, #28]
 8024cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024cc0:	68fb      	ldr	r3, [r7, #12]
 8024cc2:	f383 8810 	msr	PRIMASK, r3
}
 8024cc6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8024cc8:	f000 f917 	bl	8024efa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8024ccc:	4a03      	ldr	r2, [pc, #12]	; (8024cdc <UTIL_SEQ_Run+0x1d8>)
 8024cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024cd0:	6013      	str	r3, [r2, #0]

  return;
 8024cd2:	bf00      	nop
}
 8024cd4:	3740      	adds	r7, #64	; 0x40
 8024cd6:	46bd      	mov	sp, r7
 8024cd8:	bd80      	pop	{r7, pc}
 8024cda:	bf00      	nop
 8024cdc:	200000b4 	.word	0x200000b4
 8024ce0:	2000a9a8 	.word	0x2000a9a8
 8024ce4:	2000a9ac 	.word	0x2000a9ac
 8024ce8:	200000b0 	.word	0x200000b0
 8024cec:	2000a9b0 	.word	0x2000a9b0
 8024cf0:	2000aa38 	.word	0x2000aa38
 8024cf4:	2000a9b4 	.word	0x2000a9b4
 8024cf8:	2000a9b8 	.word	0x2000a9b8

08024cfc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8024cfc:	b580      	push	{r7, lr}
 8024cfe:	b088      	sub	sp, #32
 8024d00:	af00      	add	r7, sp, #0
 8024d02:	60f8      	str	r0, [r7, #12]
 8024d04:	60b9      	str	r1, [r7, #8]
 8024d06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024d08:	f3ef 8310 	mrs	r3, PRIMASK
 8024d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8024d0e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8024d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8024d12:	b672      	cpsid	i
}
 8024d14:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8024d16:	68f8      	ldr	r0, [r7, #12]
 8024d18:	f000 f8f6 	bl	8024f08 <SEQ_BitPosition>
 8024d1c:	4603      	mov	r3, r0
 8024d1e:	4619      	mov	r1, r3
 8024d20:	4a06      	ldr	r2, [pc, #24]	; (8024d3c <UTIL_SEQ_RegTask+0x40>)
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8024d28:	69fb      	ldr	r3, [r7, #28]
 8024d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024d2c:	69bb      	ldr	r3, [r7, #24]
 8024d2e:	f383 8810 	msr	PRIMASK, r3
}
 8024d32:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8024d34:	bf00      	nop
}
 8024d36:	3720      	adds	r7, #32
 8024d38:	46bd      	mov	sp, r7
 8024d3a:	bd80      	pop	{r7, pc}
 8024d3c:	2000a9b8 	.word	0x2000a9b8

08024d40 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8024d40:	b480      	push	{r7}
 8024d42:	b087      	sub	sp, #28
 8024d44:	af00      	add	r7, sp, #0
 8024d46:	6078      	str	r0, [r7, #4]
 8024d48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8024d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8024d50:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024d54:	b672      	cpsid	i
}
 8024d56:	bf00      	nop

  TaskSet |= TaskId_bm;
 8024d58:	4b0d      	ldr	r3, [pc, #52]	; (8024d90 <UTIL_SEQ_SetTask+0x50>)
 8024d5a:	681a      	ldr	r2, [r3, #0]
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	4313      	orrs	r3, r2
 8024d60:	4a0b      	ldr	r2, [pc, #44]	; (8024d90 <UTIL_SEQ_SetTask+0x50>)
 8024d62:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8024d64:	4a0b      	ldr	r2, [pc, #44]	; (8024d94 <UTIL_SEQ_SetTask+0x54>)
 8024d66:	683b      	ldr	r3, [r7, #0]
 8024d68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	431a      	orrs	r2, r3
 8024d70:	4908      	ldr	r1, [pc, #32]	; (8024d94 <UTIL_SEQ_SetTask+0x54>)
 8024d72:	683b      	ldr	r3, [r7, #0]
 8024d74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8024d78:	697b      	ldr	r3, [r7, #20]
 8024d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024d7c:	693b      	ldr	r3, [r7, #16]
 8024d7e:	f383 8810 	msr	PRIMASK, r3
}
 8024d82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8024d84:	bf00      	nop
}
 8024d86:	371c      	adds	r7, #28
 8024d88:	46bd      	mov	sp, r7
 8024d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d8e:	4770      	bx	lr
 8024d90:	2000a9a8 	.word	0x2000a9a8
 8024d94:	2000aa38 	.word	0x2000aa38

08024d98 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8024d98:	b480      	push	{r7}
 8024d9a:	b087      	sub	sp, #28
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024da0:	f3ef 8310 	mrs	r3, PRIMASK
 8024da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8024da6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024daa:	b672      	cpsid	i
}
 8024dac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	43da      	mvns	r2, r3
 8024db2:	4b08      	ldr	r3, [pc, #32]	; (8024dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	4013      	ands	r3, r2
 8024db8:	4a06      	ldr	r2, [pc, #24]	; (8024dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8024dba:	6013      	str	r3, [r2, #0]
 8024dbc:	697b      	ldr	r3, [r7, #20]
 8024dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024dc0:	693b      	ldr	r3, [r7, #16]
 8024dc2:	f383 8810 	msr	PRIMASK, r3
}
 8024dc6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8024dc8:	bf00      	nop
}
 8024dca:	371c      	adds	r7, #28
 8024dcc:	46bd      	mov	sp, r7
 8024dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd2:	4770      	bx	lr
 8024dd4:	200000b0 	.word	0x200000b0

08024dd8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8024dd8:	b480      	push	{r7}
 8024dda:	b087      	sub	sp, #28
 8024ddc:	af00      	add	r7, sp, #0
 8024dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024de0:	f3ef 8310 	mrs	r3, PRIMASK
 8024de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8024de6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024dea:	b672      	cpsid	i
}
 8024dec:	bf00      	nop

  TaskMask |= TaskId_bm;
 8024dee:	4b09      	ldr	r3, [pc, #36]	; (8024e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8024df0:	681a      	ldr	r2, [r3, #0]
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	4313      	orrs	r3, r2
 8024df6:	4a07      	ldr	r2, [pc, #28]	; (8024e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8024df8:	6013      	str	r3, [r2, #0]
 8024dfa:	697b      	ldr	r3, [r7, #20]
 8024dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024dfe:	693b      	ldr	r3, [r7, #16]
 8024e00:	f383 8810 	msr	PRIMASK, r3
}
 8024e04:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8024e06:	bf00      	nop
}
 8024e08:	371c      	adds	r7, #28
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e10:	4770      	bx	lr
 8024e12:	bf00      	nop
 8024e14:	200000b0 	.word	0x200000b0

08024e18 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8024e18:	b480      	push	{r7}
 8024e1a:	b087      	sub	sp, #28
 8024e1c:	af00      	add	r7, sp, #0
 8024e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024e20:	f3ef 8310 	mrs	r3, PRIMASK
 8024e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8024e26:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024e2a:	b672      	cpsid	i
}
 8024e2c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8024e2e:	4b09      	ldr	r3, [pc, #36]	; (8024e54 <UTIL_SEQ_SetEvt+0x3c>)
 8024e30:	681a      	ldr	r2, [r3, #0]
 8024e32:	687b      	ldr	r3, [r7, #4]
 8024e34:	4313      	orrs	r3, r2
 8024e36:	4a07      	ldr	r2, [pc, #28]	; (8024e54 <UTIL_SEQ_SetEvt+0x3c>)
 8024e38:	6013      	str	r3, [r2, #0]
 8024e3a:	697b      	ldr	r3, [r7, #20]
 8024e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024e3e:	693b      	ldr	r3, [r7, #16]
 8024e40:	f383 8810 	msr	PRIMASK, r3
}
 8024e44:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8024e46:	bf00      	nop
}
 8024e48:	371c      	adds	r7, #28
 8024e4a:	46bd      	mov	sp, r7
 8024e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e50:	4770      	bx	lr
 8024e52:	bf00      	nop
 8024e54:	2000a9ac 	.word	0x2000a9ac

08024e58 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8024e58:	b580      	push	{r7, lr}
 8024e5a:	b088      	sub	sp, #32
 8024e5c:	af00      	add	r7, sp, #0
 8024e5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8024e60:	4b1f      	ldr	r3, [pc, #124]	; (8024ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8024e62:	681b      	ldr	r3, [r3, #0]
 8024e64:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8024e66:	4b1e      	ldr	r3, [pc, #120]	; (8024ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8024e68:	681b      	ldr	r3, [r3, #0]
 8024e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e6e:	d102      	bne.n	8024e76 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8024e70:	2300      	movs	r3, #0
 8024e72:	61fb      	str	r3, [r7, #28]
 8024e74:	e005      	b.n	8024e82 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8024e76:	4b1a      	ldr	r3, [pc, #104]	; (8024ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8024e78:	681b      	ldr	r3, [r3, #0]
 8024e7a:	2201      	movs	r2, #1
 8024e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8024e80:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8024e82:	4b18      	ldr	r3, [pc, #96]	; (8024ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8024e84:	681b      	ldr	r3, [r3, #0]
 8024e86:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8024e88:	4a16      	ldr	r2, [pc, #88]	; (8024ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8024e8a:	687b      	ldr	r3, [r7, #4]
 8024e8c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8024e8e:	e003      	b.n	8024e98 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8024e90:	6879      	ldr	r1, [r7, #4]
 8024e92:	69f8      	ldr	r0, [r7, #28]
 8024e94:	f7dc fcce 	bl	8001834 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8024e98:	4b13      	ldr	r3, [pc, #76]	; (8024ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8024e9a:	681a      	ldr	r2, [r3, #0]
 8024e9c:	687b      	ldr	r3, [r7, #4]
 8024e9e:	4013      	ands	r3, r2
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	d0f5      	beq.n	8024e90 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8024ea4:	4a0e      	ldr	r2, [pc, #56]	; (8024ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8024ea6:	69bb      	ldr	r3, [r7, #24]
 8024ea8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8024eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8024eb0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8024eb4:	b672      	cpsid	i
}
 8024eb6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	43da      	mvns	r2, r3
 8024ebc:	4b0a      	ldr	r3, [pc, #40]	; (8024ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8024ebe:	681b      	ldr	r3, [r3, #0]
 8024ec0:	4013      	ands	r3, r2
 8024ec2:	4a09      	ldr	r2, [pc, #36]	; (8024ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8024ec4:	6013      	str	r3, [r2, #0]
 8024ec6:	693b      	ldr	r3, [r7, #16]
 8024ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024eca:	68fb      	ldr	r3, [r7, #12]
 8024ecc:	f383 8810 	msr	PRIMASK, r3
}
 8024ed0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8024ed2:	4a04      	ldr	r2, [pc, #16]	; (8024ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8024ed4:	697b      	ldr	r3, [r7, #20]
 8024ed6:	6013      	str	r3, [r2, #0]
  return;
 8024ed8:	bf00      	nop
}
 8024eda:	3720      	adds	r7, #32
 8024edc:	46bd      	mov	sp, r7
 8024ede:	bd80      	pop	{r7, pc}
 8024ee0:	2000a9b4 	.word	0x2000a9b4
 8024ee4:	2000a9b0 	.word	0x2000a9b0
 8024ee8:	2000a9ac 	.word	0x2000a9ac

08024eec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8024eec:	b480      	push	{r7}
 8024eee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8024ef0:	bf00      	nop
}
 8024ef2:	46bd      	mov	sp, r7
 8024ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ef8:	4770      	bx	lr

08024efa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8024efa:	b480      	push	{r7}
 8024efc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8024efe:	bf00      	nop
}
 8024f00:	46bd      	mov	sp, r7
 8024f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f06:	4770      	bx	lr

08024f08 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8024f08:	b480      	push	{r7}
 8024f0a:	b085      	sub	sp, #20
 8024f0c:	af00      	add	r7, sp, #0
 8024f0e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8024f10:	2300      	movs	r3, #0
 8024f12:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8024f18:	68bb      	ldr	r3, [r7, #8]
 8024f1a:	0c1b      	lsrs	r3, r3, #16
 8024f1c:	041b      	lsls	r3, r3, #16
 8024f1e:	2b00      	cmp	r3, #0
 8024f20:	d104      	bne.n	8024f2c <SEQ_BitPosition+0x24>
 8024f22:	2310      	movs	r3, #16
 8024f24:	73fb      	strb	r3, [r7, #15]
 8024f26:	68bb      	ldr	r3, [r7, #8]
 8024f28:	041b      	lsls	r3, r3, #16
 8024f2a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8024f2c:	68bb      	ldr	r3, [r7, #8]
 8024f2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	d105      	bne.n	8024f42 <SEQ_BitPosition+0x3a>
 8024f36:	7bfb      	ldrb	r3, [r7, #15]
 8024f38:	3308      	adds	r3, #8
 8024f3a:	73fb      	strb	r3, [r7, #15]
 8024f3c:	68bb      	ldr	r3, [r7, #8]
 8024f3e:	021b      	lsls	r3, r3, #8
 8024f40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8024f42:	68bb      	ldr	r3, [r7, #8]
 8024f44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	d105      	bne.n	8024f58 <SEQ_BitPosition+0x50>
 8024f4c:	7bfb      	ldrb	r3, [r7, #15]
 8024f4e:	3304      	adds	r3, #4
 8024f50:	73fb      	strb	r3, [r7, #15]
 8024f52:	68bb      	ldr	r3, [r7, #8]
 8024f54:	011b      	lsls	r3, r3, #4
 8024f56:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8024f58:	68bb      	ldr	r3, [r7, #8]
 8024f5a:	0f1b      	lsrs	r3, r3, #28
 8024f5c:	4a07      	ldr	r2, [pc, #28]	; (8024f7c <SEQ_BitPosition+0x74>)
 8024f5e:	5cd2      	ldrb	r2, [r2, r3]
 8024f60:	7bfb      	ldrb	r3, [r7, #15]
 8024f62:	4413      	add	r3, r2
 8024f64:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8024f66:	7bfb      	ldrb	r3, [r7, #15]
 8024f68:	f1c3 031f 	rsb	r3, r3, #31
 8024f6c:	b2db      	uxtb	r3, r3
}
 8024f6e:	4618      	mov	r0, r3
 8024f70:	3714      	adds	r7, #20
 8024f72:	46bd      	mov	sp, r7
 8024f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f78:	4770      	bx	lr
 8024f7a:	bf00      	nop
 8024f7c:	0802a438 	.word	0x0802a438

08024f80 <__errno>:
 8024f80:	4b01      	ldr	r3, [pc, #4]	; (8024f88 <__errno+0x8>)
 8024f82:	6818      	ldr	r0, [r3, #0]
 8024f84:	4770      	bx	lr
 8024f86:	bf00      	nop
 8024f88:	200000b8 	.word	0x200000b8

08024f8c <__sflush_r>:
 8024f8c:	898a      	ldrh	r2, [r1, #12]
 8024f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f92:	4605      	mov	r5, r0
 8024f94:	0710      	lsls	r0, r2, #28
 8024f96:	460c      	mov	r4, r1
 8024f98:	d458      	bmi.n	802504c <__sflush_r+0xc0>
 8024f9a:	684b      	ldr	r3, [r1, #4]
 8024f9c:	2b00      	cmp	r3, #0
 8024f9e:	dc05      	bgt.n	8024fac <__sflush_r+0x20>
 8024fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024fa2:	2b00      	cmp	r3, #0
 8024fa4:	dc02      	bgt.n	8024fac <__sflush_r+0x20>
 8024fa6:	2000      	movs	r0, #0
 8024fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024fae:	2e00      	cmp	r6, #0
 8024fb0:	d0f9      	beq.n	8024fa6 <__sflush_r+0x1a>
 8024fb2:	2300      	movs	r3, #0
 8024fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024fb8:	682f      	ldr	r7, [r5, #0]
 8024fba:	602b      	str	r3, [r5, #0]
 8024fbc:	d032      	beq.n	8025024 <__sflush_r+0x98>
 8024fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024fc0:	89a3      	ldrh	r3, [r4, #12]
 8024fc2:	075a      	lsls	r2, r3, #29
 8024fc4:	d505      	bpl.n	8024fd2 <__sflush_r+0x46>
 8024fc6:	6863      	ldr	r3, [r4, #4]
 8024fc8:	1ac0      	subs	r0, r0, r3
 8024fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024fcc:	b10b      	cbz	r3, 8024fd2 <__sflush_r+0x46>
 8024fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024fd0:	1ac0      	subs	r0, r0, r3
 8024fd2:	2300      	movs	r3, #0
 8024fd4:	4602      	mov	r2, r0
 8024fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024fd8:	6a21      	ldr	r1, [r4, #32]
 8024fda:	4628      	mov	r0, r5
 8024fdc:	47b0      	blx	r6
 8024fde:	1c43      	adds	r3, r0, #1
 8024fe0:	89a3      	ldrh	r3, [r4, #12]
 8024fe2:	d106      	bne.n	8024ff2 <__sflush_r+0x66>
 8024fe4:	6829      	ldr	r1, [r5, #0]
 8024fe6:	291d      	cmp	r1, #29
 8024fe8:	d82c      	bhi.n	8025044 <__sflush_r+0xb8>
 8024fea:	4a2a      	ldr	r2, [pc, #168]	; (8025094 <__sflush_r+0x108>)
 8024fec:	40ca      	lsrs	r2, r1
 8024fee:	07d6      	lsls	r6, r2, #31
 8024ff0:	d528      	bpl.n	8025044 <__sflush_r+0xb8>
 8024ff2:	2200      	movs	r2, #0
 8024ff4:	6062      	str	r2, [r4, #4]
 8024ff6:	04d9      	lsls	r1, r3, #19
 8024ff8:	6922      	ldr	r2, [r4, #16]
 8024ffa:	6022      	str	r2, [r4, #0]
 8024ffc:	d504      	bpl.n	8025008 <__sflush_r+0x7c>
 8024ffe:	1c42      	adds	r2, r0, #1
 8025000:	d101      	bne.n	8025006 <__sflush_r+0x7a>
 8025002:	682b      	ldr	r3, [r5, #0]
 8025004:	b903      	cbnz	r3, 8025008 <__sflush_r+0x7c>
 8025006:	6560      	str	r0, [r4, #84]	; 0x54
 8025008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802500a:	602f      	str	r7, [r5, #0]
 802500c:	2900      	cmp	r1, #0
 802500e:	d0ca      	beq.n	8024fa6 <__sflush_r+0x1a>
 8025010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025014:	4299      	cmp	r1, r3
 8025016:	d002      	beq.n	802501e <__sflush_r+0x92>
 8025018:	4628      	mov	r0, r5
 802501a:	f000 fa3b 	bl	8025494 <_free_r>
 802501e:	2000      	movs	r0, #0
 8025020:	6360      	str	r0, [r4, #52]	; 0x34
 8025022:	e7c1      	b.n	8024fa8 <__sflush_r+0x1c>
 8025024:	6a21      	ldr	r1, [r4, #32]
 8025026:	2301      	movs	r3, #1
 8025028:	4628      	mov	r0, r5
 802502a:	47b0      	blx	r6
 802502c:	1c41      	adds	r1, r0, #1
 802502e:	d1c7      	bne.n	8024fc0 <__sflush_r+0x34>
 8025030:	682b      	ldr	r3, [r5, #0]
 8025032:	2b00      	cmp	r3, #0
 8025034:	d0c4      	beq.n	8024fc0 <__sflush_r+0x34>
 8025036:	2b1d      	cmp	r3, #29
 8025038:	d001      	beq.n	802503e <__sflush_r+0xb2>
 802503a:	2b16      	cmp	r3, #22
 802503c:	d101      	bne.n	8025042 <__sflush_r+0xb6>
 802503e:	602f      	str	r7, [r5, #0]
 8025040:	e7b1      	b.n	8024fa6 <__sflush_r+0x1a>
 8025042:	89a3      	ldrh	r3, [r4, #12]
 8025044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025048:	81a3      	strh	r3, [r4, #12]
 802504a:	e7ad      	b.n	8024fa8 <__sflush_r+0x1c>
 802504c:	690f      	ldr	r7, [r1, #16]
 802504e:	2f00      	cmp	r7, #0
 8025050:	d0a9      	beq.n	8024fa6 <__sflush_r+0x1a>
 8025052:	0793      	lsls	r3, r2, #30
 8025054:	680e      	ldr	r6, [r1, #0]
 8025056:	bf08      	it	eq
 8025058:	694b      	ldreq	r3, [r1, #20]
 802505a:	600f      	str	r7, [r1, #0]
 802505c:	bf18      	it	ne
 802505e:	2300      	movne	r3, #0
 8025060:	eba6 0807 	sub.w	r8, r6, r7
 8025064:	608b      	str	r3, [r1, #8]
 8025066:	f1b8 0f00 	cmp.w	r8, #0
 802506a:	dd9c      	ble.n	8024fa6 <__sflush_r+0x1a>
 802506c:	6a21      	ldr	r1, [r4, #32]
 802506e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025070:	4643      	mov	r3, r8
 8025072:	463a      	mov	r2, r7
 8025074:	4628      	mov	r0, r5
 8025076:	47b0      	blx	r6
 8025078:	2800      	cmp	r0, #0
 802507a:	dc06      	bgt.n	802508a <__sflush_r+0xfe>
 802507c:	89a3      	ldrh	r3, [r4, #12]
 802507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025082:	81a3      	strh	r3, [r4, #12]
 8025084:	f04f 30ff 	mov.w	r0, #4294967295
 8025088:	e78e      	b.n	8024fa8 <__sflush_r+0x1c>
 802508a:	4407      	add	r7, r0
 802508c:	eba8 0800 	sub.w	r8, r8, r0
 8025090:	e7e9      	b.n	8025066 <__sflush_r+0xda>
 8025092:	bf00      	nop
 8025094:	20400001 	.word	0x20400001

08025098 <_fflush_r>:
 8025098:	b538      	push	{r3, r4, r5, lr}
 802509a:	690b      	ldr	r3, [r1, #16]
 802509c:	4605      	mov	r5, r0
 802509e:	460c      	mov	r4, r1
 80250a0:	b913      	cbnz	r3, 80250a8 <_fflush_r+0x10>
 80250a2:	2500      	movs	r5, #0
 80250a4:	4628      	mov	r0, r5
 80250a6:	bd38      	pop	{r3, r4, r5, pc}
 80250a8:	b118      	cbz	r0, 80250b2 <_fflush_r+0x1a>
 80250aa:	6983      	ldr	r3, [r0, #24]
 80250ac:	b90b      	cbnz	r3, 80250b2 <_fflush_r+0x1a>
 80250ae:	f000 f887 	bl	80251c0 <__sinit>
 80250b2:	4b14      	ldr	r3, [pc, #80]	; (8025104 <_fflush_r+0x6c>)
 80250b4:	429c      	cmp	r4, r3
 80250b6:	d11b      	bne.n	80250f0 <_fflush_r+0x58>
 80250b8:	686c      	ldr	r4, [r5, #4]
 80250ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80250be:	2b00      	cmp	r3, #0
 80250c0:	d0ef      	beq.n	80250a2 <_fflush_r+0xa>
 80250c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80250c4:	07d0      	lsls	r0, r2, #31
 80250c6:	d404      	bmi.n	80250d2 <_fflush_r+0x3a>
 80250c8:	0599      	lsls	r1, r3, #22
 80250ca:	d402      	bmi.n	80250d2 <_fflush_r+0x3a>
 80250cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80250ce:	f000 f93a 	bl	8025346 <__retarget_lock_acquire_recursive>
 80250d2:	4628      	mov	r0, r5
 80250d4:	4621      	mov	r1, r4
 80250d6:	f7ff ff59 	bl	8024f8c <__sflush_r>
 80250da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80250dc:	07da      	lsls	r2, r3, #31
 80250de:	4605      	mov	r5, r0
 80250e0:	d4e0      	bmi.n	80250a4 <_fflush_r+0xc>
 80250e2:	89a3      	ldrh	r3, [r4, #12]
 80250e4:	059b      	lsls	r3, r3, #22
 80250e6:	d4dd      	bmi.n	80250a4 <_fflush_r+0xc>
 80250e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80250ea:	f000 f92d 	bl	8025348 <__retarget_lock_release_recursive>
 80250ee:	e7d9      	b.n	80250a4 <_fflush_r+0xc>
 80250f0:	4b05      	ldr	r3, [pc, #20]	; (8025108 <_fflush_r+0x70>)
 80250f2:	429c      	cmp	r4, r3
 80250f4:	d101      	bne.n	80250fa <_fflush_r+0x62>
 80250f6:	68ac      	ldr	r4, [r5, #8]
 80250f8:	e7df      	b.n	80250ba <_fflush_r+0x22>
 80250fa:	4b04      	ldr	r3, [pc, #16]	; (802510c <_fflush_r+0x74>)
 80250fc:	429c      	cmp	r4, r3
 80250fe:	bf08      	it	eq
 8025100:	68ec      	ldreq	r4, [r5, #12]
 8025102:	e7da      	b.n	80250ba <_fflush_r+0x22>
 8025104:	0802a56c 	.word	0x0802a56c
 8025108:	0802a58c 	.word	0x0802a58c
 802510c:	0802a54c 	.word	0x0802a54c

08025110 <std>:
 8025110:	2300      	movs	r3, #0
 8025112:	b510      	push	{r4, lr}
 8025114:	4604      	mov	r4, r0
 8025116:	e9c0 3300 	strd	r3, r3, [r0]
 802511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802511e:	6083      	str	r3, [r0, #8]
 8025120:	8181      	strh	r1, [r0, #12]
 8025122:	6643      	str	r3, [r0, #100]	; 0x64
 8025124:	81c2      	strh	r2, [r0, #14]
 8025126:	6183      	str	r3, [r0, #24]
 8025128:	4619      	mov	r1, r3
 802512a:	2208      	movs	r2, #8
 802512c:	305c      	adds	r0, #92	; 0x5c
 802512e:	f000 f9a9 	bl	8025484 <memset>
 8025132:	4b05      	ldr	r3, [pc, #20]	; (8025148 <std+0x38>)
 8025134:	6263      	str	r3, [r4, #36]	; 0x24
 8025136:	4b05      	ldr	r3, [pc, #20]	; (802514c <std+0x3c>)
 8025138:	62a3      	str	r3, [r4, #40]	; 0x28
 802513a:	4b05      	ldr	r3, [pc, #20]	; (8025150 <std+0x40>)
 802513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802513e:	4b05      	ldr	r3, [pc, #20]	; (8025154 <std+0x44>)
 8025140:	6224      	str	r4, [r4, #32]
 8025142:	6323      	str	r3, [r4, #48]	; 0x30
 8025144:	bd10      	pop	{r4, pc}
 8025146:	bf00      	nop
 8025148:	080260d1 	.word	0x080260d1
 802514c:	080260f3 	.word	0x080260f3
 8025150:	0802612b 	.word	0x0802612b
 8025154:	0802614f 	.word	0x0802614f

08025158 <_cleanup_r>:
 8025158:	4901      	ldr	r1, [pc, #4]	; (8025160 <_cleanup_r+0x8>)
 802515a:	f000 b8af 	b.w	80252bc <_fwalk_reent>
 802515e:	bf00      	nop
 8025160:	08025099 	.word	0x08025099

08025164 <__sfmoreglue>:
 8025164:	b570      	push	{r4, r5, r6, lr}
 8025166:	2268      	movs	r2, #104	; 0x68
 8025168:	1e4d      	subs	r5, r1, #1
 802516a:	4355      	muls	r5, r2
 802516c:	460e      	mov	r6, r1
 802516e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025172:	f000 f9fb 	bl	802556c <_malloc_r>
 8025176:	4604      	mov	r4, r0
 8025178:	b140      	cbz	r0, 802518c <__sfmoreglue+0x28>
 802517a:	2100      	movs	r1, #0
 802517c:	e9c0 1600 	strd	r1, r6, [r0]
 8025180:	300c      	adds	r0, #12
 8025182:	60a0      	str	r0, [r4, #8]
 8025184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025188:	f000 f97c 	bl	8025484 <memset>
 802518c:	4620      	mov	r0, r4
 802518e:	bd70      	pop	{r4, r5, r6, pc}

08025190 <__sfp_lock_acquire>:
 8025190:	4801      	ldr	r0, [pc, #4]	; (8025198 <__sfp_lock_acquire+0x8>)
 8025192:	f000 b8d8 	b.w	8025346 <__retarget_lock_acquire_recursive>
 8025196:	bf00      	nop
 8025198:	2000aa49 	.word	0x2000aa49

0802519c <__sfp_lock_release>:
 802519c:	4801      	ldr	r0, [pc, #4]	; (80251a4 <__sfp_lock_release+0x8>)
 802519e:	f000 b8d3 	b.w	8025348 <__retarget_lock_release_recursive>
 80251a2:	bf00      	nop
 80251a4:	2000aa49 	.word	0x2000aa49

080251a8 <__sinit_lock_acquire>:
 80251a8:	4801      	ldr	r0, [pc, #4]	; (80251b0 <__sinit_lock_acquire+0x8>)
 80251aa:	f000 b8cc 	b.w	8025346 <__retarget_lock_acquire_recursive>
 80251ae:	bf00      	nop
 80251b0:	2000aa4a 	.word	0x2000aa4a

080251b4 <__sinit_lock_release>:
 80251b4:	4801      	ldr	r0, [pc, #4]	; (80251bc <__sinit_lock_release+0x8>)
 80251b6:	f000 b8c7 	b.w	8025348 <__retarget_lock_release_recursive>
 80251ba:	bf00      	nop
 80251bc:	2000aa4a 	.word	0x2000aa4a

080251c0 <__sinit>:
 80251c0:	b510      	push	{r4, lr}
 80251c2:	4604      	mov	r4, r0
 80251c4:	f7ff fff0 	bl	80251a8 <__sinit_lock_acquire>
 80251c8:	69a3      	ldr	r3, [r4, #24]
 80251ca:	b11b      	cbz	r3, 80251d4 <__sinit+0x14>
 80251cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251d0:	f7ff bff0 	b.w	80251b4 <__sinit_lock_release>
 80251d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80251d8:	6523      	str	r3, [r4, #80]	; 0x50
 80251da:	4b13      	ldr	r3, [pc, #76]	; (8025228 <__sinit+0x68>)
 80251dc:	4a13      	ldr	r2, [pc, #76]	; (802522c <__sinit+0x6c>)
 80251de:	681b      	ldr	r3, [r3, #0]
 80251e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80251e2:	42a3      	cmp	r3, r4
 80251e4:	bf04      	itt	eq
 80251e6:	2301      	moveq	r3, #1
 80251e8:	61a3      	streq	r3, [r4, #24]
 80251ea:	4620      	mov	r0, r4
 80251ec:	f000 f820 	bl	8025230 <__sfp>
 80251f0:	6060      	str	r0, [r4, #4]
 80251f2:	4620      	mov	r0, r4
 80251f4:	f000 f81c 	bl	8025230 <__sfp>
 80251f8:	60a0      	str	r0, [r4, #8]
 80251fa:	4620      	mov	r0, r4
 80251fc:	f000 f818 	bl	8025230 <__sfp>
 8025200:	2200      	movs	r2, #0
 8025202:	60e0      	str	r0, [r4, #12]
 8025204:	2104      	movs	r1, #4
 8025206:	6860      	ldr	r0, [r4, #4]
 8025208:	f7ff ff82 	bl	8025110 <std>
 802520c:	68a0      	ldr	r0, [r4, #8]
 802520e:	2201      	movs	r2, #1
 8025210:	2109      	movs	r1, #9
 8025212:	f7ff ff7d 	bl	8025110 <std>
 8025216:	68e0      	ldr	r0, [r4, #12]
 8025218:	2202      	movs	r2, #2
 802521a:	2112      	movs	r1, #18
 802521c:	f7ff ff78 	bl	8025110 <std>
 8025220:	2301      	movs	r3, #1
 8025222:	61a3      	str	r3, [r4, #24]
 8025224:	e7d2      	b.n	80251cc <__sinit+0xc>
 8025226:	bf00      	nop
 8025228:	0802a5ac 	.word	0x0802a5ac
 802522c:	08025159 	.word	0x08025159

08025230 <__sfp>:
 8025230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025232:	4607      	mov	r7, r0
 8025234:	f7ff ffac 	bl	8025190 <__sfp_lock_acquire>
 8025238:	4b1e      	ldr	r3, [pc, #120]	; (80252b4 <__sfp+0x84>)
 802523a:	681e      	ldr	r6, [r3, #0]
 802523c:	69b3      	ldr	r3, [r6, #24]
 802523e:	b913      	cbnz	r3, 8025246 <__sfp+0x16>
 8025240:	4630      	mov	r0, r6
 8025242:	f7ff ffbd 	bl	80251c0 <__sinit>
 8025246:	3648      	adds	r6, #72	; 0x48
 8025248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802524c:	3b01      	subs	r3, #1
 802524e:	d503      	bpl.n	8025258 <__sfp+0x28>
 8025250:	6833      	ldr	r3, [r6, #0]
 8025252:	b30b      	cbz	r3, 8025298 <__sfp+0x68>
 8025254:	6836      	ldr	r6, [r6, #0]
 8025256:	e7f7      	b.n	8025248 <__sfp+0x18>
 8025258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802525c:	b9d5      	cbnz	r5, 8025294 <__sfp+0x64>
 802525e:	4b16      	ldr	r3, [pc, #88]	; (80252b8 <__sfp+0x88>)
 8025260:	60e3      	str	r3, [r4, #12]
 8025262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025266:	6665      	str	r5, [r4, #100]	; 0x64
 8025268:	f000 f86c 	bl	8025344 <__retarget_lock_init_recursive>
 802526c:	f7ff ff96 	bl	802519c <__sfp_lock_release>
 8025270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025278:	6025      	str	r5, [r4, #0]
 802527a:	61a5      	str	r5, [r4, #24]
 802527c:	2208      	movs	r2, #8
 802527e:	4629      	mov	r1, r5
 8025280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025284:	f000 f8fe 	bl	8025484 <memset>
 8025288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802528c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025290:	4620      	mov	r0, r4
 8025292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025294:	3468      	adds	r4, #104	; 0x68
 8025296:	e7d9      	b.n	802524c <__sfp+0x1c>
 8025298:	2104      	movs	r1, #4
 802529a:	4638      	mov	r0, r7
 802529c:	f7ff ff62 	bl	8025164 <__sfmoreglue>
 80252a0:	4604      	mov	r4, r0
 80252a2:	6030      	str	r0, [r6, #0]
 80252a4:	2800      	cmp	r0, #0
 80252a6:	d1d5      	bne.n	8025254 <__sfp+0x24>
 80252a8:	f7ff ff78 	bl	802519c <__sfp_lock_release>
 80252ac:	230c      	movs	r3, #12
 80252ae:	603b      	str	r3, [r7, #0]
 80252b0:	e7ee      	b.n	8025290 <__sfp+0x60>
 80252b2:	bf00      	nop
 80252b4:	0802a5ac 	.word	0x0802a5ac
 80252b8:	ffff0001 	.word	0xffff0001

080252bc <_fwalk_reent>:
 80252bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80252c0:	4606      	mov	r6, r0
 80252c2:	4688      	mov	r8, r1
 80252c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80252c8:	2700      	movs	r7, #0
 80252ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80252ce:	f1b9 0901 	subs.w	r9, r9, #1
 80252d2:	d505      	bpl.n	80252e0 <_fwalk_reent+0x24>
 80252d4:	6824      	ldr	r4, [r4, #0]
 80252d6:	2c00      	cmp	r4, #0
 80252d8:	d1f7      	bne.n	80252ca <_fwalk_reent+0xe>
 80252da:	4638      	mov	r0, r7
 80252dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80252e0:	89ab      	ldrh	r3, [r5, #12]
 80252e2:	2b01      	cmp	r3, #1
 80252e4:	d907      	bls.n	80252f6 <_fwalk_reent+0x3a>
 80252e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80252ea:	3301      	adds	r3, #1
 80252ec:	d003      	beq.n	80252f6 <_fwalk_reent+0x3a>
 80252ee:	4629      	mov	r1, r5
 80252f0:	4630      	mov	r0, r6
 80252f2:	47c0      	blx	r8
 80252f4:	4307      	orrs	r7, r0
 80252f6:	3568      	adds	r5, #104	; 0x68
 80252f8:	e7e9      	b.n	80252ce <_fwalk_reent+0x12>
	...

080252fc <__libc_init_array>:
 80252fc:	b570      	push	{r4, r5, r6, lr}
 80252fe:	4d0d      	ldr	r5, [pc, #52]	; (8025334 <__libc_init_array+0x38>)
 8025300:	4c0d      	ldr	r4, [pc, #52]	; (8025338 <__libc_init_array+0x3c>)
 8025302:	1b64      	subs	r4, r4, r5
 8025304:	10a4      	asrs	r4, r4, #2
 8025306:	2600      	movs	r6, #0
 8025308:	42a6      	cmp	r6, r4
 802530a:	d109      	bne.n	8025320 <__libc_init_array+0x24>
 802530c:	4d0b      	ldr	r5, [pc, #44]	; (802533c <__libc_init_array+0x40>)
 802530e:	4c0c      	ldr	r4, [pc, #48]	; (8025340 <__libc_init_array+0x44>)
 8025310:	f002 febc 	bl	802808c <_init>
 8025314:	1b64      	subs	r4, r4, r5
 8025316:	10a4      	asrs	r4, r4, #2
 8025318:	2600      	movs	r6, #0
 802531a:	42a6      	cmp	r6, r4
 802531c:	d105      	bne.n	802532a <__libc_init_array+0x2e>
 802531e:	bd70      	pop	{r4, r5, r6, pc}
 8025320:	f855 3b04 	ldr.w	r3, [r5], #4
 8025324:	4798      	blx	r3
 8025326:	3601      	adds	r6, #1
 8025328:	e7ee      	b.n	8025308 <__libc_init_array+0xc>
 802532a:	f855 3b04 	ldr.w	r3, [r5], #4
 802532e:	4798      	blx	r3
 8025330:	3601      	adds	r6, #1
 8025332:	e7f2      	b.n	802531a <__libc_init_array+0x1e>
 8025334:	0802a834 	.word	0x0802a834
 8025338:	0802a834 	.word	0x0802a834
 802533c:	0802a834 	.word	0x0802a834
 8025340:	0802a838 	.word	0x0802a838

08025344 <__retarget_lock_init_recursive>:
 8025344:	4770      	bx	lr

08025346 <__retarget_lock_acquire_recursive>:
 8025346:	4770      	bx	lr

08025348 <__retarget_lock_release_recursive>:
 8025348:	4770      	bx	lr

0802534a <__swhatbuf_r>:
 802534a:	b570      	push	{r4, r5, r6, lr}
 802534c:	460e      	mov	r6, r1
 802534e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025352:	2900      	cmp	r1, #0
 8025354:	b096      	sub	sp, #88	; 0x58
 8025356:	4614      	mov	r4, r2
 8025358:	461d      	mov	r5, r3
 802535a:	da08      	bge.n	802536e <__swhatbuf_r+0x24>
 802535c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025360:	2200      	movs	r2, #0
 8025362:	602a      	str	r2, [r5, #0]
 8025364:	061a      	lsls	r2, r3, #24
 8025366:	d410      	bmi.n	802538a <__swhatbuf_r+0x40>
 8025368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802536c:	e00e      	b.n	802538c <__swhatbuf_r+0x42>
 802536e:	466a      	mov	r2, sp
 8025370:	f001 fecc 	bl	802710c <_fstat_r>
 8025374:	2800      	cmp	r0, #0
 8025376:	dbf1      	blt.n	802535c <__swhatbuf_r+0x12>
 8025378:	9a01      	ldr	r2, [sp, #4]
 802537a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802537e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025382:	425a      	negs	r2, r3
 8025384:	415a      	adcs	r2, r3
 8025386:	602a      	str	r2, [r5, #0]
 8025388:	e7ee      	b.n	8025368 <__swhatbuf_r+0x1e>
 802538a:	2340      	movs	r3, #64	; 0x40
 802538c:	2000      	movs	r0, #0
 802538e:	6023      	str	r3, [r4, #0]
 8025390:	b016      	add	sp, #88	; 0x58
 8025392:	bd70      	pop	{r4, r5, r6, pc}

08025394 <__smakebuf_r>:
 8025394:	898b      	ldrh	r3, [r1, #12]
 8025396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025398:	079d      	lsls	r5, r3, #30
 802539a:	4606      	mov	r6, r0
 802539c:	460c      	mov	r4, r1
 802539e:	d507      	bpl.n	80253b0 <__smakebuf_r+0x1c>
 80253a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80253a4:	6023      	str	r3, [r4, #0]
 80253a6:	6123      	str	r3, [r4, #16]
 80253a8:	2301      	movs	r3, #1
 80253aa:	6163      	str	r3, [r4, #20]
 80253ac:	b002      	add	sp, #8
 80253ae:	bd70      	pop	{r4, r5, r6, pc}
 80253b0:	ab01      	add	r3, sp, #4
 80253b2:	466a      	mov	r2, sp
 80253b4:	f7ff ffc9 	bl	802534a <__swhatbuf_r>
 80253b8:	9900      	ldr	r1, [sp, #0]
 80253ba:	4605      	mov	r5, r0
 80253bc:	4630      	mov	r0, r6
 80253be:	f000 f8d5 	bl	802556c <_malloc_r>
 80253c2:	b948      	cbnz	r0, 80253d8 <__smakebuf_r+0x44>
 80253c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80253c8:	059a      	lsls	r2, r3, #22
 80253ca:	d4ef      	bmi.n	80253ac <__smakebuf_r+0x18>
 80253cc:	f023 0303 	bic.w	r3, r3, #3
 80253d0:	f043 0302 	orr.w	r3, r3, #2
 80253d4:	81a3      	strh	r3, [r4, #12]
 80253d6:	e7e3      	b.n	80253a0 <__smakebuf_r+0xc>
 80253d8:	4b0d      	ldr	r3, [pc, #52]	; (8025410 <__smakebuf_r+0x7c>)
 80253da:	62b3      	str	r3, [r6, #40]	; 0x28
 80253dc:	89a3      	ldrh	r3, [r4, #12]
 80253de:	6020      	str	r0, [r4, #0]
 80253e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80253e4:	81a3      	strh	r3, [r4, #12]
 80253e6:	9b00      	ldr	r3, [sp, #0]
 80253e8:	6163      	str	r3, [r4, #20]
 80253ea:	9b01      	ldr	r3, [sp, #4]
 80253ec:	6120      	str	r0, [r4, #16]
 80253ee:	b15b      	cbz	r3, 8025408 <__smakebuf_r+0x74>
 80253f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80253f4:	4630      	mov	r0, r6
 80253f6:	f001 fe9b 	bl	8027130 <_isatty_r>
 80253fa:	b128      	cbz	r0, 8025408 <__smakebuf_r+0x74>
 80253fc:	89a3      	ldrh	r3, [r4, #12]
 80253fe:	f023 0303 	bic.w	r3, r3, #3
 8025402:	f043 0301 	orr.w	r3, r3, #1
 8025406:	81a3      	strh	r3, [r4, #12]
 8025408:	89a0      	ldrh	r0, [r4, #12]
 802540a:	4305      	orrs	r5, r0
 802540c:	81a5      	strh	r5, [r4, #12]
 802540e:	e7cd      	b.n	80253ac <__smakebuf_r+0x18>
 8025410:	08025159 	.word	0x08025159

08025414 <malloc>:
 8025414:	4b02      	ldr	r3, [pc, #8]	; (8025420 <malloc+0xc>)
 8025416:	4601      	mov	r1, r0
 8025418:	6818      	ldr	r0, [r3, #0]
 802541a:	f000 b8a7 	b.w	802556c <_malloc_r>
 802541e:	bf00      	nop
 8025420:	200000b8 	.word	0x200000b8

08025424 <free>:
 8025424:	4b02      	ldr	r3, [pc, #8]	; (8025430 <free+0xc>)
 8025426:	4601      	mov	r1, r0
 8025428:	6818      	ldr	r0, [r3, #0]
 802542a:	f000 b833 	b.w	8025494 <_free_r>
 802542e:	bf00      	nop
 8025430:	200000b8 	.word	0x200000b8

08025434 <memcpy>:
 8025434:	440a      	add	r2, r1
 8025436:	4291      	cmp	r1, r2
 8025438:	f100 33ff 	add.w	r3, r0, #4294967295
 802543c:	d100      	bne.n	8025440 <memcpy+0xc>
 802543e:	4770      	bx	lr
 8025440:	b510      	push	{r4, lr}
 8025442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025446:	f803 4f01 	strb.w	r4, [r3, #1]!
 802544a:	4291      	cmp	r1, r2
 802544c:	d1f9      	bne.n	8025442 <memcpy+0xe>
 802544e:	bd10      	pop	{r4, pc}

08025450 <memmove>:
 8025450:	4288      	cmp	r0, r1
 8025452:	b510      	push	{r4, lr}
 8025454:	eb01 0402 	add.w	r4, r1, r2
 8025458:	d902      	bls.n	8025460 <memmove+0x10>
 802545a:	4284      	cmp	r4, r0
 802545c:	4623      	mov	r3, r4
 802545e:	d807      	bhi.n	8025470 <memmove+0x20>
 8025460:	1e43      	subs	r3, r0, #1
 8025462:	42a1      	cmp	r1, r4
 8025464:	d008      	beq.n	8025478 <memmove+0x28>
 8025466:	f811 2b01 	ldrb.w	r2, [r1], #1
 802546a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802546e:	e7f8      	b.n	8025462 <memmove+0x12>
 8025470:	4402      	add	r2, r0
 8025472:	4601      	mov	r1, r0
 8025474:	428a      	cmp	r2, r1
 8025476:	d100      	bne.n	802547a <memmove+0x2a>
 8025478:	bd10      	pop	{r4, pc}
 802547a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802547e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025482:	e7f7      	b.n	8025474 <memmove+0x24>

08025484 <memset>:
 8025484:	4402      	add	r2, r0
 8025486:	4603      	mov	r3, r0
 8025488:	4293      	cmp	r3, r2
 802548a:	d100      	bne.n	802548e <memset+0xa>
 802548c:	4770      	bx	lr
 802548e:	f803 1b01 	strb.w	r1, [r3], #1
 8025492:	e7f9      	b.n	8025488 <memset+0x4>

08025494 <_free_r>:
 8025494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025496:	2900      	cmp	r1, #0
 8025498:	d044      	beq.n	8025524 <_free_r+0x90>
 802549a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802549e:	9001      	str	r0, [sp, #4]
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	f1a1 0404 	sub.w	r4, r1, #4
 80254a6:	bfb8      	it	lt
 80254a8:	18e4      	addlt	r4, r4, r3
 80254aa:	f001 fe79 	bl	80271a0 <__malloc_lock>
 80254ae:	4a1e      	ldr	r2, [pc, #120]	; (8025528 <_free_r+0x94>)
 80254b0:	9801      	ldr	r0, [sp, #4]
 80254b2:	6813      	ldr	r3, [r2, #0]
 80254b4:	b933      	cbnz	r3, 80254c4 <_free_r+0x30>
 80254b6:	6063      	str	r3, [r4, #4]
 80254b8:	6014      	str	r4, [r2, #0]
 80254ba:	b003      	add	sp, #12
 80254bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80254c0:	f001 be74 	b.w	80271ac <__malloc_unlock>
 80254c4:	42a3      	cmp	r3, r4
 80254c6:	d908      	bls.n	80254da <_free_r+0x46>
 80254c8:	6825      	ldr	r5, [r4, #0]
 80254ca:	1961      	adds	r1, r4, r5
 80254cc:	428b      	cmp	r3, r1
 80254ce:	bf01      	itttt	eq
 80254d0:	6819      	ldreq	r1, [r3, #0]
 80254d2:	685b      	ldreq	r3, [r3, #4]
 80254d4:	1949      	addeq	r1, r1, r5
 80254d6:	6021      	streq	r1, [r4, #0]
 80254d8:	e7ed      	b.n	80254b6 <_free_r+0x22>
 80254da:	461a      	mov	r2, r3
 80254dc:	685b      	ldr	r3, [r3, #4]
 80254de:	b10b      	cbz	r3, 80254e4 <_free_r+0x50>
 80254e0:	42a3      	cmp	r3, r4
 80254e2:	d9fa      	bls.n	80254da <_free_r+0x46>
 80254e4:	6811      	ldr	r1, [r2, #0]
 80254e6:	1855      	adds	r5, r2, r1
 80254e8:	42a5      	cmp	r5, r4
 80254ea:	d10b      	bne.n	8025504 <_free_r+0x70>
 80254ec:	6824      	ldr	r4, [r4, #0]
 80254ee:	4421      	add	r1, r4
 80254f0:	1854      	adds	r4, r2, r1
 80254f2:	42a3      	cmp	r3, r4
 80254f4:	6011      	str	r1, [r2, #0]
 80254f6:	d1e0      	bne.n	80254ba <_free_r+0x26>
 80254f8:	681c      	ldr	r4, [r3, #0]
 80254fa:	685b      	ldr	r3, [r3, #4]
 80254fc:	6053      	str	r3, [r2, #4]
 80254fe:	4421      	add	r1, r4
 8025500:	6011      	str	r1, [r2, #0]
 8025502:	e7da      	b.n	80254ba <_free_r+0x26>
 8025504:	d902      	bls.n	802550c <_free_r+0x78>
 8025506:	230c      	movs	r3, #12
 8025508:	6003      	str	r3, [r0, #0]
 802550a:	e7d6      	b.n	80254ba <_free_r+0x26>
 802550c:	6825      	ldr	r5, [r4, #0]
 802550e:	1961      	adds	r1, r4, r5
 8025510:	428b      	cmp	r3, r1
 8025512:	bf04      	itt	eq
 8025514:	6819      	ldreq	r1, [r3, #0]
 8025516:	685b      	ldreq	r3, [r3, #4]
 8025518:	6063      	str	r3, [r4, #4]
 802551a:	bf04      	itt	eq
 802551c:	1949      	addeq	r1, r1, r5
 802551e:	6021      	streq	r1, [r4, #0]
 8025520:	6054      	str	r4, [r2, #4]
 8025522:	e7ca      	b.n	80254ba <_free_r+0x26>
 8025524:	b003      	add	sp, #12
 8025526:	bd30      	pop	{r4, r5, pc}
 8025528:	2000aa4c 	.word	0x2000aa4c

0802552c <sbrk_aligned>:
 802552c:	b570      	push	{r4, r5, r6, lr}
 802552e:	4e0e      	ldr	r6, [pc, #56]	; (8025568 <sbrk_aligned+0x3c>)
 8025530:	460c      	mov	r4, r1
 8025532:	6831      	ldr	r1, [r6, #0]
 8025534:	4605      	mov	r5, r0
 8025536:	b911      	cbnz	r1, 802553e <sbrk_aligned+0x12>
 8025538:	f000 fd9a 	bl	8026070 <_sbrk_r>
 802553c:	6030      	str	r0, [r6, #0]
 802553e:	4621      	mov	r1, r4
 8025540:	4628      	mov	r0, r5
 8025542:	f000 fd95 	bl	8026070 <_sbrk_r>
 8025546:	1c43      	adds	r3, r0, #1
 8025548:	d00a      	beq.n	8025560 <sbrk_aligned+0x34>
 802554a:	1cc4      	adds	r4, r0, #3
 802554c:	f024 0403 	bic.w	r4, r4, #3
 8025550:	42a0      	cmp	r0, r4
 8025552:	d007      	beq.n	8025564 <sbrk_aligned+0x38>
 8025554:	1a21      	subs	r1, r4, r0
 8025556:	4628      	mov	r0, r5
 8025558:	f000 fd8a 	bl	8026070 <_sbrk_r>
 802555c:	3001      	adds	r0, #1
 802555e:	d101      	bne.n	8025564 <sbrk_aligned+0x38>
 8025560:	f04f 34ff 	mov.w	r4, #4294967295
 8025564:	4620      	mov	r0, r4
 8025566:	bd70      	pop	{r4, r5, r6, pc}
 8025568:	2000aa50 	.word	0x2000aa50

0802556c <_malloc_r>:
 802556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025570:	1ccd      	adds	r5, r1, #3
 8025572:	f025 0503 	bic.w	r5, r5, #3
 8025576:	3508      	adds	r5, #8
 8025578:	2d0c      	cmp	r5, #12
 802557a:	bf38      	it	cc
 802557c:	250c      	movcc	r5, #12
 802557e:	2d00      	cmp	r5, #0
 8025580:	4607      	mov	r7, r0
 8025582:	db01      	blt.n	8025588 <_malloc_r+0x1c>
 8025584:	42a9      	cmp	r1, r5
 8025586:	d905      	bls.n	8025594 <_malloc_r+0x28>
 8025588:	230c      	movs	r3, #12
 802558a:	603b      	str	r3, [r7, #0]
 802558c:	2600      	movs	r6, #0
 802558e:	4630      	mov	r0, r6
 8025590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025594:	4e2e      	ldr	r6, [pc, #184]	; (8025650 <_malloc_r+0xe4>)
 8025596:	f001 fe03 	bl	80271a0 <__malloc_lock>
 802559a:	6833      	ldr	r3, [r6, #0]
 802559c:	461c      	mov	r4, r3
 802559e:	bb34      	cbnz	r4, 80255ee <_malloc_r+0x82>
 80255a0:	4629      	mov	r1, r5
 80255a2:	4638      	mov	r0, r7
 80255a4:	f7ff ffc2 	bl	802552c <sbrk_aligned>
 80255a8:	1c43      	adds	r3, r0, #1
 80255aa:	4604      	mov	r4, r0
 80255ac:	d14d      	bne.n	802564a <_malloc_r+0xde>
 80255ae:	6834      	ldr	r4, [r6, #0]
 80255b0:	4626      	mov	r6, r4
 80255b2:	2e00      	cmp	r6, #0
 80255b4:	d140      	bne.n	8025638 <_malloc_r+0xcc>
 80255b6:	6823      	ldr	r3, [r4, #0]
 80255b8:	4631      	mov	r1, r6
 80255ba:	4638      	mov	r0, r7
 80255bc:	eb04 0803 	add.w	r8, r4, r3
 80255c0:	f000 fd56 	bl	8026070 <_sbrk_r>
 80255c4:	4580      	cmp	r8, r0
 80255c6:	d13a      	bne.n	802563e <_malloc_r+0xd2>
 80255c8:	6821      	ldr	r1, [r4, #0]
 80255ca:	3503      	adds	r5, #3
 80255cc:	1a6d      	subs	r5, r5, r1
 80255ce:	f025 0503 	bic.w	r5, r5, #3
 80255d2:	3508      	adds	r5, #8
 80255d4:	2d0c      	cmp	r5, #12
 80255d6:	bf38      	it	cc
 80255d8:	250c      	movcc	r5, #12
 80255da:	4629      	mov	r1, r5
 80255dc:	4638      	mov	r0, r7
 80255de:	f7ff ffa5 	bl	802552c <sbrk_aligned>
 80255e2:	3001      	adds	r0, #1
 80255e4:	d02b      	beq.n	802563e <_malloc_r+0xd2>
 80255e6:	6823      	ldr	r3, [r4, #0]
 80255e8:	442b      	add	r3, r5
 80255ea:	6023      	str	r3, [r4, #0]
 80255ec:	e00e      	b.n	802560c <_malloc_r+0xa0>
 80255ee:	6822      	ldr	r2, [r4, #0]
 80255f0:	1b52      	subs	r2, r2, r5
 80255f2:	d41e      	bmi.n	8025632 <_malloc_r+0xc6>
 80255f4:	2a0b      	cmp	r2, #11
 80255f6:	d916      	bls.n	8025626 <_malloc_r+0xba>
 80255f8:	1961      	adds	r1, r4, r5
 80255fa:	42a3      	cmp	r3, r4
 80255fc:	6025      	str	r5, [r4, #0]
 80255fe:	bf18      	it	ne
 8025600:	6059      	strne	r1, [r3, #4]
 8025602:	6863      	ldr	r3, [r4, #4]
 8025604:	bf08      	it	eq
 8025606:	6031      	streq	r1, [r6, #0]
 8025608:	5162      	str	r2, [r4, r5]
 802560a:	604b      	str	r3, [r1, #4]
 802560c:	4638      	mov	r0, r7
 802560e:	f104 060b 	add.w	r6, r4, #11
 8025612:	f001 fdcb 	bl	80271ac <__malloc_unlock>
 8025616:	f026 0607 	bic.w	r6, r6, #7
 802561a:	1d23      	adds	r3, r4, #4
 802561c:	1af2      	subs	r2, r6, r3
 802561e:	d0b6      	beq.n	802558e <_malloc_r+0x22>
 8025620:	1b9b      	subs	r3, r3, r6
 8025622:	50a3      	str	r3, [r4, r2]
 8025624:	e7b3      	b.n	802558e <_malloc_r+0x22>
 8025626:	6862      	ldr	r2, [r4, #4]
 8025628:	42a3      	cmp	r3, r4
 802562a:	bf0c      	ite	eq
 802562c:	6032      	streq	r2, [r6, #0]
 802562e:	605a      	strne	r2, [r3, #4]
 8025630:	e7ec      	b.n	802560c <_malloc_r+0xa0>
 8025632:	4623      	mov	r3, r4
 8025634:	6864      	ldr	r4, [r4, #4]
 8025636:	e7b2      	b.n	802559e <_malloc_r+0x32>
 8025638:	4634      	mov	r4, r6
 802563a:	6876      	ldr	r6, [r6, #4]
 802563c:	e7b9      	b.n	80255b2 <_malloc_r+0x46>
 802563e:	230c      	movs	r3, #12
 8025640:	603b      	str	r3, [r7, #0]
 8025642:	4638      	mov	r0, r7
 8025644:	f001 fdb2 	bl	80271ac <__malloc_unlock>
 8025648:	e7a1      	b.n	802558e <_malloc_r+0x22>
 802564a:	6025      	str	r5, [r4, #0]
 802564c:	e7de      	b.n	802560c <_malloc_r+0xa0>
 802564e:	bf00      	nop
 8025650:	2000aa4c 	.word	0x2000aa4c

08025654 <__cvt>:
 8025654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025658:	ec55 4b10 	vmov	r4, r5, d0
 802565c:	2d00      	cmp	r5, #0
 802565e:	460e      	mov	r6, r1
 8025660:	4619      	mov	r1, r3
 8025662:	462b      	mov	r3, r5
 8025664:	bfbb      	ittet	lt
 8025666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802566a:	461d      	movlt	r5, r3
 802566c:	2300      	movge	r3, #0
 802566e:	232d      	movlt	r3, #45	; 0x2d
 8025670:	700b      	strb	r3, [r1, #0]
 8025672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8025678:	4691      	mov	r9, r2
 802567a:	f023 0820 	bic.w	r8, r3, #32
 802567e:	bfbc      	itt	lt
 8025680:	4622      	movlt	r2, r4
 8025682:	4614      	movlt	r4, r2
 8025684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8025688:	d005      	beq.n	8025696 <__cvt+0x42>
 802568a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802568e:	d100      	bne.n	8025692 <__cvt+0x3e>
 8025690:	3601      	adds	r6, #1
 8025692:	2102      	movs	r1, #2
 8025694:	e000      	b.n	8025698 <__cvt+0x44>
 8025696:	2103      	movs	r1, #3
 8025698:	ab03      	add	r3, sp, #12
 802569a:	9301      	str	r3, [sp, #4]
 802569c:	ab02      	add	r3, sp, #8
 802569e:	9300      	str	r3, [sp, #0]
 80256a0:	ec45 4b10 	vmov	d0, r4, r5
 80256a4:	4653      	mov	r3, sl
 80256a6:	4632      	mov	r2, r6
 80256a8:	f000 ff42 	bl	8026530 <_dtoa_r>
 80256ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80256b0:	4607      	mov	r7, r0
 80256b2:	d102      	bne.n	80256ba <__cvt+0x66>
 80256b4:	f019 0f01 	tst.w	r9, #1
 80256b8:	d022      	beq.n	8025700 <__cvt+0xac>
 80256ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80256be:	eb07 0906 	add.w	r9, r7, r6
 80256c2:	d110      	bne.n	80256e6 <__cvt+0x92>
 80256c4:	783b      	ldrb	r3, [r7, #0]
 80256c6:	2b30      	cmp	r3, #48	; 0x30
 80256c8:	d10a      	bne.n	80256e0 <__cvt+0x8c>
 80256ca:	2200      	movs	r2, #0
 80256cc:	2300      	movs	r3, #0
 80256ce:	4620      	mov	r0, r4
 80256d0:	4629      	mov	r1, r5
 80256d2:	f7db f9d1 	bl	8000a78 <__aeabi_dcmpeq>
 80256d6:	b918      	cbnz	r0, 80256e0 <__cvt+0x8c>
 80256d8:	f1c6 0601 	rsb	r6, r6, #1
 80256dc:	f8ca 6000 	str.w	r6, [sl]
 80256e0:	f8da 3000 	ldr.w	r3, [sl]
 80256e4:	4499      	add	r9, r3
 80256e6:	2200      	movs	r2, #0
 80256e8:	2300      	movs	r3, #0
 80256ea:	4620      	mov	r0, r4
 80256ec:	4629      	mov	r1, r5
 80256ee:	f7db f9c3 	bl	8000a78 <__aeabi_dcmpeq>
 80256f2:	b108      	cbz	r0, 80256f8 <__cvt+0xa4>
 80256f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80256f8:	2230      	movs	r2, #48	; 0x30
 80256fa:	9b03      	ldr	r3, [sp, #12]
 80256fc:	454b      	cmp	r3, r9
 80256fe:	d307      	bcc.n	8025710 <__cvt+0xbc>
 8025700:	9b03      	ldr	r3, [sp, #12]
 8025702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025704:	1bdb      	subs	r3, r3, r7
 8025706:	4638      	mov	r0, r7
 8025708:	6013      	str	r3, [r2, #0]
 802570a:	b004      	add	sp, #16
 802570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025710:	1c59      	adds	r1, r3, #1
 8025712:	9103      	str	r1, [sp, #12]
 8025714:	701a      	strb	r2, [r3, #0]
 8025716:	e7f0      	b.n	80256fa <__cvt+0xa6>

08025718 <__exponent>:
 8025718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802571a:	4603      	mov	r3, r0
 802571c:	2900      	cmp	r1, #0
 802571e:	bfb8      	it	lt
 8025720:	4249      	neglt	r1, r1
 8025722:	f803 2b02 	strb.w	r2, [r3], #2
 8025726:	bfb4      	ite	lt
 8025728:	222d      	movlt	r2, #45	; 0x2d
 802572a:	222b      	movge	r2, #43	; 0x2b
 802572c:	2909      	cmp	r1, #9
 802572e:	7042      	strb	r2, [r0, #1]
 8025730:	dd2a      	ble.n	8025788 <__exponent+0x70>
 8025732:	f10d 0407 	add.w	r4, sp, #7
 8025736:	46a4      	mov	ip, r4
 8025738:	270a      	movs	r7, #10
 802573a:	46a6      	mov	lr, r4
 802573c:	460a      	mov	r2, r1
 802573e:	fb91 f6f7 	sdiv	r6, r1, r7
 8025742:	fb07 1516 	mls	r5, r7, r6, r1
 8025746:	3530      	adds	r5, #48	; 0x30
 8025748:	2a63      	cmp	r2, #99	; 0x63
 802574a:	f104 34ff 	add.w	r4, r4, #4294967295
 802574e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025752:	4631      	mov	r1, r6
 8025754:	dcf1      	bgt.n	802573a <__exponent+0x22>
 8025756:	3130      	adds	r1, #48	; 0x30
 8025758:	f1ae 0502 	sub.w	r5, lr, #2
 802575c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025760:	1c44      	adds	r4, r0, #1
 8025762:	4629      	mov	r1, r5
 8025764:	4561      	cmp	r1, ip
 8025766:	d30a      	bcc.n	802577e <__exponent+0x66>
 8025768:	f10d 0209 	add.w	r2, sp, #9
 802576c:	eba2 020e 	sub.w	r2, r2, lr
 8025770:	4565      	cmp	r5, ip
 8025772:	bf88      	it	hi
 8025774:	2200      	movhi	r2, #0
 8025776:	4413      	add	r3, r2
 8025778:	1a18      	subs	r0, r3, r0
 802577a:	b003      	add	sp, #12
 802577c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802577e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025786:	e7ed      	b.n	8025764 <__exponent+0x4c>
 8025788:	2330      	movs	r3, #48	; 0x30
 802578a:	3130      	adds	r1, #48	; 0x30
 802578c:	7083      	strb	r3, [r0, #2]
 802578e:	70c1      	strb	r1, [r0, #3]
 8025790:	1d03      	adds	r3, r0, #4
 8025792:	e7f1      	b.n	8025778 <__exponent+0x60>

08025794 <_printf_float>:
 8025794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025798:	ed2d 8b02 	vpush	{d8}
 802579c:	b08d      	sub	sp, #52	; 0x34
 802579e:	460c      	mov	r4, r1
 80257a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80257a4:	4616      	mov	r6, r2
 80257a6:	461f      	mov	r7, r3
 80257a8:	4605      	mov	r5, r0
 80257aa:	f001 fcd1 	bl	8027150 <_localeconv_r>
 80257ae:	f8d0 a000 	ldr.w	sl, [r0]
 80257b2:	4650      	mov	r0, sl
 80257b4:	f7da fce4 	bl	8000180 <strlen>
 80257b8:	2300      	movs	r3, #0
 80257ba:	930a      	str	r3, [sp, #40]	; 0x28
 80257bc:	6823      	ldr	r3, [r4, #0]
 80257be:	9305      	str	r3, [sp, #20]
 80257c0:	f8d8 3000 	ldr.w	r3, [r8]
 80257c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80257c8:	3307      	adds	r3, #7
 80257ca:	f023 0307 	bic.w	r3, r3, #7
 80257ce:	f103 0208 	add.w	r2, r3, #8
 80257d2:	f8c8 2000 	str.w	r2, [r8]
 80257d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80257de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80257e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80257e6:	9307      	str	r3, [sp, #28]
 80257e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80257ec:	ee08 0a10 	vmov	s16, r0
 80257f0:	4b9f      	ldr	r3, [pc, #636]	; (8025a70 <_printf_float+0x2dc>)
 80257f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80257f6:	f04f 32ff 	mov.w	r2, #4294967295
 80257fa:	f7db f96f 	bl	8000adc <__aeabi_dcmpun>
 80257fe:	bb88      	cbnz	r0, 8025864 <_printf_float+0xd0>
 8025800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025804:	4b9a      	ldr	r3, [pc, #616]	; (8025a70 <_printf_float+0x2dc>)
 8025806:	f04f 32ff 	mov.w	r2, #4294967295
 802580a:	f7db f949 	bl	8000aa0 <__aeabi_dcmple>
 802580e:	bb48      	cbnz	r0, 8025864 <_printf_float+0xd0>
 8025810:	2200      	movs	r2, #0
 8025812:	2300      	movs	r3, #0
 8025814:	4640      	mov	r0, r8
 8025816:	4649      	mov	r1, r9
 8025818:	f7db f938 	bl	8000a8c <__aeabi_dcmplt>
 802581c:	b110      	cbz	r0, 8025824 <_printf_float+0x90>
 802581e:	232d      	movs	r3, #45	; 0x2d
 8025820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025824:	4b93      	ldr	r3, [pc, #588]	; (8025a74 <_printf_float+0x2e0>)
 8025826:	4894      	ldr	r0, [pc, #592]	; (8025a78 <_printf_float+0x2e4>)
 8025828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802582c:	bf94      	ite	ls
 802582e:	4698      	movls	r8, r3
 8025830:	4680      	movhi	r8, r0
 8025832:	2303      	movs	r3, #3
 8025834:	6123      	str	r3, [r4, #16]
 8025836:	9b05      	ldr	r3, [sp, #20]
 8025838:	f023 0204 	bic.w	r2, r3, #4
 802583c:	6022      	str	r2, [r4, #0]
 802583e:	f04f 0900 	mov.w	r9, #0
 8025842:	9700      	str	r7, [sp, #0]
 8025844:	4633      	mov	r3, r6
 8025846:	aa0b      	add	r2, sp, #44	; 0x2c
 8025848:	4621      	mov	r1, r4
 802584a:	4628      	mov	r0, r5
 802584c:	f000 f9d8 	bl	8025c00 <_printf_common>
 8025850:	3001      	adds	r0, #1
 8025852:	f040 8090 	bne.w	8025976 <_printf_float+0x1e2>
 8025856:	f04f 30ff 	mov.w	r0, #4294967295
 802585a:	b00d      	add	sp, #52	; 0x34
 802585c:	ecbd 8b02 	vpop	{d8}
 8025860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025864:	4642      	mov	r2, r8
 8025866:	464b      	mov	r3, r9
 8025868:	4640      	mov	r0, r8
 802586a:	4649      	mov	r1, r9
 802586c:	f7db f936 	bl	8000adc <__aeabi_dcmpun>
 8025870:	b140      	cbz	r0, 8025884 <_printf_float+0xf0>
 8025872:	464b      	mov	r3, r9
 8025874:	2b00      	cmp	r3, #0
 8025876:	bfbc      	itt	lt
 8025878:	232d      	movlt	r3, #45	; 0x2d
 802587a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802587e:	487f      	ldr	r0, [pc, #508]	; (8025a7c <_printf_float+0x2e8>)
 8025880:	4b7f      	ldr	r3, [pc, #508]	; (8025a80 <_printf_float+0x2ec>)
 8025882:	e7d1      	b.n	8025828 <_printf_float+0x94>
 8025884:	6863      	ldr	r3, [r4, #4]
 8025886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802588a:	9206      	str	r2, [sp, #24]
 802588c:	1c5a      	adds	r2, r3, #1
 802588e:	d13f      	bne.n	8025910 <_printf_float+0x17c>
 8025890:	2306      	movs	r3, #6
 8025892:	6063      	str	r3, [r4, #4]
 8025894:	9b05      	ldr	r3, [sp, #20]
 8025896:	6861      	ldr	r1, [r4, #4]
 8025898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802589c:	2300      	movs	r3, #0
 802589e:	9303      	str	r3, [sp, #12]
 80258a0:	ab0a      	add	r3, sp, #40	; 0x28
 80258a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80258a6:	ab09      	add	r3, sp, #36	; 0x24
 80258a8:	ec49 8b10 	vmov	d0, r8, r9
 80258ac:	9300      	str	r3, [sp, #0]
 80258ae:	6022      	str	r2, [r4, #0]
 80258b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80258b4:	4628      	mov	r0, r5
 80258b6:	f7ff fecd 	bl	8025654 <__cvt>
 80258ba:	9b06      	ldr	r3, [sp, #24]
 80258bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80258be:	2b47      	cmp	r3, #71	; 0x47
 80258c0:	4680      	mov	r8, r0
 80258c2:	d108      	bne.n	80258d6 <_printf_float+0x142>
 80258c4:	1cc8      	adds	r0, r1, #3
 80258c6:	db02      	blt.n	80258ce <_printf_float+0x13a>
 80258c8:	6863      	ldr	r3, [r4, #4]
 80258ca:	4299      	cmp	r1, r3
 80258cc:	dd41      	ble.n	8025952 <_printf_float+0x1be>
 80258ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80258d2:	fa5f fb8b 	uxtb.w	fp, fp
 80258d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80258da:	d820      	bhi.n	802591e <_printf_float+0x18a>
 80258dc:	3901      	subs	r1, #1
 80258de:	465a      	mov	r2, fp
 80258e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80258e4:	9109      	str	r1, [sp, #36]	; 0x24
 80258e6:	f7ff ff17 	bl	8025718 <__exponent>
 80258ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80258ec:	1813      	adds	r3, r2, r0
 80258ee:	2a01      	cmp	r2, #1
 80258f0:	4681      	mov	r9, r0
 80258f2:	6123      	str	r3, [r4, #16]
 80258f4:	dc02      	bgt.n	80258fc <_printf_float+0x168>
 80258f6:	6822      	ldr	r2, [r4, #0]
 80258f8:	07d2      	lsls	r2, r2, #31
 80258fa:	d501      	bpl.n	8025900 <_printf_float+0x16c>
 80258fc:	3301      	adds	r3, #1
 80258fe:	6123      	str	r3, [r4, #16]
 8025900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8025904:	2b00      	cmp	r3, #0
 8025906:	d09c      	beq.n	8025842 <_printf_float+0xae>
 8025908:	232d      	movs	r3, #45	; 0x2d
 802590a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802590e:	e798      	b.n	8025842 <_printf_float+0xae>
 8025910:	9a06      	ldr	r2, [sp, #24]
 8025912:	2a47      	cmp	r2, #71	; 0x47
 8025914:	d1be      	bne.n	8025894 <_printf_float+0x100>
 8025916:	2b00      	cmp	r3, #0
 8025918:	d1bc      	bne.n	8025894 <_printf_float+0x100>
 802591a:	2301      	movs	r3, #1
 802591c:	e7b9      	b.n	8025892 <_printf_float+0xfe>
 802591e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8025922:	d118      	bne.n	8025956 <_printf_float+0x1c2>
 8025924:	2900      	cmp	r1, #0
 8025926:	6863      	ldr	r3, [r4, #4]
 8025928:	dd0b      	ble.n	8025942 <_printf_float+0x1ae>
 802592a:	6121      	str	r1, [r4, #16]
 802592c:	b913      	cbnz	r3, 8025934 <_printf_float+0x1a0>
 802592e:	6822      	ldr	r2, [r4, #0]
 8025930:	07d0      	lsls	r0, r2, #31
 8025932:	d502      	bpl.n	802593a <_printf_float+0x1a6>
 8025934:	3301      	adds	r3, #1
 8025936:	440b      	add	r3, r1
 8025938:	6123      	str	r3, [r4, #16]
 802593a:	65a1      	str	r1, [r4, #88]	; 0x58
 802593c:	f04f 0900 	mov.w	r9, #0
 8025940:	e7de      	b.n	8025900 <_printf_float+0x16c>
 8025942:	b913      	cbnz	r3, 802594a <_printf_float+0x1b6>
 8025944:	6822      	ldr	r2, [r4, #0]
 8025946:	07d2      	lsls	r2, r2, #31
 8025948:	d501      	bpl.n	802594e <_printf_float+0x1ba>
 802594a:	3302      	adds	r3, #2
 802594c:	e7f4      	b.n	8025938 <_printf_float+0x1a4>
 802594e:	2301      	movs	r3, #1
 8025950:	e7f2      	b.n	8025938 <_printf_float+0x1a4>
 8025952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8025956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025958:	4299      	cmp	r1, r3
 802595a:	db05      	blt.n	8025968 <_printf_float+0x1d4>
 802595c:	6823      	ldr	r3, [r4, #0]
 802595e:	6121      	str	r1, [r4, #16]
 8025960:	07d8      	lsls	r0, r3, #31
 8025962:	d5ea      	bpl.n	802593a <_printf_float+0x1a6>
 8025964:	1c4b      	adds	r3, r1, #1
 8025966:	e7e7      	b.n	8025938 <_printf_float+0x1a4>
 8025968:	2900      	cmp	r1, #0
 802596a:	bfd4      	ite	le
 802596c:	f1c1 0202 	rsble	r2, r1, #2
 8025970:	2201      	movgt	r2, #1
 8025972:	4413      	add	r3, r2
 8025974:	e7e0      	b.n	8025938 <_printf_float+0x1a4>
 8025976:	6823      	ldr	r3, [r4, #0]
 8025978:	055a      	lsls	r2, r3, #21
 802597a:	d407      	bmi.n	802598c <_printf_float+0x1f8>
 802597c:	6923      	ldr	r3, [r4, #16]
 802597e:	4642      	mov	r2, r8
 8025980:	4631      	mov	r1, r6
 8025982:	4628      	mov	r0, r5
 8025984:	47b8      	blx	r7
 8025986:	3001      	adds	r0, #1
 8025988:	d12c      	bne.n	80259e4 <_printf_float+0x250>
 802598a:	e764      	b.n	8025856 <_printf_float+0xc2>
 802598c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8025990:	f240 80e0 	bls.w	8025b54 <_printf_float+0x3c0>
 8025994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025998:	2200      	movs	r2, #0
 802599a:	2300      	movs	r3, #0
 802599c:	f7db f86c 	bl	8000a78 <__aeabi_dcmpeq>
 80259a0:	2800      	cmp	r0, #0
 80259a2:	d034      	beq.n	8025a0e <_printf_float+0x27a>
 80259a4:	4a37      	ldr	r2, [pc, #220]	; (8025a84 <_printf_float+0x2f0>)
 80259a6:	2301      	movs	r3, #1
 80259a8:	4631      	mov	r1, r6
 80259aa:	4628      	mov	r0, r5
 80259ac:	47b8      	blx	r7
 80259ae:	3001      	adds	r0, #1
 80259b0:	f43f af51 	beq.w	8025856 <_printf_float+0xc2>
 80259b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80259b8:	429a      	cmp	r2, r3
 80259ba:	db02      	blt.n	80259c2 <_printf_float+0x22e>
 80259bc:	6823      	ldr	r3, [r4, #0]
 80259be:	07d8      	lsls	r0, r3, #31
 80259c0:	d510      	bpl.n	80259e4 <_printf_float+0x250>
 80259c2:	ee18 3a10 	vmov	r3, s16
 80259c6:	4652      	mov	r2, sl
 80259c8:	4631      	mov	r1, r6
 80259ca:	4628      	mov	r0, r5
 80259cc:	47b8      	blx	r7
 80259ce:	3001      	adds	r0, #1
 80259d0:	f43f af41 	beq.w	8025856 <_printf_float+0xc2>
 80259d4:	f04f 0800 	mov.w	r8, #0
 80259d8:	f104 091a 	add.w	r9, r4, #26
 80259dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259de:	3b01      	subs	r3, #1
 80259e0:	4543      	cmp	r3, r8
 80259e2:	dc09      	bgt.n	80259f8 <_printf_float+0x264>
 80259e4:	6823      	ldr	r3, [r4, #0]
 80259e6:	079b      	lsls	r3, r3, #30
 80259e8:	f100 8105 	bmi.w	8025bf6 <_printf_float+0x462>
 80259ec:	68e0      	ldr	r0, [r4, #12]
 80259ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80259f0:	4298      	cmp	r0, r3
 80259f2:	bfb8      	it	lt
 80259f4:	4618      	movlt	r0, r3
 80259f6:	e730      	b.n	802585a <_printf_float+0xc6>
 80259f8:	2301      	movs	r3, #1
 80259fa:	464a      	mov	r2, r9
 80259fc:	4631      	mov	r1, r6
 80259fe:	4628      	mov	r0, r5
 8025a00:	47b8      	blx	r7
 8025a02:	3001      	adds	r0, #1
 8025a04:	f43f af27 	beq.w	8025856 <_printf_float+0xc2>
 8025a08:	f108 0801 	add.w	r8, r8, #1
 8025a0c:	e7e6      	b.n	80259dc <_printf_float+0x248>
 8025a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a10:	2b00      	cmp	r3, #0
 8025a12:	dc39      	bgt.n	8025a88 <_printf_float+0x2f4>
 8025a14:	4a1b      	ldr	r2, [pc, #108]	; (8025a84 <_printf_float+0x2f0>)
 8025a16:	2301      	movs	r3, #1
 8025a18:	4631      	mov	r1, r6
 8025a1a:	4628      	mov	r0, r5
 8025a1c:	47b8      	blx	r7
 8025a1e:	3001      	adds	r0, #1
 8025a20:	f43f af19 	beq.w	8025856 <_printf_float+0xc2>
 8025a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025a28:	4313      	orrs	r3, r2
 8025a2a:	d102      	bne.n	8025a32 <_printf_float+0x29e>
 8025a2c:	6823      	ldr	r3, [r4, #0]
 8025a2e:	07d9      	lsls	r1, r3, #31
 8025a30:	d5d8      	bpl.n	80259e4 <_printf_float+0x250>
 8025a32:	ee18 3a10 	vmov	r3, s16
 8025a36:	4652      	mov	r2, sl
 8025a38:	4631      	mov	r1, r6
 8025a3a:	4628      	mov	r0, r5
 8025a3c:	47b8      	blx	r7
 8025a3e:	3001      	adds	r0, #1
 8025a40:	f43f af09 	beq.w	8025856 <_printf_float+0xc2>
 8025a44:	f04f 0900 	mov.w	r9, #0
 8025a48:	f104 0a1a 	add.w	sl, r4, #26
 8025a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a4e:	425b      	negs	r3, r3
 8025a50:	454b      	cmp	r3, r9
 8025a52:	dc01      	bgt.n	8025a58 <_printf_float+0x2c4>
 8025a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a56:	e792      	b.n	802597e <_printf_float+0x1ea>
 8025a58:	2301      	movs	r3, #1
 8025a5a:	4652      	mov	r2, sl
 8025a5c:	4631      	mov	r1, r6
 8025a5e:	4628      	mov	r0, r5
 8025a60:	47b8      	blx	r7
 8025a62:	3001      	adds	r0, #1
 8025a64:	f43f aef7 	beq.w	8025856 <_printf_float+0xc2>
 8025a68:	f109 0901 	add.w	r9, r9, #1
 8025a6c:	e7ee      	b.n	8025a4c <_printf_float+0x2b8>
 8025a6e:	bf00      	nop
 8025a70:	7fefffff 	.word	0x7fefffff
 8025a74:	0802a5b0 	.word	0x0802a5b0
 8025a78:	0802a5b4 	.word	0x0802a5b4
 8025a7c:	0802a5bc 	.word	0x0802a5bc
 8025a80:	0802a5b8 	.word	0x0802a5b8
 8025a84:	0802a5c0 	.word	0x0802a5c0
 8025a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025a8c:	429a      	cmp	r2, r3
 8025a8e:	bfa8      	it	ge
 8025a90:	461a      	movge	r2, r3
 8025a92:	2a00      	cmp	r2, #0
 8025a94:	4691      	mov	r9, r2
 8025a96:	dc37      	bgt.n	8025b08 <_printf_float+0x374>
 8025a98:	f04f 0b00 	mov.w	fp, #0
 8025a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025aa0:	f104 021a 	add.w	r2, r4, #26
 8025aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025aa6:	9305      	str	r3, [sp, #20]
 8025aa8:	eba3 0309 	sub.w	r3, r3, r9
 8025aac:	455b      	cmp	r3, fp
 8025aae:	dc33      	bgt.n	8025b18 <_printf_float+0x384>
 8025ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025ab4:	429a      	cmp	r2, r3
 8025ab6:	db3b      	blt.n	8025b30 <_printf_float+0x39c>
 8025ab8:	6823      	ldr	r3, [r4, #0]
 8025aba:	07da      	lsls	r2, r3, #31
 8025abc:	d438      	bmi.n	8025b30 <_printf_float+0x39c>
 8025abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ac0:	9a05      	ldr	r2, [sp, #20]
 8025ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025ac4:	1a9a      	subs	r2, r3, r2
 8025ac6:	eba3 0901 	sub.w	r9, r3, r1
 8025aca:	4591      	cmp	r9, r2
 8025acc:	bfa8      	it	ge
 8025ace:	4691      	movge	r9, r2
 8025ad0:	f1b9 0f00 	cmp.w	r9, #0
 8025ad4:	dc35      	bgt.n	8025b42 <_printf_float+0x3ae>
 8025ad6:	f04f 0800 	mov.w	r8, #0
 8025ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025ade:	f104 0a1a 	add.w	sl, r4, #26
 8025ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025ae6:	1a9b      	subs	r3, r3, r2
 8025ae8:	eba3 0309 	sub.w	r3, r3, r9
 8025aec:	4543      	cmp	r3, r8
 8025aee:	f77f af79 	ble.w	80259e4 <_printf_float+0x250>
 8025af2:	2301      	movs	r3, #1
 8025af4:	4652      	mov	r2, sl
 8025af6:	4631      	mov	r1, r6
 8025af8:	4628      	mov	r0, r5
 8025afa:	47b8      	blx	r7
 8025afc:	3001      	adds	r0, #1
 8025afe:	f43f aeaa 	beq.w	8025856 <_printf_float+0xc2>
 8025b02:	f108 0801 	add.w	r8, r8, #1
 8025b06:	e7ec      	b.n	8025ae2 <_printf_float+0x34e>
 8025b08:	4613      	mov	r3, r2
 8025b0a:	4631      	mov	r1, r6
 8025b0c:	4642      	mov	r2, r8
 8025b0e:	4628      	mov	r0, r5
 8025b10:	47b8      	blx	r7
 8025b12:	3001      	adds	r0, #1
 8025b14:	d1c0      	bne.n	8025a98 <_printf_float+0x304>
 8025b16:	e69e      	b.n	8025856 <_printf_float+0xc2>
 8025b18:	2301      	movs	r3, #1
 8025b1a:	4631      	mov	r1, r6
 8025b1c:	4628      	mov	r0, r5
 8025b1e:	9205      	str	r2, [sp, #20]
 8025b20:	47b8      	blx	r7
 8025b22:	3001      	adds	r0, #1
 8025b24:	f43f ae97 	beq.w	8025856 <_printf_float+0xc2>
 8025b28:	9a05      	ldr	r2, [sp, #20]
 8025b2a:	f10b 0b01 	add.w	fp, fp, #1
 8025b2e:	e7b9      	b.n	8025aa4 <_printf_float+0x310>
 8025b30:	ee18 3a10 	vmov	r3, s16
 8025b34:	4652      	mov	r2, sl
 8025b36:	4631      	mov	r1, r6
 8025b38:	4628      	mov	r0, r5
 8025b3a:	47b8      	blx	r7
 8025b3c:	3001      	adds	r0, #1
 8025b3e:	d1be      	bne.n	8025abe <_printf_float+0x32a>
 8025b40:	e689      	b.n	8025856 <_printf_float+0xc2>
 8025b42:	9a05      	ldr	r2, [sp, #20]
 8025b44:	464b      	mov	r3, r9
 8025b46:	4442      	add	r2, r8
 8025b48:	4631      	mov	r1, r6
 8025b4a:	4628      	mov	r0, r5
 8025b4c:	47b8      	blx	r7
 8025b4e:	3001      	adds	r0, #1
 8025b50:	d1c1      	bne.n	8025ad6 <_printf_float+0x342>
 8025b52:	e680      	b.n	8025856 <_printf_float+0xc2>
 8025b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b56:	2a01      	cmp	r2, #1
 8025b58:	dc01      	bgt.n	8025b5e <_printf_float+0x3ca>
 8025b5a:	07db      	lsls	r3, r3, #31
 8025b5c:	d538      	bpl.n	8025bd0 <_printf_float+0x43c>
 8025b5e:	2301      	movs	r3, #1
 8025b60:	4642      	mov	r2, r8
 8025b62:	4631      	mov	r1, r6
 8025b64:	4628      	mov	r0, r5
 8025b66:	47b8      	blx	r7
 8025b68:	3001      	adds	r0, #1
 8025b6a:	f43f ae74 	beq.w	8025856 <_printf_float+0xc2>
 8025b6e:	ee18 3a10 	vmov	r3, s16
 8025b72:	4652      	mov	r2, sl
 8025b74:	4631      	mov	r1, r6
 8025b76:	4628      	mov	r0, r5
 8025b78:	47b8      	blx	r7
 8025b7a:	3001      	adds	r0, #1
 8025b7c:	f43f ae6b 	beq.w	8025856 <_printf_float+0xc2>
 8025b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025b84:	2200      	movs	r2, #0
 8025b86:	2300      	movs	r3, #0
 8025b88:	f7da ff76 	bl	8000a78 <__aeabi_dcmpeq>
 8025b8c:	b9d8      	cbnz	r0, 8025bc6 <_printf_float+0x432>
 8025b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b90:	f108 0201 	add.w	r2, r8, #1
 8025b94:	3b01      	subs	r3, #1
 8025b96:	4631      	mov	r1, r6
 8025b98:	4628      	mov	r0, r5
 8025b9a:	47b8      	blx	r7
 8025b9c:	3001      	adds	r0, #1
 8025b9e:	d10e      	bne.n	8025bbe <_printf_float+0x42a>
 8025ba0:	e659      	b.n	8025856 <_printf_float+0xc2>
 8025ba2:	2301      	movs	r3, #1
 8025ba4:	4652      	mov	r2, sl
 8025ba6:	4631      	mov	r1, r6
 8025ba8:	4628      	mov	r0, r5
 8025baa:	47b8      	blx	r7
 8025bac:	3001      	adds	r0, #1
 8025bae:	f43f ae52 	beq.w	8025856 <_printf_float+0xc2>
 8025bb2:	f108 0801 	add.w	r8, r8, #1
 8025bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025bb8:	3b01      	subs	r3, #1
 8025bba:	4543      	cmp	r3, r8
 8025bbc:	dcf1      	bgt.n	8025ba2 <_printf_float+0x40e>
 8025bbe:	464b      	mov	r3, r9
 8025bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025bc4:	e6dc      	b.n	8025980 <_printf_float+0x1ec>
 8025bc6:	f04f 0800 	mov.w	r8, #0
 8025bca:	f104 0a1a 	add.w	sl, r4, #26
 8025bce:	e7f2      	b.n	8025bb6 <_printf_float+0x422>
 8025bd0:	2301      	movs	r3, #1
 8025bd2:	4642      	mov	r2, r8
 8025bd4:	e7df      	b.n	8025b96 <_printf_float+0x402>
 8025bd6:	2301      	movs	r3, #1
 8025bd8:	464a      	mov	r2, r9
 8025bda:	4631      	mov	r1, r6
 8025bdc:	4628      	mov	r0, r5
 8025bde:	47b8      	blx	r7
 8025be0:	3001      	adds	r0, #1
 8025be2:	f43f ae38 	beq.w	8025856 <_printf_float+0xc2>
 8025be6:	f108 0801 	add.w	r8, r8, #1
 8025bea:	68e3      	ldr	r3, [r4, #12]
 8025bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025bee:	1a5b      	subs	r3, r3, r1
 8025bf0:	4543      	cmp	r3, r8
 8025bf2:	dcf0      	bgt.n	8025bd6 <_printf_float+0x442>
 8025bf4:	e6fa      	b.n	80259ec <_printf_float+0x258>
 8025bf6:	f04f 0800 	mov.w	r8, #0
 8025bfa:	f104 0919 	add.w	r9, r4, #25
 8025bfe:	e7f4      	b.n	8025bea <_printf_float+0x456>

08025c00 <_printf_common>:
 8025c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c04:	4616      	mov	r6, r2
 8025c06:	4699      	mov	r9, r3
 8025c08:	688a      	ldr	r2, [r1, #8]
 8025c0a:	690b      	ldr	r3, [r1, #16]
 8025c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025c10:	4293      	cmp	r3, r2
 8025c12:	bfb8      	it	lt
 8025c14:	4613      	movlt	r3, r2
 8025c16:	6033      	str	r3, [r6, #0]
 8025c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025c1c:	4607      	mov	r7, r0
 8025c1e:	460c      	mov	r4, r1
 8025c20:	b10a      	cbz	r2, 8025c26 <_printf_common+0x26>
 8025c22:	3301      	adds	r3, #1
 8025c24:	6033      	str	r3, [r6, #0]
 8025c26:	6823      	ldr	r3, [r4, #0]
 8025c28:	0699      	lsls	r1, r3, #26
 8025c2a:	bf42      	ittt	mi
 8025c2c:	6833      	ldrmi	r3, [r6, #0]
 8025c2e:	3302      	addmi	r3, #2
 8025c30:	6033      	strmi	r3, [r6, #0]
 8025c32:	6825      	ldr	r5, [r4, #0]
 8025c34:	f015 0506 	ands.w	r5, r5, #6
 8025c38:	d106      	bne.n	8025c48 <_printf_common+0x48>
 8025c3a:	f104 0a19 	add.w	sl, r4, #25
 8025c3e:	68e3      	ldr	r3, [r4, #12]
 8025c40:	6832      	ldr	r2, [r6, #0]
 8025c42:	1a9b      	subs	r3, r3, r2
 8025c44:	42ab      	cmp	r3, r5
 8025c46:	dc26      	bgt.n	8025c96 <_printf_common+0x96>
 8025c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025c4c:	1e13      	subs	r3, r2, #0
 8025c4e:	6822      	ldr	r2, [r4, #0]
 8025c50:	bf18      	it	ne
 8025c52:	2301      	movne	r3, #1
 8025c54:	0692      	lsls	r2, r2, #26
 8025c56:	d42b      	bmi.n	8025cb0 <_printf_common+0xb0>
 8025c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025c5c:	4649      	mov	r1, r9
 8025c5e:	4638      	mov	r0, r7
 8025c60:	47c0      	blx	r8
 8025c62:	3001      	adds	r0, #1
 8025c64:	d01e      	beq.n	8025ca4 <_printf_common+0xa4>
 8025c66:	6823      	ldr	r3, [r4, #0]
 8025c68:	68e5      	ldr	r5, [r4, #12]
 8025c6a:	6832      	ldr	r2, [r6, #0]
 8025c6c:	f003 0306 	and.w	r3, r3, #6
 8025c70:	2b04      	cmp	r3, #4
 8025c72:	bf08      	it	eq
 8025c74:	1aad      	subeq	r5, r5, r2
 8025c76:	68a3      	ldr	r3, [r4, #8]
 8025c78:	6922      	ldr	r2, [r4, #16]
 8025c7a:	bf0c      	ite	eq
 8025c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025c80:	2500      	movne	r5, #0
 8025c82:	4293      	cmp	r3, r2
 8025c84:	bfc4      	itt	gt
 8025c86:	1a9b      	subgt	r3, r3, r2
 8025c88:	18ed      	addgt	r5, r5, r3
 8025c8a:	2600      	movs	r6, #0
 8025c8c:	341a      	adds	r4, #26
 8025c8e:	42b5      	cmp	r5, r6
 8025c90:	d11a      	bne.n	8025cc8 <_printf_common+0xc8>
 8025c92:	2000      	movs	r0, #0
 8025c94:	e008      	b.n	8025ca8 <_printf_common+0xa8>
 8025c96:	2301      	movs	r3, #1
 8025c98:	4652      	mov	r2, sl
 8025c9a:	4649      	mov	r1, r9
 8025c9c:	4638      	mov	r0, r7
 8025c9e:	47c0      	blx	r8
 8025ca0:	3001      	adds	r0, #1
 8025ca2:	d103      	bne.n	8025cac <_printf_common+0xac>
 8025ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025cac:	3501      	adds	r5, #1
 8025cae:	e7c6      	b.n	8025c3e <_printf_common+0x3e>
 8025cb0:	18e1      	adds	r1, r4, r3
 8025cb2:	1c5a      	adds	r2, r3, #1
 8025cb4:	2030      	movs	r0, #48	; 0x30
 8025cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025cba:	4422      	add	r2, r4
 8025cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025cc4:	3302      	adds	r3, #2
 8025cc6:	e7c7      	b.n	8025c58 <_printf_common+0x58>
 8025cc8:	2301      	movs	r3, #1
 8025cca:	4622      	mov	r2, r4
 8025ccc:	4649      	mov	r1, r9
 8025cce:	4638      	mov	r0, r7
 8025cd0:	47c0      	blx	r8
 8025cd2:	3001      	adds	r0, #1
 8025cd4:	d0e6      	beq.n	8025ca4 <_printf_common+0xa4>
 8025cd6:	3601      	adds	r6, #1
 8025cd8:	e7d9      	b.n	8025c8e <_printf_common+0x8e>
	...

08025cdc <_printf_i>:
 8025cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ce0:	7e0f      	ldrb	r7, [r1, #24]
 8025ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025ce4:	2f78      	cmp	r7, #120	; 0x78
 8025ce6:	4691      	mov	r9, r2
 8025ce8:	4680      	mov	r8, r0
 8025cea:	460c      	mov	r4, r1
 8025cec:	469a      	mov	sl, r3
 8025cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025cf2:	d807      	bhi.n	8025d04 <_printf_i+0x28>
 8025cf4:	2f62      	cmp	r7, #98	; 0x62
 8025cf6:	d80a      	bhi.n	8025d0e <_printf_i+0x32>
 8025cf8:	2f00      	cmp	r7, #0
 8025cfa:	f000 80d8 	beq.w	8025eae <_printf_i+0x1d2>
 8025cfe:	2f58      	cmp	r7, #88	; 0x58
 8025d00:	f000 80a3 	beq.w	8025e4a <_printf_i+0x16e>
 8025d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025d0c:	e03a      	b.n	8025d84 <_printf_i+0xa8>
 8025d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025d12:	2b15      	cmp	r3, #21
 8025d14:	d8f6      	bhi.n	8025d04 <_printf_i+0x28>
 8025d16:	a101      	add	r1, pc, #4	; (adr r1, 8025d1c <_printf_i+0x40>)
 8025d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025d1c:	08025d75 	.word	0x08025d75
 8025d20:	08025d89 	.word	0x08025d89
 8025d24:	08025d05 	.word	0x08025d05
 8025d28:	08025d05 	.word	0x08025d05
 8025d2c:	08025d05 	.word	0x08025d05
 8025d30:	08025d05 	.word	0x08025d05
 8025d34:	08025d89 	.word	0x08025d89
 8025d38:	08025d05 	.word	0x08025d05
 8025d3c:	08025d05 	.word	0x08025d05
 8025d40:	08025d05 	.word	0x08025d05
 8025d44:	08025d05 	.word	0x08025d05
 8025d48:	08025e95 	.word	0x08025e95
 8025d4c:	08025db9 	.word	0x08025db9
 8025d50:	08025e77 	.word	0x08025e77
 8025d54:	08025d05 	.word	0x08025d05
 8025d58:	08025d05 	.word	0x08025d05
 8025d5c:	08025eb7 	.word	0x08025eb7
 8025d60:	08025d05 	.word	0x08025d05
 8025d64:	08025db9 	.word	0x08025db9
 8025d68:	08025d05 	.word	0x08025d05
 8025d6c:	08025d05 	.word	0x08025d05
 8025d70:	08025e7f 	.word	0x08025e7f
 8025d74:	682b      	ldr	r3, [r5, #0]
 8025d76:	1d1a      	adds	r2, r3, #4
 8025d78:	681b      	ldr	r3, [r3, #0]
 8025d7a:	602a      	str	r2, [r5, #0]
 8025d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d84:	2301      	movs	r3, #1
 8025d86:	e0a3      	b.n	8025ed0 <_printf_i+0x1f4>
 8025d88:	6820      	ldr	r0, [r4, #0]
 8025d8a:	6829      	ldr	r1, [r5, #0]
 8025d8c:	0606      	lsls	r6, r0, #24
 8025d8e:	f101 0304 	add.w	r3, r1, #4
 8025d92:	d50a      	bpl.n	8025daa <_printf_i+0xce>
 8025d94:	680e      	ldr	r6, [r1, #0]
 8025d96:	602b      	str	r3, [r5, #0]
 8025d98:	2e00      	cmp	r6, #0
 8025d9a:	da03      	bge.n	8025da4 <_printf_i+0xc8>
 8025d9c:	232d      	movs	r3, #45	; 0x2d
 8025d9e:	4276      	negs	r6, r6
 8025da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025da4:	485e      	ldr	r0, [pc, #376]	; (8025f20 <_printf_i+0x244>)
 8025da6:	230a      	movs	r3, #10
 8025da8:	e019      	b.n	8025dde <_printf_i+0x102>
 8025daa:	680e      	ldr	r6, [r1, #0]
 8025dac:	602b      	str	r3, [r5, #0]
 8025dae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025db2:	bf18      	it	ne
 8025db4:	b236      	sxthne	r6, r6
 8025db6:	e7ef      	b.n	8025d98 <_printf_i+0xbc>
 8025db8:	682b      	ldr	r3, [r5, #0]
 8025dba:	6820      	ldr	r0, [r4, #0]
 8025dbc:	1d19      	adds	r1, r3, #4
 8025dbe:	6029      	str	r1, [r5, #0]
 8025dc0:	0601      	lsls	r1, r0, #24
 8025dc2:	d501      	bpl.n	8025dc8 <_printf_i+0xec>
 8025dc4:	681e      	ldr	r6, [r3, #0]
 8025dc6:	e002      	b.n	8025dce <_printf_i+0xf2>
 8025dc8:	0646      	lsls	r6, r0, #25
 8025dca:	d5fb      	bpl.n	8025dc4 <_printf_i+0xe8>
 8025dcc:	881e      	ldrh	r6, [r3, #0]
 8025dce:	4854      	ldr	r0, [pc, #336]	; (8025f20 <_printf_i+0x244>)
 8025dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8025dd2:	bf0c      	ite	eq
 8025dd4:	2308      	moveq	r3, #8
 8025dd6:	230a      	movne	r3, #10
 8025dd8:	2100      	movs	r1, #0
 8025dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025dde:	6865      	ldr	r5, [r4, #4]
 8025de0:	60a5      	str	r5, [r4, #8]
 8025de2:	2d00      	cmp	r5, #0
 8025de4:	bfa2      	ittt	ge
 8025de6:	6821      	ldrge	r1, [r4, #0]
 8025de8:	f021 0104 	bicge.w	r1, r1, #4
 8025dec:	6021      	strge	r1, [r4, #0]
 8025dee:	b90e      	cbnz	r6, 8025df4 <_printf_i+0x118>
 8025df0:	2d00      	cmp	r5, #0
 8025df2:	d04d      	beq.n	8025e90 <_printf_i+0x1b4>
 8025df4:	4615      	mov	r5, r2
 8025df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8025dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8025dfe:	5dc7      	ldrb	r7, [r0, r7]
 8025e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025e04:	4637      	mov	r7, r6
 8025e06:	42bb      	cmp	r3, r7
 8025e08:	460e      	mov	r6, r1
 8025e0a:	d9f4      	bls.n	8025df6 <_printf_i+0x11a>
 8025e0c:	2b08      	cmp	r3, #8
 8025e0e:	d10b      	bne.n	8025e28 <_printf_i+0x14c>
 8025e10:	6823      	ldr	r3, [r4, #0]
 8025e12:	07de      	lsls	r6, r3, #31
 8025e14:	d508      	bpl.n	8025e28 <_printf_i+0x14c>
 8025e16:	6923      	ldr	r3, [r4, #16]
 8025e18:	6861      	ldr	r1, [r4, #4]
 8025e1a:	4299      	cmp	r1, r3
 8025e1c:	bfde      	ittt	le
 8025e1e:	2330      	movle	r3, #48	; 0x30
 8025e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025e28:	1b52      	subs	r2, r2, r5
 8025e2a:	6122      	str	r2, [r4, #16]
 8025e2c:	f8cd a000 	str.w	sl, [sp]
 8025e30:	464b      	mov	r3, r9
 8025e32:	aa03      	add	r2, sp, #12
 8025e34:	4621      	mov	r1, r4
 8025e36:	4640      	mov	r0, r8
 8025e38:	f7ff fee2 	bl	8025c00 <_printf_common>
 8025e3c:	3001      	adds	r0, #1
 8025e3e:	d14c      	bne.n	8025eda <_printf_i+0x1fe>
 8025e40:	f04f 30ff 	mov.w	r0, #4294967295
 8025e44:	b004      	add	sp, #16
 8025e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e4a:	4835      	ldr	r0, [pc, #212]	; (8025f20 <_printf_i+0x244>)
 8025e4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025e50:	6829      	ldr	r1, [r5, #0]
 8025e52:	6823      	ldr	r3, [r4, #0]
 8025e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8025e58:	6029      	str	r1, [r5, #0]
 8025e5a:	061d      	lsls	r5, r3, #24
 8025e5c:	d514      	bpl.n	8025e88 <_printf_i+0x1ac>
 8025e5e:	07df      	lsls	r7, r3, #31
 8025e60:	bf44      	itt	mi
 8025e62:	f043 0320 	orrmi.w	r3, r3, #32
 8025e66:	6023      	strmi	r3, [r4, #0]
 8025e68:	b91e      	cbnz	r6, 8025e72 <_printf_i+0x196>
 8025e6a:	6823      	ldr	r3, [r4, #0]
 8025e6c:	f023 0320 	bic.w	r3, r3, #32
 8025e70:	6023      	str	r3, [r4, #0]
 8025e72:	2310      	movs	r3, #16
 8025e74:	e7b0      	b.n	8025dd8 <_printf_i+0xfc>
 8025e76:	6823      	ldr	r3, [r4, #0]
 8025e78:	f043 0320 	orr.w	r3, r3, #32
 8025e7c:	6023      	str	r3, [r4, #0]
 8025e7e:	2378      	movs	r3, #120	; 0x78
 8025e80:	4828      	ldr	r0, [pc, #160]	; (8025f24 <_printf_i+0x248>)
 8025e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025e86:	e7e3      	b.n	8025e50 <_printf_i+0x174>
 8025e88:	0659      	lsls	r1, r3, #25
 8025e8a:	bf48      	it	mi
 8025e8c:	b2b6      	uxthmi	r6, r6
 8025e8e:	e7e6      	b.n	8025e5e <_printf_i+0x182>
 8025e90:	4615      	mov	r5, r2
 8025e92:	e7bb      	b.n	8025e0c <_printf_i+0x130>
 8025e94:	682b      	ldr	r3, [r5, #0]
 8025e96:	6826      	ldr	r6, [r4, #0]
 8025e98:	6961      	ldr	r1, [r4, #20]
 8025e9a:	1d18      	adds	r0, r3, #4
 8025e9c:	6028      	str	r0, [r5, #0]
 8025e9e:	0635      	lsls	r5, r6, #24
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	d501      	bpl.n	8025ea8 <_printf_i+0x1cc>
 8025ea4:	6019      	str	r1, [r3, #0]
 8025ea6:	e002      	b.n	8025eae <_printf_i+0x1d2>
 8025ea8:	0670      	lsls	r0, r6, #25
 8025eaa:	d5fb      	bpl.n	8025ea4 <_printf_i+0x1c8>
 8025eac:	8019      	strh	r1, [r3, #0]
 8025eae:	2300      	movs	r3, #0
 8025eb0:	6123      	str	r3, [r4, #16]
 8025eb2:	4615      	mov	r5, r2
 8025eb4:	e7ba      	b.n	8025e2c <_printf_i+0x150>
 8025eb6:	682b      	ldr	r3, [r5, #0]
 8025eb8:	1d1a      	adds	r2, r3, #4
 8025eba:	602a      	str	r2, [r5, #0]
 8025ebc:	681d      	ldr	r5, [r3, #0]
 8025ebe:	6862      	ldr	r2, [r4, #4]
 8025ec0:	2100      	movs	r1, #0
 8025ec2:	4628      	mov	r0, r5
 8025ec4:	f7da f964 	bl	8000190 <memchr>
 8025ec8:	b108      	cbz	r0, 8025ece <_printf_i+0x1f2>
 8025eca:	1b40      	subs	r0, r0, r5
 8025ecc:	6060      	str	r0, [r4, #4]
 8025ece:	6863      	ldr	r3, [r4, #4]
 8025ed0:	6123      	str	r3, [r4, #16]
 8025ed2:	2300      	movs	r3, #0
 8025ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ed8:	e7a8      	b.n	8025e2c <_printf_i+0x150>
 8025eda:	6923      	ldr	r3, [r4, #16]
 8025edc:	462a      	mov	r2, r5
 8025ede:	4649      	mov	r1, r9
 8025ee0:	4640      	mov	r0, r8
 8025ee2:	47d0      	blx	sl
 8025ee4:	3001      	adds	r0, #1
 8025ee6:	d0ab      	beq.n	8025e40 <_printf_i+0x164>
 8025ee8:	6823      	ldr	r3, [r4, #0]
 8025eea:	079b      	lsls	r3, r3, #30
 8025eec:	d413      	bmi.n	8025f16 <_printf_i+0x23a>
 8025eee:	68e0      	ldr	r0, [r4, #12]
 8025ef0:	9b03      	ldr	r3, [sp, #12]
 8025ef2:	4298      	cmp	r0, r3
 8025ef4:	bfb8      	it	lt
 8025ef6:	4618      	movlt	r0, r3
 8025ef8:	e7a4      	b.n	8025e44 <_printf_i+0x168>
 8025efa:	2301      	movs	r3, #1
 8025efc:	4632      	mov	r2, r6
 8025efe:	4649      	mov	r1, r9
 8025f00:	4640      	mov	r0, r8
 8025f02:	47d0      	blx	sl
 8025f04:	3001      	adds	r0, #1
 8025f06:	d09b      	beq.n	8025e40 <_printf_i+0x164>
 8025f08:	3501      	adds	r5, #1
 8025f0a:	68e3      	ldr	r3, [r4, #12]
 8025f0c:	9903      	ldr	r1, [sp, #12]
 8025f0e:	1a5b      	subs	r3, r3, r1
 8025f10:	42ab      	cmp	r3, r5
 8025f12:	dcf2      	bgt.n	8025efa <_printf_i+0x21e>
 8025f14:	e7eb      	b.n	8025eee <_printf_i+0x212>
 8025f16:	2500      	movs	r5, #0
 8025f18:	f104 0619 	add.w	r6, r4, #25
 8025f1c:	e7f5      	b.n	8025f0a <_printf_i+0x22e>
 8025f1e:	bf00      	nop
 8025f20:	0802a5c2 	.word	0x0802a5c2
 8025f24:	0802a5d3 	.word	0x0802a5d3

08025f28 <iprintf>:
 8025f28:	b40f      	push	{r0, r1, r2, r3}
 8025f2a:	4b0a      	ldr	r3, [pc, #40]	; (8025f54 <iprintf+0x2c>)
 8025f2c:	b513      	push	{r0, r1, r4, lr}
 8025f2e:	681c      	ldr	r4, [r3, #0]
 8025f30:	b124      	cbz	r4, 8025f3c <iprintf+0x14>
 8025f32:	69a3      	ldr	r3, [r4, #24]
 8025f34:	b913      	cbnz	r3, 8025f3c <iprintf+0x14>
 8025f36:	4620      	mov	r0, r4
 8025f38:	f7ff f942 	bl	80251c0 <__sinit>
 8025f3c:	ab05      	add	r3, sp, #20
 8025f3e:	9a04      	ldr	r2, [sp, #16]
 8025f40:	68a1      	ldr	r1, [r4, #8]
 8025f42:	9301      	str	r3, [sp, #4]
 8025f44:	4620      	mov	r0, r4
 8025f46:	f001 fe85 	bl	8027c54 <_vfiprintf_r>
 8025f4a:	b002      	add	sp, #8
 8025f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f50:	b004      	add	sp, #16
 8025f52:	4770      	bx	lr
 8025f54:	200000b8 	.word	0x200000b8

08025f58 <putchar>:
 8025f58:	4b09      	ldr	r3, [pc, #36]	; (8025f80 <putchar+0x28>)
 8025f5a:	b513      	push	{r0, r1, r4, lr}
 8025f5c:	681c      	ldr	r4, [r3, #0]
 8025f5e:	4601      	mov	r1, r0
 8025f60:	b134      	cbz	r4, 8025f70 <putchar+0x18>
 8025f62:	69a3      	ldr	r3, [r4, #24]
 8025f64:	b923      	cbnz	r3, 8025f70 <putchar+0x18>
 8025f66:	9001      	str	r0, [sp, #4]
 8025f68:	4620      	mov	r0, r4
 8025f6a:	f7ff f929 	bl	80251c0 <__sinit>
 8025f6e:	9901      	ldr	r1, [sp, #4]
 8025f70:	68a2      	ldr	r2, [r4, #8]
 8025f72:	4620      	mov	r0, r4
 8025f74:	b002      	add	sp, #8
 8025f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f7a:	f001 bf9b 	b.w	8027eb4 <_putc_r>
 8025f7e:	bf00      	nop
 8025f80:	200000b8 	.word	0x200000b8

08025f84 <_puts_r>:
 8025f84:	b570      	push	{r4, r5, r6, lr}
 8025f86:	460e      	mov	r6, r1
 8025f88:	4605      	mov	r5, r0
 8025f8a:	b118      	cbz	r0, 8025f94 <_puts_r+0x10>
 8025f8c:	6983      	ldr	r3, [r0, #24]
 8025f8e:	b90b      	cbnz	r3, 8025f94 <_puts_r+0x10>
 8025f90:	f7ff f916 	bl	80251c0 <__sinit>
 8025f94:	69ab      	ldr	r3, [r5, #24]
 8025f96:	68ac      	ldr	r4, [r5, #8]
 8025f98:	b913      	cbnz	r3, 8025fa0 <_puts_r+0x1c>
 8025f9a:	4628      	mov	r0, r5
 8025f9c:	f7ff f910 	bl	80251c0 <__sinit>
 8025fa0:	4b2c      	ldr	r3, [pc, #176]	; (8026054 <_puts_r+0xd0>)
 8025fa2:	429c      	cmp	r4, r3
 8025fa4:	d120      	bne.n	8025fe8 <_puts_r+0x64>
 8025fa6:	686c      	ldr	r4, [r5, #4]
 8025fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025faa:	07db      	lsls	r3, r3, #31
 8025fac:	d405      	bmi.n	8025fba <_puts_r+0x36>
 8025fae:	89a3      	ldrh	r3, [r4, #12]
 8025fb0:	0598      	lsls	r0, r3, #22
 8025fb2:	d402      	bmi.n	8025fba <_puts_r+0x36>
 8025fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025fb6:	f7ff f9c6 	bl	8025346 <__retarget_lock_acquire_recursive>
 8025fba:	89a3      	ldrh	r3, [r4, #12]
 8025fbc:	0719      	lsls	r1, r3, #28
 8025fbe:	d51d      	bpl.n	8025ffc <_puts_r+0x78>
 8025fc0:	6923      	ldr	r3, [r4, #16]
 8025fc2:	b1db      	cbz	r3, 8025ffc <_puts_r+0x78>
 8025fc4:	3e01      	subs	r6, #1
 8025fc6:	68a3      	ldr	r3, [r4, #8]
 8025fc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025fcc:	3b01      	subs	r3, #1
 8025fce:	60a3      	str	r3, [r4, #8]
 8025fd0:	bb39      	cbnz	r1, 8026022 <_puts_r+0x9e>
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	da38      	bge.n	8026048 <_puts_r+0xc4>
 8025fd6:	4622      	mov	r2, r4
 8025fd8:	210a      	movs	r1, #10
 8025fda:	4628      	mov	r0, r5
 8025fdc:	f000 f93a 	bl	8026254 <__swbuf_r>
 8025fe0:	3001      	adds	r0, #1
 8025fe2:	d011      	beq.n	8026008 <_puts_r+0x84>
 8025fe4:	250a      	movs	r5, #10
 8025fe6:	e011      	b.n	802600c <_puts_r+0x88>
 8025fe8:	4b1b      	ldr	r3, [pc, #108]	; (8026058 <_puts_r+0xd4>)
 8025fea:	429c      	cmp	r4, r3
 8025fec:	d101      	bne.n	8025ff2 <_puts_r+0x6e>
 8025fee:	68ac      	ldr	r4, [r5, #8]
 8025ff0:	e7da      	b.n	8025fa8 <_puts_r+0x24>
 8025ff2:	4b1a      	ldr	r3, [pc, #104]	; (802605c <_puts_r+0xd8>)
 8025ff4:	429c      	cmp	r4, r3
 8025ff6:	bf08      	it	eq
 8025ff8:	68ec      	ldreq	r4, [r5, #12]
 8025ffa:	e7d5      	b.n	8025fa8 <_puts_r+0x24>
 8025ffc:	4621      	mov	r1, r4
 8025ffe:	4628      	mov	r0, r5
 8026000:	f000 f98c 	bl	802631c <__swsetup_r>
 8026004:	2800      	cmp	r0, #0
 8026006:	d0dd      	beq.n	8025fc4 <_puts_r+0x40>
 8026008:	f04f 35ff 	mov.w	r5, #4294967295
 802600c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802600e:	07da      	lsls	r2, r3, #31
 8026010:	d405      	bmi.n	802601e <_puts_r+0x9a>
 8026012:	89a3      	ldrh	r3, [r4, #12]
 8026014:	059b      	lsls	r3, r3, #22
 8026016:	d402      	bmi.n	802601e <_puts_r+0x9a>
 8026018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802601a:	f7ff f995 	bl	8025348 <__retarget_lock_release_recursive>
 802601e:	4628      	mov	r0, r5
 8026020:	bd70      	pop	{r4, r5, r6, pc}
 8026022:	2b00      	cmp	r3, #0
 8026024:	da04      	bge.n	8026030 <_puts_r+0xac>
 8026026:	69a2      	ldr	r2, [r4, #24]
 8026028:	429a      	cmp	r2, r3
 802602a:	dc06      	bgt.n	802603a <_puts_r+0xb6>
 802602c:	290a      	cmp	r1, #10
 802602e:	d004      	beq.n	802603a <_puts_r+0xb6>
 8026030:	6823      	ldr	r3, [r4, #0]
 8026032:	1c5a      	adds	r2, r3, #1
 8026034:	6022      	str	r2, [r4, #0]
 8026036:	7019      	strb	r1, [r3, #0]
 8026038:	e7c5      	b.n	8025fc6 <_puts_r+0x42>
 802603a:	4622      	mov	r2, r4
 802603c:	4628      	mov	r0, r5
 802603e:	f000 f909 	bl	8026254 <__swbuf_r>
 8026042:	3001      	adds	r0, #1
 8026044:	d1bf      	bne.n	8025fc6 <_puts_r+0x42>
 8026046:	e7df      	b.n	8026008 <_puts_r+0x84>
 8026048:	6823      	ldr	r3, [r4, #0]
 802604a:	250a      	movs	r5, #10
 802604c:	1c5a      	adds	r2, r3, #1
 802604e:	6022      	str	r2, [r4, #0]
 8026050:	701d      	strb	r5, [r3, #0]
 8026052:	e7db      	b.n	802600c <_puts_r+0x88>
 8026054:	0802a56c 	.word	0x0802a56c
 8026058:	0802a58c 	.word	0x0802a58c
 802605c:	0802a54c 	.word	0x0802a54c

08026060 <puts>:
 8026060:	4b02      	ldr	r3, [pc, #8]	; (802606c <puts+0xc>)
 8026062:	4601      	mov	r1, r0
 8026064:	6818      	ldr	r0, [r3, #0]
 8026066:	f7ff bf8d 	b.w	8025f84 <_puts_r>
 802606a:	bf00      	nop
 802606c:	200000b8 	.word	0x200000b8

08026070 <_sbrk_r>:
 8026070:	b538      	push	{r3, r4, r5, lr}
 8026072:	4d06      	ldr	r5, [pc, #24]	; (802608c <_sbrk_r+0x1c>)
 8026074:	2300      	movs	r3, #0
 8026076:	4604      	mov	r4, r0
 8026078:	4608      	mov	r0, r1
 802607a:	602b      	str	r3, [r5, #0]
 802607c:	f7df f85e 	bl	800513c <_sbrk>
 8026080:	1c43      	adds	r3, r0, #1
 8026082:	d102      	bne.n	802608a <_sbrk_r+0x1a>
 8026084:	682b      	ldr	r3, [r5, #0]
 8026086:	b103      	cbz	r3, 802608a <_sbrk_r+0x1a>
 8026088:	6023      	str	r3, [r4, #0]
 802608a:	bd38      	pop	{r3, r4, r5, pc}
 802608c:	2000aa54 	.word	0x2000aa54

08026090 <siprintf>:
 8026090:	b40e      	push	{r1, r2, r3}
 8026092:	b500      	push	{lr}
 8026094:	b09c      	sub	sp, #112	; 0x70
 8026096:	ab1d      	add	r3, sp, #116	; 0x74
 8026098:	9002      	str	r0, [sp, #8]
 802609a:	9006      	str	r0, [sp, #24]
 802609c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80260a0:	4809      	ldr	r0, [pc, #36]	; (80260c8 <siprintf+0x38>)
 80260a2:	9107      	str	r1, [sp, #28]
 80260a4:	9104      	str	r1, [sp, #16]
 80260a6:	4909      	ldr	r1, [pc, #36]	; (80260cc <siprintf+0x3c>)
 80260a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80260ac:	9105      	str	r1, [sp, #20]
 80260ae:	6800      	ldr	r0, [r0, #0]
 80260b0:	9301      	str	r3, [sp, #4]
 80260b2:	a902      	add	r1, sp, #8
 80260b4:	f001 fca4 	bl	8027a00 <_svfiprintf_r>
 80260b8:	9b02      	ldr	r3, [sp, #8]
 80260ba:	2200      	movs	r2, #0
 80260bc:	701a      	strb	r2, [r3, #0]
 80260be:	b01c      	add	sp, #112	; 0x70
 80260c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80260c4:	b003      	add	sp, #12
 80260c6:	4770      	bx	lr
 80260c8:	200000b8 	.word	0x200000b8
 80260cc:	ffff0208 	.word	0xffff0208

080260d0 <__sread>:
 80260d0:	b510      	push	{r4, lr}
 80260d2:	460c      	mov	r4, r1
 80260d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260d8:	f001 ff34 	bl	8027f44 <_read_r>
 80260dc:	2800      	cmp	r0, #0
 80260de:	bfab      	itete	ge
 80260e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80260e2:	89a3      	ldrhlt	r3, [r4, #12]
 80260e4:	181b      	addge	r3, r3, r0
 80260e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80260ea:	bfac      	ite	ge
 80260ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80260ee:	81a3      	strhlt	r3, [r4, #12]
 80260f0:	bd10      	pop	{r4, pc}

080260f2 <__swrite>:
 80260f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80260f6:	461f      	mov	r7, r3
 80260f8:	898b      	ldrh	r3, [r1, #12]
 80260fa:	05db      	lsls	r3, r3, #23
 80260fc:	4605      	mov	r5, r0
 80260fe:	460c      	mov	r4, r1
 8026100:	4616      	mov	r6, r2
 8026102:	d505      	bpl.n	8026110 <__swrite+0x1e>
 8026104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026108:	2302      	movs	r3, #2
 802610a:	2200      	movs	r2, #0
 802610c:	f001 f824 	bl	8027158 <_lseek_r>
 8026110:	89a3      	ldrh	r3, [r4, #12]
 8026112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802611a:	81a3      	strh	r3, [r4, #12]
 802611c:	4632      	mov	r2, r6
 802611e:	463b      	mov	r3, r7
 8026120:	4628      	mov	r0, r5
 8026122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026126:	f000 b8e7 	b.w	80262f8 <_write_r>

0802612a <__sseek>:
 802612a:	b510      	push	{r4, lr}
 802612c:	460c      	mov	r4, r1
 802612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026132:	f001 f811 	bl	8027158 <_lseek_r>
 8026136:	1c43      	adds	r3, r0, #1
 8026138:	89a3      	ldrh	r3, [r4, #12]
 802613a:	bf15      	itete	ne
 802613c:	6560      	strne	r0, [r4, #84]	; 0x54
 802613e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026146:	81a3      	strheq	r3, [r4, #12]
 8026148:	bf18      	it	ne
 802614a:	81a3      	strhne	r3, [r4, #12]
 802614c:	bd10      	pop	{r4, pc}

0802614e <__sclose>:
 802614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026152:	f000 b951 	b.w	80263f8 <_close_r>

08026156 <strchr>:
 8026156:	b2c9      	uxtb	r1, r1
 8026158:	4603      	mov	r3, r0
 802615a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802615e:	b11a      	cbz	r2, 8026168 <strchr+0x12>
 8026160:	428a      	cmp	r2, r1
 8026162:	d1f9      	bne.n	8026158 <strchr+0x2>
 8026164:	4618      	mov	r0, r3
 8026166:	4770      	bx	lr
 8026168:	2900      	cmp	r1, #0
 802616a:	bf18      	it	ne
 802616c:	2300      	movne	r3, #0
 802616e:	e7f9      	b.n	8026164 <strchr+0xe>

08026170 <strncmp>:
 8026170:	b510      	push	{r4, lr}
 8026172:	b17a      	cbz	r2, 8026194 <strncmp+0x24>
 8026174:	4603      	mov	r3, r0
 8026176:	3901      	subs	r1, #1
 8026178:	1884      	adds	r4, r0, r2
 802617a:	f813 0b01 	ldrb.w	r0, [r3], #1
 802617e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8026182:	4290      	cmp	r0, r2
 8026184:	d101      	bne.n	802618a <strncmp+0x1a>
 8026186:	42a3      	cmp	r3, r4
 8026188:	d101      	bne.n	802618e <strncmp+0x1e>
 802618a:	1a80      	subs	r0, r0, r2
 802618c:	bd10      	pop	{r4, pc}
 802618e:	2800      	cmp	r0, #0
 8026190:	d1f3      	bne.n	802617a <strncmp+0xa>
 8026192:	e7fa      	b.n	802618a <strncmp+0x1a>
 8026194:	4610      	mov	r0, r2
 8026196:	e7f9      	b.n	802618c <strncmp+0x1c>

08026198 <strncpy>:
 8026198:	b510      	push	{r4, lr}
 802619a:	3901      	subs	r1, #1
 802619c:	4603      	mov	r3, r0
 802619e:	b132      	cbz	r2, 80261ae <strncpy+0x16>
 80261a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80261a4:	f803 4b01 	strb.w	r4, [r3], #1
 80261a8:	3a01      	subs	r2, #1
 80261aa:	2c00      	cmp	r4, #0
 80261ac:	d1f7      	bne.n	802619e <strncpy+0x6>
 80261ae:	441a      	add	r2, r3
 80261b0:	2100      	movs	r1, #0
 80261b2:	4293      	cmp	r3, r2
 80261b4:	d100      	bne.n	80261b8 <strncpy+0x20>
 80261b6:	bd10      	pop	{r4, pc}
 80261b8:	f803 1b01 	strb.w	r1, [r3], #1
 80261bc:	e7f9      	b.n	80261b2 <strncpy+0x1a>

080261be <strrchr>:
 80261be:	b538      	push	{r3, r4, r5, lr}
 80261c0:	4603      	mov	r3, r0
 80261c2:	460c      	mov	r4, r1
 80261c4:	b969      	cbnz	r1, 80261e2 <strrchr+0x24>
 80261c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261ca:	f7ff bfc4 	b.w	8026156 <strchr>
 80261ce:	1c43      	adds	r3, r0, #1
 80261d0:	4605      	mov	r5, r0
 80261d2:	4621      	mov	r1, r4
 80261d4:	4618      	mov	r0, r3
 80261d6:	f7ff ffbe 	bl	8026156 <strchr>
 80261da:	2800      	cmp	r0, #0
 80261dc:	d1f7      	bne.n	80261ce <strrchr+0x10>
 80261de:	4628      	mov	r0, r5
 80261e0:	bd38      	pop	{r3, r4, r5, pc}
 80261e2:	2500      	movs	r5, #0
 80261e4:	e7f5      	b.n	80261d2 <strrchr+0x14>

080261e6 <strstr>:
 80261e6:	780a      	ldrb	r2, [r1, #0]
 80261e8:	b570      	push	{r4, r5, r6, lr}
 80261ea:	b96a      	cbnz	r2, 8026208 <strstr+0x22>
 80261ec:	bd70      	pop	{r4, r5, r6, pc}
 80261ee:	429a      	cmp	r2, r3
 80261f0:	d109      	bne.n	8026206 <strstr+0x20>
 80261f2:	460c      	mov	r4, r1
 80261f4:	4605      	mov	r5, r0
 80261f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80261fa:	2b00      	cmp	r3, #0
 80261fc:	d0f6      	beq.n	80261ec <strstr+0x6>
 80261fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8026202:	429e      	cmp	r6, r3
 8026204:	d0f7      	beq.n	80261f6 <strstr+0x10>
 8026206:	3001      	adds	r0, #1
 8026208:	7803      	ldrb	r3, [r0, #0]
 802620a:	2b00      	cmp	r3, #0
 802620c:	d1ef      	bne.n	80261ee <strstr+0x8>
 802620e:	4618      	mov	r0, r3
 8026210:	e7ec      	b.n	80261ec <strstr+0x6>
	...

08026214 <_vsiprintf_r>:
 8026214:	b500      	push	{lr}
 8026216:	b09b      	sub	sp, #108	; 0x6c
 8026218:	9100      	str	r1, [sp, #0]
 802621a:	9104      	str	r1, [sp, #16]
 802621c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026220:	9105      	str	r1, [sp, #20]
 8026222:	9102      	str	r1, [sp, #8]
 8026224:	4905      	ldr	r1, [pc, #20]	; (802623c <_vsiprintf_r+0x28>)
 8026226:	9103      	str	r1, [sp, #12]
 8026228:	4669      	mov	r1, sp
 802622a:	f001 fbe9 	bl	8027a00 <_svfiprintf_r>
 802622e:	9b00      	ldr	r3, [sp, #0]
 8026230:	2200      	movs	r2, #0
 8026232:	701a      	strb	r2, [r3, #0]
 8026234:	b01b      	add	sp, #108	; 0x6c
 8026236:	f85d fb04 	ldr.w	pc, [sp], #4
 802623a:	bf00      	nop
 802623c:	ffff0208 	.word	0xffff0208

08026240 <vsiprintf>:
 8026240:	4613      	mov	r3, r2
 8026242:	460a      	mov	r2, r1
 8026244:	4601      	mov	r1, r0
 8026246:	4802      	ldr	r0, [pc, #8]	; (8026250 <vsiprintf+0x10>)
 8026248:	6800      	ldr	r0, [r0, #0]
 802624a:	f7ff bfe3 	b.w	8026214 <_vsiprintf_r>
 802624e:	bf00      	nop
 8026250:	200000b8 	.word	0x200000b8

08026254 <__swbuf_r>:
 8026254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026256:	460e      	mov	r6, r1
 8026258:	4614      	mov	r4, r2
 802625a:	4605      	mov	r5, r0
 802625c:	b118      	cbz	r0, 8026266 <__swbuf_r+0x12>
 802625e:	6983      	ldr	r3, [r0, #24]
 8026260:	b90b      	cbnz	r3, 8026266 <__swbuf_r+0x12>
 8026262:	f7fe ffad 	bl	80251c0 <__sinit>
 8026266:	4b21      	ldr	r3, [pc, #132]	; (80262ec <__swbuf_r+0x98>)
 8026268:	429c      	cmp	r4, r3
 802626a:	d12b      	bne.n	80262c4 <__swbuf_r+0x70>
 802626c:	686c      	ldr	r4, [r5, #4]
 802626e:	69a3      	ldr	r3, [r4, #24]
 8026270:	60a3      	str	r3, [r4, #8]
 8026272:	89a3      	ldrh	r3, [r4, #12]
 8026274:	071a      	lsls	r2, r3, #28
 8026276:	d52f      	bpl.n	80262d8 <__swbuf_r+0x84>
 8026278:	6923      	ldr	r3, [r4, #16]
 802627a:	b36b      	cbz	r3, 80262d8 <__swbuf_r+0x84>
 802627c:	6923      	ldr	r3, [r4, #16]
 802627e:	6820      	ldr	r0, [r4, #0]
 8026280:	1ac0      	subs	r0, r0, r3
 8026282:	6963      	ldr	r3, [r4, #20]
 8026284:	b2f6      	uxtb	r6, r6
 8026286:	4283      	cmp	r3, r0
 8026288:	4637      	mov	r7, r6
 802628a:	dc04      	bgt.n	8026296 <__swbuf_r+0x42>
 802628c:	4621      	mov	r1, r4
 802628e:	4628      	mov	r0, r5
 8026290:	f7fe ff02 	bl	8025098 <_fflush_r>
 8026294:	bb30      	cbnz	r0, 80262e4 <__swbuf_r+0x90>
 8026296:	68a3      	ldr	r3, [r4, #8]
 8026298:	3b01      	subs	r3, #1
 802629a:	60a3      	str	r3, [r4, #8]
 802629c:	6823      	ldr	r3, [r4, #0]
 802629e:	1c5a      	adds	r2, r3, #1
 80262a0:	6022      	str	r2, [r4, #0]
 80262a2:	701e      	strb	r6, [r3, #0]
 80262a4:	6963      	ldr	r3, [r4, #20]
 80262a6:	3001      	adds	r0, #1
 80262a8:	4283      	cmp	r3, r0
 80262aa:	d004      	beq.n	80262b6 <__swbuf_r+0x62>
 80262ac:	89a3      	ldrh	r3, [r4, #12]
 80262ae:	07db      	lsls	r3, r3, #31
 80262b0:	d506      	bpl.n	80262c0 <__swbuf_r+0x6c>
 80262b2:	2e0a      	cmp	r6, #10
 80262b4:	d104      	bne.n	80262c0 <__swbuf_r+0x6c>
 80262b6:	4621      	mov	r1, r4
 80262b8:	4628      	mov	r0, r5
 80262ba:	f7fe feed 	bl	8025098 <_fflush_r>
 80262be:	b988      	cbnz	r0, 80262e4 <__swbuf_r+0x90>
 80262c0:	4638      	mov	r0, r7
 80262c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262c4:	4b0a      	ldr	r3, [pc, #40]	; (80262f0 <__swbuf_r+0x9c>)
 80262c6:	429c      	cmp	r4, r3
 80262c8:	d101      	bne.n	80262ce <__swbuf_r+0x7a>
 80262ca:	68ac      	ldr	r4, [r5, #8]
 80262cc:	e7cf      	b.n	802626e <__swbuf_r+0x1a>
 80262ce:	4b09      	ldr	r3, [pc, #36]	; (80262f4 <__swbuf_r+0xa0>)
 80262d0:	429c      	cmp	r4, r3
 80262d2:	bf08      	it	eq
 80262d4:	68ec      	ldreq	r4, [r5, #12]
 80262d6:	e7ca      	b.n	802626e <__swbuf_r+0x1a>
 80262d8:	4621      	mov	r1, r4
 80262da:	4628      	mov	r0, r5
 80262dc:	f000 f81e 	bl	802631c <__swsetup_r>
 80262e0:	2800      	cmp	r0, #0
 80262e2:	d0cb      	beq.n	802627c <__swbuf_r+0x28>
 80262e4:	f04f 37ff 	mov.w	r7, #4294967295
 80262e8:	e7ea      	b.n	80262c0 <__swbuf_r+0x6c>
 80262ea:	bf00      	nop
 80262ec:	0802a56c 	.word	0x0802a56c
 80262f0:	0802a58c 	.word	0x0802a58c
 80262f4:	0802a54c 	.word	0x0802a54c

080262f8 <_write_r>:
 80262f8:	b538      	push	{r3, r4, r5, lr}
 80262fa:	4d07      	ldr	r5, [pc, #28]	; (8026318 <_write_r+0x20>)
 80262fc:	4604      	mov	r4, r0
 80262fe:	4608      	mov	r0, r1
 8026300:	4611      	mov	r1, r2
 8026302:	2200      	movs	r2, #0
 8026304:	602a      	str	r2, [r5, #0]
 8026306:	461a      	mov	r2, r3
 8026308:	f7dc fb5b 	bl	80029c2 <_write>
 802630c:	1c43      	adds	r3, r0, #1
 802630e:	d102      	bne.n	8026316 <_write_r+0x1e>
 8026310:	682b      	ldr	r3, [r5, #0]
 8026312:	b103      	cbz	r3, 8026316 <_write_r+0x1e>
 8026314:	6023      	str	r3, [r4, #0]
 8026316:	bd38      	pop	{r3, r4, r5, pc}
 8026318:	2000aa54 	.word	0x2000aa54

0802631c <__swsetup_r>:
 802631c:	4b32      	ldr	r3, [pc, #200]	; (80263e8 <__swsetup_r+0xcc>)
 802631e:	b570      	push	{r4, r5, r6, lr}
 8026320:	681d      	ldr	r5, [r3, #0]
 8026322:	4606      	mov	r6, r0
 8026324:	460c      	mov	r4, r1
 8026326:	b125      	cbz	r5, 8026332 <__swsetup_r+0x16>
 8026328:	69ab      	ldr	r3, [r5, #24]
 802632a:	b913      	cbnz	r3, 8026332 <__swsetup_r+0x16>
 802632c:	4628      	mov	r0, r5
 802632e:	f7fe ff47 	bl	80251c0 <__sinit>
 8026332:	4b2e      	ldr	r3, [pc, #184]	; (80263ec <__swsetup_r+0xd0>)
 8026334:	429c      	cmp	r4, r3
 8026336:	d10f      	bne.n	8026358 <__swsetup_r+0x3c>
 8026338:	686c      	ldr	r4, [r5, #4]
 802633a:	89a3      	ldrh	r3, [r4, #12]
 802633c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026340:	0719      	lsls	r1, r3, #28
 8026342:	d42c      	bmi.n	802639e <__swsetup_r+0x82>
 8026344:	06dd      	lsls	r5, r3, #27
 8026346:	d411      	bmi.n	802636c <__swsetup_r+0x50>
 8026348:	2309      	movs	r3, #9
 802634a:	6033      	str	r3, [r6, #0]
 802634c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026350:	81a3      	strh	r3, [r4, #12]
 8026352:	f04f 30ff 	mov.w	r0, #4294967295
 8026356:	e03e      	b.n	80263d6 <__swsetup_r+0xba>
 8026358:	4b25      	ldr	r3, [pc, #148]	; (80263f0 <__swsetup_r+0xd4>)
 802635a:	429c      	cmp	r4, r3
 802635c:	d101      	bne.n	8026362 <__swsetup_r+0x46>
 802635e:	68ac      	ldr	r4, [r5, #8]
 8026360:	e7eb      	b.n	802633a <__swsetup_r+0x1e>
 8026362:	4b24      	ldr	r3, [pc, #144]	; (80263f4 <__swsetup_r+0xd8>)
 8026364:	429c      	cmp	r4, r3
 8026366:	bf08      	it	eq
 8026368:	68ec      	ldreq	r4, [r5, #12]
 802636a:	e7e6      	b.n	802633a <__swsetup_r+0x1e>
 802636c:	0758      	lsls	r0, r3, #29
 802636e:	d512      	bpl.n	8026396 <__swsetup_r+0x7a>
 8026370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026372:	b141      	cbz	r1, 8026386 <__swsetup_r+0x6a>
 8026374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026378:	4299      	cmp	r1, r3
 802637a:	d002      	beq.n	8026382 <__swsetup_r+0x66>
 802637c:	4630      	mov	r0, r6
 802637e:	f7ff f889 	bl	8025494 <_free_r>
 8026382:	2300      	movs	r3, #0
 8026384:	6363      	str	r3, [r4, #52]	; 0x34
 8026386:	89a3      	ldrh	r3, [r4, #12]
 8026388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802638c:	81a3      	strh	r3, [r4, #12]
 802638e:	2300      	movs	r3, #0
 8026390:	6063      	str	r3, [r4, #4]
 8026392:	6923      	ldr	r3, [r4, #16]
 8026394:	6023      	str	r3, [r4, #0]
 8026396:	89a3      	ldrh	r3, [r4, #12]
 8026398:	f043 0308 	orr.w	r3, r3, #8
 802639c:	81a3      	strh	r3, [r4, #12]
 802639e:	6923      	ldr	r3, [r4, #16]
 80263a0:	b94b      	cbnz	r3, 80263b6 <__swsetup_r+0x9a>
 80263a2:	89a3      	ldrh	r3, [r4, #12]
 80263a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80263a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80263ac:	d003      	beq.n	80263b6 <__swsetup_r+0x9a>
 80263ae:	4621      	mov	r1, r4
 80263b0:	4630      	mov	r0, r6
 80263b2:	f7fe ffef 	bl	8025394 <__smakebuf_r>
 80263b6:	89a0      	ldrh	r0, [r4, #12]
 80263b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80263bc:	f010 0301 	ands.w	r3, r0, #1
 80263c0:	d00a      	beq.n	80263d8 <__swsetup_r+0xbc>
 80263c2:	2300      	movs	r3, #0
 80263c4:	60a3      	str	r3, [r4, #8]
 80263c6:	6963      	ldr	r3, [r4, #20]
 80263c8:	425b      	negs	r3, r3
 80263ca:	61a3      	str	r3, [r4, #24]
 80263cc:	6923      	ldr	r3, [r4, #16]
 80263ce:	b943      	cbnz	r3, 80263e2 <__swsetup_r+0xc6>
 80263d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80263d4:	d1ba      	bne.n	802634c <__swsetup_r+0x30>
 80263d6:	bd70      	pop	{r4, r5, r6, pc}
 80263d8:	0781      	lsls	r1, r0, #30
 80263da:	bf58      	it	pl
 80263dc:	6963      	ldrpl	r3, [r4, #20]
 80263de:	60a3      	str	r3, [r4, #8]
 80263e0:	e7f4      	b.n	80263cc <__swsetup_r+0xb0>
 80263e2:	2000      	movs	r0, #0
 80263e4:	e7f7      	b.n	80263d6 <__swsetup_r+0xba>
 80263e6:	bf00      	nop
 80263e8:	200000b8 	.word	0x200000b8
 80263ec:	0802a56c 	.word	0x0802a56c
 80263f0:	0802a58c 	.word	0x0802a58c
 80263f4:	0802a54c 	.word	0x0802a54c

080263f8 <_close_r>:
 80263f8:	b538      	push	{r3, r4, r5, lr}
 80263fa:	4d06      	ldr	r5, [pc, #24]	; (8026414 <_close_r+0x1c>)
 80263fc:	2300      	movs	r3, #0
 80263fe:	4604      	mov	r4, r0
 8026400:	4608      	mov	r0, r1
 8026402:	602b      	str	r3, [r5, #0]
 8026404:	f7de fe65 	bl	80050d2 <_close>
 8026408:	1c43      	adds	r3, r0, #1
 802640a:	d102      	bne.n	8026412 <_close_r+0x1a>
 802640c:	682b      	ldr	r3, [r5, #0]
 802640e:	b103      	cbz	r3, 8026412 <_close_r+0x1a>
 8026410:	6023      	str	r3, [r4, #0]
 8026412:	bd38      	pop	{r3, r4, r5, pc}
 8026414:	2000aa54 	.word	0x2000aa54

08026418 <quorem>:
 8026418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802641c:	6903      	ldr	r3, [r0, #16]
 802641e:	690c      	ldr	r4, [r1, #16]
 8026420:	42a3      	cmp	r3, r4
 8026422:	4607      	mov	r7, r0
 8026424:	f2c0 8081 	blt.w	802652a <quorem+0x112>
 8026428:	3c01      	subs	r4, #1
 802642a:	f101 0814 	add.w	r8, r1, #20
 802642e:	f100 0514 	add.w	r5, r0, #20
 8026432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026436:	9301      	str	r3, [sp, #4]
 8026438:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802643c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026440:	3301      	adds	r3, #1
 8026442:	429a      	cmp	r2, r3
 8026444:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026448:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802644c:	fbb2 f6f3 	udiv	r6, r2, r3
 8026450:	d331      	bcc.n	80264b6 <quorem+0x9e>
 8026452:	f04f 0e00 	mov.w	lr, #0
 8026456:	4640      	mov	r0, r8
 8026458:	46ac      	mov	ip, r5
 802645a:	46f2      	mov	sl, lr
 802645c:	f850 2b04 	ldr.w	r2, [r0], #4
 8026460:	b293      	uxth	r3, r2
 8026462:	fb06 e303 	mla	r3, r6, r3, lr
 8026466:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802646a:	b29b      	uxth	r3, r3
 802646c:	ebaa 0303 	sub.w	r3, sl, r3
 8026470:	f8dc a000 	ldr.w	sl, [ip]
 8026474:	0c12      	lsrs	r2, r2, #16
 8026476:	fa13 f38a 	uxtah	r3, r3, sl
 802647a:	fb06 e202 	mla	r2, r6, r2, lr
 802647e:	9300      	str	r3, [sp, #0]
 8026480:	9b00      	ldr	r3, [sp, #0]
 8026482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026486:	b292      	uxth	r2, r2
 8026488:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802648c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026490:	f8bd 3000 	ldrh.w	r3, [sp]
 8026494:	4581      	cmp	r9, r0
 8026496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802649a:	f84c 3b04 	str.w	r3, [ip], #4
 802649e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80264a2:	d2db      	bcs.n	802645c <quorem+0x44>
 80264a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80264a8:	b92b      	cbnz	r3, 80264b6 <quorem+0x9e>
 80264aa:	9b01      	ldr	r3, [sp, #4]
 80264ac:	3b04      	subs	r3, #4
 80264ae:	429d      	cmp	r5, r3
 80264b0:	461a      	mov	r2, r3
 80264b2:	d32e      	bcc.n	8026512 <quorem+0xfa>
 80264b4:	613c      	str	r4, [r7, #16]
 80264b6:	4638      	mov	r0, r7
 80264b8:	f001 f900 	bl	80276bc <__mcmp>
 80264bc:	2800      	cmp	r0, #0
 80264be:	db24      	blt.n	802650a <quorem+0xf2>
 80264c0:	3601      	adds	r6, #1
 80264c2:	4628      	mov	r0, r5
 80264c4:	f04f 0c00 	mov.w	ip, #0
 80264c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80264cc:	f8d0 e000 	ldr.w	lr, [r0]
 80264d0:	b293      	uxth	r3, r2
 80264d2:	ebac 0303 	sub.w	r3, ip, r3
 80264d6:	0c12      	lsrs	r2, r2, #16
 80264d8:	fa13 f38e 	uxtah	r3, r3, lr
 80264dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80264e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80264e4:	b29b      	uxth	r3, r3
 80264e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80264ea:	45c1      	cmp	r9, r8
 80264ec:	f840 3b04 	str.w	r3, [r0], #4
 80264f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80264f4:	d2e8      	bcs.n	80264c8 <quorem+0xb0>
 80264f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80264fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80264fe:	b922      	cbnz	r2, 802650a <quorem+0xf2>
 8026500:	3b04      	subs	r3, #4
 8026502:	429d      	cmp	r5, r3
 8026504:	461a      	mov	r2, r3
 8026506:	d30a      	bcc.n	802651e <quorem+0x106>
 8026508:	613c      	str	r4, [r7, #16]
 802650a:	4630      	mov	r0, r6
 802650c:	b003      	add	sp, #12
 802650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026512:	6812      	ldr	r2, [r2, #0]
 8026514:	3b04      	subs	r3, #4
 8026516:	2a00      	cmp	r2, #0
 8026518:	d1cc      	bne.n	80264b4 <quorem+0x9c>
 802651a:	3c01      	subs	r4, #1
 802651c:	e7c7      	b.n	80264ae <quorem+0x96>
 802651e:	6812      	ldr	r2, [r2, #0]
 8026520:	3b04      	subs	r3, #4
 8026522:	2a00      	cmp	r2, #0
 8026524:	d1f0      	bne.n	8026508 <quorem+0xf0>
 8026526:	3c01      	subs	r4, #1
 8026528:	e7eb      	b.n	8026502 <quorem+0xea>
 802652a:	2000      	movs	r0, #0
 802652c:	e7ee      	b.n	802650c <quorem+0xf4>
	...

08026530 <_dtoa_r>:
 8026530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026534:	ed2d 8b04 	vpush	{d8-d9}
 8026538:	ec57 6b10 	vmov	r6, r7, d0
 802653c:	b093      	sub	sp, #76	; 0x4c
 802653e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026544:	9106      	str	r1, [sp, #24]
 8026546:	ee10 aa10 	vmov	sl, s0
 802654a:	4604      	mov	r4, r0
 802654c:	9209      	str	r2, [sp, #36]	; 0x24
 802654e:	930c      	str	r3, [sp, #48]	; 0x30
 8026550:	46bb      	mov	fp, r7
 8026552:	b975      	cbnz	r5, 8026572 <_dtoa_r+0x42>
 8026554:	2010      	movs	r0, #16
 8026556:	f7fe ff5d 	bl	8025414 <malloc>
 802655a:	4602      	mov	r2, r0
 802655c:	6260      	str	r0, [r4, #36]	; 0x24
 802655e:	b920      	cbnz	r0, 802656a <_dtoa_r+0x3a>
 8026560:	4ba7      	ldr	r3, [pc, #668]	; (8026800 <_dtoa_r+0x2d0>)
 8026562:	21ea      	movs	r1, #234	; 0xea
 8026564:	48a7      	ldr	r0, [pc, #668]	; (8026804 <_dtoa_r+0x2d4>)
 8026566:	f001 fd0d 	bl	8027f84 <__assert_func>
 802656a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802656e:	6005      	str	r5, [r0, #0]
 8026570:	60c5      	str	r5, [r0, #12]
 8026572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026574:	6819      	ldr	r1, [r3, #0]
 8026576:	b151      	cbz	r1, 802658e <_dtoa_r+0x5e>
 8026578:	685a      	ldr	r2, [r3, #4]
 802657a:	604a      	str	r2, [r1, #4]
 802657c:	2301      	movs	r3, #1
 802657e:	4093      	lsls	r3, r2
 8026580:	608b      	str	r3, [r1, #8]
 8026582:	4620      	mov	r0, r4
 8026584:	f000 fe58 	bl	8027238 <_Bfree>
 8026588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802658a:	2200      	movs	r2, #0
 802658c:	601a      	str	r2, [r3, #0]
 802658e:	1e3b      	subs	r3, r7, #0
 8026590:	bfaa      	itet	ge
 8026592:	2300      	movge	r3, #0
 8026594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8026598:	f8c8 3000 	strge.w	r3, [r8]
 802659c:	4b9a      	ldr	r3, [pc, #616]	; (8026808 <_dtoa_r+0x2d8>)
 802659e:	bfbc      	itt	lt
 80265a0:	2201      	movlt	r2, #1
 80265a2:	f8c8 2000 	strlt.w	r2, [r8]
 80265a6:	ea33 030b 	bics.w	r3, r3, fp
 80265aa:	d11b      	bne.n	80265e4 <_dtoa_r+0xb4>
 80265ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80265ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80265b2:	6013      	str	r3, [r2, #0]
 80265b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80265b8:	4333      	orrs	r3, r6
 80265ba:	f000 8592 	beq.w	80270e2 <_dtoa_r+0xbb2>
 80265be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80265c0:	b963      	cbnz	r3, 80265dc <_dtoa_r+0xac>
 80265c2:	4b92      	ldr	r3, [pc, #584]	; (802680c <_dtoa_r+0x2dc>)
 80265c4:	e022      	b.n	802660c <_dtoa_r+0xdc>
 80265c6:	4b92      	ldr	r3, [pc, #584]	; (8026810 <_dtoa_r+0x2e0>)
 80265c8:	9301      	str	r3, [sp, #4]
 80265ca:	3308      	adds	r3, #8
 80265cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80265ce:	6013      	str	r3, [r2, #0]
 80265d0:	9801      	ldr	r0, [sp, #4]
 80265d2:	b013      	add	sp, #76	; 0x4c
 80265d4:	ecbd 8b04 	vpop	{d8-d9}
 80265d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265dc:	4b8b      	ldr	r3, [pc, #556]	; (802680c <_dtoa_r+0x2dc>)
 80265de:	9301      	str	r3, [sp, #4]
 80265e0:	3303      	adds	r3, #3
 80265e2:	e7f3      	b.n	80265cc <_dtoa_r+0x9c>
 80265e4:	2200      	movs	r2, #0
 80265e6:	2300      	movs	r3, #0
 80265e8:	4650      	mov	r0, sl
 80265ea:	4659      	mov	r1, fp
 80265ec:	f7da fa44 	bl	8000a78 <__aeabi_dcmpeq>
 80265f0:	ec4b ab19 	vmov	d9, sl, fp
 80265f4:	4680      	mov	r8, r0
 80265f6:	b158      	cbz	r0, 8026610 <_dtoa_r+0xe0>
 80265f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80265fa:	2301      	movs	r3, #1
 80265fc:	6013      	str	r3, [r2, #0]
 80265fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026600:	2b00      	cmp	r3, #0
 8026602:	f000 856b 	beq.w	80270dc <_dtoa_r+0xbac>
 8026606:	4883      	ldr	r0, [pc, #524]	; (8026814 <_dtoa_r+0x2e4>)
 8026608:	6018      	str	r0, [r3, #0]
 802660a:	1e43      	subs	r3, r0, #1
 802660c:	9301      	str	r3, [sp, #4]
 802660e:	e7df      	b.n	80265d0 <_dtoa_r+0xa0>
 8026610:	ec4b ab10 	vmov	d0, sl, fp
 8026614:	aa10      	add	r2, sp, #64	; 0x40
 8026616:	a911      	add	r1, sp, #68	; 0x44
 8026618:	4620      	mov	r0, r4
 802661a:	f001 f8f5 	bl	8027808 <__d2b>
 802661e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8026622:	ee08 0a10 	vmov	s16, r0
 8026626:	2d00      	cmp	r5, #0
 8026628:	f000 8084 	beq.w	8026734 <_dtoa_r+0x204>
 802662c:	ee19 3a90 	vmov	r3, s19
 8026630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8026638:	4656      	mov	r6, sl
 802663a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802663e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8026642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8026646:	4b74      	ldr	r3, [pc, #464]	; (8026818 <_dtoa_r+0x2e8>)
 8026648:	2200      	movs	r2, #0
 802664a:	4630      	mov	r0, r6
 802664c:	4639      	mov	r1, r7
 802664e:	f7d9 fdf3 	bl	8000238 <__aeabi_dsub>
 8026652:	a365      	add	r3, pc, #404	; (adr r3, 80267e8 <_dtoa_r+0x2b8>)
 8026654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026658:	f7d9 ffa6 	bl	80005a8 <__aeabi_dmul>
 802665c:	a364      	add	r3, pc, #400	; (adr r3, 80267f0 <_dtoa_r+0x2c0>)
 802665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026662:	f7d9 fdeb 	bl	800023c <__adddf3>
 8026666:	4606      	mov	r6, r0
 8026668:	4628      	mov	r0, r5
 802666a:	460f      	mov	r7, r1
 802666c:	f7d9 ff32 	bl	80004d4 <__aeabi_i2d>
 8026670:	a361      	add	r3, pc, #388	; (adr r3, 80267f8 <_dtoa_r+0x2c8>)
 8026672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026676:	f7d9 ff97 	bl	80005a8 <__aeabi_dmul>
 802667a:	4602      	mov	r2, r0
 802667c:	460b      	mov	r3, r1
 802667e:	4630      	mov	r0, r6
 8026680:	4639      	mov	r1, r7
 8026682:	f7d9 fddb 	bl	800023c <__adddf3>
 8026686:	4606      	mov	r6, r0
 8026688:	460f      	mov	r7, r1
 802668a:	f7da fa3d 	bl	8000b08 <__aeabi_d2iz>
 802668e:	2200      	movs	r2, #0
 8026690:	9000      	str	r0, [sp, #0]
 8026692:	2300      	movs	r3, #0
 8026694:	4630      	mov	r0, r6
 8026696:	4639      	mov	r1, r7
 8026698:	f7da f9f8 	bl	8000a8c <__aeabi_dcmplt>
 802669c:	b150      	cbz	r0, 80266b4 <_dtoa_r+0x184>
 802669e:	9800      	ldr	r0, [sp, #0]
 80266a0:	f7d9 ff18 	bl	80004d4 <__aeabi_i2d>
 80266a4:	4632      	mov	r2, r6
 80266a6:	463b      	mov	r3, r7
 80266a8:	f7da f9e6 	bl	8000a78 <__aeabi_dcmpeq>
 80266ac:	b910      	cbnz	r0, 80266b4 <_dtoa_r+0x184>
 80266ae:	9b00      	ldr	r3, [sp, #0]
 80266b0:	3b01      	subs	r3, #1
 80266b2:	9300      	str	r3, [sp, #0]
 80266b4:	9b00      	ldr	r3, [sp, #0]
 80266b6:	2b16      	cmp	r3, #22
 80266b8:	d85a      	bhi.n	8026770 <_dtoa_r+0x240>
 80266ba:	9a00      	ldr	r2, [sp, #0]
 80266bc:	4b57      	ldr	r3, [pc, #348]	; (802681c <_dtoa_r+0x2ec>)
 80266be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80266c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266c6:	ec51 0b19 	vmov	r0, r1, d9
 80266ca:	f7da f9df 	bl	8000a8c <__aeabi_dcmplt>
 80266ce:	2800      	cmp	r0, #0
 80266d0:	d050      	beq.n	8026774 <_dtoa_r+0x244>
 80266d2:	9b00      	ldr	r3, [sp, #0]
 80266d4:	3b01      	subs	r3, #1
 80266d6:	9300      	str	r3, [sp, #0]
 80266d8:	2300      	movs	r3, #0
 80266da:	930b      	str	r3, [sp, #44]	; 0x2c
 80266dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80266de:	1b5d      	subs	r5, r3, r5
 80266e0:	1e6b      	subs	r3, r5, #1
 80266e2:	9305      	str	r3, [sp, #20]
 80266e4:	bf45      	ittet	mi
 80266e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80266ea:	9304      	strmi	r3, [sp, #16]
 80266ec:	2300      	movpl	r3, #0
 80266ee:	2300      	movmi	r3, #0
 80266f0:	bf4c      	ite	mi
 80266f2:	9305      	strmi	r3, [sp, #20]
 80266f4:	9304      	strpl	r3, [sp, #16]
 80266f6:	9b00      	ldr	r3, [sp, #0]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	db3d      	blt.n	8026778 <_dtoa_r+0x248>
 80266fc:	9b05      	ldr	r3, [sp, #20]
 80266fe:	9a00      	ldr	r2, [sp, #0]
 8026700:	920a      	str	r2, [sp, #40]	; 0x28
 8026702:	4413      	add	r3, r2
 8026704:	9305      	str	r3, [sp, #20]
 8026706:	2300      	movs	r3, #0
 8026708:	9307      	str	r3, [sp, #28]
 802670a:	9b06      	ldr	r3, [sp, #24]
 802670c:	2b09      	cmp	r3, #9
 802670e:	f200 8089 	bhi.w	8026824 <_dtoa_r+0x2f4>
 8026712:	2b05      	cmp	r3, #5
 8026714:	bfc4      	itt	gt
 8026716:	3b04      	subgt	r3, #4
 8026718:	9306      	strgt	r3, [sp, #24]
 802671a:	9b06      	ldr	r3, [sp, #24]
 802671c:	f1a3 0302 	sub.w	r3, r3, #2
 8026720:	bfcc      	ite	gt
 8026722:	2500      	movgt	r5, #0
 8026724:	2501      	movle	r5, #1
 8026726:	2b03      	cmp	r3, #3
 8026728:	f200 8087 	bhi.w	802683a <_dtoa_r+0x30a>
 802672c:	e8df f003 	tbb	[pc, r3]
 8026730:	59383a2d 	.word	0x59383a2d
 8026734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026738:	441d      	add	r5, r3
 802673a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802673e:	2b20      	cmp	r3, #32
 8026740:	bfc1      	itttt	gt
 8026742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802674a:	fa0b f303 	lslgt.w	r3, fp, r3
 802674e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8026752:	bfda      	itte	le
 8026754:	f1c3 0320 	rsble	r3, r3, #32
 8026758:	fa06 f003 	lslle.w	r0, r6, r3
 802675c:	4318      	orrgt	r0, r3
 802675e:	f7d9 fea9 	bl	80004b4 <__aeabi_ui2d>
 8026762:	2301      	movs	r3, #1
 8026764:	4606      	mov	r6, r0
 8026766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802676a:	3d01      	subs	r5, #1
 802676c:	930e      	str	r3, [sp, #56]	; 0x38
 802676e:	e76a      	b.n	8026646 <_dtoa_r+0x116>
 8026770:	2301      	movs	r3, #1
 8026772:	e7b2      	b.n	80266da <_dtoa_r+0x1aa>
 8026774:	900b      	str	r0, [sp, #44]	; 0x2c
 8026776:	e7b1      	b.n	80266dc <_dtoa_r+0x1ac>
 8026778:	9b04      	ldr	r3, [sp, #16]
 802677a:	9a00      	ldr	r2, [sp, #0]
 802677c:	1a9b      	subs	r3, r3, r2
 802677e:	9304      	str	r3, [sp, #16]
 8026780:	4253      	negs	r3, r2
 8026782:	9307      	str	r3, [sp, #28]
 8026784:	2300      	movs	r3, #0
 8026786:	930a      	str	r3, [sp, #40]	; 0x28
 8026788:	e7bf      	b.n	802670a <_dtoa_r+0x1da>
 802678a:	2300      	movs	r3, #0
 802678c:	9308      	str	r3, [sp, #32]
 802678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026790:	2b00      	cmp	r3, #0
 8026792:	dc55      	bgt.n	8026840 <_dtoa_r+0x310>
 8026794:	2301      	movs	r3, #1
 8026796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802679a:	461a      	mov	r2, r3
 802679c:	9209      	str	r2, [sp, #36]	; 0x24
 802679e:	e00c      	b.n	80267ba <_dtoa_r+0x28a>
 80267a0:	2301      	movs	r3, #1
 80267a2:	e7f3      	b.n	802678c <_dtoa_r+0x25c>
 80267a4:	2300      	movs	r3, #0
 80267a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80267a8:	9308      	str	r3, [sp, #32]
 80267aa:	9b00      	ldr	r3, [sp, #0]
 80267ac:	4413      	add	r3, r2
 80267ae:	9302      	str	r3, [sp, #8]
 80267b0:	3301      	adds	r3, #1
 80267b2:	2b01      	cmp	r3, #1
 80267b4:	9303      	str	r3, [sp, #12]
 80267b6:	bfb8      	it	lt
 80267b8:	2301      	movlt	r3, #1
 80267ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80267bc:	2200      	movs	r2, #0
 80267be:	6042      	str	r2, [r0, #4]
 80267c0:	2204      	movs	r2, #4
 80267c2:	f102 0614 	add.w	r6, r2, #20
 80267c6:	429e      	cmp	r6, r3
 80267c8:	6841      	ldr	r1, [r0, #4]
 80267ca:	d93d      	bls.n	8026848 <_dtoa_r+0x318>
 80267cc:	4620      	mov	r0, r4
 80267ce:	f000 fcf3 	bl	80271b8 <_Balloc>
 80267d2:	9001      	str	r0, [sp, #4]
 80267d4:	2800      	cmp	r0, #0
 80267d6:	d13b      	bne.n	8026850 <_dtoa_r+0x320>
 80267d8:	4b11      	ldr	r3, [pc, #68]	; (8026820 <_dtoa_r+0x2f0>)
 80267da:	4602      	mov	r2, r0
 80267dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80267e0:	e6c0      	b.n	8026564 <_dtoa_r+0x34>
 80267e2:	2301      	movs	r3, #1
 80267e4:	e7df      	b.n	80267a6 <_dtoa_r+0x276>
 80267e6:	bf00      	nop
 80267e8:	636f4361 	.word	0x636f4361
 80267ec:	3fd287a7 	.word	0x3fd287a7
 80267f0:	8b60c8b3 	.word	0x8b60c8b3
 80267f4:	3fc68a28 	.word	0x3fc68a28
 80267f8:	509f79fb 	.word	0x509f79fb
 80267fc:	3fd34413 	.word	0x3fd34413
 8026800:	0802a5f1 	.word	0x0802a5f1
 8026804:	0802a608 	.word	0x0802a608
 8026808:	7ff00000 	.word	0x7ff00000
 802680c:	0802a5ed 	.word	0x0802a5ed
 8026810:	0802a5e4 	.word	0x0802a5e4
 8026814:	0802a5c1 	.word	0x0802a5c1
 8026818:	3ff80000 	.word	0x3ff80000
 802681c:	0802a708 	.word	0x0802a708
 8026820:	0802a663 	.word	0x0802a663
 8026824:	2501      	movs	r5, #1
 8026826:	2300      	movs	r3, #0
 8026828:	9306      	str	r3, [sp, #24]
 802682a:	9508      	str	r5, [sp, #32]
 802682c:	f04f 33ff 	mov.w	r3, #4294967295
 8026830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026834:	2200      	movs	r2, #0
 8026836:	2312      	movs	r3, #18
 8026838:	e7b0      	b.n	802679c <_dtoa_r+0x26c>
 802683a:	2301      	movs	r3, #1
 802683c:	9308      	str	r3, [sp, #32]
 802683e:	e7f5      	b.n	802682c <_dtoa_r+0x2fc>
 8026840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026846:	e7b8      	b.n	80267ba <_dtoa_r+0x28a>
 8026848:	3101      	adds	r1, #1
 802684a:	6041      	str	r1, [r0, #4]
 802684c:	0052      	lsls	r2, r2, #1
 802684e:	e7b8      	b.n	80267c2 <_dtoa_r+0x292>
 8026850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026852:	9a01      	ldr	r2, [sp, #4]
 8026854:	601a      	str	r2, [r3, #0]
 8026856:	9b03      	ldr	r3, [sp, #12]
 8026858:	2b0e      	cmp	r3, #14
 802685a:	f200 809d 	bhi.w	8026998 <_dtoa_r+0x468>
 802685e:	2d00      	cmp	r5, #0
 8026860:	f000 809a 	beq.w	8026998 <_dtoa_r+0x468>
 8026864:	9b00      	ldr	r3, [sp, #0]
 8026866:	2b00      	cmp	r3, #0
 8026868:	dd32      	ble.n	80268d0 <_dtoa_r+0x3a0>
 802686a:	4ab7      	ldr	r2, [pc, #732]	; (8026b48 <_dtoa_r+0x618>)
 802686c:	f003 030f 	and.w	r3, r3, #15
 8026870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026878:	9b00      	ldr	r3, [sp, #0]
 802687a:	05d8      	lsls	r0, r3, #23
 802687c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8026880:	d516      	bpl.n	80268b0 <_dtoa_r+0x380>
 8026882:	4bb2      	ldr	r3, [pc, #712]	; (8026b4c <_dtoa_r+0x61c>)
 8026884:	ec51 0b19 	vmov	r0, r1, d9
 8026888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802688c:	f7d9 ffb6 	bl	80007fc <__aeabi_ddiv>
 8026890:	f007 070f 	and.w	r7, r7, #15
 8026894:	4682      	mov	sl, r0
 8026896:	468b      	mov	fp, r1
 8026898:	2503      	movs	r5, #3
 802689a:	4eac      	ldr	r6, [pc, #688]	; (8026b4c <_dtoa_r+0x61c>)
 802689c:	b957      	cbnz	r7, 80268b4 <_dtoa_r+0x384>
 802689e:	4642      	mov	r2, r8
 80268a0:	464b      	mov	r3, r9
 80268a2:	4650      	mov	r0, sl
 80268a4:	4659      	mov	r1, fp
 80268a6:	f7d9 ffa9 	bl	80007fc <__aeabi_ddiv>
 80268aa:	4682      	mov	sl, r0
 80268ac:	468b      	mov	fp, r1
 80268ae:	e028      	b.n	8026902 <_dtoa_r+0x3d2>
 80268b0:	2502      	movs	r5, #2
 80268b2:	e7f2      	b.n	802689a <_dtoa_r+0x36a>
 80268b4:	07f9      	lsls	r1, r7, #31
 80268b6:	d508      	bpl.n	80268ca <_dtoa_r+0x39a>
 80268b8:	4640      	mov	r0, r8
 80268ba:	4649      	mov	r1, r9
 80268bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80268c0:	f7d9 fe72 	bl	80005a8 <__aeabi_dmul>
 80268c4:	3501      	adds	r5, #1
 80268c6:	4680      	mov	r8, r0
 80268c8:	4689      	mov	r9, r1
 80268ca:	107f      	asrs	r7, r7, #1
 80268cc:	3608      	adds	r6, #8
 80268ce:	e7e5      	b.n	802689c <_dtoa_r+0x36c>
 80268d0:	f000 809b 	beq.w	8026a0a <_dtoa_r+0x4da>
 80268d4:	9b00      	ldr	r3, [sp, #0]
 80268d6:	4f9d      	ldr	r7, [pc, #628]	; (8026b4c <_dtoa_r+0x61c>)
 80268d8:	425e      	negs	r6, r3
 80268da:	4b9b      	ldr	r3, [pc, #620]	; (8026b48 <_dtoa_r+0x618>)
 80268dc:	f006 020f 	and.w	r2, r6, #15
 80268e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80268e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268e8:	ec51 0b19 	vmov	r0, r1, d9
 80268ec:	f7d9 fe5c 	bl	80005a8 <__aeabi_dmul>
 80268f0:	1136      	asrs	r6, r6, #4
 80268f2:	4682      	mov	sl, r0
 80268f4:	468b      	mov	fp, r1
 80268f6:	2300      	movs	r3, #0
 80268f8:	2502      	movs	r5, #2
 80268fa:	2e00      	cmp	r6, #0
 80268fc:	d17a      	bne.n	80269f4 <_dtoa_r+0x4c4>
 80268fe:	2b00      	cmp	r3, #0
 8026900:	d1d3      	bne.n	80268aa <_dtoa_r+0x37a>
 8026902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026904:	2b00      	cmp	r3, #0
 8026906:	f000 8082 	beq.w	8026a0e <_dtoa_r+0x4de>
 802690a:	4b91      	ldr	r3, [pc, #580]	; (8026b50 <_dtoa_r+0x620>)
 802690c:	2200      	movs	r2, #0
 802690e:	4650      	mov	r0, sl
 8026910:	4659      	mov	r1, fp
 8026912:	f7da f8bb 	bl	8000a8c <__aeabi_dcmplt>
 8026916:	2800      	cmp	r0, #0
 8026918:	d079      	beq.n	8026a0e <_dtoa_r+0x4de>
 802691a:	9b03      	ldr	r3, [sp, #12]
 802691c:	2b00      	cmp	r3, #0
 802691e:	d076      	beq.n	8026a0e <_dtoa_r+0x4de>
 8026920:	9b02      	ldr	r3, [sp, #8]
 8026922:	2b00      	cmp	r3, #0
 8026924:	dd36      	ble.n	8026994 <_dtoa_r+0x464>
 8026926:	9b00      	ldr	r3, [sp, #0]
 8026928:	4650      	mov	r0, sl
 802692a:	4659      	mov	r1, fp
 802692c:	1e5f      	subs	r7, r3, #1
 802692e:	2200      	movs	r2, #0
 8026930:	4b88      	ldr	r3, [pc, #544]	; (8026b54 <_dtoa_r+0x624>)
 8026932:	f7d9 fe39 	bl	80005a8 <__aeabi_dmul>
 8026936:	9e02      	ldr	r6, [sp, #8]
 8026938:	4682      	mov	sl, r0
 802693a:	468b      	mov	fp, r1
 802693c:	3501      	adds	r5, #1
 802693e:	4628      	mov	r0, r5
 8026940:	f7d9 fdc8 	bl	80004d4 <__aeabi_i2d>
 8026944:	4652      	mov	r2, sl
 8026946:	465b      	mov	r3, fp
 8026948:	f7d9 fe2e 	bl	80005a8 <__aeabi_dmul>
 802694c:	4b82      	ldr	r3, [pc, #520]	; (8026b58 <_dtoa_r+0x628>)
 802694e:	2200      	movs	r2, #0
 8026950:	f7d9 fc74 	bl	800023c <__adddf3>
 8026954:	46d0      	mov	r8, sl
 8026956:	46d9      	mov	r9, fp
 8026958:	4682      	mov	sl, r0
 802695a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802695e:	2e00      	cmp	r6, #0
 8026960:	d158      	bne.n	8026a14 <_dtoa_r+0x4e4>
 8026962:	4b7e      	ldr	r3, [pc, #504]	; (8026b5c <_dtoa_r+0x62c>)
 8026964:	2200      	movs	r2, #0
 8026966:	4640      	mov	r0, r8
 8026968:	4649      	mov	r1, r9
 802696a:	f7d9 fc65 	bl	8000238 <__aeabi_dsub>
 802696e:	4652      	mov	r2, sl
 8026970:	465b      	mov	r3, fp
 8026972:	4680      	mov	r8, r0
 8026974:	4689      	mov	r9, r1
 8026976:	f7da f8a7 	bl	8000ac8 <__aeabi_dcmpgt>
 802697a:	2800      	cmp	r0, #0
 802697c:	f040 8295 	bne.w	8026eaa <_dtoa_r+0x97a>
 8026980:	4652      	mov	r2, sl
 8026982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8026986:	4640      	mov	r0, r8
 8026988:	4649      	mov	r1, r9
 802698a:	f7da f87f 	bl	8000a8c <__aeabi_dcmplt>
 802698e:	2800      	cmp	r0, #0
 8026990:	f040 8289 	bne.w	8026ea6 <_dtoa_r+0x976>
 8026994:	ec5b ab19 	vmov	sl, fp, d9
 8026998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802699a:	2b00      	cmp	r3, #0
 802699c:	f2c0 8148 	blt.w	8026c30 <_dtoa_r+0x700>
 80269a0:	9a00      	ldr	r2, [sp, #0]
 80269a2:	2a0e      	cmp	r2, #14
 80269a4:	f300 8144 	bgt.w	8026c30 <_dtoa_r+0x700>
 80269a8:	4b67      	ldr	r3, [pc, #412]	; (8026b48 <_dtoa_r+0x618>)
 80269aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80269ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80269b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269b4:	2b00      	cmp	r3, #0
 80269b6:	f280 80d5 	bge.w	8026b64 <_dtoa_r+0x634>
 80269ba:	9b03      	ldr	r3, [sp, #12]
 80269bc:	2b00      	cmp	r3, #0
 80269be:	f300 80d1 	bgt.w	8026b64 <_dtoa_r+0x634>
 80269c2:	f040 826f 	bne.w	8026ea4 <_dtoa_r+0x974>
 80269c6:	4b65      	ldr	r3, [pc, #404]	; (8026b5c <_dtoa_r+0x62c>)
 80269c8:	2200      	movs	r2, #0
 80269ca:	4640      	mov	r0, r8
 80269cc:	4649      	mov	r1, r9
 80269ce:	f7d9 fdeb 	bl	80005a8 <__aeabi_dmul>
 80269d2:	4652      	mov	r2, sl
 80269d4:	465b      	mov	r3, fp
 80269d6:	f7da f86d 	bl	8000ab4 <__aeabi_dcmpge>
 80269da:	9e03      	ldr	r6, [sp, #12]
 80269dc:	4637      	mov	r7, r6
 80269de:	2800      	cmp	r0, #0
 80269e0:	f040 8245 	bne.w	8026e6e <_dtoa_r+0x93e>
 80269e4:	9d01      	ldr	r5, [sp, #4]
 80269e6:	2331      	movs	r3, #49	; 0x31
 80269e8:	f805 3b01 	strb.w	r3, [r5], #1
 80269ec:	9b00      	ldr	r3, [sp, #0]
 80269ee:	3301      	adds	r3, #1
 80269f0:	9300      	str	r3, [sp, #0]
 80269f2:	e240      	b.n	8026e76 <_dtoa_r+0x946>
 80269f4:	07f2      	lsls	r2, r6, #31
 80269f6:	d505      	bpl.n	8026a04 <_dtoa_r+0x4d4>
 80269f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80269fc:	f7d9 fdd4 	bl	80005a8 <__aeabi_dmul>
 8026a00:	3501      	adds	r5, #1
 8026a02:	2301      	movs	r3, #1
 8026a04:	1076      	asrs	r6, r6, #1
 8026a06:	3708      	adds	r7, #8
 8026a08:	e777      	b.n	80268fa <_dtoa_r+0x3ca>
 8026a0a:	2502      	movs	r5, #2
 8026a0c:	e779      	b.n	8026902 <_dtoa_r+0x3d2>
 8026a0e:	9f00      	ldr	r7, [sp, #0]
 8026a10:	9e03      	ldr	r6, [sp, #12]
 8026a12:	e794      	b.n	802693e <_dtoa_r+0x40e>
 8026a14:	9901      	ldr	r1, [sp, #4]
 8026a16:	4b4c      	ldr	r3, [pc, #304]	; (8026b48 <_dtoa_r+0x618>)
 8026a18:	4431      	add	r1, r6
 8026a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8026a1c:	9908      	ldr	r1, [sp, #32]
 8026a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8026a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026a26:	2900      	cmp	r1, #0
 8026a28:	d043      	beq.n	8026ab2 <_dtoa_r+0x582>
 8026a2a:	494d      	ldr	r1, [pc, #308]	; (8026b60 <_dtoa_r+0x630>)
 8026a2c:	2000      	movs	r0, #0
 8026a2e:	f7d9 fee5 	bl	80007fc <__aeabi_ddiv>
 8026a32:	4652      	mov	r2, sl
 8026a34:	465b      	mov	r3, fp
 8026a36:	f7d9 fbff 	bl	8000238 <__aeabi_dsub>
 8026a3a:	9d01      	ldr	r5, [sp, #4]
 8026a3c:	4682      	mov	sl, r0
 8026a3e:	468b      	mov	fp, r1
 8026a40:	4649      	mov	r1, r9
 8026a42:	4640      	mov	r0, r8
 8026a44:	f7da f860 	bl	8000b08 <__aeabi_d2iz>
 8026a48:	4606      	mov	r6, r0
 8026a4a:	f7d9 fd43 	bl	80004d4 <__aeabi_i2d>
 8026a4e:	4602      	mov	r2, r0
 8026a50:	460b      	mov	r3, r1
 8026a52:	4640      	mov	r0, r8
 8026a54:	4649      	mov	r1, r9
 8026a56:	f7d9 fbef 	bl	8000238 <__aeabi_dsub>
 8026a5a:	3630      	adds	r6, #48	; 0x30
 8026a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8026a60:	4652      	mov	r2, sl
 8026a62:	465b      	mov	r3, fp
 8026a64:	4680      	mov	r8, r0
 8026a66:	4689      	mov	r9, r1
 8026a68:	f7da f810 	bl	8000a8c <__aeabi_dcmplt>
 8026a6c:	2800      	cmp	r0, #0
 8026a6e:	d163      	bne.n	8026b38 <_dtoa_r+0x608>
 8026a70:	4642      	mov	r2, r8
 8026a72:	464b      	mov	r3, r9
 8026a74:	4936      	ldr	r1, [pc, #216]	; (8026b50 <_dtoa_r+0x620>)
 8026a76:	2000      	movs	r0, #0
 8026a78:	f7d9 fbde 	bl	8000238 <__aeabi_dsub>
 8026a7c:	4652      	mov	r2, sl
 8026a7e:	465b      	mov	r3, fp
 8026a80:	f7da f804 	bl	8000a8c <__aeabi_dcmplt>
 8026a84:	2800      	cmp	r0, #0
 8026a86:	f040 80b5 	bne.w	8026bf4 <_dtoa_r+0x6c4>
 8026a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026a8c:	429d      	cmp	r5, r3
 8026a8e:	d081      	beq.n	8026994 <_dtoa_r+0x464>
 8026a90:	4b30      	ldr	r3, [pc, #192]	; (8026b54 <_dtoa_r+0x624>)
 8026a92:	2200      	movs	r2, #0
 8026a94:	4650      	mov	r0, sl
 8026a96:	4659      	mov	r1, fp
 8026a98:	f7d9 fd86 	bl	80005a8 <__aeabi_dmul>
 8026a9c:	4b2d      	ldr	r3, [pc, #180]	; (8026b54 <_dtoa_r+0x624>)
 8026a9e:	4682      	mov	sl, r0
 8026aa0:	468b      	mov	fp, r1
 8026aa2:	4640      	mov	r0, r8
 8026aa4:	4649      	mov	r1, r9
 8026aa6:	2200      	movs	r2, #0
 8026aa8:	f7d9 fd7e 	bl	80005a8 <__aeabi_dmul>
 8026aac:	4680      	mov	r8, r0
 8026aae:	4689      	mov	r9, r1
 8026ab0:	e7c6      	b.n	8026a40 <_dtoa_r+0x510>
 8026ab2:	4650      	mov	r0, sl
 8026ab4:	4659      	mov	r1, fp
 8026ab6:	f7d9 fd77 	bl	80005a8 <__aeabi_dmul>
 8026aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026abc:	9d01      	ldr	r5, [sp, #4]
 8026abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ac0:	4682      	mov	sl, r0
 8026ac2:	468b      	mov	fp, r1
 8026ac4:	4649      	mov	r1, r9
 8026ac6:	4640      	mov	r0, r8
 8026ac8:	f7da f81e 	bl	8000b08 <__aeabi_d2iz>
 8026acc:	4606      	mov	r6, r0
 8026ace:	f7d9 fd01 	bl	80004d4 <__aeabi_i2d>
 8026ad2:	3630      	adds	r6, #48	; 0x30
 8026ad4:	4602      	mov	r2, r0
 8026ad6:	460b      	mov	r3, r1
 8026ad8:	4640      	mov	r0, r8
 8026ada:	4649      	mov	r1, r9
 8026adc:	f7d9 fbac 	bl	8000238 <__aeabi_dsub>
 8026ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8026ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026ae6:	429d      	cmp	r5, r3
 8026ae8:	4680      	mov	r8, r0
 8026aea:	4689      	mov	r9, r1
 8026aec:	f04f 0200 	mov.w	r2, #0
 8026af0:	d124      	bne.n	8026b3c <_dtoa_r+0x60c>
 8026af2:	4b1b      	ldr	r3, [pc, #108]	; (8026b60 <_dtoa_r+0x630>)
 8026af4:	4650      	mov	r0, sl
 8026af6:	4659      	mov	r1, fp
 8026af8:	f7d9 fba0 	bl	800023c <__adddf3>
 8026afc:	4602      	mov	r2, r0
 8026afe:	460b      	mov	r3, r1
 8026b00:	4640      	mov	r0, r8
 8026b02:	4649      	mov	r1, r9
 8026b04:	f7d9 ffe0 	bl	8000ac8 <__aeabi_dcmpgt>
 8026b08:	2800      	cmp	r0, #0
 8026b0a:	d173      	bne.n	8026bf4 <_dtoa_r+0x6c4>
 8026b0c:	4652      	mov	r2, sl
 8026b0e:	465b      	mov	r3, fp
 8026b10:	4913      	ldr	r1, [pc, #76]	; (8026b60 <_dtoa_r+0x630>)
 8026b12:	2000      	movs	r0, #0
 8026b14:	f7d9 fb90 	bl	8000238 <__aeabi_dsub>
 8026b18:	4602      	mov	r2, r0
 8026b1a:	460b      	mov	r3, r1
 8026b1c:	4640      	mov	r0, r8
 8026b1e:	4649      	mov	r1, r9
 8026b20:	f7d9 ffb4 	bl	8000a8c <__aeabi_dcmplt>
 8026b24:	2800      	cmp	r0, #0
 8026b26:	f43f af35 	beq.w	8026994 <_dtoa_r+0x464>
 8026b2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026b2c:	1e6b      	subs	r3, r5, #1
 8026b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026b30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026b34:	2b30      	cmp	r3, #48	; 0x30
 8026b36:	d0f8      	beq.n	8026b2a <_dtoa_r+0x5fa>
 8026b38:	9700      	str	r7, [sp, #0]
 8026b3a:	e049      	b.n	8026bd0 <_dtoa_r+0x6a0>
 8026b3c:	4b05      	ldr	r3, [pc, #20]	; (8026b54 <_dtoa_r+0x624>)
 8026b3e:	f7d9 fd33 	bl	80005a8 <__aeabi_dmul>
 8026b42:	4680      	mov	r8, r0
 8026b44:	4689      	mov	r9, r1
 8026b46:	e7bd      	b.n	8026ac4 <_dtoa_r+0x594>
 8026b48:	0802a708 	.word	0x0802a708
 8026b4c:	0802a6e0 	.word	0x0802a6e0
 8026b50:	3ff00000 	.word	0x3ff00000
 8026b54:	40240000 	.word	0x40240000
 8026b58:	401c0000 	.word	0x401c0000
 8026b5c:	40140000 	.word	0x40140000
 8026b60:	3fe00000 	.word	0x3fe00000
 8026b64:	9d01      	ldr	r5, [sp, #4]
 8026b66:	4656      	mov	r6, sl
 8026b68:	465f      	mov	r7, fp
 8026b6a:	4642      	mov	r2, r8
 8026b6c:	464b      	mov	r3, r9
 8026b6e:	4630      	mov	r0, r6
 8026b70:	4639      	mov	r1, r7
 8026b72:	f7d9 fe43 	bl	80007fc <__aeabi_ddiv>
 8026b76:	f7d9 ffc7 	bl	8000b08 <__aeabi_d2iz>
 8026b7a:	4682      	mov	sl, r0
 8026b7c:	f7d9 fcaa 	bl	80004d4 <__aeabi_i2d>
 8026b80:	4642      	mov	r2, r8
 8026b82:	464b      	mov	r3, r9
 8026b84:	f7d9 fd10 	bl	80005a8 <__aeabi_dmul>
 8026b88:	4602      	mov	r2, r0
 8026b8a:	460b      	mov	r3, r1
 8026b8c:	4630      	mov	r0, r6
 8026b8e:	4639      	mov	r1, r7
 8026b90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8026b94:	f7d9 fb50 	bl	8000238 <__aeabi_dsub>
 8026b98:	f805 6b01 	strb.w	r6, [r5], #1
 8026b9c:	9e01      	ldr	r6, [sp, #4]
 8026b9e:	9f03      	ldr	r7, [sp, #12]
 8026ba0:	1bae      	subs	r6, r5, r6
 8026ba2:	42b7      	cmp	r7, r6
 8026ba4:	4602      	mov	r2, r0
 8026ba6:	460b      	mov	r3, r1
 8026ba8:	d135      	bne.n	8026c16 <_dtoa_r+0x6e6>
 8026baa:	f7d9 fb47 	bl	800023c <__adddf3>
 8026bae:	4642      	mov	r2, r8
 8026bb0:	464b      	mov	r3, r9
 8026bb2:	4606      	mov	r6, r0
 8026bb4:	460f      	mov	r7, r1
 8026bb6:	f7d9 ff87 	bl	8000ac8 <__aeabi_dcmpgt>
 8026bba:	b9d0      	cbnz	r0, 8026bf2 <_dtoa_r+0x6c2>
 8026bbc:	4642      	mov	r2, r8
 8026bbe:	464b      	mov	r3, r9
 8026bc0:	4630      	mov	r0, r6
 8026bc2:	4639      	mov	r1, r7
 8026bc4:	f7d9 ff58 	bl	8000a78 <__aeabi_dcmpeq>
 8026bc8:	b110      	cbz	r0, 8026bd0 <_dtoa_r+0x6a0>
 8026bca:	f01a 0f01 	tst.w	sl, #1
 8026bce:	d110      	bne.n	8026bf2 <_dtoa_r+0x6c2>
 8026bd0:	4620      	mov	r0, r4
 8026bd2:	ee18 1a10 	vmov	r1, s16
 8026bd6:	f000 fb2f 	bl	8027238 <_Bfree>
 8026bda:	2300      	movs	r3, #0
 8026bdc:	9800      	ldr	r0, [sp, #0]
 8026bde:	702b      	strb	r3, [r5, #0]
 8026be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026be2:	3001      	adds	r0, #1
 8026be4:	6018      	str	r0, [r3, #0]
 8026be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026be8:	2b00      	cmp	r3, #0
 8026bea:	f43f acf1 	beq.w	80265d0 <_dtoa_r+0xa0>
 8026bee:	601d      	str	r5, [r3, #0]
 8026bf0:	e4ee      	b.n	80265d0 <_dtoa_r+0xa0>
 8026bf2:	9f00      	ldr	r7, [sp, #0]
 8026bf4:	462b      	mov	r3, r5
 8026bf6:	461d      	mov	r5, r3
 8026bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026bfc:	2a39      	cmp	r2, #57	; 0x39
 8026bfe:	d106      	bne.n	8026c0e <_dtoa_r+0x6de>
 8026c00:	9a01      	ldr	r2, [sp, #4]
 8026c02:	429a      	cmp	r2, r3
 8026c04:	d1f7      	bne.n	8026bf6 <_dtoa_r+0x6c6>
 8026c06:	9901      	ldr	r1, [sp, #4]
 8026c08:	2230      	movs	r2, #48	; 0x30
 8026c0a:	3701      	adds	r7, #1
 8026c0c:	700a      	strb	r2, [r1, #0]
 8026c0e:	781a      	ldrb	r2, [r3, #0]
 8026c10:	3201      	adds	r2, #1
 8026c12:	701a      	strb	r2, [r3, #0]
 8026c14:	e790      	b.n	8026b38 <_dtoa_r+0x608>
 8026c16:	4ba6      	ldr	r3, [pc, #664]	; (8026eb0 <_dtoa_r+0x980>)
 8026c18:	2200      	movs	r2, #0
 8026c1a:	f7d9 fcc5 	bl	80005a8 <__aeabi_dmul>
 8026c1e:	2200      	movs	r2, #0
 8026c20:	2300      	movs	r3, #0
 8026c22:	4606      	mov	r6, r0
 8026c24:	460f      	mov	r7, r1
 8026c26:	f7d9 ff27 	bl	8000a78 <__aeabi_dcmpeq>
 8026c2a:	2800      	cmp	r0, #0
 8026c2c:	d09d      	beq.n	8026b6a <_dtoa_r+0x63a>
 8026c2e:	e7cf      	b.n	8026bd0 <_dtoa_r+0x6a0>
 8026c30:	9a08      	ldr	r2, [sp, #32]
 8026c32:	2a00      	cmp	r2, #0
 8026c34:	f000 80d7 	beq.w	8026de6 <_dtoa_r+0x8b6>
 8026c38:	9a06      	ldr	r2, [sp, #24]
 8026c3a:	2a01      	cmp	r2, #1
 8026c3c:	f300 80ba 	bgt.w	8026db4 <_dtoa_r+0x884>
 8026c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026c42:	2a00      	cmp	r2, #0
 8026c44:	f000 80b2 	beq.w	8026dac <_dtoa_r+0x87c>
 8026c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8026c4c:	9e07      	ldr	r6, [sp, #28]
 8026c4e:	9d04      	ldr	r5, [sp, #16]
 8026c50:	9a04      	ldr	r2, [sp, #16]
 8026c52:	441a      	add	r2, r3
 8026c54:	9204      	str	r2, [sp, #16]
 8026c56:	9a05      	ldr	r2, [sp, #20]
 8026c58:	2101      	movs	r1, #1
 8026c5a:	441a      	add	r2, r3
 8026c5c:	4620      	mov	r0, r4
 8026c5e:	9205      	str	r2, [sp, #20]
 8026c60:	f000 fba2 	bl	80273a8 <__i2b>
 8026c64:	4607      	mov	r7, r0
 8026c66:	2d00      	cmp	r5, #0
 8026c68:	dd0c      	ble.n	8026c84 <_dtoa_r+0x754>
 8026c6a:	9b05      	ldr	r3, [sp, #20]
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	dd09      	ble.n	8026c84 <_dtoa_r+0x754>
 8026c70:	42ab      	cmp	r3, r5
 8026c72:	9a04      	ldr	r2, [sp, #16]
 8026c74:	bfa8      	it	ge
 8026c76:	462b      	movge	r3, r5
 8026c78:	1ad2      	subs	r2, r2, r3
 8026c7a:	9204      	str	r2, [sp, #16]
 8026c7c:	9a05      	ldr	r2, [sp, #20]
 8026c7e:	1aed      	subs	r5, r5, r3
 8026c80:	1ad3      	subs	r3, r2, r3
 8026c82:	9305      	str	r3, [sp, #20]
 8026c84:	9b07      	ldr	r3, [sp, #28]
 8026c86:	b31b      	cbz	r3, 8026cd0 <_dtoa_r+0x7a0>
 8026c88:	9b08      	ldr	r3, [sp, #32]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	f000 80af 	beq.w	8026dee <_dtoa_r+0x8be>
 8026c90:	2e00      	cmp	r6, #0
 8026c92:	dd13      	ble.n	8026cbc <_dtoa_r+0x78c>
 8026c94:	4639      	mov	r1, r7
 8026c96:	4632      	mov	r2, r6
 8026c98:	4620      	mov	r0, r4
 8026c9a:	f000 fc45 	bl	8027528 <__pow5mult>
 8026c9e:	ee18 2a10 	vmov	r2, s16
 8026ca2:	4601      	mov	r1, r0
 8026ca4:	4607      	mov	r7, r0
 8026ca6:	4620      	mov	r0, r4
 8026ca8:	f000 fb94 	bl	80273d4 <__multiply>
 8026cac:	ee18 1a10 	vmov	r1, s16
 8026cb0:	4680      	mov	r8, r0
 8026cb2:	4620      	mov	r0, r4
 8026cb4:	f000 fac0 	bl	8027238 <_Bfree>
 8026cb8:	ee08 8a10 	vmov	s16, r8
 8026cbc:	9b07      	ldr	r3, [sp, #28]
 8026cbe:	1b9a      	subs	r2, r3, r6
 8026cc0:	d006      	beq.n	8026cd0 <_dtoa_r+0x7a0>
 8026cc2:	ee18 1a10 	vmov	r1, s16
 8026cc6:	4620      	mov	r0, r4
 8026cc8:	f000 fc2e 	bl	8027528 <__pow5mult>
 8026ccc:	ee08 0a10 	vmov	s16, r0
 8026cd0:	2101      	movs	r1, #1
 8026cd2:	4620      	mov	r0, r4
 8026cd4:	f000 fb68 	bl	80273a8 <__i2b>
 8026cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026cda:	2b00      	cmp	r3, #0
 8026cdc:	4606      	mov	r6, r0
 8026cde:	f340 8088 	ble.w	8026df2 <_dtoa_r+0x8c2>
 8026ce2:	461a      	mov	r2, r3
 8026ce4:	4601      	mov	r1, r0
 8026ce6:	4620      	mov	r0, r4
 8026ce8:	f000 fc1e 	bl	8027528 <__pow5mult>
 8026cec:	9b06      	ldr	r3, [sp, #24]
 8026cee:	2b01      	cmp	r3, #1
 8026cf0:	4606      	mov	r6, r0
 8026cf2:	f340 8081 	ble.w	8026df8 <_dtoa_r+0x8c8>
 8026cf6:	f04f 0800 	mov.w	r8, #0
 8026cfa:	6933      	ldr	r3, [r6, #16]
 8026cfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8026d00:	6918      	ldr	r0, [r3, #16]
 8026d02:	f000 fb01 	bl	8027308 <__hi0bits>
 8026d06:	f1c0 0020 	rsb	r0, r0, #32
 8026d0a:	9b05      	ldr	r3, [sp, #20]
 8026d0c:	4418      	add	r0, r3
 8026d0e:	f010 001f 	ands.w	r0, r0, #31
 8026d12:	f000 8092 	beq.w	8026e3a <_dtoa_r+0x90a>
 8026d16:	f1c0 0320 	rsb	r3, r0, #32
 8026d1a:	2b04      	cmp	r3, #4
 8026d1c:	f340 808a 	ble.w	8026e34 <_dtoa_r+0x904>
 8026d20:	f1c0 001c 	rsb	r0, r0, #28
 8026d24:	9b04      	ldr	r3, [sp, #16]
 8026d26:	4403      	add	r3, r0
 8026d28:	9304      	str	r3, [sp, #16]
 8026d2a:	9b05      	ldr	r3, [sp, #20]
 8026d2c:	4403      	add	r3, r0
 8026d2e:	4405      	add	r5, r0
 8026d30:	9305      	str	r3, [sp, #20]
 8026d32:	9b04      	ldr	r3, [sp, #16]
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	dd07      	ble.n	8026d48 <_dtoa_r+0x818>
 8026d38:	ee18 1a10 	vmov	r1, s16
 8026d3c:	461a      	mov	r2, r3
 8026d3e:	4620      	mov	r0, r4
 8026d40:	f000 fc4c 	bl	80275dc <__lshift>
 8026d44:	ee08 0a10 	vmov	s16, r0
 8026d48:	9b05      	ldr	r3, [sp, #20]
 8026d4a:	2b00      	cmp	r3, #0
 8026d4c:	dd05      	ble.n	8026d5a <_dtoa_r+0x82a>
 8026d4e:	4631      	mov	r1, r6
 8026d50:	461a      	mov	r2, r3
 8026d52:	4620      	mov	r0, r4
 8026d54:	f000 fc42 	bl	80275dc <__lshift>
 8026d58:	4606      	mov	r6, r0
 8026d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	d06e      	beq.n	8026e3e <_dtoa_r+0x90e>
 8026d60:	ee18 0a10 	vmov	r0, s16
 8026d64:	4631      	mov	r1, r6
 8026d66:	f000 fca9 	bl	80276bc <__mcmp>
 8026d6a:	2800      	cmp	r0, #0
 8026d6c:	da67      	bge.n	8026e3e <_dtoa_r+0x90e>
 8026d6e:	9b00      	ldr	r3, [sp, #0]
 8026d70:	3b01      	subs	r3, #1
 8026d72:	ee18 1a10 	vmov	r1, s16
 8026d76:	9300      	str	r3, [sp, #0]
 8026d78:	220a      	movs	r2, #10
 8026d7a:	2300      	movs	r3, #0
 8026d7c:	4620      	mov	r0, r4
 8026d7e:	f000 fa7d 	bl	802727c <__multadd>
 8026d82:	9b08      	ldr	r3, [sp, #32]
 8026d84:	ee08 0a10 	vmov	s16, r0
 8026d88:	2b00      	cmp	r3, #0
 8026d8a:	f000 81b1 	beq.w	80270f0 <_dtoa_r+0xbc0>
 8026d8e:	2300      	movs	r3, #0
 8026d90:	4639      	mov	r1, r7
 8026d92:	220a      	movs	r2, #10
 8026d94:	4620      	mov	r0, r4
 8026d96:	f000 fa71 	bl	802727c <__multadd>
 8026d9a:	9b02      	ldr	r3, [sp, #8]
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	4607      	mov	r7, r0
 8026da0:	f300 808e 	bgt.w	8026ec0 <_dtoa_r+0x990>
 8026da4:	9b06      	ldr	r3, [sp, #24]
 8026da6:	2b02      	cmp	r3, #2
 8026da8:	dc51      	bgt.n	8026e4e <_dtoa_r+0x91e>
 8026daa:	e089      	b.n	8026ec0 <_dtoa_r+0x990>
 8026dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8026db2:	e74b      	b.n	8026c4c <_dtoa_r+0x71c>
 8026db4:	9b03      	ldr	r3, [sp, #12]
 8026db6:	1e5e      	subs	r6, r3, #1
 8026db8:	9b07      	ldr	r3, [sp, #28]
 8026dba:	42b3      	cmp	r3, r6
 8026dbc:	bfbf      	itttt	lt
 8026dbe:	9b07      	ldrlt	r3, [sp, #28]
 8026dc0:	9607      	strlt	r6, [sp, #28]
 8026dc2:	1af2      	sublt	r2, r6, r3
 8026dc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8026dc6:	bfb6      	itet	lt
 8026dc8:	189b      	addlt	r3, r3, r2
 8026dca:	1b9e      	subge	r6, r3, r6
 8026dcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8026dce:	9b03      	ldr	r3, [sp, #12]
 8026dd0:	bfb8      	it	lt
 8026dd2:	2600      	movlt	r6, #0
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	bfb7      	itett	lt
 8026dd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8026ddc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8026de0:	1a9d      	sublt	r5, r3, r2
 8026de2:	2300      	movlt	r3, #0
 8026de4:	e734      	b.n	8026c50 <_dtoa_r+0x720>
 8026de6:	9e07      	ldr	r6, [sp, #28]
 8026de8:	9d04      	ldr	r5, [sp, #16]
 8026dea:	9f08      	ldr	r7, [sp, #32]
 8026dec:	e73b      	b.n	8026c66 <_dtoa_r+0x736>
 8026dee:	9a07      	ldr	r2, [sp, #28]
 8026df0:	e767      	b.n	8026cc2 <_dtoa_r+0x792>
 8026df2:	9b06      	ldr	r3, [sp, #24]
 8026df4:	2b01      	cmp	r3, #1
 8026df6:	dc18      	bgt.n	8026e2a <_dtoa_r+0x8fa>
 8026df8:	f1ba 0f00 	cmp.w	sl, #0
 8026dfc:	d115      	bne.n	8026e2a <_dtoa_r+0x8fa>
 8026dfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026e02:	b993      	cbnz	r3, 8026e2a <_dtoa_r+0x8fa>
 8026e04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026e08:	0d1b      	lsrs	r3, r3, #20
 8026e0a:	051b      	lsls	r3, r3, #20
 8026e0c:	b183      	cbz	r3, 8026e30 <_dtoa_r+0x900>
 8026e0e:	9b04      	ldr	r3, [sp, #16]
 8026e10:	3301      	adds	r3, #1
 8026e12:	9304      	str	r3, [sp, #16]
 8026e14:	9b05      	ldr	r3, [sp, #20]
 8026e16:	3301      	adds	r3, #1
 8026e18:	9305      	str	r3, [sp, #20]
 8026e1a:	f04f 0801 	mov.w	r8, #1
 8026e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	f47f af6a 	bne.w	8026cfa <_dtoa_r+0x7ca>
 8026e26:	2001      	movs	r0, #1
 8026e28:	e76f      	b.n	8026d0a <_dtoa_r+0x7da>
 8026e2a:	f04f 0800 	mov.w	r8, #0
 8026e2e:	e7f6      	b.n	8026e1e <_dtoa_r+0x8ee>
 8026e30:	4698      	mov	r8, r3
 8026e32:	e7f4      	b.n	8026e1e <_dtoa_r+0x8ee>
 8026e34:	f43f af7d 	beq.w	8026d32 <_dtoa_r+0x802>
 8026e38:	4618      	mov	r0, r3
 8026e3a:	301c      	adds	r0, #28
 8026e3c:	e772      	b.n	8026d24 <_dtoa_r+0x7f4>
 8026e3e:	9b03      	ldr	r3, [sp, #12]
 8026e40:	2b00      	cmp	r3, #0
 8026e42:	dc37      	bgt.n	8026eb4 <_dtoa_r+0x984>
 8026e44:	9b06      	ldr	r3, [sp, #24]
 8026e46:	2b02      	cmp	r3, #2
 8026e48:	dd34      	ble.n	8026eb4 <_dtoa_r+0x984>
 8026e4a:	9b03      	ldr	r3, [sp, #12]
 8026e4c:	9302      	str	r3, [sp, #8]
 8026e4e:	9b02      	ldr	r3, [sp, #8]
 8026e50:	b96b      	cbnz	r3, 8026e6e <_dtoa_r+0x93e>
 8026e52:	4631      	mov	r1, r6
 8026e54:	2205      	movs	r2, #5
 8026e56:	4620      	mov	r0, r4
 8026e58:	f000 fa10 	bl	802727c <__multadd>
 8026e5c:	4601      	mov	r1, r0
 8026e5e:	4606      	mov	r6, r0
 8026e60:	ee18 0a10 	vmov	r0, s16
 8026e64:	f000 fc2a 	bl	80276bc <__mcmp>
 8026e68:	2800      	cmp	r0, #0
 8026e6a:	f73f adbb 	bgt.w	80269e4 <_dtoa_r+0x4b4>
 8026e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e70:	9d01      	ldr	r5, [sp, #4]
 8026e72:	43db      	mvns	r3, r3
 8026e74:	9300      	str	r3, [sp, #0]
 8026e76:	f04f 0800 	mov.w	r8, #0
 8026e7a:	4631      	mov	r1, r6
 8026e7c:	4620      	mov	r0, r4
 8026e7e:	f000 f9db 	bl	8027238 <_Bfree>
 8026e82:	2f00      	cmp	r7, #0
 8026e84:	f43f aea4 	beq.w	8026bd0 <_dtoa_r+0x6a0>
 8026e88:	f1b8 0f00 	cmp.w	r8, #0
 8026e8c:	d005      	beq.n	8026e9a <_dtoa_r+0x96a>
 8026e8e:	45b8      	cmp	r8, r7
 8026e90:	d003      	beq.n	8026e9a <_dtoa_r+0x96a>
 8026e92:	4641      	mov	r1, r8
 8026e94:	4620      	mov	r0, r4
 8026e96:	f000 f9cf 	bl	8027238 <_Bfree>
 8026e9a:	4639      	mov	r1, r7
 8026e9c:	4620      	mov	r0, r4
 8026e9e:	f000 f9cb 	bl	8027238 <_Bfree>
 8026ea2:	e695      	b.n	8026bd0 <_dtoa_r+0x6a0>
 8026ea4:	2600      	movs	r6, #0
 8026ea6:	4637      	mov	r7, r6
 8026ea8:	e7e1      	b.n	8026e6e <_dtoa_r+0x93e>
 8026eaa:	9700      	str	r7, [sp, #0]
 8026eac:	4637      	mov	r7, r6
 8026eae:	e599      	b.n	80269e4 <_dtoa_r+0x4b4>
 8026eb0:	40240000 	.word	0x40240000
 8026eb4:	9b08      	ldr	r3, [sp, #32]
 8026eb6:	2b00      	cmp	r3, #0
 8026eb8:	f000 80ca 	beq.w	8027050 <_dtoa_r+0xb20>
 8026ebc:	9b03      	ldr	r3, [sp, #12]
 8026ebe:	9302      	str	r3, [sp, #8]
 8026ec0:	2d00      	cmp	r5, #0
 8026ec2:	dd05      	ble.n	8026ed0 <_dtoa_r+0x9a0>
 8026ec4:	4639      	mov	r1, r7
 8026ec6:	462a      	mov	r2, r5
 8026ec8:	4620      	mov	r0, r4
 8026eca:	f000 fb87 	bl	80275dc <__lshift>
 8026ece:	4607      	mov	r7, r0
 8026ed0:	f1b8 0f00 	cmp.w	r8, #0
 8026ed4:	d05b      	beq.n	8026f8e <_dtoa_r+0xa5e>
 8026ed6:	6879      	ldr	r1, [r7, #4]
 8026ed8:	4620      	mov	r0, r4
 8026eda:	f000 f96d 	bl	80271b8 <_Balloc>
 8026ede:	4605      	mov	r5, r0
 8026ee0:	b928      	cbnz	r0, 8026eee <_dtoa_r+0x9be>
 8026ee2:	4b87      	ldr	r3, [pc, #540]	; (8027100 <_dtoa_r+0xbd0>)
 8026ee4:	4602      	mov	r2, r0
 8026ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8026eea:	f7ff bb3b 	b.w	8026564 <_dtoa_r+0x34>
 8026eee:	693a      	ldr	r2, [r7, #16]
 8026ef0:	3202      	adds	r2, #2
 8026ef2:	0092      	lsls	r2, r2, #2
 8026ef4:	f107 010c 	add.w	r1, r7, #12
 8026ef8:	300c      	adds	r0, #12
 8026efa:	f7fe fa9b 	bl	8025434 <memcpy>
 8026efe:	2201      	movs	r2, #1
 8026f00:	4629      	mov	r1, r5
 8026f02:	4620      	mov	r0, r4
 8026f04:	f000 fb6a 	bl	80275dc <__lshift>
 8026f08:	9b01      	ldr	r3, [sp, #4]
 8026f0a:	f103 0901 	add.w	r9, r3, #1
 8026f0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8026f12:	4413      	add	r3, r2
 8026f14:	9305      	str	r3, [sp, #20]
 8026f16:	f00a 0301 	and.w	r3, sl, #1
 8026f1a:	46b8      	mov	r8, r7
 8026f1c:	9304      	str	r3, [sp, #16]
 8026f1e:	4607      	mov	r7, r0
 8026f20:	4631      	mov	r1, r6
 8026f22:	ee18 0a10 	vmov	r0, s16
 8026f26:	f7ff fa77 	bl	8026418 <quorem>
 8026f2a:	4641      	mov	r1, r8
 8026f2c:	9002      	str	r0, [sp, #8]
 8026f2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8026f32:	ee18 0a10 	vmov	r0, s16
 8026f36:	f000 fbc1 	bl	80276bc <__mcmp>
 8026f3a:	463a      	mov	r2, r7
 8026f3c:	9003      	str	r0, [sp, #12]
 8026f3e:	4631      	mov	r1, r6
 8026f40:	4620      	mov	r0, r4
 8026f42:	f000 fbd7 	bl	80276f4 <__mdiff>
 8026f46:	68c2      	ldr	r2, [r0, #12]
 8026f48:	f109 3bff 	add.w	fp, r9, #4294967295
 8026f4c:	4605      	mov	r5, r0
 8026f4e:	bb02      	cbnz	r2, 8026f92 <_dtoa_r+0xa62>
 8026f50:	4601      	mov	r1, r0
 8026f52:	ee18 0a10 	vmov	r0, s16
 8026f56:	f000 fbb1 	bl	80276bc <__mcmp>
 8026f5a:	4602      	mov	r2, r0
 8026f5c:	4629      	mov	r1, r5
 8026f5e:	4620      	mov	r0, r4
 8026f60:	9207      	str	r2, [sp, #28]
 8026f62:	f000 f969 	bl	8027238 <_Bfree>
 8026f66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8026f6a:	ea43 0102 	orr.w	r1, r3, r2
 8026f6e:	9b04      	ldr	r3, [sp, #16]
 8026f70:	430b      	orrs	r3, r1
 8026f72:	464d      	mov	r5, r9
 8026f74:	d10f      	bne.n	8026f96 <_dtoa_r+0xa66>
 8026f76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026f7a:	d02a      	beq.n	8026fd2 <_dtoa_r+0xaa2>
 8026f7c:	9b03      	ldr	r3, [sp, #12]
 8026f7e:	2b00      	cmp	r3, #0
 8026f80:	dd02      	ble.n	8026f88 <_dtoa_r+0xa58>
 8026f82:	9b02      	ldr	r3, [sp, #8]
 8026f84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8026f88:	f88b a000 	strb.w	sl, [fp]
 8026f8c:	e775      	b.n	8026e7a <_dtoa_r+0x94a>
 8026f8e:	4638      	mov	r0, r7
 8026f90:	e7ba      	b.n	8026f08 <_dtoa_r+0x9d8>
 8026f92:	2201      	movs	r2, #1
 8026f94:	e7e2      	b.n	8026f5c <_dtoa_r+0xa2c>
 8026f96:	9b03      	ldr	r3, [sp, #12]
 8026f98:	2b00      	cmp	r3, #0
 8026f9a:	db04      	blt.n	8026fa6 <_dtoa_r+0xa76>
 8026f9c:	9906      	ldr	r1, [sp, #24]
 8026f9e:	430b      	orrs	r3, r1
 8026fa0:	9904      	ldr	r1, [sp, #16]
 8026fa2:	430b      	orrs	r3, r1
 8026fa4:	d122      	bne.n	8026fec <_dtoa_r+0xabc>
 8026fa6:	2a00      	cmp	r2, #0
 8026fa8:	ddee      	ble.n	8026f88 <_dtoa_r+0xa58>
 8026faa:	ee18 1a10 	vmov	r1, s16
 8026fae:	2201      	movs	r2, #1
 8026fb0:	4620      	mov	r0, r4
 8026fb2:	f000 fb13 	bl	80275dc <__lshift>
 8026fb6:	4631      	mov	r1, r6
 8026fb8:	ee08 0a10 	vmov	s16, r0
 8026fbc:	f000 fb7e 	bl	80276bc <__mcmp>
 8026fc0:	2800      	cmp	r0, #0
 8026fc2:	dc03      	bgt.n	8026fcc <_dtoa_r+0xa9c>
 8026fc4:	d1e0      	bne.n	8026f88 <_dtoa_r+0xa58>
 8026fc6:	f01a 0f01 	tst.w	sl, #1
 8026fca:	d0dd      	beq.n	8026f88 <_dtoa_r+0xa58>
 8026fcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026fd0:	d1d7      	bne.n	8026f82 <_dtoa_r+0xa52>
 8026fd2:	2339      	movs	r3, #57	; 0x39
 8026fd4:	f88b 3000 	strb.w	r3, [fp]
 8026fd8:	462b      	mov	r3, r5
 8026fda:	461d      	mov	r5, r3
 8026fdc:	3b01      	subs	r3, #1
 8026fde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026fe2:	2a39      	cmp	r2, #57	; 0x39
 8026fe4:	d071      	beq.n	80270ca <_dtoa_r+0xb9a>
 8026fe6:	3201      	adds	r2, #1
 8026fe8:	701a      	strb	r2, [r3, #0]
 8026fea:	e746      	b.n	8026e7a <_dtoa_r+0x94a>
 8026fec:	2a00      	cmp	r2, #0
 8026fee:	dd07      	ble.n	8027000 <_dtoa_r+0xad0>
 8026ff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026ff4:	d0ed      	beq.n	8026fd2 <_dtoa_r+0xaa2>
 8026ff6:	f10a 0301 	add.w	r3, sl, #1
 8026ffa:	f88b 3000 	strb.w	r3, [fp]
 8026ffe:	e73c      	b.n	8026e7a <_dtoa_r+0x94a>
 8027000:	9b05      	ldr	r3, [sp, #20]
 8027002:	f809 ac01 	strb.w	sl, [r9, #-1]
 8027006:	4599      	cmp	r9, r3
 8027008:	d047      	beq.n	802709a <_dtoa_r+0xb6a>
 802700a:	ee18 1a10 	vmov	r1, s16
 802700e:	2300      	movs	r3, #0
 8027010:	220a      	movs	r2, #10
 8027012:	4620      	mov	r0, r4
 8027014:	f000 f932 	bl	802727c <__multadd>
 8027018:	45b8      	cmp	r8, r7
 802701a:	ee08 0a10 	vmov	s16, r0
 802701e:	f04f 0300 	mov.w	r3, #0
 8027022:	f04f 020a 	mov.w	r2, #10
 8027026:	4641      	mov	r1, r8
 8027028:	4620      	mov	r0, r4
 802702a:	d106      	bne.n	802703a <_dtoa_r+0xb0a>
 802702c:	f000 f926 	bl	802727c <__multadd>
 8027030:	4680      	mov	r8, r0
 8027032:	4607      	mov	r7, r0
 8027034:	f109 0901 	add.w	r9, r9, #1
 8027038:	e772      	b.n	8026f20 <_dtoa_r+0x9f0>
 802703a:	f000 f91f 	bl	802727c <__multadd>
 802703e:	4639      	mov	r1, r7
 8027040:	4680      	mov	r8, r0
 8027042:	2300      	movs	r3, #0
 8027044:	220a      	movs	r2, #10
 8027046:	4620      	mov	r0, r4
 8027048:	f000 f918 	bl	802727c <__multadd>
 802704c:	4607      	mov	r7, r0
 802704e:	e7f1      	b.n	8027034 <_dtoa_r+0xb04>
 8027050:	9b03      	ldr	r3, [sp, #12]
 8027052:	9302      	str	r3, [sp, #8]
 8027054:	9d01      	ldr	r5, [sp, #4]
 8027056:	ee18 0a10 	vmov	r0, s16
 802705a:	4631      	mov	r1, r6
 802705c:	f7ff f9dc 	bl	8026418 <quorem>
 8027060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8027064:	9b01      	ldr	r3, [sp, #4]
 8027066:	f805 ab01 	strb.w	sl, [r5], #1
 802706a:	1aea      	subs	r2, r5, r3
 802706c:	9b02      	ldr	r3, [sp, #8]
 802706e:	4293      	cmp	r3, r2
 8027070:	dd09      	ble.n	8027086 <_dtoa_r+0xb56>
 8027072:	ee18 1a10 	vmov	r1, s16
 8027076:	2300      	movs	r3, #0
 8027078:	220a      	movs	r2, #10
 802707a:	4620      	mov	r0, r4
 802707c:	f000 f8fe 	bl	802727c <__multadd>
 8027080:	ee08 0a10 	vmov	s16, r0
 8027084:	e7e7      	b.n	8027056 <_dtoa_r+0xb26>
 8027086:	9b02      	ldr	r3, [sp, #8]
 8027088:	2b00      	cmp	r3, #0
 802708a:	bfc8      	it	gt
 802708c:	461d      	movgt	r5, r3
 802708e:	9b01      	ldr	r3, [sp, #4]
 8027090:	bfd8      	it	le
 8027092:	2501      	movle	r5, #1
 8027094:	441d      	add	r5, r3
 8027096:	f04f 0800 	mov.w	r8, #0
 802709a:	ee18 1a10 	vmov	r1, s16
 802709e:	2201      	movs	r2, #1
 80270a0:	4620      	mov	r0, r4
 80270a2:	f000 fa9b 	bl	80275dc <__lshift>
 80270a6:	4631      	mov	r1, r6
 80270a8:	ee08 0a10 	vmov	s16, r0
 80270ac:	f000 fb06 	bl	80276bc <__mcmp>
 80270b0:	2800      	cmp	r0, #0
 80270b2:	dc91      	bgt.n	8026fd8 <_dtoa_r+0xaa8>
 80270b4:	d102      	bne.n	80270bc <_dtoa_r+0xb8c>
 80270b6:	f01a 0f01 	tst.w	sl, #1
 80270ba:	d18d      	bne.n	8026fd8 <_dtoa_r+0xaa8>
 80270bc:	462b      	mov	r3, r5
 80270be:	461d      	mov	r5, r3
 80270c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80270c4:	2a30      	cmp	r2, #48	; 0x30
 80270c6:	d0fa      	beq.n	80270be <_dtoa_r+0xb8e>
 80270c8:	e6d7      	b.n	8026e7a <_dtoa_r+0x94a>
 80270ca:	9a01      	ldr	r2, [sp, #4]
 80270cc:	429a      	cmp	r2, r3
 80270ce:	d184      	bne.n	8026fda <_dtoa_r+0xaaa>
 80270d0:	9b00      	ldr	r3, [sp, #0]
 80270d2:	3301      	adds	r3, #1
 80270d4:	9300      	str	r3, [sp, #0]
 80270d6:	2331      	movs	r3, #49	; 0x31
 80270d8:	7013      	strb	r3, [r2, #0]
 80270da:	e6ce      	b.n	8026e7a <_dtoa_r+0x94a>
 80270dc:	4b09      	ldr	r3, [pc, #36]	; (8027104 <_dtoa_r+0xbd4>)
 80270de:	f7ff ba95 	b.w	802660c <_dtoa_r+0xdc>
 80270e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80270e4:	2b00      	cmp	r3, #0
 80270e6:	f47f aa6e 	bne.w	80265c6 <_dtoa_r+0x96>
 80270ea:	4b07      	ldr	r3, [pc, #28]	; (8027108 <_dtoa_r+0xbd8>)
 80270ec:	f7ff ba8e 	b.w	802660c <_dtoa_r+0xdc>
 80270f0:	9b02      	ldr	r3, [sp, #8]
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	dcae      	bgt.n	8027054 <_dtoa_r+0xb24>
 80270f6:	9b06      	ldr	r3, [sp, #24]
 80270f8:	2b02      	cmp	r3, #2
 80270fa:	f73f aea8 	bgt.w	8026e4e <_dtoa_r+0x91e>
 80270fe:	e7a9      	b.n	8027054 <_dtoa_r+0xb24>
 8027100:	0802a663 	.word	0x0802a663
 8027104:	0802a5c0 	.word	0x0802a5c0
 8027108:	0802a5e4 	.word	0x0802a5e4

0802710c <_fstat_r>:
 802710c:	b538      	push	{r3, r4, r5, lr}
 802710e:	4d07      	ldr	r5, [pc, #28]	; (802712c <_fstat_r+0x20>)
 8027110:	2300      	movs	r3, #0
 8027112:	4604      	mov	r4, r0
 8027114:	4608      	mov	r0, r1
 8027116:	4611      	mov	r1, r2
 8027118:	602b      	str	r3, [r5, #0]
 802711a:	f7dd ffe6 	bl	80050ea <_fstat>
 802711e:	1c43      	adds	r3, r0, #1
 8027120:	d102      	bne.n	8027128 <_fstat_r+0x1c>
 8027122:	682b      	ldr	r3, [r5, #0]
 8027124:	b103      	cbz	r3, 8027128 <_fstat_r+0x1c>
 8027126:	6023      	str	r3, [r4, #0]
 8027128:	bd38      	pop	{r3, r4, r5, pc}
 802712a:	bf00      	nop
 802712c:	2000aa54 	.word	0x2000aa54

08027130 <_isatty_r>:
 8027130:	b538      	push	{r3, r4, r5, lr}
 8027132:	4d06      	ldr	r5, [pc, #24]	; (802714c <_isatty_r+0x1c>)
 8027134:	2300      	movs	r3, #0
 8027136:	4604      	mov	r4, r0
 8027138:	4608      	mov	r0, r1
 802713a:	602b      	str	r3, [r5, #0]
 802713c:	f7dd ffe5 	bl	800510a <_isatty>
 8027140:	1c43      	adds	r3, r0, #1
 8027142:	d102      	bne.n	802714a <_isatty_r+0x1a>
 8027144:	682b      	ldr	r3, [r5, #0]
 8027146:	b103      	cbz	r3, 802714a <_isatty_r+0x1a>
 8027148:	6023      	str	r3, [r4, #0]
 802714a:	bd38      	pop	{r3, r4, r5, pc}
 802714c:	2000aa54 	.word	0x2000aa54

08027150 <_localeconv_r>:
 8027150:	4800      	ldr	r0, [pc, #0]	; (8027154 <_localeconv_r+0x4>)
 8027152:	4770      	bx	lr
 8027154:	2000020c 	.word	0x2000020c

08027158 <_lseek_r>:
 8027158:	b538      	push	{r3, r4, r5, lr}
 802715a:	4d07      	ldr	r5, [pc, #28]	; (8027178 <_lseek_r+0x20>)
 802715c:	4604      	mov	r4, r0
 802715e:	4608      	mov	r0, r1
 8027160:	4611      	mov	r1, r2
 8027162:	2200      	movs	r2, #0
 8027164:	602a      	str	r2, [r5, #0]
 8027166:	461a      	mov	r2, r3
 8027168:	f7dd ffda 	bl	8005120 <_lseek>
 802716c:	1c43      	adds	r3, r0, #1
 802716e:	d102      	bne.n	8027176 <_lseek_r+0x1e>
 8027170:	682b      	ldr	r3, [r5, #0]
 8027172:	b103      	cbz	r3, 8027176 <_lseek_r+0x1e>
 8027174:	6023      	str	r3, [r4, #0]
 8027176:	bd38      	pop	{r3, r4, r5, pc}
 8027178:	2000aa54 	.word	0x2000aa54

0802717c <__ascii_mbtowc>:
 802717c:	b082      	sub	sp, #8
 802717e:	b901      	cbnz	r1, 8027182 <__ascii_mbtowc+0x6>
 8027180:	a901      	add	r1, sp, #4
 8027182:	b142      	cbz	r2, 8027196 <__ascii_mbtowc+0x1a>
 8027184:	b14b      	cbz	r3, 802719a <__ascii_mbtowc+0x1e>
 8027186:	7813      	ldrb	r3, [r2, #0]
 8027188:	600b      	str	r3, [r1, #0]
 802718a:	7812      	ldrb	r2, [r2, #0]
 802718c:	1e10      	subs	r0, r2, #0
 802718e:	bf18      	it	ne
 8027190:	2001      	movne	r0, #1
 8027192:	b002      	add	sp, #8
 8027194:	4770      	bx	lr
 8027196:	4610      	mov	r0, r2
 8027198:	e7fb      	b.n	8027192 <__ascii_mbtowc+0x16>
 802719a:	f06f 0001 	mvn.w	r0, #1
 802719e:	e7f8      	b.n	8027192 <__ascii_mbtowc+0x16>

080271a0 <__malloc_lock>:
 80271a0:	4801      	ldr	r0, [pc, #4]	; (80271a8 <__malloc_lock+0x8>)
 80271a2:	f7fe b8d0 	b.w	8025346 <__retarget_lock_acquire_recursive>
 80271a6:	bf00      	nop
 80271a8:	2000aa48 	.word	0x2000aa48

080271ac <__malloc_unlock>:
 80271ac:	4801      	ldr	r0, [pc, #4]	; (80271b4 <__malloc_unlock+0x8>)
 80271ae:	f7fe b8cb 	b.w	8025348 <__retarget_lock_release_recursive>
 80271b2:	bf00      	nop
 80271b4:	2000aa48 	.word	0x2000aa48

080271b8 <_Balloc>:
 80271b8:	b570      	push	{r4, r5, r6, lr}
 80271ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80271bc:	4604      	mov	r4, r0
 80271be:	460d      	mov	r5, r1
 80271c0:	b976      	cbnz	r6, 80271e0 <_Balloc+0x28>
 80271c2:	2010      	movs	r0, #16
 80271c4:	f7fe f926 	bl	8025414 <malloc>
 80271c8:	4602      	mov	r2, r0
 80271ca:	6260      	str	r0, [r4, #36]	; 0x24
 80271cc:	b920      	cbnz	r0, 80271d8 <_Balloc+0x20>
 80271ce:	4b18      	ldr	r3, [pc, #96]	; (8027230 <_Balloc+0x78>)
 80271d0:	4818      	ldr	r0, [pc, #96]	; (8027234 <_Balloc+0x7c>)
 80271d2:	2166      	movs	r1, #102	; 0x66
 80271d4:	f000 fed6 	bl	8027f84 <__assert_func>
 80271d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80271dc:	6006      	str	r6, [r0, #0]
 80271de:	60c6      	str	r6, [r0, #12]
 80271e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80271e2:	68f3      	ldr	r3, [r6, #12]
 80271e4:	b183      	cbz	r3, 8027208 <_Balloc+0x50>
 80271e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80271e8:	68db      	ldr	r3, [r3, #12]
 80271ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80271ee:	b9b8      	cbnz	r0, 8027220 <_Balloc+0x68>
 80271f0:	2101      	movs	r1, #1
 80271f2:	fa01 f605 	lsl.w	r6, r1, r5
 80271f6:	1d72      	adds	r2, r6, #5
 80271f8:	0092      	lsls	r2, r2, #2
 80271fa:	4620      	mov	r0, r4
 80271fc:	f000 fb60 	bl	80278c0 <_calloc_r>
 8027200:	b160      	cbz	r0, 802721c <_Balloc+0x64>
 8027202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027206:	e00e      	b.n	8027226 <_Balloc+0x6e>
 8027208:	2221      	movs	r2, #33	; 0x21
 802720a:	2104      	movs	r1, #4
 802720c:	4620      	mov	r0, r4
 802720e:	f000 fb57 	bl	80278c0 <_calloc_r>
 8027212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027214:	60f0      	str	r0, [r6, #12]
 8027216:	68db      	ldr	r3, [r3, #12]
 8027218:	2b00      	cmp	r3, #0
 802721a:	d1e4      	bne.n	80271e6 <_Balloc+0x2e>
 802721c:	2000      	movs	r0, #0
 802721e:	bd70      	pop	{r4, r5, r6, pc}
 8027220:	6802      	ldr	r2, [r0, #0]
 8027222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027226:	2300      	movs	r3, #0
 8027228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802722c:	e7f7      	b.n	802721e <_Balloc+0x66>
 802722e:	bf00      	nop
 8027230:	0802a5f1 	.word	0x0802a5f1
 8027234:	0802a67e 	.word	0x0802a67e

08027238 <_Bfree>:
 8027238:	b570      	push	{r4, r5, r6, lr}
 802723a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802723c:	4605      	mov	r5, r0
 802723e:	460c      	mov	r4, r1
 8027240:	b976      	cbnz	r6, 8027260 <_Bfree+0x28>
 8027242:	2010      	movs	r0, #16
 8027244:	f7fe f8e6 	bl	8025414 <malloc>
 8027248:	4602      	mov	r2, r0
 802724a:	6268      	str	r0, [r5, #36]	; 0x24
 802724c:	b920      	cbnz	r0, 8027258 <_Bfree+0x20>
 802724e:	4b09      	ldr	r3, [pc, #36]	; (8027274 <_Bfree+0x3c>)
 8027250:	4809      	ldr	r0, [pc, #36]	; (8027278 <_Bfree+0x40>)
 8027252:	218a      	movs	r1, #138	; 0x8a
 8027254:	f000 fe96 	bl	8027f84 <__assert_func>
 8027258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802725c:	6006      	str	r6, [r0, #0]
 802725e:	60c6      	str	r6, [r0, #12]
 8027260:	b13c      	cbz	r4, 8027272 <_Bfree+0x3a>
 8027262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027264:	6862      	ldr	r2, [r4, #4]
 8027266:	68db      	ldr	r3, [r3, #12]
 8027268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802726c:	6021      	str	r1, [r4, #0]
 802726e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027272:	bd70      	pop	{r4, r5, r6, pc}
 8027274:	0802a5f1 	.word	0x0802a5f1
 8027278:	0802a67e 	.word	0x0802a67e

0802727c <__multadd>:
 802727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027280:	690d      	ldr	r5, [r1, #16]
 8027282:	4607      	mov	r7, r0
 8027284:	460c      	mov	r4, r1
 8027286:	461e      	mov	r6, r3
 8027288:	f101 0c14 	add.w	ip, r1, #20
 802728c:	2000      	movs	r0, #0
 802728e:	f8dc 3000 	ldr.w	r3, [ip]
 8027292:	b299      	uxth	r1, r3
 8027294:	fb02 6101 	mla	r1, r2, r1, r6
 8027298:	0c1e      	lsrs	r6, r3, #16
 802729a:	0c0b      	lsrs	r3, r1, #16
 802729c:	fb02 3306 	mla	r3, r2, r6, r3
 80272a0:	b289      	uxth	r1, r1
 80272a2:	3001      	adds	r0, #1
 80272a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80272a8:	4285      	cmp	r5, r0
 80272aa:	f84c 1b04 	str.w	r1, [ip], #4
 80272ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80272b2:	dcec      	bgt.n	802728e <__multadd+0x12>
 80272b4:	b30e      	cbz	r6, 80272fa <__multadd+0x7e>
 80272b6:	68a3      	ldr	r3, [r4, #8]
 80272b8:	42ab      	cmp	r3, r5
 80272ba:	dc19      	bgt.n	80272f0 <__multadd+0x74>
 80272bc:	6861      	ldr	r1, [r4, #4]
 80272be:	4638      	mov	r0, r7
 80272c0:	3101      	adds	r1, #1
 80272c2:	f7ff ff79 	bl	80271b8 <_Balloc>
 80272c6:	4680      	mov	r8, r0
 80272c8:	b928      	cbnz	r0, 80272d6 <__multadd+0x5a>
 80272ca:	4602      	mov	r2, r0
 80272cc:	4b0c      	ldr	r3, [pc, #48]	; (8027300 <__multadd+0x84>)
 80272ce:	480d      	ldr	r0, [pc, #52]	; (8027304 <__multadd+0x88>)
 80272d0:	21b5      	movs	r1, #181	; 0xb5
 80272d2:	f000 fe57 	bl	8027f84 <__assert_func>
 80272d6:	6922      	ldr	r2, [r4, #16]
 80272d8:	3202      	adds	r2, #2
 80272da:	f104 010c 	add.w	r1, r4, #12
 80272de:	0092      	lsls	r2, r2, #2
 80272e0:	300c      	adds	r0, #12
 80272e2:	f7fe f8a7 	bl	8025434 <memcpy>
 80272e6:	4621      	mov	r1, r4
 80272e8:	4638      	mov	r0, r7
 80272ea:	f7ff ffa5 	bl	8027238 <_Bfree>
 80272ee:	4644      	mov	r4, r8
 80272f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80272f4:	3501      	adds	r5, #1
 80272f6:	615e      	str	r6, [r3, #20]
 80272f8:	6125      	str	r5, [r4, #16]
 80272fa:	4620      	mov	r0, r4
 80272fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027300:	0802a663 	.word	0x0802a663
 8027304:	0802a67e 	.word	0x0802a67e

08027308 <__hi0bits>:
 8027308:	0c03      	lsrs	r3, r0, #16
 802730a:	041b      	lsls	r3, r3, #16
 802730c:	b9d3      	cbnz	r3, 8027344 <__hi0bits+0x3c>
 802730e:	0400      	lsls	r0, r0, #16
 8027310:	2310      	movs	r3, #16
 8027312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8027316:	bf04      	itt	eq
 8027318:	0200      	lsleq	r0, r0, #8
 802731a:	3308      	addeq	r3, #8
 802731c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027320:	bf04      	itt	eq
 8027322:	0100      	lsleq	r0, r0, #4
 8027324:	3304      	addeq	r3, #4
 8027326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802732a:	bf04      	itt	eq
 802732c:	0080      	lsleq	r0, r0, #2
 802732e:	3302      	addeq	r3, #2
 8027330:	2800      	cmp	r0, #0
 8027332:	db05      	blt.n	8027340 <__hi0bits+0x38>
 8027334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027338:	f103 0301 	add.w	r3, r3, #1
 802733c:	bf08      	it	eq
 802733e:	2320      	moveq	r3, #32
 8027340:	4618      	mov	r0, r3
 8027342:	4770      	bx	lr
 8027344:	2300      	movs	r3, #0
 8027346:	e7e4      	b.n	8027312 <__hi0bits+0xa>

08027348 <__lo0bits>:
 8027348:	6803      	ldr	r3, [r0, #0]
 802734a:	f013 0207 	ands.w	r2, r3, #7
 802734e:	4601      	mov	r1, r0
 8027350:	d00b      	beq.n	802736a <__lo0bits+0x22>
 8027352:	07da      	lsls	r2, r3, #31
 8027354:	d423      	bmi.n	802739e <__lo0bits+0x56>
 8027356:	0798      	lsls	r0, r3, #30
 8027358:	bf49      	itett	mi
 802735a:	085b      	lsrmi	r3, r3, #1
 802735c:	089b      	lsrpl	r3, r3, #2
 802735e:	2001      	movmi	r0, #1
 8027360:	600b      	strmi	r3, [r1, #0]
 8027362:	bf5c      	itt	pl
 8027364:	600b      	strpl	r3, [r1, #0]
 8027366:	2002      	movpl	r0, #2
 8027368:	4770      	bx	lr
 802736a:	b298      	uxth	r0, r3
 802736c:	b9a8      	cbnz	r0, 802739a <__lo0bits+0x52>
 802736e:	0c1b      	lsrs	r3, r3, #16
 8027370:	2010      	movs	r0, #16
 8027372:	b2da      	uxtb	r2, r3
 8027374:	b90a      	cbnz	r2, 802737a <__lo0bits+0x32>
 8027376:	3008      	adds	r0, #8
 8027378:	0a1b      	lsrs	r3, r3, #8
 802737a:	071a      	lsls	r2, r3, #28
 802737c:	bf04      	itt	eq
 802737e:	091b      	lsreq	r3, r3, #4
 8027380:	3004      	addeq	r0, #4
 8027382:	079a      	lsls	r2, r3, #30
 8027384:	bf04      	itt	eq
 8027386:	089b      	lsreq	r3, r3, #2
 8027388:	3002      	addeq	r0, #2
 802738a:	07da      	lsls	r2, r3, #31
 802738c:	d403      	bmi.n	8027396 <__lo0bits+0x4e>
 802738e:	085b      	lsrs	r3, r3, #1
 8027390:	f100 0001 	add.w	r0, r0, #1
 8027394:	d005      	beq.n	80273a2 <__lo0bits+0x5a>
 8027396:	600b      	str	r3, [r1, #0]
 8027398:	4770      	bx	lr
 802739a:	4610      	mov	r0, r2
 802739c:	e7e9      	b.n	8027372 <__lo0bits+0x2a>
 802739e:	2000      	movs	r0, #0
 80273a0:	4770      	bx	lr
 80273a2:	2020      	movs	r0, #32
 80273a4:	4770      	bx	lr
	...

080273a8 <__i2b>:
 80273a8:	b510      	push	{r4, lr}
 80273aa:	460c      	mov	r4, r1
 80273ac:	2101      	movs	r1, #1
 80273ae:	f7ff ff03 	bl	80271b8 <_Balloc>
 80273b2:	4602      	mov	r2, r0
 80273b4:	b928      	cbnz	r0, 80273c2 <__i2b+0x1a>
 80273b6:	4b05      	ldr	r3, [pc, #20]	; (80273cc <__i2b+0x24>)
 80273b8:	4805      	ldr	r0, [pc, #20]	; (80273d0 <__i2b+0x28>)
 80273ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80273be:	f000 fde1 	bl	8027f84 <__assert_func>
 80273c2:	2301      	movs	r3, #1
 80273c4:	6144      	str	r4, [r0, #20]
 80273c6:	6103      	str	r3, [r0, #16]
 80273c8:	bd10      	pop	{r4, pc}
 80273ca:	bf00      	nop
 80273cc:	0802a663 	.word	0x0802a663
 80273d0:	0802a67e 	.word	0x0802a67e

080273d4 <__multiply>:
 80273d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273d8:	4691      	mov	r9, r2
 80273da:	690a      	ldr	r2, [r1, #16]
 80273dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80273e0:	429a      	cmp	r2, r3
 80273e2:	bfb8      	it	lt
 80273e4:	460b      	movlt	r3, r1
 80273e6:	460c      	mov	r4, r1
 80273e8:	bfbc      	itt	lt
 80273ea:	464c      	movlt	r4, r9
 80273ec:	4699      	movlt	r9, r3
 80273ee:	6927      	ldr	r7, [r4, #16]
 80273f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80273f4:	68a3      	ldr	r3, [r4, #8]
 80273f6:	6861      	ldr	r1, [r4, #4]
 80273f8:	eb07 060a 	add.w	r6, r7, sl
 80273fc:	42b3      	cmp	r3, r6
 80273fe:	b085      	sub	sp, #20
 8027400:	bfb8      	it	lt
 8027402:	3101      	addlt	r1, #1
 8027404:	f7ff fed8 	bl	80271b8 <_Balloc>
 8027408:	b930      	cbnz	r0, 8027418 <__multiply+0x44>
 802740a:	4602      	mov	r2, r0
 802740c:	4b44      	ldr	r3, [pc, #272]	; (8027520 <__multiply+0x14c>)
 802740e:	4845      	ldr	r0, [pc, #276]	; (8027524 <__multiply+0x150>)
 8027410:	f240 115d 	movw	r1, #349	; 0x15d
 8027414:	f000 fdb6 	bl	8027f84 <__assert_func>
 8027418:	f100 0514 	add.w	r5, r0, #20
 802741c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027420:	462b      	mov	r3, r5
 8027422:	2200      	movs	r2, #0
 8027424:	4543      	cmp	r3, r8
 8027426:	d321      	bcc.n	802746c <__multiply+0x98>
 8027428:	f104 0314 	add.w	r3, r4, #20
 802742c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027430:	f109 0314 	add.w	r3, r9, #20
 8027434:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027438:	9202      	str	r2, [sp, #8]
 802743a:	1b3a      	subs	r2, r7, r4
 802743c:	3a15      	subs	r2, #21
 802743e:	f022 0203 	bic.w	r2, r2, #3
 8027442:	3204      	adds	r2, #4
 8027444:	f104 0115 	add.w	r1, r4, #21
 8027448:	428f      	cmp	r7, r1
 802744a:	bf38      	it	cc
 802744c:	2204      	movcc	r2, #4
 802744e:	9201      	str	r2, [sp, #4]
 8027450:	9a02      	ldr	r2, [sp, #8]
 8027452:	9303      	str	r3, [sp, #12]
 8027454:	429a      	cmp	r2, r3
 8027456:	d80c      	bhi.n	8027472 <__multiply+0x9e>
 8027458:	2e00      	cmp	r6, #0
 802745a:	dd03      	ble.n	8027464 <__multiply+0x90>
 802745c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027460:	2b00      	cmp	r3, #0
 8027462:	d05a      	beq.n	802751a <__multiply+0x146>
 8027464:	6106      	str	r6, [r0, #16]
 8027466:	b005      	add	sp, #20
 8027468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802746c:	f843 2b04 	str.w	r2, [r3], #4
 8027470:	e7d8      	b.n	8027424 <__multiply+0x50>
 8027472:	f8b3 a000 	ldrh.w	sl, [r3]
 8027476:	f1ba 0f00 	cmp.w	sl, #0
 802747a:	d024      	beq.n	80274c6 <__multiply+0xf2>
 802747c:	f104 0e14 	add.w	lr, r4, #20
 8027480:	46a9      	mov	r9, r5
 8027482:	f04f 0c00 	mov.w	ip, #0
 8027486:	f85e 2b04 	ldr.w	r2, [lr], #4
 802748a:	f8d9 1000 	ldr.w	r1, [r9]
 802748e:	fa1f fb82 	uxth.w	fp, r2
 8027492:	b289      	uxth	r1, r1
 8027494:	fb0a 110b 	mla	r1, sl, fp, r1
 8027498:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802749c:	f8d9 2000 	ldr.w	r2, [r9]
 80274a0:	4461      	add	r1, ip
 80274a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80274a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80274aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80274ae:	b289      	uxth	r1, r1
 80274b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80274b4:	4577      	cmp	r7, lr
 80274b6:	f849 1b04 	str.w	r1, [r9], #4
 80274ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80274be:	d8e2      	bhi.n	8027486 <__multiply+0xb2>
 80274c0:	9a01      	ldr	r2, [sp, #4]
 80274c2:	f845 c002 	str.w	ip, [r5, r2]
 80274c6:	9a03      	ldr	r2, [sp, #12]
 80274c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80274cc:	3304      	adds	r3, #4
 80274ce:	f1b9 0f00 	cmp.w	r9, #0
 80274d2:	d020      	beq.n	8027516 <__multiply+0x142>
 80274d4:	6829      	ldr	r1, [r5, #0]
 80274d6:	f104 0c14 	add.w	ip, r4, #20
 80274da:	46ae      	mov	lr, r5
 80274dc:	f04f 0a00 	mov.w	sl, #0
 80274e0:	f8bc b000 	ldrh.w	fp, [ip]
 80274e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80274e8:	fb09 220b 	mla	r2, r9, fp, r2
 80274ec:	4492      	add	sl, r2
 80274ee:	b289      	uxth	r1, r1
 80274f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80274f4:	f84e 1b04 	str.w	r1, [lr], #4
 80274f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80274fc:	f8be 1000 	ldrh.w	r1, [lr]
 8027500:	0c12      	lsrs	r2, r2, #16
 8027502:	fb09 1102 	mla	r1, r9, r2, r1
 8027506:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802750a:	4567      	cmp	r7, ip
 802750c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027510:	d8e6      	bhi.n	80274e0 <__multiply+0x10c>
 8027512:	9a01      	ldr	r2, [sp, #4]
 8027514:	50a9      	str	r1, [r5, r2]
 8027516:	3504      	adds	r5, #4
 8027518:	e79a      	b.n	8027450 <__multiply+0x7c>
 802751a:	3e01      	subs	r6, #1
 802751c:	e79c      	b.n	8027458 <__multiply+0x84>
 802751e:	bf00      	nop
 8027520:	0802a663 	.word	0x0802a663
 8027524:	0802a67e 	.word	0x0802a67e

08027528 <__pow5mult>:
 8027528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802752c:	4615      	mov	r5, r2
 802752e:	f012 0203 	ands.w	r2, r2, #3
 8027532:	4606      	mov	r6, r0
 8027534:	460f      	mov	r7, r1
 8027536:	d007      	beq.n	8027548 <__pow5mult+0x20>
 8027538:	4c25      	ldr	r4, [pc, #148]	; (80275d0 <__pow5mult+0xa8>)
 802753a:	3a01      	subs	r2, #1
 802753c:	2300      	movs	r3, #0
 802753e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027542:	f7ff fe9b 	bl	802727c <__multadd>
 8027546:	4607      	mov	r7, r0
 8027548:	10ad      	asrs	r5, r5, #2
 802754a:	d03d      	beq.n	80275c8 <__pow5mult+0xa0>
 802754c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802754e:	b97c      	cbnz	r4, 8027570 <__pow5mult+0x48>
 8027550:	2010      	movs	r0, #16
 8027552:	f7fd ff5f 	bl	8025414 <malloc>
 8027556:	4602      	mov	r2, r0
 8027558:	6270      	str	r0, [r6, #36]	; 0x24
 802755a:	b928      	cbnz	r0, 8027568 <__pow5mult+0x40>
 802755c:	4b1d      	ldr	r3, [pc, #116]	; (80275d4 <__pow5mult+0xac>)
 802755e:	481e      	ldr	r0, [pc, #120]	; (80275d8 <__pow5mult+0xb0>)
 8027560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027564:	f000 fd0e 	bl	8027f84 <__assert_func>
 8027568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802756c:	6004      	str	r4, [r0, #0]
 802756e:	60c4      	str	r4, [r0, #12]
 8027570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027578:	b94c      	cbnz	r4, 802758e <__pow5mult+0x66>
 802757a:	f240 2171 	movw	r1, #625	; 0x271
 802757e:	4630      	mov	r0, r6
 8027580:	f7ff ff12 	bl	80273a8 <__i2b>
 8027584:	2300      	movs	r3, #0
 8027586:	f8c8 0008 	str.w	r0, [r8, #8]
 802758a:	4604      	mov	r4, r0
 802758c:	6003      	str	r3, [r0, #0]
 802758e:	f04f 0900 	mov.w	r9, #0
 8027592:	07eb      	lsls	r3, r5, #31
 8027594:	d50a      	bpl.n	80275ac <__pow5mult+0x84>
 8027596:	4639      	mov	r1, r7
 8027598:	4622      	mov	r2, r4
 802759a:	4630      	mov	r0, r6
 802759c:	f7ff ff1a 	bl	80273d4 <__multiply>
 80275a0:	4639      	mov	r1, r7
 80275a2:	4680      	mov	r8, r0
 80275a4:	4630      	mov	r0, r6
 80275a6:	f7ff fe47 	bl	8027238 <_Bfree>
 80275aa:	4647      	mov	r7, r8
 80275ac:	106d      	asrs	r5, r5, #1
 80275ae:	d00b      	beq.n	80275c8 <__pow5mult+0xa0>
 80275b0:	6820      	ldr	r0, [r4, #0]
 80275b2:	b938      	cbnz	r0, 80275c4 <__pow5mult+0x9c>
 80275b4:	4622      	mov	r2, r4
 80275b6:	4621      	mov	r1, r4
 80275b8:	4630      	mov	r0, r6
 80275ba:	f7ff ff0b 	bl	80273d4 <__multiply>
 80275be:	6020      	str	r0, [r4, #0]
 80275c0:	f8c0 9000 	str.w	r9, [r0]
 80275c4:	4604      	mov	r4, r0
 80275c6:	e7e4      	b.n	8027592 <__pow5mult+0x6a>
 80275c8:	4638      	mov	r0, r7
 80275ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80275ce:	bf00      	nop
 80275d0:	0802a7d0 	.word	0x0802a7d0
 80275d4:	0802a5f1 	.word	0x0802a5f1
 80275d8:	0802a67e 	.word	0x0802a67e

080275dc <__lshift>:
 80275dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275e0:	460c      	mov	r4, r1
 80275e2:	6849      	ldr	r1, [r1, #4]
 80275e4:	6923      	ldr	r3, [r4, #16]
 80275e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80275ea:	68a3      	ldr	r3, [r4, #8]
 80275ec:	4607      	mov	r7, r0
 80275ee:	4691      	mov	r9, r2
 80275f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80275f4:	f108 0601 	add.w	r6, r8, #1
 80275f8:	42b3      	cmp	r3, r6
 80275fa:	db0b      	blt.n	8027614 <__lshift+0x38>
 80275fc:	4638      	mov	r0, r7
 80275fe:	f7ff fddb 	bl	80271b8 <_Balloc>
 8027602:	4605      	mov	r5, r0
 8027604:	b948      	cbnz	r0, 802761a <__lshift+0x3e>
 8027606:	4602      	mov	r2, r0
 8027608:	4b2a      	ldr	r3, [pc, #168]	; (80276b4 <__lshift+0xd8>)
 802760a:	482b      	ldr	r0, [pc, #172]	; (80276b8 <__lshift+0xdc>)
 802760c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027610:	f000 fcb8 	bl	8027f84 <__assert_func>
 8027614:	3101      	adds	r1, #1
 8027616:	005b      	lsls	r3, r3, #1
 8027618:	e7ee      	b.n	80275f8 <__lshift+0x1c>
 802761a:	2300      	movs	r3, #0
 802761c:	f100 0114 	add.w	r1, r0, #20
 8027620:	f100 0210 	add.w	r2, r0, #16
 8027624:	4618      	mov	r0, r3
 8027626:	4553      	cmp	r3, sl
 8027628:	db37      	blt.n	802769a <__lshift+0xbe>
 802762a:	6920      	ldr	r0, [r4, #16]
 802762c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027630:	f104 0314 	add.w	r3, r4, #20
 8027634:	f019 091f 	ands.w	r9, r9, #31
 8027638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802763c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027640:	d02f      	beq.n	80276a2 <__lshift+0xc6>
 8027642:	f1c9 0e20 	rsb	lr, r9, #32
 8027646:	468a      	mov	sl, r1
 8027648:	f04f 0c00 	mov.w	ip, #0
 802764c:	681a      	ldr	r2, [r3, #0]
 802764e:	fa02 f209 	lsl.w	r2, r2, r9
 8027652:	ea42 020c 	orr.w	r2, r2, ip
 8027656:	f84a 2b04 	str.w	r2, [sl], #4
 802765a:	f853 2b04 	ldr.w	r2, [r3], #4
 802765e:	4298      	cmp	r0, r3
 8027660:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027664:	d8f2      	bhi.n	802764c <__lshift+0x70>
 8027666:	1b03      	subs	r3, r0, r4
 8027668:	3b15      	subs	r3, #21
 802766a:	f023 0303 	bic.w	r3, r3, #3
 802766e:	3304      	adds	r3, #4
 8027670:	f104 0215 	add.w	r2, r4, #21
 8027674:	4290      	cmp	r0, r2
 8027676:	bf38      	it	cc
 8027678:	2304      	movcc	r3, #4
 802767a:	f841 c003 	str.w	ip, [r1, r3]
 802767e:	f1bc 0f00 	cmp.w	ip, #0
 8027682:	d001      	beq.n	8027688 <__lshift+0xac>
 8027684:	f108 0602 	add.w	r6, r8, #2
 8027688:	3e01      	subs	r6, #1
 802768a:	4638      	mov	r0, r7
 802768c:	612e      	str	r6, [r5, #16]
 802768e:	4621      	mov	r1, r4
 8027690:	f7ff fdd2 	bl	8027238 <_Bfree>
 8027694:	4628      	mov	r0, r5
 8027696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802769a:	f842 0f04 	str.w	r0, [r2, #4]!
 802769e:	3301      	adds	r3, #1
 80276a0:	e7c1      	b.n	8027626 <__lshift+0x4a>
 80276a2:	3904      	subs	r1, #4
 80276a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80276a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80276ac:	4298      	cmp	r0, r3
 80276ae:	d8f9      	bhi.n	80276a4 <__lshift+0xc8>
 80276b0:	e7ea      	b.n	8027688 <__lshift+0xac>
 80276b2:	bf00      	nop
 80276b4:	0802a663 	.word	0x0802a663
 80276b8:	0802a67e 	.word	0x0802a67e

080276bc <__mcmp>:
 80276bc:	b530      	push	{r4, r5, lr}
 80276be:	6902      	ldr	r2, [r0, #16]
 80276c0:	690c      	ldr	r4, [r1, #16]
 80276c2:	1b12      	subs	r2, r2, r4
 80276c4:	d10e      	bne.n	80276e4 <__mcmp+0x28>
 80276c6:	f100 0314 	add.w	r3, r0, #20
 80276ca:	3114      	adds	r1, #20
 80276cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80276d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80276d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80276d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80276dc:	42a5      	cmp	r5, r4
 80276de:	d003      	beq.n	80276e8 <__mcmp+0x2c>
 80276e0:	d305      	bcc.n	80276ee <__mcmp+0x32>
 80276e2:	2201      	movs	r2, #1
 80276e4:	4610      	mov	r0, r2
 80276e6:	bd30      	pop	{r4, r5, pc}
 80276e8:	4283      	cmp	r3, r0
 80276ea:	d3f3      	bcc.n	80276d4 <__mcmp+0x18>
 80276ec:	e7fa      	b.n	80276e4 <__mcmp+0x28>
 80276ee:	f04f 32ff 	mov.w	r2, #4294967295
 80276f2:	e7f7      	b.n	80276e4 <__mcmp+0x28>

080276f4 <__mdiff>:
 80276f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276f8:	460c      	mov	r4, r1
 80276fa:	4606      	mov	r6, r0
 80276fc:	4611      	mov	r1, r2
 80276fe:	4620      	mov	r0, r4
 8027700:	4690      	mov	r8, r2
 8027702:	f7ff ffdb 	bl	80276bc <__mcmp>
 8027706:	1e05      	subs	r5, r0, #0
 8027708:	d110      	bne.n	802772c <__mdiff+0x38>
 802770a:	4629      	mov	r1, r5
 802770c:	4630      	mov	r0, r6
 802770e:	f7ff fd53 	bl	80271b8 <_Balloc>
 8027712:	b930      	cbnz	r0, 8027722 <__mdiff+0x2e>
 8027714:	4b3a      	ldr	r3, [pc, #232]	; (8027800 <__mdiff+0x10c>)
 8027716:	4602      	mov	r2, r0
 8027718:	f240 2132 	movw	r1, #562	; 0x232
 802771c:	4839      	ldr	r0, [pc, #228]	; (8027804 <__mdiff+0x110>)
 802771e:	f000 fc31 	bl	8027f84 <__assert_func>
 8027722:	2301      	movs	r3, #1
 8027724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802772c:	bfa4      	itt	ge
 802772e:	4643      	movge	r3, r8
 8027730:	46a0      	movge	r8, r4
 8027732:	4630      	mov	r0, r6
 8027734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027738:	bfa6      	itte	ge
 802773a:	461c      	movge	r4, r3
 802773c:	2500      	movge	r5, #0
 802773e:	2501      	movlt	r5, #1
 8027740:	f7ff fd3a 	bl	80271b8 <_Balloc>
 8027744:	b920      	cbnz	r0, 8027750 <__mdiff+0x5c>
 8027746:	4b2e      	ldr	r3, [pc, #184]	; (8027800 <__mdiff+0x10c>)
 8027748:	4602      	mov	r2, r0
 802774a:	f44f 7110 	mov.w	r1, #576	; 0x240
 802774e:	e7e5      	b.n	802771c <__mdiff+0x28>
 8027750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027754:	6926      	ldr	r6, [r4, #16]
 8027756:	60c5      	str	r5, [r0, #12]
 8027758:	f104 0914 	add.w	r9, r4, #20
 802775c:	f108 0514 	add.w	r5, r8, #20
 8027760:	f100 0e14 	add.w	lr, r0, #20
 8027764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802776c:	f108 0210 	add.w	r2, r8, #16
 8027770:	46f2      	mov	sl, lr
 8027772:	2100      	movs	r1, #0
 8027774:	f859 3b04 	ldr.w	r3, [r9], #4
 8027778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802777c:	fa1f f883 	uxth.w	r8, r3
 8027780:	fa11 f18b 	uxtah	r1, r1, fp
 8027784:	0c1b      	lsrs	r3, r3, #16
 8027786:	eba1 0808 	sub.w	r8, r1, r8
 802778a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802778e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027792:	fa1f f888 	uxth.w	r8, r8
 8027796:	1419      	asrs	r1, r3, #16
 8027798:	454e      	cmp	r6, r9
 802779a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802779e:	f84a 3b04 	str.w	r3, [sl], #4
 80277a2:	d8e7      	bhi.n	8027774 <__mdiff+0x80>
 80277a4:	1b33      	subs	r3, r6, r4
 80277a6:	3b15      	subs	r3, #21
 80277a8:	f023 0303 	bic.w	r3, r3, #3
 80277ac:	3304      	adds	r3, #4
 80277ae:	3415      	adds	r4, #21
 80277b0:	42a6      	cmp	r6, r4
 80277b2:	bf38      	it	cc
 80277b4:	2304      	movcc	r3, #4
 80277b6:	441d      	add	r5, r3
 80277b8:	4473      	add	r3, lr
 80277ba:	469e      	mov	lr, r3
 80277bc:	462e      	mov	r6, r5
 80277be:	4566      	cmp	r6, ip
 80277c0:	d30e      	bcc.n	80277e0 <__mdiff+0xec>
 80277c2:	f10c 0203 	add.w	r2, ip, #3
 80277c6:	1b52      	subs	r2, r2, r5
 80277c8:	f022 0203 	bic.w	r2, r2, #3
 80277cc:	3d03      	subs	r5, #3
 80277ce:	45ac      	cmp	ip, r5
 80277d0:	bf38      	it	cc
 80277d2:	2200      	movcc	r2, #0
 80277d4:	441a      	add	r2, r3
 80277d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80277da:	b17b      	cbz	r3, 80277fc <__mdiff+0x108>
 80277dc:	6107      	str	r7, [r0, #16]
 80277de:	e7a3      	b.n	8027728 <__mdiff+0x34>
 80277e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80277e4:	fa11 f288 	uxtah	r2, r1, r8
 80277e8:	1414      	asrs	r4, r2, #16
 80277ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80277ee:	b292      	uxth	r2, r2
 80277f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80277f4:	f84e 2b04 	str.w	r2, [lr], #4
 80277f8:	1421      	asrs	r1, r4, #16
 80277fa:	e7e0      	b.n	80277be <__mdiff+0xca>
 80277fc:	3f01      	subs	r7, #1
 80277fe:	e7ea      	b.n	80277d6 <__mdiff+0xe2>
 8027800:	0802a663 	.word	0x0802a663
 8027804:	0802a67e 	.word	0x0802a67e

08027808 <__d2b>:
 8027808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802780c:	4689      	mov	r9, r1
 802780e:	2101      	movs	r1, #1
 8027810:	ec57 6b10 	vmov	r6, r7, d0
 8027814:	4690      	mov	r8, r2
 8027816:	f7ff fccf 	bl	80271b8 <_Balloc>
 802781a:	4604      	mov	r4, r0
 802781c:	b930      	cbnz	r0, 802782c <__d2b+0x24>
 802781e:	4602      	mov	r2, r0
 8027820:	4b25      	ldr	r3, [pc, #148]	; (80278b8 <__d2b+0xb0>)
 8027822:	4826      	ldr	r0, [pc, #152]	; (80278bc <__d2b+0xb4>)
 8027824:	f240 310a 	movw	r1, #778	; 0x30a
 8027828:	f000 fbac 	bl	8027f84 <__assert_func>
 802782c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027834:	bb35      	cbnz	r5, 8027884 <__d2b+0x7c>
 8027836:	2e00      	cmp	r6, #0
 8027838:	9301      	str	r3, [sp, #4]
 802783a:	d028      	beq.n	802788e <__d2b+0x86>
 802783c:	4668      	mov	r0, sp
 802783e:	9600      	str	r6, [sp, #0]
 8027840:	f7ff fd82 	bl	8027348 <__lo0bits>
 8027844:	9900      	ldr	r1, [sp, #0]
 8027846:	b300      	cbz	r0, 802788a <__d2b+0x82>
 8027848:	9a01      	ldr	r2, [sp, #4]
 802784a:	f1c0 0320 	rsb	r3, r0, #32
 802784e:	fa02 f303 	lsl.w	r3, r2, r3
 8027852:	430b      	orrs	r3, r1
 8027854:	40c2      	lsrs	r2, r0
 8027856:	6163      	str	r3, [r4, #20]
 8027858:	9201      	str	r2, [sp, #4]
 802785a:	9b01      	ldr	r3, [sp, #4]
 802785c:	61a3      	str	r3, [r4, #24]
 802785e:	2b00      	cmp	r3, #0
 8027860:	bf14      	ite	ne
 8027862:	2202      	movne	r2, #2
 8027864:	2201      	moveq	r2, #1
 8027866:	6122      	str	r2, [r4, #16]
 8027868:	b1d5      	cbz	r5, 80278a0 <__d2b+0x98>
 802786a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802786e:	4405      	add	r5, r0
 8027870:	f8c9 5000 	str.w	r5, [r9]
 8027874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027878:	f8c8 0000 	str.w	r0, [r8]
 802787c:	4620      	mov	r0, r4
 802787e:	b003      	add	sp, #12
 8027880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027888:	e7d5      	b.n	8027836 <__d2b+0x2e>
 802788a:	6161      	str	r1, [r4, #20]
 802788c:	e7e5      	b.n	802785a <__d2b+0x52>
 802788e:	a801      	add	r0, sp, #4
 8027890:	f7ff fd5a 	bl	8027348 <__lo0bits>
 8027894:	9b01      	ldr	r3, [sp, #4]
 8027896:	6163      	str	r3, [r4, #20]
 8027898:	2201      	movs	r2, #1
 802789a:	6122      	str	r2, [r4, #16]
 802789c:	3020      	adds	r0, #32
 802789e:	e7e3      	b.n	8027868 <__d2b+0x60>
 80278a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80278a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80278a8:	f8c9 0000 	str.w	r0, [r9]
 80278ac:	6918      	ldr	r0, [r3, #16]
 80278ae:	f7ff fd2b 	bl	8027308 <__hi0bits>
 80278b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80278b6:	e7df      	b.n	8027878 <__d2b+0x70>
 80278b8:	0802a663 	.word	0x0802a663
 80278bc:	0802a67e 	.word	0x0802a67e

080278c0 <_calloc_r>:
 80278c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80278c2:	fba1 2402 	umull	r2, r4, r1, r2
 80278c6:	b94c      	cbnz	r4, 80278dc <_calloc_r+0x1c>
 80278c8:	4611      	mov	r1, r2
 80278ca:	9201      	str	r2, [sp, #4]
 80278cc:	f7fd fe4e 	bl	802556c <_malloc_r>
 80278d0:	9a01      	ldr	r2, [sp, #4]
 80278d2:	4605      	mov	r5, r0
 80278d4:	b930      	cbnz	r0, 80278e4 <_calloc_r+0x24>
 80278d6:	4628      	mov	r0, r5
 80278d8:	b003      	add	sp, #12
 80278da:	bd30      	pop	{r4, r5, pc}
 80278dc:	220c      	movs	r2, #12
 80278de:	6002      	str	r2, [r0, #0]
 80278e0:	2500      	movs	r5, #0
 80278e2:	e7f8      	b.n	80278d6 <_calloc_r+0x16>
 80278e4:	4621      	mov	r1, r4
 80278e6:	f7fd fdcd 	bl	8025484 <memset>
 80278ea:	e7f4      	b.n	80278d6 <_calloc_r+0x16>

080278ec <_realloc_r>:
 80278ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278f0:	4680      	mov	r8, r0
 80278f2:	4614      	mov	r4, r2
 80278f4:	460e      	mov	r6, r1
 80278f6:	b921      	cbnz	r1, 8027902 <_realloc_r+0x16>
 80278f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80278fc:	4611      	mov	r1, r2
 80278fe:	f7fd be35 	b.w	802556c <_malloc_r>
 8027902:	b92a      	cbnz	r2, 8027910 <_realloc_r+0x24>
 8027904:	f7fd fdc6 	bl	8025494 <_free_r>
 8027908:	4625      	mov	r5, r4
 802790a:	4628      	mov	r0, r5
 802790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027910:	f000 fb68 	bl	8027fe4 <_malloc_usable_size_r>
 8027914:	4284      	cmp	r4, r0
 8027916:	4607      	mov	r7, r0
 8027918:	d802      	bhi.n	8027920 <_realloc_r+0x34>
 802791a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802791e:	d812      	bhi.n	8027946 <_realloc_r+0x5a>
 8027920:	4621      	mov	r1, r4
 8027922:	4640      	mov	r0, r8
 8027924:	f7fd fe22 	bl	802556c <_malloc_r>
 8027928:	4605      	mov	r5, r0
 802792a:	2800      	cmp	r0, #0
 802792c:	d0ed      	beq.n	802790a <_realloc_r+0x1e>
 802792e:	42bc      	cmp	r4, r7
 8027930:	4622      	mov	r2, r4
 8027932:	4631      	mov	r1, r6
 8027934:	bf28      	it	cs
 8027936:	463a      	movcs	r2, r7
 8027938:	f7fd fd7c 	bl	8025434 <memcpy>
 802793c:	4631      	mov	r1, r6
 802793e:	4640      	mov	r0, r8
 8027940:	f7fd fda8 	bl	8025494 <_free_r>
 8027944:	e7e1      	b.n	802790a <_realloc_r+0x1e>
 8027946:	4635      	mov	r5, r6
 8027948:	e7df      	b.n	802790a <_realloc_r+0x1e>

0802794a <__ssputs_r>:
 802794a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802794e:	688e      	ldr	r6, [r1, #8]
 8027950:	429e      	cmp	r6, r3
 8027952:	4682      	mov	sl, r0
 8027954:	460c      	mov	r4, r1
 8027956:	4690      	mov	r8, r2
 8027958:	461f      	mov	r7, r3
 802795a:	d838      	bhi.n	80279ce <__ssputs_r+0x84>
 802795c:	898a      	ldrh	r2, [r1, #12]
 802795e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027962:	d032      	beq.n	80279ca <__ssputs_r+0x80>
 8027964:	6825      	ldr	r5, [r4, #0]
 8027966:	6909      	ldr	r1, [r1, #16]
 8027968:	eba5 0901 	sub.w	r9, r5, r1
 802796c:	6965      	ldr	r5, [r4, #20]
 802796e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027976:	3301      	adds	r3, #1
 8027978:	444b      	add	r3, r9
 802797a:	106d      	asrs	r5, r5, #1
 802797c:	429d      	cmp	r5, r3
 802797e:	bf38      	it	cc
 8027980:	461d      	movcc	r5, r3
 8027982:	0553      	lsls	r3, r2, #21
 8027984:	d531      	bpl.n	80279ea <__ssputs_r+0xa0>
 8027986:	4629      	mov	r1, r5
 8027988:	f7fd fdf0 	bl	802556c <_malloc_r>
 802798c:	4606      	mov	r6, r0
 802798e:	b950      	cbnz	r0, 80279a6 <__ssputs_r+0x5c>
 8027990:	230c      	movs	r3, #12
 8027992:	f8ca 3000 	str.w	r3, [sl]
 8027996:	89a3      	ldrh	r3, [r4, #12]
 8027998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802799c:	81a3      	strh	r3, [r4, #12]
 802799e:	f04f 30ff 	mov.w	r0, #4294967295
 80279a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279a6:	6921      	ldr	r1, [r4, #16]
 80279a8:	464a      	mov	r2, r9
 80279aa:	f7fd fd43 	bl	8025434 <memcpy>
 80279ae:	89a3      	ldrh	r3, [r4, #12]
 80279b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80279b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80279b8:	81a3      	strh	r3, [r4, #12]
 80279ba:	6126      	str	r6, [r4, #16]
 80279bc:	6165      	str	r5, [r4, #20]
 80279be:	444e      	add	r6, r9
 80279c0:	eba5 0509 	sub.w	r5, r5, r9
 80279c4:	6026      	str	r6, [r4, #0]
 80279c6:	60a5      	str	r5, [r4, #8]
 80279c8:	463e      	mov	r6, r7
 80279ca:	42be      	cmp	r6, r7
 80279cc:	d900      	bls.n	80279d0 <__ssputs_r+0x86>
 80279ce:	463e      	mov	r6, r7
 80279d0:	6820      	ldr	r0, [r4, #0]
 80279d2:	4632      	mov	r2, r6
 80279d4:	4641      	mov	r1, r8
 80279d6:	f7fd fd3b 	bl	8025450 <memmove>
 80279da:	68a3      	ldr	r3, [r4, #8]
 80279dc:	1b9b      	subs	r3, r3, r6
 80279de:	60a3      	str	r3, [r4, #8]
 80279e0:	6823      	ldr	r3, [r4, #0]
 80279e2:	4433      	add	r3, r6
 80279e4:	6023      	str	r3, [r4, #0]
 80279e6:	2000      	movs	r0, #0
 80279e8:	e7db      	b.n	80279a2 <__ssputs_r+0x58>
 80279ea:	462a      	mov	r2, r5
 80279ec:	f7ff ff7e 	bl	80278ec <_realloc_r>
 80279f0:	4606      	mov	r6, r0
 80279f2:	2800      	cmp	r0, #0
 80279f4:	d1e1      	bne.n	80279ba <__ssputs_r+0x70>
 80279f6:	6921      	ldr	r1, [r4, #16]
 80279f8:	4650      	mov	r0, sl
 80279fa:	f7fd fd4b 	bl	8025494 <_free_r>
 80279fe:	e7c7      	b.n	8027990 <__ssputs_r+0x46>

08027a00 <_svfiprintf_r>:
 8027a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a04:	4698      	mov	r8, r3
 8027a06:	898b      	ldrh	r3, [r1, #12]
 8027a08:	061b      	lsls	r3, r3, #24
 8027a0a:	b09d      	sub	sp, #116	; 0x74
 8027a0c:	4607      	mov	r7, r0
 8027a0e:	460d      	mov	r5, r1
 8027a10:	4614      	mov	r4, r2
 8027a12:	d50e      	bpl.n	8027a32 <_svfiprintf_r+0x32>
 8027a14:	690b      	ldr	r3, [r1, #16]
 8027a16:	b963      	cbnz	r3, 8027a32 <_svfiprintf_r+0x32>
 8027a18:	2140      	movs	r1, #64	; 0x40
 8027a1a:	f7fd fda7 	bl	802556c <_malloc_r>
 8027a1e:	6028      	str	r0, [r5, #0]
 8027a20:	6128      	str	r0, [r5, #16]
 8027a22:	b920      	cbnz	r0, 8027a2e <_svfiprintf_r+0x2e>
 8027a24:	230c      	movs	r3, #12
 8027a26:	603b      	str	r3, [r7, #0]
 8027a28:	f04f 30ff 	mov.w	r0, #4294967295
 8027a2c:	e0d1      	b.n	8027bd2 <_svfiprintf_r+0x1d2>
 8027a2e:	2340      	movs	r3, #64	; 0x40
 8027a30:	616b      	str	r3, [r5, #20]
 8027a32:	2300      	movs	r3, #0
 8027a34:	9309      	str	r3, [sp, #36]	; 0x24
 8027a36:	2320      	movs	r3, #32
 8027a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a40:	2330      	movs	r3, #48	; 0x30
 8027a42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027bec <_svfiprintf_r+0x1ec>
 8027a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027a4a:	f04f 0901 	mov.w	r9, #1
 8027a4e:	4623      	mov	r3, r4
 8027a50:	469a      	mov	sl, r3
 8027a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a56:	b10a      	cbz	r2, 8027a5c <_svfiprintf_r+0x5c>
 8027a58:	2a25      	cmp	r2, #37	; 0x25
 8027a5a:	d1f9      	bne.n	8027a50 <_svfiprintf_r+0x50>
 8027a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8027a60:	d00b      	beq.n	8027a7a <_svfiprintf_r+0x7a>
 8027a62:	465b      	mov	r3, fp
 8027a64:	4622      	mov	r2, r4
 8027a66:	4629      	mov	r1, r5
 8027a68:	4638      	mov	r0, r7
 8027a6a:	f7ff ff6e 	bl	802794a <__ssputs_r>
 8027a6e:	3001      	adds	r0, #1
 8027a70:	f000 80aa 	beq.w	8027bc8 <_svfiprintf_r+0x1c8>
 8027a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a76:	445a      	add	r2, fp
 8027a78:	9209      	str	r2, [sp, #36]	; 0x24
 8027a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	f000 80a2 	beq.w	8027bc8 <_svfiprintf_r+0x1c8>
 8027a84:	2300      	movs	r3, #0
 8027a86:	f04f 32ff 	mov.w	r2, #4294967295
 8027a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a8e:	f10a 0a01 	add.w	sl, sl, #1
 8027a92:	9304      	str	r3, [sp, #16]
 8027a94:	9307      	str	r3, [sp, #28]
 8027a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8027a9c:	4654      	mov	r4, sl
 8027a9e:	2205      	movs	r2, #5
 8027aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027aa4:	4851      	ldr	r0, [pc, #324]	; (8027bec <_svfiprintf_r+0x1ec>)
 8027aa6:	f7d8 fb73 	bl	8000190 <memchr>
 8027aaa:	9a04      	ldr	r2, [sp, #16]
 8027aac:	b9d8      	cbnz	r0, 8027ae6 <_svfiprintf_r+0xe6>
 8027aae:	06d0      	lsls	r0, r2, #27
 8027ab0:	bf44      	itt	mi
 8027ab2:	2320      	movmi	r3, #32
 8027ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ab8:	0711      	lsls	r1, r2, #28
 8027aba:	bf44      	itt	mi
 8027abc:	232b      	movmi	r3, #43	; 0x2b
 8027abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8027ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8027ac8:	d015      	beq.n	8027af6 <_svfiprintf_r+0xf6>
 8027aca:	9a07      	ldr	r2, [sp, #28]
 8027acc:	4654      	mov	r4, sl
 8027ace:	2000      	movs	r0, #0
 8027ad0:	f04f 0c0a 	mov.w	ip, #10
 8027ad4:	4621      	mov	r1, r4
 8027ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027ada:	3b30      	subs	r3, #48	; 0x30
 8027adc:	2b09      	cmp	r3, #9
 8027ade:	d94e      	bls.n	8027b7e <_svfiprintf_r+0x17e>
 8027ae0:	b1b0      	cbz	r0, 8027b10 <_svfiprintf_r+0x110>
 8027ae2:	9207      	str	r2, [sp, #28]
 8027ae4:	e014      	b.n	8027b10 <_svfiprintf_r+0x110>
 8027ae6:	eba0 0308 	sub.w	r3, r0, r8
 8027aea:	fa09 f303 	lsl.w	r3, r9, r3
 8027aee:	4313      	orrs	r3, r2
 8027af0:	9304      	str	r3, [sp, #16]
 8027af2:	46a2      	mov	sl, r4
 8027af4:	e7d2      	b.n	8027a9c <_svfiprintf_r+0x9c>
 8027af6:	9b03      	ldr	r3, [sp, #12]
 8027af8:	1d19      	adds	r1, r3, #4
 8027afa:	681b      	ldr	r3, [r3, #0]
 8027afc:	9103      	str	r1, [sp, #12]
 8027afe:	2b00      	cmp	r3, #0
 8027b00:	bfbb      	ittet	lt
 8027b02:	425b      	neglt	r3, r3
 8027b04:	f042 0202 	orrlt.w	r2, r2, #2
 8027b08:	9307      	strge	r3, [sp, #28]
 8027b0a:	9307      	strlt	r3, [sp, #28]
 8027b0c:	bfb8      	it	lt
 8027b0e:	9204      	strlt	r2, [sp, #16]
 8027b10:	7823      	ldrb	r3, [r4, #0]
 8027b12:	2b2e      	cmp	r3, #46	; 0x2e
 8027b14:	d10c      	bne.n	8027b30 <_svfiprintf_r+0x130>
 8027b16:	7863      	ldrb	r3, [r4, #1]
 8027b18:	2b2a      	cmp	r3, #42	; 0x2a
 8027b1a:	d135      	bne.n	8027b88 <_svfiprintf_r+0x188>
 8027b1c:	9b03      	ldr	r3, [sp, #12]
 8027b1e:	1d1a      	adds	r2, r3, #4
 8027b20:	681b      	ldr	r3, [r3, #0]
 8027b22:	9203      	str	r2, [sp, #12]
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	bfb8      	it	lt
 8027b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8027b2c:	3402      	adds	r4, #2
 8027b2e:	9305      	str	r3, [sp, #20]
 8027b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027bfc <_svfiprintf_r+0x1fc>
 8027b34:	7821      	ldrb	r1, [r4, #0]
 8027b36:	2203      	movs	r2, #3
 8027b38:	4650      	mov	r0, sl
 8027b3a:	f7d8 fb29 	bl	8000190 <memchr>
 8027b3e:	b140      	cbz	r0, 8027b52 <_svfiprintf_r+0x152>
 8027b40:	2340      	movs	r3, #64	; 0x40
 8027b42:	eba0 000a 	sub.w	r0, r0, sl
 8027b46:	fa03 f000 	lsl.w	r0, r3, r0
 8027b4a:	9b04      	ldr	r3, [sp, #16]
 8027b4c:	4303      	orrs	r3, r0
 8027b4e:	3401      	adds	r4, #1
 8027b50:	9304      	str	r3, [sp, #16]
 8027b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b56:	4826      	ldr	r0, [pc, #152]	; (8027bf0 <_svfiprintf_r+0x1f0>)
 8027b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027b5c:	2206      	movs	r2, #6
 8027b5e:	f7d8 fb17 	bl	8000190 <memchr>
 8027b62:	2800      	cmp	r0, #0
 8027b64:	d038      	beq.n	8027bd8 <_svfiprintf_r+0x1d8>
 8027b66:	4b23      	ldr	r3, [pc, #140]	; (8027bf4 <_svfiprintf_r+0x1f4>)
 8027b68:	bb1b      	cbnz	r3, 8027bb2 <_svfiprintf_r+0x1b2>
 8027b6a:	9b03      	ldr	r3, [sp, #12]
 8027b6c:	3307      	adds	r3, #7
 8027b6e:	f023 0307 	bic.w	r3, r3, #7
 8027b72:	3308      	adds	r3, #8
 8027b74:	9303      	str	r3, [sp, #12]
 8027b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b78:	4433      	add	r3, r6
 8027b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8027b7c:	e767      	b.n	8027a4e <_svfiprintf_r+0x4e>
 8027b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8027b82:	460c      	mov	r4, r1
 8027b84:	2001      	movs	r0, #1
 8027b86:	e7a5      	b.n	8027ad4 <_svfiprintf_r+0xd4>
 8027b88:	2300      	movs	r3, #0
 8027b8a:	3401      	adds	r4, #1
 8027b8c:	9305      	str	r3, [sp, #20]
 8027b8e:	4619      	mov	r1, r3
 8027b90:	f04f 0c0a 	mov.w	ip, #10
 8027b94:	4620      	mov	r0, r4
 8027b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027b9a:	3a30      	subs	r2, #48	; 0x30
 8027b9c:	2a09      	cmp	r2, #9
 8027b9e:	d903      	bls.n	8027ba8 <_svfiprintf_r+0x1a8>
 8027ba0:	2b00      	cmp	r3, #0
 8027ba2:	d0c5      	beq.n	8027b30 <_svfiprintf_r+0x130>
 8027ba4:	9105      	str	r1, [sp, #20]
 8027ba6:	e7c3      	b.n	8027b30 <_svfiprintf_r+0x130>
 8027ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8027bac:	4604      	mov	r4, r0
 8027bae:	2301      	movs	r3, #1
 8027bb0:	e7f0      	b.n	8027b94 <_svfiprintf_r+0x194>
 8027bb2:	ab03      	add	r3, sp, #12
 8027bb4:	9300      	str	r3, [sp, #0]
 8027bb6:	462a      	mov	r2, r5
 8027bb8:	4b0f      	ldr	r3, [pc, #60]	; (8027bf8 <_svfiprintf_r+0x1f8>)
 8027bba:	a904      	add	r1, sp, #16
 8027bbc:	4638      	mov	r0, r7
 8027bbe:	f7fd fde9 	bl	8025794 <_printf_float>
 8027bc2:	1c42      	adds	r2, r0, #1
 8027bc4:	4606      	mov	r6, r0
 8027bc6:	d1d6      	bne.n	8027b76 <_svfiprintf_r+0x176>
 8027bc8:	89ab      	ldrh	r3, [r5, #12]
 8027bca:	065b      	lsls	r3, r3, #25
 8027bcc:	f53f af2c 	bmi.w	8027a28 <_svfiprintf_r+0x28>
 8027bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027bd2:	b01d      	add	sp, #116	; 0x74
 8027bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bd8:	ab03      	add	r3, sp, #12
 8027bda:	9300      	str	r3, [sp, #0]
 8027bdc:	462a      	mov	r2, r5
 8027bde:	4b06      	ldr	r3, [pc, #24]	; (8027bf8 <_svfiprintf_r+0x1f8>)
 8027be0:	a904      	add	r1, sp, #16
 8027be2:	4638      	mov	r0, r7
 8027be4:	f7fe f87a 	bl	8025cdc <_printf_i>
 8027be8:	e7eb      	b.n	8027bc2 <_svfiprintf_r+0x1c2>
 8027bea:	bf00      	nop
 8027bec:	0802a7dc 	.word	0x0802a7dc
 8027bf0:	0802a7e6 	.word	0x0802a7e6
 8027bf4:	08025795 	.word	0x08025795
 8027bf8:	0802794b 	.word	0x0802794b
 8027bfc:	0802a7e2 	.word	0x0802a7e2

08027c00 <__sfputc_r>:
 8027c00:	6893      	ldr	r3, [r2, #8]
 8027c02:	3b01      	subs	r3, #1
 8027c04:	2b00      	cmp	r3, #0
 8027c06:	b410      	push	{r4}
 8027c08:	6093      	str	r3, [r2, #8]
 8027c0a:	da08      	bge.n	8027c1e <__sfputc_r+0x1e>
 8027c0c:	6994      	ldr	r4, [r2, #24]
 8027c0e:	42a3      	cmp	r3, r4
 8027c10:	db01      	blt.n	8027c16 <__sfputc_r+0x16>
 8027c12:	290a      	cmp	r1, #10
 8027c14:	d103      	bne.n	8027c1e <__sfputc_r+0x1e>
 8027c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027c1a:	f7fe bb1b 	b.w	8026254 <__swbuf_r>
 8027c1e:	6813      	ldr	r3, [r2, #0]
 8027c20:	1c58      	adds	r0, r3, #1
 8027c22:	6010      	str	r0, [r2, #0]
 8027c24:	7019      	strb	r1, [r3, #0]
 8027c26:	4608      	mov	r0, r1
 8027c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027c2c:	4770      	bx	lr

08027c2e <__sfputs_r>:
 8027c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c30:	4606      	mov	r6, r0
 8027c32:	460f      	mov	r7, r1
 8027c34:	4614      	mov	r4, r2
 8027c36:	18d5      	adds	r5, r2, r3
 8027c38:	42ac      	cmp	r4, r5
 8027c3a:	d101      	bne.n	8027c40 <__sfputs_r+0x12>
 8027c3c:	2000      	movs	r0, #0
 8027c3e:	e007      	b.n	8027c50 <__sfputs_r+0x22>
 8027c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c44:	463a      	mov	r2, r7
 8027c46:	4630      	mov	r0, r6
 8027c48:	f7ff ffda 	bl	8027c00 <__sfputc_r>
 8027c4c:	1c43      	adds	r3, r0, #1
 8027c4e:	d1f3      	bne.n	8027c38 <__sfputs_r+0xa>
 8027c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027c54 <_vfiprintf_r>:
 8027c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c58:	460d      	mov	r5, r1
 8027c5a:	b09d      	sub	sp, #116	; 0x74
 8027c5c:	4614      	mov	r4, r2
 8027c5e:	4698      	mov	r8, r3
 8027c60:	4606      	mov	r6, r0
 8027c62:	b118      	cbz	r0, 8027c6c <_vfiprintf_r+0x18>
 8027c64:	6983      	ldr	r3, [r0, #24]
 8027c66:	b90b      	cbnz	r3, 8027c6c <_vfiprintf_r+0x18>
 8027c68:	f7fd faaa 	bl	80251c0 <__sinit>
 8027c6c:	4b89      	ldr	r3, [pc, #548]	; (8027e94 <_vfiprintf_r+0x240>)
 8027c6e:	429d      	cmp	r5, r3
 8027c70:	d11b      	bne.n	8027caa <_vfiprintf_r+0x56>
 8027c72:	6875      	ldr	r5, [r6, #4]
 8027c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027c76:	07d9      	lsls	r1, r3, #31
 8027c78:	d405      	bmi.n	8027c86 <_vfiprintf_r+0x32>
 8027c7a:	89ab      	ldrh	r3, [r5, #12]
 8027c7c:	059a      	lsls	r2, r3, #22
 8027c7e:	d402      	bmi.n	8027c86 <_vfiprintf_r+0x32>
 8027c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027c82:	f7fd fb60 	bl	8025346 <__retarget_lock_acquire_recursive>
 8027c86:	89ab      	ldrh	r3, [r5, #12]
 8027c88:	071b      	lsls	r3, r3, #28
 8027c8a:	d501      	bpl.n	8027c90 <_vfiprintf_r+0x3c>
 8027c8c:	692b      	ldr	r3, [r5, #16]
 8027c8e:	b9eb      	cbnz	r3, 8027ccc <_vfiprintf_r+0x78>
 8027c90:	4629      	mov	r1, r5
 8027c92:	4630      	mov	r0, r6
 8027c94:	f7fe fb42 	bl	802631c <__swsetup_r>
 8027c98:	b1c0      	cbz	r0, 8027ccc <_vfiprintf_r+0x78>
 8027c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027c9c:	07dc      	lsls	r4, r3, #31
 8027c9e:	d50e      	bpl.n	8027cbe <_vfiprintf_r+0x6a>
 8027ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8027ca4:	b01d      	add	sp, #116	; 0x74
 8027ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027caa:	4b7b      	ldr	r3, [pc, #492]	; (8027e98 <_vfiprintf_r+0x244>)
 8027cac:	429d      	cmp	r5, r3
 8027cae:	d101      	bne.n	8027cb4 <_vfiprintf_r+0x60>
 8027cb0:	68b5      	ldr	r5, [r6, #8]
 8027cb2:	e7df      	b.n	8027c74 <_vfiprintf_r+0x20>
 8027cb4:	4b79      	ldr	r3, [pc, #484]	; (8027e9c <_vfiprintf_r+0x248>)
 8027cb6:	429d      	cmp	r5, r3
 8027cb8:	bf08      	it	eq
 8027cba:	68f5      	ldreq	r5, [r6, #12]
 8027cbc:	e7da      	b.n	8027c74 <_vfiprintf_r+0x20>
 8027cbe:	89ab      	ldrh	r3, [r5, #12]
 8027cc0:	0598      	lsls	r0, r3, #22
 8027cc2:	d4ed      	bmi.n	8027ca0 <_vfiprintf_r+0x4c>
 8027cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027cc6:	f7fd fb3f 	bl	8025348 <__retarget_lock_release_recursive>
 8027cca:	e7e9      	b.n	8027ca0 <_vfiprintf_r+0x4c>
 8027ccc:	2300      	movs	r3, #0
 8027cce:	9309      	str	r3, [sp, #36]	; 0x24
 8027cd0:	2320      	movs	r3, #32
 8027cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8027cda:	2330      	movs	r3, #48	; 0x30
 8027cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027ea0 <_vfiprintf_r+0x24c>
 8027ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027ce4:	f04f 0901 	mov.w	r9, #1
 8027ce8:	4623      	mov	r3, r4
 8027cea:	469a      	mov	sl, r3
 8027cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027cf0:	b10a      	cbz	r2, 8027cf6 <_vfiprintf_r+0xa2>
 8027cf2:	2a25      	cmp	r2, #37	; 0x25
 8027cf4:	d1f9      	bne.n	8027cea <_vfiprintf_r+0x96>
 8027cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8027cfa:	d00b      	beq.n	8027d14 <_vfiprintf_r+0xc0>
 8027cfc:	465b      	mov	r3, fp
 8027cfe:	4622      	mov	r2, r4
 8027d00:	4629      	mov	r1, r5
 8027d02:	4630      	mov	r0, r6
 8027d04:	f7ff ff93 	bl	8027c2e <__sfputs_r>
 8027d08:	3001      	adds	r0, #1
 8027d0a:	f000 80aa 	beq.w	8027e62 <_vfiprintf_r+0x20e>
 8027d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027d10:	445a      	add	r2, fp
 8027d12:	9209      	str	r2, [sp, #36]	; 0x24
 8027d14:	f89a 3000 	ldrb.w	r3, [sl]
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	f000 80a2 	beq.w	8027e62 <_vfiprintf_r+0x20e>
 8027d1e:	2300      	movs	r3, #0
 8027d20:	f04f 32ff 	mov.w	r2, #4294967295
 8027d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027d28:	f10a 0a01 	add.w	sl, sl, #1
 8027d2c:	9304      	str	r3, [sp, #16]
 8027d2e:	9307      	str	r3, [sp, #28]
 8027d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027d34:	931a      	str	r3, [sp, #104]	; 0x68
 8027d36:	4654      	mov	r4, sl
 8027d38:	2205      	movs	r2, #5
 8027d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027d3e:	4858      	ldr	r0, [pc, #352]	; (8027ea0 <_vfiprintf_r+0x24c>)
 8027d40:	f7d8 fa26 	bl	8000190 <memchr>
 8027d44:	9a04      	ldr	r2, [sp, #16]
 8027d46:	b9d8      	cbnz	r0, 8027d80 <_vfiprintf_r+0x12c>
 8027d48:	06d1      	lsls	r1, r2, #27
 8027d4a:	bf44      	itt	mi
 8027d4c:	2320      	movmi	r3, #32
 8027d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027d52:	0713      	lsls	r3, r2, #28
 8027d54:	bf44      	itt	mi
 8027d56:	232b      	movmi	r3, #43	; 0x2b
 8027d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8027d60:	2b2a      	cmp	r3, #42	; 0x2a
 8027d62:	d015      	beq.n	8027d90 <_vfiprintf_r+0x13c>
 8027d64:	9a07      	ldr	r2, [sp, #28]
 8027d66:	4654      	mov	r4, sl
 8027d68:	2000      	movs	r0, #0
 8027d6a:	f04f 0c0a 	mov.w	ip, #10
 8027d6e:	4621      	mov	r1, r4
 8027d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027d74:	3b30      	subs	r3, #48	; 0x30
 8027d76:	2b09      	cmp	r3, #9
 8027d78:	d94e      	bls.n	8027e18 <_vfiprintf_r+0x1c4>
 8027d7a:	b1b0      	cbz	r0, 8027daa <_vfiprintf_r+0x156>
 8027d7c:	9207      	str	r2, [sp, #28]
 8027d7e:	e014      	b.n	8027daa <_vfiprintf_r+0x156>
 8027d80:	eba0 0308 	sub.w	r3, r0, r8
 8027d84:	fa09 f303 	lsl.w	r3, r9, r3
 8027d88:	4313      	orrs	r3, r2
 8027d8a:	9304      	str	r3, [sp, #16]
 8027d8c:	46a2      	mov	sl, r4
 8027d8e:	e7d2      	b.n	8027d36 <_vfiprintf_r+0xe2>
 8027d90:	9b03      	ldr	r3, [sp, #12]
 8027d92:	1d19      	adds	r1, r3, #4
 8027d94:	681b      	ldr	r3, [r3, #0]
 8027d96:	9103      	str	r1, [sp, #12]
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	bfbb      	ittet	lt
 8027d9c:	425b      	neglt	r3, r3
 8027d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8027da2:	9307      	strge	r3, [sp, #28]
 8027da4:	9307      	strlt	r3, [sp, #28]
 8027da6:	bfb8      	it	lt
 8027da8:	9204      	strlt	r2, [sp, #16]
 8027daa:	7823      	ldrb	r3, [r4, #0]
 8027dac:	2b2e      	cmp	r3, #46	; 0x2e
 8027dae:	d10c      	bne.n	8027dca <_vfiprintf_r+0x176>
 8027db0:	7863      	ldrb	r3, [r4, #1]
 8027db2:	2b2a      	cmp	r3, #42	; 0x2a
 8027db4:	d135      	bne.n	8027e22 <_vfiprintf_r+0x1ce>
 8027db6:	9b03      	ldr	r3, [sp, #12]
 8027db8:	1d1a      	adds	r2, r3, #4
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	9203      	str	r2, [sp, #12]
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	bfb8      	it	lt
 8027dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8027dc6:	3402      	adds	r4, #2
 8027dc8:	9305      	str	r3, [sp, #20]
 8027dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027eb0 <_vfiprintf_r+0x25c>
 8027dce:	7821      	ldrb	r1, [r4, #0]
 8027dd0:	2203      	movs	r2, #3
 8027dd2:	4650      	mov	r0, sl
 8027dd4:	f7d8 f9dc 	bl	8000190 <memchr>
 8027dd8:	b140      	cbz	r0, 8027dec <_vfiprintf_r+0x198>
 8027dda:	2340      	movs	r3, #64	; 0x40
 8027ddc:	eba0 000a 	sub.w	r0, r0, sl
 8027de0:	fa03 f000 	lsl.w	r0, r3, r0
 8027de4:	9b04      	ldr	r3, [sp, #16]
 8027de6:	4303      	orrs	r3, r0
 8027de8:	3401      	adds	r4, #1
 8027dea:	9304      	str	r3, [sp, #16]
 8027dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027df0:	482c      	ldr	r0, [pc, #176]	; (8027ea4 <_vfiprintf_r+0x250>)
 8027df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027df6:	2206      	movs	r2, #6
 8027df8:	f7d8 f9ca 	bl	8000190 <memchr>
 8027dfc:	2800      	cmp	r0, #0
 8027dfe:	d03f      	beq.n	8027e80 <_vfiprintf_r+0x22c>
 8027e00:	4b29      	ldr	r3, [pc, #164]	; (8027ea8 <_vfiprintf_r+0x254>)
 8027e02:	bb1b      	cbnz	r3, 8027e4c <_vfiprintf_r+0x1f8>
 8027e04:	9b03      	ldr	r3, [sp, #12]
 8027e06:	3307      	adds	r3, #7
 8027e08:	f023 0307 	bic.w	r3, r3, #7
 8027e0c:	3308      	adds	r3, #8
 8027e0e:	9303      	str	r3, [sp, #12]
 8027e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e12:	443b      	add	r3, r7
 8027e14:	9309      	str	r3, [sp, #36]	; 0x24
 8027e16:	e767      	b.n	8027ce8 <_vfiprintf_r+0x94>
 8027e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8027e1c:	460c      	mov	r4, r1
 8027e1e:	2001      	movs	r0, #1
 8027e20:	e7a5      	b.n	8027d6e <_vfiprintf_r+0x11a>
 8027e22:	2300      	movs	r3, #0
 8027e24:	3401      	adds	r4, #1
 8027e26:	9305      	str	r3, [sp, #20]
 8027e28:	4619      	mov	r1, r3
 8027e2a:	f04f 0c0a 	mov.w	ip, #10
 8027e2e:	4620      	mov	r0, r4
 8027e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027e34:	3a30      	subs	r2, #48	; 0x30
 8027e36:	2a09      	cmp	r2, #9
 8027e38:	d903      	bls.n	8027e42 <_vfiprintf_r+0x1ee>
 8027e3a:	2b00      	cmp	r3, #0
 8027e3c:	d0c5      	beq.n	8027dca <_vfiprintf_r+0x176>
 8027e3e:	9105      	str	r1, [sp, #20]
 8027e40:	e7c3      	b.n	8027dca <_vfiprintf_r+0x176>
 8027e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8027e46:	4604      	mov	r4, r0
 8027e48:	2301      	movs	r3, #1
 8027e4a:	e7f0      	b.n	8027e2e <_vfiprintf_r+0x1da>
 8027e4c:	ab03      	add	r3, sp, #12
 8027e4e:	9300      	str	r3, [sp, #0]
 8027e50:	462a      	mov	r2, r5
 8027e52:	4b16      	ldr	r3, [pc, #88]	; (8027eac <_vfiprintf_r+0x258>)
 8027e54:	a904      	add	r1, sp, #16
 8027e56:	4630      	mov	r0, r6
 8027e58:	f7fd fc9c 	bl	8025794 <_printf_float>
 8027e5c:	4607      	mov	r7, r0
 8027e5e:	1c78      	adds	r0, r7, #1
 8027e60:	d1d6      	bne.n	8027e10 <_vfiprintf_r+0x1bc>
 8027e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027e64:	07d9      	lsls	r1, r3, #31
 8027e66:	d405      	bmi.n	8027e74 <_vfiprintf_r+0x220>
 8027e68:	89ab      	ldrh	r3, [r5, #12]
 8027e6a:	059a      	lsls	r2, r3, #22
 8027e6c:	d402      	bmi.n	8027e74 <_vfiprintf_r+0x220>
 8027e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027e70:	f7fd fa6a 	bl	8025348 <__retarget_lock_release_recursive>
 8027e74:	89ab      	ldrh	r3, [r5, #12]
 8027e76:	065b      	lsls	r3, r3, #25
 8027e78:	f53f af12 	bmi.w	8027ca0 <_vfiprintf_r+0x4c>
 8027e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027e7e:	e711      	b.n	8027ca4 <_vfiprintf_r+0x50>
 8027e80:	ab03      	add	r3, sp, #12
 8027e82:	9300      	str	r3, [sp, #0]
 8027e84:	462a      	mov	r2, r5
 8027e86:	4b09      	ldr	r3, [pc, #36]	; (8027eac <_vfiprintf_r+0x258>)
 8027e88:	a904      	add	r1, sp, #16
 8027e8a:	4630      	mov	r0, r6
 8027e8c:	f7fd ff26 	bl	8025cdc <_printf_i>
 8027e90:	e7e4      	b.n	8027e5c <_vfiprintf_r+0x208>
 8027e92:	bf00      	nop
 8027e94:	0802a56c 	.word	0x0802a56c
 8027e98:	0802a58c 	.word	0x0802a58c
 8027e9c:	0802a54c 	.word	0x0802a54c
 8027ea0:	0802a7dc 	.word	0x0802a7dc
 8027ea4:	0802a7e6 	.word	0x0802a7e6
 8027ea8:	08025795 	.word	0x08025795
 8027eac:	08027c2f 	.word	0x08027c2f
 8027eb0:	0802a7e2 	.word	0x0802a7e2

08027eb4 <_putc_r>:
 8027eb4:	b570      	push	{r4, r5, r6, lr}
 8027eb6:	460d      	mov	r5, r1
 8027eb8:	4614      	mov	r4, r2
 8027eba:	4606      	mov	r6, r0
 8027ebc:	b118      	cbz	r0, 8027ec6 <_putc_r+0x12>
 8027ebe:	6983      	ldr	r3, [r0, #24]
 8027ec0:	b90b      	cbnz	r3, 8027ec6 <_putc_r+0x12>
 8027ec2:	f7fd f97d 	bl	80251c0 <__sinit>
 8027ec6:	4b1c      	ldr	r3, [pc, #112]	; (8027f38 <_putc_r+0x84>)
 8027ec8:	429c      	cmp	r4, r3
 8027eca:	d124      	bne.n	8027f16 <_putc_r+0x62>
 8027ecc:	6874      	ldr	r4, [r6, #4]
 8027ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027ed0:	07d8      	lsls	r0, r3, #31
 8027ed2:	d405      	bmi.n	8027ee0 <_putc_r+0x2c>
 8027ed4:	89a3      	ldrh	r3, [r4, #12]
 8027ed6:	0599      	lsls	r1, r3, #22
 8027ed8:	d402      	bmi.n	8027ee0 <_putc_r+0x2c>
 8027eda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027edc:	f7fd fa33 	bl	8025346 <__retarget_lock_acquire_recursive>
 8027ee0:	68a3      	ldr	r3, [r4, #8]
 8027ee2:	3b01      	subs	r3, #1
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	60a3      	str	r3, [r4, #8]
 8027ee8:	da05      	bge.n	8027ef6 <_putc_r+0x42>
 8027eea:	69a2      	ldr	r2, [r4, #24]
 8027eec:	4293      	cmp	r3, r2
 8027eee:	db1c      	blt.n	8027f2a <_putc_r+0x76>
 8027ef0:	b2eb      	uxtb	r3, r5
 8027ef2:	2b0a      	cmp	r3, #10
 8027ef4:	d019      	beq.n	8027f2a <_putc_r+0x76>
 8027ef6:	6823      	ldr	r3, [r4, #0]
 8027ef8:	1c5a      	adds	r2, r3, #1
 8027efa:	6022      	str	r2, [r4, #0]
 8027efc:	701d      	strb	r5, [r3, #0]
 8027efe:	b2ed      	uxtb	r5, r5
 8027f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027f02:	07da      	lsls	r2, r3, #31
 8027f04:	d405      	bmi.n	8027f12 <_putc_r+0x5e>
 8027f06:	89a3      	ldrh	r3, [r4, #12]
 8027f08:	059b      	lsls	r3, r3, #22
 8027f0a:	d402      	bmi.n	8027f12 <_putc_r+0x5e>
 8027f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027f0e:	f7fd fa1b 	bl	8025348 <__retarget_lock_release_recursive>
 8027f12:	4628      	mov	r0, r5
 8027f14:	bd70      	pop	{r4, r5, r6, pc}
 8027f16:	4b09      	ldr	r3, [pc, #36]	; (8027f3c <_putc_r+0x88>)
 8027f18:	429c      	cmp	r4, r3
 8027f1a:	d101      	bne.n	8027f20 <_putc_r+0x6c>
 8027f1c:	68b4      	ldr	r4, [r6, #8]
 8027f1e:	e7d6      	b.n	8027ece <_putc_r+0x1a>
 8027f20:	4b07      	ldr	r3, [pc, #28]	; (8027f40 <_putc_r+0x8c>)
 8027f22:	429c      	cmp	r4, r3
 8027f24:	bf08      	it	eq
 8027f26:	68f4      	ldreq	r4, [r6, #12]
 8027f28:	e7d1      	b.n	8027ece <_putc_r+0x1a>
 8027f2a:	4629      	mov	r1, r5
 8027f2c:	4622      	mov	r2, r4
 8027f2e:	4630      	mov	r0, r6
 8027f30:	f7fe f990 	bl	8026254 <__swbuf_r>
 8027f34:	4605      	mov	r5, r0
 8027f36:	e7e3      	b.n	8027f00 <_putc_r+0x4c>
 8027f38:	0802a56c 	.word	0x0802a56c
 8027f3c:	0802a58c 	.word	0x0802a58c
 8027f40:	0802a54c 	.word	0x0802a54c

08027f44 <_read_r>:
 8027f44:	b538      	push	{r3, r4, r5, lr}
 8027f46:	4d07      	ldr	r5, [pc, #28]	; (8027f64 <_read_r+0x20>)
 8027f48:	4604      	mov	r4, r0
 8027f4a:	4608      	mov	r0, r1
 8027f4c:	4611      	mov	r1, r2
 8027f4e:	2200      	movs	r2, #0
 8027f50:	602a      	str	r2, [r5, #0]
 8027f52:	461a      	mov	r2, r3
 8027f54:	f7dd f8a0 	bl	8005098 <_read>
 8027f58:	1c43      	adds	r3, r0, #1
 8027f5a:	d102      	bne.n	8027f62 <_read_r+0x1e>
 8027f5c:	682b      	ldr	r3, [r5, #0]
 8027f5e:	b103      	cbz	r3, 8027f62 <_read_r+0x1e>
 8027f60:	6023      	str	r3, [r4, #0]
 8027f62:	bd38      	pop	{r3, r4, r5, pc}
 8027f64:	2000aa54 	.word	0x2000aa54

08027f68 <__ascii_wctomb>:
 8027f68:	b149      	cbz	r1, 8027f7e <__ascii_wctomb+0x16>
 8027f6a:	2aff      	cmp	r2, #255	; 0xff
 8027f6c:	bf85      	ittet	hi
 8027f6e:	238a      	movhi	r3, #138	; 0x8a
 8027f70:	6003      	strhi	r3, [r0, #0]
 8027f72:	700a      	strbls	r2, [r1, #0]
 8027f74:	f04f 30ff 	movhi.w	r0, #4294967295
 8027f78:	bf98      	it	ls
 8027f7a:	2001      	movls	r0, #1
 8027f7c:	4770      	bx	lr
 8027f7e:	4608      	mov	r0, r1
 8027f80:	4770      	bx	lr
	...

08027f84 <__assert_func>:
 8027f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027f86:	4614      	mov	r4, r2
 8027f88:	461a      	mov	r2, r3
 8027f8a:	4b09      	ldr	r3, [pc, #36]	; (8027fb0 <__assert_func+0x2c>)
 8027f8c:	681b      	ldr	r3, [r3, #0]
 8027f8e:	4605      	mov	r5, r0
 8027f90:	68d8      	ldr	r0, [r3, #12]
 8027f92:	b14c      	cbz	r4, 8027fa8 <__assert_func+0x24>
 8027f94:	4b07      	ldr	r3, [pc, #28]	; (8027fb4 <__assert_func+0x30>)
 8027f96:	9100      	str	r1, [sp, #0]
 8027f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027f9c:	4906      	ldr	r1, [pc, #24]	; (8027fb8 <__assert_func+0x34>)
 8027f9e:	462b      	mov	r3, r5
 8027fa0:	f000 f80e 	bl	8027fc0 <fiprintf>
 8027fa4:	f000 f826 	bl	8027ff4 <abort>
 8027fa8:	4b04      	ldr	r3, [pc, #16]	; (8027fbc <__assert_func+0x38>)
 8027faa:	461c      	mov	r4, r3
 8027fac:	e7f3      	b.n	8027f96 <__assert_func+0x12>
 8027fae:	bf00      	nop
 8027fb0:	200000b8 	.word	0x200000b8
 8027fb4:	0802a7ed 	.word	0x0802a7ed
 8027fb8:	0802a7fa 	.word	0x0802a7fa
 8027fbc:	0802a828 	.word	0x0802a828

08027fc0 <fiprintf>:
 8027fc0:	b40e      	push	{r1, r2, r3}
 8027fc2:	b503      	push	{r0, r1, lr}
 8027fc4:	4601      	mov	r1, r0
 8027fc6:	ab03      	add	r3, sp, #12
 8027fc8:	4805      	ldr	r0, [pc, #20]	; (8027fe0 <fiprintf+0x20>)
 8027fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8027fce:	6800      	ldr	r0, [r0, #0]
 8027fd0:	9301      	str	r3, [sp, #4]
 8027fd2:	f7ff fe3f 	bl	8027c54 <_vfiprintf_r>
 8027fd6:	b002      	add	sp, #8
 8027fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8027fdc:	b003      	add	sp, #12
 8027fde:	4770      	bx	lr
 8027fe0:	200000b8 	.word	0x200000b8

08027fe4 <_malloc_usable_size_r>:
 8027fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027fe8:	1f18      	subs	r0, r3, #4
 8027fea:	2b00      	cmp	r3, #0
 8027fec:	bfbc      	itt	lt
 8027fee:	580b      	ldrlt	r3, [r1, r0]
 8027ff0:	18c0      	addlt	r0, r0, r3
 8027ff2:	4770      	bx	lr

08027ff4 <abort>:
 8027ff4:	b508      	push	{r3, lr}
 8027ff6:	2006      	movs	r0, #6
 8027ff8:	f000 f82c 	bl	8028054 <raise>
 8027ffc:	2001      	movs	r0, #1
 8027ffe:	f7dd f841 	bl	8005084 <_exit>

08028002 <_raise_r>:
 8028002:	291f      	cmp	r1, #31
 8028004:	b538      	push	{r3, r4, r5, lr}
 8028006:	4604      	mov	r4, r0
 8028008:	460d      	mov	r5, r1
 802800a:	d904      	bls.n	8028016 <_raise_r+0x14>
 802800c:	2316      	movs	r3, #22
 802800e:	6003      	str	r3, [r0, #0]
 8028010:	f04f 30ff 	mov.w	r0, #4294967295
 8028014:	bd38      	pop	{r3, r4, r5, pc}
 8028016:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028018:	b112      	cbz	r2, 8028020 <_raise_r+0x1e>
 802801a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802801e:	b94b      	cbnz	r3, 8028034 <_raise_r+0x32>
 8028020:	4620      	mov	r0, r4
 8028022:	f000 f831 	bl	8028088 <_getpid_r>
 8028026:	462a      	mov	r2, r5
 8028028:	4601      	mov	r1, r0
 802802a:	4620      	mov	r0, r4
 802802c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028030:	f000 b818 	b.w	8028064 <_kill_r>
 8028034:	2b01      	cmp	r3, #1
 8028036:	d00a      	beq.n	802804e <_raise_r+0x4c>
 8028038:	1c59      	adds	r1, r3, #1
 802803a:	d103      	bne.n	8028044 <_raise_r+0x42>
 802803c:	2316      	movs	r3, #22
 802803e:	6003      	str	r3, [r0, #0]
 8028040:	2001      	movs	r0, #1
 8028042:	e7e7      	b.n	8028014 <_raise_r+0x12>
 8028044:	2400      	movs	r4, #0
 8028046:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802804a:	4628      	mov	r0, r5
 802804c:	4798      	blx	r3
 802804e:	2000      	movs	r0, #0
 8028050:	e7e0      	b.n	8028014 <_raise_r+0x12>
	...

08028054 <raise>:
 8028054:	4b02      	ldr	r3, [pc, #8]	; (8028060 <raise+0xc>)
 8028056:	4601      	mov	r1, r0
 8028058:	6818      	ldr	r0, [r3, #0]
 802805a:	f7ff bfd2 	b.w	8028002 <_raise_r>
 802805e:	bf00      	nop
 8028060:	200000b8 	.word	0x200000b8

08028064 <_kill_r>:
 8028064:	b538      	push	{r3, r4, r5, lr}
 8028066:	4d07      	ldr	r5, [pc, #28]	; (8028084 <_kill_r+0x20>)
 8028068:	2300      	movs	r3, #0
 802806a:	4604      	mov	r4, r0
 802806c:	4608      	mov	r0, r1
 802806e:	4611      	mov	r1, r2
 8028070:	602b      	str	r3, [r5, #0]
 8028072:	f7dc fff7 	bl	8005064 <_kill>
 8028076:	1c43      	adds	r3, r0, #1
 8028078:	d102      	bne.n	8028080 <_kill_r+0x1c>
 802807a:	682b      	ldr	r3, [r5, #0]
 802807c:	b103      	cbz	r3, 8028080 <_kill_r+0x1c>
 802807e:	6023      	str	r3, [r4, #0]
 8028080:	bd38      	pop	{r3, r4, r5, pc}
 8028082:	bf00      	nop
 8028084:	2000aa54 	.word	0x2000aa54

08028088 <_getpid_r>:
 8028088:	f7dc bfe4 	b.w	8005054 <_getpid>

0802808c <_init>:
 802808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802808e:	bf00      	nop
 8028090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028092:	bc08      	pop	{r3}
 8028094:	469e      	mov	lr, r3
 8028096:	4770      	bx	lr

08028098 <_fini>:
 8028098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802809a:	bf00      	nop
 802809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802809e:	bc08      	pop	{r3}
 80280a0:	469e      	mov	lr, r3
 80280a2:	4770      	bx	lr
